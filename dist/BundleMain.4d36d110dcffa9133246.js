"use strict";
(self["webpackChunktelegram_t"] = self["webpackChunktelegram_t"] || []).push([["BundleMain"],{

/***/ "./src/bundles/main.ts":
/*!*****************************!*\
  !*** ./src/bundles/main.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LockScreen: () => (/* reexport safe */ _components_main_LockScreen__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   Main: () => (/* reexport safe */ _components_main_Main__WEBPACK_IMPORTED_MODULE_3__["default"])
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _components_main_Main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/main/Main */ "./src/components/main/Main.tsx");
/* harmony import */ var _components_main_LockScreen__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/main/LockScreen */ "./src/components/main/LockScreen.tsx");





if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
  // eslint-disable-next-line no-console
  console.log('>>> FINISH LOAD MAIN BUNDLE');
}
const {
  passcode: {
    isScreenLocked
  },
  connectionState
} = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
if (!connectionState && !isScreenLocked && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_MULTITAB_SUPPORTED) {
  (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().initApi();
}

/***/ }),

/***/ "./src/components/calls/ActiveCallHeader.async.tsx":
/*!*********************************************************!*\
  !*** ./src/components/calls/ActiveCallHeader.async.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ActiveCallHeaderAsync = props => {
  const {
    isActive
  } = props;
  const ActiveCallHeader = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Calls, 'ActiveCallHeader', !isActive);
  return ActiveCallHeader ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ActiveCallHeader, null) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ActiveCallHeaderAsync);

/***/ }),

/***/ "./src/components/calls/group/GroupCall.async.tsx":
/*!********************************************************!*\
  !*** ./src/components/calls/group/GroupCall.async.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GroupCallAsync = props => {
  const {
    groupCallId
  } = props;
  const GroupCall = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Calls, 'GroupCall', !groupCallId);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GroupCall ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GroupCall, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GroupCallAsync);

/***/ }),

/***/ "./src/components/calls/phone/PhoneCall.async.tsx":
/*!********************************************************!*\
  !*** ./src/components/calls/phone/PhoneCall.async.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const PhoneCallAsync = props => {
  const {
    isActive
  } = props;
  const PhoneCall = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Calls, 'PhoneCall', !isActive);
  return PhoneCall ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PhoneCall, null) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PhoneCallAsync);

/***/ }),

/***/ "./src/components/calls/phone/RatePhoneCallModal.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/calls/phone/RatePhoneCallModal.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const RatePhoneCallModalAsync = props => {
  const {
    isOpen
  } = props;
  const RatePhoneCallModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Calls, 'RatePhoneCallModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return RatePhoneCallModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(RatePhoneCallModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RatePhoneCallModalAsync);

/***/ }),

/***/ "./src/components/common/AboutMonetizationModal.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/common/AboutMonetizationModal.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const AboutMonetizationModalAsync = props => {
  const {
    isOpen
  } = props;
  const AboutMonetizationModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'AboutMonetizationModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return AboutMonetizationModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AboutMonetizationModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AboutMonetizationModalAsync);

/***/ }),

/***/ "./src/components/common/BadgeButton.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/BadgeButton.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _BadgeButton_module_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BadgeButton.module.scss */ "./src/components/common/BadgeButton.module.scss");



const BadgeButton = ({
  children,
  className,
  onClick
}) => {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_BadgeButton_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].root, onClick && _BadgeButton_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].clickable, className),
    onClick: onClick
  }, children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BadgeButton);

/***/ }),

/***/ "./src/components/common/CustomEmojiSetsModal.async.tsx":
/*!**************************************************************!*\
  !*** ./src/components/common/CustomEmojiSetsModal.async.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const CustomEmojiSetsModalAsync = props => {
  const {
    customEmojiSetIds
  } = props;
  const CustomEmojiSetsModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return CustomEmojiSetsModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(CustomEmojiSetsModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CustomEmojiSetsModalAsync);

/***/ }),

/***/ "./src/components/common/DeleteMessageModal.async.tsx":
/*!************************************************************!*\
  !*** ./src/components/common/DeleteMessageModal.async.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const DeleteMessageModalAsync = props => {
  const {
    isOpen
  } = props;
  const DeleteMessageModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'DeleteMessageModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return DeleteMessageModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(DeleteMessageModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DeleteMessageModalAsync);

/***/ }),

/***/ "./src/components/common/PreviewMedia.tsx":
/*!************************************************!*\
  !*** ./src/components/common/PreviewMedia.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useMediaTransitionDeprecated */ "./src/hooks/useMediaTransitionDeprecated.ts");
/* harmony import */ var _Media_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Media.scss */ "./src/components/common/Media.scss");










const PreviewMedia = ({
  media,
  idPrefix = 'preview-media',
  isProtected,
  observeIntersection,
  onClick,
  index
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_5__.useIsIntersecting)(ref, observeIntersection);
  const thumbDataUri = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageMediaThumbDataUri)(media);
  const mediaBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageMediaHash)(media, 'preview'), !isIntersecting);
  const transitionClassNames = (0,_hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_8__["default"])(mediaBlobUrl);
  const video = media.content.video;
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    onClick(index);
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    id: `${idPrefix}${index}`,
    className: "Media scroll-item",
    onClick: handleClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: thumbDataUri,
    className: "media-miniature",
    alt: "",
    draggable: !isProtected,
    decoding: "async",
    onContextMenu: isProtected ? _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__["default"] : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: mediaBlobUrl,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('full-media', 'media-miniature', transitionClassNames),
    alt: "",
    draggable: !isProtected,
    decoding: "async",
    onContextMenu: isProtected ? _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__["default"] : undefined
  }), video && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "video-duration"
  }, video.isGif ? 'GIF' : (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatMediaDuration)(video.duration)), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(PreviewMedia));

/***/ }),

/***/ "./src/components/common/PrivacySettingsNoticeModal.async.tsx":
/*!********************************************************************!*\
  !*** ./src/components/common/PrivacySettingsNoticeModal.async.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const PrivacySettingsNoticeModalAsync = props => {
  const {
    isOpen
  } = props;
  const PrivacySettingsNoticeModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return PrivacySettingsNoticeModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PrivacySettingsNoticeModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PrivacySettingsNoticeModalAsync);

/***/ }),

/***/ "./src/components/common/SeenByModal.async.tsx":
/*!*****************************************************!*\
  !*** ./src/components/common/SeenByModal.async.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const SeenByModalAsync = props => {
  const {
    isOpen
  } = props;
  const SeenByModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'SeenByModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return SeenByModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(SeenByModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SeenByModalAsync);

/***/ }),

/***/ "./src/components/common/StickerSetModal.async.tsx":
/*!*********************************************************!*\
  !*** ./src/components/common/StickerSetModal.async.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StickerSetModalAsync = props => {
  const {
    isOpen
  } = props;
  const StickerSetModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'StickerSetModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StickerSetModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StickerSetModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StickerSetModalAsync);

/***/ }),

/***/ "./src/components/common/TopicChip.tsx":
/*!*********************************************!*\
  !*** ./src/components/common/TopicChip.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_forumColors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/forumColors */ "./src/util/forumColors.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _TopicIcon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TopicIcon */ "./src/components/common/TopicIcon.tsx");
/* harmony import */ var _TopicChip_module_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TopicChip.module.scss */ "./src/components/common/TopicChip.module.scss");
/* harmony import */ var _assets_blank_png__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../assets/blank.png */ "./src/assets/blank.png");










const TOPIC_ICON_SIZE = 1.125 * _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_3__.REM;
const TopicChip = ({
  topic,
  className,
  onClick
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_TopicChip_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].root, className),
    style: `--topic-button-accent-color: var(${(0,_util_forumColors__WEBPACK_IMPORTED_MODULE_2__.getTopicColorCssVariable)(topic?.iconColor)})`,
    onClick: onClick
  }, topic ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TopicIcon__WEBPACK_IMPORTED_MODULE_7__["default"], {
    topic: topic,
    size: TOPIC_ICON_SIZE
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: _assets_blank_png__WEBPACK_IMPORTED_MODULE_9__,
    alt: "",
    draggable: false
  }), topic?.title ? (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(topic.title) : lang('Loading'), topic?.isClosed && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: "lock"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: "next"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(TopicChip));

/***/ }),

/***/ "./src/components/common/UnpinAllMessagesModal.async.tsx":
/*!***************************************************************!*\
  !*** ./src/components/common/UnpinAllMessagesModal.async.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const UnpinAllMessagesModalAsync = props => {
  const {
    isOpen
  } = props;
  const UnpinAllMessagesModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return UnpinAllMessagesModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(UnpinAllMessagesModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UnpinAllMessagesModalAsync);

/***/ }),

/***/ "./src/components/common/UnreadCounter.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/UnreadCounter.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_appBadge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/appBadge */ "./src/util/appBadge.ts");
/* harmony import */ var _util_folderManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/folderManager */ "./src/util/folderManager.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useFolderManager */ "./src/hooks/useFolderManager.ts");





const UnreadCounter = ({
  isForAppBadge
}) => {
  (0,_hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_4__.useFolderManagerForUnreadCounters)();
  const unreadNotificationsCount = (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_2__.getAllNotificationsCount)();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isForAppBadge) {
      (0,_util_appBadge__WEBPACK_IMPORTED_MODULE_1__.updateAppBadge)(unreadNotificationsCount);
    }
  }, [isForAppBadge, unreadNotificationsCount]);
  if (isForAppBadge || !unreadNotificationsCount) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "unread-count active"
  }, (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.formatIntegerCompact)(unreadNotificationsCount));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(UnreadCounter));

/***/ }),

/***/ "./src/components/common/VerificationMonetizationModal.async.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/common/VerificationMonetizationModal.async.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const VerificationMonetizationModalAsync = props => {
  const {
    modal
  } = props;
  const VerificationMonetizationModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'VerificationMonetizationModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return VerificationMonetizationModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(VerificationMonetizationModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VerificationMonetizationModalAsync);

/***/ }),

/***/ "./src/components/common/embedded/EmbeddedStory.tsx":
/*!**********************************************************!*\
  !*** ./src/components/common/embedded/EmbeddedStory.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_peerColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useFastClick__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useFastClick */ "./src/hooks/useFastClick.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _EmbeddedMessage_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./EmbeddedMessage.scss */ "./src/components/common/embedded/EmbeddedMessage.scss");














const NBSP = '\u00A0';
const EmbeddedStory = ({
  story,
  sender,
  noUserColors,
  isProtected,
  observeIntersectionForLoading,
  onClick
}) => {
  const {
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__["default"])();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_8__.useIsIntersecting)(ref, observeIntersectionForLoading);
  const isFullStory = story && 'content' in story;
  const isExpiredStory = story && 'isDeleted' in story;
  const isVideoStory = isFullStory && Boolean(story.content.video);
  const title = isFullStory ? 'Story' : isExpiredStory ? 'ExpiredStory' : 'Loading';
  const mediaBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__["default"])(isFullStory && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getStoryMediaHash)(story, 'pictogram'), !isIntersecting);
  const mediaThumbnail = isVideoStory ? story.content.video.thumbnail?.dataUri : undefined;
  const pictogramUrl = mediaBlobUrl || mediaThumbnail;
  const senderTitle = sender ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPeerTitle)(lang, sender) : undefined;
  const handleFastClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    if (story && !isExpiredStory) {
      onClick();
    } else {
      showNotification({
        message: lang('StoryNotFound')
      });
    }
  });
  const {
    handleClick,
    handleMouseDown
  } = (0,_hooks_useFastClick__WEBPACK_IMPORTED_MODULE_7__.useFastClick)(handleFastClick);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('EmbeddedMessage', (0,_helpers_peerColor__WEBPACK_IMPORTED_MODULE_5__.getPeerColorClass)(sender, noUserColors, true), pictogramUrl && 'with-thumb'),
    onClick: handleClick,
    onMouseDown: handleMouseDown
  }, pictogramUrl && renderPictogram(pictogramUrl, isProtected), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-text with-message-color"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "embedded-text-wrapper"
  }, isExpiredStory && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_12__["default"], {
    name: "story-expired",
    className: "embedded-origin-icon"
  }), isFullStory && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_12__["default"], {
    name: "story-reply",
    className: "embedded-origin-icon"
  }), lang(title)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-title"
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(senderTitle || NBSP))));
};
function renderPictogram(srcUrl, isProtected) {
  const {
    width,
    height
  } = (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.getPictogramDimensions)();
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "embedded-thumb"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: srcUrl,
    width: width,
    height: height,
    alt: "",
    className: "pictogram",
    draggable: false
  }), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  }));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmbeddedStory);

/***/ }),

/***/ "./src/components/common/gift/SavedGift.tsx":
/*!**************************************************!*\
  !*** ./src/components/common/gift/SavedGift.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_objects_customPeer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/objects/customPeer */ "./src/util/objects/customPeer.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _helpers_gifts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/gifts */ "./src/components/common/helpers/gifts.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../AnimatedIconFromSticker */ "./src/components/common/AnimatedIconFromSticker.tsx");
/* harmony import */ var _Avatar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _profile_RadialPatternBackground__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../profile/RadialPatternBackground */ "./src/components/common/profile/RadialPatternBackground.tsx");
/* harmony import */ var _GiftRibbon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./GiftRibbon */ "./src/components/common/gift/GiftRibbon.tsx");
/* harmony import */ var _SavedGift_module_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./SavedGift.module.scss */ "./src/components/common/gift/SavedGift.module.scss");
















const GIFT_STICKER_SIZE = 90;
const SavedGift = ({
  peerId,
  gift,
  fromPeer,
  observeIntersection
}) => {
  const {
    openGiftInfoModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [shouldPlay, play] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    openGiftInfoModal({
      peerId,
      gift
    });
  });
  const handleOnIntersect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(entry => {
    if (entry.isIntersecting) play();
  });
  const avatarPeer = gift.isNameHidden || !fromPeer ? _util_objects_customPeer__WEBPACK_IMPORTED_MODULE_3__.CUSTOM_PEER_HIDDEN : fromPeer;
  const sticker = (0,_helpers_gifts__WEBPACK_IMPORTED_MODULE_5__.getStickerFromGift)(gift.gift);
  const radialPatternBackdrop = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const {
      backdrop,
      pattern
    } = (0,_helpers_gifts__WEBPACK_IMPORTED_MODULE_5__.getGiftAttributes)(gift.gift) || {};
    if (!backdrop || !pattern) {
      return undefined;
    }
    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];
    const patternColor = backdrop.patternColor;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_profile_RadialPatternBackground__WEBPACK_IMPORTED_MODULE_13__["default"], {
      className: _SavedGift_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].radialPattern,
      backgroundColors: backdropColors,
      patternColor: patternColor,
      patternIcon: pattern.sticker
    });
  }, [gift.gift]);
  (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useOnIntersect)(ref, observeIntersection, sticker ? handleOnIntersect : undefined);
  if (!sticker) return undefined;
  const totalIssued = (0,_helpers_gifts__WEBPACK_IMPORTED_MODULE_5__.getTotalGiftAvailability)(gift.gift);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: _SavedGift_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].root,
    onClick: handleClick
  }, radialPatternBackdrop, !radialPatternBackdrop && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_11__["default"], {
    className: _SavedGift_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].avatar,
    peer: avatarPeer,
    size: "micro"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_10__["default"], {
    sticker: sticker,
    noLoop: true,
    play: shouldPlay,
    nonInteractive: true,
    size: GIFT_STICKER_SIZE
  }), gift.isUnsaved && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _SavedGift_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].hiddenGift
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_12__["default"], {
    name: "eye-closed-outline"
  })), totalIssued && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_GiftRibbon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    color: "blue",
    text: oldLang('Gift2Limited1OfRibbon', (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_4__.formatIntegerCompact)(totalIssued))
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  gift
}) => {
  const fromPeer = gift.fromId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeer)(global, gift.fromId) : undefined;
  return {
    fromPeer
  };
})(SavedGift)));

/***/ }),

/***/ "./src/components/common/hooks/useAnimatedEmoji.ts":
/*!*********************************************************!*\
  !*** ./src/components/common/hooks/useAnimatedEmoji.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useAnimatedEmoji)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_safePlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/safePlay */ "./src/util/safePlay.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");








const SIZE = 7 * _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.REM;
const INTERACTION_BUNCH_TIME = 1000;
const MS_DIVIDER = 1000;
const TIME_DEFAULT = 0;
function useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, emoji, preferredSize) {
  const {
    interactWithAnimatedEmoji,
    sendEmojiInteraction,
    sendWatchingEmojiInteraction
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);

  // eslint-disable-next-line no-null/no-null
  const audioRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const soundMediaData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__["default"])(soundId ? `document${soundId}` : undefined, !soundId);
  const size = preferredSize || SIZE;
  const style = (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_2__["default"])(`width: ${size}px`, `height: ${size}px`, emoji && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_ELECTRON && 'cursor: pointer');
  const interactions = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);
  const startedInteractions = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);
  const sendInteractionBunch = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    const container = ref.current;
    if (!container) return;
    sendEmojiInteraction({
      chatId: chatId,
      messageId: messageId,
      emoji: emoji,
      interactions: interactions.current
    });
    startedInteractions.current = undefined;
    interactions.current = undefined;
  });
  const play = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    const audio = audioRef.current;
    if (soundMediaData) {
      if (audio) {
        audio.pause();
        audio.remove();
      }
      audioRef.current = new Audio();
      audioRef.current.src = soundMediaData;
      (0,_util_safePlay__WEBPACK_IMPORTED_MODULE_3__["default"])(audioRef.current);
      audioRef.current.addEventListener('ended', () => {
        audioRef.current = undefined;
      }, {
        once: true
      });
    }
  });
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    play();
    const container = ref.current;
    if (!emoji || !container || !messageId || !chatId) {
      return;
    }
    const {
      x,
      y
    } = container.getBoundingClientRect();
    interactWithAnimatedEmoji({
      emoji: emoji,
      x,
      y,
      startSize: size,
      isReversed: !isOwn
    });
    if (!interactions.current) {
      interactions.current = [];
      startedInteractions.current = performance.now();
      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);
    }
    interactions.current.push(startedInteractions.current ? (performance.now() - startedInteractions.current) / MS_DIVIDER : TIME_DEFAULT);
  });

  // Set an end anchor for remote activated interaction
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const container = ref.current;
    if (!container || !activeEmojiInteractions) return;
    activeEmojiInteractions.forEach(({
      id,
      startSize,
      messageId: interactionMessageId
    }) => {
      if (startSize || messageId !== interactionMessageId) {
        return;
      }
      const {
        x,
        y
      } = container.getBoundingClientRect();
      sendWatchingEmojiInteraction({
        id,
        chatId: chatId,
        emoticon: emoji,
        startSize: size,
        x,
        y,
        isReversed: !isOwn
      });
      play();
    });
  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);
  return {
    ref,
    size,
    style,
    handleClick
  };
}

/***/ }),

/***/ "./src/components/left/ArchivedChats.async.tsx":
/*!*****************************************************!*\
  !*** ./src/components/left/ArchivedChats.async.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const ArchivedChatsAsync = props => {
  const ArchivedChats = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ArchivedChats');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ArchivedChats ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ArchivedChats, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArchivedChatsAsync);

/***/ }),

/***/ "./src/components/left/ConnectionStatusOverlay.tsx":
/*!*********************************************************!*\
  !*** ./src/components/left/ConnectionStatusOverlay.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _ConnectionStatusOverlay_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ConnectionStatusOverlay.scss */ "./src/components/left/ConnectionStatusOverlay.scss");







const ConnectionStatusOverlay = ({
  connectionStatus,
  connectionStatusText,
  onClick
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_1__["default"])();
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "ConnectionStatusOverlay",
    dir: lang.isRtl ? 'rtl' : undefined,
    onClick: onClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_4__["default"], {
    color: "black"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "state-text"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_5__["default"], {
    activeKey: connectionStatus,
    name: "slideFade"
  }, connectionStatusText)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_3__["default"], {
    round: true,
    size: "tiny",
    color: "translucent-black"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_2__["default"], {
    name: "close"
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ConnectionStatusOverlay));

/***/ }),

/***/ "./src/components/left/LeftColumn.tsx":
/*!********************************************!*\
  !*** ./src/components/left/LeftColumn.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _util_swipeController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/swipeController */ "./src/util/swipeController.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_reducers_useFoldersReducer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/reducers/useFoldersReducer */ "./src/hooks/reducers/useFoldersReducer.ts");
/* harmony import */ var _hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useHotkeys */ "./src/hooks/useHotkeys.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_usePrevious__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/usePrevious */ "./src/hooks/usePrevious.ts");
/* harmony import */ var _hooks_useStateRef__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _ArchivedChats_async__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ArchivedChats.async */ "./src/components/left/ArchivedChats.async.tsx");
/* harmony import */ var _main_LeftMain__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./main/LeftMain */ "./src/components/left/main/LeftMain.tsx");
/* harmony import */ var _newChat_NewChat_async__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./newChat/NewChat.async */ "./src/components/left/newChat/NewChat.async.tsx");
/* harmony import */ var _settings_Settings_async__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./settings/Settings.async */ "./src/components/left/settings/Settings.async.tsx");
/* harmony import */ var _LeftColumn_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./LeftColumn.scss */ "./src/components/left/LeftColumn.scss");



















var ContentType = /*#__PURE__*/function (ContentType) {
  ContentType[ContentType["Main"] = 0] = "Main";
  ContentType[ContentType["Settings"] = 1] = "Settings";
  ContentType[ContentType["Archived"] = 2] = "Archived";
  ContentType[ContentType["NewGroup"] = 3] = "NewGroup";
  ContentType[ContentType["NewChannel"] = 4] = "NewChannel";
  return ContentType;
}(ContentType || {});
const RENDER_COUNT = Object.keys(ContentType).length / 2;
const RESET_TRANSITION_DELAY_MS = 250;
function LeftColumn({
  ref,
  searchQuery,
  searchDate,
  isFirstChatFolderActive,
  shouldSkipHistoryAnimations,
  currentUserId,
  hasPasscode,
  nextSettingsScreen,
  nextFoldersAction,
  isChatOpen,
  isAppUpdateAvailable,
  isElectronUpdateAvailable,
  isForumPanelOpen,
  forumPanelChatId,
  isClosingSearch,
  archiveSettings,
  isArchivedStoryRibbonShown
}) {
  const {
    setGlobalSearchQuery,
    setGlobalSearchClosing,
    setGlobalSearchChatId,
    resetChatCreation,
    setGlobalSearchDate,
    loadPasswordInfo,
    clearTwoFaError,
    openChat,
    requestNextSettingsScreen
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [content, setContent] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList);
  const [settingsScreen, setSettingsScreen] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Main);
  const [contactsFilter, setContactsFilter] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [foldersState, foldersDispatch] = (0,_hooks_reducers_useFoldersReducer__WEBPACK_IMPORTED_MODULE_7__["default"])();

  // Used to reset child components in background.
  const [lastResetTime, setLastResetTime] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  let contentType = ContentType.Main;
  switch (content) {
    case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Archived:
      contentType = ContentType.Archived;
      break;
    case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Settings:
      contentType = ContentType.Settings;
      break;
    case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewChannelStep1:
    case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewChannelStep2:
      contentType = ContentType.NewChannel;
      break;
    case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewGroupStep1:
    case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewGroupStep2:
      contentType = ContentType.NewGroup;
      break;
  }
  const handleReset = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(forceReturnToChatList => {
    function fullReset() {
      setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList);
      setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Main);
      setContactsFilter('');
      setGlobalSearchClosing({
        isClosing: true
      });
      resetChatCreation();
      setTimeout(() => {
        setGlobalSearchQuery({
          query: ''
        });
        setGlobalSearchDate({
          date: undefined
        });
        setGlobalSearchChatId({
          id: undefined
        });
        setGlobalSearchClosing({
          isClosing: false
        });
        setLastResetTime(Date.now());
      }, RESET_TRANSITION_DELAY_MS);
    }
    if (forceReturnToChatList === true) {
      fullReset();
      return;
    }
    if (content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewGroupStep2) {
      setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewGroupStep1);
      return;
    }
    if (content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewChannelStep2) {
      setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewChannelStep1);
      return;
    }
    if (content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewGroupStep1) {
      const pickerSearchInput = document.getElementById('new-group-picker-search');
      if (pickerSearchInput) {
        pickerSearchInput.blur();
      }
    }
    if (content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Settings) {
      switch (settingsScreen) {
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.EditProfile:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Folders:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.General:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Notifications:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.DataStorage:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Privacy:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Performance:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.ActiveSessions:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Language:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Stickers:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Experimental:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Main);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.GeneralChatBackground:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.General);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.GeneralChatBackgroundColor:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.GeneralChatBackground);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneNumber:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyAddByPhone:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyLastSeen:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyProfilePhoto:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBio:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBirthday:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGifts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneCall:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneP2P:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyForwarding:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGroupChats:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyVoiceMessages:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyMessages:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBlockedUsers:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.ActiveWebsites:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaDisabled:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaEnabled:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaCongratulations:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeDisabled:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeEnabled:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeCongratulations:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Privacy);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeNewPasscode:
          setSettingsScreen(hasPasscode ? _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeEnabled : _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeDisabled);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeChangePasscodeCurrent:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeTurnOff:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeEnabled);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeNewPasscodeConfirm:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeNewPasscode);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeChangePasscodeNew:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeChangePasscodeCurrent);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeChangePasscodeConfirm:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeChangePasscodeNew);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneNumberAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneNumberDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneNumber);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyLastSeenAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyLastSeenDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyLastSeen);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyProfilePhotoAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyProfilePhotoDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyProfilePhoto);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBioAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBioDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBio);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBirthdayAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBirthdayDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyBirthday);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGiftsAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGiftsDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGifts);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneCallAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneCallDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneCall);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneP2PAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneP2PDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyPhoneP2P);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyForwardingAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyForwardingDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyForwarding);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyVoiceMessagesAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyVoiceMessagesDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyVoiceMessages);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGroupChatsAllowedContacts:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGroupChatsDeniedContacts:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PrivacyGroupChats);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPassword:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaDisabled);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPasswordConfirm:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPassword);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPasswordHint:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPasswordConfirm);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPasswordEmail:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPasswordHint);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPasswordEmailCode:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaNewPasswordEmail);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaChangePasswordCurrent:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaTurnOff:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaRecoveryEmailCurrentPassword:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaEnabled);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaChangePasswordNew:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaChangePasswordCurrent);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaChangePasswordConfirm:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaChangePasswordNew);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaChangePasswordHint:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaChangePasswordConfirm);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaRecoveryEmail:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaRecoveryEmailCurrentPassword);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaRecoveryEmailCode:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.TwoFaRecoveryEmail);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersCreateFolder:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersEditFolder:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Folders);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersShare:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersEditFolder);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersIncludedChatsFromChatList:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersExcludedChatsFromChatList:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersEditFolderFromChatList);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersEditFolderFromChatList:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersEditFolderInvites:
          setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList);
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Main);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.QuickReaction:
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.CustomEmoji:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Stickers);
          return;
        case _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.DoNotTranslate:
          setSettingsScreen(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Language);
          return;
        default:
          break;
      }
    }
    if (content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList && isFirstChatFolderActive) {
      setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.GlobalSearch);
      return;
    }
    fullReset();
  });
  const handleSearchQuery = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(query => {
    if (content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Contacts) {
      setContactsFilter(query);
      return;
    }
    setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.GlobalSearch);
    if (query !== searchQuery) {
      setGlobalSearchQuery({
        query
      });
    }
  });
  const handleTopicSearch = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.GlobalSearch);
    setGlobalSearchQuery({
      query: ''
    });
    setGlobalSearchChatId({
      id: forumPanelChatId
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const isArchived = content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Archived;
    const isChatList = content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList;
    const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;
    // We listen for escape key only in these cases:
    // 1. When we are in archived chats and no chat or forum is open.
    // 2. When we are in any other screen except chat list and archived chat list.
    // 3. When we are in chat list and first chat folder is active and no chat or forum is open.
    if (isArchived && noChatOrForumOpen || !isChatList && !isArchived || isFirstChatFolderActive && noChatOrForumOpen) {
      return (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
        handleReset();
      });
    } else {
      return undefined;
    }
  }, [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen]);
  const handleHotkeySearch = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    if (content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.GlobalSearch) {
      return;
    }
    e.preventDefault();
    setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.GlobalSearch);
  });
  const handleHotkeySavedMessages = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    e.preventDefault();
    openChat({
      id: currentUserId,
      shouldReplaceHistory: true
    });
  });
  const handleArchivedChats = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    e.preventDefault();
    setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Archived);
  });
  const handleHotkeySettings = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    e.preventDefault();
    setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Settings);
  });
  (0,_hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_8__.useHotkeys)((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    'Mod+Shift+F': handleHotkeySearch,
    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox
    ...(!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_FIREFOX && {
      'Mod+Shift+S': handleHotkeySavedMessages
    }),
    ...(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_APP && {
      'Mod+0': handleHotkeySavedMessages,
      'Mod+9': handleArchivedChats
    }),
    ...(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_MAC_OS && _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_APP && {
      'Mod+,': handleHotkeySettings
    })
  }), []));
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    clearTwoFaError();
    if (settingsScreen === _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.Privacy) {
      loadPasswordInfo();
    }
  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    if (nextSettingsScreen !== undefined) {
      setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Settings);
      setSettingsScreen(nextSettingsScreen);
      requestNextSettingsScreen({
        screen: undefined
      });
    }
    if (nextFoldersAction) {
      foldersDispatch(nextFoldersAction);
    }
  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);
  const handleSettingsScreenSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(screen => {
    setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Settings);
    setSettingsScreen(screen);
  });
  const prevSettingsScreenRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_11__.useStateRef)((0,_hooks_usePrevious__WEBPACK_IMPORTED_MODULE_10__["default"])(contentType === ContentType.Settings ? settingsScreen : -1));
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_TOUCH_ENV) {
      return undefined;
    }
    return (0,_util_swipeController__WEBPACK_IMPORTED_MODULE_5__.captureControlledSwipe)(ref.current, {
      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',
      selectorToPreventScroll: '#Settings .custom-scroll',
      onSwipeRightStart: handleReset,
      onCancel: () => {
        setContent(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Settings);
        handleSettingsScreenSelect(prevSettingsScreenRef.current);
      }
    });
  }, [prevSettingsScreenRef, ref]);
  function renderContent(isActive) {
    switch (contentType) {
      case ContentType.Archived:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ArchivedChats_async__WEBPACK_IMPORTED_MODULE_14__["default"], {
          isActive: isActive,
          onReset: handleReset,
          onTopicSearch: handleTopicSearch,
          foldersDispatch: foldersDispatch,
          onSettingsScreenSelect: handleSettingsScreenSelect,
          onLeftColumnContentChange: setContent,
          isForumPanelOpen: isForumPanelOpen,
          archiveSettings: archiveSettings,
          isStoryRibbonShown: isArchivedStoryRibbonShown
        });
      case ContentType.Settings:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_settings_Settings_async__WEBPACK_IMPORTED_MODULE_17__["default"], {
          isActive: isActive,
          currentScreen: settingsScreen,
          foldersState: foldersState,
          foldersDispatch: foldersDispatch,
          shouldSkipTransition: shouldSkipHistoryAnimations,
          onScreenSelect: handleSettingsScreenSelect,
          onReset: handleReset
        });
      case ContentType.NewChannel:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_newChat_NewChat_async__WEBPACK_IMPORTED_MODULE_16__["default"], {
          key: lastResetTime,
          isActive: isActive,
          isChannel: true,
          content: content,
          onContentChange: setContent,
          onReset: handleReset
        });
      case ContentType.NewGroup:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_newChat_NewChat_async__WEBPACK_IMPORTED_MODULE_16__["default"], {
          key: lastResetTime,
          isActive: isActive,
          content: content,
          onContentChange: setContent,
          onReset: handleReset
        });
      default:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_main_LeftMain__WEBPACK_IMPORTED_MODULE_15__["default"], {
          content: content,
          isClosingSearch: isClosingSearch,
          searchQuery: searchQuery,
          searchDate: searchDate,
          contactsFilter: contactsFilter,
          foldersDispatch: foldersDispatch,
          onContentChange: setContent,
          onSearchQuery: handleSearchQuery,
          onSettingsScreenSelect: handleSettingsScreenSelect,
          onReset: handleReset,
          shouldSkipTransition: shouldSkipHistoryAnimations,
          isAppUpdateAvailable: isAppUpdateAvailable,
          isElectronUpdateAvailable: isElectronUpdateAvailable,
          isForumPanelOpen: isForumPanelOpen,
          onTopicSearch: handleTopicSearch
        });
    }
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_13__["default"], {
    ref: ref,
    name: shouldSkipHistoryAnimations ? 'none' : _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.LAYERS_ANIMATION_NAME,
    renderCount: RENDER_COUNT,
    activeKey: contentType,
    shouldCleanup: true,
    cleanupExceptionKey: ContentType.Main,
    shouldWrap: true,
    wrapExceptionKey: ContentType.Main,
    id: "LeftColumn",
    withSwipeControl: true
  }, renderContent);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global);
  const {
    globalSearch: {
      query,
      minDate
    },
    shouldSkipHistoryAnimations,
    activeChatFolder,
    nextSettingsScreen,
    nextFoldersAction,
    storyViewer: {
      isArchivedRibbonShown
    }
  } = tabState;
  const {
    currentUserId,
    passcode: {
      hasPasscode
    },
    isAppUpdateAvailable,
    isElectronUpdateAvailable,
    archiveSettings
  } = global;
  const currentChat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCurrentChat)(global);
  const isChatOpen = Boolean(currentChat?.id);
  const isForumPanelOpen = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsForumPanelOpen)(global);
  const forumPanelChatId = tabState.forumPanelChatId;
  return {
    searchQuery: query,
    searchDate: minDate,
    isFirstChatFolderActive: activeChatFolder === 0,
    shouldSkipHistoryAnimations,
    currentUserId,
    hasPasscode,
    nextSettingsScreen,
    nextFoldersAction,
    isChatOpen,
    isAppUpdateAvailable,
    isElectronUpdateAvailable,
    isForumPanelOpen,
    forumPanelChatId,
    isClosingSearch: tabState.globalSearch.isClosing,
    archiveSettings,
    isArchivedStoryRibbonShown: isArchivedRibbonShown
  };
})(LeftColumn)));

/***/ }),

/***/ "./src/components/left/NewChatButton.tsx":
/*!***********************************************!*\
  !*** ./src/components/left/NewChatButton.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _NewChatButton_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./NewChatButton.scss */ "./src/components/left/NewChatButton.scss");








const NewChatButton = ({
  isShown,
  onNewPrivateChat,
  onNewChannel,
  onNewGroup
}) => {
  const [isMenuOpen, setIsMenuOpen] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isShown) {
      setIsMenuOpen(false);
    }
  }, [isShown]);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const fabClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('NewChatButton', isShown && 'revealed', isMenuOpen && 'menu-is-open');
  const toggleIsMenuOpen = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setIsMenuOpen(!isMenuOpen);
  }, [isMenuOpen]);
  const handleClose = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setIsMenuOpen(false);
  }, []);
  const menuItems = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_6__["default"], {
    icon: "channel",
    onClick: onNewChannel
  }, lang('NewChannel')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_6__["default"], {
    icon: "group",
    onClick: onNewGroup
  }, lang('NewGroup')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_6__["default"], {
    icon: "user",
    onClick: onNewPrivateChat
  }, lang('NewMessageTitle'))), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: fabClassName,
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_4__["default"], {
    round: true,
    color: "primary",
    className: isMenuOpen ? 'active' : '',
    onClick: toggleIsMenuOpen,
    ariaLabel: lang(isMenuOpen ? 'Close' : 'NewMessageTitle'),
    tabIndex: -1
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_3__["default"], {
    name: "new-chat-filled"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_3__["default"], {
    name: "close"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_5__["default"], {
    isOpen: isMenuOpen,
    positionX: lang.isRtl ? 'left' : 'right',
    positionY: "bottom",
    autoClose: true,
    onClose: handleClose
  }, menuItems));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NewChatButton);

/***/ }),

/***/ "./src/components/left/main/ChatFolders.tsx":
/*!**************************************************!*\
  !*** ./src/components/left/main/ChatFolders.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _global_selectors_limits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors/limits */ "./src/global/selectors/limits.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _util_captureEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/captureEvents */ "./src/util/captureEvents.ts");
/* harmony import */ var _util_memo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/memo */ "./src/util/memo.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useFolderManager */ "./src/hooks/useFolderManager.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _story_StoryRibbon__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../story/StoryRibbon */ "./src/components/story/StoryRibbon.tsx");
/* harmony import */ var _ui_TabList__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../ui/TabList */ "./src/components/ui/TabList.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _ChatList__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ChatList */ "./src/components/left/main/ChatList.tsx");





















const SAVED_MESSAGES_HOTKEY = '0';
const FIRST_FOLDER_INDEX = 0;
const ChatFolders = ({
  foldersDispatch,
  onSettingsScreenSelect,
  onLeftColumnContentChange,
  chatFoldersById,
  orderedFolderIds,
  activeChatFolder,
  currentUserId,
  isForumPanelOpen,
  shouldSkipHistoryAnimations,
  maxFolders,
  maxChatLists,
  shouldHideFolderTabs,
  folderInvitesById,
  maxFolderInvites,
  hasArchivedChats,
  hasArchivedStories,
  archiveSettings,
  isStoryRibbonShown,
  sessions
}) => {
  const {
    loadChatFolders,
    setActiveChatFolder,
    openChat,
    openShareChatFolderModal,
    openDeleteChatFolderModal,
    openEditChatFolder,
    openLimitReachedModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const transitionRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_14__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    loadChatFolders();
  }, []);
  const {
    ref,
    shouldRender: shouldRenderStoryRibbon,
    getIsClosing: getIsStoryRibbonClosing
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_16__["default"])({
    isOpen: isStoryRibbonShown,
    className: false,
    withShouldRender: true
  });
  const isStoryRibbonClosing = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_11__["default"])(getIsStoryRibbonClosing);
  const allChatsFolder = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      id: _config__WEBPACK_IMPORTED_MODULE_2__.ALL_FOLDER_ID,
      title: {
        text: orderedFolderIds?.[0] === _config__WEBPACK_IMPORTED_MODULE_2__.ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats')
      },
      includedChatIds: _util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY,
      excludedChatIds: _util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY
    };
  }, [orderedFolderIds, lang]);
  const displayedFolders = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return orderedFolderIds ? orderedFolderIds.map(id => {
      if (id === _config__WEBPACK_IMPORTED_MODULE_2__.ALL_FOLDER_ID) {
        return allChatsFolder;
      }
      return chatFoldersById[id] || {};
    }).filter(Boolean) : undefined;
  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);
  const allChatsFolderIndex = displayedFolders?.findIndex(folder => folder.id === _config__WEBPACK_IMPORTED_MODULE_2__.ALL_FOLDER_ID);
  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;
  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;
  const folderCountersById = (0,_hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_12__.useFolderManagerForUnreadCounters)();
  const folderTabs = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!displayedFolders || !displayedFolders.length) {
      return undefined;
    }
    return displayedFolders.map((folder, i) => {
      const {
        id,
        title,
        emoticon
      } = folder;
      console.log('folder info', folder);
      const isBlocked = id !== _config__WEBPACK_IMPORTED_MODULE_2__.ALL_FOLDER_ID && i > maxFolders - 1;
      const canShareFolder = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCanShareFolder)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), id);
      const contextActions = [];
      if (canShareFolder) {
        contextActions.push({
          title: lang('FilterShare'),
          icon: 'link',
          handler: () => {
            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);
            if (chatListCount >= maxChatLists && !folder.isChatList) {
              openLimitReachedModal({
                limit: 'chatlistJoined'
              });
              return;
            }

            // Greater amount can be after premium downgrade
            if (folderInvitesById[id]?.length >= maxFolderInvites) {
              openLimitReachedModal({
                limit: 'chatlistInvites'
              });
              return;
            }
            openShareChatFolderModal({
              folderId: id
            });
          }
        });
      }
      if (id !== _config__WEBPACK_IMPORTED_MODULE_2__.ALL_FOLDER_ID) {
        contextActions.push({
          title: lang('FilterEdit'),
          icon: 'edit',
          handler: () => {
            openEditChatFolder({
              folderId: id
            });
          }
        });
        contextActions.push({
          title: lang('FilterDelete'),
          icon: 'delete',
          destructive: true,
          handler: () => {
            openDeleteChatFolderModal({
              folderId: id
            });
          }
        });
      }
      return {
        id,
        title: (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_10__.renderTextWithEntities)({
          text: title.text,
          entities: title.entities,
          noCustomEmojiPlayback: folder.noTitleAnimations
        }),
        emoticon,
        badgeCount: folderCountersById[id]?.chatsCount,
        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),
        isBlocked,
        contextActions: contextActions?.length ? contextActions : undefined
      };
    });
  }, [displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById, maxFolderInvites]);
  const handleSwitchTab = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(index => {
    setActiveChatFolder({
      activeChatFolder: index
    }, {
      forceOnHeavyAnimation: true
    });
  });

  // Prevent `activeTab` pointing at non-existing folder after update
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!folderTabs?.length) {
      return;
    }
    if (activeChatFolder >= folderTabs.length) {
      setActiveChatFolder({
        activeChatFolder: FIRST_FOLDER_INDEX
      });
    }
  }, [activeChatFolder, folderTabs, setActiveChatFolder]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {
      return undefined;
    }
    return (0,_util_captureEvents__WEBPACK_IMPORTED_MODULE_7__.captureEvents)(transitionRef.current, {
      selectorToPreventScroll: '.chat-list',
      onSwipe: (e, direction) => {
        if (direction === _util_captureEvents__WEBPACK_IMPORTED_MODULE_7__.SwipeDirection.Left) {
          setActiveChatFolder({
            activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1)
          }, {
            forceOnHeavyAnimation: true
          });
          return true;
        } else if (direction === _util_captureEvents__WEBPACK_IMPORTED_MODULE_7__.SwipeDirection.Right) {
          setActiveChatFolder({
            activeChatFolder: Math.max(0, activeChatFolder - 1)
          }, {
            forceOnHeavyAnimation: true
          });
          return true;
        }
        return false;
      }
    });
  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);
  const isNotInFirstFolderRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  isNotInFirstFolderRef.current = !isInFirstFolder;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => isNotInFirstFolderRef.current ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    if (isNotInFirstFolderRef.current) {
      setActiveChatFolder({
        activeChatFolder: FIRST_FOLDER_INDEX
      });
    }
  }) : undefined, [activeChatFolder, setActiveChatFolder]);
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_13__["default"])({
    isActive: !isInFirstFolder,
    onBack: () => setActiveChatFolder({
      activeChatFolder: FIRST_FOLDER_INDEX
    }, {
      forceOnHeavyAnimation: true
    })
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const handleKeyDown = e => {
      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {
        const [, digit] = e.code.match(/Digit(\d)/) || [];
        if (!digit) return;
        if (digit === SAVED_MESSAGES_HOTKEY) {
          openChat({
            id: currentUserId,
            shouldReplaceHistory: true
          });
          return;
        }
        const folder = Number(digit) - 1;
        if (folder > folderTabs.length - 1) return;
        setActiveChatFolder({
          activeChatFolder: folder
        }, {
          forceOnHeavyAnimation: true
        });
        e.preventDefault();
      }
    };
    document.addEventListener('keydown', handleKeyDown, true);
    return () => {
      document.removeEventListener('keydown', handleKeyDown, true);
    };
  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);
  const {
    ref: placeholderRef,
    shouldRender: shouldRenderPlaceholder
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_16__["default"])({
    isOpen: !orderedFolderIds,
    noMountTransition: true,
    withShouldRender: true
  });
  function renderCurrentTab(isActive) {
    const activeFolder = Object.values(chatFoldersById).find(({
      id
    }) => id === folderTabs[activeChatFolder].id);
    const isFolder = activeFolder && !isInAllChatsFolder;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatList__WEBPACK_IMPORTED_MODULE_20__["default"], {
      folderType: isFolder ? 'folder' : 'all',
      folderId: isFolder ? activeFolder.id : undefined,
      isActive: isActive,
      isForumPanelOpen: isForumPanelOpen,
      foldersDispatch: foldersDispatch,
      onSettingsScreenSelect: onSettingsScreenSelect,
      onLeftColumnContentChange: onLeftColumnContentChange,
      canDisplayArchive: (hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden,
      archiveSettings: archiveSettings,
      sessions: sessions
    });
  }
  const shouldRenderFolders = folderTabs && folderTabs.length > 1;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('ChatFolders', shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden', shouldRenderStoryRibbon && 'with-story-ribbon')
  }, shouldRenderStoryRibbon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_story_StoryRibbon__WEBPACK_IMPORTED_MODULE_17__["default"], {
    isClosing: isStoryRibbonClosing
  }), shouldRenderFolders ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_TabList__WEBPACK_IMPORTED_MODULE_18__["default"], {
    contextRootElementSelector: "#LeftColumn",
    tabs: folderTabs,
    activeTab: activeChatFolder,
    onSwitchTab: handleSwitchTab,
    isFolderTap: true
  }) : shouldRenderPlaceholder ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: placeholderRef,
    className: "tabs-placeholder"
  }) : undefined, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_19__["default"], {
    ref: transitionRef,
    name: shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized',
    activeKey: activeChatFolder,
    renderCount: shouldRenderFolders ? folderTabs.length : undefined
  }, renderCurrentTab));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const {
    chatFolders: {
      byId: chatFoldersById,
      orderedIds: orderedFolderIds,
      invites: folderInvitesById
    },
    chats: {
      listIds: {
        archived
      }
    },
    stories: {
      orderedPeerIds: {
        archived: archivedStories
      }
    },
    activeSessions: {
      byHash: sessions
    },
    currentUserId,
    archiveSettings
  } = global;
  const {
    shouldSkipHistoryAnimations,
    activeChatFolder
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global);
  const {
    storyViewer: {
      isRibbonShown: isStoryRibbonShown
    }
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global);
  return {
    chatFoldersById,
    folderInvitesById,
    orderedFolderIds,
    activeChatFolder,
    currentUserId,
    shouldSkipHistoryAnimations,
    hasArchivedChats: Boolean(archived?.length),
    hasArchivedStories: Boolean(archivedStories?.length),
    maxFolders: (0,_global_selectors_limits__WEBPACK_IMPORTED_MODULE_4__.selectCurrentLimit)(global, 'dialogFilters'),
    maxFolderInvites: (0,_global_selectors_limits__WEBPACK_IMPORTED_MODULE_4__.selectCurrentLimit)(global, 'chatlistInvites'),
    maxChatLists: (0,_global_selectors_limits__WEBPACK_IMPORTED_MODULE_4__.selectCurrentLimit)(global, 'chatlistJoined'),
    archiveSettings,
    isStoryRibbonShown,
    sessions
  };
})(ChatFolders)));

/***/ }),

/***/ "./src/components/left/main/ContactList.async.tsx":
/*!********************************************************!*\
  !*** ./src/components/left/main/ContactList.async.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const ContactListAsync = props => {
  const ContactList = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ContactList');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ContactList ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ContactList, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ContactListAsync);

/***/ }),

/***/ "./src/components/left/main/LeftMain.tsx":
/*!***********************************************!*\
  !*** ./src/components/left/main/LeftMain.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useForumPanelRender__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useForumPanelRender */ "./src/hooks/useForumPanelRender.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _NewChatButton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../NewChatButton */ "./src/components/left/NewChatButton.tsx");
/* harmony import */ var _search_LeftSearch_async__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../search/LeftSearch.async */ "./src/components/left/search/LeftSearch.async.tsx");
/* harmony import */ var _ChatFolders__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ChatFolders */ "./src/components/left/main/ChatFolders.tsx");
/* harmony import */ var _ContactList_async__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ContactList.async */ "./src/components/left/main/ContactList.async.tsx");
/* harmony import */ var _ForumPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ForumPanel */ "./src/components/left/main/ForumPanel.tsx");
/* harmony import */ var _LeftMainHeader__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./LeftMainHeader */ "./src/components/left/main/LeftMainHeader.tsx");
/* harmony import */ var _LeftMain_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./LeftMain.scss */ "./src/components/left/main/LeftMain.scss");



















const TRANSITION_RENDER_COUNT = Object.keys(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent).length / 2;
const BUTTON_CLOSE_DELAY_MS = 250;
let closeTimeout;
const LeftMain = ({
  content,
  searchQuery,
  searchDate,
  isClosingSearch,
  contactsFilter,
  shouldSkipTransition,
  foldersDispatch,
  isAppUpdateAvailable,
  isElectronUpdateAvailable,
  isForumPanelOpen,
  onSearchQuery,
  onContentChange,
  onSettingsScreenSelect,
  onReset,
  onTopicSearch
}) => {
  const {
    closeForumPanel
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isNewChatButtonShown, setIsNewChatButtonShown] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV);
  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);
  }, []);
  const {
    shouldRenderForumPanel,
    handleForumPanelAnimationEnd,
    handleForumPanelAnimationStart,
    isAnimationStarted
  } = (0,_hooks_useForumPanelRender__WEBPACK_IMPORTED_MODULE_6__["default"])(isForumPanelOpen);
  const isForumPanelRendered = isForumPanelOpen && content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList;
  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;
  const {
    shouldRender: shouldRenderUpdateButton,
    transitionClassNames: updateButtonClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_9__["default"])(isAppUpdateAvailable || isElectronUpdateAvailable);
  const isMouseInside = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const handleMouseEnter = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    if (content !== _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList) {
      return;
    }
    isMouseInside.current = true;
    setIsNewChatButtonShown(true);
  });
  const handleMouseLeave = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    isMouseInside.current = false;
    if (closeTimeout) {
      clearTimeout(closeTimeout);
      closeTimeout = undefined;
    }
    closeTimeout = window.setTimeout(() => {
      if (!isMouseInside.current) {
        setIsNewChatButtonShown(false);
      }
    }, BUTTON_CLOSE_DELAY_MS);
  });
  const handleSelectSettings = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    onContentChange(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Settings);
  });
  const handleSelectContacts = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    onContentChange(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Contacts);
  });
  const handleSelectArchived = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    onContentChange(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Archived);
    closeForumPanel();
  });
  const handleUpdateClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_ELECTRON && !isElectronAutoUpdateEnabled) {
      window.open(`${_config__WEBPACK_IMPORTED_MODULE_3__.PRODUCTION_URL}/get`, '_blank', 'noopener');
    } else if (isElectronUpdateAvailable) {
      window.electron?.installUpdate();
    } else {
      window.location.reload();
    }
  });
  const handleSelectNewChannel = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    onContentChange(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewChannelStep1);
  });
  const handleSelectNewGroup = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    onContentChange(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.NewGroupStep1);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    let autoCloseTimeout;
    if (content !== _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList) {
      autoCloseTimeout = window.setTimeout(() => {
        setIsNewChatButtonShown(false);
      }, BUTTON_CLOSE_DELAY_MS);
    } else if (isMouseInside.current || _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV) {
      setIsNewChatButtonShown(true);
    }
    return () => {
      if (autoCloseTimeout) {
        clearTimeout(autoCloseTimeout);
        autoCloseTimeout = undefined;
      }
    };
  }, [content]);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "LeftColumn-main",
    onMouseEnter: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV ? handleMouseEnter : undefined,
    onMouseLeave: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV ? handleMouseLeave : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_LeftMainHeader__WEBPACK_IMPORTED_MODULE_17__["default"], {
    shouldHideSearch: isForumPanelVisible,
    content: content,
    contactsFilter: contactsFilter,
    onSearchQuery: onSearchQuery,
    onSelectSettings: handleSelectSettings,
    onSelectContacts: handleSelectContacts,
    onSelectArchived: handleSelectArchived,
    onReset: onReset,
    shouldSkipTransition: shouldSkipTransition,
    isClosingSearch: isClosingSearch
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: shouldSkipTransition ? 'none' : 'zoomFade',
    renderCount: TRANSITION_RENDER_COUNT,
    activeKey: content,
    shouldCleanup: true,
    cleanupExceptionKey: _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList,
    shouldWrap: true,
    wrapExceptionKey: _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList
  }, isActive => {
    switch (content) {
      case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatFolders__WEBPACK_IMPORTED_MODULE_14__["default"], {
          shouldHideFolderTabs: isForumPanelVisible,
          onSettingsScreenSelect: onSettingsScreenSelect,
          onLeftColumnContentChange: onContentChange,
          foldersDispatch: foldersDispatch,
          isForumPanelOpen: isForumPanelVisible
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.GlobalSearch:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_search_LeftSearch_async__WEBPACK_IMPORTED_MODULE_13__["default"], {
          searchQuery: searchQuery,
          searchDate: searchDate,
          isActive: isActive,
          onReset: onReset
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Contacts:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ContactList_async__WEBPACK_IMPORTED_MODULE_15__["default"], {
          filter: contactsFilter,
          isActive: isActive,
          onReset: onReset
        });
      default:
        return undefined;
    }
  }), shouldRenderUpdateButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_10__["default"], {
    fluid: true,
    badge: true,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('btn-update', updateButtonClassNames),
    onClick: handleUpdateClick
  }, lang('lng_update_telegram')), shouldRenderForumPanel && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ForumPanel__WEBPACK_IMPORTED_MODULE_16__["default"], {
    isOpen: isForumPanelOpen,
    isHidden: !isForumPanelRendered,
    onTopicSearch: onTopicSearch,
    onOpenAnimationStart: handleForumPanelAnimationStart,
    onCloseAnimationEnd: handleForumPanelAnimationEnd
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_NewChatButton__WEBPACK_IMPORTED_MODULE_12__["default"], {
    isShown: isNewChatButtonShown,
    onNewPrivateChat: handleSelectContacts,
    onNewChannel: handleSelectNewChannel,
    onNewGroup: handleSelectNewGroup
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(LeftMain));

/***/ }),

/***/ "./src/components/left/main/LeftMainHeader.tsx":
/*!*****************************************************!*\
  !*** ./src/components/left/main/LeftMainHeader.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useConnectionStatus__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useConnectionStatus */ "./src/hooks/useConnectionStatus.ts");
/* harmony import */ var _hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useElectronDrag */ "./src/hooks/useElectronDrag.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useHotkeys */ "./src/hooks/useHotkeys.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_window_useFullscreen__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/window/useFullscreen */ "./src/hooks/window/useFullscreen.ts");
/* harmony import */ var _hooks_useLeftHeaderButtonRtlForumTransition__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./hooks/useLeftHeaderButtonRtlForumTransition */ "./src/components/left/main/hooks/useLeftHeaderButtonRtlForumTransition.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_PeerChip__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/PeerChip */ "./src/components/common/PeerChip.tsx");
/* harmony import */ var _story_StoryToggler__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../story/StoryToggler */ "./src/components/story/StoryToggler.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../ui/DropdownMenu */ "./src/components/ui/DropdownMenu.tsx");
/* harmony import */ var _ui_SearchInput__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../ui/SearchInput */ "./src/components/ui/SearchInput.tsx");
/* harmony import */ var _ui_ShowTransition__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../ui/ShowTransition */ "./src/components/ui/ShowTransition.tsx");
/* harmony import */ var _ConnectionStatusOverlay__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../ConnectionStatusOverlay */ "./src/components/left/ConnectionStatusOverlay.tsx");
/* harmony import */ var _LeftSideMenuItems__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./LeftSideMenuItems */ "./src/components/left/main/LeftSideMenuItems.tsx");
/* harmony import */ var _StatusButton__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./StatusButton */ "./src/components/left/main/StatusButton.tsx");
/* harmony import */ var _LeftMainHeader_scss__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./LeftMainHeader.scss */ "./src/components/left/main/LeftMainHeader.scss");






























const CLEAR_DATE_SEARCH_PARAM = {
  date: undefined
};
const CLEAR_CHAT_SEARCH_PARAM = {
  id: undefined
};
const LeftMainHeader = ({
  shouldHideSearch,
  content,
  contactsFilter,
  isClosingSearch,
  searchQuery,
  isLoading,
  isCurrentUserPremium,
  shouldSkipTransition,
  globalSearchChatId,
  searchDate,
  theme,
  connectionState,
  isSyncing,
  isFetchingDifference,
  isMessageListOpen,
  isConnectionStatusMinimized,
  areChatsLoaded,
  hasPasscode,
  canSetPasscode,
  onSearchQuery,
  onSelectSettings,
  onSelectContacts,
  onSelectArchived,
  onReset
}) => {
  const {
    setGlobalSearchDate,
    setSettingOption,
    setGlobalSearchChatId,
    lockScreen,
    requestNextSettingsScreen
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_16__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const {
    isMobile,
    isDesktop
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_12__["default"])();
  const areContactsVisible = content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Contacts;
  const hasMenu = content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.ChatList;
  const selectedSearchDate = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return searchDate ? (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_7__.formatDateToString)(new Date(searchDate * 1000)) : undefined;
  }, [searchDate]);
  const {
    connectionStatus,
    connectionStatusText,
    connectionStatusPosition
  } = (0,_hooks_useConnectionStatus__WEBPACK_IMPORTED_MODULE_10__["default"])(oldLang, connectionState, isSyncing || isFetchingDifference, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded);
  const handleLockScreenHotkey = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(e => {
    e.preventDefault();
    e.stopPropagation();
    if (hasPasscode) {
      lockScreen();
    } else {
      requestNextSettingsScreen({
        screen: _types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.PasscodeDisabled
      });
    }
  });
  (0,_hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_13__.useHotkeys)((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => canSetPasscode ? {
    'Ctrl+Shift+L': handleLockScreenHotkey,
    'Alt+Shift+L': handleLockScreenHotkey,
    'Meta+Shift+L': handleLockScreenHotkey,
    ...(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_APP && {
      'Mod+L': handleLockScreenHotkey
    })
  } : undefined, [canSetPasscode]));
  const MainButton = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return ({
      onTrigger,
      isOpen
    }) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_22__["default"], {
      round: true,
      ripple: hasMenu && !isMobile,
      size: "smaller",
      color: "translucent",
      className: isOpen ? 'active' : ''
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: hasMenu ? onTrigger : () => onReset(),
      ariaLabel: hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('animated-menu-icon', !hasMenu && 'state-back', shouldSkipTransition && 'no-animation')
    }));
  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);
  const handleSearchFocus = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (!searchQuery) {
      onSearchQuery('');
    }
  });
  const toggleConnectionStatus = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    setSettingOption({
      isConnectionStatusMinimized: !isConnectionStatusMinimized
    });
  });
  const handleLockScreen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    lockScreen();
  });
  const isSearchFocused = !isDesktop && !isMessageListOpen && (Boolean(globalSearchChatId) || content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.GlobalSearch || content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Contacts);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => isSearchFocused ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_6__["default"])(() => onReset()) : undefined, [isSearchFocused, onReset]);
  const searchInputPlaceholder = content === _types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Contacts ? lang('SearchFriends') : lang('Search');
  const versionString = _config__WEBPACK_IMPORTED_MODULE_3__.IS_BETA ? `${"10.9.39"} Beta (${"master"})` : _config__WEBPACK_IMPORTED_MODULE_3__.DEBUG ? "master" : "10.9.39";
  const isFullscreen = (0,_hooks_window_useFullscreen__WEBPACK_IMPORTED_MODULE_17__.useFullscreenStatus)();

  // Disable dropdown menu RTL animation for resize
  const {
    shouldDisableDropdownMenuTransitionRef,
    handleDropdownMenuTransitionEnd
  } = (0,_hooks_useLeftHeaderButtonRtlForumTransition__WEBPACK_IMPORTED_MODULE_18__["default"])(shouldHideSearch);

  // eslint-disable-next-line no-null/no-null
  const headerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  (0,_hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_11__["default"])(headerRef);
  const withStoryToggler = !isSearchFocused && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;
  const searchContent = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, selectedSearchDate && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerChip__WEBPACK_IMPORTED_MODULE_20__["default"], {
      icon: "calendar",
      title: selectedSearchDate,
      canClose: true,
      isMinimized: Boolean(globalSearchChatId),
      className: "left-search-picker-item",
      onClick: setGlobalSearchDate,
      isCloseNonDestructive: true,
      clickArg: CLEAR_DATE_SEARCH_PARAM
    }), globalSearchChatId && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerChip__WEBPACK_IMPORTED_MODULE_20__["default"], {
      className: "left-search-picker-item",
      peerId: globalSearchChatId,
      onClick: setGlobalSearchChatId,
      canClose: true,
      isMinimized: true,
      clickArg: CLEAR_CHAT_SEARCH_PARAM
    }));
  }, [globalSearchChatId, selectedSearchDate]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "LeftMainHeader"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "LeftMainHeader",
    className: "left-header",
    ref: headerRef
  }, oldLang.isRtl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "DropdownMenuFiller"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_23__["default"], {
    trigger: MainButton,
    footer: `${_config__WEBPACK_IMPORTED_MODULE_3__.APP_NAME} ${versionString}`,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('main-menu', oldLang.isRtl && 'rtl', shouldHideSearch && oldLang.isRtl && 'right-aligned', shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition'),
    forceOpen: isBotMenuOpen,
    positionX: shouldHideSearch && oldLang.isRtl ? 'right' : 'left',
    transformOriginX: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_ELECTRON && _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_MAC_OS && !isFullscreen ? 90 : undefined,
    onTransitionEnd: oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_LeftSideMenuItems__WEBPACK_IMPORTED_MODULE_27__["default"], {
    onSelectArchived: onSelectArchived,
    onSelectContacts: onSelectContacts,
    onSelectSettings: onSelectSettings,
    onBotMenuOpened: markBotMenuOpen,
    onBotMenuClosed: unmarkBotMenuOpen
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_SearchInput__WEBPACK_IMPORTED_MODULE_24__["default"], {
    inputId: "telegram-search-input",
    resultsItemSelector: ".LeftSearch .ListItem-button",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(globalSearchChatId || searchDate ? 'with-picker-item' : undefined, shouldHideSearch && 'SearchInput--hidden'),
    value: isClosingSearch ? undefined : contactsFilter || searchQuery,
    focused: isSearchFocused,
    isLoading: isLoading || connectionStatusPosition === 'minimized',
    spinnerColor: connectionStatusPosition === 'minimized' ? 'yellow' : undefined,
    spinnerBackgroundColor: connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined,
    placeholder: searchInputPlaceholder,
    autoComplete: "off",
    canClose: Boolean(globalSearchChatId || searchDate),
    onChange: onSearchQuery,
    onReset: onReset,
    onFocus: handleSearchFocus,
    onSpinnerClick: connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined
  }, searchContent, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_story_StoryToggler__WEBPACK_IMPORTED_MODULE_21__["default"], {
    canShow: withStoryToggler
  })), isCurrentUserPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StatusButton__WEBPACK_IMPORTED_MODULE_28__["default"], null), hasPasscode && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_22__["default"], {
    round: true,
    ripple: !isMobile,
    size: "smaller",
    color: "translucent",
    ariaLabel: `${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`,
    onClick: handleLockScreen,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(!isCurrentUserPremium && 'extra-spacing')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_19__["default"], {
    name: "lock"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ShowTransition__WEBPACK_IMPORTED_MODULE_25__["default"], {
    isOpen: connectionStatusPosition === 'overlay',
    isCustom: true,
    className: "connection-state-wrapper"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ConnectionStatusOverlay__WEBPACK_IMPORTED_MODULE_26__["default"], {
    connectionStatus: connectionStatus,
    connectionStatusText: connectionStatusText,
    onClick: toggleConnectionStatus
  }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  const {
    query: searchQuery,
    fetchingStatus,
    chatId,
    minDate
  } = tabState.globalSearch;
  const {
    connectionState,
    isSyncing,
    isFetchingDifference
  } = global;
  const {
    isConnectionStatusMinimized
  } = global.settings.byKey;
  return {
    searchQuery,
    isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,
    globalSearchChatId: chatId,
    searchDate: minDate,
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTheme)(global),
    connectionState,
    isSyncing,
    isFetchingDifference,
    isMessageListOpen: Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global)),
    isConnectionStatusMinimized,
    isCurrentUserPremium: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsCurrentUserPremium)(global),
    areChatsLoaded: Boolean(global.chats.listIds.active),
    hasPasscode: Boolean(global.passcode.hasPasscode),
    canSetPasscode: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanSetPasscode)(global)
  };
})(LeftMainHeader)));

/***/ }),

/***/ "./src/components/left/main/LeftSideMenuItems.tsx":
/*!********************************************************!*\
  !*** ./src/components/left/main/LeftSideMenuItems.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_initialState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/initialState */ "./src/global/initialState.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_installPrompt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/installPrompt */ "./src/util/installPrompt.ts");
/* harmony import */ var _util_permanentWebVersion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/permanentWebVersion */ "./src/util/permanentWebVersion.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useFolderManager */ "./src/hooks/useFolderManager.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _middle_composer_AttachBotItem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../middle/composer/AttachBotItem */ "./src/components/middle/composer/AttachBotItem.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ui_Switcher__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../ui/Switcher */ "./src/components/ui/Switcher.tsx");
/* harmony import */ var _ui_Toggle__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../ui/Toggle */ "./src/components/ui/Toggle.tsx");
















const LeftSideMenuItems = ({
  currentUserId,
  archiveSettings,
  animationLevel,
  theme,
  canInstall,
  attachBots,
  onSelectArchived,
  onSelectContacts,
  onSelectSettings,
  onBotMenuOpened,
  onBotMenuClosed
}) => {
  const {
    openChat,
    setSettingOption,
    updatePerformanceSettings,
    openChatByUsername,
    openUrl,
    openChatWithInfo
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const animationLevelValue = animationLevel !== _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_LEVEL_MIN ? animationLevel === _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_LEVEL_MAX ? 'max' : 'mid' : 'min';
  const withOtherVersions = !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_ELECTRON && (window.location.hostname === _config__WEBPACK_IMPORTED_MODULE_2__.PRODUCTION_HOSTNAME || _config__WEBPACK_IMPORTED_MODULE_2__.IS_TEST);
  const archivedUnreadChatsCount = (0,_hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_8__.useFolderManagerForUnreadCounters)()[_config__WEBPACK_IMPORTED_MODULE_2__.ARCHIVED_FOLDER_ID]?.chatsCount || 0;
  const bots = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => Object.values(attachBots).filter(bot => bot.isForSideMenu), [attachBots]);
  const handleSelectSaved = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    openChat({
      id: currentUserId,
      shouldReplaceHistory: true
    });
  });
  const handleDarkModeToggle = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(e => {
    e.stopPropagation();
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setSettingOption({
      theme: newTheme
    });
    setSettingOption({
      shouldUseSystemTheme: false
    });
  });
  const handleAnimationLevelChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(e => {
    e.stopPropagation();
    let newLevel = animationLevel + 1;
    if (newLevel > _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_LEVEL_MAX) {
      newLevel = _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_LEVEL_MIN;
    }
    const performanceSettings = newLevel === _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_LEVEL_MIN ? _global_initialState__WEBPACK_IMPORTED_MODULE_3__.INITIAL_PERFORMANCE_STATE_MIN : newLevel === _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_LEVEL_MAX ? _global_initialState__WEBPACK_IMPORTED_MODULE_3__.INITIAL_PERFORMANCE_STATE_MAX : _global_initialState__WEBPACK_IMPORTED_MODULE_3__.INITIAL_PERFORMANCE_STATE_MID;
    setSettingOption({
      animationLevel: newLevel
    });
    updatePerformanceSettings(performanceSettings);
  });
  const handleChangelogClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    window.open(_config__WEBPACK_IMPORTED_MODULE_2__.BETA_CHANGELOG_URL, '_blank', 'noopener');
  });
  const handleSwitchToWebK = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    (0,_util_permanentWebVersion__WEBPACK_IMPORTED_MODULE_6__.switchPermanentWebVersion)('K');
  });
  const handleOpenTipsChat = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    openChatByUsername({
      username: oldLang('Settings.TipsUsername')
    });
  });
  const handleBugReportClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    openUrl({
      url: _config__WEBPACK_IMPORTED_MODULE_2__.FEEDBACK_URL
    });
  });
  const handleOpenMyStories = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    openChatWithInfo({
      id: currentUserId,
      shouldReplaceHistory: true,
      profileTab: 'stories'
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "saved-messages",
    onClick: handleSelectSaved
  }, oldLang('SavedMessages')), archiveSettings.isHidden && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "archive",
    onClick: onSelectArchived
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "menu-item-name"
  }, oldLang('ArchivedChats')), archivedUnreadChatsCount > 0 && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "right-badge"
  }, archivedUnreadChatsCount)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "user",
    onClick: onSelectContacts
  }, oldLang('Contacts')), bots.map(bot => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_AttachBotItem__WEBPACK_IMPORTED_MODULE_12__["default"], {
    bot: bot,
    theme: theme,
    isInSideMenu: true,
    canShowNew: true,
    onMenuOpened: onBotMenuOpened,
    onMenuClosed: onBotMenuClosed
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "play-story",
    onClick: handleOpenMyStories
  }, oldLang('Settings.MyStories')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "settings",
    onClick: onSelectSettings
  }, oldLang('Settings')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "darkmode",
    onClick: handleDarkModeToggle
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "menu-item-name"
  }, oldLang('lng_menu_night_mode')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Switcher__WEBPACK_IMPORTED_MODULE_14__["default"], {
    id: "darkmode",
    label: oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme'),
    checked: theme === 'dark',
    noAnimation: true
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "animations",
    onClick: handleAnimationLevelChange
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "menu-item-name capitalize"
  }, oldLang('Appearance.Animations').toLowerCase()), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Toggle__WEBPACK_IMPORTED_MODULE_15__["default"], {
    value: animationLevelValue
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "help",
    onClick: handleOpenTipsChat
  }, oldLang('TelegramFeatures')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "bug",
    onClick: handleBugReportClick
  }, lang('MenuReportBug')), _config__WEBPACK_IMPORTED_MODULE_2__.IS_BETA && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "permissions",
    onClick: handleChangelogClick
  }, lang('MenuBetaChangelog')), withOtherVersions && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "K",
    isCharIcon: true,
    href: `${_config__WEBPACK_IMPORTED_MODULE_2__.WEB_VERSION_BASE}k`,
    onClick: handleSwitchToWebK
  }, lang('MenuSwitchToK')), canInstall && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "install",
    onClick: (0,_util_installPrompt__WEBPACK_IMPORTED_MODULE_5__.getPromptInstall)()
  }, lang('MenuInstallApp')));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  const {
    currentUserId,
    archiveSettings
  } = global;
  const {
    animationLevel
  } = global.settings.byKey;
  const attachBots = global.attachMenu.bots;
  return {
    currentUserId,
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTheme)(global),
    animationLevel,
    canInstall: Boolean(tabState.canInstall),
    archiveSettings,
    attachBots
  };
})(LeftSideMenuItems)));

/***/ }),

/***/ "./src/components/left/main/StatusButton.tsx":
/*!***************************************************!*\
  !*** ./src/components/left/main/StatusButton.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _common_CustomEmoji__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/icons/StarIcon */ "./src/components/common/icons/StarIcon.tsx");
/* harmony import */ var _common_reactions_CustomEmojiEffect__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/reactions/CustomEmojiEffect */ "./src/components/common/reactions/CustomEmojiEffect.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _StatusPickerMenu_async__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./StatusPickerMenu.async */ "./src/components/left/main/StatusPickerMenu.async.tsx");














const EFFECT_DURATION_MS = 1500;
const EMOJI_STATUS_SIZE = 24;
const StatusButton = ({
  emojiStatus
}) => {
  const {
    setEmojiStatus,
    loadCurrentUser
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const buttonRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__["default"])(false);
  const [isEffectShown, showEffect, hideEffect] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__["default"])(false);
  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__["default"])(false);
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const delay = emojiStatus?.until ? (emojiStatus.until - (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_4__.getServerTime)()) * 1000 : undefined;
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_5__["default"])(loadCurrentUser, delay);
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_7__["default"])(([prevEmojiStatus]) => {
    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {
      showEffect();
      unmarkShouldShowEffect();
    }
  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);
  const handleEmojiStatusSet = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(sticker => {
    markShouldShowEffect();
    setEmojiStatus({
      emojiStatusId: sticker.id
    });
  }, [markShouldShowEffect, setEmojiStatus]);
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_5__["default"])(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);
  const handleEmojiStatusClick = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    openStatusPicker();
  }, [openStatusPicker]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "extra-spacing"
  }, Boolean(isEffectShown && emojiStatus) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_reactions_CustomEmojiEffect__WEBPACK_IMPORTED_MODULE_11__["default"], {
    reaction: emojiStatus,
    isLottie: true,
    className: "emoji-status-effect"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    round: true,
    ref: buttonRef,
    ripple: !isMobile,
    size: "smaller",
    color: "translucent",
    className: "emoji-status",
    onClick: handleEmojiStatusClick
  }, emojiStatus ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_CustomEmoji__WEBPACK_IMPORTED_MODULE_9__["default"], {
    key: emojiStatus.documentId,
    documentId: emojiStatus.documentId,
    size: EMOJI_STATUS_SIZE,
    loopLimit: _config__WEBPACK_IMPORTED_MODULE_2__.EMOJI_STATUS_LOOP_LIMIT
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_10__["default"], null)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StatusPickerMenu_async__WEBPACK_IMPORTED_MODULE_13__["default"], {
    statusButtonRef: buttonRef,
    isOpen: isStatusPickerOpen,
    onEmojiStatusSelect: handleEmojiStatusSet,
    onClose: closeStatusPicker
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const {
    currentUserId
  } = global;
  const currentUser = currentUserId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, currentUserId) : undefined;
  return {
    emojiStatus: currentUser?.emojiStatus
  };
})(StatusButton)));

/***/ }),

/***/ "./src/components/left/main/StatusPickerMenu.async.tsx":
/*!*************************************************************!*\
  !*** ./src/components/left/main/StatusPickerMenu.async.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StatusPickerMenuAsync = props => {
  const {
    isOpen
  } = props;
  const StatusPickerMenu = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'StatusPickerMenu', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StatusPickerMenu ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StatusPickerMenu, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StatusPickerMenuAsync);

/***/ }),

/***/ "./src/components/left/newChat/NewChat.async.tsx":
/*!*******************************************************!*\
  !*** ./src/components/left/newChat/NewChat.async.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const NewChatAsync = props => {
  const NewChat = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'NewChat');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return NewChat ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(NewChat, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NewChatAsync);

/***/ }),

/***/ "./src/components/left/search/LeftSearch.async.tsx":
/*!*********************************************************!*\
  !*** ./src/components/left/search/LeftSearch.async.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const LeftSearchAsync = props => {
  const LeftSearch = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'LeftSearch');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return LeftSearch ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(LeftSearch, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LeftSearchAsync);

/***/ }),

/***/ "./src/components/left/settings/Settings.async.tsx":
/*!*********************************************************!*\
  !*** ./src/components/left/settings/Settings.async.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const SettingsAsync = props => {
  const Settings = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'Settings');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return Settings ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(Settings, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SettingsAsync);

/***/ }),

/***/ "./src/components/main/AttachBotRecipientPicker.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/main/AttachBotRecipientPicker.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const AttachBotRecipientPickerAsync = props => {
  const {
    requestedAttachBotInChat
  } = props;
  const AttachBotRecipientPicker = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return AttachBotRecipientPicker ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AttachBotRecipientPicker, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AttachBotRecipientPickerAsync);

/***/ }),

/***/ "./src/components/main/BotTrustModal.async.tsx":
/*!*****************************************************!*\
  !*** ./src/components/main/BotTrustModal.async.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const BotTrustModalAsync = props => {
  const {
    bot
  } = props;
  const BotTrustModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'BotTrustModal', !bot);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return BotTrustModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(BotTrustModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BotTrustModalAsync);

/***/ }),

/***/ "./src/components/main/DeleteFolderDialog.async.tsx":
/*!**********************************************************!*\
  !*** ./src/components/main/DeleteFolderDialog.async.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const DeleteFolderDialogAsync = props => {
  const {
    folder
  } = props;
  const DeleteFolderDialog = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'DeleteFolderDialog', !folder);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return DeleteFolderDialog ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(DeleteFolderDialog, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DeleteFolderDialogAsync);

/***/ }),

/***/ "./src/components/main/Dialogs.async.tsx":
/*!***********************************************!*\
  !*** ./src/components/main/Dialogs.async.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const DialogsAsync = ({
  isOpen
}) => {
  const Dialogs = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'Dialogs', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return Dialogs ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(Dialogs, null) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DialogsAsync);

/***/ }),

/***/ "./src/components/main/DownloadManager.tsx":
/*!*************************************************!*\
  !*** ./src/components/main/DownloadManager.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_download__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/download */ "./src/util/download.ts");
/* harmony import */ var _util_generateUniqueId__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/generateUniqueId */ "./src/util/generateUniqueId.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useRunDebounced__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useRunDebounced */ "./src/hooks/useRunDebounced.ts");










const GLOBAL_UPDATE_DEBOUNCE = 1000;
const processedHashes = new Set();
const downloadedHashes = new Set();
const DownloadManager = ({
  activeDownloads
}) => {
  const {
    cancelMediaHashDownloads,
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const runDebounced = (0,_hooks_useRunDebounced__WEBPACK_IMPORTED_MODULE_9__["default"])(GLOBAL_UPDATE_DEBOUNCE, true);
  const handleMediaDownloaded = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(hash => {
    downloadedHashes.add(hash);
    runDebounced(() => {
      if (downloadedHashes.size) {
        cancelMediaHashDownloads({
          mediaHashes: Array.from(downloadedHashes)
        });
        downloadedHashes.clear();
      }
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!Object.keys(activeDownloads).length) {
      processedHashes.clear();
      return;
    }
    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {
      if (processedHashes.has(mediaHash)) {
        return;
      }
      processedHashes.add(mediaHash);
      const {
        size,
        filename,
        format: mediaFormat
      } = metadata;
      const mediaData = _util_mediaLoader__WEBPACK_IMPORTED_MODULE_6__.getFromMemory(mediaHash);
      if (mediaData) {
        (0,_util_download__WEBPACK_IMPORTED_MODULE_4__["default"])(mediaData, filename);
        handleMediaDownloaded(mediaHash);
        return;
      }
      if (size > _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.MAX_BUFFER_SIZE && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_OPFS_SUPPORTED && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_SERVICE_WORKER_SUPPORTED) {
        showNotification({
          message: 'Downloading files bigger than 2GB is not supported in your browser.'
        });
        handleMediaDownloaded(mediaHash);
        return;
      }
      const handleProgress = () => {
        const currentDownloads = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)()).activeDownloads;
        if (!currentDownloads[mediaHash]) {
          _util_mediaLoader__WEBPACK_IMPORTED_MODULE_6__.cancelProgress(handleProgress);
        }
      };
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_6__.fetch(mediaHash, mediaFormat, true, handleProgress, (0,_util_generateUniqueId__WEBPACK_IMPORTED_MODULE_5__["default"])()).then(result => {
        if (mediaFormat === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.DownloadUrl) {
          const url = new URL(result, window.document.baseURI);
          url.searchParams.set('filename', encodeURIComponent(filename));
          const downloadWindow = window.open(url.toString());
          downloadWindow?.addEventListener('beforeunload', () => {
            showNotification({
              message: 'Download started. Please, do not close the app before it is finished.'
            });
          });
        } else if (result) {
          (0,_util_download__WEBPACK_IMPORTED_MODULE_4__["default"])(result, filename);
        }
        handleMediaDownloaded(mediaHash);
      });
    });
  }, [activeDownloads]);
  return undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const activeDownloads = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global).activeDownloads;
  return {
    activeDownloads
  };
})(DownloadManager)));

/***/ }),

/***/ "./src/components/main/DraftRecipientPicker.async.tsx":
/*!************************************************************!*\
  !*** ./src/components/main/DraftRecipientPicker.async.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const DraftRecipientPickerAsync = props => {
  const {
    requestedDraft
  } = props;
  const DraftRecipientPicker = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return DraftRecipientPicker ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(DraftRecipientPicker, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DraftRecipientPickerAsync);

/***/ }),

/***/ "./src/components/main/ForwardRecipientPicker.async.tsx":
/*!**************************************************************!*\
  !*** ./src/components/main/ForwardRecipientPicker.async.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ForwardRecipientPickerAsync = props => {
  const {
    isOpen
  } = props;
  const ForwardRecipientPicker = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ForwardRecipientPicker', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ForwardRecipientPicker ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ForwardRecipientPicker, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ForwardRecipientPickerAsync);

/***/ }),

/***/ "./src/components/main/GameModal.tsx":
/*!*******************************************!*\
  !*** ./src/components/main/GameModal.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/schedulers/useInterval */ "./src/hooks/schedulers/useInterval.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useSendMessageAction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useSendMessageAction */ "./src/hooks/useSendMessageAction.ts");
/* harmony import */ var _ui_Modal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ui/Modal */ "./src/components/ui/Modal.tsx");
/* harmony import */ var _GameModal_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GameModal.scss */ "./src/components/main/GameModal.scss");









const PLAY_GAME_ACTION_INTERVAL = 5000;
const GameModal = ({
  openedGame,
  gameTitle,
  canPost
}) => {
  const {
    closeGame,
    openForwardMenu
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const {
    url,
    chatId,
    messageId
  } = openedGame || {};
  const isOpen = Boolean(url);
  const sendMessageAction = (0,_hooks_useSendMessageAction__WEBPACK_IMPORTED_MODULE_6__["default"])(chatId);
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    sendMessageAction({
      type: 'playingGame'
    });
  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);
  const handleMessage = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(event => {
    if (!chatId || !messageId) return;
    try {
      const data = JSON.parse(event.data);
      if (data.eventType === 'share_score') {
        openForwardMenu({
          fromChatId: chatId,
          messageIds: [messageId],
          withMyScore: true
        });
        closeGame();
      }
      if (data.eventType === 'share_game') {
        openForwardMenu({
          fromChatId: chatId,
          messageIds: [messageId]
        });
        closeGame();
      }
    } catch (e) {
      // Ignore other messages
    }
  }, [chatId, closeGame, messageId, openForwardMenu]);
  const handleLoad = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(event => {
    event.currentTarget.focus();
  }, []);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    window.addEventListener('message', handleMessage);
    return () => window.removeEventListener('message', handleMessage);
  }, [handleMessage]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Modal__WEBPACK_IMPORTED_MODULE_7__["default"], {
    className: "GameModal",
    isOpen: isOpen,
    onClose: closeGame,
    title: gameTitle,
    hasCloseButton: true
  }, isOpen && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("iframe", {
    className: "game-frame",
    onLoad: handleLoad,
    src: url,
    title: lang('AttachGame'),
    sandbox: "allow-scripts allow-same-origin allow-orientation-lock",
    allow: "fullscreen"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  openedGame
}) => {
  const {
    chatId
  } = openedGame || {};
  const chat = chatId && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChat)(global, chatId);
  const chatFullInfo = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatFullInfo)(global, chatId) : undefined;
  const canPost = Boolean(chat) && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getCanPostInChat)(chat, undefined, undefined, chatFullInfo);
  return {
    canPost
  };
})(GameModal)));

/***/ }),

/***/ "./src/components/main/HistoryCalendar.async.tsx":
/*!*******************************************************!*\
  !*** ./src/components/main/HistoryCalendar.async.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const HistoryCalendarAsync = props => {
  const {
    isOpen
  } = props;
  const HistoryCalendar = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'HistoryCalendar', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return HistoryCalendar ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(HistoryCalendar, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HistoryCalendarAsync);

/***/ }),

/***/ "./src/components/main/LockScreen.tsx":
/*!********************************************!*\
  !*** ./src/components/main/LockScreen.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_passcode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/passcode */ "./src/util/passcode.ts");
/* harmony import */ var _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/helpers/animatedAssets */ "./src/components/common/helpers/animatedAssets.ts");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _common_AnimatedIconWithPreview__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/AnimatedIconWithPreview */ "./src/components/common/AnimatedIconWithPreview.tsx");
/* harmony import */ var _common_PasswordForm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/PasswordForm */ "./src/components/common/PasswordForm.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");
/* harmony import */ var _LockScreen_module_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./LockScreen.module.scss */ "./src/components/main/LockScreen.module.scss");
/* harmony import */ var _assets_lock_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../assets/lock.png */ "./src/assets/lock.png");















const ICON_SIZE = 160;
const LockScreen = ({
  isLocked,
  passcodeSettings
}) => {
  const {
    unlockScreen,
    signOut,
    logInvalidUnlockAttempt,
    resetInvalidUnlockAttempts
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    invalidAttemptsCount,
    timeoutUntil,
    isLoading
  } = passcodeSettings;
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const [validationError, setValidationError] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [shouldShowPasscode, setShouldShowPasscode] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__["default"])(false);
  const {
    shouldRender
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_7__["default"])(isLocked);
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_4__["default"])(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);
  const handleClearError = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setValidationError('');
  }, []);
  const handleSubmit = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(passcode => {
    if (timeoutUntil !== undefined) {
      setValidationError(lang('FloodWait'));
      return;
    }
    setValidationError('');
    (0,_util_passcode__WEBPACK_IMPORTED_MODULE_2__.decryptSession)(passcode).then(unlockScreen, err => {
      if (err instanceof _util_passcode__WEBPACK_IMPORTED_MODULE_2__.UnrecoverablePasscodeError) {
        signOut({
          forceInitApi: true
        });
      }
      logInvalidUnlockAttempt();
      setValidationError(lang('lng_passcode_wrong'));
    });
  }, [lang, timeoutUntil]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (timeoutUntil !== undefined) {
      setValidationError(lang('FloodWait'));
    } else if (invalidAttemptsCount === 0) {
      setValidationError('');
    }
  }, [timeoutUntil, lang, invalidAttemptsCount]);
  const handleSignOutMessage = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    closeSignOutConfirmation();
    signOut({
      forceInitApi: true
    });
  }, [closeSignOutConfirmation, signOut]);
  if (!shouldRender) {
    return undefined;
  }
  function renderLogoutPrompt() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _LockScreen_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].help
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_12__["default"], {
      onClick: openSignOutConfirmation
    }, "Log out"), ' ', "if you don't remember your passcode."), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_10__["default"], {
      color: "translucent",
      size: "tiny",
      isText: true,
      onClick: openSignOutConfirmation
    }, lang('AccountSettings.Logout'))));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _LockScreen_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].container
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _LockScreen_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].wrapper,
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIconWithPreview__WEBPACK_IMPORTED_MODULE_8__["default"], {
    tgsUrl: _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_3__.LOCAL_TGS_URLS.Lock,
    previewUrl: _assets_lock_png__WEBPACK_IMPORTED_MODULE_14__,
    size: ICON_SIZE,
    className: _LockScreen_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].icon
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PasswordForm__WEBPACK_IMPORTED_MODULE_9__["default"], {
    key: "password-form",
    shouldShowSubmit: true,
    shouldDisablePasswordManager: true,
    isLoading: isLoading,
    error: validationError,
    placeholder: lang('Passcode.EnterPasscodePlaceholder'),
    submitLabel: lang('Next'),
    clearError: handleClearError,
    isPasswordVisible: shouldShowPasscode,
    noRipple: true,
    onChangePasswordVisibility: setShouldShowPasscode,
    onSubmit: handleSubmit
  }), renderLogoutPrompt()), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_11__["default"], {
    isOpen: isSignOutDialogOpen,
    onClose: closeSignOutConfirmation,
    text: lang('lng_sure_logout'),
    confirmLabel: lang('AccountSettings.Logout'),
    confirmHandler: handleSignOutMessage,
    confirmIsDestructive: true
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  return {
    passcodeSettings: global.passcode
  };
})(LockScreen)));

/***/ }),

/***/ "./src/components/main/Main.tsx":
/*!**************************************!*\
  !*** ./src/components/main/Main.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _global_actions_all__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global/actions/all */ "./src/global/actions/all.ts");
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types_electron__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../types/electron */ "./src/types/electron.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/cssAnimationEndListeners */ "./src/util/cssAnimationEndListeners.ts");
/* harmony import */ var _util_deeplink__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/deeplink */ "./src/util/deeplink.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_updateIcon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../util/updateIcon */ "./src/util/updateIcon.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hooks/schedulers/useInterval */ "./src/hooks/schedulers/useInterval.ts");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_usePreventPinchZoomGesture__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../hooks/usePreventPinchZoomGesture */ "./src/hooks/usePreventPinchZoomGesture.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");
/* harmony import */ var _hooks_window_useBeforeUnload__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../hooks/window/useBeforeUnload */ "./src/hooks/window/useBeforeUnload.ts");
/* harmony import */ var _hooks_window_useFullscreen__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../hooks/window/useFullscreen */ "./src/hooks/window/useFullscreen.ts");
/* harmony import */ var _calls_ActiveCallHeader_async__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../calls/ActiveCallHeader.async */ "./src/components/calls/ActiveCallHeader.async.tsx");
/* harmony import */ var _calls_group_GroupCall_async__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../calls/group/GroupCall.async */ "./src/components/calls/group/GroupCall.async.tsx");
/* harmony import */ var _calls_phone_PhoneCall_async__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../calls/phone/PhoneCall.async */ "./src/components/calls/phone/PhoneCall.async.tsx");
/* harmony import */ var _calls_phone_RatePhoneCallModal_async__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../calls/phone/RatePhoneCallModal.async */ "./src/components/calls/phone/RatePhoneCallModal.async.tsx");
/* harmony import */ var _common_CustomEmojiSetsModal_async__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../common/CustomEmojiSetsModal.async */ "./src/components/common/CustomEmojiSetsModal.async.tsx");
/* harmony import */ var _common_DeleteMessageModal_async__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../common/DeleteMessageModal.async */ "./src/components/common/DeleteMessageModal.async.tsx");
/* harmony import */ var _common_StickerSetModal_async__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../common/StickerSetModal.async */ "./src/components/common/StickerSetModal.async.tsx");
/* harmony import */ var _common_UnreadCounter__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../common/UnreadCounter */ "./src/components/common/UnreadCounter.tsx");
/* harmony import */ var _left_LeftColumn__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../left/LeftColumn */ "./src/components/left/LeftColumn.tsx");
/* harmony import */ var _mediaViewer_MediaViewer_async__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../mediaViewer/MediaViewer.async */ "./src/components/mediaViewer/MediaViewer.async.tsx");
/* harmony import */ var _middle_message_reactions_ReactionPicker_async__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../middle/message/reactions/ReactionPicker.async */ "./src/components/middle/message/reactions/ReactionPicker.async.tsx");
/* harmony import */ var _middle_MessageListHistoryHandler__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../middle/MessageListHistoryHandler */ "./src/components/middle/MessageListHistoryHandler.tsx");
/* harmony import */ var _middle_MiddleColumn__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../middle/MiddleColumn */ "./src/components/middle/MiddleColumn.tsx");
/* harmony import */ var _middle_panes_AudioPlayer__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../middle/panes/AudioPlayer */ "./src/components/middle/panes/AudioPlayer.tsx");
/* harmony import */ var _modals_ModalContainer__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../modals/ModalContainer */ "./src/components/modals/ModalContainer.tsx");
/* harmony import */ var _payment_PaymentModal_async__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../payment/PaymentModal.async */ "./src/components/payment/PaymentModal.async.tsx");
/* harmony import */ var _payment_ReceiptModal_async__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../payment/ReceiptModal.async */ "./src/components/payment/ReceiptModal.async.tsx");
/* harmony import */ var _right_RightColumn__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../right/RightColumn */ "./src/components/right/RightColumn.tsx");
/* harmony import */ var _story_StoryViewer_async__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../story/StoryViewer.async */ "./src/components/story/StoryViewer.async.tsx");
/* harmony import */ var _AttachBotRecipientPicker_async__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./AttachBotRecipientPicker.async */ "./src/components/main/AttachBotRecipientPicker.async.tsx");
/* harmony import */ var _BotTrustModal_async__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./BotTrustModal.async */ "./src/components/main/BotTrustModal.async.tsx");
/* harmony import */ var _DeleteFolderDialog_async__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./DeleteFolderDialog.async */ "./src/components/main/DeleteFolderDialog.async.tsx");
/* harmony import */ var _Dialogs_async__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./Dialogs.async */ "./src/components/main/Dialogs.async.tsx");
/* harmony import */ var _DownloadManager__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./DownloadManager */ "./src/components/main/DownloadManager.tsx");
/* harmony import */ var _DraftRecipientPicker_async__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./DraftRecipientPicker.async */ "./src/components/main/DraftRecipientPicker.async.tsx");
/* harmony import */ var _ForwardRecipientPicker_async__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./ForwardRecipientPicker.async */ "./src/components/main/ForwardRecipientPicker.async.tsx");
/* harmony import */ var _GameModal__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./GameModal */ "./src/components/main/GameModal.tsx");
/* harmony import */ var _HistoryCalendar_async__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./HistoryCalendar.async */ "./src/components/main/HistoryCalendar.async.tsx");
/* harmony import */ var _NewContactModal_async__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./NewContactModal.async */ "./src/components/main/NewContactModal.async.tsx");
/* harmony import */ var _Notifications_async__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./Notifications.async */ "./src/components/main/Notifications.async.tsx");
/* harmony import */ var _premium_common_PremiumLimitReachedModal_async__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./premium/common/PremiumLimitReachedModal.async */ "./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx");
/* harmony import */ var _premium_GiveawayModal_async__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./premium/GiveawayModal.async */ "./src/components/main/premium/GiveawayModal.async.tsx");
/* harmony import */ var _premium_PremiumMainModal_async__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./premium/PremiumMainModal.async */ "./src/components/main/premium/PremiumMainModal.async.tsx");
/* harmony import */ var _premium_StarsGiftingPickerModal_async__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./premium/StarsGiftingPickerModal.async */ "./src/components/main/premium/StarsGiftingPickerModal.async.tsx");
/* harmony import */ var _SafeLinkModal_async__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./SafeLinkModal.async */ "./src/components/main/SafeLinkModal.async.tsx");
/* harmony import */ var _visualEffects_ConfettiContainer__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./visualEffects/ConfettiContainer */ "./src/components/main/visualEffects/ConfettiContainer.tsx");
/* harmony import */ var _visualEffects_SnapEffectContainer__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./visualEffects/SnapEffectContainer */ "./src/components/main/visualEffects/SnapEffectContainer.tsx");
/* harmony import */ var _visualEffects_WaveContainer__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./visualEffects/WaveContainer */ "./src/components/main/visualEffects/WaveContainer.tsx");
/* harmony import */ var _Main_scss__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./Main.scss */ "./src/components/main/Main.scss");


































































const APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min
const CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec

// eslint-disable-next-line @typescript-eslint/naming-convention
let DEBUG_isLogged = false;
const Main = ({
  isMobile,
  isLeftColumnOpen,
  isMiddleColumnOpen,
  isRightColumnOpen,
  isMediaViewerOpen,
  isStoryViewerOpen,
  isForwardModalOpen,
  hasNotifications,
  hasDialogs,
  activeGroupCallId,
  safeLinkModalUrl,
  isHistoryCalendarOpen,
  shouldSkipHistoryAnimations,
  limitReached,
  openedStickerSetShortName,
  openedCustomEmojiSetIds,
  isServiceChatReady,
  withInterfaceAnimations,
  wasTimeFormatSetManually,
  addedSetIds,
  addedCustomEmojiIds,
  isPhoneCallActive,
  newContactUserId,
  newContactByPhoneNumber,
  openedGame,
  gameTitle,
  isRatePhoneCallModalOpen,
  botTrustRequest,
  botTrustRequestBot,
  requestedAttachBotInChat,
  requestedDraft,
  isPremiumModalOpen,
  isGiveawayModalOpen,
  isDeleteMessageModalOpen,
  isStarsGiftingPickerModal,
  isPaymentModalOpen,
  isReceiptModalOpen,
  isReactionPickerOpen,
  isCurrentUserPremium,
  deleteFolderDialog,
  isMasterTab,
  noRightColumnAnimation,
  isSynced,
  currentUserId
}) => {
  const {
    initMain,
    loadAnimatedEmojis,
    loadBirthdayNumbersStickers,
    loadRestrictedEmojiStickers,
    loadNotificationSettings,
    loadNotificationExceptions,
    updateIsOnline,
    onTabFocusChange,
    loadTopInlineBots,
    loadEmojiKeywords,
    loadCountryList,
    loadAvailableReactions,
    loadStickerSets,
    loadPremiumGifts,
    loadStarGifts,
    loadDefaultTopicIcons,
    loadAddedStickers,
    loadFavoriteStickers,
    loadDefaultStatusIcons,
    ensureTimeFormat,
    closeStickerSetModal,
    closeCustomEmojiSets,
    checkVersionNotification,
    loadConfig,
    loadAppConfig,
    loadAttachBots,
    loadContactList,
    loadCustomEmojis,
    loadGenericEmojiEffects,
    closePaymentModal,
    clearReceipt,
    checkAppVersion,
    openThread,
    toggleLeftColumn,
    loadRecentEmojiStatuses,
    updatePageTitle,
    loadTopReactions,
    loadRecentReactions,
    loadDefaultTagReactions,
    loadFeaturedEmojiStickers,
    setIsElectronUpdateAvailable,
    loadAuthorizations,
    loadPeerColors,
    loadSavedReactionTags,
    loadTimezones,
    loadQuickReplies,
    loadStarStatus,
    loadAvailableEffects,
    loadTopBotApps,
    loadPaidReactionPrivacy,
    loadPasswordInfo
  } = (0,_global__WEBPACK_IMPORTED_MODULE_3__.getActions)();
  if (_config__WEBPACK_IMPORTED_MODULE_5__.DEBUG && !DEBUG_isLogged) {
    DEBUG_isLogged = true;
    // eslint-disable-next-line no-console
    console.log('>>> RENDER MAIN');
  }
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_19__["default"])();

  // Preload Calls bundle to initialize sounds for iOS
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    void (0,_util_moduleLoader__WEBPACK_IMPORTED_MODULE_11__.loadBundle)(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_11__.Bundles.Calls);
  }, CALL_BUNDLE_LOADING_DELAY_MS);

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const leftColumnRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  const {
    isDesktop
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_17__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {
      // Always display at least one column
      toggleLeftColumn();
    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {
      // Can't have two active columns at the same time
      toggleLeftColumn();
    }
  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_15__["default"])(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_ELECTRON) {
      return undefined;
    }
    const removeUpdateAvailableListener = window.electron.on(_types_electron__WEBPACK_IMPORTED_MODULE_4__.ElectronEvent.UPDATE_AVAILABLE, () => {
      setIsElectronUpdateAvailable(true);
    });
    const removeUpdateErrorListener = window.electron.on(_types_electron__WEBPACK_IMPORTED_MODULE_4__.ElectronEvent.UPDATE_ERROR, () => {
      setIsElectronUpdateAvailable(false);
      removeUpdateAvailableListener?.();
    });
    return () => {
      removeUpdateErrorListener?.();
      removeUpdateAvailableListener?.();
    };
  }, []);

  // Initial API calls
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isMasterTab && isSynced) {
      updateIsOnline(true);
      loadConfig();
      loadAppConfig();
      loadPeerColors();
      initMain();
      loadAvailableReactions();
      loadAnimatedEmojis();
      loadNotificationSettings();
      loadNotificationExceptions();
      loadAttachBots();
      loadContactList();
      loadDefaultTopicIcons();
      checkAppVersion();
      loadTopReactions();
      loadRecentReactions();
      loadDefaultTagReactions();
      loadFeaturedEmojiStickers();
      loadTopInlineBots();
      loadEmojiKeywords({
        language: _config__WEBPACK_IMPORTED_MODULE_5__.BASE_EMOJI_KEYWORD_LANG
      });
      loadTimezones();
      loadQuickReplies();
      loadStarStatus();
      loadPremiumGifts();
      loadStarGifts();
      loadAvailableEffects();
      loadBirthdayNumbersStickers();
      loadRestrictedEmojiStickers();
      loadGenericEmojiEffects();
      loadSavedReactionTags();
      loadAuthorizations();
      loadTopBotApps();
      loadPaidReactionPrivacy();
      loadPasswordInfo();
    }
  }, [isMasterTab, isSynced]);

  // Initial Premium API calls
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isMasterTab && isCurrentUserPremium) {
      loadDefaultStatusIcons();
      loadRecentEmojiStatuses();
    }
  }, [isCurrentUserPremium, isMasterTab]);

  // Language-based API calls
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isMasterTab) {
      if (lang.code !== _config__WEBPACK_IMPORTED_MODULE_5__.BASE_EMOJI_KEYWORD_LANG) {
        loadEmojiKeywords({
          language: lang.code
        });
      }
      loadCountryList({
        langCode: lang.code
      });
      loadAttachBots();
    }
  }, [lang, isMasterTab]);

  // Re-fetch cached saved emoji for `localDb`
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isMasterTab) {
      loadCustomEmojis({
        ids: Object.keys((0,_global__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().customEmojis.byId),
        ignoreCache: true
      });
    }
  }, [isMasterTab]);

  // Sticker sets
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isMasterTab && isSynced) {
      if (!addedSetIds || !addedCustomEmojiIds) {
        loadStickerSets();
        loadFavoriteStickers();
      }
      if (addedSetIds && addedCustomEmojiIds) {
        loadAddedStickers();
      }
    }
  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);

  // Check version when service chat is ready
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isServiceChatReady && isMasterTab) {
      checkVersionNotification();
    }
  }, [isServiceChatReady, isMasterTab]);

  // Ensure time format
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!wasTimeFormatSetManually) {
      ensureTimeFormat();
    }
  }, [wasTimeFormatSetManually]);

  // Parse deep link
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!isSynced) return;
    updatePageTitle();
    const parsedInitialLocationHash = (0,_util_routing__WEBPACK_IMPORTED_MODULE_12__.parseInitialLocationHash)();
    if (parsedInitialLocationHash?.tgaddr) {
      (0,_util_deeplink__WEBPACK_IMPORTED_MODULE_10__.processDeepLink)(decodeURIComponent(parsedInitialLocationHash.tgaddr));
    }
  }, [isSynced]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    return window.electron?.on(_types_electron__WEBPACK_IMPORTED_MODULE_4__.ElectronEvent.DEEPLINK, link => {
      (0,_util_deeplink__WEBPACK_IMPORTED_MODULE_10__.processDeepLink)(decodeURIComponent(link));
    });
  }, []);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    const parsedLocationHash = (0,_util_routing__WEBPACK_IMPORTED_MODULE_12__.parseLocationHash)(currentUserId);
    if (!parsedLocationHash) return;
    openThread({
      chatId: parsedLocationHash.chatId,
      threadId: parsedLocationHash.threadId,
      type: parsedLocationHash.type
    });
  }, [currentUserId]);

  // Restore Transition slide class after async rendering
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(() => {
    const container = containerRef.current;
    if (container.parentNode.childElementCount === 1) {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_2__.addExtraClass)(container, 'Transition_slide-active');
    }
  }, []);
  (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_22__["default"])({
    ref: containerRef,
    isOpen: isLeftColumnOpen,
    noCloseTransition: shouldSkipHistoryAnimations,
    prefix: 'left-column-'
  });
  const willAnimateLeftColumnRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_18__["default"])();

  // Handle opening middle column
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_23__["default"])(([prevIsLeftColumnOpen]) => {
    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {
      return;
    }
    willAnimateLeftColumnRef.current = true;
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_ANDROID) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__.requestNextMutation)(() => {
        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);
      });
    }
    const endHeavyAnimation = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.beginHeavyAnimation)();
    (0,_util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_9__.waitForTransitionEnd)(document.getElementById('MiddleColumn'), () => {
      endHeavyAnimation();
      willAnimateLeftColumnRef.current = false;
      forceUpdate();
    });
  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);
  (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_22__["default"])({
    ref: containerRef,
    isOpen: isRightColumnOpen,
    noCloseTransition: shouldSkipHistoryAnimations,
    prefix: 'right-column-'
  });
  const willAnimateRightColumnRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);
  const [isNarrowMessageList, setIsNarrowMessageList] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useState)(isRightColumnOpen);
  const isFullscreen = (0,_hooks_window_useFullscreen__WEBPACK_IMPORTED_MODULE_26__.useFullscreenStatus)();

  // Handle opening right column
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_23__["default"])(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {
    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {
      return;
    }
    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {
      setIsNarrowMessageList(isRightColumnOpen);
      return;
    }
    willAnimateRightColumnRef.current = true;
    const endHeavyAnimation = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.beginHeavyAnimation)();
    (0,_util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_9__.waitForTransitionEnd)(document.getElementById('RightColumn'), () => {
      endHeavyAnimation();
      willAnimateRightColumnRef.current = false;
      forceUpdate();
      setIsNarrowMessageList(isRightColumnOpen);
    });
  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])(willAnimateLeftColumnRef.current && 'left-column-animating', willAnimateRightColumnRef.current && 'right-column-animating', isNarrowMessageList && 'narrow-message-list', shouldSkipHistoryAnimations && 'history-animation-disabled', isFullscreen && 'is-fullscreen');
  const handleBlur = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_20__["default"])(() => {
    onTabFocusChange({
      isBlurred: true
    });
  });
  const handleFocus = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_20__["default"])(() => {
    onTabFocusChange({
      isBlurred: false
    });
    if (!document.title.includes(_config__WEBPACK_IMPORTED_MODULE_5__.INACTIVE_MARKER)) {
      updatePageTitle();
    }
    (0,_util_updateIcon__WEBPACK_IMPORTED_MODULE_13__["default"])(false);
  });
  const handleStickerSetModalClose = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_20__["default"])(() => {
    closeStickerSetModal();
  });
  const handleCustomEmojiSetsModalClose = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_20__["default"])(() => {
    closeCustomEmojiSets();
  });

  // Online status and browser tab indicators
  (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_24__["default"])(handleBlur, handleFocus, !!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_ELECTRON);
  (0,_hooks_window_useBeforeUnload__WEBPACK_IMPORTED_MODULE_25__["default"])(handleBlur);
  (0,_hooks_usePreventPinchZoomGesture__WEBPACK_IMPORTED_MODULE_21__["default"])(isMediaViewerOpen || isStoryViewerOpen);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement("div", {
    ref: containerRef,
    id: "Main",
    className: className
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_left_LeftColumn__WEBPACK_IMPORTED_MODULE_35__["default"], {
    ref: leftColumnRef
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_middle_MiddleColumn__WEBPACK_IMPORTED_MODULE_39__["default"], {
    leftColumnRef: leftColumnRef,
    isMobile: isMobile
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_right_RightColumn__WEBPACK_IMPORTED_MODULE_44__["default"], {
    isMobile: isMobile
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_mediaViewer_MediaViewer_async__WEBPACK_IMPORTED_MODULE_36__["default"], {
    isOpen: isMediaViewerOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_story_StoryViewer_async__WEBPACK_IMPORTED_MODULE_45__["default"], {
    isOpen: isStoryViewerOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_ForwardRecipientPicker_async__WEBPACK_IMPORTED_MODULE_52__["default"], {
    isOpen: isForwardModalOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_DraftRecipientPicker_async__WEBPACK_IMPORTED_MODULE_51__["default"], {
    requestedDraft: requestedDraft
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_Notifications_async__WEBPACK_IMPORTED_MODULE_56__["default"], {
    isOpen: hasNotifications
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_Dialogs_async__WEBPACK_IMPORTED_MODULE_49__["default"], {
    isOpen: hasDialogs
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_middle_panes_AudioPlayer__WEBPACK_IMPORTED_MODULE_40__["default"], {
    noUi: true
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_modals_ModalContainer__WEBPACK_IMPORTED_MODULE_41__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_SafeLinkModal_async__WEBPACK_IMPORTED_MODULE_61__["default"], {
    url: safeLinkModalUrl
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_HistoryCalendar_async__WEBPACK_IMPORTED_MODULE_54__["default"], {
    isOpen: isHistoryCalendarOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_common_StickerSetModal_async__WEBPACK_IMPORTED_MODULE_33__["default"], {
    isOpen: Boolean(openedStickerSetShortName),
    onClose: handleStickerSetModalClose,
    stickerSetShortName: openedStickerSetShortName
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_common_CustomEmojiSetsModal_async__WEBPACK_IMPORTED_MODULE_31__["default"], {
    customEmojiSetIds: openedCustomEmojiSetIds,
    onClose: handleCustomEmojiSetsModalClose
  }), activeGroupCallId && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_calls_group_GroupCall_async__WEBPACK_IMPORTED_MODULE_28__["default"], {
    groupCallId: activeGroupCallId
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_calls_ActiveCallHeader_async__WEBPACK_IMPORTED_MODULE_27__["default"], {
    isActive: Boolean(activeGroupCallId || isPhoneCallActive)
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_NewContactModal_async__WEBPACK_IMPORTED_MODULE_55__["default"], {
    isOpen: Boolean(newContactUserId || newContactByPhoneNumber),
    userId: newContactUserId,
    isByPhoneNumber: newContactByPhoneNumber
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_GameModal__WEBPACK_IMPORTED_MODULE_53__["default"], {
    openedGame: openedGame,
    gameTitle: gameTitle
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_DownloadManager__WEBPACK_IMPORTED_MODULE_50__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_visualEffects_ConfettiContainer__WEBPACK_IMPORTED_MODULE_62__["default"], null), _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_WAVE_TRANSFORM_SUPPORTED && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_visualEffects_WaveContainer__WEBPACK_IMPORTED_MODULE_64__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_visualEffects_SnapEffectContainer__WEBPACK_IMPORTED_MODULE_63__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_calls_phone_PhoneCall_async__WEBPACK_IMPORTED_MODULE_29__["default"], {
    isActive: isPhoneCallActive
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_common_UnreadCounter__WEBPACK_IMPORTED_MODULE_34__["default"], {
    isForAppBadge: true
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_calls_phone_RatePhoneCallModal_async__WEBPACK_IMPORTED_MODULE_30__["default"], {
    isOpen: isRatePhoneCallModalOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_BotTrustModal_async__WEBPACK_IMPORTED_MODULE_47__["default"], {
    bot: botTrustRequestBot,
    type: botTrustRequest?.type,
    shouldRequestWriteAccess: botTrustRequest?.shouldRequestWriteAccess
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AttachBotRecipientPicker_async__WEBPACK_IMPORTED_MODULE_46__["default"], {
    requestedAttachBotInChat: requestedAttachBotInChat
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_middle_MessageListHistoryHandler__WEBPACK_IMPORTED_MODULE_38__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_premium_PremiumMainModal_async__WEBPACK_IMPORTED_MODULE_59__["default"], {
    isOpen: isPremiumModalOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_premium_GiveawayModal_async__WEBPACK_IMPORTED_MODULE_58__["default"], {
    isOpen: isGiveawayModalOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_premium_StarsGiftingPickerModal_async__WEBPACK_IMPORTED_MODULE_60__["default"], {
    isOpen: isStarsGiftingPickerModal
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_premium_common_PremiumLimitReachedModal_async__WEBPACK_IMPORTED_MODULE_57__["default"], {
    limit: limitReached
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_payment_PaymentModal_async__WEBPACK_IMPORTED_MODULE_42__["default"], {
    isOpen: isPaymentModalOpen,
    onClose: closePaymentModal
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_payment_ReceiptModal_async__WEBPACK_IMPORTED_MODULE_43__["default"], {
    isOpen: isReceiptModalOpen,
    onClose: clearReceipt
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_DeleteFolderDialog_async__WEBPACK_IMPORTED_MODULE_48__["default"], {
    folder: deleteFolderDialog
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_middle_message_reactions_ReactionPicker_async__WEBPACK_IMPORTED_MODULE_37__["default"], {
    isOpen: isReactionPickerOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_common_DeleteMessageModal_async__WEBPACK_IMPORTED_MODULE_32__["default"], {
    isOpen: isDeleteMessageModalOpen
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_3__.withGlobal)((global, {
  isMobile
}) => {
  const {
    settings: {
      byKey: {
        wasTimeFormatSetManually
      }
    },
    currentUserId
  } = global;
  const {
    botTrustRequest,
    requestedAttachBotInChat,
    requestedDraft,
    safeLinkModalUrl,
    openedStickerSetShortName,
    openedCustomEmojiSetIds,
    shouldSkipHistoryAnimations,
    openedGame,
    isLeftColumnShown,
    historyCalendarSelectedAt,
    notifications,
    dialogs,
    newContact,
    ratingPhoneCall,
    premiumModal,
    giveawayModal,
    deleteMessageModal,
    starsGiftingPickerModal,
    isMasterTab,
    payment,
    limitReachedModal,
    deleteFolderDialogModal
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global);
  const gameMessage = openedGame && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChatMessage)(global, openedGame.chatId, openedGame.messageId);
  const gameTitle = gameMessage?.content.game?.title;
  const {
    chatId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMessageList)(global) || {};
  const noRightColumnAnimation = !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPerformanceSettingsValue)(global, 'rightColumnAnimations') || !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCanAnimateInterface)(global);
  const deleteFolderDialog = deleteFolderDialogModal ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChatFolder)(global, deleteFolderDialogModal) : undefined;
  return {
    currentUserId,
    isLeftColumnOpen: isLeftColumnShown,
    isMiddleColumnOpen: Boolean(chatId),
    isRightColumnOpen: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsRightColumnShown)(global, isMobile),
    isMediaViewerOpen: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsMediaViewerOpen)(global),
    isStoryViewerOpen: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsStoryViewerOpen)(global),
    isForwardModalOpen: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsForwardModalOpen)(global),
    isReactionPickerOpen: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsReactionPickerOpen)(global),
    hasNotifications: Boolean(notifications.length),
    hasDialogs: Boolean(dialogs.length),
    safeLinkModalUrl,
    isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),
    shouldSkipHistoryAnimations,
    openedStickerSetShortName,
    openedCustomEmojiSetIds,
    isServiceChatReady: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsServiceChatReady)(global),
    activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,
    withInterfaceAnimations: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCanAnimateInterface)(global),
    wasTimeFormatSetManually,
    isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,
    addedSetIds: global.stickers.added.setIds,
    addedCustomEmojiIds: global.customEmojis.added.setIds,
    newContactUserId: newContact?.userId,
    newContactByPhoneNumber: newContact?.isByPhoneNumber,
    openedGame,
    gameTitle,
    isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),
    botTrustRequest,
    botTrustRequestBot: botTrustRequest && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, botTrustRequest.botId),
    requestedAttachBotInChat,
    isCurrentUserPremium: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsCurrentUserPremium)(global),
    isPremiumModalOpen: premiumModal?.isOpen,
    isGiveawayModalOpen: giveawayModal?.isOpen,
    isDeleteMessageModalOpen: Boolean(deleteMessageModal),
    isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,
    limitReached: limitReachedModal?.limit,
    isPaymentModalOpen: payment.isPaymentModalOpen,
    isReceiptModalOpen: Boolean(payment.receipt),
    deleteFolderDialog,
    isMasterTab,
    requestedDraft,
    noRightColumnAnimation,
    isSynced: global.isSynced
  };
})(Main)));

/***/ }),

/***/ "./src/components/main/NewContactModal.async.tsx":
/*!*******************************************************!*\
  !*** ./src/components/main/NewContactModal.async.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const NewContactModalAsync = props => {
  const {
    isOpen
  } = props;
  const NewContactModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'NewContactModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return NewContactModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(NewContactModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NewContactModalAsync);

/***/ }),

/***/ "./src/components/main/Notifications.async.tsx":
/*!*****************************************************!*\
  !*** ./src/components/main/Notifications.async.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const NotificationsAsync = ({
  isOpen
}) => {
  const Notifications = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'Notifications', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return Notifications ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(Notifications, null) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NotificationsAsync);

/***/ }),

/***/ "./src/components/main/SafeLinkModal.async.tsx":
/*!*****************************************************!*\
  !*** ./src/components/main/SafeLinkModal.async.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const SafeLinkModalAsync = props => {
  const {
    url
  } = props;
  const SafeLinkModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'SafeLinkModal', !url);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return SafeLinkModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(SafeLinkModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SafeLinkModalAsync);

/***/ }),

/***/ "./src/components/main/WebAppsCloseConfirmationModal.async.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/main/WebAppsCloseConfirmationModal.async.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const WebAppsCloseConfirmationModalAsync = props => {
  const {
    modal
  } = props;
  const WebAppsCloseConfirmationModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return WebAppsCloseConfirmationModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(WebAppsCloseConfirmationModal, {
    isOpen: modal
  }) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebAppsCloseConfirmationModalAsync);

/***/ }),

/***/ "./src/components/main/premium/GiveawayModal.async.tsx":
/*!*************************************************************!*\
  !*** ./src/components/main/premium/GiveawayModal.async.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GiveawayModalAsync = props => {
  const {
    isOpen
  } = props;
  const GiveawayModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'GiveawayModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GiveawayModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GiveawayModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GiveawayModalAsync);

/***/ }),

/***/ "./src/components/main/premium/PremiumMainModal.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/main/premium/PremiumMainModal.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const PremiumMainModalAsync = props => {
  const {
    isOpen
  } = props;
  const PremiumMainModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'PremiumMainModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return PremiumMainModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PremiumMainModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PremiumMainModalAsync);

/***/ }),

/***/ "./src/components/main/premium/StarsGiftingPickerModal.async.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/main/premium/StarsGiftingPickerModal.async.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StarsGiftingPickerModalAsync = props => {
  const {
    isOpen
  } = props;
  const StarsGiftingPickerModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StarsGiftingPickerModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StarsGiftingPickerModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StarsGiftingPickerModalAsync);

/***/ }),

/***/ "./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx":
/*!*******************************************************************************!*\
  !*** ./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const PremiumLimitReachedModalAsync = props => {
  const {
    limit
  } = props;
  const PremiumLimitReachedModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'PremiumLimitReachedModal', !limit);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return PremiumLimitReachedModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PremiumLimitReachedModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PremiumLimitReachedModalAsync);

/***/ }),

/***/ "./src/components/main/visualEffects/ConfettiContainer.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/main/visualEffects/ConfettiContainer.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/window/useWindowSize */ "./src/hooks/window/useWindowSize.ts");
/* harmony import */ var _ConfettiContainer_module_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ConfettiContainer.module.scss */ "./src/components/main/visualEffects/ConfettiContainer.module.scss");












const CONFETTI_FADEOUT_TIMEOUT = 10000;
const DEFAULT_CONFETTI_SIZE = 10;
const CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];
// eslint-disable-next-line max-len
const STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');
const STAR_SIZE_MULTIPLIER = 1.5;
const ConfettiContainer = ({
  confetti
}) => {
  // eslint-disable-next-line no-null/no-null
  const canvasRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const confettiRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);
  const isRafStartedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const windowSize = (0,_hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const defaultConfettiAmount = isMobile ? 50 : 100;
  const {
    lastConfettiTime,
    top,
    width,
    left,
    height,
    style = 'poppers'
  } = confetti || {};
  const generateConfetti = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])((w, h, amount = defaultConfettiAmount) => {
    for (let i = 0; i < amount; i++) {
      const {
        position,
        velocity
      } = generateRandomPositionData(style, w, h, i);
      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);
      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];
      confettiRef.current.push({
        pos: position,
        size,
        color: randomColor,
        velocity,
        flicker: size,
        flickerFrequency: Math.random() * 0.2,
        rotation: 0,
        lastDrawnAt: Date.now(),
        frameCount: 0,
        isStar: confetti?.withStars && Math.random() > 0.8
      });
    }
  });
  const updateCanvas = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    if (!canvasRef.current || !isRafStartedRef.current) {
      return;
    }
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      return;
    }
    const {
      width: canvasWidth,
      height: canvasHeight
    } = canvas;
    ctx.clearRect(0, 0, canvasWidth, canvasHeight);
    const confettiToRemove = [];
    confettiRef.current.forEach((c, i) => {
      const {
        pos,
        velocity,
        size,
        color,
        flicker,
        flickerFrequency,
        rotation,
        lastDrawnAt,
        frameCount
      } = c;
      const diff = (Date.now() - lastDrawnAt) / 1000;
      const newPos = {
        x: pos.x + velocity.x * diff,
        y: pos.y + velocity.y * diff
      };
      const newVelocity = {
        x: velocity.x * 0.5 ** (diff / 1),
        // Air Resistance
        y: velocity.y += diff * 1000 // Gravity
      };
      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));
      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);
      const newFrameCount = frameCount + 1;
      const newLastDrawnAt = Date.now();
      const shouldRemove = newPos.y > canvasHeight + c.size;
      if (shouldRemove) {
        confettiToRemove.push(c);
        return;
      }
      const newConfetti = {
        ...c,
        pos: newPos,
        velocity: newVelocity,
        flicker: newFlicker,
        rotation: newRotation,
        lastDrawnAt: newLastDrawnAt,
        frameCount: newFrameCount
      };
      confettiRef.current[i] = newConfetti;
      ctx.fillStyle = color;
      if (c.isStar) {
        ctx.save();
        ctx.translate(pos.x, pos.y);
        ctx.scale(size / DEFAULT_CONFETTI_SIZE * STAR_SIZE_MULTIPLIER, size / DEFAULT_CONFETTI_SIZE * STAR_SIZE_MULTIPLIER);
        ctx.rotate(rotation);
        ctx.fill(STAR_PATH);
        ctx.restore();
      } else {
        ctx.beginPath();
        ctx.ellipse(pos.x, pos.y, size, flicker, rotation, 0, 2 * Math.PI);
        ctx.fill();
      }
    });
    confettiRef.current = confettiRef.current.filter(c => !confettiToRemove.includes(c));
    if (confettiRef.current.length) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(updateCanvas);
    } else {
      isRafStartedRef.current = false;
    }
  });
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_9__["default"])(([prevConfettiTime]) => {
    let hideTimeout;
    if (prevConfettiTime !== lastConfettiTime) {
      generateConfetti(width || windowSize.width, height || windowSize.height);
      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);
      if (!isRafStartedRef.current) {
        isRafStartedRef.current = true;
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(updateCanvas);
      }
    }
    return () => {
      clearTimeout(hideTimeout);
    };
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated
  }, [lastConfettiTime, forceUpdate, updateCanvas]);
  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {
    return undefined;
  }
  const containerStyle = (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_4__["default"])(Boolean(top) && `top: ${top}px`, Boolean(left) && `left: ${left}px`, Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "Confetti",
    className: _ConfettiContainer_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].root,
    style: containerStyle
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: canvasRef,
    className: _ConfettiContainer_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].canvas,
    width: windowSize.width,
    height: windowSize.height
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_5__.pick)((0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global), ['confetti']))(ConfettiContainer)));
function generateRandomPositionData(style, containerWidth, containerHeight, index) {
  if (style === 'poppers') {
    const leftSide = index % 2;
    const position = {
      x: containerWidth * (leftSide ? -0.1 : 1.1),
      y: containerHeight * 0.66
    };
    const randomX = Math.random() * containerWidth;
    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);
    const velocity = {
      x: leftSide ? randomX : randomX * -1,
      y: randomY
    };
    return {
      position,
      velocity
    };
  } else {
    const position = {
      x: Math.random() * containerWidth,
      y: -DEFAULT_CONFETTI_SIZE * 2
    };
    const randomX = randomNumberAroundZero(containerWidth);
    const randomY = -containerHeight * Math.random() * 1.25;
    const velocity = {
      x: randomX,
      y: randomY
    };
    return {
      position,
      velocity
    };
  }
}
function randomNumberAroundZero(max = 1) {
  return Math.random() * max - max / 2;
}

/***/ }),

/***/ "./src/components/main/visualEffects/WaveContainer.tsx":
/*!*************************************************************!*\
  !*** ./src/components/main/visualEffects/WaveContainer.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_svgController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/svgController */ "./src/util/svgController.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/windowSize */ "./src/util/windowSize.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _WaveContainer_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./WaveContainer.module.scss */ "./src/components/main/visualEffects/WaveContainer.module.scss");
/* harmony import */ var _assets_wave_ripple_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../assets/wave_ripple.svg */ "./src/assets/wave_ripple.svg");











const BASE_SIZE_MULTIPLIER = 1.73;
const FILTER_ID = 'wave-filter';
const FILTER_SCALE = '20';
const WAVE_COUNT_LIMIT = 7;
const WaveContainer = ({
  waveInfo
}) => {
  const [waves, setWaves] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const addWave = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(newWave => {
    if (waves.length >= WAVE_COUNT_LIMIT) return;
    setWaves(prevWaves => [...prevWaves, newWave]);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!waveInfo) return;
    const {
      startX,
      startY
    } = waveInfo;
    const {
      width,
      height
    } = _util_windowSize__WEBPACK_IMPORTED_MODULE_7__["default"].get();
    const maxSize = Math.max(width - startX, height - startY, startX, startY);
    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;
    const top = startY - overlaySize / 2;
    const left = startX - overlaySize / 2;
    addWave({
      startTime: waveInfo.lastWaveTime,
      waveWidth: overlaySize,
      top,
      left
    });
  }, [waveInfo]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    (0,_util_svgController__WEBPACK_IMPORTED_MODULE_6__.addSvgDefinition)( /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("filter", {
      x: "0",
      y: "0",
      width: "1",
      height: "1",
      "color-interpolation-filters": "sRGB",
      xmlns: _config__WEBPACK_IMPORTED_MODULE_2__.SVG_NAMESPACE
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feImage", {
      href: _assets_wave_ripple_svg__WEBPACK_IMPORTED_MODULE_10__,
      result: "waveImage"
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feDisplacementMap", {
      in: "SourceGraphic",
      in2: "waveImage",
      scale: FILTER_SCALE,
      xChannelSelector: "R",
      yChannelSelector: "B"
    })), FILTER_ID);
    return () => {
      (0,_util_svgController__WEBPACK_IMPORTED_MODULE_6__.removeSvgDefinition)(FILTER_ID);
    };
  }, []);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_WaveContainer_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root),
    teactFastList: true
  }, waves.map(wave => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _WaveContainer_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].wave,
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_5__["default"])(`--wave-width: ${wave.waveWidth}px`, `--wave-pos-top: ${wave.top}px`, `--wave-pos-left: ${wave.left}px`),
    key: wave.startTime,
    onAnimationEnd: () => setWaves(prevWaves => prevWaves.filter(w => w !== wave))
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global);
  return {
    waveInfo: tabState.wave
  };
})(WaveContainer)));

/***/ }),

/***/ "./src/components/mediaViewer/MediaViewer.async.tsx":
/*!**********************************************************!*\
  !*** ./src/components/mediaViewer/MediaViewer.async.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const MediaViewerAsync = ({
  isOpen
}) => {
  const MediaViewer = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'MediaViewer', !isOpen);
  return MediaViewer ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MediaViewer, null) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MediaViewerAsync);

/***/ }),

/***/ "./src/components/middle/ChatLanguageModal.async.tsx":
/*!***********************************************************!*\
  !*** ./src/components/middle/ChatLanguageModal.async.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ChatLanguageModalAsync = props => {
  const {
    isOpen
  } = props;
  const ChatLanguageModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ChatLanguageModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ChatLanguageModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ChatLanguageModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatLanguageModalAsync);

/***/ }),

/***/ "./src/components/middle/ContactGreeting.tsx":
/*!***************************************************!*\
  !*** ./src/components/middle/ContactGreeting.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_StickerView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/StickerView */ "./src/components/common/StickerView.tsx");
/* harmony import */ var _ContactGreeting_module_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ContactGreeting.module.scss */ "./src/components/middle/ContactGreeting.module.scss");








const ContactGreeting = ({
  defaultStickers,
  connectionState,
  lastUnreadMessageId,
  currentMessageList,
  businessIntro,
  user
}) => {
  const {
    loadGreetingStickers,
    sendMessage,
    markMessageListRead
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const sticker = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (businessIntro?.sticker) return businessIntro.sticker;
    if (!defaultStickers?.length) return undefined;
    const randomIndex = Math.floor(Math.random() * defaultStickers.length);
    return defaultStickers[randomIndex];
  }, [businessIntro?.sticker, defaultStickers]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {
      return;
    }
    loadGreetingStickers();
  }, [connectionState, loadGreetingStickers, defaultStickers]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {
      markMessageListRead({
        maxId: lastUnreadMessageId
      });
    }
  }, [connectionState, markMessageListRead, lastUnreadMessageId]);
  const handleStickerSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!currentMessageList) {
      return;
    }
    sendMessage({
      sticker: {
        ...sticker,
        isPreloadedGlobally: true
      },
      messageList: currentMessageList
    });
  });
  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');
  const description = businessIntro?.description || lang('Conversation.GreetingText');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ContactGreeting_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ContactGreeting_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].wrapper
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: _ContactGreeting_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].title,
    dir: "auto"
  }, title), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: _ContactGreeting_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].description,
    dir: "auto"
  }, description), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    className: _ContactGreeting_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].sticker,
    onClick: handleStickerSelect
  }, sticker && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_StickerView__WEBPACK_IMPORTED_MODULE_6__["default"], {
    containerRef: containerRef,
    sticker: sticker,
    size: 160,
    shouldLoop: true
  }))), businessIntro && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ContactGreeting_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].explainer
  }, lang('Chat.EmptyStateIntroFooter', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFullName)(user))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  userId
}) => {
  const {
    stickers
  } = global.stickers.greeting;
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChat)(global, userId);
  if (!chat) {
    return {};
  }
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, userId);
  const fullInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUserFullInfo)(global, userId);
  const lastMessage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatLastMessage)(global, chat.id);
  return {
    defaultStickers: stickers,
    lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId ? lastMessage.id : undefined,
    connectionState: global.connectionState,
    currentMessageList: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMessageList)(global),
    businessIntro: fullInfo?.businessIntro,
    user
  };
})(ContactGreeting)));

/***/ }),

/***/ "./src/components/middle/EmojiInteractionAnimation.async.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/middle/EmojiInteractionAnimation.async.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const EmojiInteractionAnimationAsync = props => {
  const {
    activeEmojiInteraction
  } = props;
  const EmojiInteractionAnimation = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return EmojiInteractionAnimation ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(EmojiInteractionAnimation, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmojiInteractionAnimationAsync);

/***/ }),

/***/ "./src/components/middle/FloatingActionButtons.tsx":
/*!*********************************************************!*\
  !*** ./src/components/middle/FloatingActionButtons.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_animateScroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/animateScroll */ "./src/util/animateScroll.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _ScrollDownButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ScrollDownButton */ "./src/components/middle/ScrollDownButton.tsx");
/* harmony import */ var _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./FloatingActionButtons.module.scss */ "./src/components/middle/FloatingActionButtons.module.scss");









const FOCUS_MARGIN = 20;
const FloatingActionButtons = ({
  withScrollDown,
  canPost,
  messageListType,
  chatId,
  unreadCount,
  unreadReactions,
  unreadMentions,
  reactionsCount,
  mentionsCount,
  withExtraShift
}) => {
  const {
    focusNextReply,
    focusNextReaction,
    focusNextMention,
    fetchUnreadReactions,
    readAllMentions,
    readAllReactions,
    fetchUnreadMentions
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const elementRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const hasUnreadReactions = Boolean(reactionsCount);
  const hasUnreadMentions = Boolean(mentionsCount);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (hasUnreadReactions && chatId && !unreadReactions?.length) {
      fetchUnreadReactions({
        chatId
      });
    }
  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (hasUnreadReactions && chatId) {
      fetchUnreadReactions({
        chatId
      });
    }
  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (hasUnreadMentions && chatId && !unreadMentions?.length) {
      fetchUnreadMentions({
        chatId
      });
    }
  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (hasUnreadMentions && chatId) {
      fetchUnreadMentions({
        chatId
      });
    }
  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);
  const handleScrollDownClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    if (!withScrollDown) {
      return;
    }
    if (messageListType === 'thread') {
      focusNextReply();
    } else {
      const messagesContainer = elementRef.current.parentElement.querySelector('.Transition_slide-active > .MessageList');
      const messageElements = messagesContainer.querySelectorAll('.message-list-item');
      const lastMessageElement = messageElements[messageElements.length - 1];
      if (!lastMessageElement) {
        return;
      }
      (0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_4__["default"])({
        container: messagesContainer,
        element: lastMessageElement,
        position: 'end',
        margin: FOCUS_MARGIN
      });
    }
  });
  const fabClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].root, (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].revealed, (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].hideScrollDown, !canPost && _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].noComposer, !withExtraShift && _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].noExtraShift);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: elementRef,
    className: fabClassName
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ScrollDownButton__WEBPACK_IMPORTED_MODULE_7__["default"], {
    icon: "heart-outline",
    ariaLabelLang: "AccDescrReactionMentionDown",
    onClick: focusNextReaction,
    onReadAll: readAllReactions,
    unreadCount: reactionsCount,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].reactions, !hasUnreadReactions && _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].hidden, !hasUnreadMentions && _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].transformDown)
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ScrollDownButton__WEBPACK_IMPORTED_MODULE_7__["default"], {
    icon: "mention",
    ariaLabelLang: "AccDescrMentionDown",
    onClick: focusNextMention,
    onReadAll: readAllMentions,
    unreadCount: mentionsCount,
    className: !hasUnreadMentions && _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].hidden
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ScrollDownButton__WEBPACK_IMPORTED_MODULE_7__["default"], {
    icon: "arrow-down",
    ariaLabelLang: "AccDescrPageDown",
    onClick: handleScrollDownClick,
    unreadCount: unreadCount,
    className: _FloatingActionButtons_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].unread
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const currentMessageList = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMessageList)(global);
  if (!currentMessageList) {
    return {};
  }
  const {
    chatId,
    threadId,
    type: messageListType
  } = currentMessageList;
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChat)(global, chatId);
  const hasActiveMiddleSearch = Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMiddleSearch)(global));
  const shouldShowCount = chat && threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID && messageListType === 'thread' && !hasActiveMiddleSearch;
  return {
    messageListType,
    chatId,
    reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,
    unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,
    unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,
    mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,
    unreadCount: shouldShowCount ? chat.unreadCount : undefined
  };
})(FloatingActionButtons)));

/***/ }),

/***/ "./src/components/middle/MessageList.tsx":
/*!***********************************************!*\
  !*** ./src/components/middle/MessageList.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_animateScroll__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/animateScroll */ "./src/util/animateScroll.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_resetScroll__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../util/resetScroll */ "./src/util/resetScroll.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_visibility_getOffsetToContainer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../util/visibility/getOffsetToContainer */ "./src/util/visibility/getOffsetToContainer.ts");
/* harmony import */ var _helpers_groupMessages__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers/groupMessages */ "./src/components/middle/helpers/groupMessages.ts");
/* harmony import */ var _helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./helpers/preventMessageInputBlur */ "./src/components/middle/helpers/preventMessageInputBlur.ts");
/* harmony import */ var _hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../hooks/schedulers/useInterval */ "./src/hooks/schedulers/useInterval.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../hooks/useLayoutEffectWithPrevDeps */ "./src/hooks/useLayoutEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useNativeCopySelectedMessages__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../hooks/useNativeCopySelectedMessages */ "./src/hooks/useNativeCopySelectedMessages.ts");
/* harmony import */ var _hooks_useStateRef__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../hooks/useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");
/* harmony import */ var _hooks_useContainerHeight__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./hooks/useContainerHeight */ "./src/components/middle/hooks/useContainerHeight.ts");
/* harmony import */ var _hooks_useStickyDates__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./hooks/useStickyDates */ "./src/components/middle/hooks/useStickyDates.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");
/* harmony import */ var _ContactGreeting__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./ContactGreeting */ "./src/components/middle/ContactGreeting.tsx");
/* harmony import */ var _MessageListBotInfo__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./MessageListBotInfo */ "./src/components/middle/MessageListBotInfo.tsx");
/* harmony import */ var _MessageListContent__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./MessageListContent */ "./src/components/middle/MessageListContent.tsx");
/* harmony import */ var _NoMessages__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./NoMessages */ "./src/components/middle/NoMessages.tsx");
/* harmony import */ var _PremiumRequiredMessage__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./PremiumRequiredMessage */ "./src/components/middle/PremiumRequiredMessage.tsx");
/* harmony import */ var _MessageList_scss__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./MessageList.scss */ "./src/components/middle/MessageList.scss");



































const MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;
const MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;
const MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;
const MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;
const BOTTOM_THRESHOLD = 50;
const UNREAD_DIVIDER_TOP = 10;
const SCROLL_DEBOUNCE = 200;
const MESSAGE_ANIMATION_DURATION = 500;
const BOTTOM_FOCUS_MARGIN = 20;
const SELECT_MODE_ANIMATION_DURATION = 200;
const UNREAD_DIVIDER_CLASS = 'unread-divider';
const runDebouncedForScroll = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_14__.debounce)(cb => cb(), SCROLL_DEBOUNCE, false);
const MessageList = ({
  chatId,
  threadId,
  type,
  isChatLoaded,
  isForum,
  isChannelChat,
  isGroupChat,
  isChannelWithAvatars,
  canPost,
  isSynced,
  isReady,
  isChatWithSelf,
  isSystemBotChat,
  isAnonymousForwards,
  isCreator,
  isBot,
  messageIds,
  messagesById,
  firstUnreadId,
  isComments,
  isViewportNewest,
  isRestricted,
  restrictionReason,
  isEmptyThread,
  focusingId,
  isSelectModeActive,
  lastMessage,
  hasLinkedChat,
  withBottomShift,
  withDefaultBg,
  topic,
  noMessageSendingAnimation,
  isServiceNotificationsChat,
  currentUserId,
  isContactRequirePremium,
  areAdsEnabled,
  channelJoinInfo,
  onIntersectPinnedMessage,
  onScrollDownToggle,
  onNotchToggle
}) => {
  const {
    loadViewportMessages,
    setScrollOffset,
    loadSponsoredMessages,
    loadMessageReactions,
    copyMessagesByIds,
    loadMessageViews,
    loadPeerStoriesByIds,
    loadFactChecks
  } = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);

  // We update local cached `scrollOffsetRef` when opening chat.
  // Then we update global version every second on scrolling.
  const scrollOffsetRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(type === 'thread' && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectScrollOffset)((0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)(), chatId, threadId) || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectLastScrollOffset)((0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)(), chatId, threadId) || 0);
  const anchorIdRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const anchorTopRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const listItemElementsRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const memoFirstUnreadIdRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const memoUnreadDividerBeforeIdRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const memoFocusingIdRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const isScrollTopJustUpdatedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const shouldAnimateAppearanceRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(Boolean(lastMessage));
  const isSavedDialog = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.getIsSavedDialog)(chatId, threadId, currentUserId);
  const hasOpenChatButton = isSavedDialog && threadId !== _config__WEBPACK_IMPORTED_MODULE_5__.ANONYMOUS_USER_ID;
  const areMessagesLoaded = Boolean(messageIds);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_24__["default"])(() => {
    // We only need it first time when message list appears
    if (areMessagesLoaded) {
      (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_14__.onTickEnd)(() => {
        shouldAnimateAppearanceRef.current = false;
      });
    }
  }, [areMessagesLoaded]);

  // Updated every time (to be used from intersection callback closure)
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_24__["default"])(() => {
    memoFirstUnreadIdRef.current = firstUnreadId;
  }, [firstUnreadId]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const canHaveAds = isChannelChat || isBot;
    if (areAdsEnabled && canHaveAds && isSynced && isReady) {
      loadSponsoredMessages({
        peerId: chatId
      });
    }
  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);

  // Updated only once when messages are loaded (as we want the unread divider to keep its position)
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_24__["default"])(() => {
    if (areMessagesLoaded) {
      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;
    }
  }, [areMessagesLoaded]);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_24__["default"])(() => {
    memoFocusingIdRef.current = focusingId;
  }, [focusingId]);
  (0,_hooks_useNativeCopySelectedMessages__WEBPACK_IMPORTED_MODULE_22__["default"])(copyMessagesByIds);
  const messageGroups = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!messageIds?.length || !messagesById) {
      return undefined;
    }
    const listedMessages = [];
    messageIds.forEach((id, index, arr) => {
      const prevMessage = listedMessages[listedMessages.length - 1];
      const message = messagesById[id];
      if (!message) {
        return;
      }
      const {
        shouldAppendJoinMessage,
        shouldAppendJoinMessageAfterCurrent
      } = (() => {
        if (!channelJoinInfo) return undefined;
        if (prevMessage && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {
          return {
            shouldAppendJoinMessage: true,
            shouldAppendJoinMessageAfterCurrent: false
          };
        }
        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {
          return {
            shouldAppendJoinMessage: true,
            shouldAppendJoinMessageAfterCurrent: true
          };
        }
        return undefined;
      })() || {};
      if (shouldAppendJoinMessageAfterCurrent) {
        listedMessages.push(message);
      }
      if (shouldAppendJoinMessage) {
        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : prevMessage?.id || message.id - 1;
        listedMessages.push({
          id: generateChannelJoinMessageId(lastMessageId),
          chatId: message.chatId,
          date: channelJoinInfo.joinedDate,
          isOutgoing: false,
          content: {
            action: {
              type: 'joinedChannel',
              mediaType: 'action',
              text: '',
              translationValues: [],
              targetChatId: message.chatId
            }
          }
        });
      }
      if (!shouldAppendJoinMessageAfterCurrent) {
        listedMessages.push(message);
      }
    });

    // Service notifications have local IDs which may be not in sync with real message history
    const orderRule = type === 'scheduled' || isServiceNotificationsChat ? ['date', 'id'] : ['id'];
    return listedMessages.length ? (0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_16__.groupMessages)((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_11__.orderBy)(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current, !isForum ? Number(threadId) : undefined, isChatWithSelf) : undefined;
  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_18__["default"])(() => {
    if (!messageIds || !messagesById || type === 'scheduled') return;
    if (!isChannelChat && !isGroupChat) return;
    const ids = messageIds.filter(id => {
      const message = messagesById[id];
      return message && message.reactions?.results.length && !message.content.action;
    });
    if (!ids.length) return;
    loadMessageReactions({
      chatId,
      ids
    });
  }, MESSAGE_REACTIONS_POLLING_INTERVAL);
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_18__["default"])(() => {
    if (!messageIds || !messagesById || type === 'scheduled') {
      return;
    }
    const storyDataList = messageIds.map(id => messagesById[id]?.content.storyData).filter(Boolean);
    if (!storyDataList.length) return;
    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {
      const {
        peerId,
        id
      } = storyData;
      if (!acc[peerId]) {
        acc[peerId] = [];
      }
      acc[peerId].push(id);
      return acc;
    }, {});
    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {
      loadPeerStoriesByIds({
        peerId,
        storyIds
      });
    });
  }, MESSAGE_STORY_POLLING_INTERVAL);
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_18__["default"])(() => {
    if (!messageIds || !messagesById || threadId !== _api_types__WEBPACK_IMPORTED_MODULE_3__.MAIN_THREAD_ID || type === 'scheduled') {
      return;
    }
    const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
    const ids = messageIds.filter(id => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectThreadInfo)(global, chatId, id)?.isCommentsInfo || messagesById[id]?.viewsCount !== undefined);
    if (!ids.length) return;
    loadMessageViews({
      chatId,
      ids
    });
  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_18__["default"])(() => {
    if (!messageIds || !messagesById || threadId !== _api_types__WEBPACK_IMPORTED_MODULE_3__.MAIN_THREAD_ID || type === 'scheduled') {
      return;
    }
    const ids = messageIds.filter(id => messagesById[id]?.factCheck?.shouldFetch);
    if (!ids.length) return;
    loadFactChecks({
      chatId,
      ids
    });
  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);
  const loadMoreAround = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (type !== 'thread') {
      return undefined;
    }
    return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_14__.debounce)(() => loadViewportMessages({
      direction: _types__WEBPACK_IMPORTED_MODULE_4__.LoadMoreDirection.Around
    }), 1000, true, false);
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, [loadViewportMessages, messageIds]);
  const {
    isScrolled,
    updateStickyDates
  } = (0,_hooks_useStickyDates__WEBPACK_IMPORTED_MODULE_27__["default"])();
  const handleScroll = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_20__["default"])(() => {
    if (isScrollTopJustUpdatedRef.current) {
      isScrollTopJustUpdatedRef.current = false;
      return;
    }
    const container = containerRef.current;
    if (!container) {
      return;
    }
    if (!memoFocusingIdRef.current) {
      updateStickyDates(container);
    }
    runDebouncedForScroll(() => {
      const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
      const isFocusing = Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global).focusedMessage?.chatId);
      if (!isFocusing) {
        onIntersectPinnedMessage({
          shouldCancelWaiting: true
        });
      }
      if (!container.parentElement) {
        return;
      }
      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;
      if (type === 'thread') {
        setScrollOffset({
          chatId,
          threadId,
          scrollOffset: scrollOffsetRef.current
        });
      }
    });
  });
  const [getContainerHeight, prevContainerHeightRef] = (0,_hooks_useContainerHeight__WEBPACK_IMPORTED_MODULE_26__["default"])(containerRef, canPost && !isSelectModeActive);

  // Initial message loading
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {
      return;
    }

    // Loading history while sending a message can return the same message and cause ambiguity
    const isLastMessageLocal = messageIds && (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_12__.isLocalMessageId)(messageIds[messageIds.length - 1]);
    if (isLastMessageLocal) {
      return;
    }
    const container = containerRef.current;
    if (!messageIds || messageIds.length === 1 || messageIds.length < _config__WEBPACK_IMPORTED_MODULE_5__.MESSAGE_LIST_SLICE / 2 && container.firstElementChild.clientHeight <= container.offsetHeight) {
      loadMoreAround();
    }
  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);
  const rememberScrollPositionRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_23__.useStateRef)(() => {
    if (!messageIds || !listItemElementsRef.current) {
      return;
    }
    const preservedItemElements = listItemElementsRef.current.filter(element => messageIds.includes(Number(element.dataset.messageId)));

    // We avoid the very first item as it may be a partly-loaded album
    // and also because it may be removed when messages limit is reached
    const anchor = preservedItemElements[1] || preservedItemElements[0];
    if (!anchor) {
      return;
    }
    anchorIdRef.current = anchor.id;
    anchorTopRef.current = anchor.getBoundingClientRect().top;
  });
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_24__["default"])(() => (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__.forceMeasure)(() => rememberScrollPositionRef.current()),
  // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below
  [messageIds, isViewportNewest, rememberScrollPositionRef]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => rememberScrollPositionRef.current(),
  // This is only needed to react on signal updates
  [getContainerHeight, rememberScrollPositionRef]);

  // Handles updated message list, takes care of scroll repositioning
  (0,_hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_21__["default"])(([prevMessageIds, prevIsViewportNewest]) => {
    if (false) {}
    const containerHeight = getContainerHeight();
    const prevContainerHeight = prevContainerHeightRef.current;
    prevContainerHeightRef.current = containerHeight;

    // Skip initial resize observer callback
    if (messageIds === prevMessageIds && isViewportNewest === prevIsViewportNewest && containerHeight !== prevContainerHeight && prevContainerHeight === undefined) {
      return;
    }
    const container = containerRef.current;
    listItemElementsRef.current = Array.from(container.querySelectorAll('.message-list-item'));
    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];
    const firstUnreadElement = memoFirstUnreadIdRef.current ? container.querySelector(`#${(0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.getMessageHtmlId)(memoFirstUnreadIdRef.current)}`) : undefined;
    const hasLastMessageChanged = messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1];
    const hasViewportShifted = messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === _config__WEBPACK_IMPORTED_MODULE_5__.MESSAGE_LIST_SLICE / 2 + 1;
    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;

    // Add extra height when few messages to allow scroll animation
    if (isViewportNewest && wasMessageAdded && messageIds && messageIds.length < _config__WEBPACK_IMPORTED_MODULE_5__.MESSAGE_LIST_SLICE / 2 && !container.parentElement.classList.contains('force-messages-scroll') && (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__.forceMeasure)(() => container.firstElementChild.clientHeight <= container.offsetHeight * 2)) {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(container.parentElement, 'force-messages-scroll');
      container.parentElement.classList.add('force-messages-scroll');
      setTimeout(() => {
        if (container.parentElement) {
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(container.parentElement, 'force-messages-scroll');
        }
      }, MESSAGE_ANIMATION_DURATION);
    }
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__.requestForcedReflow)(() => {
      const {
        scrollTop,
        scrollHeight,
        offsetHeight
      } = container;
      const scrollOffset = scrollOffsetRef.current;
      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);
      if (wasMessageAdded) {
        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`
        // right away (before animation) which creates inconsistency until the animation completes. To work around that,
        // we calculate `isAtBottom` with a "buffer" of the latest message height (this is approximate).
        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;
        bottomOffset -= lastItemHeight;
      }
      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;
      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];

      // Animate incoming message, but if app is in background mode, scroll to the first unread
      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {
        // Break out of `forceLayout`
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__.requestMeasure)(() => {
          const shouldScrollToBottom = !(0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_25__.isBackgroundModeActive)() || !firstUnreadElement;
          (0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_9__["default"])({
            container,
            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,
            position: shouldScrollToBottom ? 'end' : 'start',
            margin: BOTTOM_FOCUS_MARGIN,
            forceDuration: noMessageSendingAnimation ? 0 : undefined
          });
        });
      }
      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;
      if (isResized && (0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_9__.isAnimatingScroll)()) {
        return undefined;
      }
      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);
      const unreadDivider = !anchor && memoUnreadDividerBeforeIdRef.current && container.querySelector(`.${UNREAD_DIVIDER_CLASS}`);
      let newScrollTop;
      if (isAtBottom && isResized) {
        newScrollTop = scrollHeight - offsetHeight;
      } else if (anchor) {
        const newAnchorTop = anchor.getBoundingClientRect().top;
        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));
      } else if (unreadDivider) {
        newScrollTop = Math.min((0,_util_visibility_getOffsetToContainer__WEBPACK_IMPORTED_MODULE_15__["default"])(unreadDivider, container).top - UNREAD_DIVIDER_TOP, scrollHeight - scrollOffset);
      } else {
        newScrollTop = scrollHeight - scrollOffset;
      }
      return () => {
        (0,_util_resetScroll__WEBPACK_IMPORTED_MODULE_13__["default"])(container, Math.ceil(newScrollTop));
        (0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_9__.restartCurrentScrollAnimation)();
        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);
        if (!memoFocusingIdRef.current) {
          isScrollTopJustUpdatedRef.current = true;
          (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_6__.requestMeasure)(() => {
            isScrollTopJustUpdatedRef.current = false;
          });
        }
        if (false) {}
      };
    });
    // This should match deps for `useSyncEffect` above
  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_19__["default"])(([prevIsSelectModeActive]) => {
    if (prevIsSelectModeActive !== undefined) {
      (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.beginHeavyAnimation)(SELECT_MODE_ANIMATION_DURATION + _config__WEBPACK_IMPORTED_MODULE_5__.ANIMATION_END_DELAY);
    }
  }, [isSelectModeActive]);
  const isPrivate = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.isUserId)(chatId);
  const withUsers = Boolean(!isPrivate && !isChannelChat || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);
  const noAvatars = Boolean(!withUsers || isChannelChat && !isChannelWithAvatars);
  const shouldRenderGreeting = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.isUserId)(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards && type === 'thread' && (!messageGroups && !lastMessage && messageIds
  // Used to avoid flickering when deleting a greeting that has just been sent
  && (!listItemElementsRef.current || listItemElementsRef.current.length === 0) || messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp' || lastMessage?.content?.action?.type === 'contactSignUp');
  const isGroupChatJustCreated = isGroupChat && isCreator && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';
  const isEmptyTopic = messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_10__["default"])('MessageList custom-scroll', noAvatars && 'no-avatars', !canPost && 'no-composer', type === 'pinned' && 'type-pinned', withBottomShift && 'with-bottom-shift', withDefaultBg && 'with-default-bg', isSelectModeActive && 'select-mode-active', isScrolled && 'scrolled', !isReady && 'is-animating', hasOpenChatButton && 'saved-dialog');
  const hasMessages = messageIds && messageGroups || lastMessage;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (hasMessages) return;
    onScrollDownToggle(false);
  }, [hasMessages, onScrollDownToggle]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    className: className,
    onScroll: handleScroll,
    onMouseDown: _helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_17__.preventMessageInputBlur
  }, isRestricted ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "empty"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`)) : isContactRequirePremium && !hasMessages ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_PremiumRequiredMessage__WEBPACK_IMPORTED_MODULE_33__["default"], {
    userId: chatId
  }) : isBot && !hasMessages ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageListBotInfo__WEBPACK_IMPORTED_MODULE_30__["default"], {
    chatId: chatId
  }) : shouldRenderGreeting ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ContactGreeting__WEBPACK_IMPORTED_MODULE_29__["default"], {
    key: chatId,
    userId: chatId
  }) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_NoMessages__WEBPACK_IMPORTED_MODULE_32__["default"], {
    chatId: chatId,
    topic: topic,
    type: type,
    isChatWithSelf: isChatWithSelf,
    isGroupChatJustCreated: isGroupChatJustCreated
  }) : hasMessages ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageListContent__WEBPACK_IMPORTED_MODULE_31__["default"], {
    canShowAds: areAdsEnabled && isChannelChat,
    chatId: chatId,
    isComments: isComments,
    isChannelChat: isChannelChat,
    isSavedDialog: isSavedDialog,
    messageIds: messageIds || [lastMessage.id],
    messageGroups: messageGroups || (0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_16__.groupMessages)([lastMessage]),
    getContainerHeight: getContainerHeight,
    isViewportNewest: Boolean(isViewportNewest),
    isUnread: Boolean(firstUnreadId),
    isEmptyThread: isEmptyThread,
    withUsers: withUsers,
    noAvatars: noAvatars,
    containerRef: containerRef,
    anchorIdRef: anchorIdRef,
    memoUnreadDividerBeforeIdRef: memoUnreadDividerBeforeIdRef,
    memoFirstUnreadIdRef: memoFirstUnreadIdRef,
    threadId: threadId,
    type: type,
    isReady: isReady,
    hasLinkedChat: hasLinkedChat,
    isSchedule: messageGroups ? type === 'scheduled' : false,
    shouldRenderBotInfo: isBot,
    noAppearanceAnimation: !messageGroups || !shouldAnimateAppearanceRef.current,
    onScrollDownToggle: onScrollDownToggle,
    onNotchToggle: onNotchToggle,
    onIntersectPinnedMessage: onIntersectPinnedMessage
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_28__["default"], {
    color: "white",
    backgroundColor: "dark"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_2__.withGlobal)((global, {
  chatId,
  threadId,
  type
}) => {
  const currentUserId = global.currentUserId;
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChat)(global, chatId);
  if (!chat) {
    return {
      currentUserId
    };
  }
  const messageIds = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectCurrentMessageIds)(global, chatId, threadId, type);
  const messagesById = type === 'scheduled' ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatScheduledMessages)(global, chatId) : (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatMessages)(global, chatId);
  const isSavedDialog = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.getIsSavedDialog)(chatId, threadId, currentUserId);
  if (threadId !== _api_types__WEBPACK_IMPORTED_MODULE_3__.MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum && !(messagesById && threadId && messagesById[Number(threadId)])) {
    return {
      currentUserId
    };
  }
  const {
    isRestricted,
    restrictionReason
  } = chat;
  const lastMessage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatLastMessage)(global, chatId, isSavedDialog ? 'saved' : 'all');
  const focusingId = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectFocusedMessageId)(global, chatId);
  const withLastMessageWhenPreloading = threadId === _api_types__WEBPACK_IMPORTED_MODULE_3__.MAIN_THREAD_ID && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId;
  const chatBot = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectBot)(global, chatId);
  const topic = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTopic)(global, chatId, threadId);
  const chatFullInfo = !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.isUserId)(chatId) ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatFullInfo)(global, chatId) : undefined;
  const isEmptyThread = !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectThreadInfo)(global, chatId, threadId)?.messagesCount;
  const isCurrentUserPremium = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectIsCurrentUserPremium)(global);
  const areAdsEnabled = !isCurrentUserPremium || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectUserFullInfo)(global, currentUserId)?.areAdsEnabled;
  return {
    areAdsEnabled,
    isChatLoaded: true,
    isRestricted,
    restrictionReason,
    isChannelChat: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.isChatChannel)(chat),
    isGroupChat: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.isChatGroup)(chat),
    isChannelWithAvatars: chat.areProfilesShown,
    isCreator: chat.isCreator,
    isChatWithSelf: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectIsChatWithSelf)(global, chatId),
    isSystemBotChat: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.isSystemBot)(chatId),
    isAnonymousForwards: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_7__.isAnonymousForwardsChat)(chatId),
    isBot: Boolean(chatBot),
    isSynced: global.isSynced,
    messageIds,
    messagesById,
    firstUnreadId: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectFirstUnreadId)(global, chatId, threadId),
    isViewportNewest: type !== 'thread' || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectIsViewportNewest)(global, chatId, threadId),
    focusingId,
    isSelectModeActive: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectIsInSelectMode)(global),
    hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,
    channelJoinInfo: chatFullInfo?.joinInfo,
    topic,
    noMessageSendingAnimation: !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPerformanceSettingsValue)(global, 'messageSendingAnimations'),
    isServiceNotificationsChat: chatId === _config__WEBPACK_IMPORTED_MODULE_5__.SERVICE_NOTIFICATIONS_USER_ID,
    isForum: chat.isForum,
    isEmptyThread,
    currentUserId,
    ...(withLastMessageWhenPreloading && {
      lastMessage
    })
  };
})(MessageList)));
function generateChannelJoinMessageId(lastMessageId) {
  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`
}

/***/ }),

/***/ "./src/components/middle/MessageListBotInfo.tsx":
/*!******************************************************!*\
  !*** ./src/components/middle/MessageListBotInfo.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ui/OptimizedVideo */ "./src/components/ui/OptimizedVideo.tsx");
/* harmony import */ var _ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/placeholder/Skeleton */ "./src/components/ui/placeholder/Skeleton.tsx");
/* harmony import */ var _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./MessageListBotInfo.module.scss */ "./src/components/middle/MessageListBotInfo.module.scss");












const MessageListBotInfo = ({
  chatId,
  botInfo,
  isLoadingBotInfo,
  isInMessageList
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const botInfoPhotoUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__["default"])(botInfo?.photo ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getBotCoverMediaHash)(botInfo.photo) : undefined);
  const botInfoGifUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__["default"])(botInfo?.gif ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getVideoMediaHash)(botInfo.gif, 'full') : undefined);
  const botInfoDimensions = botInfo?.photo ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPhotoFullDimensions)(botInfo.photo) : botInfo?.gif ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getVideoDimensions)(botInfo.gif) : undefined;
  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;
  const isVerifyCodes = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatWithVerificationCodesBot)(chatId);
  const {
    width,
    height
  } = botInfoDimensions || {};
  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;
  if (isEmptyOrLoading && isInMessageList) return undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].root, 'empty')
  }, isLoadingBotInfo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('Loading')), isBotInfoEmpty && !isLoadingBotInfo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('NoMessages')), botInfo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].botInfo,
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_5__["default"])(width ? `width: ${width}px` : undefined)
  }, botInfoPhotoUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    className: _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].media,
    src: botInfoPhotoUrl,
    width: width,
    height: height,
    alt: "Bot info"
  }), botInfoGifUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_9__["default"], {
    canPlay: true,
    className: _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].media,
    src: botInfoGifUrl,
    loop: true,
    disablePictureInPicture: true,
    muted: true,
    playsInline: true,
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_5__["default"])(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)
  }), botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_10__["default"], {
    className: _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].media,
    width: width,
    height: height,
    forceAspectRatio: true
  }), isVerifyCodes && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].botInfoDescription
  }, lang('VerifyChatInfo')), !isVerifyCodes && botInfo.description && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].botInfoDescription
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: _MessageListBotInfo_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].botInfoTitle
  }, lang('BotInfoTitle')), (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(botInfo.description, ['br', 'emoji', 'links']))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId
}) => {
  const chatBot = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectBot)(global, chatId);
  let isLoadingBotInfo = false;
  let botInfo;
  if (chatBot) {
    const chatBotFullInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUserFullInfo)(global, chatBot.id);
    if (chatBotFullInfo) {
      botInfo = chatBotFullInfo.botInfo;
    } else {
      isLoadingBotInfo = true;
    }
  }
  return {
    botInfo,
    isLoadingBotInfo
  };
})(MessageListBotInfo)));

/***/ }),

/***/ "./src/components/middle/MessageListContent.tsx":
/*!******************************************************!*\
  !*** ./src/components/middle/MessageListContent.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers/groupMessages */ "./src/components/middle/helpers/groupMessages.ts");
/* harmony import */ var _helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/preventMessageInputBlur */ "./src/components/middle/helpers/preventMessageInputBlur.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useMessageObservers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./hooks/useMessageObservers */ "./src/components/middle/hooks/useMessageObservers.ts");
/* harmony import */ var _hooks_useScrollHooks__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hooks/useScrollHooks */ "./src/components/middle/hooks/useScrollHooks.ts");
/* harmony import */ var _ActionMessage__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ActionMessage */ "./src/components/middle/ActionMessage.tsx");
/* harmony import */ var _message_Message__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./message/Message */ "./src/components/middle/message/Message.tsx");
/* harmony import */ var _message_SenderGroupContainer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./message/SenderGroupContainer */ "./src/components/middle/message/SenderGroupContainer.tsx");
/* harmony import */ var _message_SponsoredMessage__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./message/SponsoredMessage */ "./src/components/middle/message/SponsoredMessage.tsx");
/* harmony import */ var _MessageListBotInfo__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./MessageListBotInfo */ "./src/components/middle/MessageListBotInfo.tsx");




















const UNREAD_DIVIDER_CLASS = 'unread-divider';
const MessageListContent = ({
  canShowAds,
  chatId,
  threadId,
  messageIds,
  messageGroups,
  getContainerHeight,
  isViewportNewest,
  isUnread,
  isComments,
  isEmptyThread,
  withUsers,
  isChannelChat,
  noAvatars,
  containerRef,
  anchorIdRef,
  memoUnreadDividerBeforeIdRef,
  memoFirstUnreadIdRef,
  type,
  isReady,
  hasLinkedChat,
  isSchedule,
  shouldRenderBotInfo,
  noAppearanceAnimation,
  isSavedDialog,
  onScrollDownToggle,
  onNotchToggle,
  onIntersectPinnedMessage
}) => {
  const {
    openHistoryCalendar
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const getIsHeavyAnimating2 = _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating;
  const getIsReady = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__["default"])(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);
  const areDatesClickable = !isSavedDialog && !isSchedule;
  const {
    observeIntersectionForReading,
    observeIntersectionForLoading,
    observeIntersectionForPlaying
  } = (0,_hooks_useMessageObservers__WEBPACK_IMPORTED_MODULE_13__["default"])(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);
  const {
    withHistoryTriggers,
    backwardsTriggerRef,
    forwardsTriggerRef,
    fabTriggerRef
  } = (0,_hooks_useScrollHooks__WEBPACK_IMPORTED_MODULE_14__["default"])(type, containerRef, messageIds, getContainerHeight, isViewportNewest, isUnread, onScrollDownToggle, onNotchToggle, isReady);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const unreadDivider = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(UNREAD_DIVIDER_CLASS, 'local-action-message'),
    key: "unread-messages"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('UnreadMessages')));
  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {
    return acc + messageGroup.senderGroups.flat().length;
  }, 0);
  let appearanceIndex = 0;
  const prevMessageIds = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_12__["default"])(messageIds);
  const isNewMessage = Boolean(messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1]);
  function calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray) {
    return dateGroup.senderGroups.map((senderGroup, senderGroupIndex, senderGroupsArray) => {
      if (senderGroup.length === 1 && !(0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__.isAlbum)(senderGroup[0]) && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isActionMessage)(senderGroup[0]) && !senderGroup[0].content.action?.phoneCall) {
        const message = senderGroup[0];
        const isLastInList = senderGroupIndex === senderGroupsArray.length - 1 && dateGroupIndex === dateGroupsArray.length - 1;
        return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.compact)([message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ActionMessage__WEBPACK_IMPORTED_MODULE_15__["default"], {
          key: message.id,
          message: message,
          threadId: threadId,
          messageListType: type,
          isInsideTopic: Boolean(threadId && threadId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID && !isSavedDialog),
          observeIntersectionForReading: observeIntersectionForReading,
          observeIntersectionForLoading: observeIntersectionForLoading,
          observeIntersectionForPlaying: observeIntersectionForPlaying,
          memoFirstUnreadIdRef: memoFirstUnreadIdRef,
          appearanceOrder: messageCountToAnimate - ++appearanceIndex,
          isJustAdded: isLastInList && isNewMessage,
          isLastInList: isLastInList,
          onIntersectPinnedMessage: onIntersectPinnedMessage
        })]);
      }
      let currentDocumentGroupId;
      const senderGroupElements = senderGroup.map((messageOrAlbum, messageIndex) => {
        const message = (0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__.isAlbum)(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;
        const album = (0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__.isAlbum)(messageOrAlbum) ? messageOrAlbum : undefined;
        const isOwn = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isOwnMessage)(message);
        const isMessageAlbum = (0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__.isAlbum)(messageOrAlbum);
        const nextMessage = senderGroup[messageIndex + 1];
        if (message.previousLocalId && anchorIdRef.current === (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageHtmlId)(message.previousLocalId)) {
          anchorIdRef.current = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageHtmlId)(message.id);
        }
        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;
        const nextDocumentGroupId = nextMessage && !(0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__.isAlbum)(nextMessage) ? nextMessage.groupedId : undefined;
        const isTopicTopMessage = message.id === threadId;
        const position = {
          isFirstInGroup: messageIndex === 0,
          isLastInGroup: messageIndex === senderGroup.length - 1,
          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),
          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),
          isLastInList: messageIndex === senderGroup.length - 1 && senderGroupIndex === senderGroupsArray.length - 1 && dateGroupIndex === dateGroupsArray.length - 1
        };
        currentDocumentGroupId = documentGroupId;
        const originalId = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageOriginalId)(message);
        // Service notifications saved in cache in previous versions may share the same `previousLocalId`
        const key = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isServiceNotificationMessage)(message) ? `${message.date}_${originalId}` : originalId;
        const noComments = hasLinkedChat === false || !isChannelChat;
        return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.compact)([message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_message_Message__WEBPACK_IMPORTED_MODULE_16__["default"], {
          key: key,
          message: message,
          observeIntersectionForBottom: observeIntersectionForReading,
          observeIntersectionForLoading: observeIntersectionForLoading,
          observeIntersectionForPlaying: observeIntersectionForPlaying,
          album: album,
          noAvatars: noAvatars,
          withAvatar: position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments),
          withSenderName: position.isFirstInGroup && withUsers && !isOwn,
          threadId: threadId,
          messageListType: type,
          noComments: noComments,
          noReplies: !noComments || threadId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID || type === 'scheduled',
          appearanceOrder: messageCountToAnimate - ++appearanceIndex,
          isJustAdded: position.isLastInList && isNewMessage,
          isFirstInGroup: position.isFirstInGroup,
          isLastInGroup: position.isLastInGroup,
          isFirstInDocumentGroup: position.isFirstInDocumentGroup,
          isLastInDocumentGroup: position.isLastInDocumentGroup,
          isLastInList: position.isLastInList,
          memoFirstUnreadIdRef: memoFirstUnreadIdRef,
          onIntersectPinnedMessage: onIntersectPinnedMessage,
          getIsMessageListReady: getIsReady
        }), message.id === threadId && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
          className: "local-action-message",
          key: "discussion-started"
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang(isEmptyThread ? isComments ? 'NoComments' : 'NoReplies' : 'DiscussionStarted')))]);
      }).flat();
      if (!withUsers) return senderGroupElements;
      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];
      const lastMessage = (0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__.isAlbum)(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;
      const lastMessageId = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageOriginalId)(lastMessage);
      const isTopicTopMessage = lastMessage.id === threadId;
      const isOwn = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isOwnMessage)(lastMessage);
      const firstMessageOrAlbum = senderGroup[0];
      const firstMessage = (0,_helpers_groupMessages__WEBPACK_IMPORTED_MODULE_8__.isAlbum)(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;
      const firstMessageId = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageOriginalId)(firstMessage);
      const key = `${firstMessageId}-${lastMessageId}`;
      const id = firstMessageId === lastMessageId ? `message-group-${firstMessageId}` : `message-group-${firstMessageId}-${lastMessageId}`;
      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_message_SenderGroupContainer__WEBPACK_IMPORTED_MODULE_17__["default"], {
        key: key,
        id: id,
        message: lastMessage,
        withAvatar: withAvatar
      }, senderGroupElements);
    });
  }
  const dateGroups = messageGroups.map((dateGroup, dateGroupIndex, dateGroupsArray) => {
    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('message-date-group', dateGroupIndex === 0 && 'first-message-date-group'),
      key: dateGroup.datetime,
      onMouseDown: _helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_9__.preventMessageInputBlur,
      teactFastList: true
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('sticky-date', areDatesClickable && 'interactive'),
      key: "date-header",
      onMouseDown: _helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_9__.preventMessageInputBlur,
      onClick: areDatesClickable ? () => openHistoryCalendar({
        selectedAt: dateGroup.datetime
      }) : undefined
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      dir: "auto"
    }, isSchedule && dateGroup.originalDate === _config__WEBPACK_IMPORTED_MODULE_3__.SCHEDULED_WHEN_ONLINE && lang('MessageScheduledUntilOnline'), isSchedule && dateGroup.originalDate !== _config__WEBPACK_IMPORTED_MODULE_3__.SCHEDULED_WHEN_ONLINE && lang('MessageScheduledOn', (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatHumanDate)(lang, dateGroup.datetime, undefined, true)), !isSchedule && (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatHumanDate)(lang, dateGroup.datetime))), senderGroups.flat());
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "messages-container",
    teactFastList: true
  }, withHistoryTriggers && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: backwardsTriggerRef,
    key: "backwards-trigger",
    className: "backwards-trigger"
  }), shouldRenderBotInfo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageListBotInfo__WEBPACK_IMPORTED_MODULE_19__["default"], {
    isInMessageList: true,
    key: `bot_info_${chatId}`,
    chatId: chatId
  }), dateGroups.flat(), withHistoryTriggers && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: forwardsTriggerRef,
    key: "forwards-trigger",
    className: "forwards-trigger"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: fabTriggerRef,
    key: "fab-trigger",
    className: "fab-trigger"
  }), canShowAds && isViewportNewest && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_message_SponsoredMessage__WEBPACK_IMPORTED_MODULE_18__["default"], {
    key: chatId,
    chatId: chatId,
    containerRef: containerRef,
    observeIntersectionForLoading: observeIntersectionForLoading,
    observeIntersectionForPlaying: observeIntersectionForPlaying
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageListContent));

/***/ }),

/***/ "./src/components/middle/MessageListHistoryHandler.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/MessageListHistoryHandler.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }





// Actual `MessageList` components are unmounted when deep in the history,
// so we need a separate component just for handling history
const MessageListHistoryHandler = ({
  messageLists
}) => {
  const {
    openChat
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const closeChat = () => {
    openChat({
      id: undefined
    }, {
      forceSyncOnIOs: true
    });
  };
  const MessageHistoryRecord = ({
    chatId,
    type,
    threadId
  }) => {
    (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_4__["default"])({
      isActive: true,
      hash: (0,_util_routing__WEBPACK_IMPORTED_MODULE_3__.createLocationHash)(chatId, type, threadId),
      onBack: closeChat
    });
  };
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, messageLists?.map((messageList, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MessageHistoryRecord
  // eslint-disable-next-line react/no-array-index-key
  , _extends({
    key: `${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, messageList))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  return {
    messageLists: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global).messageLists
  };
})(MessageListHistoryHandler)));

/***/ }),

/***/ "./src/components/middle/MessageSelectToolbar.async.tsx":
/*!**************************************************************!*\
  !*** ./src/components/middle/MessageSelectToolbar.async.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const MessageSelectToolbarAsync = props => {
  const {
    isActive
  } = props;
  const MessageSelectToolbar = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'MessageSelectToolbar', !isActive);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return MessageSelectToolbar ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MessageSelectToolbar, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MessageSelectToolbarAsync);

/***/ }),

/***/ "./src/components/middle/MiddleColumn.tsx":
/*!************************************************!*\
  !*** ./src/components/middle/MiddleColumn.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_calculateMiddleFooterTransforms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers/calculateMiddleFooterTransforms */ "./src/components/middle/helpers/calculateMiddleFooterTransforms.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useCustomBackground__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/useCustomBackground */ "./src/hooks/useCustomBackground.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../hooks/usePrevDuringAnimation */ "./src/hooks/usePrevDuringAnimation.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useResize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../hooks/useResize */ "./src/hooks/useResize.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../hooks/window/useWindowSize */ "./src/hooks/window/useWindowSize.ts");
/* harmony import */ var _hooks_usePinnedMessage__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./hooks/usePinnedMessage */ "./src/components/middle/hooks/usePinnedMessage.ts");
/* harmony import */ var _common_Composer__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../common/Composer */ "./src/components/common/Composer.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_PrivacySettingsNoticeModal_async__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../common/PrivacySettingsNoticeModal.async */ "./src/components/common/PrivacySettingsNoticeModal.async.tsx");
/* harmony import */ var _common_SeenByModal_async__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../common/SeenByModal.async */ "./src/components/common/SeenByModal.async.tsx");
/* harmony import */ var _common_UnpinAllMessagesModal_async__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../common/UnpinAllMessagesModal.async */ "./src/components/common/UnpinAllMessagesModal.async.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _ChatLanguageModal_async__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./ChatLanguageModal.async */ "./src/components/middle/ChatLanguageModal.async.tsx");
/* harmony import */ var _composer_DropArea__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./composer/DropArea */ "./src/components/middle/composer/DropArea.tsx");
/* harmony import */ var _EmojiInteractionAnimation_async__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./EmojiInteractionAnimation.async */ "./src/components/middle/EmojiInteractionAnimation.async.tsx");
/* harmony import */ var _FloatingActionButtons__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./FloatingActionButtons */ "./src/components/middle/FloatingActionButtons.tsx");
/* harmony import */ var _MessageList__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./MessageList */ "./src/components/middle/MessageList.tsx");
/* harmony import */ var _MessageSelectToolbar_async__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./MessageSelectToolbar.async */ "./src/components/middle/MessageSelectToolbar.async.tsx");
/* harmony import */ var _MiddleHeader__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./MiddleHeader */ "./src/components/middle/MiddleHeader.tsx");
/* harmony import */ var _MiddleHeaderPanes__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./MiddleHeaderPanes */ "./src/components/middle/MiddleHeaderPanes.tsx");
/* harmony import */ var _PremiumRequiredPlaceholder__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./PremiumRequiredPlaceholder */ "./src/components/middle/PremiumRequiredPlaceholder.tsx");
/* harmony import */ var _ReactorListModal_async__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./ReactorListModal.async */ "./src/components/middle/ReactorListModal.async.tsx");
/* harmony import */ var _search_MiddleSearch_async__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./search/MiddleSearch.async */ "./src/components/middle/search/MiddleSearch.async.tsx");
/* harmony import */ var _MiddleColumn_scss__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./MiddleColumn.scss */ "./src/components/middle/MiddleColumn.scss");
/* harmony import */ var _MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./MiddleColumn.module.scss */ "./src/components/middle/MiddleColumn.module.scss");












































function isImage(item) {
  return item.kind === 'file' && item.type && _config__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);
}
function isVideo(item) {
  return item.kind === 'file' && item.type && _config__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);
}
const LAYER_ANIMATION_DURATION_MS = 450 + _config__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_END_DELAY;
function MiddleColumn({
  leftColumnRef,
  chatId,
  threadId,
  isComments,
  messageListType,
  isMobile,
  chat,
  draftReplyInfo,
  isPrivate,
  isPinnedMessageList,
  canPost,
  currentUserBannedRights,
  defaultBannedRights,
  pinnedMessagesCount,
  customBackground,
  theme,
  backgroundColor,
  patternColor,
  isLeftColumnShown,
  isRightColumnShown,
  isBackgroundBlurred,
  leftColumnWidth,
  hasActiveMiddleSearch,
  isSelectModeActive,
  isSeenByModalOpen,
  isPrivacySettingsNoticeModalOpen,
  isReactorListModalOpen,
  isChatLanguageModalOpen,
  withInterfaceAnimations,
  shouldSkipHistoryAnimations,
  currentTransitionKey,
  isChannel,
  areChatSettingsLoaded,
  canSubscribe,
  canStartBot,
  canRestartBot,
  activeEmojiInteractions,
  shouldJoinToSend,
  shouldSendJoinRequest,
  shouldLoadFullChat,
  pinnedIds,
  canUnpin,
  canUnblock,
  isSavedDialog,
  canShowOpenChatButton,
  isContactRequirePremium,
  topics
}) {
  const {
    openChat,
    openPreviousChat,
    unpinAllMessages,
    loadUser,
    loadChatSettings,
    exitMessageSelectMode,
    joinChannel,
    sendBotCommand,
    restartBot,
    showNotification,
    loadFullChat,
    setLeftColumnWidth,
    resetLeftColumnWidth,
    unblockUser
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    width: windowWidth
  } = (0,_hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_22__["default"])();
  const {
    isTablet,
    isDesktop
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_12__["default"])();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__["default"])();
  const [dropAreaState, setDropAreaState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(_composer_DropArea__WEBPACK_IMPORTED_MODULE_32__.DropAreaState.None);
  const [isScrollDownNeeded, setIsScrollDownShown] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);
  const [isNotchShown, setIsNotchShown] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isUnpinModalOpen, setIsUnpinModalOpen] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const {
    handleIntersectPinnedMessage,
    handleFocusPinnedMessage,
    getCurrentPinnedIndex,
    getLoadingPinnedId
  } = (0,_hooks_usePinnedMessage__WEBPACK_IMPORTED_MODULE_23__["default"])(chatId, threadId, pinnedIds);
  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;
  const renderingChatId = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(chatId, closeAnimationDuration);
  const renderingThreadId = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(threadId, closeAnimationDuration);
  const renderingMessageListType = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(messageListType, closeAnimationDuration);
  const renderingCanSubscribe = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(canSubscribe, closeAnimationDuration);
  const renderingCanStartBot = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(canStartBot, closeAnimationDuration);
  const renderingCanRestartBot = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(canRestartBot, closeAnimationDuration);
  const renderingCanUnblock = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(canUnblock, closeAnimationDuration);
  const renderingCanPost = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(canPost, closeAnimationDuration) && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock && chatId !== _config__WEBPACK_IMPORTED_MODULE_3__.TMP_CHAT_ID && !isContactRequirePremium;
  const renderingIsScrollDownShown = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(isScrollDownShown, closeAnimationDuration) && chatId !== _config__WEBPACK_IMPORTED_MODULE_3__.TMP_CHAT_ID;
  const renderingIsChannel = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(isChannel, closeAnimationDuration);
  const renderingShouldJoinToSend = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(shouldJoinToSend, closeAnimationDuration);
  const renderingShouldSendJoinRequest = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(shouldSendJoinRequest, closeAnimationDuration);
  const renderingHandleIntersectPinnedMessage = (0,_hooks_usePrevDuringAnimation__WEBPACK_IMPORTED_MODULE_18__["default"])(chatId ? handleIntersectPinnedMessage : undefined, closeAnimationDuration);
  const prevTransitionKey = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_19__["default"])(currentTransitionKey);
  const cleanupExceptionKey = prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined;
  const {
    isReady,
    handleCssTransitionEnd,
    handleSlideTransitionStop
  } = useIsReady(!shouldSkipHistoryAnimations && withInterfaceAnimations, currentTransitionKey, prevTransitionKey, chatId, isMobile);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return chatId ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
      openChat({
        id: undefined
      });
    }) : undefined;
  }, [chatId, openChat]);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_21__["default"])(() => {
    setDropAreaState(_composer_DropArea__WEBPACK_IMPORTED_MODULE_32__.DropAreaState.None);
    setIsNotchShown(undefined);
  }, [chatId]);

  // Fix for mobile virtual keyboard
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_IOS && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_ANDROID) {
      return undefined;
    }
    const {
      visualViewport
    } = window;
    if (!visualViewport) {
      return undefined;
    }
    const handleResize = () => {
      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMutation)(() => {
        document.body.classList.toggle('keyboard-visible', isFixNeeded);
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
          if (!isFixNeeded && visualViewport.offsetTop) {
            (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMutation)(() => {
              window.scrollTo({
                top: 0
              });
            });
          }
        });
      });
    };
    visualViewport.addEventListener('resize', handleResize);
    return () => {
      visualViewport.removeEventListener('resize', handleResize);
    };
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isPrivate) {
      loadUser({
        userId: chatId
      });
    }
  }, [chatId, isPrivate, loadUser]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!areChatSettingsLoaded) {
      loadChatSettings({
        chatId: chatId
      });
    }
  }, [chatId, isPrivate, areChatSettingsLoaded]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (chatId && shouldLoadFullChat && isReady) {
      loadFullChat({
        chatId
      });
    }
  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);
  const {
    initResize,
    resetResize,
    handleMouseUp
  } = (0,_hooks_useResize__WEBPACK_IMPORTED_MODULE_20__.useResize)(leftColumnRef, n => setLeftColumnWidth({
    leftColumnWidth: n
  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');
  const handleDragEnter = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(e => {
    const {
      items
    } = e.dataTransfer || {};
    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,
    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517
    const shouldDrawQuick = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_SAFARI || items && items.length > 0 && Array.from(items)
    // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)
    // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image
    .filter(item => item.type !== 'text/uri-list').every(item => isImage(item) || isVideo(item));
    setDropAreaState(shouldDrawQuick ? _composer_DropArea__WEBPACK_IMPORTED_MODULE_32__.DropAreaState.QuickFile : _composer_DropArea__WEBPACK_IMPORTED_MODULE_32__.DropAreaState.Document);
  });
  const handleHideDropArea = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    setDropAreaState(_composer_DropArea__WEBPACK_IMPORTED_MODULE_32__.DropAreaState.None);
  });
  const handleOpenUnpinModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    setIsUnpinModalOpen(true);
  });
  const closeUnpinModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    setIsUnpinModalOpen(false);
  });
  const handleOpenChatFromSaved = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    openChat({
      id: String(threadId)
    });
  });
  const handleUnpinAllMessages = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    unpinAllMessages({
      chatId: chatId,
      threadId: threadId
    });
    closeUnpinModal();
    openPreviousChat();
  });
  const handleTabletFocus = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    openChat({
      id: chatId
    });
  });
  const handleSubscribeClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    joinChannel({
      chatId: chatId
    });
    if (renderingShouldSendJoinRequest) {
      showNotification({
        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription')
      });
    }
  });
  const handleStartBot = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    sendBotCommand({
      command: '/start'
    });
  });
  const handleRestartBot = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    restartBot({
      chatId: chatId
    });
  });
  const handleUnblock = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    unblockUser({
      userId: chatId
    });
  });
  const customBackgroundValue = (0,_hooks_useCustomBackground__WEBPACK_IMPORTED_MODULE_13__["default"])(theme, customBackground);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled');
  const bgClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])(_MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__["default"].background, _MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__["default"].withTransition, customBackground && _MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__["default"].customBgImage, backgroundColor && _MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__["default"].customBgColor, customBackground && isBackgroundBlurred && _MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__["default"].blurred, isRightColumnShown && _MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__["default"].withRightColumn, _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_ELECTRON && !(renderingChatId && renderingThreadId) && _MiddleColumn_module_scss__WEBPACK_IMPORTED_MODULE_43__["default"].draggable);
  const messagingDisabledClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('messaging-disabled', !isSelectModeActive && 'shown');
  const messageSendingRestrictionReason = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageSendingRestrictionReason)(lang, currentUserBannedRights, defaultBannedRights);
  const forumComposerPlaceholder = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getForumComposerPlaceholder)(lang, chat, threadId, topics, Boolean(draftReplyInfo));
  const composerRestrictionMessage = messageSendingRestrictionReason ?? forumComposerPlaceholder ?? (isContactRequirePremium ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_PremiumRequiredPlaceholder__WEBPACK_IMPORTED_MODULE_39__["default"], {
    userId: chatId
  }) : undefined);

  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS
  const {
    composerHiddenScale,
    toolbarHiddenScale,
    composerTranslateX,
    toolbarTranslateX,
    unpinHiddenScale,
    toolbarForUnpinHiddenScale
  } = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_helpers_calculateMiddleFooterTransforms__WEBPACK_IMPORTED_MODULE_11__["default"])(windowWidth, renderingCanPost), [renderingCanPost, windowWidth]);
  const footerClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('middle-column-footer', !renderingCanPost && 'no-composer', renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch');
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_15__["default"])({
    isActive: isSelectModeActive,
    onBack: exitMessageSelectMode
  });
  const isMessagingDisabled = Boolean(!isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && composerRestrictionMessage);
  const withMessageListBottomShift = Boolean(renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot || isPinnedMessageList && canUnpin || canShowOpenChatButton || renderingCanUnblock);
  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "MiddleColumn",
    className: className,
    onTransitionEnd: handleCssTransitionEnd,
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_8__["default"])(`--composer-hidden-scale: ${composerHiddenScale}`, `--toolbar-hidden-scale: ${toolbarHiddenScale}`, `--unpin-hidden-scale: ${unpinHiddenScale}`, `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`, `--composer-translate-x: ${composerTranslateX}px`, `--toolbar-translate-x: ${toolbarTranslateX}px`, `--pattern-color: ${patternColor}`, backgroundColor && `--theme-background-color: ${backgroundColor}`),
    onClick: isTablet && isLeftColumnShown ? handleTabletFocus : undefined
  }, isDesktop && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "resize-handle",
    onMouseDown: initResize,
    onMouseUp: handleMouseUp,
    onDoubleClick: resetResize
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: bgClassName,
    style: customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "middle-column-portals"
  }), Boolean(renderingChatId && renderingThreadId) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "messages-layout",
    onDragEnter: renderingCanPost ? handleDragEnter : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MiddleHeaderPanes__WEBPACK_IMPORTED_MODULE_38__["default"], {
    key: renderingChatId,
    chatId: renderingChatId,
    threadId: renderingThreadId,
    messageListType: renderingMessageListType,
    getCurrentPinnedIndex: getCurrentPinnedIndex,
    getLoadingPinnedId: getLoadingPinnedId,
    onFocusPinnedMessage: handleFocusPinnedMessage
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MiddleHeader__WEBPACK_IMPORTED_MODULE_37__["default"], {
    chatId: renderingChatId,
    threadId: renderingThreadId,
    messageListType: renderingMessageListType,
    isComments: isComments,
    isMobile: isMobile,
    getCurrentPinnedIndex: getCurrentPinnedIndex,
    getLoadingPinnedId: getLoadingPinnedId,
    onFocusPinnedMessage: handleFocusPinnedMessage
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_30__["default"], {
    name: shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade',
    activeKey: currentTransitionKey,
    shouldCleanup: true,
    cleanupExceptionKey: cleanupExceptionKey,
    isBlockingAnimation: true,
    onStop: handleSlideTransitionStop
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageList__WEBPACK_IMPORTED_MODULE_35__["default"], {
    key: `${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`,
    chatId: renderingChatId,
    threadId: renderingThreadId,
    type: renderingMessageListType,
    isComments: isComments,
    canPost: renderingCanPost,
    onScrollDownToggle: setIsScrollDownShown,
    onNotchToggle: setIsNotchShown,
    isReady: isReady,
    isContactRequirePremium: isContactRequirePremium,
    withBottomShift: withMessageListBottomShift,
    withDefaultBg: Boolean(!customBackground && !backgroundColor),
    onIntersectPinnedMessage: renderingHandleIntersectPinnedMessage
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: footerClassName
  }, renderingCanPost && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Composer__WEBPACK_IMPORTED_MODULE_24__["default"], {
    type: "messageList",
    chatId: renderingChatId,
    threadId: renderingThreadId,
    messageListType: renderingMessageListType,
    dropAreaState: dropAreaState,
    onDropHide: handleHideDropArea,
    isReady: isReady,
    isMobile: isMobile,
    editableInputId: _config__WEBPACK_IMPORTED_MODULE_3__.EDITABLE_INPUT_ID,
    editableInputCssSelector: _config__WEBPACK_IMPORTED_MODULE_3__.EDITABLE_INPUT_CSS_SELECTOR,
    inputId: "message-input-text"
  }), isPinnedMessageList && canUnpin && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "middle-column-footer-button-container",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_29__["default"], {
    size: "tiny",
    fluid: true,
    color: "secondary",
    className: "composer-button unpin-all-button",
    onClick: handleOpenUnpinModal
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_25__["default"], {
    name: "unpin"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')))), canShowOpenChatButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "middle-column-footer-button-container",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_29__["default"], {
    size: "tiny",
    fluid: true,
    color: "secondary",
    className: "composer-button open-chat-button",
    onClick: handleOpenChatFromSaved
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('SavedOpenChat')))), isMessagingDisabled && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: messagingDisabledClassName
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "messaging-disabled-inner"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, composerRestrictionMessage))), isMobile && (renderingCanSubscribe || renderingShouldJoinToSend && !renderingShouldSendJoinRequest) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "middle-column-footer-button-container",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_29__["default"], {
    size: "tiny",
    fluid: true,
    ripple: true,
    className: "composer-button join-subscribe-button",
    onClick: handleSubscribeClick
  }, lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup'))), isMobile && renderingShouldSendJoinRequest && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "middle-column-footer-button-container",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_29__["default"], {
    size: "tiny",
    fluid: true,
    ripple: true,
    className: "composer-button join-subscribe-button",
    onClick: handleSubscribeClick
  }, lang('ChannelJoinRequest'))), isMobile && renderingCanStartBot && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "middle-column-footer-button-container",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_29__["default"], {
    size: "tiny",
    fluid: true,
    ripple: true,
    className: "composer-button join-subscribe-button",
    onClick: handleStartBot
  }, lang('BotStart'))), isMobile && renderingCanRestartBot && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "middle-column-footer-button-container",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_29__["default"], {
    size: "tiny",
    fluid: true,
    ripple: true,
    className: "composer-button join-subscribe-button",
    onClick: handleRestartBot
  }, lang('BotRestart'))), isMobile && renderingCanUnblock && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "middle-column-footer-button-container",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_29__["default"], {
    size: "tiny",
    fluid: true,
    ripple: true,
    className: "composer-button join-subscribe-button",
    onClick: handleUnblock
  }, lang('Unblock'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageSelectToolbar_async__WEBPACK_IMPORTED_MODULE_36__["default"], {
    messageListType: renderingMessageListType,
    isActive: isSelectModeActive,
    canPost: renderingCanPost
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_SeenByModal_async__WEBPACK_IMPORTED_MODULE_27__["default"], {
    isOpen: isSeenByModalOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PrivacySettingsNoticeModal_async__WEBPACK_IMPORTED_MODULE_26__["default"], {
    isOpen: isPrivacySettingsNoticeModalOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ReactorListModal_async__WEBPACK_IMPORTED_MODULE_40__["default"], {
    isOpen: isReactorListModalOpen
  }), _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_TRANSLATION_SUPPORTED && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatLanguageModal_async__WEBPACK_IMPORTED_MODULE_31__["default"], {
    isOpen: isChatLanguageModalOpen
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_FloatingActionButtons__WEBPACK_IMPORTED_MODULE_34__["default"], {
    withScrollDown: renderingIsScrollDownShown,
    canPost: renderingCanPost,
    withExtraShift: withExtraShift
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_search_MiddleSearch_async__WEBPACK_IMPORTED_MODULE_41__["default"], {
    isActive: Boolean(hasActiveMiddleSearch)
  })), chatId && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_UnpinAllMessagesModal_async__WEBPACK_IMPORTED_MODULE_28__["default"], {
    isOpen: isUnpinModalOpen,
    chatId: chatId,
    pinnedMessagesCount: pinnedMessagesCount,
    onClose: closeUnpinModal,
    onUnpin: handleUnpinAllMessages
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    teactFastList: true
  }, activeEmojiInteractions?.map((activeEmojiInteraction, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_EmojiInteractionAnimation_async__WEBPACK_IMPORTED_MODULE_33__["default"], {
    teactOrderKey: i,
    key: activeEmojiInteraction.id,
    activeEmojiInteraction: activeEmojiInteraction
  }))));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  isMobile
}) => {
  const theme = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTheme)(global);
  const {
    isBlurred: isBackgroundBlurred,
    background: customBackground,
    backgroundColor,
    patternColor
  } = global.settings.themes[theme] || {};
  const {
    messageLists,
    isLeftColumnShown,
    activeEmojiInteractions,
    seenByModal,
    reactorModal,
    shouldSkipHistoryAnimations,
    chatLanguageModal,
    privacySettingsNoticeModal
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global);
  const currentMessageList = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentMessageList)(global);
  const {
    leftColumnWidth
  } = global;
  const state = {
    theme,
    customBackground,
    backgroundColor,
    patternColor,
    isLeftColumnShown,
    isRightColumnShown: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsRightColumnShown)(global, isMobile),
    isBackgroundBlurred,
    hasActiveMiddleSearch: Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentMiddleSearch)(global)),
    isSelectModeActive: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsInSelectMode)(global),
    isSeenByModalOpen: Boolean(seenByModal),
    isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),
    isReactorListModalOpen: Boolean(reactorModal),
    isChatLanguageModalOpen: Boolean(chatLanguageModal),
    withInterfaceAnimations: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanAnimateInterface)(global),
    currentTransitionKey: Math.max(0, messageLists.length - 1),
    activeEmojiInteractions,
    leftColumnWidth
  };
  if (!currentMessageList) {
    return state;
  }
  const {
    chatId,
    threadId,
    type: messageListType
  } = currentMessageList;
  const isPrivate = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chatId);
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId);
  const bot = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectBot)(global, chatId);
  const pinnedIds = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPinnedIds)(global, chatId, threadId);
  const chatFullInfo = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatFullInfo)(global, chatId) : undefined;
  const threadInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectThreadInfo)(global, chatId, threadId);
  const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);
  const topic = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopic)(global, chatId, threadId);
  const canPost = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getCanPostInChat)(chat, topic, isMessageThread, chatFullInfo);
  const isBotNotStarted = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsChatBotNotStarted)(global, chatId);
  const isPinnedMessageList = messageListType === 'pinned';
  const isMainThread = messageListType === 'thread' && threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID;
  const isChannel = Boolean(chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatChannel)(chat));
  const canSubscribe = Boolean(chat && isMainThread && (isChannel || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatSuperGroup)(chat)) && chat.isNotJoined && !chat.joinRequests);
  const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);
  const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);
  const isUserBlocked = isPrivate ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsUserBlocked)(global, chatId) : false;
  const canRestartBot = Boolean(bot && isUserBlocked);
  const canStartBot = !canRestartBot && isBotNotStarted;
  const canUnblock = isUserBlocked && !bot;
  const shouldLoadFullChat = Boolean(chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatGroup)(chat) && !chatFullInfo);
  const draftReplyInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectDraft)(global, chatId, threadId)?.replyInfo;
  const shouldBlockSendInForum = chat?.isForum ? threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID && !draftReplyInfo && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopic)(global, chatId, _config__WEBPACK_IMPORTED_MODULE_3__.GENERAL_TOPIC_ID)?.isClosed : false;
  const topics = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopics)(global, chatId);
  const isSavedDialog = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  const canShowOpenChatButton = isSavedDialog && threadId !== _config__WEBPACK_IMPORTED_MODULE_3__.ANONYMOUS_USER_ID;
  const canUnpin = chat && (isPrivate || chat?.isCreator || !isChannel && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserRightBanned)(chat, 'pinMessages') || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getHasAdminRight)(chat, 'pinMessages'));
  const isContactRequirePremium = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUserFullInfo)(global, chatId)?.isContactRequirePremium;
  return {
    ...state,
    chatId,
    threadId,
    messageListType,
    chat,
    draftReplyInfo,
    isPrivate,
    areChatSettingsLoaded: Boolean(chat?.settings),
    isComments: isMessageThread,
    canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted && !(shouldJoinToSend && chat?.isNotJoined) && !shouldBlockSendInForum && !isSavedDialog,
    isPinnedMessageList,
    currentUserBannedRights: chat?.currentUserBannedRights,
    defaultBannedRights: chat?.defaultBannedRights,
    pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,
    shouldSkipHistoryAnimations,
    isChannel,
    canSubscribe,
    canStartBot,
    canRestartBot,
    shouldJoinToSend,
    shouldSendJoinRequest,
    shouldLoadFullChat,
    pinnedIds,
    canUnpin,
    canUnblock,
    isSavedDialog,
    canShowOpenChatButton,
    isContactRequirePremium,
    topics
  };
})(MiddleColumn)));
function useIsReady(withAnimations, currentTransitionKey, prevTransitionKey, chatId, isMobile) {
  const [isReady, setIsReady] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!isMobile);
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;
  if (willSwitchMessageList) {
    if (withAnimations) {
      setIsReady(false);

      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)
      setTimeout(() => {
        setIsReady(true);
      }, LAYER_ANIMATION_DURATION_MS);
    } else {
      forceUpdate();
    }
  }
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_21__["default"])(() => {
    if (!withAnimations) {
      setIsReady(true);
    }
  }, [withAnimations]);
  function handleCssTransitionEnd(e) {
    if (e.propertyName === 'transform' && e.target === e.currentTarget) {
      setIsReady(Boolean(chatId));
    }
  }
  function handleSlideTransitionStop() {
    setIsReady(true);
  }
  return {
    isReady: isReady && !willSwitchMessageList,
    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,
    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined
  };
}

/***/ }),

/***/ "./src/components/middle/MiddleHeader.tsx":
/*!************************************************!*\
  !*** ./src/components/middle/MiddleHeader.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useConnectionStatus__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useConnectionStatus */ "./src/hooks/useConnectionStatus.ts");
/* harmony import */ var _hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useElectronDrag */ "./src/hooks/useElectronDrag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useLongPress__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useLongPress */ "./src/hooks/useLongPress.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hooks/window/useWindowSize */ "./src/hooks/window/useWindowSize.ts");
/* harmony import */ var _common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../common/GroupChatInfo */ "./src/components/common/GroupChatInfo.tsx");
/* harmony import */ var _common_PrivateChatInfo__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../common/PrivateChatInfo */ "./src/components/common/PrivateChatInfo.tsx");
/* harmony import */ var _common_UnreadCounter__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../common/UnreadCounter */ "./src/components/common/UnreadCounter.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _HeaderActions__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./HeaderActions */ "./src/components/middle/HeaderActions.tsx");
/* harmony import */ var _panes_AudioPlayer__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./panes/AudioPlayer */ "./src/components/middle/panes/AudioPlayer.tsx");
/* harmony import */ var _panes_HeaderPinnedMessage__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./panes/HeaderPinnedMessage */ "./src/components/middle/panes/HeaderPinnedMessage.tsx");
/* harmony import */ var _MiddleHeader_scss__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./MiddleHeader.scss */ "./src/components/middle/MiddleHeader.scss");

























const BACK_BUTTON_INACTIVE_TIME = 450;
const EMOJI_STATUS_SIZE = 22;
const SEARCH_LONGTAP_THRESHOLD = 500;
const MiddleHeader = ({
  chatId,
  threadId,
  messageListType,
  isMobile,
  typingStatus,
  isSelectModeActive,
  isLeftColumnShown,
  audioMessage,
  chat,
  messagesCount,
  isComments,
  isChatWithSelf,
  shouldSkipHistoryAnimations,
  currentTransitionKey,
  connectionState,
  isSyncing,
  isFetchingDifference,
  getCurrentPinnedIndex,
  getLoadingPinnedId,
  emojiStatusSticker,
  isSavedDialog,
  onFocusPinnedMessage
}) => {
  const {
    openThreadWithInfo,
    openChat,
    openPreviousChat,
    toggleLeftColumn,
    exitMessageSelectMode,
    openPremiumModal,
    openStickerSet,
    updateMiddleSearch
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const isBackButtonActive = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  const {
    isTablet
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const {
    width: windowWidth
  } = (0,_hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_15__["default"])();
  const {
    isDesktop
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const isLeftColumnHideable = windowWidth <= _config__WEBPACK_IMPORTED_MODULE_4__.MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;
  const shouldShowCloseButton = isTablet && isLeftColumnShown;

  // eslint-disable-next-line no-null/no-null
  const componentRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const handleOpenSearch = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    updateMiddleSearch({
      chatId,
      threadId,
      update: {}
    });
  });
  const handleOpenChat = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(event => {
    if (event.target.closest('.title > .custom-emoji')) return;
    openThreadWithInfo({
      chatId,
      threadId
    });
  });
  const {
    onMouseDown: handleLongPressMouseDown,
    onMouseUp: handleLongPressMouseUp,
    onMouseLeave: handleLongPressMouseLeave,
    onTouchStart: handleLongPressTouchStart,
    onTouchEnd: handleLongPressTouchEnd
  } = (0,_hooks_useLongPress__WEBPACK_IMPORTED_MODULE_12__["default"])({
    onStart: handleOpenSearch,
    onClick: handleOpenChat,
    threshold: SEARCH_LONGTAP_THRESHOLD
  });
  const setBackButtonActive = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    setTimeout(() => {
      isBackButtonActive.current = true;
    }, BACK_BUTTON_INACTIVE_TIME);
  });
  const handleUserStatusClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    openPremiumModal({
      fromUserId: chatId
    });
  });
  const handleChannelStatusClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    openStickerSet({
      stickerSetInfo: emojiStatusSticker.stickerSetInfo
    });
  });
  const handleBackClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(e => {
    if (!isBackButtonActive.current) return;

    // Workaround for missing UI when quickly clicking the Back button
    isBackButtonActive.current = false;
    if (isMobile) {
      const messageInput = document.querySelector(_config__WEBPACK_IMPORTED_MODULE_4__.EDITABLE_INPUT_CSS_SELECTOR);
      messageInput?.blur();
    }
    if (isSelectModeActive) {
      exitMessageSelectMode();
      setBackButtonActive();
      return;
    }
    if (messageListType === 'thread' && currentTransitionKey === 0) {
      if (!isTablet || shouldShowCloseButton) {
        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets
        openChat({
          id: undefined
        }, {
          forceOnHeavyAnimation: true
        });
      } else {
        toggleLeftColumn();
      }
      setBackButtonActive();
      return;
    }
    openPreviousChat();
    setBackButtonActive();
  });
  const prevTransitionKey = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_14__["default"])(currentTransitionKey);
  const cleanupExceptionKey = prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined;
  const isAudioPlayerActive = Boolean(audioMessage);
  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;
  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;
  const {
    connectionStatusText
  } = (0,_hooks_useConnectionStatus__WEBPACK_IMPORTED_MODULE_9__["default"])(lang, connectionState, isSyncing || isFetchingDifference, true);
  function renderInfo() {
    if (messageListType === 'thread') {
      if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {
        return renderChatInfo();
      }
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, renderBackButton(), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", null, messagesCount !== undefined ? messageListType === 'thread' ? messagesCount ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i') : lang(isComments ? 'CommentsTitle' : 'RepliesTitle') : messageListType === 'pinned' ? lang('PinnedMessagesCount', messagesCount, 'i') : messageListType === 'scheduled' ? isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i') : undefined : lang('Loading')));
  }
  function renderChatInfo() {
    // TODO Implement count
    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;
    const realChatId = isSavedDialog ? String(threadId) : chatId;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, (isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "chat-info-wrapper",
      onMouseDown: handleLongPressMouseDown,
      onMouseUp: handleLongPressMouseUp,
      onMouseLeave: handleLongPressMouseLeave,
      onTouchStart: handleLongPressTouchStart,
      onTouchEnd: handleLongPressTouchEnd
    }, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(realChatId) ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PrivateChatInfo__WEBPACK_IMPORTED_MODULE_17__["default"], {
      key: realChatId,
      userId: realChatId,
      typingStatus: typingStatus,
      status: connectionStatusText || savedMessagesStatus,
      withDots: Boolean(connectionStatusText),
      withFullInfo: true,
      withMediaViewer: true,
      withStory: !isChatWithSelf,
      withUpdatingStatus: true,
      isSavedDialog: isSavedDialog,
      storyViewerOrigin: _types__WEBPACK_IMPORTED_MODULE_3__.StoryViewerOrigin.MiddleHeaderAvatar,
      emojiStatusSize: EMOJI_STATUS_SIZE,
      noRtl: true,
      onEmojiStatusClick: handleUserStatusClick
    }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_16__["default"], {
      key: realChatId,
      chatId: realChatId,
      threadId: !isSavedDialog ? threadId : undefined,
      typingStatus: typingStatus,
      status: connectionStatusText || savedMessagesStatus,
      withDots: Boolean(connectionStatusText),
      withMediaViewer: threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID,
      withFullInfo: threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID,
      withUpdatingStatus: true,
      withStory: true,
      isSavedDialog: isSavedDialog,
      storyViewerOrigin: _types__WEBPACK_IMPORTED_MODULE_3__.StoryViewerOrigin.MiddleHeaderAvatar,
      emojiStatusSize: EMOJI_STATUS_SIZE,
      onEmojiStatusClick: handleChannelStatusClick,
      noRtl: true
    })));
  }
  function renderBackButton(asClose = false, withUnreadCounter = false) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "back-button"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_19__["default"], {
      round: true,
      size: "smaller",
      color: "translucent",
      onClick: handleBackClick,
      ariaLabel: lang(asClose ? 'Close' : 'Back')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('animated-close-icon', !asClose && 'state-back')
    })), withUnreadCounter && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_UnreadCounter__WEBPACK_IMPORTED_MODULE_18__["default"], null));
  }
  (0,_hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_10__["default"])(componentRef);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "MiddleHeader",
    ref: componentRef
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: shouldSkipHistoryAnimations ? 'none' : 'slideFade',
    activeKey: currentTransitionKey,
    shouldCleanup: true,
    cleanupExceptionKey: cleanupExceptionKey
  }, renderInfo()), !isPinnedMessagesFullWidth && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_panes_HeaderPinnedMessage__WEBPACK_IMPORTED_MODULE_23__["default"], {
    key: chatId,
    chatId: chatId,
    threadId: threadId,
    messageListType: messageListType,
    onFocusPinnedMessage: onFocusPinnedMessage,
    getLoadingPinnedId: getLoadingPinnedId,
    getCurrentPinnedIndex: getCurrentPinnedIndex
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "header-tools"
  }, isAudioPlayerRendering && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_panes_AudioPlayer__WEBPACK_IMPORTED_MODULE_22__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_HeaderActions__WEBPACK_IMPORTED_MODULE_21__["default"], {
    chatId: chatId,
    threadId: threadId,
    messageListType: messageListType,
    isMobile: isMobile,
    canExpandActions: !isAudioPlayerRendering
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId,
  messageListType,
  isMobile
}) => {
  const {
    isLeftColumnShown,
    shouldSkipHistoryAnimations,
    audioPlayer,
    messageLists
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global);
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId);
  const {
    chatId: audioChatId,
    messageId: audioMessageId
  } = audioPlayer;
  const audioMessage = audioChatId && audioMessageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, audioChatId, audioMessageId) : undefined;
  let messagesCount;
  if (messageListType === 'pinned') {
    const pinnedIds = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPinnedIds)(global, chatId, threadId);
    messagesCount = pinnedIds?.length;
  } else if (messageListType === 'scheduled') {
    const scheduledIds = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectScheduledIds)(global, chatId, threadId);
    messagesCount = scheduledIds?.length;
  } else if (messageListType === 'thread' && threadId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID) {
    const threadInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectThreadInfo)(global, chatId, threadId);
    messagesCount = threadInfo?.messagesCount || 0;
  }
  const typingStatus = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectThreadParam)(global, chatId, threadId, 'typingStatus');
  const emojiStatus = chat?.emojiStatus;
  const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];
  const isSavedDialog = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  return {
    typingStatus,
    isLeftColumnShown,
    isRightColumnShown: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsRightColumnShown)(global, isMobile),
    isSelectModeActive: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsInSelectMode)(global),
    audioMessage,
    chat,
    messagesCount,
    isChatWithSelf: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsChatWithSelf)(global, chatId),
    shouldSkipHistoryAnimations,
    currentTransitionKey: Math.max(0, messageLists.length - 1),
    connectionState: global.connectionState,
    isSyncing: global.isSyncing,
    isFetchingDifference: global.isFetchingDifference,
    emojiStatusSticker,
    isSavedDialog
  };
})(MiddleHeader)));

/***/ }),

/***/ "./src/components/middle/MiddleHeaderPanes.tsx":
/*!*****************************************************!*\
  !*** ./src/components/middle/MiddleHeaderPanes.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useEffectOnce */ "./src/hooks/useEffectOnce.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useSignalEffect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useSignalEffect */ "./src/hooks/useSignalEffect.ts");
/* harmony import */ var _hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hooks/useHeaderPane */ "./src/components/middle/hooks/useHeaderPane.tsx");
/* harmony import */ var _calls_group_GroupCallTopPane__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../calls/group/GroupCallTopPane */ "./src/components/calls/group/GroupCallTopPane.tsx");
/* harmony import */ var _panes_AudioPlayer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./panes/AudioPlayer */ "./src/components/middle/panes/AudioPlayer.tsx");
/* harmony import */ var _panes_BotAdPane__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./panes/BotAdPane */ "./src/components/middle/panes/BotAdPane.tsx");
/* harmony import */ var _panes_BotVerificationPane__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./panes/BotVerificationPane */ "./src/components/middle/panes/BotVerificationPane.tsx");
/* harmony import */ var _panes_ChatReportPane__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./panes/ChatReportPane */ "./src/components/middle/panes/ChatReportPane.tsx");
/* harmony import */ var _panes_HeaderPinnedMessage__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./panes/HeaderPinnedMessage */ "./src/components/middle/panes/HeaderPinnedMessage.tsx");
/* harmony import */ var _MiddleHeaderPanes_module_scss__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./MiddleHeaderPanes.module.scss */ "./src/components/middle/MiddleHeaderPanes.module.scss");


















const FALLBACK_PANE_STATE = {
  height: 0
};
const MiddleHeaderPanes = ({
  className,
  chatId,
  threadId,
  messageListType,
  chat,
  getCurrentPinnedIndex,
  getLoadingPinnedId,
  isAudioPlayerRendered,
  isMiddleSearchOpen,
  onFocusPinnedMessage
}) => {
  const {
    settings
  } = chat || {};
  const {
    isDesktop
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const [getAudioPlayerState, setAudioPlayerState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(FALLBACK_PANE_STATE);
  const [getPinnedState, setPinnedState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(FALLBACK_PANE_STATE);
  const [getGroupCallState, setGroupCallState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(FALLBACK_PANE_STATE);
  const [getChatReportState, setChatReportState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(FALLBACK_PANE_STATE);
  const [getBotAdState, setBotAdState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(FALLBACK_PANE_STATE);
  const [getBotVerificationState, setBotVerificationState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(FALLBACK_PANE_STATE);
  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;
  const isFirstRenderRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  const {
    shouldRender,
    ref
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_8__["default"])({
    isOpen: !isMiddleSearchOpen,
    withShouldRender: true,
    noMountTransition: true
  });
  (0,_hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    isFirstRenderRef.current = false;
  });
  (0,_hooks_useSignalEffect__WEBPACK_IMPORTED_MODULE_9__.useSignalEffect)(() => {
    const audioPlayerState = getAudioPlayerState();
    const botVerificationState = getBotVerificationState();
    const pinnedState = getPinnedState();
    const groupCallState = getGroupCallState();
    const chatReportState = getChatReportState();
    const botAdState = getBotAdState();

    // Keep in sync with the order of the panes in the DOM
    const stateArray = [audioPlayerState, groupCallState, chatReportState, botVerificationState, pinnedState, botAdState];
    const isFirstRender = isFirstRenderRef.current;
    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);
    const middleColumn = document.getElementById('MiddleColumn');
    if (!middleColumn) return;
    (0,_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_10__.applyAnimationState)(stateArray, isFirstRender);
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(middleColumn, {
      '--middle-header-panes-height': `${totalHeight}px`
    });
  }, [getAudioPlayerState, getGroupCallState, getPinnedState, getChatReportState, getBotAdState, getBotVerificationState]);
  if (!shouldRender) return undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_MiddleHeaderPanes_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].root, className)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_panes_AudioPlayer__WEBPACK_IMPORTED_MODULE_12__["default"], {
    isFullWidth: true,
    onPaneStateChange: setAudioPlayerState,
    isHidden: isDesktop
  }), threadId === _api_types__WEBPACK_IMPORTED_MODULE_3__.MAIN_THREAD_ID && !chat?.isForum && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_calls_group_GroupCallTopPane__WEBPACK_IMPORTED_MODULE_11__["default"], {
    chatId: chatId,
    onPaneStateChange: setGroupCallState
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_panes_ChatReportPane__WEBPACK_IMPORTED_MODULE_15__["default"], {
    chatId: chatId,
    canAddContact: settings?.canAddContact,
    canBlockContact: settings?.canBlockContact,
    canReportSpam: settings?.canReportSpam,
    isAutoArchived: settings?.isAutoArchived,
    onPaneStateChange: setChatReportState
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_panes_BotVerificationPane__WEBPACK_IMPORTED_MODULE_14__["default"], {
    peerId: chatId,
    onPaneStateChange: setBotVerificationState
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_panes_HeaderPinnedMessage__WEBPACK_IMPORTED_MODULE_16__["default"], {
    chatId: chatId,
    threadId: threadId,
    messageListType: messageListType,
    onFocusPinnedMessage: onFocusPinnedMessage,
    getLoadingPinnedId: getLoadingPinnedId,
    getCurrentPinnedIndex: getCurrentPinnedIndex,
    onPaneStateChange: setPinnedState,
    isFullWidth: true,
    shouldHide: !isPinnedMessagesFullWidth
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_panes_BotAdPane__WEBPACK_IMPORTED_MODULE_13__["default"], {
    chatId: chatId,
    messageListType: messageListType,
    onPaneStateChange: setBotAdState
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_2__.withGlobal)((global, {
  chatId
}) => {
  const {
    audioPlayer
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId);
  const {
    chatId: audioChatId,
    messageId: audioMessageId
  } = audioPlayer;
  const audioMessage = audioChatId && audioMessageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessage)(global, audioChatId, audioMessageId) : undefined;
  const isMiddleSearchOpen = Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMiddleSearch)(global));
  return {
    chat,
    isAudioPlayerRendered: Boolean(audioMessage),
    isMiddleSearchOpen
  };
})(MiddleHeaderPanes)));

/***/ }),

/***/ "./src/components/middle/NoMessages.tsx":
/*!**********************************************!*\
  !*** ./src/components/middle/NoMessages.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_TopicIcon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/TopicIcon */ "./src/components/common/TopicIcon.tsx");
/* harmony import */ var _NoMessages_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NoMessages.scss */ "./src/components/middle/NoMessages.scss");







const ICON_SIZE = 3 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
const NoMessages = ({
  isChatWithSelf,
  type,
  isGroupChatJustCreated,
  topic
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__["default"])();
  if (type === 'scheduled') {
    return renderScheduled(lang);
  }
  if (isChatWithSelf) {
    return renderSavedMessages(lang);
  }
  if (isGroupChatJustCreated) {
    return renderGroup(lang);
  }
  if (topic) {
    return renderTopic(lang, topic);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "empty"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('NoMessages')));
};
function renderTopic(lang, topic) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "NoMessages"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "wrapper"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_TopicIcon__WEBPACK_IMPORTED_MODULE_5__["default"], {
    topic: topic,
    size: ICON_SIZE,
    className: "no-messages-icon topic-icon"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    className: "title"
  }, lang('Chat.EmptyTopicPlaceholder.Title')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "description topic-description"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__["default"])(lang('Chat.EmptyTopicPlaceholder.Text'), ['br']))));
}
function renderScheduled(lang) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "empty"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('ScheduledMessages.EmptyPlaceholder')));
}
function renderSavedMessages(lang) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "NoMessages"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "wrapper"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
    name: "cloud-download",
    className: "no-messages-icon"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    className: "title"
  }, lang('Conversation.CloudStorageInfo.Title')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("ul", {
    className: "description"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('Conversation.ClousStorageInfo.Description1')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('Conversation.ClousStorageInfo.Description2')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('Conversation.ClousStorageInfo.Description3')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('Conversation.ClousStorageInfo.Description4')))));
}
function renderGroup(lang) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "NoMessages"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "wrapper",
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    className: "title"
  }, lang('EmptyGroupInfo.Title')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "description"
  }, lang('EmptyGroupInfo.Subtitle')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("ul", {
    className: "list-checkmarks"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('EmptyGroupInfo.Line1')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('EmptyGroupInfo.Line2')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('EmptyGroupInfo.Line3')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, lang('EmptyGroupInfo.Line4')))));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(NoMessages));

/***/ }),

/***/ "./src/components/middle/PinnedMessageNavigation.tsx":
/*!***********************************************************!*\
  !*** ./src/components/middle/PinnedMessageNavigation.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _PinnedMessageNavigation_module_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PinnedMessageNavigation.module.scss */ "./src/components/middle/PinnedMessageNavigation.module.scss");



const BORDER_MASK_LEVEL = 4;
const PinnedMessageNavigation = ({
  count,
  index
}) => {
  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const markupParams = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return calculateMarkup(count, index);
  }, [count, index]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!containerRef.current) {
      return;
    }
    const {
      trackHeight,
      trackTranslateY,
      markHeight,
      markTranslateY,
      clipPathId,
      clipPath
    } = markupParams;
    const firstChild = containerRef.current.firstElementChild;
    if (containerRef?.current) {
      const currentElement = containerRef.current;
      const {
        style
      } = currentElement;
      style.height = `${trackHeight}px`;
      style.transform = `translateY(-${trackTranslateY}px)`;
      style.clipPath = `url("#${clipPathId}")`;
      const svg = currentElement.querySelector('svg');
      const div = currentElement.querySelector('div');
      const defs = currentElement.querySelector('defs');
      if (!svg) {
        if (firstChild) {
          firstChild.innerHTML = `<svg height="0" width="0"><defs> ${clipPath} </defs></svg>`;
        }
      }
      if (defs) {
        defs.innerHTML = clipPath;
      }
      if (div) {
        div.style.height = `${markHeight}px`;
        div.style.transform = `translateY(${markTranslateY}px)`;
      }
    }
  }, [markupParams]);
  if (count === 1) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _PinnedMessageNavigation_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].pinnedMessageBorder
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _PinnedMessageNavigation_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].pinnedMessageBorderWrapper1,
      ref: containerRef
    }));
  }
  const {
    trackHeight,
    trackTranslateY,
    markHeight,
    markTranslateY,
    clipPathId
  } = markupParams;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_PinnedMessageNavigation_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].pinnedMessageBorder, count > BORDER_MASK_LEVEL && _PinnedMessageNavigation_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].pinnedMessageBorderMask)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _PinnedMessageNavigation_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].pinnedMessageBorderWrapper,
    ref: containerRef,
    style: `clip-path: url("#${clipPathId}"); width: 2px;
          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _PinnedMessageNavigation_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].pinnedMessageBorderMark,
    style: `--height: ${markHeight}px; --translate-y: ${markTranslateY}px; ` + `--translate-track: ${trackTranslateY}px;`
  })));
};
function calculateMarkup(count, index) {
  const reverseIndex = count - index - 1;
  const barHeight = getBarHeight(count);
  const markHeight = getMarkHeight(count, reverseIndex);
  const trackHeight = getTrackHeight(count, barHeight);
  const clipPathId = `clipPath${count}`;
  const clipPath = getClipPath(clipPathId, barHeight, count);
  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);
  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);
  return {
    markHeight,
    clipPath,
    markTranslateY,
    trackTranslateY,
    trackHeight,
    clipPathId
  };
}
function getBarHeight(count) {
  let barHeight = 8;
  if (count === 1) {
    barHeight = 36;
  } else if (count === 2) {
    barHeight = 17;
  } else if (count === 3) {
    barHeight = 11;
  } else if (count === 4) {
    barHeight = 7.5;
  } else if (count > 3) {
    barHeight = 7.5;
  }
  return barHeight;
}
function getMarkHeight(count, index) {
  let barHeight = 36;
  if (count === 1) {
    barHeight = 36;
  } else if (count === 2) {
    barHeight = 17;
  } else if (count === 3) {
    barHeight = index === 1 ? 12 : 11;
  } else if (count === 4) {
    barHeight = 7.5;
  } else if (count > 3) {
    barHeight = 7.5;
  }
  return barHeight;
}
function getTrackHeight(count, barHeight) {
  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);
}
function getClipPath(id, barHeight, count) {
  const radius = 1;
  let d = '';
  if (count === 3) {
    d = drawRect(0, 0, 2, barHeight, radius) + drawRect(0, 12, 2, barHeight + 1, radius) + drawRect(0, 25, 2, barHeight, radius);
  } else {
    for (let i = 0; i < count; i++) {
      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);
    }
  }
  return `<clipPath id="${id}">
      <path d="${d}" />
    </clipPath>`;
}
function drawRect(x, y, width, height, radius) {
  return `M${x},${y + radius}a${radius},${radius},0,0,1,
  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;
}
function getMarkTranslateY(index, barHeight, count) {
  if (count === 1) {
    return 0;
  } else if (count === 2) {
    return index === 0 ? 0 : barHeight + 2;
  }
  if (count === 3) {
    if (index === 0) {
      return 0;
    } else if (index === 1) {
      return 12;
    }
    return 25;
  } else {
    return (barHeight + 2) * index;
  }
}
function getTrackTranslateY(index, count, barHeight, trackHeight) {
  if (count <= 4) {
    return 0;
  }
  if (index <= 1) {
    return 0;
  } else if (index >= count - 2) {
    return trackHeight - 36;
  }
  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(PinnedMessageNavigation));

/***/ }),

/***/ "./src/components/middle/PremiumRequiredMessage.tsx":
/*!**********************************************************!*\
  !*** ./src/components/middle/PremiumRequiredMessage.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/helpers/animatedAssets */ "./src/components/common/helpers/animatedAssets.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AnimatedIconWithPreview__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/AnimatedIconWithPreview */ "./src/components/common/AnimatedIconWithPreview.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./PremiumRequiredMessage.module.scss */ "./src/components/middle/PremiumRequiredMessage.module.scss");












function PremiumRequiredMessage({
  patternColor,
  userName
}) {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const {
    openPremiumModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const handleOpenPremiumModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => openPremiumModal());
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].inner
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].iconsContainer
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIconWithPreview__WEBPACK_IMPORTED_MODULE_8__["default"], {
    tgsUrl: _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_4__.LOCAL_TGS_URLS.Unlock,
    size: 54,
    color: patternColor,
    className: _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].animatedUnlock
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_9__["default"], {
    name: "comments-sticker",
    className: _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].commentsIcon
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].description
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__["default"])(lang('MessageLockedPremium', userName), ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_10__["default"], {
    color: "translucent-black",
    size: "tiny",
    onClick: handleOpenPremiumModal,
    className: _PremiumRequiredMessage_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].button
  }, lang('MessagePremiumUnlock'))));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  userId
}) => {
  const theme = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTheme)(global);
  const {
    patternColor
  } = global.settings.themes[theme] || {};
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, userId);
  return {
    patternColor,
    userName: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFirstOrLastName)(user)
  };
})(PremiumRequiredMessage)));

/***/ }),

/***/ "./src/components/middle/PremiumRequiredPlaceholder.tsx":
/*!**************************************************************!*\
  !*** ./src/components/middle/PremiumRequiredPlaceholder.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");







function PremiumRequiredPlaceholder({
  userName
}) {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const {
    openPremiumModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const handleOpenPremiumModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => openPremiumModal());
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, lang('Chat.MessagingRestrictedPlaceholder', userName)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_6__["default"], {
    isPrimary: true,
    onClick: handleOpenPremiumModal
  }, lang('Chat.MessagingRestrictedPlaceholderAction')));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  userId
}) => {
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, userId);
  return {
    userName: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFirstOrLastName)(user)
  };
})(PremiumRequiredPlaceholder)));

/***/ }),

/***/ "./src/components/middle/ReactorListModal.async.tsx":
/*!**********************************************************!*\
  !*** ./src/components/middle/ReactorListModal.async.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ReactorListModalAsync = props => {
  const {
    isOpen
  } = props;
  const ReactorListModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ReactorListModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ReactorListModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ReactorListModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReactorListModalAsync);

/***/ }),

/***/ "./src/components/middle/ScrollDownButton.tsx":
/*!****************************************************!*\
  !*** ./src/components/middle/ScrollDownButton.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ScrollDownButton_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ScrollDownButton.module.scss */ "./src/components/middle/ScrollDownButton.module.scss");










const ScrollDownButton = ({
  icon,
  ariaLabelLang,
  unreadCount,
  onClick,
  onReadAll,
  className
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__["default"])();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    isContextMenuOpen,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_3__["default"])(ref, !onReadAll);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_ScrollDownButton_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root, className),
    ref: ref
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_6__["default"], {
    color: "secondary",
    round: true,
    className: _ScrollDownButton_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].button,
    onClick: onClick,
    onContextMenu: handleContextMenu,
    ariaLabel: lang(ariaLabelLang)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__["default"], {
    name: icon,
    className: _ScrollDownButton_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].icon
  })), Boolean(unreadCount) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ScrollDownButton_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].unreadCount
  }, (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_2__.formatIntegerCompact)(unreadCount)), onReadAll && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_7__["default"], {
    isOpen: isContextMenuOpen,
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide,
    autoClose: true,
    positionX: "right",
    positionY: "bottom"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_8__["default"], {
    icon: "readchats",
    onClick: onReadAll
  }, lang('MarkAllAsRead'))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ScrollDownButton));

/***/ }),

/***/ "./src/components/middle/helpers/calculateMiddleFooterTransforms.ts":
/*!**************************************************************************!*\
  !*** ./src/components/middle/helpers/calculateMiddleFooterTransforms.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MIN_LEFT_COLUMN_WIDTH: () => (/* binding */ MIN_LEFT_COLUMN_WIDTH),
/* harmony export */   SIDE_COLUMN_MAX_WIDTH: () => (/* binding */ SIDE_COLUMN_MAX_WIDTH),
/* harmony export */   "default": () => (/* binding */ calculateMiddleFooterTransforms)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");


const MAX_TOOLBAR_WIDTH = 32 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
const MAX_MESSAGES_LIST_WIDTH = 45.5 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
const SIDE_COLUMN_MAX_WIDTH = 26.5 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
const MIN_LEFT_COLUMN_WIDTH = 16 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
const UNPIN_BUTTON_WIDTH = 16.125 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
function calculateMiddleFooterTransforms(windowWidth, canPost) {
  const sidePadding = windowWidth <= _config__WEBPACK_IMPORTED_MODULE_0__.MOBILE_SCREEN_MAX_WIDTH ? _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM : 2 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
  const messageListWidth = getMessageListWidth(windowWidth);
  const sendButtonWidth = windowWidth <= _config__WEBPACK_IMPORTED_MODULE_0__.MOBILE_SCREEN_MAX_WIDTH ? 3.375 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM : 4 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_1__.REM;
  const composerWidth = canPost ? messageListWidth - sidePadding - sendButtonWidth : messageListWidth - sidePadding;
  const toolbarWidth = windowWidth > _config__WEBPACK_IMPORTED_MODULE_0__.MOBILE_SCREEN_MAX_WIDTH ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH) : messageListWidth - sidePadding;
  const composerHiddenScale = toolbarWidth / composerWidth;
  const toolbarHiddenScale = composerWidth / toolbarWidth;
  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;
  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;
  const composerTranslateX = canPost ? sendButtonWidth / 2 * toolbarHiddenScale : 0;
  const toolbarTranslateX = canPost ? sendButtonWidth / 2 * -1 * composerHiddenScale : 0;
  return {
    composerHiddenScale,
    toolbarHiddenScale,
    composerTranslateX,
    toolbarTranslateX,
    unpinHiddenScale,
    toolbarForUnpinHiddenScale
  };
}
function getMessageListWidth(windowWidth) {
  if (windowWidth > _config__WEBPACK_IMPORTED_MODULE_0__.MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {
    const leftColumnWidth = Math.min(Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH), SIDE_COLUMN_MAX_WIDTH);
    const rightColumnWidth = Math.min(windowWidth * 0.25, SIDE_COLUMN_MAX_WIDTH);
    return Math.min(windowWidth - leftColumnWidth - rightColumnWidth, MAX_MESSAGES_LIST_WIDTH);
  }
  if (windowWidth > _config__WEBPACK_IMPORTED_MODULE_0__.MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {
    const leftColumnWidth = Math.min(Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH), SIDE_COLUMN_MAX_WIDTH);
    return Math.min(windowWidth - leftColumnWidth, MAX_MESSAGES_LIST_WIDTH);
  }
  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {
    return MAX_MESSAGES_LIST_WIDTH;
  }
  return windowWidth;
}

/***/ }),

/***/ "./src/components/middle/helpers/groupMessages.ts":
/*!********************************************************!*\
  !*** ./src/components/middle/helpers/groupMessages.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   groupMessages: () => (/* binding */ groupMessages),
/* harmony export */   isAlbum: () => (/* binding */ isAlbum)
/* harmony export */ });
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");


const GROUP_INTERVAL_SECONDS = 600; // 10 minutes

function isAlbum(messageOrAlbum) {
  return 'albumId' in messageOrAlbum;
}
function groupMessages(messages, firstUnreadId, topMessageId, isChatWithSelf) {
  let currentSenderGroup = [];
  let currentDateGroup = {
    originalDate: messages[0].date,
    datetime: (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__.getDayStartAt)(messages[0].date * 1000),
    senderGroups: [currentSenderGroup]
  };
  let currentAlbum;
  const dateGroups = [currentDateGroup];
  messages.forEach((message, index) => {
    if (message.isInAlbum) {
      if (!currentAlbum) {
        currentAlbum = {
          albumId: message.groupedId,
          messages: [message],
          mainMessage: message,
          hasMultipleCaptions: false
        };
      } else {
        currentAlbum.messages.push(message);
        if (message.hasComments) {
          currentAlbum.commentsMessage = message;
        }
        if (message.content.text && !currentAlbum.hasMultipleCaptions) {
          if (currentAlbum.captionMessage) {
            currentAlbum.hasMultipleCaptions = true;
            currentAlbum.captionMessage = undefined;
          } else {
            currentAlbum.captionMessage = message;
          }
        }
      }
    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {
      currentSenderGroup.push({
        albumId: `paid-${message.id}`,
        messages: [message],
        mainMessage: message,
        hasMultipleCaptions: false,
        isPaidMedia: true
      });
    } else {
      currentSenderGroup.push(message);
    }
    const nextMessage = messages[index + 1];
    if (currentAlbum && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)) {
      currentSenderGroup.push(currentAlbum);
      currentAlbum = undefined;
    }
    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];
    if (nextMessage) {
      const nextMessageDayStartsAt = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__.getDayStartAt)(nextMessage.date * 1000);
      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {
        currentDateGroup = {
          originalDate: nextMessage.date,
          datetime: nextMessageDayStartsAt,
          senderGroups: []
        };
        dateGroups.push(currentDateGroup);
        currentSenderGroup = [];
        currentDateGroup.senderGroups.push(currentSenderGroup);
      } else if (nextMessage.id === firstUnreadId || message.senderId !== nextMessage.senderId || message.isOutgoing !== nextMessage.isOutgoing || message.postAuthorTitle !== nextMessage.postAuthorTitle || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.isActionMessage)(message) && !message.content.action?.phoneCall || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.isActionMessage)(nextMessage) && !nextMessage.content.action?.phoneCall || message.inlineButtons || nextMessage.inlineButtons || nextMessage.date - message.date > GROUP_INTERVAL_SECONDS || topMessageId && (message.id === topMessageId || lastSenderGroupItem && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId) && nextMessage.id !== topMessageId || isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId) {
        currentSenderGroup = [];
        currentDateGroup.senderGroups.push(currentSenderGroup);
      }
    }
  });
  return dateGroups;
}

/***/ }),

/***/ "./src/components/middle/hooks/useContainerHeight.ts":
/*!***********************************************************!*\
  !*** ./src/components/middle/hooks/useContainerHeight.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useContainerHeight)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");



function useContainerHeight(containerRef, isComposerVisible) {
  const [getContainerHeight, setContainerHeight] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)();

  // Container resize observer (caused by Composer reply/webpage panels)
  const handleResize = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_1__["default"])(entry => {
    setContainerHeight(entry.contentRect.height);
  });
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_2__["default"])(containerRef, handleResize);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const currentNormalHeight = Number(containerRef.current.dataset.normalHeight) || 0;
    const containerHeight = getContainerHeight();
    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {
      containerRef.current.dataset.normalHeight = String(containerHeight);
    }
  }, [isComposerVisible, containerRef, getContainerHeight]);
  const prevContainerHeight = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  return [getContainerHeight, prevContainerHeight];
}

/***/ }),

/***/ "./src/components/middle/hooks/useMessageObservers.ts":
/*!************************************************************!*\
  !*** ./src/components/middle/hooks/useMessageObservers.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMessageObservers)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");





const INTERSECTION_THROTTLE_FOR_READING = 150;
const INTERSECTION_THROTTLE_FOR_MEDIA = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_ANDROID ? 1000 : 350;
function useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId) {
  const {
    markMessageListRead,
    markMentionsRead,
    animateUnreadReaction,
    scheduleForViewsIncrement
  } = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;
  const {
    observe: observeIntersectionForReading,
    freeze: freezeForReading,
    unfreeze: unfreezeForReading
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_3__.useIntersectionObserver)({
    rootRef: containerRef,
    throttleMs: INTERSECTION_THROTTLE_FOR_READING
  }, entries => {
    if (type !== 'thread' || (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_4__.isBackgroundModeActive)()) {
      return;
    }
    let maxId = 0;
    const mentionIds = [];
    const reactionIds = [];
    const viewportPinnedIdsToAdd = [];
    const viewportPinnedIdsToRemove = [];
    const scheduledToUpdateViews = [];
    entries.forEach(entry => {
      const {
        isIntersecting,
        target
      } = entry;
      const {
        dataset
      } = target;
      const messageId = Number(dataset.lastMessageId || dataset.messageId);
      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';
      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;
      if (!isIntersecting) {
        if (dataset.isPinned) {
          viewportPinnedIdsToRemove.push(albumMainId || messageId);
        }
        return;
      }
      if (messageId > maxId) {
        maxId = messageId;
      }
      if (dataset.hasUnreadMention) {
        mentionIds.push(messageId);
      }
      if (dataset.hasUnreadReaction) {
        reactionIds.push(messageId);
      }
      if (dataset.isPinned) {
        viewportPinnedIdsToAdd.push(albumMainId || messageId);
      }
      if (shouldUpdateViews) {
        scheduledToUpdateViews.push(albumMainId || messageId);
      }
    });
    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {
      markMessageListRead({
        maxId
      });
    }
    if (mentionIds.length) {
      markMentionsRead({
        messageIds: mentionIds
      });
    }
    if (reactionIds.length) {
      animateUnreadReaction({
        messageIds: reactionIds
      });
    }
    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {
      onIntersectPinnedMessage({
        viewportPinnedIdsToAdd,
        viewportPinnedIdsToRemove
      });
    }
    if (scheduledToUpdateViews.length) {
      scheduleForViewsIncrement({
        chatId,
        ids: scheduledToUpdateViews
      });
    }
  });
  (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_4__["default"])(freezeForReading, unfreezeForReading);
  const {
    observe: observeIntersectionForLoading
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_3__.useIntersectionObserver)({
    rootRef: containerRef,
    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,
    margin: INTERSECTION_MARGIN_FOR_LOADING
  });
  const {
    observe: observeIntersectionForPlaying
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_3__.useIntersectionObserver)({
    rootRef: containerRef,
    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA
  });
  return {
    observeIntersectionForReading,
    observeIntersectionForLoading,
    observeIntersectionForPlaying
  };
}

/***/ }),

/***/ "./src/components/middle/hooks/usePinnedMessage.ts":
/*!*********************************************************!*\
  !*** ./src/components/middle/hooks/usePinnedMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ usePinnedMessage)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_cycleRestrict__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/cycleRestrict */ "./src/util/cycleRestrict.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");







let viewportPinnedIds;
let lastFocusedId;
function usePinnedMessage(chatId, threadId, pinnedIds) {
  const [getPinnedIndexByKey, setPinnedIndexByKey] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)({});
  const [getLoadingPinnedId, setLoadingPinnedId] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)();
  const key = chatId ? `${chatId}_${threadId}` : undefined;
  const getCurrentPinnedIndex = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_5__["default"])(() => getPinnedIndexByKey()[key] ?? 0, [getPinnedIndexByKey, key]);

  // Reset when switching chat
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    viewportPinnedIds = undefined;
    setLoadingPinnedId(undefined);
  }, [chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!key) return;
    const currentPinnedIndex = getPinnedIndexByKey()[key];
    const pinnedLength = pinnedIds?.length || 0;
    if (currentPinnedIndex >= pinnedLength) {
      setPinnedIndexByKey({
        ...getPinnedIndexByKey(),
        [key]: clampIndex(pinnedLength - 1)
      });
    }
  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);
  const handleIntersectPinnedMessage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(({
    viewportPinnedIdsToAdd = [],
    viewportPinnedIdsToRemove = [],
    shouldCancelWaiting
  }) => {
    if (!chatId || !threadId || !key || !pinnedIds?.length) return;
    if (shouldCancelWaiting) {
      lastFocusedId = undefined;
      setLoadingPinnedId(undefined);
      return;
    }
    const loadingPinnedId = getLoadingPinnedId();
    if (loadingPinnedId) {
      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);
      setPinnedIndexByKey({
        ...getPinnedIndexByKey(),
        [key]: clampIndex(newPinnedIndex)
      });
      setLoadingPinnedId(undefined);
    }
    viewportPinnedIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.unique)((viewportPinnedIds?.filter(id => !viewportPinnedIdsToRemove.includes(id)) ?? []).concat(viewportPinnedIdsToAdd));

    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`
    const focusedMessageId = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectFocusedMessageId)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), chatId) || lastFocusedId;
    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {
      lastFocusedId = undefined;
    }
    if (focusedMessageId) {
      const pinnedIndexAboveFocused = pinnedIds.findIndex(id => id < focusedMessageId);
      setPinnedIndexByKey({
        ...getPinnedIndexByKey(),
        [key]: clampIndex(pinnedIndexAboveFocused)
      });
    } else if (viewportPinnedIds.length) {
      const maxViewportPinnedId = Math.max(...viewportPinnedIds);
      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);
      setPinnedIndexByKey({
        ...getPinnedIndexByKey(),
        [key]: clampIndex(newIndex)
      });
    }
  });
  const handleFocusPinnedMessage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(messageId => {
    // Focusing on a post in comments
    if (!chatId || !threadId || !pinnedIds?.length) {
      return;
    }
    lastFocusedId = messageId;
    const global = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
    const listedIds = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectListedIds)(global, chatId, threadId);
    const isMessageLoaded = listedIds?.includes(messageId) || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectOutlyingListByMessageId)(global, chatId, threadId, messageId);
    const currentIndex = pinnedIds.indexOf(messageId);
    const newIndex = (0,_util_cycleRestrict__WEBPACK_IMPORTED_MODULE_3__["default"])(pinnedIds.length, currentIndex + 1);
    if (isMessageLoaded) {
      setPinnedIndexByKey({
        ...getPinnedIndexByKey(),
        [key]: newIndex
      });
    } else {
      setLoadingPinnedId(pinnedIds[newIndex]);
    }
  });
  return {
    handleIntersectPinnedMessage,
    handleFocusPinnedMessage,
    getCurrentPinnedIndex,
    getLoadingPinnedId
  };
}
function clampIndex(id) {
  return Math.max(0, id);
}

/***/ }),

/***/ "./src/components/middle/hooks/useScrollHooks.ts":
/*!*******************************************************!*\
  !*** ./src/components/middle/hooks/useScrollHooks.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useScrollHooks)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useSignalEffect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useSignalEffect */ "./src/hooks/useSignalEffect.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");











const FAB_THRESHOLD = 50;
const NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect
const CONTAINER_HEIGHT_DEBOUNCE = 200;
const TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration

function useScrollHooks(type, containerRef, messageIds, getContainerHeight, isViewportNewest, isUnread, onScrollDownToggle, onNotchToggle, isReady) {
  const {
    loadViewportMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [loadMoreBackwards, loadMoreForwards] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => type === 'thread' ? [(0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.debounce)(() => loadViewportMessages({
    direction: _types__WEBPACK_IMPORTED_MODULE_2__.LoadMoreDirection.Backwards
  }), 1000, true, false), (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.debounce)(() => loadViewportMessages({
    direction: _types__WEBPACK_IMPORTED_MODULE_2__.LoadMoreDirection.Forwards
  }), 1000, true, false)] : [],
  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  [loadViewportMessages, messageIds]);

  // eslint-disable-next-line no-null/no-null
  const backwardsTriggerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const forwardsTriggerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const fabTriggerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const toggleScrollTools = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    if (!isReady) return;
    if (!messageIds?.length) {
      onScrollDownToggle(false);
      onNotchToggle(false);
      return;
    }
    if (!isViewportNewest) {
      onScrollDownToggle(true);
      onNotchToggle(true);
      return;
    }
    const container = containerRef.current;
    const fabTrigger = fabTriggerRef.current;
    if (!container || !fabTrigger) return;
    const {
      offsetHeight,
      scrollHeight,
      scrollTop
    } = container;
    const fabOffsetTop = fabTrigger.offsetTop;
    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);
    const isNearBottom = scrollBottom <= FAB_THRESHOLD;
    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;
    if (scrollHeight === 0) return;
    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);
    onNotchToggle(!isAtBottom);
  });
  const {
    observe: observeIntersectionForHistory
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useIntersectionObserver)({
    rootRef: containerRef,
    margin: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.MESSAGE_LIST_SENSITIVE_AREA
  }, entries => {
    if (!loadMoreForwards || !loadMoreBackwards) {
      return;
    }
    entries.forEach(({
      isIntersecting,
      target
    }) => {
      if (!isIntersecting) return;
      if (target.className === 'backwards-trigger') {
        loadMoreBackwards();
      }
      if (target.className === 'forwards-trigger') {
        loadMoreForwards();
      }
    });
  });
  const withHistoryTriggers = messageIds && messageIds.length > 1;
  (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useOnIntersect)(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);
  (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useOnIntersect)(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);
  const {
    observe: observeIntersectionForFab,
    freeze: freezeForFab,
    unfreeze: unfreezeForFab
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useIntersectionObserver)({
    rootRef: containerRef,
    margin: FAB_THRESHOLD * 2,
    throttleScheduler: _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMeasure
  }, toggleScrollTools);
  (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useOnIntersect)(fabTriggerRef, observeIntersectionForFab);
  const {
    observe: observeIntersectionForNotch,
    freeze: freezeForNotch,
    unfreeze: unfreezeForNotch
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useIntersectionObserver)({
    rootRef: containerRef,
    margin: NOTCH_THRESHOLD,
    throttleScheduler: _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMeasure
  }, toggleScrollTools);
  (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_7__.useOnIntersect)(fabTriggerRef, observeIntersectionForNotch);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isReady) {
      toggleScrollTools();
    }
  }, [isReady, toggleScrollTools]);
  const freezeShortly = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    freezeForFab();
    freezeForNotch();
    setTimeout(() => {
      unfreezeForNotch();
      unfreezeForFab();
    }, TOOLS_FREEZE_TIMEOUT);
  });

  // Workaround for FAB and notch flickering with tall incoming message
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_10__["default"])(freezeShortly, [freezeShortly, messageIds]);

  // Workaround for notch flickering when opening Composer Embedded Message
  const getContainerHeightDebounced = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_6__.useDebouncedSignal)(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);
  (0,_hooks_useSignalEffect__WEBPACK_IMPORTED_MODULE_9__.useSignalEffect)(freezeShortly, [freezeShortly, getContainerHeightDebounced]);
  return {
    withHistoryTriggers,
    backwardsTriggerRef,
    forwardsTriggerRef,
    fabTriggerRef
  };
}

/***/ }),

/***/ "./src/components/middle/hooks/useStickyDates.ts":
/*!*******************************************************!*\
  !*** ./src/components/middle/hooks/useStickyDates.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useStickyDates)
/* harmony export */ });
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useRunDebounced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useRunDebounced */ "./src/hooks/useRunDebounced.ts");




const DEBOUNCE = 1000;
const STICKY_TOP = 10;
function useStickyDates() {
  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens
  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.
  const [isScrolled, markIsScrolled] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_1__["default"])(false);
  const runDebounced = (0,_hooks_useRunDebounced__WEBPACK_IMPORTED_MODULE_3__["default"])(DEBOUNCE, true);
  const updateStickyDates = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(container => {
    markIsScrolled();
    if (!document.body.classList.contains('is-scrolling-messages')) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
        document.body.classList.add('is-scrolling-messages');
      });
    }
    runDebounced(() => {
      const stuckDateEl = findStuckDate(container);
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
        const currentStuck = document.querySelector('.stuck');
        if (currentStuck) {
          currentStuck.classList.remove('stuck');
        }
        if (stuckDateEl) {
          stuckDateEl.classList.add('stuck');
        }
        document.body.classList.remove('is-scrolling-messages');
      });
    });
  });
  return {
    isScrolled,
    updateStickyDates
  };
}
function findStuckDate(container) {
  const allElements = container.querySelectorAll('.sticky-date');
  const containerTop = container.scrollTop;
  const computedStyle = getComputedStyle(container);
  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);
  return Array.from(allElements).find(el => {
    const {
      offsetTop,
      offsetHeight
    } = el;
    const top = offsetTop - containerTop;
    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;
  });
}

/***/ }),

/***/ "./src/components/middle/message/Album.tsx":
/*!*************************************************!*\
  !*** ./src/components/middle/message/Album.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _helpers_calculateAlbumLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/calculateAlbumLayout */ "./src/components/middle/message/helpers/calculateAlbumLayout.ts");
/* harmony import */ var _hocs_withSelectControl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hocs/withSelectControl */ "./src/components/middle/message/hocs/withSelectControl.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _Photo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Photo */ "./src/components/middle/message/Photo.tsx");
/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Video */ "./src/components/middle/message/Video.tsx");
/* harmony import */ var _Album_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Album.scss */ "./src/components/middle/message/Album.scss");











const PhotoWithSelect = (0,_hocs_withSelectControl__WEBPACK_IMPORTED_MODULE_6__["default"])(_Photo__WEBPACK_IMPORTED_MODULE_8__["default"]);
const VideoWithSelect = (0,_hocs_withSelectControl__WEBPACK_IMPORTED_MODULE_6__["default"])(_Video__WEBPACK_IMPORTED_MODULE_9__["default"]);
const Album = ({
  album,
  observeIntersection,
  hasCustomAppendix,
  isOwn,
  isProtected,
  albumLayout,
  onMediaClick,
  uploadsByKey,
  activeDownloads,
  theme
}) => {
  const {
    cancelUploadMedia
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    content: {
      paidMedia
    }
  } = album.mainMessage;
  const mediaCount = album.isPaidMedia ? paidMedia.extendedMedia.length : album.messages.length;
  const handlePaidMediaClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(index => {
    onMediaClick(album.mainMessage.id, index);
  });
  const handleAlbumMessageClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(messageId => {
    onMediaClick(messageId);
  });
  const handleCancelUpload = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(messageId => {
    cancelUploadMedia({
      chatId: album.mainMessage.chatId,
      messageId
    });
  });
  const messages = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (album.isPaidMedia) {
      return album.mainMessage.content.paidMedia.extendedMedia.map(() => album.mainMessage);
    }
    return album.messages;
  }, [album]);
  function renderAlbumMessage(message, index) {
    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;
    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia ? renderingPaidMedia : renderingPaidMedia?.photo;
    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia ? renderingPaidMedia : renderingPaidMedia?.video;
    const photo = paidPhotoOrPreview || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessagePhoto)(message);
    const video = paidVideoOrPreview || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageContent)(message).video;
    const fileUpload = uploadsByKey[(0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageKey)(message)];
    const uploadProgress = fileUpload?.progress;
    const {
      dimensions,
      sides
    } = albumLayout.layout[index];

    // Ignoring global updates is a known drawback here
    const canAutoLoad = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCanAutoLoadMedia)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), message);
    const canAutoPlay = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCanAutoPlayMedia)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), message);
    if (photo) {
      const shouldAffectAppendix = hasCustomAppendix && (
      // eslint-disable-next-line no-bitwise
      isOwn ? index === mediaCount - 1 : Boolean(sides & _helpers_calculateAlbumLayout__WEBPACK_IMPORTED_MODULE_5__.AlbumRectPart.Left && sides & _helpers_calculateAlbumLayout__WEBPACK_IMPORTED_MODULE_5__.AlbumRectPart.Bottom));
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PhotoWithSelect, {
        id: `album-media-${(0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageHtmlId)(message.id, album.isPaidMedia ? index : undefined)}`,
        photo: photo,
        isOwn: isOwn,
        observeIntersectionForLoading: observeIntersection,
        canAutoLoad: canAutoLoad,
        shouldAffectAppendix: shouldAffectAppendix,
        uploadProgress: uploadProgress,
        dimensions: dimensions,
        isProtected: isProtected,
        clickArg: album.isPaidMedia ? index : message.id,
        onClick: album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick,
        onCancelUpload: handleCancelUpload,
        isDownloading: photo.mediaType !== 'extendedMediaPreview' && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getIsDownloading)(activeDownloads, photo),
        theme: theme,
        noSelectControls: album.isPaidMedia
      });
    } else if (video) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(VideoWithSelect, {
        id: `album-media-${(0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageHtmlId)(message.id)}`,
        video: video,
        observeIntersectionForLoading: observeIntersection,
        canAutoLoad: canAutoLoad,
        canAutoPlay: canAutoPlay,
        uploadProgress: uploadProgress,
        dimensions: dimensions,
        isProtected: isProtected,
        clickArg: album.isPaidMedia ? index : message.id,
        onClick: album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick,
        onCancelUpload: handleCancelUpload,
        isDownloading: video.mediaType !== 'extendedMediaPreview' && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getIsDownloading)(activeDownloads, video),
        theme: theme,
        noSelectControls: album.isPaidMedia
      });
    }
    return undefined;
  }
  const {
    width: containerWidth,
    height: containerHeight
  } = albumLayout.containerStyle;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "Album",
    style: `width: ${containerWidth}px; height: ${containerHeight}px;`
  }, messages.map(renderAlbumMessage));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const theme = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTheme)(global);
  const activeDownloads = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectActiveDownloads)(global);
  return {
    theme,
    uploadsByKey: global.fileUploads.byMessageKey,
    activeDownloads
  };
})(Album));

/***/ }),

/***/ "./src/components/middle/message/AnimatedCustomEmoji.tsx":
/*!***************************************************************!*\
  !*** ./src/components/middle/message/AnimatedCustomEmoji.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../composer/helpers/customEmoji */ "./src/components/middle/composer/helpers/customEmoji.ts");
/* harmony import */ var _common_hooks_useAnimatedEmoji__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/hooks/useAnimatedEmoji */ "./src/components/common/hooks/useAnimatedEmoji.ts");
/* harmony import */ var _common_CustomEmoji__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _AnimatedEmoji_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AnimatedEmoji.scss */ "./src/components/middle/message/AnimatedEmoji.scss");









const AnimatedCustomEmoji = ({
  isOwn,
  customEmojiId,
  messageId,
  chatId,
  activeEmojiInteractions,
  sticker,
  effect,
  soundId,
  noPlay,
  observeIntersection
}) => {
  const {
    ref,
    size,
    style,
    handleClick
  } = (0,_common_hooks_useAnimatedEmoji__WEBPACK_IMPORTED_MODULE_6__["default"])(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, (0,_composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_5__.getCustomEmojiSize)(1));
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_CustomEmoji__WEBPACK_IMPORTED_MODULE_7__["default"], {
    ref: ref,
    documentId: customEmojiId,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('AnimatedEmoji media-inner', sticker?.id === _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.LIKE_STICKER_ID && 'like-sticker-thumb'),
    style: style,
    size: size,
    isBig: true,
    noPlay: noPlay,
    withSharedAnimation: true,
    forceOnHeavyAnimation: Boolean(effect && activeEmojiInteractions?.length),
    observeIntersectionForLoading: observeIntersection,
    onClick: handleClick
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  customEmojiId,
  withEffects
}) => {
  const sticker = global.customEmojis.byId[customEmojiId];
  return {
    sticker,
    effect: sticker?.emoji && withEffects ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectAnimatedEmojiEffect)(global, sticker.emoji) : undefined,
    soundId: sticker?.emoji && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectAnimatedEmojiSound)(global, sticker.emoji),
    noPlay: !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectCanPlayAnimatedEmojis)(global)
  };
})(AnimatedCustomEmoji)));

/***/ }),

/***/ "./src/components/middle/message/AnimatedEmoji.tsx":
/*!*********************************************************!*\
  !*** ./src/components/middle/message/AnimatedEmoji.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _common_hooks_useAnimatedEmoji__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/hooks/useAnimatedEmoji */ "./src/components/common/hooks/useAnimatedEmoji.ts");
/* harmony import */ var _common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/AnimatedIconFromSticker */ "./src/components/common/AnimatedIconFromSticker.tsx");
/* harmony import */ var _AnimatedEmoji_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AnimatedEmoji.scss */ "./src/components/middle/message/AnimatedEmoji.scss");









const QUALITY = 1;
const AnimatedEmoji = ({
  isOwn,
  observeIntersection,
  forceLoadPreview,
  messageId,
  chatId,
  activeEmojiInteractions,
  sticker,
  effect,
  soundId
}) => {
  const {
    ref,
    size,
    style,
    handleClick
  } = (0,_common_hooks_useAnimatedEmoji__WEBPACK_IMPORTED_MODULE_6__["default"])(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_5__.useIsIntersecting)(ref, observeIntersection);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_7__["default"], {
    sticker: sticker,
    size: size,
    quality: QUALITY,
    noLoad: !isIntersecting,
    forcePreview: forceLoadPreview,
    play: isIntersecting,
    forceAlways: true,
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('AnimatedEmoji media-inner', sticker?.id === _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.LIKE_STICKER_ID && 'like-sticker-thumb'),
    style: style,
    onClick: handleClick
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  emoji,
  withEffects
}) => {
  return {
    sticker: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectAnimatedEmoji)(global, emoji),
    effect: withEffects ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectAnimatedEmojiEffect)(global, emoji) : undefined,
    soundId: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectAnimatedEmojiSound)(global, emoji)
  };
})(AnimatedEmoji)));

/***/ }),

/***/ "./src/components/middle/message/CommentButton.tsx":
/*!*********************************************************!*\
  !*** ./src/components/middle/message/CommentButton.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _right_hooks_useAsyncRendering__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../right/hooks/useAsyncRendering */ "./src/components/right/hooks/useAsyncRendering.ts");
/* harmony import */ var _common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/AnimatedCounter */ "./src/components/common/AnimatedCounter.tsx");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _CommentButton_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./CommentButton.scss */ "./src/components/middle/message/CommentButton.scss");













const SHOW_LOADER_DELAY = 450;
const CommentButton = ({
  isCustomShape,
  threadInfo,
  disabled,
  isLoading
}) => {
  const {
    openThread
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const shouldRenderLoading = (0,_right_hooks_useAsyncRendering__WEBPACK_IMPORTED_MODULE_7__["default"])([isLoading], SHOW_LOADER_DELAY);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const {
    originMessageId,
    chatId,
    messagesCount,
    lastMessageId,
    lastReadInboxMessageId,
    recentReplierIds,
    originChannelId
  } = threadInfo;
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    openThread({
      isComments: true,
      chatId,
      originMessageId,
      originChannelId
    });
  });
  const recentRepliers = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!recentReplierIds?.length) {
      return undefined;
    }

    // No need for expensive global updates on chats and users, so we avoid them
    const global = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
    return recentReplierIds.map(peerId => {
      return (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeer)(global, peerId);
    }).filter(Boolean);
  }, [recentReplierIds]);
  if (messagesCount === undefined) {
    return undefined;
  }
  function renderRecentRepliers() {
    return Boolean(recentRepliers?.length) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "recent-repliers",
      dir: lang.isRtl ? 'rtl' : 'ltr'
    }, recentRepliers.map(peer => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_9__["default"], {
      key: peer.id,
      size: "small",
      peer: peer
    })));
  }
  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);
  const commentsText = messagesCount ? lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount).split('%').map(s => {
    return s === 'COMMENTS_COUNT' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_8__["default"], {
      text: (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_4__.formatIntegerCompact)(messagesCount)
    }) : s;
  }) : undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    "data-cnt": (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_4__.formatIntegerCompact)(messagesCount),
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('CommentButton', hasUnread && 'has-unread', disabled && 'disabled', isCustomShape && 'CommentButton-custom-shape', isLoading && 'loading'),
    dir: lang.isRtl ? 'rtl' : 'ltr',
    onClick: handleClick,
    role: "button",
    tabIndex: 0
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "comments-sticker",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('CommentButton_icon-comments', isLoading && shouldRenderLoading && 'CommentButton_hidden')
  }), !recentRepliers?.length && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "comments"
  }), renderRecentRepliers(), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "label",
    dir: "auto"
  }, messagesCount ? commentsText : lang('LeaveAComment')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "CommentButton_right"
  }, isLoading && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_11__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('CommentButton_loading', !shouldRenderLoading && 'CommentButton_hidden'),
    color: isCustomShape ? 'white' : 'blue'
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "next",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('CommentButton_icon-open', isLoading && shouldRenderLoading && 'CommentButton_hidden')
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(CommentButton));

/***/ }),

/***/ "./src/components/middle/message/Contact.tsx":
/*!***************************************************!*\
  !*** ./src/components/middle/message/Contact.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _util_phoneNumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/phoneNumber */ "./src/util/phoneNumber.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/PeerColorWrapper */ "./src/components/common/PeerColorWrapper.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Contact.module.scss */ "./src/components/middle/message/Contact.module.scss");












const UNREGISTERED_CONTACT_ID = '0';
const Contact = ({
  contact,
  user,
  phoneCodeList,
  noUserColors
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const {
    openChat,
    openAddContactDialog,
    showNotification,
    openChatWithInfo
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    phoneNumber,
    userId
  } = contact;
  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;
  const canAddContact = isRegistered && user && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getCanAddContact)(user);
  const handleOpenChat = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    openChat({
      id: userId
    });
  });
  const handleAddContact = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    openAddContactDialog({
      userId: user?.id
    });
  });
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    if (user) {
      openChatWithInfo({
        id: userId
      });
    } else {
      (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_4__.copyTextToClipboard)(phoneNumber);
      showNotification({
        message: lang('PhoneCopied')
      });
    }
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_9__["default"], {
    noUserColors: noUserColors,
    peer: user,
    emojiIconClassName: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].emojiIconBackground,
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].infoContainer,
    onClick: handleClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_8__["default"], {
    size: "medium",
    peer: user,
    text: getContactName(contact)
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].info
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].name
  }, user ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFullName)(user) : getContactName(contact)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].phone
  }, (0,_util_phoneNumber__WEBPACK_IMPORTED_MODULE_5__.formatPhoneNumberWithCode)(phoneCodeList, phoneNumber)))), isRegistered && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].divider
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].buttons
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_10__["default"], {
    isText: true,
    color: "translucent",
    ripple: true,
    size: "tiny",
    onClick: handleOpenChat,
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].button
  }, lang('SharedContactMessage')), canAddContact && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_10__["default"], {
    isText: true,
    color: "translucent",
    ripple: true,
    size: "tiny",
    onClick: handleAddContact,
    className: _Contact_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].button
  }, lang('SharedContactAdd')))));
};
function getContactName(contact) {
  if (contact.firstName && contact.lastName) {
    return `${contact.firstName} ${contact.lastName}`;
  }
  if (contact.firstName) {
    return contact.firstName;
  }
  if (contact.lastName) {
    return contact.lastName;
  }
  return '';
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  contact
}) => {
  const {
    countryList: {
      phoneCodes: phoneCodeList
    }
  } = global;
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, contact.userId);
  return {
    user,
    phoneCodeList
  };
})(Contact));

/***/ }),

/***/ "./src/components/middle/message/FactCheck.tsx":
/*!*****************************************************!*\
  !*** ./src/components/middle/message/FactCheck.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_element_useCollapsibleLines__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/element/useCollapsibleLines */ "./src/hooks/element/useCollapsibleLines.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/PeerColorWrapper */ "./src/components/common/PeerColorWrapper.tsx");
/* harmony import */ var _ui_Separator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/Separator */ "./src/components/ui/Separator.tsx");
/* harmony import */ var _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./FactCheck.module.scss */ "./src/components/middle/message/FactCheck.module.scss");










const COLOR = {
  color: 0
};
const MAX_LINES = 4;
const FactCheck = ({
  factCheck,
  isToggleDisabled
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const cutoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    isCollapsed,
    isCollapsible,
    setIsCollapsed
  } = (0,_hooks_element_useCollapsibleLines__WEBPACK_IMPORTED_MODULE_3__["default"])(ref, MAX_LINES, cutoutRef);
  const countryLocalized = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!factCheck.countryCode || !lang.code) return undefined;
    const displayNames = new Intl.DisplayNames([lang.code], {
      type: 'region'
    });
    return displayNames.of(factCheck.countryCode);
  }, [factCheck.countryCode, lang.code]);
  const canExpand = !isToggleDisabled && isCollapsed;
  const handleExpand = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    setIsCollapsed(false);
  });
  const handleToggle = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    setIsCollapsed(prev => !prev);
  });
  if (!factCheck.text) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_7__["default"], {
    peerColor: COLOR,
    className: _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root,
    onClick: canExpand ? handleExpand : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: cutoutRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].cutoutWrapper, isCollapsed && _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].collapsed)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].title
  }, lang('FactCheck')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].content
  }, (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_2__.renderTextWithEntities)({
    text: factCheck.text.text,
    entities: factCheck.text.entities
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Separator__WEBPACK_IMPORTED_MODULE_8__["default"], {
    className: _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].separator
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].footnote
  }, lang('FactCheckFooter', countryLocalized))), isCollapsible && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].collapseIcon, !isToggleDisabled && _FactCheck_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].clickable),
    onClick: !isToggleDisabled ? handleToggle : undefined,
    "aria-hidden": true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: isCollapsed ? 'down' : 'up'
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(FactCheck));

/***/ }),

/***/ "./src/components/middle/message/Game.tsx":
/*!************************************************!*\
  !*** ./src/components/middle/message/Game.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/placeholder/Skeleton */ "./src/components/ui/placeholder/Skeleton.tsx");
/* harmony import */ var _Game_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Game.scss */ "./src/components/middle/message/Game.scss");






const DEFAULT_PREVIEW_DIMENSIONS = {
  width: 480,
  height: 270
};
const Game = ({
  message,
  canAutoLoadMedia
}) => {
  const {
    clickBotInlineButton
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const game = message.content.game;
  const {
    title,
    description
  } = game;
  const photoHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getGamePreviewPhotoHash)(game);
  const videoHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getGamePreviewVideoHash)(game);
  const photoBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_3__["default"])(photoHash, !canAutoLoadMedia);
  const videoBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_3__["default"])(videoHash, !canAutoLoadMedia);
  const handleGameClick = () => {
    clickBotInlineButton({
      chatId: message.chatId,
      messageId: message.id,
      button: message.inlineButtons[0][0]
    });
  };
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "Game"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "preview",
    style: `width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`,
    onClick: handleGameClick
  }, !photoBlobUrl && !videoBlobUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_4__["default"], {
    className: "skeleton preview-content"
  }), photoBlobUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    className: "preview-content",
    src: photoBlobUrl,
    alt: title,
    draggable: false
  }), videoBlobUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("video", {
    className: "preview-content",
    playsInline: true,
    muted: true,
    disablePictureInPicture: true,
    autoPlay: true,
    loop: true,
    src: videoBlobUrl
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "title"
  }, title), !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageText)(message) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "description"
  }, description));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Game));

/***/ }),

/***/ "./src/components/middle/message/Giveaway.tsx":
/*!****************************************************!*\
  !*** ./src/components/middle/message/Giveaway.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_peers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers/peers */ "./src/global/helpers/peers.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_emoji_emoji__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/emoji/emoji */ "./src/util/emoji/emoji.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/helpers/animatedAssets */ "./src/components/common/helpers/animatedAssets.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../common/AnimatedIconFromSticker */ "./src/components/common/AnimatedIconFromSticker.tsx");
/* harmony import */ var _common_AnimatedIconWithPreview__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/AnimatedIconWithPreview */ "./src/components/common/AnimatedIconWithPreview.tsx");
/* harmony import */ var _common_PeerChip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../common/PeerChip */ "./src/components/common/PeerChip.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _ui_Separator__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../ui/Separator */ "./src/components/ui/Separator.tsx");
/* harmony import */ var _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Giveaway.module.scss */ "./src/components/middle/message/Giveaway.module.scss");





















const NBSP = '\u00A0';
const GIFT_STICKER_SIZE = 175;
const RESULT_STICKER_SIZE = 150;
const Giveaway = ({
  chat,
  sender,
  message,
  canPlayAnimatedEmojis,
  giftSticker
}) => {
  const {
    openChat
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const isLoadingInfo = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const [giveawayInfo, setGiveawayInfo] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const {
    giveaway,
    giveawayResults
  } = message.content;
  const isResults = Boolean(giveawayResults);
  const {
    months,
    untilDate,
    prizeDescription,
    stars
  } = giveaway || giveawayResults;
  const isOwn = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isOwnMessage)(message);
  const quantity = isResults ? giveawayResults.winnersCount : giveaway.quantity;
  const hasEnded = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_8__.getServerTime)() > untilDate;
  const countryList = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (isResults) return undefined;
    const translatedNames = new Intl.DisplayNames([lang.code, 'en'].filter(Boolean), {
      type: 'region'
    });
    return giveaway?.countries?.map(countryCode => `${(0,_util_emoji_emoji__WEBPACK_IMPORTED_MODULE_7__.isoToEmoji)(countryCode)}${NBSP}${translatedNames.of(countryCode)}`).join(', ');
  }, [giveaway, isResults, lang.code]);
  const handlePeerClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(channelId => {
    openChat({
      id: channelId
    });
  });
  const handleShowInfoClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(async () => {
    if (isLoadingInfo.current) return;
    isLoadingInfo.current = true;
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_9__.callApi)('fetchGiveawayInfo', {
      peer: chat,
      messageId: message.id
    });
    setGiveawayInfo(result);
    isLoadingInfo.current = false;
  });
  const handleCloseInfo = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    setGiveawayInfo(undefined);
  });
  const giveawayInfoTitle = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!giveawayInfo) return undefined;
    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');
  }, [giveawayInfo, lang]);
  function renderGiveawayDescription(media) {
    const channelIds = media.channelIds;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].section
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("strong", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].title
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('BoostingGiveawayPrizes'), ['simple_markdown'])), prizeDescription && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].description
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity), ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Separator__WEBPACK_IMPORTED_MODULE_19__["default"], null, lang('BoostingGiveawayMsgWithDivider'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].description
    }, message?.content?.giveaway?.stars ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)), ['simple_markdown']), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("br", null), (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('AmongWinners', quantity), ['simple_markdown'])) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown']), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("br", null), (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('ActionGiftPremiumSubtitle', lang('Chat.Giveaway.Info.Months', months)), ['simple_markdown'])))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].section
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("strong", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].title
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].description
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].peers
    }, channelIds.map(peerId => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerChip__WEBPACK_IMPORTED_MODULE_16__["default"], {
      peerId: peerId,
      forceShowSelf: true,
      withPeerColors: !isOwn,
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].peer,
      clickArg: peerId,
      onClick: handlePeerClick
    }))), countryList && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('Chat.Giveaway.Message.CountriesFrom', countryList)))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].section
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("strong", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].title
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('BoostingWinnersDate'), ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].description
    }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatDateTimeToString)(untilDate * 1000, lang.code, true))));
  }
  function renderGiveawayResultsDescription(media) {
    const winnerIds = media.winnerIds;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].section
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("strong", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].title
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].description
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("strong", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].title
    }, lang('lng_prizes_results_winners')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].peers
    }, winnerIds.map(peerId => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerChip__WEBPACK_IMPORTED_MODULE_16__["default"], {
      peerId: peerId,
      forceShowSelf: true,
      withPeerColors: !isOwn,
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].peer,
      clickArg: peerId,
      onClick: handlePeerClick
    })))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].section
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].description
    }, lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks'))));
  }
  function renderGiveawayInfo() {
    if (!sender || !giveawayInfo) return undefined;
    const isResultsInfo = giveawayInfo.type === 'results';
    const chatTitle = (0,_global_helpers_peers__WEBPACK_IMPORTED_MODULE_3__.isApiPeerChat)(sender) ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getChatTitle)(lang, sender) : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFullName)(sender);
    const endDate = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatDateAtTime)(lang, untilDate * 1000);
    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;
    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);
    const isSeveral = otherChannelsCount > 0;
    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';
    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');
    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);
    const additionalPrizes = prizeDescription ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity) : undefined;
    let secondKey = '';
    if (isResultsInfo) {
      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';
    } else {
      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';
    }
    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);
    if (isResultsInfo && giveawayInfo.activatedCount) {
      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;
    }
    let result = '';
    if (isResultsInfo) {
      if (giveawayInfo.isRefunded) {
        result = lang('BoostingGiveawayCanceledByPayment');
      } else {
        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');
      }
    }
    let lastParagraph = '';
    if (isResultsInfo) {
      // Nothing
    } else if (giveawayInfo.disallowedCountry) {
      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');
    } else if (giveawayInfo.adminDisallowedChatId) {
      // Since rerenders are not expected, we can use the global state directly
      const chatsById = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().chats.byId;
      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];
      const disallowedChatTitle = disallowedChat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getChatTitle)(lang, disallowedChat);
      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);
    } else if (giveawayInfo.joinedTooEarlyDate) {
      const joinedTooEarlyDate = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatDateAtTime)(lang, giveawayInfo.joinedTooEarlyDate * 1000);
      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);
    } else if (giveawayInfo.isParticipating) {
      lastParagraph = isSeveral ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount]) : lang('Chat.Giveaway.Info.Participating', chatTitle);
    } else {
      lastParagraph = isSeveral ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate]) : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, result && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].result
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(result, ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(firstParagraph, ['simple_markdown'])), additionalPrizes && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(additionalPrizes, ['simple_markdown'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(secondParagraph, ['simple_markdown'])), lastParagraph && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lastParagraph, ['simple_markdown'])));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].sticker, isResults && _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].resultSticker)
  }, isResults ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIconWithPreview__WEBPACK_IMPORTED_MODULE_15__["default"], {
    size: RESULT_STICKER_SIZE,
    tgsUrl: _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_10__.LOCAL_TGS_URLS.PartyPopper,
    nonInteractive: true,
    noLoop: true
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_14__["default"], {
    sticker: giftSticker,
    play: canPlayAnimatedEmojis && hasEnded,
    noLoop: true,
    nonInteractive: true,
    size: GIFT_STICKER_SIZE
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].count
  }, `x${quantity}`)), isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_17__["default"], {
    className: _Giveaway_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].button,
    color: "adaptive",
    size: "smaller",
    onClick: handleShowInfoClick
  }, lang('BoostingHowItWork')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_18__["default"], {
    isOpen: Boolean(giveawayInfo),
    isOnlyConfirm: true,
    title: giveawayInfoTitle,
    confirmHandler: handleCloseInfo,
    onClose: handleCloseInfo
  }, renderGiveawayInfo()));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  message
}) => {
  const {
    giveaway
  } = message.content;
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, message.chatId);
  const sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, giveaway?.channelIds[0]) || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectForwardedSender)(global, message) || chat;
  const sticker = giveaway && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectGiftStickerForDuration)(global, giveaway.months);
  return {
    chat,
    sender,
    giftSticker: sticker,
    canPlayAnimatedEmojis: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanPlayAnimatedEmojis)(global)
  };
})(Giveaway)));

/***/ }),

/***/ "./src/components/middle/message/InlineButtons.tsx":
/*!*********************************************************!*\
  !*** ./src/components/middle/message/InlineButtons.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _composer_helpers_renderKeyboardButtonText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../composer/helpers/renderKeyboardButtonText */ "./src/components/middle/composer/helpers/renderKeyboardButtonText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _InlineButtons_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./InlineButtons.scss */ "./src/components/middle/message/InlineButtons.scss");







const InlineButtons = ({
  message,
  onClick
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const renderIcon = button => {
    const {
      type
    } = button;
    switch (type) {
      case 'url':
        {
          if (!_config__WEBPACK_IMPORTED_MODULE_1__.RE_TME_LINK.test(button.url)) {
            return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
              className: "corner-icon",
              name: "arrow-right"
            });
          }
          break;
        }
      case 'urlAuth':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
          className: "corner-icon",
          name: "arrow-right"
        });
      case 'buy':
      case 'receipt':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
          className: "corner-icon",
          name: "card"
        });
      case 'switchBotInline':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
          className: "corner-icon",
          name: "share-filled"
        });
      case 'webView':
      case 'simpleWebView':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
          className: "corner-icon",
          name: "webapp"
        });
      case 'copy':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
          className: "corner-icon",
          name: "copy"
        });
    }
    return undefined;
  };
  const buttonTexts = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const texts = [];
    message.inlineButtons.forEach(row => {
      texts.push(row.map(button => (0,_composer_helpers_renderKeyboardButtonText__WEBPACK_IMPORTED_MODULE_2__["default"])(lang, button)));
    });
    return texts;
  }, [lang, message.inlineButtons]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "InlineButtons"
  }, message.inlineButtons.map((row, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "row"
  }, row.map((button, j) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_5__["default"], {
    size: "tiny",
    ripple: true,
    disabled: button.type === 'unsupported'
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => onClick({
      chatId: message.chatId,
      messageId: message.id,
      button
    })
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "inline-button-text"
  }, buttonTexts[i][j]), renderIcon(button))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(InlineButtons));

/***/ }),

/***/ "./src/components/middle/message/Invoice.tsx":
/*!***************************************************!*\
  !*** ./src/components/middle/message/Invoice.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_formatCurrency__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/formatCurrency */ "./src/util/formatCurrency.tsx");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _helpers_getCustomAppendixBg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/getCustomAppendixBg */ "./src/components/middle/message/helpers/getCustomAppendixBg.ts");
/* harmony import */ var _hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLayoutEffectWithPrevDeps */ "./src/hooks/useLayoutEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hooks/useBlurredMediaThumbRef */ "./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts");
/* harmony import */ var _ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/placeholder/Skeleton */ "./src/components/ui/placeholder/Skeleton.tsx");
/* harmony import */ var _Invoice_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Invoice.scss */ "./src/components/middle/message/Invoice.scss");














const Invoice = ({
  message,
  shouldAffectAppendix,
  isInSelectMode,
  isSelected,
  theme,
  forcedWidth
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const invoice = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageInvoice)(message);
  const {
    title,
    description,
    amount,
    currency,
    isTest,
    photo
  } = invoice;
  const photoUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_9__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getWebDocumentHash)(photo));
  const withBlurredBackground = Boolean(forcedWidth);
  const blurredBackgroundRef = (0,_hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_11__["default"])(photoUrl, !withBlurredBackground);
  const messageId = message.id;
  (0,_hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_8__["default"])(([prevShouldAffectAppendix]) => {
    if (!shouldAffectAppendix) {
      if (prevShouldAffectAppendix) {
        ref.current.closest(_config__WEBPACK_IMPORTED_MODULE_1__.MESSAGE_CONTENT_SELECTOR).removeAttribute(_config__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_APPENDIX_ATTRIBUTE);
      }
      return;
    }
    if (photoUrl) {
      const contentEl = ref.current.closest(_config__WEBPACK_IMPORTED_MODULE_1__.MESSAGE_CONTENT_SELECTOR);
      (0,_helpers_getCustomAppendixBg__WEBPACK_IMPORTED_MODULE_7__["default"])(photoUrl, false, messageId, isSelected, theme).then(appendixBg => {
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
          contentEl.style.setProperty('--appendix-bg', appendixBg);
          contentEl.setAttribute(_config__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_APPENDIX_ATTRIBUTE, '');
        });
      });
    }
  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);
  const width = forcedWidth || photo?.dimensions?.width;
  const style = (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_4__["default"])(photo?.dimensions && `width: ${width}px`, photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`, Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: "Invoice"
  }, title && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "title"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(title)), description && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(description, ['emoji', 'br'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: `description ${photo ? 'has-image' : ''}`
  }, Boolean(photo) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "invoice-image-container"
  }, withBlurredBackground && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: blurredBackgroundRef,
    className: "thumbnail blurred-bg"
  }), photoUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    className: "invoice-image",
    src: photoUrl,
    alt: "",
    style: style,
    crossOrigin: "anonymous",
    draggable: false
  }), !photoUrl && photo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_12__["default"], {
    width: width,
    height: photo.dimensions?.height,
    forceAspectRatio: true
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "description-text"
  }, (0,_util_formatCurrency__WEBPACK_IMPORTED_MODULE_5__.formatCurrency)(amount, currency, lang.code, {
    iconClassName: 'invoice-currency-icon'
  }), isTest && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "test-invoice"
  }, lang('PaymentTestInvoice')))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Invoice));

/***/ }),

/***/ "./src/components/middle/message/InvoiceMediaPreview.tsx":
/*!***************************************************************!*\
  !*** ./src/components/middle/message/InvoiceMediaPreview.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_formatCurrency__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/formatCurrency */ "./src/util/formatCurrency.tsx");
/* harmony import */ var _hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/schedulers/useInterval */ "./src/hooks/schedulers/useInterval.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/MediaSpoiler */ "./src/components/common/MediaSpoiler.tsx");
/* harmony import */ var _InvoiceMediaPreview_module_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./InvoiceMediaPreview.module.scss */ "./src/components/middle/message/InvoiceMediaPreview.module.scss");












const POLLING_INTERVAL = 30000;
const InvoiceMediaPreview = ({
  message,
  isConnected
}) => {
  const {
    openInvoice,
    loadExtendedMedia
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const invoice = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageInvoice)(message);
  const {
    chatId,
    id
  } = message;
  const refreshExtendedMedia = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    loadExtendedMedia({
      chatId,
      ids: [id]
    });
  });
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_6__["default"])(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);
  const {
    amount,
    currency,
    extendedMedia
  } = invoice;
  const {
    width,
    height,
    thumbnail,
    duration
  } = extendedMedia;
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    openInvoice({
      type: 'message',
      chatId,
      messageId: id,
      isExtendedMedia: true
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_InvoiceMediaPreview_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].root, 'media-inner'),
    onClick: handleClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_10__["default"], {
    thumbDataUri: thumbnail?.dataUri,
    width: width,
    height: height,
    isVisible: true,
    className: _InvoiceMediaPreview_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].spoiler
  }), Boolean(duration) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _InvoiceMediaPreview_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].duration
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_4__.formatMediaDuration)(duration)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _InvoiceMediaPreview_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].buy
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_9__["default"], {
    name: "lock",
    className: _InvoiceMediaPreview_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].lock
  }), lang('Checkout.PayPrice', (0,_util_formatCurrency__WEBPACK_IMPORTED_MODULE_5__.formatCurrencyAsString)(amount, currency))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(InvoiceMediaPreview));

/***/ }),

/***/ "./src/components/middle/message/Location.tsx":
/*!****************************************************!*\
  !*** ./src/components/middle/message/Location.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_map__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/map */ "./src/util/map.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/schedulers/useInterval */ "./src/hooks/schedulers/useInterval.ts");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/window/useDevicePixelRatio */ "./src/hooks/window/useDevicePixelRatio.ts");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/placeholder/Skeleton */ "./src/components/ui/placeholder/Skeleton.tsx");
/* harmony import */ var _Location_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Location.scss */ "./src/components/middle/message/Location.scss");
/* harmony import */ var _assets_map_pin_svg__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../assets/map-pin.svg */ "./src/assets/map-pin.svg");




















const TIMER_RADIUS = 12;
const TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;
const MOVE_THRESHOLD = 0.0001; // ~11m
const DEFAULT_MAP_CONFIG = {
  width: 400,
  height: 300,
  zoom: 16
};
const Location = ({
  message,
  peer
}) => {
  const {
    openMapModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const countdownRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const location = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageLocation)(message);
  const {
    mediaType,
    geo
  } = location;
  const serverTime = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_7__.getServerTime)();
  const isExpired = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isGeoLiveExpired)(message);
  const secondsBeforeEnd = mediaType === 'geoLive' && !isExpired ? message.date + location.period - serverTime : undefined;
  const [point, setPoint] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(geo);
  const shouldRenderText = mediaType === 'venue' || mediaType === 'geoLive' && !isExpired;
  const {
    width,
    height,
    zoom
  } = DEFAULT_MAP_CONFIG;
  const dpr = (0,_hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_15__["default"])();
  const mediaHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.buildStaticMapHash)(point, width, height, zoom, dpr);
  const mediaBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_12__["default"])(mediaHash);
  const prevMediaBlobUrl = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_14__["default"])(mediaBlobUrl, true);
  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;
  const accuracyRadiusPx = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (mediaType !== 'geoLive' || !point.accuracyRadius) {
      return 0;
    }
    const {
      lat,
      accuracyRadius
    } = point;
    return accuracyRadius / (0,_util_map__WEBPACK_IMPORTED_MODULE_6__.getMetersPerPixel)(lat, zoom);
  }, [mediaType, point, zoom]);
  const handleClick = () => {
    openMapModal({
      geoPoint: point,
      zoom
    });
  };
  const updateCountdown = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(countdownEl => {
    if (mediaType !== 'geoLive') return;
    const svgEl = countdownEl.lastElementChild;
    const timerEl = countdownEl.firstElementChild;
    const timeLeft = message.date + location.period - (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_7__.getServerTime)();
    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;
    const text = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_5__.formatCountdownShort)(lang, timeLeft * 1000);
    timerEl.textContent = text;
    svgEl.firstElementChild.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (countdownRef.current) {
      updateCountdown(countdownRef.current);
    }
  }, [updateCountdown]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    // Prevent map refetching for slight location changes
    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {
      if (point.accuracyRadius !== geo.accuracyRadius) {
        setPoint({
          ...point,
          accuracyRadius: geo.accuracyRadius
        });
      }
      return;
    }
    setPoint(geo);
  }, [geo, point]);
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    forceUpdate();
  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
      const countdownEl = countdownRef.current;
      if (countdownEl) {
        updateCountdown(countdownEl);
      }
    });
  }, secondsBeforeEnd ? 1000 : undefined);
  function renderInfo() {
    if (!shouldRenderText) return undefined;
    if (mediaType === 'venue') {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "location-info"
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "location-info-title"
      }, location.title), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "location-info-subtitle"
      }, location.address));
    }
    if (mediaType === 'geoLive') {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "location-info"
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "location-info-title"
      }, lang('AttachLiveLocation')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "location-info-subtitle"
      }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_5__.formatLastUpdated)(lang, serverTime, message.editDate)), !isExpired && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "geo-countdown",
        ref: countdownRef
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "geo-countdown-text"
      }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
        width: "32px",
        height: "32px"
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("circle", {
        cx: "16",
        cy: "16",
        r: TIMER_RADIUS,
        className: "geo-countdown-progress",
        transform: "rotate(-90, 16, 16)",
        "stroke-dasharray": TIMER_CIRCUMFERENCE,
        "stroke-dashoffset": "0"
      }))));
    }
    return undefined;
  }
  function renderMap() {
    if (!mapBlobUrl) return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_17__["default"], {
      width: width,
      height: height
    });
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
      className: "full-media map",
      src: mapBlobUrl,
      alt: "Location on a map",
      draggable: false,
      style: `width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`
    });
  }
  function renderPin() {
    const pinClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('pin', mediaType, isExpired && 'expired');
    if (mediaType === 'geoLive') {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: pinClassName
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PinSvg, null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_16__["default"], {
        peer: peer,
        className: "location-avatar"
      }), location.heading !== undefined && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "direction",
        style: `--direction: ${location.heading}deg`
      }));
    }
    if (mediaType === 'venue') {
      const color = (0,_util_map__WEBPACK_IMPORTED_MODULE_6__.getVenueColor)(location.venueType);
      const iconSrc = (0,_util_map__WEBPACK_IMPORTED_MODULE_6__.getVenueIconUrl)(location.venueType);
      if (iconSrc) {
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
          className: pinClassName,
          style: `--pin-color: ${color}`
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PinSvg, null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
          src: iconSrc,
          draggable: false,
          className: "venue-icon",
          alt: ""
        }));
      }
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
      className: pinClassName,
      draggable: false,
      src: _assets_map_pin_svg__WEBPACK_IMPORTED_MODULE_19__,
      alt: ""
    });
  }
  function renderOverlay() {
    if (!mapBlobUrl) return undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, Boolean(accuracyRadiusPx) && !isExpired && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "location-accuracy",
      style: `width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`
    }), renderPin());
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: "Location media-inner interactive",
    onClick: handleClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "map-wrapper"
  }, renderMap(), renderOverlay()), renderInfo());
};
function PinSvg() {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: "round-pin",
    style: "enable-background:new 0 0 64 64",
    viewBox: "0 0 64 64"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("circle", {
    cx: "32",
    cy: "32",
    r: "24.5"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z"
  }));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Location));

/***/ }),

/***/ "./src/components/middle/message/Message.tsx":
/*!***************************************************!*\
  !*** ./src/components/middle/message/Message.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_replies__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../global/helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _util_visibility_isElementInViewport__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../util/visibility/isElementInViewport */ "./src/util/visibility/isElementInViewport.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _common_helpers_peerColor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../common/helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../composer/helpers/customEmoji */ "./src/components/middle/composer/helpers/customEmoji.ts");
/* harmony import */ var _helpers_buildContentClassName__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./helpers/buildContentClassName */ "./src/components/middle/message/helpers/buildContentClassName.ts");
/* harmony import */ var _helpers_calculateAlbumLayout__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./helpers/calculateAlbumLayout */ "./src/components/middle/message/helpers/calculateAlbumLayout.ts");
/* harmony import */ var _helpers_getSingularPaidMedia__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./helpers/getSingularPaidMedia */ "./src/components/middle/message/helpers/getSingularPaidMedia.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/middle/message/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../hooks/useEnsureMessage */ "./src/hooks/useEnsureMessage.ts");
/* harmony import */ var _hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../hooks/useEnsureStory */ "./src/hooks/useEnsureStory.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useResizeMessageObserver__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../../hooks/useResizeMessageObserver */ "./src/hooks/useResizeMessageObserver.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useTextLanguage__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../../hooks/useTextLanguage */ "./src/hooks/useTextLanguage.ts");
/* harmony import */ var _hooks_useDetectChatLanguage__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./hooks/useDetectChatLanguage */ "./src/components/middle/message/hooks/useDetectChatLanguage.ts");
/* harmony import */ var _hooks_useFocusMessage__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./hooks/useFocusMessage */ "./src/components/middle/message/hooks/useFocusMessage.ts");
/* harmony import */ var _hooks_useInnerHandlers__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./hooks/useInnerHandlers */ "./src/components/middle/message/hooks/useInnerHandlers.ts");
/* harmony import */ var _hooks_useMessageTranslation__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./hooks/useMessageTranslation */ "./src/components/middle/message/hooks/useMessageTranslation.ts");
/* harmony import */ var _hooks_useOuterHandlers__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./hooks/useOuterHandlers */ "./src/components/middle/message/hooks/useOuterHandlers.ts");
/* harmony import */ var _common_Audio__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../common/Audio */ "./src/components/common/Audio.tsx");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _common_CustomEmoji__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../../common/CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _common_Document__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../../common/Document */ "./src/components/common/Document.tsx");
/* harmony import */ var _common_DotAnimation__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../../common/DotAnimation */ "./src/components/common/DotAnimation.tsx");
/* harmony import */ var _common_embedded_EmbeddedMessage__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../../common/embedded/EmbeddedMessage */ "./src/components/common/embedded/EmbeddedMessage.tsx");
/* harmony import */ var _common_embedded_EmbeddedStory__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../../common/embedded/EmbeddedStory */ "./src/components/common/embedded/EmbeddedStory.tsx");
/* harmony import */ var _common_FakeIcon__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../../common/FakeIcon */ "./src/components/common/FakeIcon.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../../common/icons/StarIcon */ "./src/components/common/icons/StarIcon.tsx");
/* harmony import */ var _common_MessageText__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../../common/MessageText */ "./src/components/common/MessageText.tsx");
/* harmony import */ var _common_reactions_ReactionStaticEmoji__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../../common/reactions/ReactionStaticEmoji */ "./src/components/common/reactions/ReactionStaticEmoji.tsx");
/* harmony import */ var _common_TopicChip__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../../common/TopicChip */ "./src/components/common/TopicChip.tsx");
/* harmony import */ var _main_visualEffects_SnapEffectContainer__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../../main/visualEffects/SnapEffectContainer */ "./src/components/main/visualEffects/SnapEffectContainer.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _Album__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./Album */ "./src/components/middle/message/Album.tsx");
/* harmony import */ var _AnimatedCustomEmoji__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./AnimatedCustomEmoji */ "./src/components/middle/message/AnimatedCustomEmoji.tsx");
/* harmony import */ var _AnimatedEmoji__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./AnimatedEmoji */ "./src/components/middle/message/AnimatedEmoji.tsx");
/* harmony import */ var _CommentButton__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./CommentButton */ "./src/components/middle/message/CommentButton.tsx");
/* harmony import */ var _Contact__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./Contact */ "./src/components/middle/message/Contact.tsx");
/* harmony import */ var _ContextMenuContainer_async__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./ContextMenuContainer.async */ "./src/components/middle/message/ContextMenuContainer.async.tsx");
/* harmony import */ var _FactCheck__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./FactCheck */ "./src/components/middle/message/FactCheck.tsx");
/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./Game */ "./src/components/middle/message/Game.tsx");
/* harmony import */ var _Giveaway__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./Giveaway */ "./src/components/middle/message/Giveaway.tsx");
/* harmony import */ var _InlineButtons__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./InlineButtons */ "./src/components/middle/message/InlineButtons.tsx");
/* harmony import */ var _Invoice__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./Invoice */ "./src/components/middle/message/Invoice.tsx");
/* harmony import */ var _InvoiceMediaPreview__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./InvoiceMediaPreview */ "./src/components/middle/message/InvoiceMediaPreview.tsx");
/* harmony import */ var _Location__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./Location */ "./src/components/middle/message/Location.tsx");
/* harmony import */ var _MessageAppendix__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./MessageAppendix */ "./src/components/middle/message/MessageAppendix.tsx");
/* harmony import */ var _MessageEffect__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./MessageEffect */ "./src/components/middle/message/MessageEffect.tsx");
/* harmony import */ var _MessageMeta__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./MessageMeta */ "./src/components/middle/message/MessageMeta.tsx");
/* harmony import */ var _MessagePhoneCall__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./MessagePhoneCall */ "./src/components/middle/message/MessagePhoneCall.tsx");
/* harmony import */ var _PaidMediaOverlay__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./PaidMediaOverlay */ "./src/components/middle/message/PaidMediaOverlay.tsx");
/* harmony import */ var _Photo__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./Photo */ "./src/components/middle/message/Photo.tsx");
/* harmony import */ var _Poll__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./Poll */ "./src/components/middle/message/Poll.tsx");
/* harmony import */ var _reactions_Reactions__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./reactions/Reactions */ "./src/components/middle/message/reactions/Reactions.tsx");
/* harmony import */ var _RoundVideo__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./RoundVideo */ "./src/components/middle/message/RoundVideo.tsx");
/* harmony import */ var _Sticker__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./Sticker */ "./src/components/middle/message/Sticker.tsx");
/* harmony import */ var _Story__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./Story */ "./src/components/middle/message/Story.tsx");
/* harmony import */ var _StoryMention__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./StoryMention */ "./src/components/middle/message/StoryMention.tsx");
/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./Video */ "./src/components/middle/message/Video.tsx");
/* harmony import */ var _WebPage__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./WebPage */ "./src/components/middle/message/WebPage.tsx");
/* harmony import */ var _Message_scss__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./Message.scss */ "./src/components/middle/message/Message.scss");

















































































const NBSP = '\u00A0';
const APPEARANCE_DELAY = 10;
const NO_MEDIA_CORNERS_THRESHOLD = 18;
const QUICK_REACTION_SIZE = 1.75 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_13__.REM;
const EXTRA_SPACE_FOR_REACTIONS = 2.25 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_13__.REM;
const Message = ({
  message,
  observeIntersectionForBottom,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  album,
  noAvatars,
  withAvatar,
  withSenderName,
  noComments,
  noReplies,
  appearanceOrder,
  isJustAdded,
  isFirstInGroup,
  isPremium,
  isLastInGroup,
  isFirstInDocumentGroup,
  isLastInDocumentGroup,
  isTranscribing,
  transcribedText,
  isLastInList,
  theme,
  forceSenderName,
  sender,
  canShowSender,
  originSender,
  botSender,
  isThreadTop,
  shouldHideReply,
  replyMessage,
  replyMessageSender,
  replyMessageForwardSender,
  replyMessageChat,
  replyStory,
  isReplyPrivate,
  storySender,
  outgoingStatus,
  uploadProgress,
  isInDocumentGroup,
  isLoadingComments,
  isProtected,
  isChatProtected,
  isFocused,
  focusDirection,
  focusedQuote,
  noFocusHighlight,
  scrollTargetPosition,
  isResizingContainer,
  isForwarding,
  isChatWithSelf,
  isRepliesChat,
  isAnonymousForwards,
  isChannel,
  isGroup,
  canReply,
  highlight,
  animatedEmoji,
  animatedCustomEmoji,
  hasActiveReactions,
  hasLinkedChat,
  isInSelectMode,
  isSelected,
  isGroupSelected,
  threadId,
  reactionMessage,
  availableReactions,
  defaultReaction,
  activeEmojiInteractions,
  messageListType,
  isPinnedList,
  isPinned,
  isDownloading,
  canAutoLoadMedia,
  canAutoPlayMedia,
  shouldLoopStickers,
  autoLoadFileMaxSizeMb,
  repliesThreadInfo,
  hasUnreadReaction,
  memoFirstUnreadIdRef,
  senderAdminMember,
  messageTopic,
  hasTopicChip,
  chatTranslations,
  areTranslationsEnabled,
  shouldDetectChatLanguage,
  requestedTranslationLanguage,
  requestedChatTranslationLanguage,
  withAnimatedEffects,
  webPageStory,
  isConnected,
  getIsMessageListReady,
  shouldWarnAboutSvg,
  senderBoosts,
  tags,
  canTranscribeVoice,
  viaBusinessBot,
  effect,
  poll,
  onIntersectPinnedMessage
}) => {
  const {
    toggleMessageSelection,
    clickBotInlineButton,
    disableContextMenuHint,
    animateUnreadReaction,
    focusLastMessage,
    markMentionsRead
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const bottomMarkerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const quickReactionRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_28__["default"])();
  const [isTranscriptionHidden, setTranscriptionHidden] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [shouldPlayEffect, requestEffect, hideEffect] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_25__["default"])();
  const {
    isMobile,
    isTouchScreen
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_21__["default"])();
  (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_26__.useOnIntersect)(bottomMarkerRef, observeIntersectionForBottom);
  const {
    isContextMenuOpen,
    contextMenuAnchor,
    contextMenuTarget,
    handleBeforeContextMenu,
    handleContextMenu: onContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_22__["default"])(ref, isTouchScreen && isInSelectMode, !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.IS_ELECTRON, _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.IS_ANDROID, getIsMessageListReady);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isContextMenuOpen) {
      disableContextMenuHint();
    }
  }, [isContextMenuOpen, disableContextMenuHint]);
  const noAppearanceAnimation = appearanceOrder <= 0;
  const [isShown, markShown] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_25__["default"])(noAppearanceAnimation);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (noAppearanceAnimation) {
      return;
    }
    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);
  }, [appearanceOrder, markShown, noAppearanceAnimation]);
  (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_31__["default"])({
    ref,
    isOpen: isShown || isJustAdded,
    noMountTransition: noAppearanceAnimation && !isJustAdded,
    className: false
  });
  const {
    id: messageId,
    chatId,
    forwardInfo,
    viaBotId,
    isTranscriptionError,
    factCheck
  } = message;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useUnmountCleanup)(() => {
    if (message.isPinned) {
      const id = album ? album.mainMessage.id : messageId;
      onIntersectPinnedMessage({
        viewportPinnedIdsToRemove: [id]
      });
    }
  });
  const isLocal = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isMessageLocal)(message);
  const isOwn = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isOwnMessage)(message);
  const isScheduled = messageListType === 'scheduled' || message.isScheduled;
  const hasMessageReply = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isReplyToMessage)(message) && !shouldHideReply;
  const {
    paidMedia
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageContent)(message);
  const {
    photo: paidMediaPhoto,
    video: paidMediaVideo
  } = (0,_helpers_getSingularPaidMedia__WEBPACK_IMPORTED_MODULE_19__["default"])(paidMedia);
  const {
    photo = paidMediaPhoto,
    video = paidMediaVideo,
    audio,
    voice,
    document,
    sticker,
    contact,
    webPage,
    invoice,
    location,
    action,
    game,
    storyData,
    giveaway,
    giveawayResults
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageContent)(message);
  const messageReplyInfo = (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_6__.getMessageReplyInfo)(message);
  const storyReplyInfo = (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_6__.getStoryReplyInfo)(message);
  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));
  const hasStoryReply = Boolean(storyReplyInfo);
  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';
  const isCustomShape = !withVoiceTranscription && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageCustomShape)(message);
  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);
  const hasReactions = reactionMessage?.reactions && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.areReactionsEmpty)(reactionMessage.reactions);
  const asForwarded = forwardInfo && (!isChatWithSelf || isScheduled) && !isRepliesChat && !forwardInfo.isLinkedChannelPost && !isAnonymousForwards && !botSender || Boolean(storyData && !storyData.isMention);
  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;
  const isStoryMention = storyData?.isMention;
  const isRoundVideo = video?.mediaType === 'video' && video.isRound;
  const isAlbum = Boolean(album) && (album.isPaidMedia && paidMedia.extendedMedia.length > 1 || album.messages.length > 1) && !album.messages.some(msg => Object.keys(msg.content).length === 0);
  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;
  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;
  const isContextMenuShown = contextMenuAnchor !== undefined;
  const canShowActionButton = !(isContextMenuShown || isInSelectMode || isForwarding) && !isInDocumentGroupNotLast && !isStoryMention && !((sticker || hasAnimatedEmoji) && asForwarded);
  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;
  const canFocus = Boolean(isPinnedList || forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards) && forwardInfo.fromMessageId);
  const hasFactCheck = Boolean(factCheck?.text);
  const hasForwardedCustomShape = asForwarded && isCustomShape;
  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;
  const selectMessage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_27__["default"])((e, groupedId) => {
    toggleMessageSelection({
      messageId,
      groupedId,
      ...(e?.shiftKey && {
        withShift: true
      }),
      ...(isAlbum && {
        childMessageIds: album.messages.map(({
          id
        }) => id)
      })
    });
  });
  const messageSender = canShowSender ? sender : undefined;
  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);
  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;
  const messageColorPeer = asForwarded ? originSender : sender;
  const noUserColors = isOwn && !isCustomShape;
  const senderPeer = forwardInfo || storyData ? originSender : messageSender;
  const hasTtl = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.hasMessageTtl)(message);
  const {
    handleMouseDown,
    handleClick,
    handleContextMenu,
    handleDoubleClick,
    handleContentDoubleClick,
    handleMouseMove,
    handleSendQuickReaction,
    handleMouseLeave,
    isSwiped,
    isQuickReactionVisible,
    handleDocumentGroupMouseEnter
  } = (0,_hooks_useOuterHandlers__WEBPACK_IMPORTED_MODULE_37__["default"])(selectMessage, ref, messageId, Boolean(isInSelectMode), Boolean(canReply), Boolean(isProtected), onContextMenu, handleBeforeContextMenu, chatId, isContextMenuShown, quickReactionRef, isInDocumentGroupNotLast, getIsMessageListReady);
  const {
    handleSenderClick,
    handleViaBotClick,
    handleReplyClick,
    handleMediaClick,
    handleAudioPlay,
    handleAlbumMediaClick,
    handlePhotoMediaClick,
    handleVideoMediaClick,
    handleMetaClick,
    handleTranslationClick,
    handleOpenThread,
    handleReadMedia,
    handleCancelUpload,
    handleVoteSend,
    handleGroupForward,
    handleForward,
    handleFocus,
    handleFocusForwarded,
    handleDocumentGroupSelectAll,
    handleTopicChipClick,
    handleStoryClick
  } = (0,_hooks_useInnerHandlers__WEBPACK_IMPORTED_MODULE_35__["default"])({
    lang,
    selectMessage,
    message,
    chatId,
    threadId,
    isInDocumentGroup,
    asForwarded,
    isScheduled,
    album,
    avatarPeer,
    senderPeer,
    botSender,
    messageTopic,
    isTranslatingChat: Boolean(requestedChatTranslationLanguage),
    story: replyStory && 'content' in replyStory ? replyStory : undefined,
    isReplyPrivate,
    isRepliesChat,
    isSavedMessages: isChatWithSelf
  });
  const handleEffectClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_27__["default"])(e => {
    e.stopPropagation();
    requestEffect();
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isLastInList) {
      return;
    }
    if (withVoiceTranscription && transcribedText) {
      focusLastMessage();
    }
  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const element = ref.current;
    const isPartialAlbumDelete = message.isInAlbum && album?.messages.some(msg => !msg.isDeleting);
    if (message.isDeleting && element && !isPartialAlbumDelete) {
      if ((0,_main_visualEffects_SnapEffectContainer__WEBPACK_IMPORTED_MODULE_51__.animateSnap)(element)) {
        setIsPlayingSnapAnimation(true);
      } else {
        setIsPlayingDeleteAnimation(true);
      }
    }
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Only start animation on `isDeleting` change
  }, [message.isDeleting]);
  const textMessage = album?.hasMultipleCaptions ? undefined : album?.captionMessage || message;
  const hasTextContent = textMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.hasMessageText)(textMessage);
  const hasText = hasTextContent || hasFactCheck;
  const containerClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('Message message-list-item', isFirstInGroup && 'first-in-group', isProtected && !hasTextContent ? 'is-protected' : 'allow-selection', isLastInGroup && 'last-in-group', isFirstInDocumentGroup && 'first-in-document-group', isLastInDocumentGroup && 'last-in-document-group', isLastInList && 'last-in-list', isOwn && 'own', Boolean(message.viewsCount) && 'has-views', message.isEdited && 'was-edited', hasMessageReply && 'has-reply', isContextMenuOpen && 'has-menu-open', isFocused && !noFocusHighlight && 'focused', isForwarding && 'is-forwarding', isPlayingDeleteAnimation && 'is-deleting', isPlayingSnapAnimation && 'is-dissolving', isInDocumentGroup && 'is-in-document-group', isAlbum && 'is-album', message.hasUnreadMention && 'has-unread-mention', isSelected && 'is-selected', isInSelectMode && 'is-in-selection-mode', isThreadTop && !withAvatar && 'is-thread-top', Boolean(message.inlineButtons) && 'has-inline-buttons', isSwiped && 'is-swiped', isJustAdded && 'is-just-added', (hasActiveReactions || shouldPlayEffect) && 'has-active-effect', isStoryMention && 'is-story-mention', !canShowActionButton && 'no-action-button');
  const text = textMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageContent)(textMessage).text;
  const isInvertedMedia = Boolean(message.isInvertedMedia);
  const {
    replyToMsgId,
    replyToPeerId,
    isQuote
  } = messageReplyInfo || {};
  const {
    peerId: storyReplyPeerId,
    storyId: storyReplyId
  } = storyReplyInfo || {};
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if ((sticker?.hasEffect || effect) && (memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current || isLocal)) {
      requestEffect();
    }
  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);
  const detectedLanguage = (0,_hooks_useTextLanguage__WEBPACK_IMPORTED_MODULE_32__["default"])(text?.text, !(areTranslationsEnabled || shouldDetectChatLanguage), getIsMessageListReady);
  (0,_hooks_useDetectChatLanguage__WEBPACK_IMPORTED_MODULE_33__["default"])(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);
  const shouldTranslate = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isMessageTranslatable)(message, !requestedChatTranslationLanguage);
  const {
    isPending: isTranslationPending,
    translatedText
  } = (0,_hooks_useMessageTranslation__WEBPACK_IMPORTED_MODULE_36__["default"])(chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage);
  // Used to display previous result while new one is loading
  const previousTranslatedText = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_29__["default"])(translatedText, Boolean(shouldTranslate));
  const currentTranslatedText = translatedText || previousTranslatedText;
  const {
    phoneCall
  } = action || {};
  const isMediaWithCommentButton = (repliesThreadInfo || hasLinkedChat && isChannel && isLocal) && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;
  const withCommentButton = repliesThreadInfo?.isCommentsInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;
  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;
  const hasOutsideReactions = !withVoiceTranscription && hasReactions && (isCustomShape || (photo || video || storyData || location?.mediaType === 'geo') && !hasText);
  const contentClassName = (0,_helpers_buildContentClassName__WEBPACK_IMPORTED_MODULE_17__.buildContentClassName)(message, album, {
    poll,
    hasSubheader,
    isCustomShape,
    isLastInGroup,
    asForwarded,
    hasThread: hasThread && !noComments,
    forceSenderName,
    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,
    hasCommentButton: withCommentButton,
    hasActionButton: canForward || canFocus,
    hasReactions,
    isGeoLiveActive: location?.mediaType === 'geoLive' && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isGeoLiveExpired)(message),
    withVoiceTranscription,
    peerColorClass: (0,_common_helpers_peerColor__WEBPACK_IMPORTED_MODULE_14__.getPeerColorClass)(messageColorPeer, noUserColors, true),
    hasOutsideReactions
  });
  const withAppendix = contentClassName.includes('has-appendix');
  const emojiSize = (0,_composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_16__.getCustomEmojiSize)(message.emojiOnlyCount);
  let metaPosition;
  if (phoneCall) {
    metaPosition = 'none';
  } else if (isInDocumentGroupNotLast) {
    metaPosition = 'none';
  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {
    metaPosition = 'in-text';
  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {
    metaPosition = 'in-text';
  } else {
    metaPosition = 'standalone';
  }
  let reactionsPosition;
  if (hasReactions) {
    if (hasOutsideReactions) {
      reactionsPosition = 'outside';
    } else if (asForwarded) {
      metaPosition = 'standalone';
      reactionsPosition = 'inside';
    } else {
      reactionsPosition = 'inside';
    }
  } else {
    reactionsPosition = 'none';
  }
  const quickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';
  (0,_hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_23__["default"])(replyToPeerId || chatId, replyToMsgId, replyMessage, message.id, shouldHideReply || isQuote || isReplyPrivate);
  (0,_hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_24__["default"])(storyReplyPeerId || chatId, storyReplyId, replyStory);
  (0,_hooks_useFocusMessage__WEBPACK_IMPORTED_MODULE_34__["default"])({
    elementRef: ref,
    chatId,
    isFocused,
    focusDirection,
    noFocusHighlight,
    isResizingContainer,
    isJustAdded,
    isQuote: Boolean(focusedQuote),
    scrollTargetPosition
  });
  const viaBusinessBotTitle = viaBusinessBot ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getPeerTitle)(lang, viaBusinessBot) : undefined;
  const canShowPostAuthor = !message.senderId;
  const signature = viaBusinessBotTitle || canShowPostAuthor && message.postAuthorTitle || (asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle || undefined;
  (0,_hooks_useResizeMessageObserver__WEBPACK_IMPORTED_MODULE_30__["default"])(ref, isLastInList);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const bottomMarker = bottomMarkerRef.current;
    if (!bottomMarker || !(0,_util_visibility_isElementInViewport__WEBPACK_IMPORTED_MODULE_11__.isElementInViewport)(bottomMarker)) return;
    if (hasUnreadReaction) {
      animateUnreadReaction({
        messageIds: [messageId]
      });
    }
    if (message.hasUnreadMention) {
      markMentionsRead({
        messageIds: [messageId]
      });
    }
  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);
  const albumLayout = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return isAlbum ? (0,_helpers_calculateAlbumLayout__WEBPACK_IMPORTED_MODULE_18__.calculateAlbumLayout)(isOwn, Boolean(noAvatars), album, isMobile) : undefined;
  }, [isAlbum, isOwn, noAvatars, album, isMobile]);
  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;
  const sizeCalculations = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    let calculatedWidth;
    let contentWidth;
    let noMediaCorners = false;
    let style = '';
    let reactionsMaxWidth;
    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {
      let width;
      if (photo || video) {
        const media = photo || video;
        if (media && !isRoundVideo) {
          width = (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_20__.calculateMediaDimensions)({
            media,
            isOwn,
            asForwarded,
            noAvatars,
            isMobile
          }).width;
        }
      } else if (invoice?.extendedMedia && invoice.extendedMedia.width && invoice.extendedMedia.height) {
        const {
          width: previewWidth,
          height: previewHeight
        } = invoice.extendedMedia;
        width = (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_13__.calculateDimensionsForMessageMedia)({
          width: previewWidth,
          height: previewHeight,
          fromOwnMessage: isOwn,
          asForwarded,
          noAvatars,
          isMobile
        }).width;
      }
      if (width) {
        if (width < _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_20__.MIN_MEDIA_WIDTH_WITH_TEXT) {
          contentWidth = width;
        }
        calculatedWidth = Math.max((0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_20__.getMinMediaWidth)(text?.text, isMediaWithCommentButton), width);
        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {
          noMediaCorners = true;
        }
      }
    } else if (albumLayout) {
      calculatedWidth = Math.max((0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_20__.getMinMediaWidth)(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width);
      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {
        noMediaCorners = true;
      }
    }
    if (calculatedWidth) {
      style = `width: ${calculatedWidth}px`;
      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;
    } else if (sticker && !hasSubheader) {
      const {
        width
      } = (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_13__.getStickerDimensions)(sticker, isMobile);
      style = `width: ${width + extraPadding}px`;
      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;
    }
    return {
      contentWidth,
      noMediaCorners,
      style,
      reactionsMaxWidth
    };
  }, [albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton, isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo]);
  const {
    contentWidth,
    noMediaCorners,
    style,
    reactionsMaxWidth
  } = sizeCalculations;
  function renderMessageText(isForAnimation) {
    if (!textMessage) return undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MessageText__WEBPACK_IMPORTED_MODULE_48__["default"], {
      messageOrStory: textMessage,
      translatedText: requestedTranslationLanguage ? currentTranslatedText : undefined,
      isForAnimation: isForAnimation,
      focusedQuote: focusedQuote,
      emojiSize: emojiSize,
      highlight: highlight,
      isProtected: isProtected,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      withTranslucentThumbs: isCustomShape,
      isInSelectMode: isInSelectMode,
      canBeEmpty: hasFactCheck
    });
  }
  const renderQuickReactionButton = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (!defaultReaction) return undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible'),
      onClick: handleSendQuickReaction,
      ref: quickReactionRef
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_reactions_ReactionStaticEmoji__WEBPACK_IMPORTED_MODULE_49__["default"], {
      reaction: defaultReaction,
      size: QUICK_REACTION_SIZE,
      availableReactions: availableReactions,
      observeIntersection: observeIntersectionForPlaying
    }));
  }, [hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible, observeIntersectionForPlaying]);
  function renderReactionsAndMeta() {
    const meta = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageMeta__WEBPACK_IMPORTED_MODULE_68__["default"], {
      message: message,
      isPinned: isPinned,
      withFullDate: isChatWithSelf && !isOwn,
      noReplies: noReplies,
      repliesThreadInfo: repliesThreadInfo,
      outgoingStatus: outgoingStatus,
      signature: signature,
      withReactionOffset: reactionsPosition === 'inside',
      renderQuickReactionButton: withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined,
      availableReactions: availableReactions,
      isTranslated: Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined),
      effectEmoji: effect?.emoticon,
      onClick: handleMetaClick,
      onEffectClick: handleEffectClick,
      onTranslationClick: handleTranslationClick,
      onOpenThread: handleOpenThread
    });
    if (reactionsPosition !== 'inside') {
      return meta;
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_reactions_Reactions__WEBPACK_IMPORTED_MODULE_73__["default"], {
      message: reactionMessage,
      threadId: threadId,
      metaChildren: meta,
      observeIntersection: observeIntersectionForPlaying,
      noRecentReactors: isChannel,
      tags: tags,
      isCurrentUserPremium: isPremium
    });
  }
  function renderContent() {
    const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('content-inner', asForwarded && 'forwarded-message', hasForwardedCustomShape && 'forwarded-custom-shape', hasSubheader && 'with-subheader', noMediaCorners && 'no-media-corners');
    const hasCustomAppendix = isLastInGroup && (!hasText || isInvertedMedia && !hasFactCheck && !hasReactions) && !withCommentButton;
    const textContentClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('text-content', 'clearfix', metaPosition === 'in-text' && 'with-meta', outgoingStatus && 'with-outgoing-icon');
    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: className,
      onDoubleClick: handleContentDoubleClick,
      dir: "auto"
    }, !asForwarded && shouldRenderSenderName() && renderSenderName(), hasSubheader && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "message-subheader"
    }, hasTopicChip && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_TopicChip__WEBPACK_IMPORTED_MODULE_50__["default"], {
      topic: messageTopic,
      onClick: handleTopicChipClick,
      className: "message-topic"
    }), hasForwardedCustomShape && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "forward-custom-shape-subheader"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "message-title"
    }, renderForwardTitle()), renderSenderName(true, true)), hasMessageReply && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_embedded_EmbeddedMessage__WEBPACK_IMPORTED_MODULE_43__["default"], {
      message: replyMessage,
      replyInfo: messageReplyInfo,
      noUserColors: noUserColors,
      isProtected: isProtected,
      sender: replyMessageSender,
      senderChat: replyMessageChat,
      forwardSender: replyMessageForwardSender,
      chatTranslations: chatTranslations,
      requestedChatTranslationLanguage: requestedChatTranslationLanguage,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      onClick: handleReplyClick
    }), hasStoryReply && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_embedded_EmbeddedStory__WEBPACK_IMPORTED_MODULE_44__["default"], {
      story: replyStory,
      sender: storySender,
      noUserColors: noUserColors,
      isProtected: isProtected,
      observeIntersectionForLoading: observeIntersectionForLoading,
      onClick: handleStoryClick
    })), sticker && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Sticker__WEBPACK_IMPORTED_MODULE_75__["default"], {
      message: message,
      observeIntersection: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      shouldLoop: shouldLoopStickers,
      shouldPlayEffect: shouldPlayEffect,
      withEffect: withAnimatedEffects,
      onStopEffect: hideEffect
    }), hasAnimatedEmoji && animatedCustomEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AnimatedCustomEmoji__WEBPACK_IMPORTED_MODULE_54__["default"], {
      customEmojiId: animatedCustomEmoji,
      withEffects: withAnimatedEffects && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chatId) && !effect,
      isOwn: isOwn,
      observeIntersection: observeIntersectionForLoading,
      forceLoadPreview: isLocal,
      messageId: messageId,
      chatId: chatId,
      activeEmojiInteractions: activeEmojiInteractions
    }), hasAnimatedEmoji && animatedEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AnimatedEmoji__WEBPACK_IMPORTED_MODULE_55__["default"], {
      emoji: animatedEmoji,
      withEffects: withAnimatedEffects && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chatId) && !effect,
      isOwn: isOwn,
      observeIntersection: observeIntersectionForLoading,
      forceLoadPreview: isLocal,
      messageId: messageId,
      chatId: chatId,
      activeEmojiInteractions: activeEmojiInteractions
    }), withAnimatedEffects && effect && !isLocal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageEffect__WEBPACK_IMPORTED_MODULE_67__["default"], {
      shouldPlay: shouldPlayEffect,
      messageId: message.id,
      isMirrored: !message.isOutgoing,
      effect: effect,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      onStop: hideEffect
    }), phoneCall && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessagePhoneCall__WEBPACK_IMPORTED_MODULE_69__["default"], {
      message: message,
      phoneCall: phoneCall,
      chatId: chatId
    }), !isAlbum && isRoundVideo && !withVoiceTranscription && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_RoundVideo__WEBPACK_IMPORTED_MODULE_74__["default"], {
      message: message,
      observeIntersection: observeIntersectionForLoading,
      canAutoLoad: canAutoLoadMedia,
      isDownloading: isDownloading,
      onReadMedia: shouldReadMedia ? handleReadMedia : undefined,
      onHideTranscription: setTranscriptionHidden,
      isTranscriptionError: isTranscriptionError,
      isTranscribed: Boolean(transcribedText),
      canTranscribe: canTranscribeVoice && !hasTtl,
      isTranscriptionHidden: isTranscriptionHidden,
      isTranscribing: isTranscribing
    }), (audio || voice || withVoiceTranscription) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Audio__WEBPACK_IMPORTED_MODULE_38__["default"], {
      theme: theme,
      message: message,
      origin: _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.Inline,
      uploadProgress: uploadProgress,
      isSelectable: isInDocumentGroup,
      isSelected: isSelected,
      noAvatars: noAvatars,
      onPlay: handleAudioPlay,
      onReadMedia: voice && shouldReadMedia ? handleReadMedia : undefined,
      onCancelUpload: handleCancelUpload,
      isDownloading: isDownloading,
      isTranscribing: isTranscribing,
      isTranscriptionHidden: isTranscriptionHidden,
      isTranscribed: Boolean(transcribedText),
      isTranscriptionError: isTranscriptionError,
      canDownload: !isProtected,
      onHideTranscription: setTranscriptionHidden,
      canTranscribe: canTranscribeVoice && !hasTtl
    }), document && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Document__WEBPACK_IMPORTED_MODULE_41__["default"], {
      document: document,
      message: message,
      observeIntersection: observeIntersectionForLoading,
      canAutoLoad: canAutoLoadMedia,
      autoLoadFileMaxSizeMb: autoLoadFileMaxSizeMb,
      uploadProgress: uploadProgress,
      isSelectable: isInDocumentGroup,
      isSelected: isSelected,
      onMediaClick: handleMediaClick,
      onCancelUpload: handleCancelUpload,
      isDownloading: isDownloading,
      shouldWarnAboutSvg: shouldWarnAboutSvg
    }), storyData && !isStoryMention && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Story__WEBPACK_IMPORTED_MODULE_76__["default"], {
      message: message,
      isProtected: isProtected
    }), isStoryMention && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StoryMention__WEBPACK_IMPORTED_MODULE_77__["default"], {
      message: message
    }), contact && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Contact__WEBPACK_IMPORTED_MODULE_57__["default"], {
      contact: contact,
      noUserColors: isOwn
    }), poll && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Poll__WEBPACK_IMPORTED_MODULE_72__["default"], {
      message: message,
      poll: poll,
      onSendVote: handleVoteSend
    }), (giveaway || giveawayResults) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Giveaway__WEBPACK_IMPORTED_MODULE_61__["default"], {
      message: message
    }), game && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Game__WEBPACK_IMPORTED_MODULE_60__["default"], {
      message: message,
      canAutoLoadMedia: canAutoLoadMedia
    }), invoice?.extendedMedia && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_InvoiceMediaPreview__WEBPACK_IMPORTED_MODULE_64__["default"], {
      message: message,
      isConnected: isConnected
    }), withVoiceTranscription && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('transcription', !isTranscriptionHidden && isTranscriptionError && 'transcription-error'),
      dir: "auto"
    }, isTranscriptionError ? lang('NoWordsRecognized') : isTranscribing && transcribedText ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_DotAnimation__WEBPACK_IMPORTED_MODULE_42__["default"], {
      content: transcribedText
    }) : transcribedText), isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix), !isInvertedMedia && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, renderInvertibleMediaContent(hasCustomAppendix), hasText && !hasAnimatedEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: textContentClass,
      dir: "auto"
    }, renderMessageText(), isTranslationPending && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "translation-animation"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "text-loading"
    }, renderMessageText(true))), hasFactCheck && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_FactCheck__WEBPACK_IMPORTED_MODULE_59__["default"], {
      factCheck: factCheck,
      isToggleDisabled: isInSelectMode
    }), metaPosition === 'in-text' && renderReactionsAndMeta()), renderWebPage()), invoice && !invoice.extendedMedia && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Invoice__WEBPACK_IMPORTED_MODULE_63__["default"], {
      message: message,
      shouldAffectAppendix: hasCustomAppendix && !hasReactions,
      isInSelectMode: isInSelectMode,
      isSelected: isSelected,
      theme: theme,
      forcedWidth: contentWidth
    }), location && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Location__WEBPACK_IMPORTED_MODULE_65__["default"], {
      message: message,
      isInSelectMode: isInSelectMode,
      isSelected: isSelected,
      theme: theme,
      peer: sender
    }));
  }
  function renderInvertedMediaContent(hasCustomAppendix) {
    const textContentClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('text-content', 'clearfix');
    const footerClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('text-content', 'clearfix', metaPosition === 'in-text' && 'with-meta', outgoingStatus && 'with-outgoing-icon');
    const hasMediaAfterText = isAlbum || !isAlbum && photo || !isAlbum && video && !isRoundVideo;
    const hasContentAfterText = hasMediaAfterText || !hasAnimatedEmoji && hasFactCheck;
    const isMetaInText = metaPosition === 'in-text';
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, renderWebPage(), hasText && !hasAnimatedEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: textContentClass,
      dir: "auto"
    }, renderMessageText(), isTranslationPending && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "translation-animation"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "text-loading"
    }, renderMessageText(true))), !hasContentAfterText && isMetaInText && renderReactionsAndMeta()), hasContentAfterText && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, renderInvertibleMediaContent(hasCustomAppendix), !hasAnimatedEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: footerClass,
      dir: "auto"
    }, hasFactCheck && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_FactCheck__WEBPACK_IMPORTED_MODULE_59__["default"], {
      factCheck: factCheck,
      isToggleDisabled: isInSelectMode
    }), isMetaInText && renderReactionsAndMeta())));
  }
  function renderWebPage() {
    return webPage && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_WebPage__WEBPACK_IMPORTED_MODULE_79__["default"], {
      message: message,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      noAvatars: noAvatars,
      canAutoLoad: canAutoLoadMedia,
      canAutoPlay: canAutoPlayMedia,
      asForwarded: asForwarded,
      isDownloading: isDownloading,
      isProtected: isProtected,
      theme: theme,
      story: webPageStory,
      isConnected: isConnected,
      backgroundEmojiId: messageColorPeer?.color?.backgroundEmojiId,
      shouldWarnAboutSvg: shouldWarnAboutSvg,
      autoLoadFileMaxSizeMb: autoLoadFileMaxSizeMb,
      onAudioPlay: handleAudioPlay,
      onMediaClick: handleMediaClick,
      onCancelMediaTransfer: handleCancelUpload
    });
  }
  function renderInvertibleMediaContent(hasCustomAppendix) {
    const content = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, isAlbum && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Album__WEBPACK_IMPORTED_MODULE_53__["default"], {
      album: album,
      albumLayout: albumLayout,
      observeIntersection: observeIntersectionForLoading,
      isOwn: isOwn,
      isProtected: isProtected,
      hasCustomAppendix: hasCustomAppendix,
      onMediaClick: handleAlbumMediaClick
    }), !isAlbum && photo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Photo__WEBPACK_IMPORTED_MODULE_71__["default"], {
      messageText: text?.text,
      photo: photo,
      isOwn: isOwn,
      observeIntersection: observeIntersectionForLoading,
      noAvatars: noAvatars,
      canAutoLoad: canAutoLoadMedia,
      uploadProgress: uploadProgress,
      shouldAffectAppendix: hasCustomAppendix,
      isDownloading: isDownloading,
      isProtected: isProtected,
      asForwarded: asForwarded,
      theme: theme,
      forcedWidth: contentWidth,
      onClick: handlePhotoMediaClick,
      onCancelUpload: handleCancelUpload
    }), !isAlbum && video && !isRoundVideo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Video__WEBPACK_IMPORTED_MODULE_78__["default"], {
      video: video,
      isOwn: isOwn,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      forcedWidth: contentWidth,
      noAvatars: noAvatars,
      canAutoLoad: canAutoLoadMedia,
      canAutoPlay: canAutoPlayMedia,
      uploadProgress: uploadProgress,
      isDownloading: isDownloading,
      isProtected: isProtected,
      asForwarded: asForwarded,
      onClick: handleVideoMediaClick,
      onCancelUpload: handleCancelUpload
    }));
    if (paidMedia) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_PaidMediaOverlay__WEBPACK_IMPORTED_MODULE_70__["default"], {
        chatId: chatId,
        messageId: messageId,
        paidMedia: paidMedia,
        isOutgoing: isOwn
      }, content);
    }
    return content;
  }
  function shouldRenderSenderName() {
    const media = photo || video || location || paidMedia;
    return !(isCustomShape && !viaBotId) && (withSenderName && (!media || hasTopicChip) || asForwarded || viaBotId || forceSenderName) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);
  }
  function renderForwardTitle() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "forward-title-container"
    }, asForwarded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__["default"], {
      name: forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'
    }), asForwarded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "forward-title"
    }, lang('ForwardedFrom')));
  }
  function renderSenderName(shouldSkipRenderForwardTitle = false, shouldSkipRenderAdminTitle = false) {
    let senderTitle;
    let senderColor;
    if (senderPeer && !(isCustomShape && viaBotId)) {
      senderTitle = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getPeerTitle)(lang, senderPeer);
    } else if (forwardInfo?.hiddenUserName) {
      senderTitle = forwardInfo.hiddenUserName;
    } else if (storyData && originSender) {
      senderTitle = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getPeerTitle)(lang, originSender);
    }
    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;
    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;
    const shouldRenderForwardAvatar = asForwarded && senderPeer;
    const hasBotSenderUsername = botSender?.usernames?.length;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "message-title",
      dir: "ltr"
    }, senderTitle || asForwarded ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('message-title-name-container', forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive', senderColor),
      dir: "ltr"
    }, !shouldSkipRenderForwardTitle && renderForwardTitle(), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "message-title-name"
    }, storyData && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__["default"], {
      name: "play-story"
    }), shouldRenderForwardAvatar && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_39__["default"], {
      className: "forward-avatar",
      peer: senderPeer,
      size: "micro"
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "sender-title",
      onClick: handleSenderClick
    }, senderTitle ? (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_15__["default"])(senderTitle) : asForwarded ? NBSP : undefined), !asForwarded && senderEmojiStatus && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_CustomEmoji__WEBPACK_IMPORTED_MODULE_40__["default"], {
      documentId: senderEmojiStatus.documentId,
      loopLimit: _config__WEBPACK_IMPORTED_MODULE_4__.EMOJI_STATUS_LOOP_LIMIT,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying
    }), !asForwarded && !senderEmojiStatus && senderIsPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_47__["default"], null), senderPeer?.fakeType && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_FakeIcon__WEBPACK_IMPORTED_MODULE_45__["default"], {
      fakeType: senderPeer.fakeType
    }))) : !botSender ? NBSP : undefined, botSender?.usernames?.length && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "interactive"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "via"
    }, lang('ViaBot')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "sender-title",
      onClick: handleViaBotClick
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_15__["default"])(`@${botSender.usernames[0].username}`))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "title-spacer"
    }), !shouldSkipRenderAdminTitle && !hasBotSenderUsername ? forwardInfo?.isLinkedChannelPost ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "admin-title",
      dir: "auto"
    }, lang('DiscussChannel')) : message.postAuthorTitle && isGroup && !asForwarded ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "admin-title",
      dir: "auto"
    }, message.postAuthorTitle) : senderAdminMember && !asForwarded && !viaBotId ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "admin-title",
      dir: "auto"
    }, senderAdminMember.customTitle || lang(senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin')) : undefined : undefined, canShowSenderBoosts && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "sender-boosts",
      "aria-hidden": true
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__["default"], {
      name: senderBoosts > 1 ? 'boosts' : 'boost'
    }), senderBoosts > 1 ? senderBoosts : undefined));
  }
  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    id: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageHtmlId)(message.id),
    className: containerClassName,
    "data-message-id": messageId,
    onCopy: isProtected ? _util_stopEvent__WEBPACK_IMPORTED_MODULE_10__["default"] : undefined,
    onMouseDown: handleMouseDown,
    onClick: handleClick,
    onContextMenu: handleContextMenu,
    onDoubleClick: handleDoubleClick,
    onMouseEnter: isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined,
    onMouseMove: withQuickReactionButton ? handleMouseMove : undefined,
    onMouseLeave: withQuickReactionButton || isInDocumentGroupNotLast ? handleMouseLeave : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: bottomMarkerRef,
    className: "bottom-marker",
    "data-message-id": messageId,
    "data-last-message-id": album ? album.messages[album.messages.length - 1].id : undefined,
    "data-album-main-id": album ? album.mainMessage.id : undefined,
    "data-has-unread-mention": message.hasUnreadMention || undefined,
    "data-has-unread-reaction": hasUnreadReaction || undefined,
    "data-is-pinned": isPinned || undefined,
    "data-should-update-views": message.viewsCount !== undefined
  }), !isInDocumentGroup && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-select-control"
  }, isSelected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__["default"], {
    name: "select"
  })), isLastInDocumentGroup && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('message-select-control group-select', isGroupSelected && 'is-selected'),
    onClick: handleDocumentGroupSelectAll
  }, isGroupSelected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__["default"], {
    name: "select"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('message-content-wrapper', contentClassName.includes('text') && 'can-select-text', contentClassName.includes('giveaway') && 'giveaway-result-content')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: contentClassName,
    style: style,
    dir: "auto"
  }, asForwarded && !isInDocumentGroupNotFirst && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, shouldRenderSenderName() && renderSenderName(), forwardAuthor && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "admin-title",
    dir: "auto"
  }, forwardAuthor)), renderContent(), !isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta(), canShowActionButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('message-action-buttons', isLoadingComments && 'message-action-buttons-shown')
  }, canForward && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_52__["default"], {
    className: "message-action-button",
    color: "translucent-white",
    round: true,
    size: "tiny",
    ariaLabel: lang('lng_context_forward_msg'),
    onClick: isLastInDocumentGroup ? handleGroupForward : handleForward
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__["default"], {
    name: "share-filled"
  })), canFocus && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_52__["default"], {
    className: "message-action-button",
    color: "translucent-white",
    round: true,
    size: "tiny",
    ariaLabel: "Focus message",
    onClick: isPinnedList ? handleFocus : handleFocusForwarded
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_46__["default"], {
    name: "arrow-right"
  }))), withCommentButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CommentButton__WEBPACK_IMPORTED_MODULE_56__["default"], {
    threadInfo: repliesThreadInfo,
    disabled: noComments,
    isLoading: isLoadingComments,
    isCustomShape: isCustomShape
  }), withAppendix && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageAppendix__WEBPACK_IMPORTED_MODULE_66__["default"], {
    isOwn: isOwn
  }), withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()), message.inlineButtons && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_InlineButtons__WEBPACK_IMPORTED_MODULE_62__["default"], {
    message: message,
    onClick: clickBotInlineButton
  }), reactionsPosition === 'outside' && !isStoryMention && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_reactions_Reactions__WEBPACK_IMPORTED_MODULE_73__["default"], {
    message: reactionMessage,
    threadId: threadId,
    isOutside: true,
    isCurrentUserPremium: isPremium,
    maxWidth: reactionsMaxWidth,
    observeIntersection: observeIntersectionForPlaying,
    noRecentReactors: isChannel,
    tags: tags
  })), contextMenuAnchor && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ContextMenuContainer_async__WEBPACK_IMPORTED_MODULE_58__["default"], {
    isOpen: isContextMenuOpen,
    anchor: contextMenuAnchor,
    targetHref: contextMenuTarget?.matches('a[href]') ? contextMenuTarget.href : undefined,
    message: message,
    album: album,
    messageListType: messageListType,
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide,
    repliesThreadInfo: repliesThreadInfo,
    noReplies: noReplies,
    detectedLanguage: detectedLanguage
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, ownProps) => {
  const {
    focusedMessage,
    forwardMessages,
    activeReactions,
    activeEmojiInteractions,
    loadingThread
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global);
  const {
    message,
    album,
    withSenderName,
    withAvatar,
    threadId,
    messageListType,
    isLastInDocumentGroup,
    isFirstInGroup
  } = ownProps;
  const {
    id,
    chatId,
    viaBotId,
    isOutgoing,
    forwardInfo,
    transcriptionId,
    isPinned,
    viaBusinessBotId,
    effectId
  } = message;
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  const isChatWithSelf = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsChatWithSelf)(global, chatId);
  const isSystemBotChat = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isSystemBot)(chatId);
  const isAnonymousForwards = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isAnonymousForwardsChat)(chatId);
  const isChannel = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatChannel)(chat);
  const isGroup = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatGroup)(chat);
  const chatFullInfo = !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chatId) ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChatFullInfo)(global, chatId) : undefined;
  const webPageStoryData = message.content.webPage?.story;
  const webPageStory = webPageStoryData ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPeerStory)(global, webPageStoryData.peerId, webPageStoryData.id) : undefined;
  const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);
  const forceSenderName = !isChatWithSelf && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isAnonymousOwnMessage)(message);
  const canShowSender = withSenderName || withAvatar || forceSenderName;
  const sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectSender)(global, message);
  const originSender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectForwardedSender)(global, message);
  const botSender = viaBotId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, viaBotId) : undefined;
  const senderAdminMember = sender?.id && isGroup ? chatFullInfo?.adminMembersById?.[sender?.id] : undefined;
  const isThreadTop = message.id === threadId;
  const {
    replyToMsgId,
    replyToPeerId,
    replyFrom
  } = (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_6__.getMessageReplyInfo)(message) || {};
  const {
    peerId: storyReplyPeerId,
    storyId: storyReplyId
  } = (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_6__.getStoryReplyInfo)(message) || {};
  const shouldHideReply = replyToMsgId && replyToMsgId === threadId;
  const replyMessage = replyToMsgId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChatMessage)(global, replyToPeerId || chatId, replyToMsgId) : undefined;
  const forwardHeader = forwardInfo || replyFrom;
  const replyMessageSender = replyMessage ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectSender)(global, replyMessage) : forwardHeader && !isSystemBotChat && !isAnonymousForwards ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectSenderFromHeader)(global, forwardHeader) : undefined;
  const replyMessageForwardSender = replyMessage && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectForwardedSender)(global, replyMessage);
  const replyMessageChat = replyToPeerId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, replyToPeerId) : undefined;
  const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatPublic)(replyMessageChat) && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);
  const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';
  const replyStory = storyReplyId && storyReplyPeerId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPeerStory)(global, storyReplyPeerId, storyReplyId) : undefined;
  const storySender = storyReplyPeerId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPeer)(global, storyReplyPeerId) : undefined;
  const uploadProgress = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUploadProgress)(global, message);
  const isFocused = messageListType === 'thread' && (album ? album.messages.some(m => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsMessageFocused)(global, m, threadId)) : (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsMessageFocused)(global, message, threadId));
  const {
    direction: focusDirection,
    noHighlight: noFocusHighlight,
    isResizingContainer,
    quote: focusedQuote,
    scrollTargetPosition
  } = isFocused && focusedMessage || {};
  const middleSearch = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMiddleSearch)(global);
  const highlight = middleSearch?.results?.query && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;
  const singleEmoji = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageSingleRegularEmoji)(message);
  const animatedEmoji = singleEmoji && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectAnimatedEmoji)(global, singleEmoji) ? singleEmoji : undefined;
  const animatedCustomEmoji = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageSingleCustomEmoji)(message);
  let isSelected;
  if (album?.messages) {
    isSelected = album.messages.every(({
      id: messageId
    }) => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsMessageSelected)(global, messageId));
  } else {
    isSelected = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsMessageSelected)(global, id);
  }
  const canReply = messageListType === 'thread' && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCanReplyToMessage)(global, message, threadId);
  const activeDownloads = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectActiveDownloads)(global);
  const downloadableMedia = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageDownloadableMedia)(message);
  const isDownloading = downloadableMedia && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsDownloading)(activeDownloads, downloadableMedia);
  const repliesThreadInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectThreadInfo)(global, chatId, album?.commentsMessage?.id || id);
  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;
  const documentGroupFirstMessageId = isInDocumentGroup ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectMessageIdsByGroupId)(global, chatId, message.groupedId)[0] : undefined;
  const reactionMessage = isInDocumentGroup ? isLastInDocumentGroup ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChatMessage)(global, chatId, documentGroupFirstMessageId) : undefined : message;
  const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);
  const hasTopicChip = threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;
  const messageTopic = hasTopicChip ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTopicFromMessage)(global, message) : undefined;
  const chatTranslations = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChatTranslations)(global, chatId);
  const requestedTranslationLanguage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectRequestedMessageTranslationLanguage)(global, chatId, message.id);
  const requestedChatTranslationLanguage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectRequestedChatTranslationLanguage)(global, chatId);
  const areTranslationsEnabled = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested

  const isConnected = global.connectionState === 'connectionStateReady';
  const hasActiveReactions = Boolean(reactionMessage && activeReactions[(0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_9__.getMessageKey)(reactionMessage)]?.length);
  const isPremium = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsCurrentUserPremium)(global);
  const senderBoosts = sender && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsChatWithSelf)(global, sender.id) ? chatFullInfo?.boostsApplied ?? message.senderBoosts : message.senderBoosts;
  const chatLevel = chat?.boostLevel || 0;
  const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;
  const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);
  const viaBusinessBot = viaBusinessBotId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, viaBusinessBotId) : undefined;
  const effect = effectId ? global.availableEffectById[effectId] : undefined;
  const poll = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPollFromMessage)(global, message);
  return {
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTheme)(global),
    forceSenderName,
    sender,
    canShowSender,
    originSender,
    botSender,
    shouldHideReply: shouldHideReply || isReplyToTopicStart,
    isThreadTop,
    replyMessage,
    replyMessageSender,
    replyMessageForwardSender,
    replyMessageChat,
    replyStory,
    isReplyPrivate,
    storySender,
    isInDocumentGroup,
    isProtected: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsMessageProtected)(global, message),
    isChatProtected: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsChatProtected)(global, chatId),
    isFocused,
    isForwarding,
    reactionMessage,
    isChatWithSelf,
    isRepliesChat: isSystemBotChat,
    isAnonymousForwards,
    isChannel,
    isGroup,
    canReply,
    highlight,
    animatedEmoji,
    animatedCustomEmoji,
    isInSelectMode: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsInSelectMode)(global),
    isSelected,
    isGroupSelected: Boolean(message.groupedId) && !message.isInAlbum && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsDocumentGroupSelected)(global, chatId, message.groupedId),
    threadId,
    isDownloading,
    isPinnedList: messageListType === 'pinned',
    isPinned,
    canAutoLoadMedia: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCanAutoLoadMedia)(global, message),
    canAutoPlayMedia: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCanAutoPlayMedia)(global, message),
    autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,
    shouldLoopStickers: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectShouldLoopStickers)(global),
    repliesThreadInfo,
    availableReactions: global.reactions.availableReactions,
    defaultReaction: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isMessageLocal)(message) || messageListType === 'scheduled' ? undefined : (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectDefaultReaction)(global, chatId),
    hasActiveReactions,
    activeEmojiInteractions,
    hasUnreadReaction,
    isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,
    transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,
    isPremium,
    senderAdminMember,
    messageTopic,
    hasTopicChip,
    chatTranslations,
    areTranslationsEnabled,
    shouldDetectChatLanguage: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectShouldDetectChatLanguage)(global, chatId),
    requestedTranslationLanguage,
    requestedChatTranslationLanguage,
    hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),
    withAnimatedEffects: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPerformanceSettingsValue)(global, 'stickerEffects'),
    webPageStory,
    isConnected,
    isLoadingComments: repliesThreadInfo?.isCommentsInfo && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,
    shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,
    ...(isOutgoing && {
      outgoingStatus: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectOutgoingStatus)(global, message, messageListType === 'scheduled')
    }),
    ...(typeof uploadProgress === 'number' && {
      uploadProgress
    }),
    ...(isFocused && {
      focusDirection,
      noFocusHighlight,
      isResizingContainer,
      focusedQuote,
      scrollTargetPosition
    }),
    senderBoosts,
    tags: global.savedReactionTags?.byKey,
    canTranscribeVoice,
    viaBusinessBot,
    effect,
    poll
  };
})(Message)));

/***/ }),

/***/ "./src/components/middle/message/MessageAppendix.tsx":
/*!***********************************************************!*\
  !*** ./src/components/middle/message/MessageAppendix.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");

function MessageAppendix({
  isOwn
}) {
  const path = isOwn ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z' : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    width: "9",
    height: "20",
    className: "svg-appendix"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("defs", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("filter", {
    x: "-50%",
    y: "-14.7%",
    width: "200%",
    height: "141.2%",
    filterUnits: "objectBoundingBox",
    id: "messageAppendix"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feOffset", {
    dy: "1",
    in: "SourceAlpha",
    result: "shadowOffsetOuter1"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feGaussianBlur", {
    stdDeviation: "1",
    in: "shadowOffsetOuter1",
    result: "shadowBlurOuter1"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feColorMatrix", {
    values: "0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0",
    in: "shadowBlurOuter1"
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("g", {
    fill: "none",
    "fill-rule": "evenodd"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: path,
    fill: "#000",
    filter: "url(#messageAppendix)"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: path,
    fill: isOwn ? '#EEFFDE' : 'FFF',
    className: "corner"
  })));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MessageAppendix);

/***/ }),

/***/ "./src/components/middle/message/MessageMeta.tsx":
/*!*******************************************************!*\
  !*** ./src/components/middle/message/MessageMeta.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/AnimatedCounter */ "./src/components/common/AnimatedCounter.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_MessageOutgoingStatus__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/MessageOutgoingStatus */ "./src/components/common/MessageOutgoingStatus.tsx");
/* harmony import */ var _MessageMeta_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./MessageMeta.scss */ "./src/components/middle/message/MessageMeta.scss");













const MessageMeta = ({
  message,
  outgoingStatus,
  signature,
  withReactionOffset,
  repliesThreadInfo,
  renderQuickReactionButton,
  noReplies,
  isTranslated,
  isPinned,
  withFullDate,
  effectEmoji,
  onClick,
  onTranslationClick,
  onEffectClick,
  onOpenThread
}) => {
  const {
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isActivated, markActivated] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_7__["default"])();
  function handleImportedClick(e) {
    e.stopPropagation();
    showNotification({
      message: {
        key: 'ImportedInfo'
      }
    });
  }
  function handleOpenThread(e) {
    e.stopPropagation();
    onOpenThread();
  }
  const dateTitle = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!isActivated) return undefined;
    const createDateTime = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatDateTimeToString)(message.date * 1000, oldLang.code, undefined, oldLang.timeFormat);
    const editDateTime = message.isEdited && (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatDateTimeToString)(message.editDate * 1000, oldLang.code, undefined, oldLang.timeFormat);
    const forwardedDateTime = message.forwardInfo && (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatDateTimeToString)((message.forwardInfo.savedDate || message.forwardInfo.date) * 1000, oldLang.code, undefined, oldLang.timeFormat);
    let text = createDateTime;
    if (editDateTime) {
      text += '\n';
      text += lang('MessageTooltipEditedDate', {
        date: editDateTime
      });
    }
    if (forwardedDateTime) {
      text += '\n';
      text += lang('MessageTooltipForwardedDate', {
        date: forwardedDateTime
      });
    }
    return text;
    // We need to listen to timeformat change
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, [isActivated, oldLang, message, oldLang.timeFormat]);
  const viewsTitle = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!message.viewsCount) return undefined;
    let text = lang('MessageTooltipViews', {
      count: message.viewsCount
    }, {
      pluralValue: message.viewsCount
    });
    if (message.forwardsCount) {
      text += '\n';
      text += lang('MessageTooltipForwards', {
        count: message.forwardsCount
      }, {
        pluralValue: message.forwardsCount
      });
    }
    return text;
  }, [lang, message.forwardsCount, message.viewsCount]);
  const repliesTitle = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const count = repliesThreadInfo?.messagesCount;
    if (!count) return undefined;
    return lang('MessageTooltipReplies', {
      count
    }, {
      pluralValue: count
    });
  }, [lang, repliesThreadInfo]);
  const date = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const time = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatTime)(oldLang, message.date * 1000);
    if (!withFullDate) {
      return time;
    }
    return (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatPastTimeShort)(oldLang, (message.forwardInfo?.date || message.date) * 1000, true);
  }, [oldLang, message.date, message.forwardInfo?.date, withFullDate]);
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('MessageMeta', withReactionOffset && 'reactions-offset', message.forwardInfo?.isImported && 'is-imported');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: fullClassName,
    dir: lang.isRtl ? 'rtl' : 'ltr',
    onClick: onClick,
    "data-ignore-on-paste": true
  }, effectEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-effect-icon",
    onClick: onEffectClick
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__["default"])(effectEmoji)), isTranslated && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "language",
    className: "message-translated",
    onClick: onTranslationClick
  }), Boolean(message.viewsCount) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-views",
    title: viewsTitle
  }, (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_4__.formatIntegerCompact)(message.viewsCount)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "channelviews"
  })), !noReplies && Boolean(repliesThreadInfo?.messagesCount) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    onClick: handleOpenThread,
    className: "message-replies-wrapper",
    title: repliesTitle
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-replies"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_9__["default"], {
    text: (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_4__.formatIntegerCompact)(repliesThreadInfo.messagesCount)
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "reply-filled"
  })), isPinned && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "pinned-message",
    className: "message-pinned"
  }), signature && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-signature"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__["default"])(signature)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-time",
    title: dateTitle,
    onMouseEnter: markActivated
  }, message.forwardInfo?.isImported && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-imported",
    onClick: handleImportedClick
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatDateTimeToString)(message.forwardInfo.date * 1000, lang.code, true)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-imported",
    onClick: handleImportedClick
  }, lang('MessageMetaImported'))), message.isEdited && `${lang('MessageMetaEdited')} `, message.isVideoProcessingPending && `${lang('MessageMetaApproximate')} `, date), outgoingStatus && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MessageOutgoingStatus__WEBPACK_IMPORTED_MODULE_11__["default"], {
    status: outgoingStatus
  }), renderQuickReactionButton && renderQuickReactionButton());
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageMeta));

/***/ }),

/***/ "./src/components/middle/message/MessagePhoneCall.tsx":
/*!************************************************************!*\
  !*** ./src/components/middle/message/MessagePhoneCall.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MessagePhoneCall.module.scss */ "./src/components/middle/message/MessagePhoneCall.module.scss");










const MessagePhoneCall = ({
  phoneCall,
  message,
  chatId
}) => {
  const {
    requestMasterAndRequestCall
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const {
    isOutgoing,
    isVideo,
    reason,
    duration
  } = phoneCall;
  const isMissed = reason === 'missed';
  const isCancelled = reason === 'busy' || duration === undefined;
  const handleCall = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    requestMasterAndRequestCall({
      isVideo,
      userId: chatId
    });
  });
  const reasonText = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (isVideo) {
      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';
      if (isCancelled) return 'CallMessageVideoIncomingDeclined';
      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';
    } else {
      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';
      if (isCancelled) return 'CallMessageIncomingDeclined';
      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';
    }
  }, [isCancelled, isMissed, isOutgoing, isVideo]);
  const formattedDuration = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return phoneCall.duration ? (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatTimeDuration)(lang, phoneCall.duration) : undefined;
  }, [lang, phoneCall.duration]);
  const timeFormatted = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatTime)(lang, message.date * 1000);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_8__["default"], {
    size: "smaller",
    color: "translucent",
    round: true,
    ripple: true,
    onClick: handleCall,
    className: _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].button,
    disabled: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.ARE_CALLS_SUPPORTED,
    ariaLabel: lang(isOutgoing ? 'CallAgain' : 'CallBack')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_7__["default"], {
    name: isVideo ? 'video-outlined' : 'phone'
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].info
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].reason
  }, lang(reasonText)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].meta
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_7__["default"], {
    name: "arrow-right",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].arrow, isMissed && _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].missed, isCancelled && _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].canceled, !isOutgoing && _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].incoming)
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _MessagePhoneCall_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].duration
  }, formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MessagePhoneCall));

/***/ }),

/***/ "./src/components/middle/message/PaidMediaOverlay.tsx":
/*!************************************************************!*\
  !*** ./src/components/middle/message/PaidMediaOverlay.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_formatCurrency__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/formatCurrency */ "./src/util/formatCurrency.tsx");
/* harmony import */ var _util_replaceWithTeact__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/replaceWithTeact */ "./src/util/replaceWithTeact.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/icons/StarIcon */ "./src/components/common/icons/StarIcon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _PaidMediaOverlay_module_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./PaidMediaOverlay.module.scss */ "./src/components/middle/message/PaidMediaOverlay.module.scss");












const PaidMediaOverlay = ({
  paidMedia,
  chatId,
  messageId,
  isOutgoing,
  children
}) => {
  const {
    openInvoice
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const isClickable = !paidMedia.isBought;
  const buttonText = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const value = lang('UnlockPaidContent', paidMedia.starsAmount);
    return (0,_util_replaceWithTeact__WEBPACK_IMPORTED_MODULE_5__.replaceWithTeact)(value, _config__WEBPACK_IMPORTED_MODULE_2__.STARS_ICON_PLACEHOLDER, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_9__["default"], {
      className: _PaidMediaOverlay_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].star,
      type: "gold",
      size: "adaptive"
    }));
  }, [lang, paidMedia]);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(e => {
    openInvoice({
      type: 'message',
      chatId,
      messageId
    });
    (0,_util_stopEvent__WEBPACK_IMPORTED_MODULE_6__["default"])(e);
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _PaidMediaOverlay_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].root,
    onClick: isClickable ? handleClick : undefined
  }, children, isClickable && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_10__["default"], {
    className: _PaidMediaOverlay_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].buyButton,
    color: "dark",
    size: "tiny",
    fluid: true,
    pill: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _PaidMediaOverlay_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].buttonText
  }, buttonText)), paidMedia.isBought && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('message-paid-media-status', _PaidMediaOverlay_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].boughtStatus)
  }, isOutgoing ? (0,_util_formatCurrency__WEBPACK_IMPORTED_MODULE_4__.formatCurrency)(paidMedia.starsAmount, _config__WEBPACK_IMPORTED_MODULE_2__.STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(PaidMediaOverlay));

/***/ }),

/***/ "./src/components/middle/message/Poll.tsx":
/*!************************************************!*\
  !*** ./src/components/middle/message/Poll.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AvatarList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/AvatarList */ "./src/components/common/AvatarList.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_CheckboxGroup__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/CheckboxGroup */ "./src/components/ui/CheckboxGroup.tsx");
/* harmony import */ var _ui_RadioGroup__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/RadioGroup */ "./src/components/ui/RadioGroup.tsx");
/* harmony import */ var _PollOption__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./PollOption */ "./src/components/middle/message/PollOption.tsx");
/* harmony import */ var _Poll_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Poll.scss */ "./src/components/middle/message/Poll.scss");
















const SOLUTION_CONTAINER_ID = '#middle-column-portals';
const SOLUTION_DURATION = 5000;
const TIMER_RADIUS = 6;
const TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;
const TIMER_UPDATE_INTERVAL = 1000;
const NBSP = '\u00A0';
const Poll = ({
  message,
  poll,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  onSendVote
}) => {
  const {
    loadMessage,
    openPollResults,
    requestConfetti,
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    id: messageId,
    chatId
  } = message;
  const {
    summary,
    results
  } = poll;
  const [isSubmitting, setIsSubmitting] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [chosenOptions, setChosenOptions] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [wasSubmitted, setWasSubmitted] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [closePeriod, setClosePeriod] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!summary.closed && summary.closeDate && summary.closeDate > 0 ? Math.min(summary.closeDate - (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_5__.getServerTime)(), summary.closePeriod) : 0);
  // eslint-disable-next-line no-null/no-null
  const countdownRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const timerCircleRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    results: voteResults,
    totalVoters
  } = results;
  const hasVoted = voteResults && voteResults.some(r => r.isChosen);
  const canVote = !summary.closed && !hasVoted;
  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;
  const isMultiple = canVote && summary.multipleChoice;
  const recentVoterIds = results.recentVoterIds;
  const maxVotersCount = voteResults ? Math.max(...voteResults.map(r => r.votersCount)) : totalVoters;
  const correctResults = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return voteResults?.filter(r => r.isCorrect).map(r => r.option) || [];
  }, [voteResults]);
  const answers = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => summary.answers.map(a => ({
    label: (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_6__.renderTextWithEntities)({
      text: a.text.text,
      entities: a.text.entities,
      observeIntersectionForLoading,
      observeIntersectionForPlaying
    }),
    value: a.option,
    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0)
  })), [closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying, summary.answers, summary.closePeriod, summary.quiz]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const chosen = poll.results.results?.find(result => result.isChosen);
    if (isSubmitting && chosen) {
      if (chosen.isCorrect) {
        requestConfetti({});
      }
      setIsSubmitting(false);
    }
  }, [isSubmitting, poll.results.results, requestConfetti]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (closePeriod > 0) {
      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);
    }
    if (!timerCircleRef.current) return;
    if (closePeriod <= 5) {
      countdownRef.current.classList.add('hurry-up');
    }
    const strokeDashOffset = (summary.closePeriod - closePeriod) / summary.closePeriod * TIMER_CIRCUMFERENCE;
    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);
  }, [closePeriod, summary.closePeriod]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (summary.quiz && (closePeriod <= 0 || hasVoted && !summary.closed)) {
      loadMessage({
        chatId,
        messageId
      });
    }
  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);

  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    let timer;
    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {
      timer = window.setTimeout(() => {
        loadMessage({
          chatId,
          messageId
        });
      }, summary.closePeriod * 1000);
    }
    return () => {
      if (timer) {
        window.clearTimeout(timer);
      }
    };
  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);
  const recentVoters = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    // No need for expensive global updates on chats or users, so we avoid them
    const global = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
    return recentVoterIds ? recentVoterIds.reduce((result, id) => {
      const peer = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeer)(global, id);
      if (peer) {
        result.push(peer);
      }
      return result;
    }, []) : [];
  }, [recentVoterIds]);
  const handleRadioChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(option => {
    setChosenOptions([option]);
    setIsSubmitting(true);
    setWasSubmitted(true);
    onSendVote([option]);
  });
  const handleCheckboxChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(options => {
    setChosenOptions(options);
  });
  const handleVoteClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    setIsSubmitting(true);
    setWasSubmitted(true);
    onSendVote(chosenOptions);
  });
  const handleViewResultsClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    openPollResults({
      chatId,
      messageId
    });
  });
  const showSolution = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    showNotification({
      localId: (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageKey)(message),
      message: (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_6__.renderTextWithEntities)({
        text: poll.results.solution,
        entities: poll.results.solutionEntities
      }),
      duration: SOLUTION_DURATION,
      containerSelector: SOLUTION_CONTAINER_ID
    });
  });

  // Show the solution to quiz if the answer was incorrect
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {
      const correctResult = results.results.find(r => r.isChosen && r.isCorrect);
      if (!correctResult) {
        showSolution();
      }
    }
  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  function renderResultOption(answer) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_PollOption__WEBPACK_IMPORTED_MODULE_14__["default"], {
      key: answer.option,
      shouldAnimate: wasSubmitted || !canVote,
      answer: answer,
      voteResults: voteResults,
      totalVoters: totalVoters,
      maxVotersCount: maxVotersCount,
      correctResults: correctResults
    });
  }
  function renderRecentVoters() {
    return recentVoters.length > 0 && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "poll-recent-voters"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AvatarList__WEBPACK_IMPORTED_MODULE_9__["default"], {
      size: "micro",
      peers: recentVoters
    }));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "Poll",
    dir: lang.isRtl ? 'auto' : 'ltr'
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-question"
  }, (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_6__.renderTextWithEntities)({
    text: summary.question.text,
    entities: summary.question.entities,
    observeIntersectionForLoading,
    observeIntersectionForPlaying
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-type"
  }, lang(getPollTypeString(summary)), renderRecentVoters(), closePeriod > 0 && canVote && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: countdownRef,
    className: "poll-countdown"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatMediaDuration)(closePeriod)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    width: "16px",
    height: "16px"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("circle", {
    ref: timerCircleRef,
    cx: "8",
    cy: "8",
    r: TIMER_RADIUS,
    className: "poll-countdown-progress",
    transform: "rotate(-90, 8, 8)",
    "stroke-dasharray": TIMER_CIRCUMFERENCE,
    "stroke-dashoffset": "0"
  }))), summary.quiz && poll.results.solution && !canVote && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_11__["default"], {
    round: true,
    size: "tiny",
    color: "translucent",
    className: "poll-quiz-help",
    onClick: showSolution,
    ariaLabel: "Show Solution"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "lamp"
  }))), canVote && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-answers",
    onClick: stopPropagation
  }, isMultiple ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_CheckboxGroup__WEBPACK_IMPORTED_MODULE_12__["default"], {
    options: answers,
    onChange: handleCheckboxChange,
    disabled: message.isScheduled || isSubmitting,
    loadingOptions: isSubmitting ? chosenOptions : undefined,
    isRound: true
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_RadioGroup__WEBPACK_IMPORTED_MODULE_13__["default"], {
    name: `poll-${messageId}`,
    options: answers,
    onChange: handleRadioChange,
    disabled: message.isScheduled || isSubmitting,
    loadingOption: isSubmitting ? chosenOptions[0] : undefined
  })), !canVote && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-results"
  }, summary.answers.map(renderResultOption)), !canViewResult && !isMultiple && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-voters-count"
  }, getReadableVotersCount(lang, summary.quiz, results.totalVoters)), isMultiple && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_11__["default"], {
    isText: true,
    disabled: chosenOptions.length === 0,
    size: "tiny",
    onClick: handleVoteClick
  }, lang('PollSubmitVotes')), canViewResult && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_11__["default"], {
    isText: true,
    size: "tiny",
    onClick: handleViewResultsClick
  }, lang('PollViewResults')));
};
function getPollTypeString(summary) {
  // When we just created the poll, some properties don't exist.
  if (typeof summary.isPublic === 'undefined') {
    return NBSP;
  }
  if (summary.closed) {
    return 'FinalResults';
  }
  if (summary.quiz) {
    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';
  }
  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';
}
function getReadableVotersCount(lang, isQuiz, count) {
  if (!count) {
    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');
  }
  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');
}
function stopPropagation(e) {
  e.stopPropagation();
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Poll));

/***/ }),

/***/ "./src/components/middle/message/PollOption.tsx":
/*!******************************************************!*\
  !*** ./src/components/middle/message/PollOption.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _PollOption_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PollOption.scss */ "./src/components/middle/message/PollOption.scss");





const PollOption = ({
  answer,
  voteResults,
  totalVoters,
  maxVotersCount,
  correctResults,
  shouldAnimate
}) => {
  const result = voteResults && voteResults.find(r => r.option === answer.option);
  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;
  const showIcon = correctResults.length > 0 && correctAnswer || result?.isChosen;
  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;
  const [finalPercent, setFinalPercent] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(shouldAnimate ? 0 : answerPercent);
  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;
  const isAnimationDoesNotStart = finalPercent !== answerPercent;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (shouldAnimate) {
      setFinalPercent(answerPercent);
    }
  }, [shouldAnimate, answerPercent]);
  if (!voteResults || !result) {
    return undefined;
  }
  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "PollOption",
    dir: "ltr"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: `poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`
  }, answerPercent, "%", showIcon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('poll-option-chosen', !correctAnswer && 'wrong', shouldAnimate && 'animate')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_3__["default"], {
    name: correctAnswer ? 'check' : 'close',
    className: "poll-option-icon"
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-option-right"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-option-text",
    dir: "auto"
  }, (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_2__.renderTextWithEntities)({
    text: answer.text.text,
    entities: answer.text.entities
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('poll-option-answer', showIcon && !correctAnswer && 'wrong')
  }, shouldAnimate && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: "poll-line",
    style: !isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M4.47 5.33v13.6a9 9 0 009 9h13"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "poll-option-line",
    style: lineStyle
  }))));
};
function getPercentage(value, total) {
  return total > 0 ? (value / total * 100).toFixed() : 0;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PollOption);

/***/ }),

/***/ "./src/components/middle/message/SenderGroupContainer.tsx":
/*!****************************************************************!*\
  !*** ./src/components/middle/message/SenderGroupContainer.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _SenderGroupContainer_module_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SenderGroupContainer.module.scss */ "./src/components/middle/message/SenderGroupContainer.module.scss");








const SenderGroupContainer = ({
  message,
  withAvatar,
  children,
  id,
  sender,
  canShowSender,
  originSender,
  isChatWithSelf,
  isRepliesChat,
  isAnonymousForwards
}) => {
  const {
    openChat
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    forwardInfo
  } = message;
  const messageSender = canShowSender ? sender : undefined;
  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);
  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;
  const handleAvatarClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (!avatarPeer) {
      return;
    }
    openChat({
      id: avatarPeer.id
    });
  });
  function renderAvatar() {
    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_6__["default"], {
      size: "small",
      className: _SenderGroupContainer_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].senderAvatar,
      peer: avatarPeer,
      text: hiddenName,
      onClick: avatarPeer ? handleAvatarClick : undefined
    });
  }
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('sender-group-container', _SenderGroupContainer_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].root);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: id,
    className: className
  }, withAvatar && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _SenderGroupContainer_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].avatarContainer
  }, renderAvatar()), children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, ownProps) => {
  const {
    message,
    withAvatar
  } = ownProps;
  const {
    chatId
  } = message;
  const isChatWithSelf = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsChatWithSelf)(global, chatId);
  const isSystemBotChat = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isSystemBot)(chatId);
  const isAnonymousForwards = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isAnonymousForwardsChat)(chatId);
  const forceSenderName = !isChatWithSelf && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isAnonymousOwnMessage)(message);
  const canShowSender = withAvatar || forceSenderName;
  const sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectSender)(global, message);
  const originSender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectForwardedSender)(global, message);
  return {
    sender,
    canShowSender,
    originSender,
    isChatWithSelf,
    isRepliesChat: isSystemBotChat,
    isAnonymousForwards
  };
})(SenderGroupContainer)));

/***/ }),

/***/ "./src/components/middle/message/SponsoredMessage.tsx":
/*!************************************************************!*\
  !*** ./src/components/middle/message/SponsoredMessage.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/preventMessageInputBlur */ "./src/components/middle/helpers/preventMessageInputBlur.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/middle/message/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _common_BadgeButton__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../common/BadgeButton */ "./src/components/common/BadgeButton.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../common/PeerColorWrapper */ "./src/components/common/PeerColorWrapper.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _MessageAppendix__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./MessageAppendix */ "./src/components/middle/message/MessageAppendix.tsx");
/* harmony import */ var _Photo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Photo */ "./src/components/middle/message/Photo.tsx");
/* harmony import */ var _SponsoredMessageContextMenuContainer_async__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./SponsoredMessageContextMenuContainer.async */ "./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx");
/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./Video */ "./src/components/middle/message/Video.tsx");
/* harmony import */ var _SponsoredMessage_scss__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./SponsoredMessage.scss */ "./src/components/middle/message/SponsoredMessage.scss");

























const INTERSECTION_DEBOUNCE_MS = 200;
const SponsoredMessage = ({
  chatId,
  message,
  containerRef,
  theme,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  isDownloading,
  canAutoLoadMedia,
  canAutoPlayMedia
}) => {
  const {
    viewSponsoredMessage,
    openUrl,
    hideSponsoredMessages,
    clickSponsoredMessage,
    openMediaViewer,
    openAboutAdsModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_14__["default"])();
  // eslint-disable-next-line no-null/no-null
  const contentRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const shouldObserve = Boolean(message);
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const {
    observe: observeIntersection
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_12__.useIntersectionObserver)({
    rootRef: containerRef,
    debounceMs: INTERSECTION_DEBOUNCE_MS,
    threshold: 1
  });
  const {
    isContextMenuOpen,
    contextMenuAnchor,
    handleBeforeContextMenu,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_11__["default"])(ref, undefined, true, _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_ANDROID);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return shouldObserve ? observeIntersection(contentRef.current, target => {
      if (target.isIntersecting) {
        viewSponsoredMessage({
          peerId: chatId
        });
      }
    }) : undefined;
  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);
  const handleMouseDown = e => {
    (0,_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_8__.preventMessageInputBlur)(e);
    handleBeforeContextMenu(e);
  };
  const handleHideSponsoredMessage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    hideSponsoredMessages();
  });
  const {
    photo,
    video
  } = message ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageContent)(message) : {
    photo: undefined,
    video: undefined
  };
  const isGif = video?.isGif;
  const hasMedia = Boolean(photo || video);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    if (!message) return;
    clickSponsoredMessage({
      isMedia: photo || isGif ? true : undefined,
      peerId: chatId
    });
    openUrl({
      url: message.url,
      shouldSkipModal: true
    });
  });
  const handleOpenMedia = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    clickSponsoredMessage({
      isMedia: true,
      peerId: chatId
    });
    openMediaViewer({
      origin: _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.SponsoredMessage,
      chatId,
      isSponsoredMessage: true
    });
  });
  const handleOpenAboutAdsModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    openAboutAdsModal({
      chatId
    });
  });
  const extraPadding = 0;
  const sizeCalculations = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    let calculatedWidth;
    let contentWidth;
    const noMediaCorners = false;
    let style = '';
    if (photo || video) {
      let width;
      if (photo) {
        width = (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__.calculateMediaDimensions)({
          media: photo,
          isMobile
        }).width;
      } else if (video) {
        width = (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__.calculateMediaDimensions)({
          media: video,
          isMobile
        }).width;
      }
      if (width) {
        if (width < _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__.MIN_MEDIA_WIDTH_WITH_TEXT) {
          contentWidth = width;
        }
        calculatedWidth = Math.max((0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__.getMinMediaWidth)(), width);
      }
    }
    if (calculatedWidth) {
      style = `width: ${calculatedWidth + extraPadding}px`;
    }
    return {
      contentWidth,
      noMediaCorners,
      style
    };
  }, [photo, video, isMobile]);
  const {
    contentWidth,
    style
  } = sizeCalculations;
  if (!message || !message.content) {
    return undefined;
  }
  function renderContent() {
    if (!message) return undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "message-title message-peer",
      dir: "auto"
    }, message.title), Boolean(message.content?.text) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "text-content with-meta",
      dir: "auto",
      ref: contentRef
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "text-content-inner",
      dir: "auto"
    }, (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_7__.renderTextWithEntities)({
      text: message.content.text.text,
      entities: message.content.text.entities
    }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_19__["default"], {
      className: "SponsoredMessage__button",
      size: "tiny",
      color: "translucent",
      isRectangular: true,
      onClick: handleClick
    }, message.buttonText));
  }
  function renderMediaContent() {
    if (!message) return undefined;
    if (photo) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Photo__WEBPACK_IMPORTED_MODULE_21__["default"], {
        photo: photo,
        theme: theme,
        canAutoLoad: canAutoLoadMedia,
        isDownloading: isDownloading,
        observeIntersection: observeIntersectionForLoading,
        noAvatars: true,
        onClick: handleClick,
        forcedWidth: contentWidth
      });
    }
    if (video) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Video__WEBPACK_IMPORTED_MODULE_23__["default"], {
        video: video,
        observeIntersectionForLoading: observeIntersectionForLoading,
        observeIntersectionForPlaying: observeIntersectionForPlaying,
        noAvatars: true,
        canAutoLoad: canAutoLoadMedia,
        canAutoPlay: canAutoPlayMedia,
        isDownloading: isDownloading,
        onClick: isGif ? handleClick : handleOpenMedia,
        forcedWidth: contentWidth
      });
    }
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    key: "sponsored-message",
    className: "SponsoredMessage Message open sponsored-media-preview"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-content media has-shadow has-solid-background has-appendix",
    dir: "auto",
    style: style,
    onMouseDown: handleMouseDown,
    onContextMenu: handleContextMenu
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_18__["default"], {
    peerColor: message.peerColor,
    className: "content-inner",
    dir: "auto"
  }, renderMediaContent(), message.photo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_15__["default"], {
    size: "large",
    photo: message.photo,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('channel-avatar', lang.isRtl && 'is-rtl')
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('message-title message-type', hasMedia && 'has-media')
  }, message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage'), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_BadgeButton__WEBPACK_IMPORTED_MODULE_16__["default"], {
    onClick: handleOpenAboutAdsModal,
    className: "ad-about"
  }, lang('SponsoredMessageAdWhatIsThis'))), renderContent()), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageAppendix__WEBPACK_IMPORTED_MODULE_20__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-action-buttons"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_19__["default"], {
    className: "message-action-button",
    color: "translucent-white",
    round: true,
    size: "tiny",
    ariaLabel: lang('Close'),
    onClick: handleHideSponsoredMessage
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__["default"], {
    name: "close",
    className: "sponsored-action-icon"
  })), message.canReport && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_19__["default"], {
    className: "message-action-button",
    color: "translucent-white",
    round: true,
    size: "tiny",
    ariaLabel: lang('More'),
    onClick: handleContextMenu,
    onContextMenu: handleContextMenu
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__["default"], {
    name: "more",
    className: "sponsored-action-icon"
  })))), contextMenuAnchor && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_SponsoredMessageContextMenuContainer_async__WEBPACK_IMPORTED_MODULE_22__["default"], {
    isOpen: isContextMenuOpen,
    anchor: contextMenuAnchor,
    triggerRef: ref,
    message: message,
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId
}) => {
  const message = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectSponsoredMessage)(global, chatId);
  const activeDownloads = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectActiveDownloads)(global);
  const downloadableMedia = message ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageDownloadableMedia)(message) : undefined;
  const isDownloading = downloadableMedia && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getIsDownloading)(activeDownloads, downloadableMedia);
  return {
    message,
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTheme)(global),
    isDownloading,
    canAutoLoadMedia: message ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanAutoLoadMedia)(global, message) : undefined,
    canAutoPlayMedia: message ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanAutoPlayMedia)(global, message) : undefined
  };
})(SponsoredMessage)));

/***/ }),

/***/ "./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx":
/*!**************************************************************************************!*\
  !*** ./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const SponsoredMessageContextMenuContainerAsync = props => {
  const {
    isOpen
  } = props;
  const SponsoredMessageContextMenuContainer = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return SponsoredMessageContextMenuContainer ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(SponsoredMessageContextMenuContainer, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SponsoredMessageContextMenuContainerAsync);

/***/ }),

/***/ "./src/components/middle/message/Sticker.tsx":
/*!***************************************************!*\
  !*** ./src/components/middle/message/Sticker.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useOverlayPosition__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./hooks/useOverlayPosition */ "./src/components/middle/message/hooks/useOverlayPosition.ts");
/* harmony import */ var _common_AnimatedSticker__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../common/AnimatedSticker */ "./src/components/common/AnimatedSticker.tsx");
/* harmony import */ var _common_StickerView__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/StickerView */ "./src/components/common/StickerView.tsx");
/* harmony import */ var _ui_Portal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../ui/Portal */ "./src/components/ui/Portal.ts");
/* harmony import */ var _Sticker_module_scss__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Sticker.module.scss */ "./src/components/middle/message/Sticker.module.scss");



















// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42
const EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;
const Sticker = ({
  message,
  observeIntersection,
  observeIntersectionForPlaying,
  shouldLoop,
  shouldPlayEffect,
  withEffect,
  onStopEffect
}) => {
  const {
    showNotification,
    openStickerSet
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__["default"])();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);

  // eslint-disable-next-line no-null/no-null
  const effectRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const sticker = message.content.sticker;
  const {
    stickerSetInfo,
    isVideo,
    hasEffect
  } = sticker;
  const isMirrored = !message.isOutgoing;
  const mediaHash = sticker.isPreloadedGlobally ? undefined : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getStickerMediaHash)(sticker, isVideo && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_WEBM_SUPPORTED ? 'pictogram' : 'inline');
  const canLoad = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_9__.useIsIntersecting)(ref, observeIntersection);
  const canPlay = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_9__.useIsIntersecting)(ref, observeIntersectionForPlaying);
  const mediaHashEffect = `sticker${sticker.id}?size=f`;
  const effectBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_11__["default"])(mediaHashEffect, !canLoad || !hasEffect || !withEffect, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl);
  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const handleEffectEnded = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    stopPlayingEffect();
    onStopEffect?.();
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {
      startPlayingEffect();
    }
  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);
  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;
  (0,_hooks_useOverlayPosition__WEBPACK_IMPORTED_MODULE_13__["default"])({
    anchorRef: ref,
    overlayRef: effectRef,
    isMirrored,
    isDisabled: !shouldRenderEffect
  });
  const openModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    openStickerSet({
      stickerSetInfo: sticker.stickerSetInfo
    });
  });
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    if (hasEffect) {
      if (isPlayingEffect || !withEffect) {
        showNotification({
          message: lang('PremiumStickerTooltip'),
          action: {
            action: 'openStickerSet',
            payload: {
              stickerSetInfo: sticker.stickerSetInfo
            }
          },
          actionText: lang('ViewAction')
        });
        return;
      } else if (withEffect) {
        startPlayingEffect();
        return;
      }
    }
    openModal();
  });
  const isMemojiSticker = ('isMissing' in stickerSetInfo);
  const {
    width,
    height
  } = (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__.getStickerDimensions)(sticker, isMobile);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('media-inner', _Sticker_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].root, isMemojiSticker && _Sticker_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].inactive, hasEffect && isMirrored && _Sticker_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].mirrored);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: className,
    style: `width: ${width}px; height: ${height}px;`,
    onClick: !isMemojiSticker ? handleClick : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_StickerView__WEBPACK_IMPORTED_MODULE_15__["default"], {
    containerRef: ref,
    sticker: sticker,
    fullMediaHash: mediaHash,
    fullMediaClassName: "full-media",
    size: width,
    shouldLoop: shouldLoop,
    noLoad: !canLoad,
    noPlay: !canPlay,
    withSharedAnimation: true
  }), shouldRenderEffect && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Portal__WEBPACK_IMPORTED_MODULE_16__["default"], null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedSticker__WEBPACK_IMPORTED_MODULE_14__["default"], {
    ref: effectRef,
    key: mediaHashEffect,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_Sticker_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].effect, isMirrored && _Sticker_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].mirrored),
    tgsUrl: effectBlobUrl,
    size: width * EFFECT_SIZE_MULTIPLIER,
    play: true,
    isLowPriority: true,
    noLoop: true,
    onEnded: handleEffectEnded
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sticker);

/***/ }),

/***/ "./src/components/middle/message/Story.tsx":
/*!*************************************************!*\
  !*** ./src/components/middle/message/Story.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _BaseStory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BaseStory */ "./src/components/middle/message/BaseStory.tsx");




function Story({
  message,
  story,
  isProtected,
  isConnected
}) {
  const {
    storyData
  } = message.content;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_BaseStory__WEBPACK_IMPORTED_MODULE_3__["default"], {
    story: story || storyData,
    isProtected: isProtected,
    isConnected: isConnected
  });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  message
}) => {
  const {
    id,
    peerId
  } = message.content.storyData;
  return {
    story: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeerStory)(global, peerId, id),
    isConnected: global.connectionState === 'connectionStateReady'
  };
})(Story)));

/***/ }),

/***/ "./src/components/middle/message/StoryMention.tsx":
/*!********************************************************!*\
  !*** ./src/components/middle/message/StoryMention.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useEnsureStory */ "./src/hooks/useEnsureStory.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");










function StoryMention({
  message,
  story,
  peer,
  isUnread,
  targetUser
}) {
  const {
    openStoryViewer
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const {
    storyData
  } = message.content;
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    openStoryViewer({
      peerId: story.peerId,
      storyId: story.id,
      isSinglePeer: true,
      isSingleStory: true
    });
  });
  const isDeleted = story && 'isDeleted' in story;
  const isLoaded = story && 'content' in story;
  const video = isLoaded ? story.content.video : undefined;
  const imageHash = isLoaded ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getStoryMediaHash)(story, 'pictogram') : undefined;
  const imgBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_8__["default"])(imageHash);
  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;
  (0,_hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_6__["default"])(storyData.peerId, storyData.id, story);
  function getTitle() {
    if (peer && 'isSelf' in peer && peer.isSelf) {
      return isDeleted ? lang('ExpiredStoryMentioned', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFirstOrLastName)(targetUser)) : lang('StoryYouMentionedTitle', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFirstOrLastName)(targetUser));
    }
    return isDeleted ? lang('ExpiredStoryMention') : lang('StoryMentionedTitle', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPeerTitle)(lang, peer));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview'),
    tabIndex: 0,
    role: "button",
    onClick: isLoaded ? handleClick : undefined
  }, isLoaded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "story-media-wrapper"
  }, thumbUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: thumbUrl,
    alt: "",
    className: "story-media"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "story-title"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__["default"])(getTitle(), ['emoji', 'simple_markdown'])));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  message
}) => {
  const {
    id,
    peerId
  } = message.content.storyData;
  const lastReadId = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectPeerStories)(global, peerId)?.lastReadId;
  return {
    story: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectPeerStory)(global, peerId, id),
    peer: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectPeer)(global, peerId),
    targetUser: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, message.chatId),
    isUnread: Boolean(lastReadId && lastReadId < id)
  };
})(StoryMention)));

/***/ }),

/***/ "./src/components/middle/message/helpers/buildContentClassName.ts":
/*!************************************************************************!*\
  !*** ./src/components/middle/message/helpers/buildContentClassName.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildContentClassName: () => (/* binding */ buildContentClassName)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _getSingularPaidMedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getSingularPaidMedia */ "./src/components/middle/message/helpers/getSingularPaidMedia.ts");



function buildContentClassName(message, album, {
  poll,
  hasSubheader,
  isCustomShape,
  isLastInGroup,
  asForwarded,
  hasThread,
  forceSenderName,
  hasCommentCounter,
  hasCommentButton,
  hasActionButton,
  hasReactions,
  isGeoLiveActive,
  withVoiceTranscription,
  peerColorClass,
  hasOutsideReactions
} = {}) {
  const {
    paidMedia
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageContent)(message);
  const {
    photo: paidMediaPhoto,
    video: paidMediaVideo
  } = (0,_getSingularPaidMedia__WEBPACK_IMPORTED_MODULE_2__["default"])(paidMedia);
  const content = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageContent)(message);
  const {
    photo = paidMediaPhoto,
    video = paidMediaVideo,
    audio,
    voice,
    document,
    webPage,
    contact,
    location,
    invoice,
    storyData,
    giveaway,
    giveawayResults
  } = content;
  const text = album?.hasMultipleCaptions ? undefined : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageContent)(album?.captionMessage || message).text;
  const hasFactCheck = Boolean(message.factCheck?.text);
  const isRoundVideo = video?.mediaType === 'video' && video.isRound;
  const isInvertedMedia = message.isInvertedMedia;
  const isInvertibleMedia = photo || video && !isRoundVideo || album || webPage;
  const classNames = [_config__WEBPACK_IMPORTED_MODULE_0__.MESSAGE_CONTENT_CLASS_NAME];
  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;
  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;
  const isMediaWithNoText = isMedia && !hasText;
  const hasInlineKeyboard = Boolean(message.inlineButtons);
  const isViaBot = Boolean(message.viaBotId);
  const hasFooter = (() => {
    if (isInvertedMedia && isInvertibleMedia) {
      if (hasReactions && !hasOutsideReactions) return true;
      if (hasFactCheck) return true;
      if (webPage && hasText) return true;
      return false;
    }
    return hasText;
  })();
  if (peerColorClass) {
    classNames.push(peerColorClass);
  }
  if (!isMedia && message.emojiOnlyCount) {
    classNames.push('emoji-only');
    if (message.emojiOnlyCount <= _config__WEBPACK_IMPORTED_MODULE_0__.EMOJI_SIZES) {
      classNames.push(`emoji-only-${message.emojiOnlyCount}`);
    }
  } else if (hasText) {
    classNames.push('text');
  } else {
    classNames.push('no-text');
  }
  if (!Object.keys(content).length) {
    classNames.push('unsupported');
  }
  if (hasActionButton) {
    classNames.push('has-action-button');
  }
  if (isCustomShape) {
    classNames.push('custom-shape');
    if (isRoundVideo) {
      classNames.push('round');
    }
    if (hasCommentCounter) {
      classNames.push('has-comment-counter');
    }
  }
  if (isMedia && !withVoiceTranscription) {
    classNames.push('media');
  } else if (video) {
    classNames.push('video');
  } else if (audio) {
    classNames.push('audio');
  } else if (voice) {
    classNames.push('voice');
    if (withVoiceTranscription) {
      classNames.push('with-voice-transcription');
    }
  } else if (document) {
    classNames.push('document');
  } else if (contact) {
    classNames.push('contact');
  } else if (poll) {
    classNames.push('poll');
  } else if (giveaway || giveawayResults) {
    classNames.push('giveaway');
  } else if (webPage) {
    classNames.push('web-page');
    if (webPage.photo || webPage.video) {
      classNames.push('media');
    }
    if (webPage.document) {
      classNames.push('document');
    }
    if (webPage.gift) {
      classNames.push('gift');
    }
  }
  if (invoice && !invoice.extendedMedia) {
    classNames.push('invoice');
  }
  if (storyData) {
    classNames.push('story');
  }
  if (asForwarded) {
    classNames.push('is-forwarded');
  }
  if (hasSubheader) {
    classNames.push('has-subheader');
  }
  if (hasThread) {
    classNames.push('has-replies');
  }
  if (hasReactions) {
    classNames.push('has-reactions');
  }
  if (hasOutsideReactions) {
    classNames.push('has-outside-reactions');
  }
  if (isViaBot) {
    classNames.push('is-via-bot');
  }
  if (forceSenderName) {
    classNames.push('force-sender-name');
  }
  if (!isCustomShape) {
    classNames.push('has-shadow');
    if (isMedia && hasThread) {
      classNames.push('has-background');
    }
    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck || withVoiceTranscription) {
      classNames.push('has-solid-background');
    }
    if (hasFactCheck) {
      classNames.push('has-fact-check');
    }
    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasCommentButton)) {
      classNames.push('has-appendix');
    }
  }
  if (isInvertibleMedia && isInvertedMedia) {
    classNames.push('is-inverted-media');
  }
  if (hasFooter) {
    classNames.push('has-footer');
  } else {
    classNames.push('no-footer');
  }
  return classNames.join(' ');
}

/***/ }),

/***/ "./src/components/middle/message/helpers/calculateAlbumLayout.ts":
/*!***********************************************************************!*\
  !*** ./src/components/middle/message/helpers/calculateAlbumLayout.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlbumRectPart: () => (/* binding */ AlbumRectPart),
/* harmony export */   calculateAlbumLayout: () => (/* binding */ calculateAlbumLayout)
/* harmony export */ });
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/math */ "./src/util/math.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _mediaDimensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mediaDimensions */ "./src/components/middle/message/helpers/mediaDimensions.ts");
/* eslint-disable no-bitwise */
// Based on
// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp
// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83





const AlbumRectPart = {
  None: 0,
  Top: 1,
  Right: 2,
  Bottom: 4,
  Left: 8
};
function getRatios(messages, isSingleMessage, isMobile) {
  const isOutgoing = messages[0].isOutgoing;
  const allMedia = (isSingleMessage ? messages[0].content.paidMedia.extendedMedia.map(media => 'mediaType' in media ? media : media.photo || media.video) : messages.map(message => (0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.getMessageContent)(message).photo || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.getMessageContent)(message).video)).filter(Boolean);
  return allMedia.map(media => {
    const dimensions = (0,_mediaDimensions__WEBPACK_IMPORTED_MODULE_3__.calculateMediaDimensions)({
      media,
      isOwn: isOutgoing,
      isMobile
    });
    return dimensions.width / dimensions.height;
  });
}
function getProportions(ratios) {
  return ratios.map(ratio => ratio > 1.2 ? 'w' : ratio < 0.8 ? 'n' : 'q').join('');
}
function getAverageRatio(ratios) {
  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;
}
function accumulate(list, initValue) {
  return list.reduce((accumulator, item) => accumulator + item, initValue);
}
function cropRatios(ratios, averageRatio) {
  return ratios.map(ratio => {
    return averageRatio > 1.1 ? (0,_util_math__WEBPACK_IMPORTED_MODULE_1__.clamp)(ratio, 1, 2.75) : (0,_util_math__WEBPACK_IMPORTED_MODULE_1__.clamp)(ratio, 0.6667, 1);
  });
}
function calculateContainerSize(layout) {
  const styles = {
    width: 0,
    height: 0
  };
  layout.forEach(({
    dimensions,
    sides
  }) => {
    if (sides & AlbumRectPart.Right) {
      styles.width = dimensions.width + dimensions.x;
    }
    if (sides & AlbumRectPart.Bottom) {
      styles.height = dimensions.height + dimensions.y;
    }
  });
  return styles;
}
function calculateAlbumLayout(isOwn, noAvatars, album, isMobile) {
  const spacing = 2;
  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);
  const proportions = getProportions(ratios);
  const averageRatio = getAverageRatio(ratios);
  const albumCount = ratios.length;
  const forceCalc = ratios.some(ratio => ratio > 2);
  const maxWidth = (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_2__.getAvailableWidth)(isOwn, false, noAvatars, isMobile);
  const maxHeight = maxWidth;
  let layout;
  const params = {
    ratios,
    proportions,
    averageRatio,
    maxWidth,
    minWidth: 100,
    maxHeight,
    spacing
  };
  if (albumCount >= 5 || forceCalc) {
    layout = layoutWithComplexLayouter(params);
  } else if (albumCount === 2) {
    layout = layoutTwo(params);
  } else if (albumCount === 3) {
    layout = layoutThree(params);
  } else {
    layout = layoutFour(params);
  }
  return {
    layout,
    containerStyle: calculateContainerSize(layout)
  };
}
function layoutWithComplexLayouter({
  ratios: originalRatios,
  averageRatio,
  maxWidth,
  minWidth,
  spacing,
  maxHeight = 4 * maxWidth / 3
}) {
  const ratios = cropRatios(originalRatios, averageRatio);
  const count = originalRatios.length;
  const result = new Array(count);
  const attempts = [];
  const multiHeight = (offset, attemptCount) => {
    const attemptRatios = ratios.slice(offset, offset + attemptCount);
    const sum = accumulate(attemptRatios, 0);
    return (maxWidth - (attemptCount - 1) * spacing) / sum;
  };
  const pushAttempt = lineCounts => {
    const heights = [];
    let offset = 0;
    lineCounts.forEach(currentCount => {
      heights.push(multiHeight(offset, currentCount));
      offset += currentCount;
    });
    attempts.push({
      lineCounts,
      heights
    });
  };
  for (let first = 1; first !== count; ++first) {
    const second = count - first;
    if (first <= 3 && second <= 3) {
      pushAttempt([first, second]);
    }
  }
  for (let first = 1; first !== count - 1; ++first) {
    for (let second = 1; second !== count - first; ++second) {
      const third = count - first - second;
      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {
        pushAttempt([first, second, third]);
      }
    }
  }
  for (let first = 1; first !== count - 1; ++first) {
    for (let second = 1; second !== count - first; ++second) {
      for (let third = 1; third !== count - first - second; ++third) {
        const fourth = count - first - second - third;
        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {
          pushAttempt([first, second, third, fourth]);
        }
      }
    }
  }
  let optimalAttempt;
  let optimalDiff = 0;
  for (let i = 0; i < attempts.length; i++) {
    const {
      heights,
      lineCounts
    } = attempts[i];
    const lineCount = lineCounts.length;
    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);
    const minLineHeight = Math.min(...heights);
    const bad1 = minLineHeight < minWidth ? 1.5 : 1;
    const bad2 = (() => {
      for (let line = 1; line !== lineCount; ++line) {
        if (lineCounts[line - 1] > lineCounts[line]) {
          return 1.5;
        }
      }
      return 1;
    })();
    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;
    if (!optimalAttempt || diff < optimalDiff) {
      optimalAttempt = attempts[i];
      optimalDiff = diff;
    }
  }
  const optimalCounts = optimalAttempt.lineCounts;
  const optimalHeights = optimalAttempt.heights;
  const rowCount = optimalCounts.length;
  let index = 0;
  let y = 0;
  for (let row = 0; row !== rowCount; ++row) {
    const colCount = optimalCounts[row];
    const lineHeight = optimalHeights[row];
    const height = Math.round(lineHeight);
    let x = 0;
    for (let col = 0; col !== colCount; ++col) {
      const sides = AlbumRectPart.None | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None) | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None) | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None) | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);
      const ratio = ratios[index];
      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);
      result[index] = {
        dimensions: {
          x,
          y,
          width,
          height
        },
        sides
      };
      x += width + spacing;
      ++index;
    }
    y += height + spacing;
  }
  return result;
}
function layoutTwo(params) {
  const {
    ratios,
    proportions,
    averageRatio
  } = params;
  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2 ? layoutTwoTopBottom(params) : proportions === 'ww' || proportions === 'qq' ? layoutTwoLeftRightEqual(params) : layoutTwoLeftRight(params);
}
function layoutTwoTopBottom(params) {
  const {
    ratios,
    maxWidth,
    spacing,
    maxHeight
  } = params;
  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));
  return [{
    dimensions: {
      x: 0,
      y: 0,
      width: maxWidth,
      height
    },
    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right
  }, {
    dimensions: {
      x: 0,
      y: height + spacing,
      width: maxWidth,
      height
    },
    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right
  }];
}
function layoutTwoLeftRightEqual(params) {
  const {
    ratios,
    maxWidth,
    spacing,
    maxHeight
  } = params;
  const width = (maxWidth - spacing) / 2;
  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));
  return [{
    dimensions: {
      x: 0,
      y: 0,
      width,
      height
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom
  }, {
    dimensions: {
      x: width + spacing,
      y: 0,
      width,
      height
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom
  }];
}
function layoutTwoLeftRight(params) {
  const {
    ratios,
    minWidth,
    maxWidth,
    spacing,
    maxHeight
  } = params;
  const minimalWidth = Math.round(1.5 * minWidth);
  const secondWidth = Math.min(Math.round(Math.max(0.4 * (maxWidth - spacing), (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]))), maxWidth - spacing - minimalWidth);
  const firstWidth = maxWidth - secondWidth - spacing;
  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));
  return [{
    dimensions: {
      x: 0,
      y: 0,
      width: firstWidth,
      height
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom
  }, {
    dimensions: {
      x: firstWidth + spacing,
      y: 0,
      width: secondWidth,
      height
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom
  }];
}
function layoutThree(params) {
  const {
    proportions
  } = params;
  return proportions[0] === 'n' ? layoutThreeLeftAndOther(params) : layoutThreeTopAndOther(params);
}
function layoutThreeLeftAndOther(params) {
  const {
    maxHeight,
    spacing,
    ratios,
    maxWidth,
    minWidth
  } = params;
  const firstHeight = maxHeight;
  const thirdHeight = Math.round(Math.min((maxHeight - spacing) / 2, ratios[1] * (maxWidth - spacing) / (ratios[2] + ratios[1])));
  const secondHeight = firstHeight - thirdHeight - spacing;
  const rightWidth = Math.max(minWidth, Math.round(Math.min((maxWidth - spacing) / 2, Math.min(thirdHeight * ratios[2], secondHeight * ratios[1]))));
  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);
  return [{
    dimensions: {
      x: 0,
      y: 0,
      width: leftWidth,
      height: firstHeight
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom
  }, {
    dimensions: {
      x: leftWidth + spacing,
      y: 0,
      width: rightWidth,
      height: secondHeight
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Right
  }, {
    dimensions: {
      x: leftWidth + spacing,
      y: secondHeight + spacing,
      width: rightWidth,
      height: thirdHeight
    },
    sides: AlbumRectPart.Bottom | AlbumRectPart.Right
  }];
}
function layoutThreeTopAndOther(params) {
  const {
    maxWidth,
    ratios,
    maxHeight,
    spacing
  } = params;
  const firstWidth = maxWidth;
  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));
  const secondWidth = (maxWidth - spacing) / 2;
  const secondHeight = Math.min(maxHeight - firstHeight - spacing, Math.round(Math.min(secondWidth / ratios[1], secondWidth / ratios[2])));
  const thirdWidth = firstWidth - secondWidth - spacing;
  return [{
    dimensions: {
      x: 0,
      y: 0,
      width: firstWidth,
      height: firstHeight
    },
    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right
  }, {
    dimensions: {
      x: 0,
      y: firstHeight + spacing,
      width: secondWidth,
      height: secondHeight
    },
    sides: AlbumRectPart.Bottom | AlbumRectPart.Left
  }, {
    dimensions: {
      x: secondWidth + spacing,
      y: firstHeight + spacing,
      width: thirdWidth,
      height: secondHeight
    },
    sides: AlbumRectPart.Bottom | AlbumRectPart.Right
  }];
}
function layoutFour(params) {
  const {
    proportions
  } = params;
  return proportions[0] === 'w' ? layoutFourTopAndOther(params) : layoutFourLeftAndOther(params);
}
function layoutFourTopAndOther({
  maxWidth,
  ratios,
  spacing,
  maxHeight,
  minWidth
}) {
  const w = maxWidth;
  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));
  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));
  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));
  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));
  const w1 = w - w0 - w2 - 2 * spacing;
  const h1 = Math.min(maxHeight - h0 - spacing, h);
  return [{
    dimensions: {
      x: 0,
      y: 0,
      width: w,
      height: h0
    },
    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right
  }, {
    dimensions: {
      x: 0,
      y: h0 + spacing,
      width: w0,
      height: h1
    },
    sides: AlbumRectPart.Bottom | AlbumRectPart.Left
  }, {
    dimensions: {
      x: w0 + spacing,
      y: h0 + spacing,
      width: w1,
      height: h1
    },
    sides: AlbumRectPart.Bottom
  }, {
    dimensions: {
      x: w0 + spacing + w1 + spacing,
      y: h0 + spacing,
      width: w2,
      height: h1
    },
    sides: AlbumRectPart.Right | AlbumRectPart.Bottom
  }];
}
function layoutFourLeftAndOther({
  maxHeight,
  ratios,
  maxWidth,
  spacing,
  minWidth
}) {
  const h = maxHeight;
  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));
  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));
  const h0 = Math.round(w / ratios[1]);
  const h1 = Math.round(w / ratios[2]);
  const h2 = h - h0 - h1 - 2 * spacing;
  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));
  return [{
    dimensions: {
      x: 0,
      y: 0,
      width: w0,
      height: h
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom
  }, {
    dimensions: {
      x: w0 + spacing,
      y: 0,
      width: w1,
      height: h0
    },
    sides: AlbumRectPart.Top | AlbumRectPart.Right
  }, {
    dimensions: {
      x: w0 + spacing,
      y: h0 + spacing,
      width: w1,
      height: h1
    },
    sides: AlbumRectPart.Right
  }, {
    dimensions: {
      x: w0 + spacing,
      y: h0 + h1 + 2 * spacing,
      width: w1,
      height: h2
    },
    sides: AlbumRectPart.Bottom | AlbumRectPart.Right
  }];
}

/***/ }),

/***/ "./src/components/middle/message/helpers/getSingularPaidMedia.ts":
/*!***********************************************************************!*\
  !*** ./src/components/middle/message/helpers/getSingularPaidMedia.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getSingularPaidMedia)
/* harmony export */ });
function getSingularPaidMedia(media) {
  if (!media || media.extendedMedia.length !== 1) {
    return {
      photo: undefined,
      video: undefined
    };
  }
  const singularMedia = media.extendedMedia[0];
  const isPreview = ('mediaType' in singularMedia);
  const photo = isPreview ? !singularMedia.duration ? singularMedia : undefined : singularMedia.photo;
  const video = isPreview ? singularMedia.duration ? singularMedia : undefined : singularMedia.video;
  return {
    photo,
    video
  };
}

/***/ }),

/***/ "./src/components/middle/message/hocs/withSelectControl.tsx":
/*!******************************************************************!*\
  !*** ./src/components/middle/message/hocs/withSelectControl.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ withSelectControl)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");






function withSelectControl(WrappedComponent) {
  // eslint-disable-next-line @typescript-eslint/comma-dangle
  const ComponentWithSelectControl = props => {
    const {
      isInSelectMode,
      isSelected,
      dimensions,
      clickArg
    } = props;
    const {
      toggleMessageSelection
    } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
    const handleMessageSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
      e.stopPropagation();
      toggleMessageSelection({
        messageId: clickArg,
        withShift: e?.shiftKey
      });
    });
    const newProps = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
      const {
        dimensions: dims,
        onClick
      } = props;
      return {
        ...props,
        isInSelectMode,
        isSelected,
        dimensions: {
          ...dims,
          x: 0,
          y: 0
        },
        onClick: isInSelectMode ? undefined : onClick
      };
    }, [props, isInSelectMode, isSelected]);
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('album-item-select-wrapper', isSelected && 'is-selected'),
      style: dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : '',
      onClick: isInSelectMode ? handleMessageSelect : undefined
    }, isInSelectMode && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "message-select-control"
    }, isSelected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__["default"], {
      name: "select"
    })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(WrappedComponent, newProps));
  };
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, ownProps) => {
    const {
      clickArg,
      noSelectControls
    } = ownProps;
    return {
      isInSelectMode: !noSelectControls && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectIsInSelectMode)(global),
      isSelected: !noSelectControls && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectIsMessageSelected)(global, clickArg)
    };
  })(ComponentWithSelectControl));
}

/***/ }),

/***/ "./src/components/middle/message/hooks/useDetectChatLanguage.ts":
/*!**********************************************************************!*\
  !*** ./src/components/middle/message/hooks/useDetectChatLanguage.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useDetectChatLanguage)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_primitives_LimitedMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../util/primitives/LimitedMap */ "./src/util/primitives/LimitedMap.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/schedulers */ "./src/util/schedulers.ts");





// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35
const MIN_MESSAGES_CHECKED = 8;
const MIN_TRANSLATABLE_RATIO = 0.3;
const MIN_DETECTABLE_RATIO = 0.6;
const THROTTLE_DELAY = 1000;
const MESSAGES_LIMIT = 150;
const CHAT_STATS = new Map();
function useDetectChatLanguage(message, detectedLanguage, isDisabled, getIsReady) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled || getIsReady && !getIsReady()) return;
    const isTranslatable = Boolean(message.content.text?.text.length);
    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);
  }, [message, detectedLanguage, isDisabled, getIsReady]);
}
const throttledMakeChatDecision = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_3__.throttle)(makeChatDecision, THROTTLE_DELAY);
function processMessageMetadata(chatId, id, isTranslatable, detectedLanguage) {
  const chatStats = CHAT_STATS.get(chatId) || new _util_primitives_LimitedMap__WEBPACK_IMPORTED_MODULE_2__["default"](MESSAGES_LIMIT);
  const previousMetadata = chatStats.get(id);
  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage && previousMetadata.isTranslatable === isTranslatable) {
    return;
  }
  chatStats.set(id, {
    id,
    isTranslatable,
    detectedLanguage
  });
  CHAT_STATS.set(chatId, chatStats);
  throttledMakeChatDecision(chatId);
}
function makeChatDecision(chatId) {
  const {
    updateChatDetectedLanguage
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const chatStats = CHAT_STATS.get(chatId);
  if (!chatStats) {
    return;
  }
  const messagesChecked = chatStats.size;
  if (messagesChecked < MIN_MESSAGES_CHECKED) {
    return;
  }
  let translatableCount = 0;
  let detectableCount = 0;
  const languageOccurrences = new Map();
  for (const metadata of chatStats.values()) {
    if (metadata.isTranslatable) {
      translatableCount++;
    }
    if (metadata.detectedLanguage) {
      detectableCount++;
    }
    const language = metadata.detectedLanguage;
    if (language) {
      const occurrences = languageOccurrences.get(language) || 0;
      languageOccurrences.set(language, occurrences + 1);
    }
  }
  const translatableRatio = translatableCount / messagesChecked;
  const detectableRatio = detectableCount / messagesChecked;
  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {
    return;
  }
  const mostFrequentLanguage = Array.from(languageOccurrences.entries()).sort(([, a], [, b]) => b - a)[0][0];
  updateChatDetectedLanguage({
    chatId,
    detectedLanguage: mostFrequentLanguage
  });
}

/***/ }),

/***/ "./src/components/middle/message/hooks/useInnerHandlers.ts":
/*!*****************************************************************!*\
  !*** ./src/components/middle/message/hooks/useInnerHandlers.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useInnerHandlers)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers_replies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../global/helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");





function useInnerHandlers({
  lang,
  selectMessage,
  message,
  chatId,
  threadId,
  isInDocumentGroup,
  asForwarded,
  isScheduled,
  album,
  senderPeer,
  botSender,
  messageTopic,
  isTranslatingChat,
  story,
  isReplyPrivate,
  isRepliesChat,
  isSavedMessages
}) {
  const {
    openChat,
    showNotification,
    focusMessage,
    openMediaViewer,
    openAudioPlayer,
    markMessagesRead,
    cancelUploadMedia,
    sendPollVote,
    openForwardMenu,
    openChatLanguageModal,
    openThread,
    openStoryViewer,
    searchChatMediaMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)();
  const {
    id: messageId,
    forwardInfo,
    groupedId,
    content: {
      paidMedia
    }
  } = message;
  const {
    replyToMsgId,
    replyToPeerId,
    replyToTopId,
    isQuote,
    quoteText
  } = (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_3__.getMessageReplyInfo)(message) || {};
  const handleSenderClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!senderPeer) {
      showNotification({
        message: lang('HidAccount')
      });
      return;
    }
    if (asForwarded && forwardInfo?.channelPostId) {
      focusMessage({
        chatId: senderPeer.id,
        messageId: forwardInfo.channelPostId
      });
    } else {
      openChat({
        id: senderPeer.id
      });
    }
  });
  const handleViaBotClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!botSender) {
      return;
    }
    openChat({
      id: botSender.id
    });
  });
  const handleReplyClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!replyToMsgId || isReplyPrivate) {
      showNotification({
        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate')
      });
      return;
    }
    focusMessage({
      chatId: replyToPeerId || chatId,
      threadId: isRepliesChat ? replyToTopId : threadId,
      // Open comments from Replies bot, otherwise, keep current thread
      messageId: replyToMsgId,
      replyMessageId: replyToPeerId ? undefined : messageId,
      noForumTopicPanel: !replyToPeerId,
      // Open topic panel for cross-chat replies
      ...(isQuote && {
        quote: quoteText?.text
      })
    });
  });
  const handleMediaClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    openMediaViewer({
      chatId,
      threadId,
      messageId,
      origin: isScheduled ? _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.ScheduledInline : _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.Inline
    });
  });
  const openMediaViewerWithPhotoOrVideo = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(withDynamicLoading => {
    if (paidMedia && !paidMedia.isBought) return;
    if (withDynamicLoading) {
      searchChatMediaMessages({
        chatId,
        threadId,
        currentMediaMessageId: messageId
      });
    }
    openMediaViewer({
      chatId,
      threadId,
      messageId,
      origin: isScheduled ? _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.ScheduledInline : _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.Inline,
      withDynamicLoading
    });
  });
  const handlePhotoMediaClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    const withDynamicLoading = !isScheduled && !paidMedia;
    openMediaViewerWithPhotoOrVideo(withDynamicLoading);
  });
  const handleVideoMediaClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    const isGif = message.content?.video?.isGif;
    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;
    openMediaViewerWithPhotoOrVideo(withDynamicLoading);
  });
  const handleAudioPlay = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    openAudioPlayer({
      chatId,
      messageId
    });
  });
  const handleAlbumMediaClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])((albumMessageId, albumIndex) => {
    if (paidMedia && !paidMedia.isBought) return;
    searchChatMediaMessages({
      chatId,
      threadId,
      currentMediaMessageId: messageId
    });
    openMediaViewer({
      chatId,
      threadId,
      messageId: albumMessageId,
      mediaIndex: albumIndex,
      origin: isScheduled ? _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.ScheduledAlbum : _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.Album,
      withDynamicLoading: !paidMedia
    });
  });
  const handleReadMedia = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    markMessagesRead({
      messageIds: [messageId]
    });
  });
  const handleCancelUpload = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    cancelUploadMedia({
      chatId,
      messageId
    });
  });
  const handleVoteSend = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(options => {
    sendPollVote({
      chatId,
      messageId,
      options
    });
  });
  const handleGroupForward = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    openForwardMenu({
      fromChatId: chatId,
      groupedId
    });
  });
  const handleForward = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (album && album.messages) {
      const messageIds = album.messages.map(({
        id
      }) => id);
      openForwardMenu({
        fromChatId: chatId,
        messageIds
      });
    } else {
      openForwardMenu({
        fromChatId: chatId,
        messageIds: [messageId]
      });
    }
  });
  const handleFocus = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    focusMessage({
      chatId,
      threadId: _api_types__WEBPACK_IMPORTED_MODULE_1__.MAIN_THREAD_ID,
      messageId
    });
  });
  const handleFocusForwarded = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    const originalChatId = isSavedMessages && forwardInfo.savedFromPeerId || forwardInfo.fromChatId;
    if (isInDocumentGroup) {
      focusMessage({
        chatId: originalChatId,
        groupedId,
        groupedChatId: chatId,
        messageId: forwardInfo.fromMessageId
      });
      return;
    }
    if (replyToPeerId && replyToTopId) {
      focusMessage({
        chatId: replyToPeerId,
        threadId: replyToTopId,
        messageId: forwardInfo.fromMessageId
      });
    } else {
      focusMessage({
        chatId: originalChatId,
        messageId: forwardInfo.fromMessageId
      });
    }
  });
  const selectWithGroupedId = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    e.stopPropagation();
    selectMessage(e, groupedId);
  });
  const handleTranslationClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    e.stopPropagation();
    openChatLanguageModal({
      chatId,
      messageId: !isTranslatingChat ? messageId : undefined
    });
  });
  const handleOpenThread = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    openThread({
      chatId: message.chatId,
      threadId: message.id
    });
  });
  const handleTopicChipClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!messageTopic) return;
    focusMessage({
      chatId: replyToPeerId || chatId,
      threadId: messageTopic.id,
      messageId
    });
  });
  const handleStoryClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!story) return;
    openStoryViewer({
      peerId: story.peerId,
      storyId: story.id,
      isSingleStory: true
    });
  });
  return {
    handleSenderClick,
    handleViaBotClick,
    handleReplyClick,
    handleMediaClick,
    handleAudioPlay,
    handleAlbumMediaClick,
    handlePhotoMediaClick,
    handleVideoMediaClick,
    handleMetaClick: selectWithGroupedId,
    handleTranslationClick,
    handleOpenThread,
    handleReadMedia,
    handleCancelUpload,
    handleVoteSend,
    handleGroupForward,
    handleForward,
    handleFocus,
    handleFocusForwarded,
    handleDocumentGroupSelectAll: selectWithGroupedId,
    handleTopicChipClick,
    handleStoryClick
  };
}

/***/ }),

/***/ "./src/components/middle/message/hooks/useOuterHandlers.ts":
/*!*****************************************************************!*\
  !*** ./src/components/middle/message/hooks/useOuterHandlers.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useOuterHandlers)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_captureEvents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/captureEvents */ "./src/util/captureEvents.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../util/windowSize */ "./src/util/windowSize.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../helpers/preventMessageInputBlur */ "./src/components/middle/helpers/preventMessageInputBlur.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../hooks/useThrottledCallback */ "./src/hooks/useThrottledCallback.ts");











const ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;
const SWIPE_ANIMATION_DURATION = 150;
const QUICK_REACTION_DOUBLE_TAP_DELAY = 200;
const QUICK_REACTION_AREA_WIDTH = 3 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_7__.REM;
const QUICK_REACTION_AREA_HEIGHT = Number(_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_7__.REM);
const GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';
function useOuterHandlers(selectMessage, containerRef, messageId, isInSelectMode, canReply, isProtected, onContextMenu, handleBeforeContextMenu, chatId, isContextMenuShown, quickReactionRef, shouldHandleMouseLeave, getIsMessageListReady) {
  const {
    updateDraftReplyInfo,
    sendDefaultReaction
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [isSwiped, markSwiped, unmarkSwiped] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const doubleTapTimeoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  function handleMouseDown(e) {
    (0,_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_8__.preventMessageInputBlur)(e);
    handleBeforeContextMenu(e);
  }
  const handleMouseMove = (0,_hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(e => {
    const quickReactionContainer = quickReactionRef.current;
    if (!quickReactionContainer) return;
    const {
      clientX,
      clientY
    } = e;
    const {
      x: quickReactionX,
      width: quickReactionWidth,
      y: quickReactionY,
      height: quickReactionHeight
    } = quickReactionContainer.getBoundingClientRect();
    const x = quickReactionX + quickReactionWidth / 2;
    const y = quickReactionY + quickReactionHeight / 2;
    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;
    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;
    if (isVisibleX && isVisibleY) {
      markQuickReactionVisible();
    } else {
      unmarkQuickReactionVisible();
    }
  }, [quickReactionRef], _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure);
  function handleSendQuickReaction(e) {
    e.stopPropagation();
    sendDefaultReaction({
      chatId,
      messageId
    });
  }
  function handleTap(e) {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_ANDROID) {
      const target = e.target;
      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {
        return;
      }
      if (_util_windowSize__WEBPACK_IMPORTED_MODULE_6__["default"].getIsKeyboardVisible()) {
        setTimeout(() => {
          onContextMenu(e);
        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);
      } else {
        onContextMenu(e);
      }
    }
  }
  function handleDoubleTap() {
    sendDefaultReaction({
      chatId,
      messageId
    });
  }
  function handleClick(e) {
    if (isInSelectMode) {
      selectMessage(e);
      return;
    }
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV) return;
    if (doubleTapTimeoutRef.current) {
      clearInterval(doubleTapTimeoutRef.current);
      doubleTapTimeoutRef.current = undefined;
      handleDoubleTap();
      return;
    }
    doubleTapTimeoutRef.current = setTimeout(() => {
      doubleTapTimeoutRef.current = undefined;
      handleTap(e);
    }, QUICK_REACTION_DOUBLE_TAP_DELAY);
  }
  function handleContextMenu(e) {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_ANDROID) {
      if (e.target.matches('a[href]') || isContextMenuShown) {
        return;
      }
      e.preventDefault();
      selectMessage();
    } else {
      onContextMenu(e);
    }
  }
  function handleContainerDoubleClick() {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV || !canReply) return;
    updateDraftReplyInfo({
      replyToMsgId: messageId,
      replyToPeerId: undefined,
      quoteText: undefined
    });
  }
  function stopPropagation(e) {
    e.stopPropagation();
  }
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {
      return undefined;
    }
    let startedAt;
    return (0,_util_captureEvents__WEBPACK_IMPORTED_MODULE_3__.captureEvents)(containerRef.current, {
      selectorToPreventScroll: '.MessageList',
      excludedClosestSelector: '.no-word-wrap',
      onSwipe: (e, direction) => {
        if (direction === _util_captureEvents__WEBPACK_IMPORTED_MODULE_3__.SwipeDirection.Left) {
          if (!startedAt) {
            startedAt = Date.now();
          }
          markSwiped();
          return true;
        }
        return false;
      },
      onRelease: () => {
        if (!startedAt || !canReply) {
          return;
        }
        updateDraftReplyInfo({
          replyToMsgId: messageId
        });
        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));
        startedAt = undefined;
      }
    });
  }, [containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown, getIsMessageListReady]);
  function handleMouseLeave(e) {
    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,
    // so the order of events is preserved
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(unmarkQuickReactionVisible);
    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);
  }
  return {
    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,
    handleClick,
    handleContextMenu: !isInSelectMode ? handleContextMenu : isProtected ? _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__["default"] : undefined,
    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,
    handleContentDoubleClick: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV ? stopPropagation : undefined,
    handleMouseMove,
    handleSendQuickReaction,
    handleMouseLeave,
    isSwiped,
    isQuickReactionVisible,
    handleDocumentGroupMouseEnter
  };
}
function handleDocumentGroupMouseEnter(e) {
  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);
  if (lastGroupElement) {
    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');
  }
}
function handleDocumentGroupMouseLeave(e) {
  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);
  if (lastGroupElement) {
    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);
  }
}
function getLastElementInDocumentGroup(element) {
  let current = element;
  do {
    current = current.nextElementSibling;
  } while (current && !current.classList.contains('last-in-document-group'));
  return current;
}

/***/ }),

/***/ "./src/components/middle/message/reactions/ReactionPicker.async.tsx":
/*!**************************************************************************!*\
  !*** ./src/components/middle/message/reactions/ReactionPicker.async.tsx ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ReactionPickerAsync = props => {
  const {
    isOpen
  } = props;
  const ReactionPicker = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ReactionPicker', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ReactionPicker ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ReactionPicker, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReactionPickerAsync);

/***/ }),

/***/ "./src/components/middle/panes/AudioPlayer.tsx":
/*!*****************************************************!*\
  !*** ./src/components/middle/panes/AudioPlayer.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_audioPlayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/audioPlayer */ "./src/util/audioPlayer.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_mediaSession__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/mediaSession */ "./src/util/mediaSession.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useAudioPlayer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useAudioPlayer */ "./src/hooks/useAudioPlayer.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMessageMediaMetadata__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useMessageMediaMetadata */ "./src/hooks/useMessageMediaMetadata.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../hooks/useHeaderPane */ "./src/components/middle/hooks/useHeaderPane.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../ui/DropdownMenu */ "./src/components/ui/DropdownMenu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ui_RangeSlider__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../ui/RangeSlider */ "./src/components/ui/RangeSlider.tsx");
/* harmony import */ var _ui_RippleEffect__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../ui/RippleEffect */ "./src/components/ui/RippleEffect.tsx");
/* harmony import */ var _AudioPlayer_scss__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./AudioPlayer.scss */ "./src/components/middle/panes/AudioPlayer.scss");



























const PLAYBACK_RATES = {
  0.5: 0.66,
  0.75: 0.8,
  1: 1,
  1.5: 1.4,
  2: 1.8
};
const PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);
const REGULAR_PLAYBACK_RATE = 1;
const DEFAULT_FAST_PLAYBACK_RATE = 2;
const AudioPlayer = ({
  message,
  className,
  noUi,
  sender,
  chat,
  volume,
  playbackRate,
  isPlaybackRateActive,
  isMuted,
  isFullWidth,
  onPaneStateChange
}) => {
  const {
    setAudioPlayerVolume,
    setAudioPlayerPlaybackRate,
    setAudioPlayerMuted,
    focusMessage,
    closeAudioPlayer
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const renderingMessage = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_14__["default"])(message);
  const {
    audio,
    voice,
    video
  } = renderingMessage ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageContent)(renderingMessage) : {};
  const isVoice = Boolean(voice || video);
  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > _config__WEBPACK_IMPORTED_MODULE_2__.PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;
  const senderName = sender ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getPeerTitle)(lang, sender) : undefined;
  const mediaHash = renderingMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageMediaHash)(renderingMessage, 'inline');
  const mediaData = mediaHash && _util_mediaLoader__WEBPACK_IMPORTED_MODULE_7__.getFromMemory(mediaHash);
  const mediaMetadata = (0,_hooks_useMessageMediaMetadata__WEBPACK_IMPORTED_MODULE_16__["default"])(renderingMessage, sender, chat);
  const {
    playPause,
    stop,
    isPlaying,
    requestNextTrack,
    requestPreviousTrack,
    isFirst,
    isLast,
    setVolume,
    toggleMuted,
    setPlaybackRate
  } = (0,_hooks_useAudioPlayer__WEBPACK_IMPORTED_MODULE_12__["default"])(message && (0,_util_audioPlayer__WEBPACK_IMPORTED_MODULE_5__.makeTrackId)(message), message ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMediaDuration)(message) : 0, isVoice ? 'voice' : 'audio', mediaData, undefined, mediaMetadata, undefined, true, undefined, undefined, message && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isMessageLocal)(message), true);
  const isOpen = Boolean(message);
  const {
    ref: transitionRef
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_18__["default"])({
    isOpen,
    shouldForceOpen: isFullWidth // Use pane animation instead
  });
  const {
    ref,
    shouldRender
  } = (0,_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_19__["default"])({
    isOpen,
    isDisabled: !isFullWidth,
    ref: transitionRef,
    onStateChange: onPaneStateChange
  });
  const {
    isContextMenuOpen,
    handleBeforeContextMenu,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_13__["default"])(transitionRef, !shouldRender);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    const {
      chatId,
      id
    } = renderingMessage;
    focusMessage({
      chatId,
      messageId: id
    });
  });
  const handleClose = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (!stop) {
      return;
    }
    if (isPlaying) {
      playPause();
    }
    closeAudioPlayer();
    (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_8__.clearMediaSession)();
    stop();
  });
  const handleVolumeChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(value => {
    if (!setVolume) {
      return;
    }
    setAudioPlayerVolume({
      volume: value / 100
    });
    setVolume(value / 100);
  });
  const handleVolumeClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_TOUCH_ENV && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_IOS) return;
    if (!toggleMuted) {
      return;
    }
    toggleMuted();
    setAudioPlayerMuted({
      isMuted: !isMuted
    });
  });
  const updatePlaybackRate = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])((newRate, isActive = true) => {
    if (!setPlaybackRate) {
      return;
    }
    const rate = PLAYBACK_RATES[newRate];
    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;
    setAudioPlayerPlaybackRate({
      playbackRate: rate,
      isPlaybackRateActive: shouldBeActive
    });
    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);
  });
  const handlePlaybackClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    handleContextMenuClose();
    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]) || REGULAR_PLAYBACK_RATE;
    const newIsActive = !isPlaybackRateActive;
    updatePlaybackRate(newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate, newIsActive);
  });
  const PlaybackRateButton = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || REGULAR_PLAYBACK_RATE;
    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "playback-wrapper"
    }, isContextMenuOpen && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "playback-backdrop",
      onClick: handleContextMenuClose
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_21__["default"], {
      round: true,
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top'),
      color: "translucent",
      size: "smaller",
      ariaLabel: "Playback Rate",
      ripple: !isMobile,
      onMouseEnter: handleContextMenu,
      onClick: handlePlaybackClick,
      onMouseDown: handleBeforeContextMenu,
      onContextMenu: handleContextMenu
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('playback-button-inner', text.length === 4 && 'small', text.length === 5 && 'tiny')
    }, text)));
  });
  const volumeIcon = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (volume === 0 || isMuted) return 'muted';
    if (volume < 0.3) return 'volume-1';
    if (volume < 0.6) return 'volume-2';
    return 'volume-3';
  }, [volume, isMuted]);
  if (noUi || !shouldRender) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className),
    dir: lang.isRtl ? 'rtl' : undefined,
    ref: ref
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "AudioPlayer-content",
    onClick: handleClick
  }, audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_RippleEffect__WEBPACK_IMPORTED_MODULE_25__["default"], null)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_21__["default"], {
    round: true,
    ripple: !isMobile,
    color: "translucent",
    size: "smaller",
    className: "player-button",
    disabled: isFirst?.(),
    onClick: requestPreviousTrack,
    ariaLabel: "Previous track"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: "skip-previous"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_21__["default"], {
    round: true,
    ripple: !isMobile,
    color: "translucent",
    size: "smaller",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('toggle-play', 'player-button', isPlaying ? 'pause' : 'play'),
    onClick: playPause,
    ariaLabel: isPlaying ? 'Pause audio' : 'Play audio'
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: "play"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: "pause"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_21__["default"], {
    round: true,
    ripple: !isMobile,
    color: "translucent",
    size: "smaller",
    className: "player-button",
    disabled: isLast?.(),
    onClick: requestNextTrack,
    ariaLabel: "Next track"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: "skip-next"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "volume-button-wrapper"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_21__["default"], {
    round: true,
    className: "player-button volume-button",
    color: "translucent",
    size: "smaller",
    ariaLabel: "Volume",
    onClick: handleVolumeClick,
    ripple: !isMobile
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: volumeIcon
  })), !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_IOS && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "volume-slider-wrapper"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "volume-slider-spacer"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "volume-slider"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_RangeSlider__WEBPACK_IMPORTED_MODULE_24__["default"], {
    bold: true,
    value: isMuted ? 0 : volume * 100,
    onChange: handleVolumeChange
  })))), shouldRenderPlaybackButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_22__["default"], {
    forceOpen: isContextMenuOpen,
    positionX: "right",
    positionY: "top",
    className: "playback-rate-menu",
    trigger: PlaybackRateButton,
    onClose: handleContextMenuClose,
    onHide: handleContextMenuHide,
    onMouseEnterBackdrop: handleContextMenuClose
  }, PLAYBACK_RATE_VALUES.map(rate => {
    return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_21__["default"], {
    round: true,
    className: "player-close",
    color: "translucent",
    size: "smaller",
    onClick: handleClose,
    ariaLabel: "Close player"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: "close"
  })));
};
function renderAudio(audio) {
  const {
    title,
    performer,
    fileName
  } = audio;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "title",
    dir: "auto"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_10__["default"])(title || fileName)), performer && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "subtitle",
    dir: "auto"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_10__["default"])(performer)));
}
function renderVoice(subtitle, senderName) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "title",
    dir: "auto"
  }, senderName && (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_10__["default"])(senderName)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "subtitle",
    dir: "auto"
  }, subtitle));
}
function renderPlaybackRateMenuItem(rate, currentRate, onClick, isPlaybackRateActive) {
  const isSelected = currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive || rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_23__["default"], {
    key: rate
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => onClick(rate),
    icon: isSelected ? 'check' : undefined,
    customIcon: !isSelected ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
      name: "placeholder"
    }) : undefined
  }, rate, "X");
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  isHidden
}) => {
  const {
    audioPlayer
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  const {
    chatId,
    messageId
  } = audioPlayer;
  const message = !isHidden && chatId && messageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessage)(global, chatId, messageId) : undefined;
  const sender = message && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectSender)(global, message);
  const chat = message && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, message.chatId);
  const {
    volume,
    playbackRate,
    isMuted,
    isPlaybackRateActive
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).audioPlayer;
  return {
    message,
    sender,
    chat,
    volume,
    playbackRate,
    isPlaybackRateActive,
    isMuted
  };
})(AudioPlayer));

/***/ }),

/***/ "./src/components/middle/panes/BotAdPane.tsx":
/*!***************************************************!*\
  !*** ./src/components/middle/panes/BotAdPane.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_peerColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../hooks/useHeaderPane */ "./src/components/middle/hooks/useHeaderPane.tsx");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _common_BadgeButton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/BadgeButton */ "./src/components/common/BadgeButton.tsx");
/* harmony import */ var _message_SponsoredMessageContextMenuContainer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../message/SponsoredMessageContextMenuContainer */ "./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx");
/* harmony import */ var _BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./BotAdPane.module.scss */ "./src/components/middle/panes/BotAdPane.module.scss");















const BotAdPane = ({
  chatId,
  isBot,
  messageListType,
  sponsoredMessage,
  onPaneStateChange
}) => {
  const {
    viewSponsoredMessage,
    openUrl,
    clickSponsoredMessage,
    openAboutAdsModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');
  const renderingSponsoredMessage = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_7__["default"])(sponsoredMessage);
  const {
    ref,
    shouldRender
  } = (0,_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_10__["default"])({
    isOpen,
    withResizeObserver: true,
    onStateChange: onPaneStateChange
  });
  const {
    isContextMenuOpen,
    contextMenuAnchor,
    handleBeforeContextMenu,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_6__["default"])(ref, !shouldRender, true);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    if (!renderingSponsoredMessage) return;
    clickSponsoredMessage({
      peerId: chatId
    });
    openUrl({
      url: renderingSponsoredMessage.url,
      shouldSkipModal: true
    });
  });
  const handleAboutClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    e.stopPropagation();
    openAboutAdsModal({
      chatId
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (shouldRender && sponsoredMessage) {
      viewSponsoredMessage({
        peerId: chatId
      });
    }
  }, [shouldRender, sponsoredMessage, chatId]);
  if (!shouldRender || !renderingSponsoredMessage) {
    return undefined;
  }
  const {
    peerColor,
    content,
    photo,
    title
  } = renderingSponsoredMessage;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: _BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].root,
    onClick: handleClick,
    onMouseDown: handleBeforeContextMenu,
    onContextMenu: handleContextMenu
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].content, peerColor && (0,_common_helpers_peerColor__WEBPACK_IMPORTED_MODULE_4__.getApiPeerColorClass)(peerColor))
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].info
  }, lang('SponsoredMessageAd'), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_BadgeButton__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: handleAboutClick,
    className: _BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].aboutAd
  }, lang('SponsoredMessageAdWhatIsThis'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].title
  }, title), content.text && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].text
  }, (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_5__.renderTextWithEntities)({
    text: content.text.text,
    entities: content.text.entities
  }))), photo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_11__["default"], {
    size: "large",
    photo: photo,
    className: _BotAdPane_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].avatar
  })), contextMenuAnchor && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_message_SponsoredMessageContextMenuContainer__WEBPACK_IMPORTED_MODULE_13__["default"], {
    isOpen: isContextMenuOpen,
    anchor: contextMenuAnchor,
    triggerRef: ref,
    message: renderingSponsoredMessage,
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId
}) => {
  const bot = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectBot)(global, chatId);
  const sponsoredMessage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectSponsoredMessage)(global, chatId);
  return {
    isBot: Boolean(bot),
    sponsoredMessage
  };
})(BotAdPane)));

/***/ }),

/***/ "./src/components/middle/panes/BotVerificationPane.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/panes/BotVerificationPane.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hooks/useHeaderPane */ "./src/components/middle/hooks/useHeaderPane.tsx");
/* harmony import */ var _common_CustomEmoji__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _BotVerificationPane_module_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BotVerificationPane.module.scss */ "./src/components/middle/panes/BotVerificationPane.module.scss");








const BOT_VERIFICATION_ICON_SIZE = 16;
const DISPLAY_DURATION_MS = 5000; // 5 sec

const BotVerificationPane = ({
  peerId,
  wasShown,
  botVerification,
  onPaneStateChange
}) => {
  const isOpen = Boolean(!wasShown && botVerification);
  const {
    markBotVerificationInfoShown
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    ref,
    shouldRender
  } = (0,_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_5__["default"])({
    isOpen,
    onStateChange: onPaneStateChange
  });
  const markAsShowed = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    markBotVerificationInfoShown({
      peerId
    });
  });
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_3__["default"])(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);
  if (!shouldRender || !botVerification) return undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: _BotVerificationPane_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _BotVerificationPane_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].icon
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_CustomEmoji__WEBPACK_IMPORTED_MODULE_6__["default"], {
    documentId: botVerification.iconId,
    size: BOT_VERIFICATION_ICON_SIZE
  })), botVerification.description);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  peerId
}) => {
  const peerFullInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeerFullInfo)(global, peerId);
  const botVerification = peerFullInfo?.botVerification;
  const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);
  return {
    botVerification,
    wasShown
  };
})(BotVerificationPane)));

/***/ }),

/***/ "./src/components/middle/panes/ChatReportPane.tsx":
/*!********************************************************!*\
  !*** ./src/components/middle/panes/ChatReportPane.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_peers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers/peers */ "./src/global/helpers/peers.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../hooks/useHeaderPane */ "./src/components/middle/hooks/useHeaderPane.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Checkbox__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/Checkbox */ "./src/components/ui/Checkbox.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _ChatReportPane_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ChatReportPane.scss */ "./src/components/middle/panes/ChatReportPane.scss");
















const ChatReportPane = ({
  chatId,
  className,
  isAutoArchived,
  canReportSpam,
  canAddContact,
  canBlockContact,
  peer,
  currentUserId,
  onPaneStateChange
}) => {
  const {
    openAddContactDialog,
    blockUser,
    reportSpam,
    deleteChat,
    leaveChannel,
    deleteChatUser,
    deleteHistory,
    toggleChatArchived,
    hideChatReportPane
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const [shouldReportSpam, setShouldReportSpam] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const [shouldDeleteChat, setShouldDeleteChat] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const renderingPeer = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_6__["default"])(peer);
  const chat = renderingPeer && (0,_global_helpers_peers__WEBPACK_IMPORTED_MODULE_3__.isApiPeerChat)(renderingPeer) ? renderingPeer : undefined;
  const user = renderingPeer && (0,_global_helpers_peers__WEBPACK_IMPORTED_MODULE_3__.isApiPeerUser)(renderingPeer) ? renderingPeer : undefined;
  const isBasicGroup = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatBasicGroup)(chat);
  const renderingCanAddContact = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_6__["default"])(canAddContact);
  const renderingCanBlockContact = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_6__["default"])(canBlockContact);
  const renderingCanReportSpam = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_6__["default"])(canReportSpam);
  const renderingIsAutoArchived = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_6__["default"])(isAutoArchived);
  const handleAddContact = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    openAddContactDialog({
      userId: chatId
    });
    if (renderingIsAutoArchived) {
      toggleChatArchived({
        id: chatId
      });
    }
  });
  const handleConfirmBlock = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    closeBlockUserModal();
    blockUser({
      userId: chatId
    });
    if (renderingCanReportSpam && shouldReportSpam) {
      reportSpam({
        chatId
      });
    }
    if (shouldDeleteChat) {
      deleteChat({
        chatId
      });
    }
  });
  const handleCloseReportPane = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    hideChatReportPane({
      chatId
    });
  });
  const handleChatReportSpam = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    closeBlockUserModal();
    reportSpam({
      chatId
    });
    if (isBasicGroup) {
      deleteChatUser({
        chatId,
        userId: currentUserId
      });
      deleteHistory({
        chatId,
        shouldDeleteForAll: false
      });
    } else {
      leaveChannel({
        chatId
      });
    }
  });
  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;
  const isRendering = Boolean(hasAnyButton && peer);
  const {
    ref,
    shouldRender
  } = (0,_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_10__["default"])({
    isOpen: isRendering,
    onStateChange: onPaneStateChange
  });
  if (!shouldRender) return undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('ChatReportPane', className),
    dir: lang.isRtl ? 'rtl' : undefined
  }, renderingCanAddContact && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    isText: true,
    fluid: true,
    size: "tiny",
    className: "ChatReportPane--Button",
    onClick: handleAddContact
  }, lang('lng_new_contact_add')), renderingCanBlockContact && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    color: "danger",
    isText: true,
    fluid: true,
    size: "tiny",
    className: "ChatReportPane--Button",
    onClick: openBlockUserModal
  }, lang('lng_new_contact_block')), renderingCanReportSpam && !renderingCanBlockContact && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    color: "danger",
    isText: true,
    fluid: true,
    size: "tiny",
    className: "ChatReportPane--Button",
    onClick: openBlockUserModal
  }, lang('lng_report_spam_and_leave')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    round: true,
    ripple: true,
    size: "smaller",
    color: "translucent",
    onClick: handleCloseReportPane,
    ariaLabel: lang('Close')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "close"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_14__["default"], {
    isOpen: isBlockUserModalOpen,
    onClose: closeBlockUserModal,
    title: lang('BlockUserTitle', user ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFirstOrLastName)(user) : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getChatTitle)(lang, chat)),
    text: user ? lang('UserInfo.BlockConfirmationTitle', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFullName)(user)) : lang('Chat.Confirm.ReportSpam.Channel'),
    confirmIsDestructive: true,
    confirmLabel: lang('Block'),
    confirmHandler: user ? handleConfirmBlock : handleChatReportSpam
  }, user && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Checkbox__WEBPACK_IMPORTED_MODULE_13__["default"], {
    label: lang('DeleteThisChat'),
    checked: shouldDeleteChat,
    onCheck: setShouldDeleteChat
  }), user && canReportSpam && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Checkbox__WEBPACK_IMPORTED_MODULE_13__["default"], {
    label: lang('ReportChat'),
    checked: shouldReportSpam,
    onCheck: setShouldReportSpam
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId
}) => ({
  currentUserId: global.currentUserId,
  peer: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeer)(global, chatId)
}))(ChatReportPane)));

/***/ }),

/***/ "./src/components/middle/panes/HeaderPinnedMessage.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/panes/HeaderPinnedMessage.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_cycleRestrict__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/cycleRestrict */ "./src/util/cycleRestrict.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _composer_helpers_renderKeyboardButtonText__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../composer/helpers/renderKeyboardButtonText */ "./src/components/middle/composer/helpers/renderKeyboardButtonText.tsx");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useEnsureMessage */ "./src/hooks/useEnsureMessage.ts");
/* harmony import */ var _hooks_useFastClick__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useFastClick */ "./src/hooks/useFastClick.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useThumbnail__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../hooks/useThumbnail */ "./src/hooks/useThumbnail.ts");
/* harmony import */ var _right_hooks_useAsyncRendering__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../right/hooks/useAsyncRendering */ "./src/components/right/hooks/useAsyncRendering.ts");
/* harmony import */ var _hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../hooks/useHeaderPane */ "./src/components/middle/hooks/useHeaderPane.tsx");
/* harmony import */ var _common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../common/AnimatedCounter */ "./src/components/common/AnimatedCounter.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../common/MediaSpoiler */ "./src/components/common/MediaSpoiler.tsx");
/* harmony import */ var _common_MessageSummary__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../common/MessageSummary */ "./src/components/common/MessageSummary.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _ui_RippleEffect__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../ui/RippleEffect */ "./src/components/ui/RippleEffect.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _PinnedMessageNavigation__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../PinnedMessageNavigation */ "./src/components/middle/PinnedMessageNavigation.tsx");
/* harmony import */ var _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./HeaderPinnedMessage.module.scss */ "./src/components/middle/panes/HeaderPinnedMessage.module.scss");


































const SHOW_LOADER_DELAY = 450;
const EMOJI_SIZE = 1.125 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.REM;
const HeaderPinnedMessage = ({
  chatId,
  threadId,
  canUnpin,
  getLoadingPinnedId,
  pinnedMessageIds,
  messagesById,
  isFullWidth,
  topMessageSender,
  getCurrentPinnedIndex,
  className,
  chat,
  isSynced,
  shouldHide,
  onPaneStateChange,
  onFocusPinnedMessage
}) => {
  const {
    clickBotInlineButton,
    focusMessage,
    openThread,
    pinMessage,
    loadPinnedMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_16__["default"])();
  const currentPinnedIndex = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_12__["default"])(getCurrentPinnedIndex);
  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;
  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;
  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : pinnedMessageIds ? 1 : 0;
  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);
  const topMessageTitle = topMessageSender ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getPeerTitle)(lang, topMessageSender) : undefined;
  const video = pinnedMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageVideo)(pinnedMessage);
  const gif = video?.isGif ? video : undefined;
  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);
  const mediaThumbnail = (0,_hooks_useThumbnail__WEBPACK_IMPORTED_MODULE_20__["default"])(pinnedMessage);
  const mediaHash = pinnedMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageMediaHash)(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');
  const mediaBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_18__["default"])(mediaHash);
  const isSpoiler = pinnedMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageIsSpoiler)(pinnedMessage);
  const isLoading = Boolean((0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_12__["default"])(getLoadingPinnedId));
  const canRenderLoader = (0,_right_hooks_useAsyncRendering__WEBPACK_IMPORTED_MODULE_21__["default"])([isLoading], SHOW_LOADER_DELAY);
  const shouldShowLoader = canRenderLoader && isLoading;
  const renderingPinnedMessage = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_11__["default"])(pinnedMessage, true);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isSynced && (threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID || chat?.isForum)) {
      loadPinnedMessages({
        chatId,
        threadId
      });
    }
  }, [chatId, threadId, isSynced, chat?.isForum]);
  (0,_hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_13__["default"])(chatId, pinnedMessageId, pinnedMessage);
  const isOpen = Boolean(pinnedMessage) && !shouldHide;
  const {
    ref: transitionRef
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_19__["default"])({
    isOpen,
    noOpenTransition: true,
    shouldForceOpen: isFullWidth // Use pane animation instead
  });
  const {
    ref,
    shouldRender
  } = (0,_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_22__["default"])({
    isOpen,
    isDisabled: !isFullWidth,
    ref: transitionRef,
    onStateChange: onPaneStateChange
  });
  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_15__["default"])();
  const handleUnpinMessage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    closeUnpinDialog();
    pinMessage({
      chatId,
      messageId: pinnedMessage.id,
      isUnpin: true
    });
  });
  const inlineButton = pinnedMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageSingleInlineButton)(pinnedMessage);
  const handleInlineButtonClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    if (inlineButton) {
      clickBotInlineButton({
        chatId: pinnedMessage.chatId,
        messageId: pinnedMessage.id,
        button: inlineButton
      });
    }
  });
  const handleAllPinnedClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    openThread({
      chatId,
      threadId,
      type: 'pinned'
    });
  });
  const handleMessageClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(e => {
    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds) ? pinnedMessageIds[(0,_util_cycleRestrict__WEBPACK_IMPORTED_MODULE_6__["default"])(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId) - 2)] : pinnedMessageId;
    if (!getLoadingPinnedId()) {
      focusMessage({
        chatId,
        threadId,
        messageId: nextMessageId,
        noForumTopicPanel: true
      });
      onFocusPinnedMessage(nextMessageId);
    }
  });
  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_15__["default"])();
  const {
    handleClick,
    handleMouseDown
  } = (0,_hooks_useFastClick__WEBPACK_IMPORTED_MODULE_14__.useFastClick)(handleMessageClick);
  function renderPictogram(thumbDataUri, blobUrl, isFullVideo, asSpoiler) {
    const {
      width,
      height
    } = (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.getPictogramDimensions)();
    const srcUrl = blobUrl || thumbDataUri;
    const shouldRenderVideo = isFullVideo && blobUrl;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinnedThumb
    }, thumbDataUri && !asSpoiler && !shouldRenderVideo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
      className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinnedThumbImage,
      src: srcUrl,
      width: width,
      height: height,
      alt: "",
      draggable: false
    }), shouldRenderVideo && !asSpoiler && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("video", {
      src: blobUrl,
      width: width,
      height: height,
      playsInline: true,
      disablePictureInPicture: true,
      className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinnedThumbImage
    }), thumbDataUri && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_25__["default"], {
      thumbDataUri: srcUrl,
      isVisible: Boolean(asSpoiler),
      width: width,
      height: height
    }));
  }
  if (!shouldRender || !renderingPinnedMessage) return undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('HeaderPinnedMessageWrapper', _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].root, isFullWidth ? _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].fullWidth : _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].mini, className)
  }, (pinnedMessagesCount > 1 || shouldShowLoader) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_27__["default"], {
    round: true,
    size: "smaller",
    color: "translucent",
    ariaLabel: lang('EventLogFilterPinnedMessages'),
    onClick: !shouldShowLoader ? handleAllPinnedClick : undefined
  }, isLoading && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_30__["default"], {
    color: "blue",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].loading, _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinListIcon, !shouldShowLoader && _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinListIconHidden)
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_24__["default"], {
    name: "pin-list",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinListIcon, shouldShowLoader && _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinListIconHidden)
  })), canUnpin && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_27__["default"], {
    round: true,
    size: "smaller",
    color: "translucent",
    ariaLabel: lang('UnpinMessageAlertTitle'),
    onClick: openUnpinDialog
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_24__["default"], {
    name: "close"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_28__["default"], {
    isOpen: isUnpinDialogOpen,
    onClose: closeUnpinDialog,
    text: lang('PinnedConfirmUnpin'),
    confirmLabel: lang('DialogUnpin'),
    confirmHandler: handleUnpinMessage
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pinnedMessage, noHoverColor && _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].noHover),
    onClick: handleClick,
    onMouseDown: handleMouseDown,
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_PinnedMessageNavigation__WEBPACK_IMPORTED_MODULE_32__["default"], {
    count: pinnedMessagesCount,
    index: currentPinnedIndex
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_31__["default"], {
    activeKey: renderingPinnedMessage.id,
    name: "slideVertical",
    className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].pictogramTransition
  }, renderPictogram(mediaThumbnail, mediaBlobUrl, isVideoThumbnail, isSpoiler)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].messageText, mediaThumbnail && _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].withMedia),
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].title,
    dir: lang.isRtl ? 'rtl' : undefined
  }, !topMessageTitle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_23__["default"], {
    text: pinnedMessagesCount === 1 ? lang('PinnedMessageTitleSingle') : lang('PinnedMessageTitle', {
      index: pinnedMessageNumber
    }, {
      pluralValue: pinnedMessagesCount
    })
  }), topMessageTitle && (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_9__["default"])(topMessageTitle)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_31__["default"], {
    activeKey: renderingPinnedMessage.id,
    name: "slideVerticalFade",
    className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].messageTextTransition
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    dir: "auto",
    className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].summary
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MessageSummary__WEBPACK_IMPORTED_MODULE_26__["default"], {
    message: renderingPinnedMessage,
    noEmoji: Boolean(mediaThumbnail),
    emojiSize: EMOJI_SIZE
  })))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_RippleEffect__WEBPACK_IMPORTED_MODULE_29__["default"], null), inlineButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_27__["default"], {
    size: "tiny",
    className: _HeaderPinnedMessage_module_scss__WEBPACK_IMPORTED_MODULE_33__["default"].inlineButton,
    onClick: handleInlineButtonClick,
    shouldStopPropagation: true,
    onMouseEnter: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_TOUCH_ENV ? markNoHoverColor : undefined,
    onMouseLeave: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_TOUCH_ENV ? unmarkNoHoverColor : undefined
  }, (0,_composer_helpers_renderKeyboardButtonText__WEBPACK_IMPORTED_MODULE_10__["default"])(lang, inlineButton))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId,
  messageListType
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId);
  const isSynced = global.isSynced;
  const isSavedDialog = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  const messagesById = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessages)(global, chatId);
  const state = {
    chat,
    isSynced
  };
  if (messageListType !== 'thread' || !messagesById) {
    return state;
  }
  if (threadId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {
    const pinnedMessageId = Number(threadId);
    const message = pinnedMessageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessage)(global, chatId, pinnedMessageId) : undefined;
    const topMessageSender = message ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectForwardedSender)(global, message) : undefined;
    return {
      ...state,
      pinnedMessageIds: pinnedMessageId,
      messagesById,
      canUnpin: false,
      topMessageSender
    };
  }
  const pinnedMessageIds = !isSavedDialog ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPinnedIds)(global, chatId, threadId) : undefined;
  if (pinnedMessageIds?.length) {
    const firstPinnedMessage = messagesById[pinnedMessageIds[0]];
    const {
      canUnpin = false
    } = firstPinnedMessage && pinnedMessageIds.length === 1 && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectAllowedMessageActionsSlow)(global, firstPinnedMessage, threadId) || {};
    return {
      ...state,
      pinnedMessageIds,
      messagesById,
      canUnpin
    };
  }
  return state;
})(HeaderPinnedMessage)));

/***/ }),

/***/ "./src/components/middle/search/MiddleSearch.async.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/search/MiddleSearch.async.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const MiddleSearchAsync = props => {
  const {
    isActive
  } = props;
  const MiddleSearch = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'MiddleSearch', !isActive, true);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return MiddleSearch ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MiddleSearch, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MiddleSearchAsync);

/***/ }),

/***/ "./src/components/modals/ModalContainer.tsx":
/*!**************************************************!*\
  !*** ./src/components/modals/ModalContainer.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _common_VerificationMonetizationModal_async__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/VerificationMonetizationModal.async */ "./src/components/common/VerificationMonetizationModal.async.tsx");
/* harmony import */ var _main_WebAppsCloseConfirmationModal_async__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main/WebAppsCloseConfirmationModal.async */ "./src/components/main/WebAppsCloseConfirmationModal.async.tsx");
/* harmony import */ var _aboutAds_AboutAdsModal_async__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./aboutAds/AboutAdsModal.async */ "./src/components/modals/aboutAds/AboutAdsModal.async.tsx");
/* harmony import */ var _attachBotInstall_AttachBotInstallModal_async__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./attachBotInstall/AttachBotInstallModal.async */ "./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx");
/* harmony import */ var _boost_BoostModal_async__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./boost/BoostModal.async */ "./src/components/modals/boost/BoostModal.async.tsx");
/* harmony import */ var _chatInvite_ChatInviteModal_async__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chatInvite/ChatInviteModal.async */ "./src/components/modals/chatInvite/ChatInviteModal.async.tsx");
/* harmony import */ var _chatlist_ChatlistModal_async__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chatlist/ChatlistModal.async */ "./src/components/modals/chatlist/ChatlistModal.async.tsx");
/* harmony import */ var _collectible_CollectibleInfoModal_async__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./collectible/CollectibleInfoModal.async */ "./src/components/modals/collectible/CollectibleInfoModal.async.tsx");
/* harmony import */ var _emojiStatusAccess_EmojiStatusAccessModal_async__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./emojiStatusAccess/EmojiStatusAccessModal.async */ "./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx");
/* harmony import */ var _gift_fragment_GiftWithdrawModal_async__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./gift/fragment/GiftWithdrawModal.async */ "./src/components/modals/gift/fragment/GiftWithdrawModal.async.tsx");
/* harmony import */ var _gift_GiftModal_async__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./gift/GiftModal.async */ "./src/components/modals/gift/GiftModal.async.tsx");
/* harmony import */ var _gift_info_GiftInfoModal_async__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./gift/info/GiftInfoModal.async */ "./src/components/modals/gift/info/GiftInfoModal.async.tsx");
/* harmony import */ var _gift_recipient_GiftRecipientPicker_async__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./gift/recipient/GiftRecipientPicker.async */ "./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx");
/* harmony import */ var _gift_upgrade_GiftUpgradeModal_async__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./gift/upgrade/GiftUpgradeModal.async */ "./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx");
/* harmony import */ var _giftcode_GiftCodeModal_async__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./giftcode/GiftCodeModal.async */ "./src/components/modals/giftcode/GiftCodeModal.async.tsx");
/* harmony import */ var _inviteViaLink_InviteViaLinkModal_async__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./inviteViaLink/InviteViaLinkModal.async */ "./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx");
/* harmony import */ var _locationAccess_LocationAccessModal_async__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./locationAccess/LocationAccessModal.async */ "./src/components/modals/locationAccess/LocationAccessModal.async.tsx");
/* harmony import */ var _map_MapModal_async__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./map/MapModal.async */ "./src/components/modals/map/MapModal.async.tsx");
/* harmony import */ var _oneTimeMedia_OneTimeMediaModal_async__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./oneTimeMedia/OneTimeMediaModal.async */ "./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx");
/* harmony import */ var _paidReaction_PaidReactionModal_async__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./paidReaction/PaidReactionModal.async */ "./src/components/modals/paidReaction/PaidReactionModal.async.tsx");
/* harmony import */ var _reportAd_ReportAdModal_async__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./reportAd/ReportAdModal.async */ "./src/components/modals/reportAd/ReportAdModal.async.tsx");
/* harmony import */ var _reportModal_ReportModal_async__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./reportModal/ReportModal.async */ "./src/components/modals/reportModal/ReportModal.async.tsx");
/* harmony import */ var _stars_gift_StarsGiftModal_async__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./stars/gift/StarsGiftModal.async */ "./src/components/modals/stars/gift/StarsGiftModal.async.tsx");
/* harmony import */ var _stars_StarsBalanceModal_async__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./stars/StarsBalanceModal.async */ "./src/components/modals/stars/StarsBalanceModal.async.tsx");
/* harmony import */ var _stars_StarsPaymentModal_async__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./stars/StarsPaymentModal.async */ "./src/components/modals/stars/StarsPaymentModal.async.tsx");
/* harmony import */ var _stars_subscription_StarsSubscriptionModal_async__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./stars/subscription/StarsSubscriptionModal.async */ "./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx");
/* harmony import */ var _stars_transaction_StarsTransactionModal_async__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./stars/transaction/StarsTransactionModal.async */ "./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx");
/* harmony import */ var _suggestedStatus_SuggestedStatusModal_async__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./suggestedStatus/SuggestedStatusModal.async */ "./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx");
/* harmony import */ var _urlAuth_UrlAuthModal_async__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./urlAuth/UrlAuthModal.async */ "./src/components/modals/urlAuth/UrlAuthModal.async.tsx");
/* harmony import */ var _webApp_WebAppModal_async__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./webApp/WebAppModal.async */ "./src/components/modals/webApp/WebAppModal.async.tsx");



































// `Pick` used only to provide tab completion

const MODALS = {
  giftCodeModal: _giftcode_GiftCodeModal_async__WEBPACK_IMPORTED_MODULE_18__["default"],
  boostModal: _boost_BoostModal_async__WEBPACK_IMPORTED_MODULE_8__["default"],
  chatlistModal: _chatlist_ChatlistModal_async__WEBPACK_IMPORTED_MODULE_10__["default"],
  urlAuth: _urlAuth_UrlAuthModal_async__WEBPACK_IMPORTED_MODULE_32__["default"],
  oneTimeMediaModal: _oneTimeMedia_OneTimeMediaModal_async__WEBPACK_IMPORTED_MODULE_22__["default"],
  inviteViaLinkModal: _inviteViaLink_InviteViaLinkModal_async__WEBPACK_IMPORTED_MODULE_19__["default"],
  requestedAttachBotInstall: _attachBotInstall_AttachBotInstallModal_async__WEBPACK_IMPORTED_MODULE_7__["default"],
  reportAdModal: _reportAd_ReportAdModal_async__WEBPACK_IMPORTED_MODULE_24__["default"],
  reportModal: _reportModal_ReportModal_async__WEBPACK_IMPORTED_MODULE_25__["default"],
  webApps: _webApp_WebAppModal_async__WEBPACK_IMPORTED_MODULE_33__["default"],
  collectibleInfoModal: _collectible_CollectibleInfoModal_async__WEBPACK_IMPORTED_MODULE_11__["default"],
  mapModal: _map_MapModal_async__WEBPACK_IMPORTED_MODULE_21__["default"],
  starsPayment: _stars_StarsPaymentModal_async__WEBPACK_IMPORTED_MODULE_28__["default"],
  starsBalanceModal: _stars_StarsBalanceModal_async__WEBPACK_IMPORTED_MODULE_27__["default"],
  starsTransactionModal: _stars_transaction_StarsTransactionModal_async__WEBPACK_IMPORTED_MODULE_30__["default"],
  chatInviteModal: _chatInvite_ChatInviteModal_async__WEBPACK_IMPORTED_MODULE_9__["default"],
  paidReactionModal: _paidReaction_PaidReactionModal_async__WEBPACK_IMPORTED_MODULE_23__["default"],
  starsSubscriptionModal: _stars_subscription_StarsSubscriptionModal_async__WEBPACK_IMPORTED_MODULE_29__["default"],
  starsGiftModal: _stars_gift_StarsGiftModal_async__WEBPACK_IMPORTED_MODULE_26__["default"],
  giftModal: _gift_GiftModal_async__WEBPACK_IMPORTED_MODULE_14__["default"],
  isGiftRecipientPickerOpen: _gift_recipient_GiftRecipientPicker_async__WEBPACK_IMPORTED_MODULE_16__["default"],
  isWebAppsCloseConfirmationModalOpen: _main_WebAppsCloseConfirmationModal_async__WEBPACK_IMPORTED_MODULE_5__["default"],
  giftInfoModal: _gift_info_GiftInfoModal_async__WEBPACK_IMPORTED_MODULE_15__["default"],
  suggestedStatusModal: _suggestedStatus_SuggestedStatusModal_async__WEBPACK_IMPORTED_MODULE_31__["default"],
  emojiStatusAccessModal: _emojiStatusAccess_EmojiStatusAccessModal_async__WEBPACK_IMPORTED_MODULE_12__["default"],
  locationAccessModal: _locationAccess_LocationAccessModal_async__WEBPACK_IMPORTED_MODULE_20__["default"],
  aboutAdsModal: _aboutAds_AboutAdsModal_async__WEBPACK_IMPORTED_MODULE_6__["default"],
  giftUpgradeModal: _gift_upgrade_GiftUpgradeModal_async__WEBPACK_IMPORTED_MODULE_17__["default"],
  monetizationVerificationModal: _common_VerificationMonetizationModal_async__WEBPACK_IMPORTED_MODULE_4__["default"],
  giftWithdrawModal: _gift_fragment_GiftWithdrawModal_async__WEBPACK_IMPORTED_MODULE_13__["default"]
};
const MODAL_KEYS = Object.keys(MODALS);
const MODAL_ENTRIES = Object.entries(MODALS);
const ModalContainer = modalProps => {
  return MODAL_ENTRIES.map(([key, ModalComponent]) =>
  /*#__PURE__*/
  // @ts-ignore -- TS does not preserve tuple types in `map` callbacks
  _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ModalComponent, {
    key: key,
    modal: modalProps[key]
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.pick)((0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global), MODAL_KEYS))(ModalContainer)));

/***/ }),

/***/ "./src/components/modals/aboutAds/AboutAdsModal.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/modals/aboutAds/AboutAdsModal.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const AboutAdsModalAsync = props => {
  const {
    modal
  } = props;
  const AboutAdsModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'AboutAdsModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return AboutAdsModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AboutAdsModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AboutAdsModalAsync);

/***/ }),

/***/ "./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx":
/*!********************************************************************************!*\
  !*** ./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const AttachBotInstallModalAsync = props => {
  const {
    modal
  } = props;
  const AttachBotInstallModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'AttachBotInstallModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return AttachBotInstallModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AttachBotInstallModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AttachBotInstallModalAsync);

/***/ }),

/***/ "./src/components/modals/boost/BoostModal.async.tsx":
/*!**********************************************************!*\
  !*** ./src/components/modals/boost/BoostModal.async.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const BoostModalAsync = props => {
  const {
    modal
  } = props;
  const BoostModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'BoostModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return BoostModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(BoostModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BoostModalAsync);

/***/ }),

/***/ "./src/components/modals/chatInvite/ChatInviteModal.async.tsx":
/*!********************************************************************!*\
  !*** ./src/components/modals/chatInvite/ChatInviteModal.async.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ChatInviteModalAsync = props => {
  const {
    modal
  } = props;
  const ChatInviteModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ChatInviteModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ChatInviteModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ChatInviteModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatInviteModalAsync);

/***/ }),

/***/ "./src/components/modals/chatlist/ChatlistModal.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/modals/chatlist/ChatlistModal.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ChatlistModalAsync = props => {
  const {
    modal
  } = props;
  const ChatlistModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ChatlistModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ChatlistModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ChatlistModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatlistModalAsync);

/***/ }),

/***/ "./src/components/modals/collectible/CollectibleInfoModal.async.tsx":
/*!**************************************************************************!*\
  !*** ./src/components/modals/collectible/CollectibleInfoModal.async.tsx ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const CollectibleInfoModalAsync = props => {
  const {
    modal
  } = props;
  const CollectibleInfoModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'CollectibleInfoModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return CollectibleInfoModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(CollectibleInfoModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CollectibleInfoModalAsync);

/***/ }),

/***/ "./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx":
/*!**********************************************************************************!*\
  !*** ./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const EmojiStatusAccessModalAsync = props => {
  const {
    modal
  } = props;
  const EmojiStatusAccessModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'EmojiStatusAccessModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return EmojiStatusAccessModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(EmojiStatusAccessModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmojiStatusAccessModalAsync);

/***/ }),

/***/ "./src/components/modals/gift/GiftModal.async.tsx":
/*!********************************************************!*\
  !*** ./src/components/modals/gift/GiftModal.async.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GiftModalAsync = props => {
  const {
    modal
  } = props;
  const GiftModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'GiftModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GiftModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GiftModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GiftModalAsync);

/***/ }),

/***/ "./src/components/modals/gift/fragment/GiftWithdrawModal.async.tsx":
/*!*************************************************************************!*\
  !*** ./src/components/modals/gift/fragment/GiftWithdrawModal.async.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GiftWithdrawModalAsync = props => {
  const {
    modal
  } = props;
  const GiftWithdrawModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'GiftWithdrawModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GiftWithdrawModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GiftWithdrawModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GiftWithdrawModalAsync);

/***/ }),

/***/ "./src/components/modals/gift/info/GiftInfoModal.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/modals/gift/info/GiftInfoModal.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GiftInfoModalAsync = props => {
  const {
    modal
  } = props;
  const GiftInfoModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'GiftInfoModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GiftInfoModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GiftInfoModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GiftInfoModalAsync);

/***/ }),

/***/ "./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx":
/*!****************************************************************************!*\
  !*** ./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GiftRecipientPickerAsync = props => {
  const {
    modal
  } = props;
  const GiftRecipientPicker = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'GiftRecipientPicker', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GiftRecipientPicker ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GiftRecipientPicker, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GiftRecipientPickerAsync);

/***/ }),

/***/ "./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GiftUpgradeModalAsync = props => {
  const {
    modal
  } = props;
  const GiftUpgradeModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'GiftUpgradeModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GiftUpgradeModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GiftUpgradeModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GiftUpgradeModalAsync);

/***/ }),

/***/ "./src/components/modals/giftcode/GiftCodeModal.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/modals/giftcode/GiftCodeModal.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const GiftCodeModalAsync = props => {
  const {
    modal
  } = props;
  const GiftCodeModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'GiftCodeModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GiftCodeModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GiftCodeModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GiftCodeModalAsync);

/***/ }),

/***/ "./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx":
/*!**************************************************************************!*\
  !*** ./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const InviteViaLinkModalAsync = props => {
  const {
    modal
  } = props;
  const InviteViaLinkModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'InviteViaLinkModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return InviteViaLinkModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(InviteViaLinkModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InviteViaLinkModalAsync);

/***/ }),

/***/ "./src/components/modals/locationAccess/LocationAccessModal.async.tsx":
/*!****************************************************************************!*\
  !*** ./src/components/modals/locationAccess/LocationAccessModal.async.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const LocationAccessModalAsync = props => {
  const {
    modal
  } = props;
  const LocationAccessModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'LocationAccessModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return LocationAccessModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(LocationAccessModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LocationAccessModalAsync);

/***/ }),

/***/ "./src/components/modals/map/MapModal.async.tsx":
/*!******************************************************!*\
  !*** ./src/components/modals/map/MapModal.async.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const MapModalAsync = props => {
  const {
    modal
  } = props;
  const MapModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'MapModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return MapModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MapModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapModalAsync);

/***/ }),

/***/ "./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx":
/*!************************************************************************!*\
  !*** ./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const OneTimeMediaModalAsync = props => {
  const {
    modal
  } = props;
  const OneTimeMediaModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'OneTimeMediaModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return OneTimeMediaModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(OneTimeMediaModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OneTimeMediaModalAsync);

/***/ }),

/***/ "./src/components/modals/paidReaction/PaidReactionModal.async.tsx":
/*!************************************************************************!*\
  !*** ./src/components/modals/paidReaction/PaidReactionModal.async.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const PaidReactionModalAsync = props => {
  const {
    modal
  } = props;
  const PaidReactionModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'PaidReactionModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return PaidReactionModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PaidReactionModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PaidReactionModalAsync);

/***/ }),

/***/ "./src/components/modals/reportAd/ReportAdModal.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/modals/reportAd/ReportAdModal.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ReportAdModalAsync = props => {
  const {
    modal
  } = props;
  const ReportAdModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ReportAdModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ReportAdModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ReportAdModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReportAdModalAsync);

/***/ }),

/***/ "./src/components/modals/reportModal/ReportModal.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/modals/reportModal/ReportModal.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ReportModalAsync = props => {
  const {
    modal
  } = props;
  const ReportModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ReportModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ReportModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ReportModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReportModalAsync);

/***/ }),

/***/ "./src/components/modals/stars/StarsBalanceModal.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/modals/stars/StarsBalanceModal.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StarsBalanceModalAsync = props => {
  const {
    modal
  } = props;
  const StarsBalanceModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'StarsBalanceModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StarsBalanceModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StarsBalanceModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StarsBalanceModalAsync);

/***/ }),

/***/ "./src/components/modals/stars/StarsPaymentModal.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/modals/stars/StarsPaymentModal.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StarPaymentModalAsync = props => {
  const {
    modal
  } = props;
  const StarPaymentModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'StarPaymentModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StarPaymentModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StarPaymentModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StarPaymentModalAsync);

/***/ }),

/***/ "./src/components/modals/stars/gift/StarsGiftModal.async.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/modals/stars/gift/StarsGiftModal.async.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StarsGiftModalAsync = props => {
  const {
    modal
  } = props;
  const StarsGiftModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'StarsGiftModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StarsGiftModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StarsGiftModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StarsGiftModalAsync);

/***/ }),

/***/ "./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx":
/*!***********************************************************************************!*\
  !*** ./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StarsSubscriptionModalAsync = props => {
  const {
    modal
  } = props;
  const StarsSubscriptionModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'StarsSubscriptionModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StarsSubscriptionModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StarsSubscriptionModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StarsSubscriptionModalAsync);

/***/ }),

/***/ "./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx":
/*!*********************************************************************************!*\
  !*** ./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StarsTransactionModalAsync = props => {
  const {
    modal
  } = props;
  const StarsTransactionModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Stars, 'StarsTransactionInfoModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StarsTransactionModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StarsTransactionModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StarsTransactionModalAsync);

/***/ }),

/***/ "./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx":
/*!******************************************************************************!*\
  !*** ./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const SuggestedStatusModalAsync = props => {
  const {
    modal
  } = props;
  const SuggestedStatusModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'SuggestedStatusModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return SuggestedStatusModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(SuggestedStatusModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SuggestedStatusModalAsync);

/***/ }),

/***/ "./src/components/modals/urlAuth/UrlAuthModal.async.tsx":
/*!**************************************************************!*\
  !*** ./src/components/modals/urlAuth/UrlAuthModal.async.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const UrlAuthModalAsync = props => {
  const {
    modal
  } = props;
  const UrlAuthModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'UrlAuthModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return UrlAuthModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(UrlAuthModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UrlAuthModalAsync);

/***/ }),

/***/ "./src/components/modals/webApp/WebAppModal.async.tsx":
/*!************************************************************!*\
  !*** ./src/components/modals/webApp/WebAppModal.async.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const WebAppModalAsync = props => {
  const {
    modal
  } = props;
  const WebAppModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'WebAppModal', !modal);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return WebAppModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(WebAppModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebAppModalAsync);

/***/ }),

/***/ "./src/components/payment/PaymentModal.async.tsx":
/*!*******************************************************!*\
  !*** ./src/components/payment/PaymentModal.async.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const PaymentModalAsync = props => {
  const {
    isOpen
  } = props;
  const PaymentModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'PaymentModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return PaymentModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PaymentModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PaymentModalAsync);

/***/ }),

/***/ "./src/components/payment/ReceiptModal.async.tsx":
/*!*******************************************************!*\
  !*** ./src/components/payment/ReceiptModal.async.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ReceiptModalAsync = props => {
  const {
    isOpen
  } = props;
  const ReceiptModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ReceiptModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ReceiptModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ReceiptModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReceiptModalAsync);

/***/ }),

/***/ "./src/components/right/AddChatMembers.tsx":
/*!*************************************************!*\
  !*** ./src/components/right/AddChatMembers.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _common_helpers_sortChatIds__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/helpers/sortChatIds */ "./src/components/common/helpers/sortChatIds.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_pickers_PeerPicker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/pickers/PeerPicker */ "./src/components/common/pickers/PeerPicker.tsx");
/* harmony import */ var _ui_FloatingActionButton__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ui/FloatingActionButton */ "./src/components/ui/FloatingActionButton.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _AddChatMembers_scss__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./AddChatMembers.scss */ "./src/components/right/AddChatMembers.scss");















const AddChatMembers = ({
  isChannel,
  members,
  onNextStep,
  currentUserId,
  localContactIds,
  isLoading,
  searchQuery,
  isSearching,
  localUserIds,
  globalUserIds,
  onClose,
  isActive
}) => {
  const {
    setUserSearchQuery
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const [selectedMemberIds, setSelectedMemberIds] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const prevSelectedMemberIds = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_9__["default"])(selectedMemberIds);
  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_7__["default"])({
    isActive,
    onBack: onClose
  });
  const memberIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return members ? members.map(member => member.userId) : [];
  }, [members]);
  const handleFilterChange = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(query => {
    setUserSearchQuery({
      query
    });
  }, [setUserSearchQuery]);
  const displayedIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    // No need for expensive global updates on users, so we avoid them
    const usersById = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().users.byId;
    const filteredContactIds = localContactIds ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.filterUsersByName)(localContactIds, usersById, searchQuery) : [];
    return (0,_common_helpers_sortChatIds__WEBPACK_IMPORTED_MODULE_6__["default"])((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_5__.unique)([...filteredContactIds, ...(localUserIds || []), ...(globalUserIds || [])]).filter(userId => {
      const user = usersById[userId];

      // The user can be added to the chat if the following conditions are met:
      // the user has not yet been added to the current chat
      // AND it is not the current user,
      // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,
      // but the current chat is not a channel AND the appropriate permission is set).
      return !memberIds.includes(userId) && userId !== currentUserId && (!user || !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserBot)(user) || !isChannel && user.canBeInvitedToGroup);
    }));
  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);
  const handleNextStep = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (selectedMemberIds.length) {
      setUserSearchQuery({
        query: ''
      });
      onNextStep(selectedMemberIds);
    }
  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "AddChatMembers"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "AddChatMembers-inner"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_pickers_PeerPicker__WEBPACK_IMPORTED_MODULE_11__["default"], {
    itemIds: displayedIds,
    selectedIds: selectedMemberIds,
    filterValue: searchQuery,
    filterPlaceholder: lang('lng_channel_add_users'),
    searchInputId: "new-members-picker-search",
    isLoading: isSearching,
    onSelectedIdsChange: setSelectedMemberIds,
    onFilterChange: handleFilterChange,
    isSearchable: true,
    withDefaultPadding: true,
    noScrollRestore: noPickerScrollRestore,
    allowMultiple: true,
    withStatus: true,
    itemInputType: "checkbox"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_FloatingActionButton__WEBPACK_IMPORTED_MODULE_12__["default"], {
    isShown: Boolean(selectedMemberIds.length),
    disabled: isLoading,
    ariaLabel: lang('lng_channel_add_users'),
    onClick: handleNextStep
  }, isLoading ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_13__["default"], {
    color: "white"
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "arrow-right"
  }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId);
  const {
    userIds: localContactIds
  } = global.contactList || {};
  const {
    newChatMembersProgress
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  const {
    currentUserId
  } = global;
  const isChannel = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat);
  const {
    query: searchQuery,
    fetchingStatus,
    globalUserIds,
    localUserIds
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).userSearch;
  return {
    isChannel,
    members: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatFullInfo)(global, chatId)?.members,
    currentUserId,
    localContactIds,
    searchQuery,
    isSearching: fetchingStatus,
    isLoading: newChatMembersProgress === _types__WEBPACK_IMPORTED_MODULE_2__.NewChatMembersProgress.Loading,
    globalUserIds,
    localUserIds
  };
})(AddChatMembers)));

/***/ }),

/***/ "./src/components/right/CreateTopic.async.tsx":
/*!****************************************************!*\
  !*** ./src/components/right/CreateTopic.async.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const CreateTopicAsync = props => {
  const CreateTopic = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'CreateTopic');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return CreateTopic ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(CreateTopic, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CreateTopicAsync);

/***/ }),

/***/ "./src/components/right/EditTopic.async.tsx":
/*!**************************************************!*\
  !*** ./src/components/right/EditTopic.async.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const EditTopicAsync = props => {
  const EditTopic = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'EditTopic');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return EditTopic ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(EditTopic, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EditTopicAsync);

/***/ }),

/***/ "./src/components/right/GifSearch.async.tsx":
/*!**************************************************!*\
  !*** ./src/components/right/GifSearch.async.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const GifSearchAsync = () => {
  const GifSearch = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'GifSearch');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return GifSearch ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GifSearch, null) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GifSearchAsync);

/***/ }),

/***/ "./src/components/right/PollResults.async.tsx":
/*!****************************************************!*\
  !*** ./src/components/right/PollResults.async.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const PollResultsAsync = () => {
  const PollResults = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'PollResults');
  return PollResults ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PollResults, null) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PollResultsAsync);

/***/ }),

/***/ "./src/components/right/Profile.tsx":
/*!******************************************!*\
  !*** ./src/components/right/Profile.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _global_selectors_limits__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../global/selectors/limits */ "./src/global/selectors/limits.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEvents__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/captureEvents */ "./src/util/captureEvents.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _left_search_helpers_getSenderName__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../left/search/helpers/getSenderName */ "./src/components/left/search/helpers/getSenderName.ts");
/* harmony import */ var _hooks_polling_usePeerStoriesPolling__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/polling/usePeerStoriesPolling */ "./src/hooks/polling/usePeerStoriesPolling.ts");
/* harmony import */ var _hooks_useCacheBuster__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/useCacheBuster */ "./src/hooks/useCacheBuster.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useAsyncRendering__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./hooks/useAsyncRendering */ "./src/components/right/hooks/useAsyncRendering.ts");
/* harmony import */ var _hooks_useProfileState__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./hooks/useProfileState */ "./src/components/right/hooks/useProfileState.ts");
/* harmony import */ var _hooks_useProfileViewportIds__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./hooks/useProfileViewportIds */ "./src/components/right/hooks/useProfileViewportIds.ts");
/* harmony import */ var _hooks_useTransitionFixes__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./hooks/useTransitionFixes */ "./src/components/right/hooks/useTransitionFixes.ts");
/* harmony import */ var _common_Audio__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../common/Audio */ "./src/components/common/Audio.tsx");
/* harmony import */ var _common_Document__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../common/Document */ "./src/components/common/Document.tsx");
/* harmony import */ var _common_gift_SavedGift__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../common/gift/SavedGift */ "./src/components/common/gift/SavedGift.tsx");
/* harmony import */ var _common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../common/GroupChatInfo */ "./src/components/common/GroupChatInfo.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_Media__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../common/Media */ "./src/components/common/Media.tsx");
/* harmony import */ var _common_NothingFound__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../common/NothingFound */ "./src/components/common/NothingFound.tsx");
/* harmony import */ var _common_PreviewMedia__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../common/PreviewMedia */ "./src/components/common/PreviewMedia.tsx");
/* harmony import */ var _common_PrivateChatInfo__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../common/PrivateChatInfo */ "./src/components/common/PrivateChatInfo.tsx");
/* harmony import */ var _common_profile_ChatExtra__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../common/profile/ChatExtra */ "./src/components/common/profile/ChatExtra.tsx");
/* harmony import */ var _common_ProfileInfo__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../common/ProfileInfo */ "./src/components/common/ProfileInfo.tsx");
/* harmony import */ var _common_WebLink__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../common/WebLink */ "./src/components/common/WebLink.tsx");
/* harmony import */ var _left_main_ChatList__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../left/main/ChatList */ "./src/components/left/main/ChatList.tsx");
/* harmony import */ var _story_MediaStory__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../story/MediaStory */ "./src/components/story/MediaStory.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_FloatingActionButton__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../ui/FloatingActionButton */ "./src/components/ui/FloatingActionButton.tsx");
/* harmony import */ var _ui_InfiniteScroll__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../ui/InfiniteScroll */ "./src/components/ui/InfiniteScroll.tsx");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _ui_TabList__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../ui/TabList */ "./src/components/ui/TabList.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _DeleteMemberModal__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./DeleteMemberModal */ "./src/components/right/DeleteMemberModal.tsx");
/* harmony import */ var _Profile_scss__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./Profile.scss */ "./src/components/right/Profile.scss");
















































const TABS = [{
  type: 'media',
  key: 'ProfileTabMedia'
}, {
  type: 'documents',
  key: 'ProfileTabFiles'
}, {
  type: 'links',
  key: 'ProfileTabLinks'
}, {
  type: 'audio',
  key: 'ProfileTabMusic'
}];
const HIDDEN_RENDER_DELAY = 1000;
const INTERSECTION_THROTTLE = 500;
const Profile = ({
  chatId,
  threadId,
  profileState,
  theme,
  isChannel,
  isBot,
  currentUserId,
  messagesById,
  foundIds,
  storyIds,
  pinnedStoryIds,
  archiveStoryIds,
  storyByIds,
  mediaSearchType,
  hasCommonChatsTab,
  hasStoriesTab,
  hasMembersTab,
  hasPreviewMediaTab,
  hasGiftsTab,
  gifts,
  botPreviewMedia,
  areMembersHidden,
  canAddMembers,
  canDeleteMembers,
  commonChatIds,
  members,
  adminMembersById,
  usersById,
  userStatusesById,
  chatsById,
  isRightColumnShown,
  isRestricted,
  activeDownloads,
  isChatProtected,
  nextProfileTab,
  shouldWarnAboutSvg,
  similarChannels,
  similarBots,
  isCurrentUserPremium,
  limitSimilarPeers,
  isTopicInfo,
  isSavedDialog,
  forceScrollProfileTab,
  isSynced,
  onProfileStateChange
}) => {
  const {
    setSharedMediaSearchType,
    loadMoreMembers,
    loadCommonChats,
    openChat,
    searchSharedMediaMessages,
    openMediaViewer,
    openAudioPlayer,
    focusMessage,
    setNewChatMembersDialogState,
    loadPeerProfileStories,
    loadStoriesArchive,
    openPremiumModal,
    loadChannelRecommendations,
    loadBotRecommendations,
    loadPreviewMedias,
    loadPeerSavedGifts
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const transitionRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_20__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_18__["default"])();
  const [deletingUserId, setDeletingUserId] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const profileId = isSavedDialog ? String(threadId) : chatId;
  const isSavedMessages = profileId === currentUserId && !isSavedDialog;
  const tabs = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const arr = [];
    if (isSavedMessages && !isSavedDialog) {
      arr.push({
        type: 'dialogs',
        key: 'ProfileTabSavedDialogs'
      });
    }
    if (hasStoriesTab) {
      arr.push({
        type: 'stories',
        key: 'ProfileTabStories'
      });
    }
    if (hasStoriesTab && isSavedMessages) {
      arr.push({
        type: 'storiesArchive',
        key: 'ProfileTabStoriesArchive'
      });
    }
    if (hasGiftsTab) {
      arr.push({
        type: 'gifts',
        key: 'ProfileTabGifts'
      });
    }
    if (hasMembersTab) {
      arr.push({
        type: 'members',
        key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers'
      });
    }
    if (hasPreviewMediaTab) {
      arr.push({
        type: 'previewMedia',
        key: 'ProfileTabBotPreview'
      });
    }
    arr.push(...TABS);

    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.
    if (!isTopicInfo) {
      arr.push({
        type: 'voice',
        key: 'ProfileTabVoice'
      });
    }
    if (hasCommonChatsTab) {
      arr.push({
        type: 'commonChats',
        key: 'ProfileTabSharedGroups'
      });
    }
    if (isChannel && similarChannels?.length) {
      arr.push({
        type: 'similarChannels',
        key: 'ProfileTabSimilarChannels'
      });
    }
    if (isBot && similarBots?.length) {
      arr.push({
        type: 'similarBots',
        key: 'ProfileTabSimilarBots'
      });
    }
    return arr.map(tab => ({
      type: tab.type,
      title: lang(tab.key)
    }));
  }, [isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo, hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang]);
  const initialTab = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!nextProfileTab) {
      return 0;
    }
    const index = tabs.findIndex(({
      type
    }) => type === nextProfileTab);
    return index === -1 ? 0 : index;
  }, [nextProfileTab, tabs]);
  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_16__["default"])(false);
  const [activeTab, setActiveTab] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(initialTab);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!nextProfileTab) return;
    const index = tabs.findIndex(({
      type
    }) => type === nextProfileTab);
    if (index === -1) return;
    setActiveTab(index);
  }, [nextProfileTab, tabs]);
  const handleSwitchTab = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(index => {
    startAutoScrollToTabsIfNeeded();
    setActiveTab(index);
  }, []);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (hasPreviewMediaTab && !botPreviewMedia) {
      loadPreviewMedias({
        botId: chatId
      });
    }
  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isChannel && !similarChannels && isSynced) {
      loadChannelRecommendations({
        chatId
      });
    }
  }, [chatId, isChannel, similarChannels, isSynced]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isBot && !similarBots && isSynced) {
      loadBotRecommendations({
        userId: chatId
      });
    }
  }, [chatId, isBot, similarBots, isSynced]);
  const giftIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return gifts?.map(({
      date,
      gift,
      fromId
    }) => `${date}-${fromId}-${gift.id}`);
  }, [gifts]);
  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;
  const tabType = tabs[renderingActiveTab].type;
  const handleLoadCommonChats = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    loadCommonChats({
      userId: chatId
    });
  }, [chatId]);
  const handleLoadPeerStories = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({
    offsetId
  }) => {
    loadPeerProfileStories({
      peerId: chatId,
      offsetId
    });
  }, [chatId]);
  const handleLoadStoriesArchive = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({
    offsetId
  }) => {
    loadStoriesArchive({
      peerId: currentUserId,
      offsetId
    });
  }, [currentUserId]);
  const handleLoadGifts = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    loadPeerSavedGifts({
      peerId: chatId
    });
  }, [chatId]);
  const [resultType, viewportIds, getMore, noProfileInfo] = (0,_hooks_useProfileViewportIds__WEBPACK_IMPORTED_MODULE_23__["default"])({
    loadMoreMembers,
    searchMessages: searchSharedMediaMessages,
    loadStories: handleLoadPeerStories,
    loadStoriesArchive: handleLoadStoriesArchive,
    loadMoreGifts: handleLoadGifts,
    loadCommonChats: handleLoadCommonChats,
    tabType,
    mediaSearchType,
    groupChatMembers: members,
    commonChatIds,
    usersById,
    userStatusesById,
    chatsById,
    chatMessages: messagesById,
    foundIds,
    threadId,
    storyIds,
    giftIds,
    pinnedStoryIds,
    archiveStoryIds,
    similarChannels,
    similarBots
  });
  const isFirstTab = isSavedMessages && resultType === 'dialogs' || hasStoriesTab && resultType === 'stories' || resultType === 'members' || !hasMembersTab && resultType === 'media';
  const activeKey = tabs.findIndex(({
    type
  }) => type === resultType);
  (0,_hooks_polling_usePeerStoriesPolling__WEBPACK_IMPORTED_MODULE_13__["default"])(resultType === 'members' ? viewportIds : undefined);
  const handleStopAutoScrollToTabs = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(() => {
    stopAutoScrollToTabs();
  });
  const {
    handleScroll
  } = (0,_hooks_useProfileState__WEBPACK_IMPORTED_MODULE_22__["default"])(containerRef, resultType, profileState, onProfileStateChange, forceScrollProfileTab, allowAutoScrollToTabs, handleStopAutoScrollToTabs);
  const {
    applyTransitionFix,
    releaseTransitionFix
  } = (0,_hooks_useTransitionFixes__WEBPACK_IMPORTED_MODULE_24__["default"])(containerRef);
  const [cacheBuster, resetCacheBuster] = (0,_hooks_useCacheBuster__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const {
    observe: observeIntersectionForMedia
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_17__.useIntersectionObserver)({
    rootRef: containerRef,
    throttleMs: INTERSECTION_THROTTLE
  });
  const handleTransitionStop = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(() => {
    releaseTransitionFix();
    resetCacheBuster();
  });
  const handleNewMemberDialogOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(() => {
    setNewChatMembersDialogState({
      newChatMembersProgress: _types__WEBPACK_IMPORTED_MODULE_3__.NewChatMembersProgress.InProgress
    });
  });

  // Update search type when switching tabs or forum topics
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setSharedMediaSearchType({
      mediaType: tabType
    });
  }, [setSharedMediaSearchType, tabType, threadId]);
  const handleSelectMedia = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(messageId => {
    openMediaViewer({
      chatId: profileId,
      threadId: _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID,
      messageId,
      origin: _types__WEBPACK_IMPORTED_MODULE_3__.MediaViewerOrigin.SharedMedia
    });
  });
  const handleSelectPreviewMedia = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(index => {
    openMediaViewer({
      standaloneMedia: botPreviewMedia?.flatMap(item => item?.content.photo || item?.content.video).filter(Boolean),
      origin: _types__WEBPACK_IMPORTED_MODULE_3__.MediaViewerOrigin.PreviewMedia,
      mediaIndex: index
    });
  });
  const handlePlayAudio = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(messageId => {
    openAudioPlayer({
      chatId: profileId,
      messageId
    });
  });
  const handleMemberClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(id => {
    openChat({
      id
    });
  });
  const handleMessageFocus = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(message => {
    focusMessage({
      chatId: message.chatId,
      messageId: message.id
    });
  });
  const handleDeleteMembersModalClose = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(() => {
    setDeletingUserId(undefined);
  });
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_15__["default"])(([prevHasMemberTabs]) => {
    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {
      return;
    }
    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);
    setActiveTab(Math.min(newActiveTab, tabs.length - 1));
  }, [hasMembersTab, activeTab, tabs]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!transitionRef.current || !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_TOUCH_ENV) {
      return undefined;
    }
    return (0,_util_captureEvents__WEBPACK_IMPORTED_MODULE_9__.captureEvents)(transitionRef.current, {
      selectorToPreventScroll: '.Profile',
      onSwipe: (e, direction) => {
        if (direction === _util_captureEvents__WEBPACK_IMPORTED_MODULE_9__.SwipeDirection.Left) {
          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));
          return true;
        } else if (direction === _util_captureEvents__WEBPACK_IMPORTED_MODULE_9__.SwipeDirection.Right) {
          setActiveTab(Math.max(0, renderingActiveTab - 1));
          return true;
        }
        return false;
      }
    });
  }, [renderingActiveTab, tabs.length]);
  let renderingDelay;
  // @optimization Used to unparallelize rendering of message list and profile media
  if (isFirstTab) {
    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;
    // @optimization Used to delay first render of secondary tabs while animating
  } else if (!viewportIds && !botPreviewMedia) {
    renderingDelay = _config__WEBPACK_IMPORTED_MODULE_4__.SLIDE_TRANSITION_DURATION;
  }
  const canRenderContent = (0,_hooks_useAsyncRendering__WEBPACK_IMPORTED_MODULE_21__["default"])([chatId, threadId, resultType, renderingActiveTab], renderingDelay);
  function getMemberContextAction(memberId) {
    return memberId === currentUserId || !canDeleteMembers ? undefined : [{
      title: oldLang('lng_context_remove_from_group'),
      icon: 'stop',
      handler: () => {
        setDeletingUserId(memberId);
      }
    }];
  }
  function renderContent() {
    if (resultType === 'dialogs') {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_left_main_ChatList__WEBPACK_IMPORTED_MODULE_37__["default"], {
        className: "saved-dialogs",
        folderType: "saved",
        isActive: true
      });
    }
    if (!viewportIds && !botPreviewMedia || !canRenderContent || !messagesById) {
      const noSpinner = isFirstTab && !canRenderContent;
      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "content empty-list"
      }, !noSpinner && !forceRenderHiddenMembers && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_43__["default"], null), forceRenderHiddenMembers && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_NothingFound__WEBPACK_IMPORTED_MODULE_31__["default"], {
        text: "You have no access to group members list."
      }));
    }
    if (viewportIds && !viewportIds?.length) {
      let text;
      switch (resultType) {
        case 'members':
          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';
          break;
        case 'commonChats':
          text = oldLang('NoGroupsInCommon');
          break;
        case 'documents':
          text = oldLang('lng_media_file_empty');
          break;
        case 'links':
          text = oldLang('lng_media_link_empty');
          break;
        case 'audio':
          text = oldLang('lng_media_song_empty');
          break;
        case 'voice':
          text = oldLang('lng_media_audio_empty');
          break;
        case 'stories':
          text = oldLang('StoryList.SavedEmptyState.Title');
          break;
        case 'storiesArchive':
          text = oldLang('StoryList.ArchivedEmptyState.Title');
          break;
        default:
          text = oldLang('SharedMedia.EmptyTitle');
      }
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "content empty-list"
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_NothingFound__WEBPACK_IMPORTED_MODULE_31__["default"], {
        text: text
      }));
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: `content ${resultType}-list`,
      dir: oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined,
      teactFastList: true
    }, resultType === 'media' ? viewportIds.map(id => messagesById[id] && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Media__WEBPACK_IMPORTED_MODULE_30__["default"], {
      key: id,
      message: messagesById[id],
      isProtected: isChatProtected || messagesById[id].isProtected,
      observeIntersection: observeIntersectionForMedia,
      onClick: handleSelectMedia
    })) : resultType === 'stories' || resultType === 'storiesArchive' ? viewportIds.map((id, i) => storyByIds?.[id] && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_story_MediaStory__WEBPACK_IMPORTED_MODULE_38__["default"], {
      teactOrderKey: i,
      key: `${resultType}_${id}`,
      story: storyByIds[id],
      isArchive: resultType === 'storiesArchive'
    })) : resultType === 'documents' ? viewportIds.map(id => messagesById[id] && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Document__WEBPACK_IMPORTED_MODULE_26__["default"], {
      key: id,
      document: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageDocument)(messagesById[id]),
      withDate: true,
      smaller: true,
      className: "scroll-item",
      isDownloading: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsDownloading)(activeDownloads, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageDocument)(messagesById[id])),
      observeIntersection: observeIntersectionForMedia,
      onDateClick: handleMessageFocus,
      message: messagesById[id],
      shouldWarnAboutSvg: shouldWarnAboutSvg
    })) : resultType === 'links' ? viewportIds.map(id => messagesById[id] && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_WebLink__WEBPACK_IMPORTED_MODULE_36__["default"], {
      key: id,
      message: messagesById[id],
      isProtected: isChatProtected || messagesById[id].isProtected,
      observeIntersection: observeIntersectionForMedia,
      onMessageClick: handleMessageFocus
    })) : resultType === 'audio' ? viewportIds.map(id => messagesById[id] && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Audio__WEBPACK_IMPORTED_MODULE_25__["default"], {
      key: id,
      theme: theme,
      message: messagesById[id],
      origin: _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.SharedMedia,
      date: messagesById[id].date,
      className: "scroll-item",
      onPlay: handlePlayAudio,
      onDateClick: handleMessageFocus,
      canDownload: !isChatProtected && !messagesById[id].isProtected,
      isDownloading: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsDownloading)(activeDownloads, messagesById[id].content.audio)
    })) : resultType === 'voice' ? viewportIds.map(id => {
      const message = messagesById[id];
      if (!message) return undefined;
      const media = messagesById[id] && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getMessageDownloadableMedia)(message);
      return messagesById[id] && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Audio__WEBPACK_IMPORTED_MODULE_25__["default"], {
        key: id,
        theme: theme,
        message: messagesById[id],
        senderTitle: (0,_left_search_helpers_getSenderName__WEBPACK_IMPORTED_MODULE_12__.getSenderName)(oldLang, messagesById[id], chatsById, usersById),
        origin: _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.SharedMedia,
        date: messagesById[id].date,
        className: "scroll-item",
        onPlay: handlePlayAudio,
        onDateClick: handleMessageFocus,
        canDownload: !isChatProtected && !messagesById[id].isProtected,
        isDownloading: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsDownloading)(activeDownloads, media)
      });
    }) : resultType === 'members' ? viewportIds.map((id, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_42__["default"], {
      key: id,
      teactOrderKey: i,
      className: "chat-item-clickable contact-list-item scroll-item small-icon"
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => handleMemberClick(id),
      contextActions: getMemberContextAction(id)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PrivateChatInfo__WEBPACK_IMPORTED_MODULE_33__["default"], {
      userId: id,
      adminMember: adminMembersById?.[id],
      forceShowSelf: true,
      withStory: true
    }))) : resultType === 'commonChats' ? viewportIds.map((id, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_42__["default"], {
      key: id,
      teactOrderKey: i,
      className: "chat-item-clickable scroll-item small-icon"
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => openChat({
        id
      })
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_28__["default"], {
      chatId: id
    }))) : resultType === 'previewMedia' ? botPreviewMedia.map((media, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PreviewMedia__WEBPACK_IMPORTED_MODULE_32__["default"], {
      key: media.date,
      media: media,
      isProtected: isChatProtected,
      observeIntersection: observeIntersectionForMedia,
      onClick: handleSelectPreviewMedia,
      index: i
    })) : resultType === 'similarChannels' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      key: resultType
    }, viewportIds.map((channelId, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_42__["default"], {
      key: channelId,
      teactOrderKey: i,
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('chat-item-clickable search-result', !isCurrentUserPremium && i === similarChannels.length - 1 && 'blured')
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => openChat({
        id: channelId
      })
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_28__["default"], {
      avatarSize: "large",
      chatId: channelId,
      withFullInfo: true
    }))), !isCurrentUserPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_39__["default"], {
      className: "show-more-channels",
      size: "smaller",
      onClick: () => openPremiumModal()
    }, oldLang('UnlockSimilar'), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_29__["default"], {
      name: "unlock-badge"
    })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "more-similar"
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])))) : resultType === 'similarBots' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      key: resultType
    }, viewportIds.map((userId, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_42__["default"], {
      key: userId,
      teactOrderKey: i,
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('chat-item-clickable search-result', !isCurrentUserPremium && i === similarBots.length - 1 && 'blured')
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => openChat({
        id: userId
      })
    }, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(userId) ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PrivateChatInfo__WEBPACK_IMPORTED_MODULE_33__["default"], {
      userId: userId,
      avatarSize: "medium"
    }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_28__["default"], {
      chatId: userId,
      avatarSize: "medium"
    }))), !isCurrentUserPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_39__["default"], {
      className: "show-more-bots",
      size: "smaller",
      onClick: () => openPremiumModal()
    }, lang('UnlockMoreSimilarBots'), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_29__["default"], {
      name: "unlock-badge"
    })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "more-similar"
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang('MoreSimilarBotsText', {
      count: limitSimilarPeers
    }, {
      withNodes: true,
      withMarkdown: true
    }))))) : resultType === 'gifts' ? gifts?.map(gift => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_gift_SavedGift__WEBPACK_IMPORTED_MODULE_27__["default"], {
      peerId: chatId,
      key: `${gift.date}-${gift.fromId}-${gift.gift.id}`,
      gift: gift,
      observeIntersection: observeIntersectionForMedia
    })) : undefined);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_InfiniteScroll__WEBPACK_IMPORTED_MODULE_41__["default"], {
    ref: containerRef,
    className: "Profile custom-scroll",
    itemSelector: `.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`,
    items: canRenderContent ? viewportIds : undefined,
    cacheBuster: cacheBuster,
    sensitiveArea: _config__WEBPACK_IMPORTED_MODULE_4__.PROFILE_SENSITIVE_AREA,
    preloadBackwards: canRenderContent ? resultType === 'members' ? _config__WEBPACK_IMPORTED_MODULE_4__.MEMBERS_SLICE : _config__WEBPACK_IMPORTED_MODULE_4__.SHARED_MEDIA_SLICE : 0
    // To prevent scroll jumps caused by reordering member list
    ,
    noScrollRestoreOnTop: true,
    noFastList: true,
    onLoadMore: getMore,
    onScroll: handleScroll
  }, !noProfileInfo && !isSavedMessages && renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog), !isRestricted && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "shared-media"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_45__["default"], {
    ref: transitionRef,
    name: oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized',
    activeKey: activeKey,
    renderCount: tabs.length,
    shouldRestoreHeight: true,
    className: "shared-media-transition",
    onStart: applyTransitionFix,
    onStop: handleTransitionStop
  }, renderContent()), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_TabList__WEBPACK_IMPORTED_MODULE_44__["default"], {
    activeTab: renderingActiveTab,
    tabs: tabs,
    onSwitchTab: handleSwitchTab
  })), canAddMembers && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_FloatingActionButton__WEBPACK_IMPORTED_MODULE_40__["default"], {
    isShown: resultType === 'members',
    onClick: handleNewMemberDialogOpen,
    ariaLabel: oldLang('lng_channel_add_users')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_29__["default"], {
    name: "add-user-filled"
  })), canDeleteMembers && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DeleteMemberModal__WEBPACK_IMPORTED_MODULE_46__["default"], {
    isOpen: Boolean(deletingUserId),
    userId: deletingUserId,
    onClose: handleDeleteMembersModalClose
  }));
};
function renderProfileInfo(profileId, isReady, isSavedDialog) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "profile-info"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_ProfileInfo__WEBPACK_IMPORTED_MODULE_35__["default"], {
    peerId: profileId,
    canPlayVideo: isReady
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_profile_ChatExtra__WEBPACK_IMPORTED_MODULE_34__["default"], {
    chatOrUserId: profileId,
    isSavedDialog: isSavedDialog
  }));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId,
  isMobile
}) => {
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUser)(global, chatId);
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId);
  const chatFullInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatFullInfo)(global, chatId);
  const userFullInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUserFullInfo)(global, chatId);
  const messagesById = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessages)(global, chatId);
  const {
    currentType: mediaSearchType,
    resultsByType
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentSharedMediaSearch)(global) || {};
  const {
    foundIds
  } = resultsByType && mediaSearchType && resultsByType[mediaSearchType] || {};
  const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID);
  const {
    byId: usersById,
    statusesById: userStatusesById
  } = global.users;
  const {
    byId: chatsById
  } = global.chats;
  const isSavedDialog = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  const isGroup = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatGroup)(chat);
  const isChannel = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatChannel)(chat);
  const isBot = user && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserBot)(user);
  const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || isChannel && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatAdmin)(chat));
  const members = chatFullInfo?.members;
  const adminMembersById = chatFullInfo?.adminMembersById;
  const areMembersHidden = hasMembersTab && chat && (chat.isForbidden || chatFullInfo && !chatFullInfo.canViewMembers);
  const canAddMembers = hasMembersTab && chat && ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getHasAdminRight)(chat, 'inviteUsers') || !isChannel && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserRightBanned)(chat, 'inviteUsers') || chat.isCreator);
  const canDeleteMembers = hasMembersTab && chat && ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getHasAdminRight)(chat, 'banUsers') || chat.isCreator);
  const activeDownloads = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectActiveDownloads)(global);
  const {
    similarChannelIds
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectSimilarChannelIds)(global, chatId) || {};
  const {
    similarBotsIds
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectSimilarBotsIds)(global, chatId) || {};
  const isCurrentUserPremium = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsCurrentUserPremium)(global);
  const peer = user || chat;
  const peerFullInfo = userFullInfo || chatFullInfo;
  const hasCommonChatsTab = user && !user.isSelf && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserBot)(user) && !isSavedDialog && Boolean(userFullInfo?.commonChatsCount);
  const commonChats = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUserCommonChats)(global, chatId);
  const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;
  const botPreviewMedia = global.users.previewMediaByBotId[chatId];
  const hasStoriesTab = peer && (user?.isSelf || !peer.areStoriesHidden && peerFullInfo?.hasPinnedStories) && !isSavedDialog;
  const peerStories = hasStoriesTab ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPeerStories)(global, peer.id) : undefined;
  const storyIds = peerStories?.profileIds;
  const pinnedStoryIds = peerStories?.pinnedIds;
  const storyByIds = peerStories?.byId;
  const archiveStoryIds = peerStories?.archiveIds;
  const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;
  const peerGifts = global.peers.giftsById[chatId];
  return {
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTheme)(global),
    isChannel,
    isBot,
    messagesById,
    foundIds,
    mediaSearchType,
    hasCommonChatsTab,
    hasStoriesTab,
    hasMembersTab,
    hasPreviewMediaTab,
    areMembersHidden,
    canAddMembers,
    canDeleteMembers,
    currentUserId: global.currentUserId,
    isRightColumnShown: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsRightColumnShown)(global, isMobile),
    isRestricted: chat?.isRestricted,
    activeDownloads,
    usersById,
    userStatusesById,
    chatsById,
    storyIds,
    hasGiftsTab,
    gifts: peerGifts?.gifts,
    pinnedStoryIds,
    archiveStoryIds,
    storyByIds,
    isChatProtected: chat?.isProtected,
    nextProfileTab: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global).nextProfileTab,
    forceScrollProfileTab: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global).forceScrollProfileTab,
    shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,
    similarChannels: similarChannelIds,
    similarBots: similarBotsIds,
    botPreviewMedia,
    isCurrentUserPremium,
    isTopicInfo,
    isSavedDialog,
    isSynced: global.isSynced,
    limitSimilarPeers: (0,_global_selectors_limits__WEBPACK_IMPORTED_MODULE_7__.selectPremiumLimit)(global, 'recommendedChannels'),
    ...(hasMembersTab && members && {
      members,
      adminMembersById
    }),
    ...(hasCommonChatsTab && user && {
      commonChatIds: commonChats?.ids
    })
  };
})(Profile)));

/***/ }),

/***/ "./src/components/right/RightColumn.tsx":
/*!**********************************************!*\
  !*** ./src/components/right/RightColumn.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useLayoutEffectWithPrevDeps */ "./src/hooks/useLayoutEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/window/useWindowSize */ "./src/hooks/window/useWindowSize.ts");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _AddChatMembers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./AddChatMembers */ "./src/components/right/AddChatMembers.tsx");
/* harmony import */ var _CreateTopic_async__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CreateTopic.async */ "./src/components/right/CreateTopic.async.tsx");
/* harmony import */ var _EditTopic_async__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./EditTopic.async */ "./src/components/right/EditTopic.async.tsx");
/* harmony import */ var _GifSearch_async__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./GifSearch.async */ "./src/components/right/GifSearch.async.tsx");
/* harmony import */ var _management_Management_async__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./management/Management.async */ "./src/components/right/management/Management.async.tsx");
/* harmony import */ var _PollResults_async__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./PollResults.async */ "./src/components/right/PollResults.async.tsx");
/* harmony import */ var _Profile__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Profile */ "./src/components/right/Profile.tsx");
/* harmony import */ var _RightHeader__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./RightHeader */ "./src/components/right/RightHeader.tsx");
/* harmony import */ var _statistics_BoostStatistics__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./statistics/BoostStatistics */ "./src/components/right/statistics/BoostStatistics.tsx");
/* harmony import */ var _statistics_MessageStatistics_async__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./statistics/MessageStatistics.async */ "./src/components/right/statistics/MessageStatistics.async.tsx");
/* harmony import */ var _statistics_MonetizationStatistics__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./statistics/MonetizationStatistics */ "./src/components/right/statistics/MonetizationStatistics.tsx");
/* harmony import */ var _statistics_Statistics_async__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./statistics/Statistics.async */ "./src/components/right/statistics/Statistics.async.tsx");
/* harmony import */ var _statistics_StoryStatistics_async__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./statistics/StoryStatistics.async */ "./src/components/right/statistics/StoryStatistics.async.tsx");
/* harmony import */ var _StickerSearch_async__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./StickerSearch.async */ "./src/components/right/StickerSearch.async.tsx");
/* harmony import */ var _RightColumn_scss__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./RightColumn.scss */ "./src/components/right/RightColumn.scss");




























const ANIMATION_DURATION = 450 + _config__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_END_DELAY;
const MAIN_SCREENS_COUNT = Object.keys(_types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent).length / 2;
const MANAGEMENT_SCREENS_COUNT = Object.keys(_types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens).length / 2;
function blurSearchInput() {
  const searchInput = document.querySelector('.RightHeader .SearchInput input');
  if (searchInput) {
    searchInput.blur();
  }
}
const RightColumn = ({
  contentKey,
  chatId,
  threadId,
  isMobile,
  isChatSelected,
  shouldSkipHistoryAnimations,
  nextManagementScreen,
  nextProfileTab,
  shouldCloseRightColumn,
  isSavedMessages,
  isSavedDialog
}) => {
  const {
    toggleChatInfo,
    toggleManagement,
    setStickerSearchQuery,
    setGifSearchQuery,
    closePollResults,
    addChatMembers,
    setNewChatMembersDialogState,
    setEditingExportedInvite,
    toggleStatistics,
    toggleMessageStatistics,
    toggleStoryStatistics,
    setOpenedInviteInfo,
    requestNextManagementScreen,
    resetNextProfileTab,
    closeCreateTopicPanel,
    closeEditTopicPanel,
    closeBoostStatistics,
    setShouldCloseRightColumn,
    closeMonetizationStatistics
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    width: windowWidth
  } = (0,_hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const [profileState, setProfileState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(isSavedMessages && !isSavedDialog ? _types__WEBPACK_IMPORTED_MODULE_2__.ProfileState.SavedDialogs : _types__WEBPACK_IMPORTED_MODULE_2__.ProfileState.Profile);
  const [managementScreen, setManagementScreen] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Initial);
  const [selectedChatMemberId, setSelectedChatMemberId] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const isScrolledDown = profileState !== _types__WEBPACK_IMPORTED_MODULE_2__.ProfileState.Profile;
  const isOpen = contentKey !== undefined;
  const isProfile = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.ChatInfo;
  const isManagement = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Management;
  const isStatistics = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Statistics;
  const isMessageStatistics = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.MessageStatistics;
  const isStoryStatistics = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.StoryStatistics;
  const isBoostStatistics = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.BoostStatistics;
  const isMonetizationStatistics = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.MonetizationStatistics;
  const isStickerSearch = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.StickerSearch;
  const isGifSearch = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.GifSearch;
  const isPollResults = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.PollResults;
  const isAddingChatMembers = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.AddingMembers;
  const isCreatingTopic = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.CreateTopic;
  const isEditingTopic = contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.EditTopic;
  const isOverlaying = windowWidth <= _config__WEBPACK_IMPORTED_MODULE_3__.MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;
  const [shouldSkipTransition, setShouldSkipTransition] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!isOpen);
  const renderingContentKey = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_7__["default"])(contentKey, true, !isChatSelected) ?? -1;
  const close = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])((shouldScrollUp = true) => {
    switch (contentKey) {
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.AddingMembers:
        setNewChatMembersDialogState({
          newChatMembersProgress: _types__WEBPACK_IMPORTED_MODULE_2__.NewChatMembersProgress.Closed
        });
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.ChatInfo:
        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {
          setProfileState(_types__WEBPACK_IMPORTED_MODULE_2__.ProfileState.Profile);
          break;
        }
        toggleChatInfo({
          force: false
        }, {
          forceSyncOnIOs: true
        });
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Management:
        {
          switch (managementScreen) {
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Initial:
              toggleManagement();
              break;
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.ChatPrivacyType:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Discussion:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupPermissions:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupType:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.ChatAdministrators:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.ChannelSubscribers:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupMembers:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Invites:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Reactions:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.JoinRequests:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.ChannelRemovedUsers:
              setManagementScreen(_types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Initial);
              break;
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupUserPermissionsCreate:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupRemovedUsers:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupUserPermissions:
              setManagementScreen(_types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupPermissions);
              setSelectedChatMemberId(undefined);
              setIsPromotedByCurrentUser(undefined);
              break;
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.ChatAdminRights:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.ChatNewAdminRights:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupAddAdmins:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.GroupRecentActions:
              setManagementScreen(_types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.ChatAdministrators);
              break;
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.EditInvite:
            case _types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.InviteInfo:
              setManagementScreen(_types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Invites);
              setOpenedInviteInfo({
                chatId: chatId,
                invite: undefined
              });
              setEditingExportedInvite({
                chatId: chatId,
                invite: undefined
              });
              break;
          }
          break;
        }
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.MessageStatistics:
        toggleMessageStatistics();
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.StoryStatistics:
        toggleStoryStatistics();
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Statistics:
        toggleStatistics();
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.BoostStatistics:
        closeBoostStatistics();
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.MonetizationStatistics:
        closeMonetizationStatistics();
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.StickerSearch:
        blurSearchInput();
        setStickerSearchQuery({
          query: undefined
        });
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.GifSearch:
        {
          blurSearchInput();
          setGifSearchQuery({
            query: undefined
          });
          break;
        }
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.PollResults:
        closePollResults();
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.CreateTopic:
        closeCreateTopicPanel();
        break;
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.EditTopic:
        closeEditTopicPanel();
        break;
    }
  });
  const handleSelectChatMember = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])((memberId, isPromoted) => {
    setSelectedChatMemberId(memberId);
    setIsPromotedByCurrentUser(isPromoted);
  });
  const handleAppendingChatMembers = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(memberIds => {
    addChatMembers({
      chatId: chatId,
      memberIds
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => isOpen && chatId ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_6__["default"])(close) : undefined, [isOpen, close, chatId]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setTimeout(() => {
      setShouldSkipTransition(!isOpen);
    }, ANIMATION_DURATION);
  }, [isOpen]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (nextManagementScreen) {
      setManagementScreen(nextManagementScreen);
      requestNextManagementScreen(undefined);
    }
  }, [nextManagementScreen]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!nextProfileTab) return;
    resetNextProfileTab();
  }, [nextProfileTab]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (shouldCloseRightColumn) {
      close();
      setShouldCloseRightColumn({
        value: undefined
      });
    }
  }, [shouldCloseRightColumn]);

  // Close Right Column when it transforms into overlayed state on screen resize
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isOpen && isOverlaying) {
      close();
    }
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, [isOverlaying]);

  // We need to clear profile state and management screen state, when changing chats
  (0,_hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_10__["default"])(([prevChatId, prevThreadId]) => {
    if (prevChatId !== chatId || prevThreadId !== threadId) {
      setProfileState(isSavedMessages && !isSavedDialog ? _types__WEBPACK_IMPORTED_MODULE_2__.ProfileState.SavedDialogs : _types__WEBPACK_IMPORTED_MODULE_2__.ProfileState.Profile);
      setManagementScreen(_types__WEBPACK_IMPORTED_MODULE_2__.ManagementScreens.Initial);
    }
  }, [chatId, threadId, isSavedDialog, isSavedMessages]);
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_8__["default"])({
    isActive: isChatSelected && (contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.ChatInfo || contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Management || contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.AddingMembers || contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.CreateTopic || contentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.EditTopic),
    onBack: () => close(false)
  });
  function renderContent(isActive) {
    if (renderingContentKey === -1) {
      return undefined;
    }
    switch (renderingContentKey) {
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.AddingMembers:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AddChatMembers__WEBPACK_IMPORTED_MODULE_13__["default"], {
          key: `add_chat_members_${chatId}`,
          chatId: chatId,
          isActive: isOpen && isActive,
          onNextStep: handleAppendingChatMembers,
          onClose: close
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.ChatInfo:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Profile__WEBPACK_IMPORTED_MODULE_19__["default"], {
          key: `profile_${chatId}_${threadId}`,
          chatId: chatId,
          threadId: threadId,
          profileState: profileState,
          isMobile: isMobile,
          onProfileStateChange: setProfileState
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Management:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_management_Management_async__WEBPACK_IMPORTED_MODULE_17__["default"], {
          key: `management_${chatId}_${managementScreen}`,
          chatId: chatId,
          currentScreen: managementScreen,
          isPromotedByCurrentUser: isPromotedByCurrentUser,
          selectedChatMemberId: selectedChatMemberId,
          isActive: isOpen && isActive,
          onScreenSelect: setManagementScreen,
          onChatMemberSelect: handleSelectChatMember,
          onClose: close
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Statistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_statistics_Statistics_async__WEBPACK_IMPORTED_MODULE_24__["default"], {
          chatId: chatId
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.BoostStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_statistics_BoostStatistics__WEBPACK_IMPORTED_MODULE_21__["default"], null);
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.MonetizationStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_statistics_MonetizationStatistics__WEBPACK_IMPORTED_MODULE_23__["default"], null);
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.MessageStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_statistics_MessageStatistics_async__WEBPACK_IMPORTED_MODULE_22__["default"], {
          chatId: chatId,
          isActive: isOpen && isActive
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.StoryStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_statistics_StoryStatistics_async__WEBPACK_IMPORTED_MODULE_25__["default"], {
          chatId: chatId,
          isActive: isOpen && isActive
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.StickerSearch:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StickerSearch_async__WEBPACK_IMPORTED_MODULE_26__["default"], {
          onClose: close,
          isActive: isOpen && isActive
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.GifSearch:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_GifSearch_async__WEBPACK_IMPORTED_MODULE_16__["default"], {
          onClose: close,
          isActive: isOpen && isActive
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.PollResults:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_PollResults_async__WEBPACK_IMPORTED_MODULE_18__["default"], {
          onClose: close,
          isActive: isOpen && isActive
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.CreateTopic:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CreateTopic_async__WEBPACK_IMPORTED_MODULE_14__["default"], {
          onClose: close,
          isActive: isOpen && isActive
        });
      case _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.EditTopic:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_EditTopic_async__WEBPACK_IMPORTED_MODULE_15__["default"], {
          onClose: close,
          isActive: isOpen && isActive
        });
    }
    return undefined; // Unreachable
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "RightColumn-wrapper",
    className: !isChatSelected ? 'is-hidden' : undefined
  }, isOverlaying && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "overlay-backdrop",
    onClick: close
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "RightColumn"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_RightHeader__WEBPACK_IMPORTED_MODULE_20__["default"], {
    chatId: chatId,
    threadId: threadId,
    isColumnOpen: isOpen,
    isProfile: isProfile,
    isManagement: isManagement,
    isStatistics: isStatistics,
    isBoostStatistics: isBoostStatistics,
    isMonetizationStatistics: isMonetizationStatistics,
    isMessageStatistics: isMessageStatistics,
    isStoryStatistics: isStoryStatistics,
    isStickerSearch: isStickerSearch,
    isGifSearch: isGifSearch,
    isPollResults: isPollResults,
    isCreatingTopic: isCreatingTopic,
    isEditingTopic: isEditingTopic,
    isAddingChatMembers: isAddingChatMembers,
    profileState: profileState,
    managementScreen: managementScreen,
    onClose: close,
    onScreenSelect: setManagementScreen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_12__["default"], {
    name: shouldSkipTransition || shouldSkipHistoryAnimations ? 'none' : 'zoomFade',
    renderCount: MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT,
    activeKey: isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey,
    shouldCleanup: true,
    cleanupExceptionKey: renderingContentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.MessageStatistics || renderingContentKey === _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.StoryStatistics ? _types__WEBPACK_IMPORTED_MODULE_2__.RightColumnContent.Statistics : undefined
  }, renderContent)));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  isMobile
}) => {
  const {
    chatId,
    threadId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectCurrentMessageList)(global) || {};
  const areActiveChatsLoaded = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectAreActiveChatsLoaded)(global);
  const {
    management,
    shouldSkipHistoryAnimations,
    nextProfileTab,
    shouldCloseRightColumn
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global);
  const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;
  const isSavedMessages = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectIsChatWithSelf)(global, chatId) : undefined;
  const isSavedDialog = chatId ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getIsSavedDialog)(chatId, threadId, global.currentUserId) : undefined;
  return {
    contentKey: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectRightColumnContentKey)(global, isMobile),
    chatId,
    threadId,
    isChatSelected: Boolean(chatId && areActiveChatsLoaded),
    shouldSkipHistoryAnimations,
    nextManagementScreen,
    nextProfileTab,
    shouldCloseRightColumn,
    isSavedMessages,
    isSavedDialog
  };
})(RightColumn)));

/***/ }),

/***/ "./src/components/right/RightHeader.tsx":
/*!**********************************************!*\
  !*** ./src/components/right/RightHeader.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useElectronDrag */ "./src/hooks/useElectronDrag.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useFolderManager */ "./src/hooks/useFolderManager.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _ui_SearchInput__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../ui/SearchInput */ "./src/components/ui/SearchInput.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _RightHeader_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./RightHeader.scss */ "./src/components/right/RightHeader.scss");





















const COLUMN_ANIMATION_DURATION = 450 + _config__WEBPACK_IMPORTED_MODULE_4__.ANIMATION_END_DELAY;
var HeaderContent = /*#__PURE__*/function (HeaderContent) {
  HeaderContent[HeaderContent["Profile"] = 0] = "Profile";
  HeaderContent[HeaderContent["MemberList"] = 1] = "MemberList";
  HeaderContent[HeaderContent["SharedMedia"] = 2] = "SharedMedia";
  HeaderContent[HeaderContent["StoryList"] = 3] = "StoryList";
  HeaderContent[HeaderContent["Search"] = 4] = "Search";
  HeaderContent[HeaderContent["Statistics"] = 5] = "Statistics";
  HeaderContent[HeaderContent["MessageStatistics"] = 6] = "MessageStatistics";
  HeaderContent[HeaderContent["StoryStatistics"] = 7] = "StoryStatistics";
  HeaderContent[HeaderContent["BoostStatistics"] = 8] = "BoostStatistics";
  HeaderContent[HeaderContent["MonetizationStatistics"] = 9] = "MonetizationStatistics";
  HeaderContent[HeaderContent["Management"] = 10] = "Management";
  HeaderContent[HeaderContent["ManageInitial"] = 11] = "ManageInitial";
  HeaderContent[HeaderContent["ManageChannelSubscribers"] = 12] = "ManageChannelSubscribers";
  HeaderContent[HeaderContent["ManageChatAdministrators"] = 13] = "ManageChatAdministrators";
  HeaderContent[HeaderContent["ManageChatPrivacyType"] = 14] = "ManageChatPrivacyType";
  HeaderContent[HeaderContent["ManageDiscussion"] = 15] = "ManageDiscussion";
  HeaderContent[HeaderContent["ManageGroupPermissions"] = 16] = "ManageGroupPermissions";
  HeaderContent[HeaderContent["ManageGroupRemovedUsers"] = 17] = "ManageGroupRemovedUsers";
  HeaderContent[HeaderContent["ManageChannelRemovedUsers"] = 18] = "ManageChannelRemovedUsers";
  HeaderContent[HeaderContent["ManageGroupUserPermissionsCreate"] = 19] = "ManageGroupUserPermissionsCreate";
  HeaderContent[HeaderContent["ManageGroupUserPermissions"] = 20] = "ManageGroupUserPermissions";
  HeaderContent[HeaderContent["ManageGroupRecentActions"] = 21] = "ManageGroupRecentActions";
  HeaderContent[HeaderContent["ManageGroupAdminRights"] = 22] = "ManageGroupAdminRights";
  HeaderContent[HeaderContent["ManageGroupNewAdminRights"] = 23] = "ManageGroupNewAdminRights";
  HeaderContent[HeaderContent["ManageGroupMembers"] = 24] = "ManageGroupMembers";
  HeaderContent[HeaderContent["ManageGroupAddAdmins"] = 25] = "ManageGroupAddAdmins";
  HeaderContent[HeaderContent["StickerSearch"] = 26] = "StickerSearch";
  HeaderContent[HeaderContent["GifSearch"] = 27] = "GifSearch";
  HeaderContent[HeaderContent["PollResults"] = 28] = "PollResults";
  HeaderContent[HeaderContent["AddingMembers"] = 29] = "AddingMembers";
  HeaderContent[HeaderContent["ManageInvites"] = 30] = "ManageInvites";
  HeaderContent[HeaderContent["ManageEditInvite"] = 31] = "ManageEditInvite";
  HeaderContent[HeaderContent["ManageReactions"] = 32] = "ManageReactions";
  HeaderContent[HeaderContent["ManageInviteInfo"] = 33] = "ManageInviteInfo";
  HeaderContent[HeaderContent["ManageJoinRequests"] = 34] = "ManageJoinRequests";
  HeaderContent[HeaderContent["CreateTopic"] = 35] = "CreateTopic";
  HeaderContent[HeaderContent["EditTopic"] = 36] = "EditTopic";
  HeaderContent[HeaderContent["SavedDialogs"] = 37] = "SavedDialogs";
  return HeaderContent;
}(HeaderContent || {});
const RightHeader = ({
  chatId,
  threadId,
  isColumnOpen,
  isProfile,
  isManagement,
  isStatistics,
  isMessageStatistics,
  isStoryStatistics,
  isMonetizationStatistics,
  isBoostStatistics,
  isStickerSearch,
  isGifSearch,
  isPollResults,
  isCreatingTopic,
  isEditingTopic,
  isAddingChatMembers,
  profileState,
  managementScreen,
  canAddContact,
  userId,
  isSelf,
  canManage,
  isChannel,
  stickerSearchQuery,
  gifSearchQuery,
  isEditingInvite,
  canViewStatistics,
  currentInviteInfo,
  shouldSkipHistoryAnimations,
  isBot,
  isInsideTopic,
  canEditTopic,
  isSavedMessages,
  onClose,
  onScreenSelect,
  canEditBot
}) => {
  const {
    setStickerSearchQuery,
    setGifSearchQuery,
    toggleManagement,
    openAddContactDialog,
    toggleStatistics,
    setEditingExportedInvite,
    deleteExportedChatInvite,
    openEditTopicPanel
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const foldersChatCount = (0,_hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_12__.useFolderManagerForChatsCount)();
  const handleEditInviteClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    setEditingExportedInvite({
      chatId: chatId,
      invite: currentInviteInfo
    });
    onScreenSelect(_types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.EditInvite);
  });
  const handleDeleteInviteClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    deleteExportedChatInvite({
      chatId: chatId,
      link: currentInviteInfo.link
    });
    onScreenSelect(_types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.Invites);
    closeDeleteDialog();
  });
  const handleStickerSearchQueryChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(query => {
    setStickerSearchQuery({
      query
    });
  });
  const handleGifSearchQueryChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(query => {
    setGifSearchQuery({
      query
    });
  });
  const handleAddContact = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    openAddContactDialog({
      userId
    });
  });
  const toggleEditTopic = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    if (!chatId || !threadId) return;
    openEditTopicPanel({
      chatId,
      topicId: Number(threadId)
    });
  });
  const handleToggleManagement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    toggleManagement();
  });
  const handleToggleStatistics = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    toggleStatistics();
  });
  const handleClose = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    onClose(!isSavedMessages);
  });
  const [shouldSkipTransition, setShouldSkipTransition] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!isColumnOpen);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setTimeout(() => {
      setShouldSkipTransition(!isColumnOpen);
    }, COLUMN_ANIMATION_DURATION);
  }, [isColumnOpen]);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const contentKey = isProfile ? profileState === _types__WEBPACK_IMPORTED_MODULE_3__.ProfileState.Profile ? HeaderContent.Profile : profileState === _types__WEBPACK_IMPORTED_MODULE_3__.ProfileState.SharedMedia ? HeaderContent.SharedMedia : profileState === _types__WEBPACK_IMPORTED_MODULE_3__.ProfileState.MemberList ? HeaderContent.MemberList : profileState === _types__WEBPACK_IMPORTED_MODULE_3__.ProfileState.StoryList ? HeaderContent.StoryList : profileState === _types__WEBPACK_IMPORTED_MODULE_3__.ProfileState.SavedDialogs ? HeaderContent.SavedDialogs : -1 // Never reached
  : isPollResults ? HeaderContent.PollResults : isStickerSearch ? HeaderContent.StickerSearch : isGifSearch ? HeaderContent.GifSearch : isAddingChatMembers ? HeaderContent.AddingMembers : isManagement ? managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.Initial ? HeaderContent.ManageInitial : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.ChatPrivacyType ? HeaderContent.ManageChatPrivacyType : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.Discussion ? HeaderContent.ManageDiscussion : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.ChannelSubscribers ? HeaderContent.ManageChannelSubscribers : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.GroupPermissions ? HeaderContent.ManageGroupPermissions : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.ChatAdministrators ? HeaderContent.ManageChatAdministrators : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.GroupRemovedUsers ? HeaderContent.ManageGroupRemovedUsers : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.ChannelRemovedUsers ? HeaderContent.ManageChannelRemovedUsers : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.GroupUserPermissionsCreate ? HeaderContent.ManageGroupUserPermissionsCreate : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.GroupUserPermissions ? HeaderContent.ManageGroupUserPermissions : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.GroupRecentActions ? HeaderContent.ManageGroupRecentActions : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.ChatAdminRights ? HeaderContent.ManageGroupAdminRights : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.ChatNewAdminRights ? HeaderContent.ManageGroupNewAdminRights : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.GroupMembers ? HeaderContent.ManageGroupMembers : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.Invites ? HeaderContent.ManageInvites : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.EditInvite ? HeaderContent.ManageEditInvite : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.GroupAddAdmins ? HeaderContent.ManageGroupAddAdmins : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.Reactions ? HeaderContent.ManageReactions : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.InviteInfo ? HeaderContent.ManageInviteInfo : managementScreen === _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.JoinRequests ? HeaderContent.ManageJoinRequests : undefined // Never reached
  : isStatistics ? HeaderContent.Statistics : isMessageStatistics ? HeaderContent.MessageStatistics : isStoryStatistics ? HeaderContent.StoryStatistics : isBoostStatistics ? HeaderContent.BoostStatistics : isCreatingTopic ? HeaderContent.CreateTopic : isEditingTopic ? HeaderContent.EditTopic : isMonetizationStatistics ? HeaderContent.MonetizationStatistics : undefined; // When column is closed

  const renderingContentKey = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_9__["default"])(contentKey, true) ?? -1;
  function getHeaderTitle() {
    if (isSavedMessages) {
      return lang('SavedMessages');
    }
    if (isInsideTopic) {
      return lang('AccDescrTopic');
    }
    if (isChannel) {
      return lang('Channel.TitleInfo');
    }
    if (userId) {
      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');
    }
    return lang('GroupInfo.Title');
  }
  function renderHeaderContent() {
    if (renderingContentKey === -1) {
      return undefined;
    }
    switch (renderingContentKey) {
      case HeaderContent.PollResults:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('PollResults'));
      case HeaderContent.AddingMembers:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers'));
      case HeaderContent.ManageInitial:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Edit'));
      case HeaderContent.ManageChatPrivacyType:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader'));
      case HeaderContent.ManageDiscussion:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Discussion'));
      case HeaderContent.ManageChatAdministrators:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('ChannelAdministrators'));
      case HeaderContent.ManageGroupRecentActions:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Group.Info.AdminLog'));
      case HeaderContent.ManageGroupAdminRights:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('EditAdminRights'));
      case HeaderContent.ManageGroupNewAdminRights:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('SetAsAdmin'));
      case HeaderContent.ManageGroupPermissions:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('ChannelPermissions'));
      case HeaderContent.ManageGroupRemovedUsers:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('BlockedUsers'));
      case HeaderContent.ManageChannelRemovedUsers:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('ChannelBlockedUsers'));
      case HeaderContent.ManageGroupUserPermissionsCreate:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('ChannelAddException'));
      case HeaderContent.ManageGroupUserPermissions:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('UserRestrictions'));
      case HeaderContent.ManageInvites:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('lng_group_invite_title'));
      case HeaderContent.ManageEditInvite:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, isEditingInvite ? lang('EditLink') : lang('NewLink'));
      case HeaderContent.ManageInviteInfo:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('InviteLink')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("section", {
          className: "tools"
        }, currentInviteInfo && !currentInviteInfo.isRevoked && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
          round: true,
          color: "translucent",
          size: "smaller",
          ariaLabel: lang('Edit'),
          onClick: handleEditInviteClick
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
          name: "edit"
        })), currentInviteInfo && currentInviteInfo.isRevoked && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
          round: true,
          color: "danger",
          size: "smaller",
          ariaLabel: lang('Delete'),
          onClick: openDeleteDialog
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
          name: "delete"
        })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_17__["default"], {
          isOpen: isDeleteDialogOpen,
          onClose: closeDeleteDialog,
          title: lang('DeleteLink'),
          text: lang('DeleteLinkHelp'),
          confirmIsDestructive: true,
          confirmLabel: lang('Delete'),
          confirmHandler: handleDeleteInviteClick
        }))));
      case HeaderContent.ManageJoinRequests:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, isChannel ? lang('SubscribeRequests') : lang('MemberRequests'));
      case HeaderContent.ManageGroupAddAdmins:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Channel.Management.AddModerator'));
      case HeaderContent.StickerSearch:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_SearchInput__WEBPACK_IMPORTED_MODULE_18__["default"], {
          value: stickerSearchQuery,
          placeholder: lang('SearchStickersHint'),
          autoFocusSearch: true,
          onChange: handleStickerSearchQueryChange
        });
      case HeaderContent.GifSearch:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_SearchInput__WEBPACK_IMPORTED_MODULE_18__["default"], {
          value: gifSearchQuery,
          placeholder: lang('SearchGifsTitle'),
          autoFocusSearch: true,
          onChange: handleGifSearchQueryChange
        });
      case HeaderContent.Statistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title'));
      case HeaderContent.MessageStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Stats.MessageTitle'));
      case HeaderContent.StoryStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Stats.StoryTitle'));
      case HeaderContent.BoostStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Boosts'));
      case HeaderContent.MonetizationStatistics:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('lng_channel_earn_title'));
      case HeaderContent.SharedMedia:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('SharedMedia'));
      case HeaderContent.ManageChannelSubscribers:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('ChannelSubscribers'));
      case HeaderContent.MemberList:
      case HeaderContent.ManageGroupMembers:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('GroupMembers'));
      case HeaderContent.StoryList:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories'));
      case HeaderContent.SavedDialogs:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
          className: "header"
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('SavedMessagesTab')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
          className: "subtitle"
        }, lang('Chats', foldersChatCount[_config__WEBPACK_IMPORTED_MODULE_4__.SAVED_FOLDER_ID])));
      case HeaderContent.ManageReactions:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('Reactions'));
      case HeaderContent.CreateTopic:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('NewTopic'));
      case HeaderContent.EditTopic:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, lang('EditTopic'));
      default:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
          className: "title"
        }, getHeaderTitle()), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("section", {
          className: "tools"
        }, canAddContact && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
          round: true,
          color: "translucent",
          size: "smaller",
          ariaLabel: lang('AddContact'),
          onClick: handleAddContact
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
          name: "add-user"
        })), canManage && !isInsideTopic && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
          round: true,
          color: "translucent",
          size: "smaller",
          ariaLabel: lang('Edit'),
          onClick: handleToggleManagement
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
          name: "edit"
        })), canEditBot && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
          round: true,
          color: "translucent",
          size: "smaller",
          ariaLabel: lang('Edit'),
          onClick: handleToggleManagement
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
          name: "edit"
        })), canEditTopic && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
          round: true,
          color: "translucent",
          size: "smaller",
          ariaLabel: lang('EditTopic'),
          onClick: toggleEditTopic
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
          name: "edit"
        })), canViewStatistics && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
          round: true,
          color: "translucent",
          size: "smaller",
          ariaLabel: lang('Statistics'),
          onClick: handleToggleStatistics
        }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
          name: "stats"
        }))));
    }
  }
  const isBackButton = isMobile || !isSavedMessages && (contentKey === HeaderContent.SharedMedia || contentKey === HeaderContent.MemberList || contentKey === HeaderContent.StoryList || contentKey === HeaderContent.AddingMembers || contentKey === HeaderContent.MessageStatistics || contentKey === HeaderContent.StoryStatistics || isManagement);
  const buttonClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('animated-close-icon', isBackButton && 'state-back', (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition');

  // eslint-disable-next-line no-null/no-null
  const headerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  (0,_hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_10__["default"])(headerRef);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "RightHeader",
    ref: headerRef
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_16__["default"], {
    className: "close-button",
    round: true,
    color: "translucent",
    size: "smaller",
    onClick: handleClose,
    ariaLabel: isBackButton ? lang('Common.Back') : lang('Common.Close')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: buttonClassName
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_19__["default"], {
    name: shouldSkipTransition || shouldSkipHistoryAnimations ? 'none' : 'slideFade',
    activeKey: renderingContentKey
  }, renderHeaderContent()));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  isProfile,
  isManagement,
  threadId
}) => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global);
  const {
    query: stickerSearchQuery
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentStickerSearch)(global) || {};
  const {
    query: gifSearchQuery
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentGifSearch)(global) || {};
  const chat = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId) : undefined;
  const user = isProfile && chatId && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chatId) ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUser)(global, chatId) : undefined;
  const isChannel = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatChannel)(chat);
  const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID);
  const topic = isInsideTopic ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopic)(global, chatId, threadId) : undefined;
  const canEditTopic = isInsideTopic && topic && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getCanManageTopic)(chat, topic);
  const isBot = user && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserBot)(user);
  const isSavedMessages = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsChatWithSelf)(global, chatId) : undefined;
  const canEditBot = isBot && user?.canEditBot;
  const canAddContact = user && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getCanAddContact)(user);
  const canManage = Boolean(!isManagement && isProfile && chatId && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanManage)(global, chatId));
  const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);
  const canViewStatistics = !isInsideTopic && chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatFullInfo)(global, chatId)?.canViewStatistics : undefined;
  const currentInviteInfo = chatId ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;
  return {
    canManage,
    canAddContact,
    canViewStatistics,
    isChannel,
    isBot,
    isInsideTopic,
    canEditTopic,
    userId: user?.id,
    isSelf: user?.isSelf,
    stickerSearchQuery,
    gifSearchQuery,
    isEditingInvite,
    currentInviteInfo,
    isSavedMessages,
    shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,
    canEditBot
  };
})(RightHeader));

/***/ }),

/***/ "./src/components/right/StickerSearch.async.tsx":
/*!******************************************************!*\
  !*** ./src/components/right/StickerSearch.async.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const StickerSearchAsync = () => {
  const StickerSearch = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'StickerSearch');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StickerSearch ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StickerSearch, null) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StickerSearchAsync);

/***/ }),

/***/ "./src/components/right/hooks/useProfileState.ts":
/*!*******************************************************!*\
  !*** ./src/components/right/hooks/useProfileState.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useProfileState)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _util_animateScroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/animateScroll */ "./src/util/animateScroll.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");






const TRANSITION_DURATION = 300;
const PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;
const runThrottledForScroll = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_3__.throttle)(cb => cb(), 250, false);
let isScrollingProgrammatically = false;
function useProfileState(containerRef, tabType, profileState, onProfileStateChange, forceScrollProfileTab = false, allowAutoScrollToTabs = false, handleStopAutoScrollToTabs) {
  // Scroll to tabs if needed
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_4__["default"])(([prevTabType]) => {
    if (prevTabType && prevTabType !== tabType && allowAutoScrollToTabs || tabType && forceScrollProfileTab) {
      const container = containerRef.current;
      const tabsEl = container.querySelector('.TabList');
      handleStopAutoScrollToTabs();
      if (container.scrollTop < tabsEl.offsetTop) {
        onProfileStateChange(getStateFromTabType(tabType));
        isScrollingProgrammatically = true;
        (0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_2__["default"])({
          container,
          element: tabsEl,
          position: 'start',
          forceDuration: TRANSITION_DURATION
        });
        setTimeout(() => {
          isScrollingProgrammatically = false;
        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);
      }
    }
  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab, allowAutoScrollToTabs, handleStopAutoScrollToTabs]);

  // Scroll to top
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_4__["default"])(([prevProfileState]) => {
    if (profileState !== _types__WEBPACK_IMPORTED_MODULE_1__.ProfileState.Profile || profileState === prevProfileState) {
      return;
    }
    const container = containerRef.current;
    if (!container) {
      return;
    }
    const tabListEl = container.querySelector('.TabList');
    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {
      return;
    }
    isScrollingProgrammatically = true;
    (0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_2__["default"])({
      container,
      element: container.firstElementChild,
      position: 'start',
      maxDistance: container.offsetHeight * 2
    });
    setTimeout(() => {
      isScrollingProgrammatically = false;
    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);
  }, [profileState, containerRef]);
  const determineProfileState = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    const container = containerRef.current;
    if (!container) {
      return;
    }
    const tabListEl = container.querySelector('.TabList');
    if (!tabListEl) {
      return;
    }
    let state = _types__WEBPACK_IMPORTED_MODULE_1__.ProfileState.Profile;
    if (container.scrollTop >= tabListEl.offsetTop) {
      state = getStateFromTabType(tabType);
    }
    onProfileStateChange(state);
  });

  // Determine profile state when switching tabs
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isScrollingProgrammatically) {
      return;
    }
    determineProfileState();
  }, [determineProfileState, tabType]);

  // Determine profile state when scrolling
  const handleScroll = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (isScrollingProgrammatically) {
      return;
    }
    runThrottledForScroll(determineProfileState);
  });
  return {
    handleScroll
  };
}
function getStateFromTabType(tabType) {
  switch (tabType) {
    case 'members':
      return _types__WEBPACK_IMPORTED_MODULE_1__.ProfileState.MemberList;
    case 'stories':
      return _types__WEBPACK_IMPORTED_MODULE_1__.ProfileState.StoryList;
    case 'dialogs':
      return _types__WEBPACK_IMPORTED_MODULE_1__.ProfileState.SavedDialogs;
    default:
      return _types__WEBPACK_IMPORTED_MODULE_1__.ProfileState.SharedMedia;
  }
}

/***/ }),

/***/ "./src/components/right/hooks/useProfileViewportIds.ts":
/*!*************************************************************!*\
  !*** ./src/components/right/hooks/useProfileViewportIds.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useProfileViewportIds)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _common_helpers_sortChatIds__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helpers/sortChatIds */ "./src/components/common/helpers/sortChatIds.ts");
/* harmony import */ var _hooks_useInfiniteScroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useInfiniteScroll */ "./src/hooks/useInfiniteScroll.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");






function useProfileViewportIds({
  loadMoreMembers,
  loadCommonChats,
  searchMessages,
  loadStories,
  loadStoriesArchive,
  loadMoreGifts,
  tabType,
  mediaSearchType,
  groupChatMembers,
  commonChatIds,
  usersById,
  userStatusesById,
  chatsById,
  chatMessages,
  foundIds,
  threadId,
  storyIds,
  giftIds,
  pinnedStoryIds,
  archiveStoryIds,
  similarChannels,
  similarBots
}) {
  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;
  const memberIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!groupChatMembers || !usersById || !userStatusesById) {
      return undefined;
    }
    return (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.sortUserIds)(groupChatMembers.map(({
      userId
    }) => userId), usersById, userStatusesById);
  }, [groupChatMembers, usersById, userStatusesById]);
  const chatIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!commonChatIds || !chatsById) {
      return undefined;
    }
    return (0,_common_helpers_sortChatIds__WEBPACK_IMPORTED_MODULE_3__["default"])(commonChatIds, true);
  }, [chatsById, commonChatIds]);
  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(loadMoreMembers, memberIds);
  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia('media', resultType, searchMessages, chatMessages, foundIds, threadId);
  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia('documents', resultType, searchMessages, chatMessages, foundIds, threadId);
  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia('links', resultType, searchMessages, chatMessages, foundIds, threadId);
  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia('audio', resultType, searchMessages, chatMessages, foundIds, threadId);
  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia('voice', resultType, searchMessages, chatMessages, foundIds, threadId);
  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(loadCommonChats, chatIds);
  const sortedStoryIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!storyIds?.length) return storyIds;
    const pinnedStoryIdsSet = new Set(pinnedStoryIds);
    return storyIds.slice().sort((a, b) => {
      const aIsPinned = pinnedStoryIdsSet.has(a);
      const bIsPinned = pinnedStoryIdsSet.has(b);
      if (aIsPinned && !bIsPinned) return -1;
      if (!aIsPinned && bIsPinned) return 1;
      return b - a;
    });
  }, [storyIds, pinnedStoryIds]);
  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(loadStories, sortedStoryIds);
  const [archiveStoryViewportIds, getMoreStoriesArchive, noProfileInfoForStoriesArchive] = useInfiniteScrollForLoadableItems(loadStoriesArchive, archiveStoryIds);
  let viewportIds;
  let getMore;
  let noProfileInfo = false;
  switch (resultType) {
    case 'members':
      viewportIds = memberViewportIds;
      getMore = getMoreMembers;
      noProfileInfo = noProfileInfoForMembers;
      break;
    case 'commonChats':
      viewportIds = commonChatViewportIds;
      getMore = getMoreCommonChats;
      noProfileInfo = noProfileInfoForCommonChats;
      break;
    case 'media':
      viewportIds = mediaViewportIds;
      getMore = getMoreMedia;
      noProfileInfo = noProfileInfoForMedia;
      break;
    case 'documents':
      viewportIds = documentViewportIds;
      getMore = getMoreDocuments;
      noProfileInfo = noProfileInfoForDocuments;
      break;
    case 'links':
      viewportIds = linkViewportIds;
      getMore = getMoreLinks;
      noProfileInfo = noProfileInfoForLinks;
      break;
    case 'audio':
      viewportIds = audioViewportIds;
      getMore = getMoreAudio;
      noProfileInfo = noProfileInfoForAudio;
      break;
    case 'voice':
      viewportIds = voiceViewportIds;
      getMore = getMoreVoices;
      noProfileInfo = noProfileInfoForVoices;
      break;
    case 'stories':
      viewportIds = storyViewportIds;
      getMore = getMoreStories;
      noProfileInfo = noProfileInfoForStories;
      break;
    case 'storiesArchive':
      viewportIds = archiveStoryViewportIds;
      getMore = getMoreStoriesArchive;
      noProfileInfo = noProfileInfoForStoriesArchive;
      break;
    case 'similarChannels':
      viewportIds = similarChannels;
      break;
    case 'similarBots':
      viewportIds = similarBots;
      break;
    case 'gifts':
      viewportIds = giftIds;
      getMore = loadMoreGifts;
      break;
    case 'dialogs':
      noProfileInfo = true;
      break;
  }
  return [resultType, viewportIds, getMore, noProfileInfo];
}
function useInfiniteScrollForLoadableItems(handleLoadMore, itemIds) {
  const [viewportIds, getMore] = (0,_hooks_useInfiniteScroll__WEBPACK_IMPORTED_MODULE_4__["default"])(handleLoadMore, itemIds, undefined, _config__WEBPACK_IMPORTED_MODULE_1__.MEMBERS_SLICE);
  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];
  return [viewportIds, getMore, !isOnTop];
}
function useInfiniteScrollForSharedMedia(forSharedMediaType, currentResultType, handleLoadMore, chatMessages, foundIds, threadId) {
  const messageIdsRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    messageIdsRef.current = undefined;
  }, [threadId]);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {
      messageIdsRef.current = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageContentIds)(chatMessages, foundIds, forSharedMediaType);
    }
  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);
  const [viewportIds, getMore] = (0,_hooks_useInfiniteScroll__WEBPACK_IMPORTED_MODULE_4__["default"])(handleLoadMore, messageIdsRef.current, undefined, forSharedMediaType === 'media' ? _config__WEBPACK_IMPORTED_MODULE_1__.SHARED_MEDIA_SLICE : _config__WEBPACK_IMPORTED_MODULE_1__.MESSAGE_SEARCH_SLICE);
  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];
  return [viewportIds, getMore, !isOnTop];
}

/***/ }),

/***/ "./src/components/right/hooks/useTransitionFixes.ts":
/*!**********************************************************!*\
  !*** ./src/components/right/hooks/useTransitionFixes.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useTransitionFixes)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");



function useTransitionFixes(containerRef, transitionElSelector = '.Transition.shared-media-transition') {
  // Set `min-height` for shared media container to prevent jumping when switching tabs
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    function setMinHeight() {
      const container = containerRef.current;
      const transitionEl = container.querySelector(transitionElSelector);
      const tabsEl = container.querySelector('.TabList');
      if (transitionEl && tabsEl) {
        const newHeight = container.offsetHeight - tabsEl.offsetHeight;
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
          transitionEl.style.minHeight = `${newHeight}px`;
        });
      }
    }
    setMinHeight();
    window.addEventListener('resize', setMinHeight, false);
    return () => {
      window.removeEventListener('resize', setMinHeight, false);
    };
  }, [containerRef, transitionElSelector]);

  // Workaround for scrollable content flickering during animation.
  const applyTransitionFix = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    // This callback is called from `Transition.onStart` which is "mutate" phase
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMeasure)(() => {
      const container = containerRef.current;
      if (container.style.overflowY === 'hidden') return;
      const scrollBarWidth = container.offsetWidth - container.clientWidth;
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
        container.style.overflowY = 'hidden';
        container.style.paddingRight = `${scrollBarWidth}px`;
      });
    });
  });
  const releaseTransitionFix = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    const container = containerRef.current;
    container.style.overflowY = 'scroll';
    container.style.paddingRight = '0';
  });
  return {
    applyTransitionFix,
    releaseTransitionFix
  };
}

/***/ }),

/***/ "./src/components/right/management/Management.async.tsx":
/*!**************************************************************!*\
  !*** ./src/components/right/management/Management.async.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const ManagementAsync = props => {
  const Management = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'Management');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return Management ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(Management, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ManagementAsync);

/***/ }),

/***/ "./src/components/right/statistics/BoostStatistics.tsx":
/*!*************************************************************!*\
  !*** ./src/components/right/statistics/BoostStatistics.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _common_helpers_boostInfo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/helpers/boostInfo */ "./src/components/common/helpers/boostInfo.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_LinkField__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/LinkField */ "./src/components/common/LinkField.tsx");
/* harmony import */ var _common_PremiumProgress__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../common/PremiumProgress */ "./src/components/common/PremiumProgress.tsx");
/* harmony import */ var _common_PrivateChatInfo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../common/PrivateChatInfo */ "./src/components/common/PrivateChatInfo.tsx");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _ui_TabList__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../ui/TabList */ "./src/components/ui/TabList.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _StatisticsOverview__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./StatisticsOverview */ "./src/components/right/statistics/StatisticsOverview.tsx");
/* harmony import */ var _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./BoostStatistics.module.scss */ "./src/components/right/statistics/BoostStatistics.module.scss");
/* harmony import */ var _assets_premium_GiftBlueRound_svg__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../assets/premium/GiftBlueRound.svg */ "./src/assets/premium/GiftBlueRound.svg");
/* harmony import */ var _assets_premium_GiftGreenRound_svg__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../assets/premium/GiftGreenRound.svg */ "./src/assets/premium/GiftGreenRound.svg");
/* harmony import */ var _assets_premium_GiftRedRound_svg__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../assets/premium/GiftRedRound.svg */ "./src/assets/premium/GiftRedRound.svg");
/* harmony import */ var _assets_premium_GiftStar_svg__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../assets/premium/GiftStar.svg */ "./src/assets/premium/GiftStar.svg");


























const GIVEAWAY_IMG_LIST = {
  3: _assets_premium_GiftGreenRound_svg__WEBPACK_IMPORTED_MODULE_23__,
  6: _assets_premium_GiftBlueRound_svg__WEBPACK_IMPORTED_MODULE_22__,
  12: _assets_premium_GiftRedRound_svg__WEBPACK_IMPORTED_MODULE_24__
};
const CUSTOM_PEER_STAR_TEMPLATE = {
  isCustomPeer: true,
  avatarIcon: 'star',
  peerColorId: 1
};
const CUSTOM_PEER_TO_BE_DISTRIBUTED = {
  isCustomPeer: true,
  titleKey: 'BoostingToBeDistributed',
  avatarIcon: 'user',
  withPremiumGradient: true
};
const BoostStatistics = ({
  boostStatistics,
  isGiveawayAvailable,
  chatId,
  giveawayBoostsPerPremium,
  isChannel
}) => {
  const {
    openChat,
    loadMoreBoosters,
    closeBoostStatistics,
    openGiveawayModal,
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__["default"])();
  // eslint-disable-next-line no-null/no-null
  const transitionRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isLoaded = boostStatistics?.boostStatus;
  const status = isLoaded ? boostStatistics.boostStatus : undefined;
  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count === boostStatistics?.giftedBoosts?.count;
  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts && boostStatistics?.giftedBoosts?.list?.length > 0;
  const {
    currentLevel,
    hasNextLevel,
    boosts,
    levelProgress,
    remainingBoosts
  } = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!status) {
      return {
        currentLevel: 0,
        hasNextLevel: false,
        boosts: 0,
        levelProgress: 0,
        remainingBoosts: 0,
        prepaidGiveaways: []
      };
    }
    return (0,_common_helpers_boostInfo__WEBPACK_IMPORTED_MODULE_8__.getBoostProgressInfo)(status);
  }, [status]);
  const statsOverview = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!status) return undefined;
    return {
      level: currentLevel,
      boosts,
      premiumSubscribers: status.premiumSubscribers,
      remainingBoosts,
      prepaidGiveaways: status.prepaidGiveaways
    };
  }, [status, boosts, currentLevel, remainingBoosts]);
  const tabs = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (shouldDisplayGiftList) {
      return [{
        type: 'boostList',
        title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i')
      }, {
        type: 'giftedBoostList',
        title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i')
      }];
    }
    return [];
  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);
  const initialTab = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;
  }, [boostStatistics]);
  const [activeTab, setActiveTab] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(initialTab);
  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;
  const tabType = tabs[renderingActiveTab]?.type;
  const activeKey = tabs.findIndex(({
    type
  }) => type === tabType);
  const boostersToLoadCount = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!boostStatistics) return undefined;
    const list = shouldDisplayGiftList ? tabType === 'boostList' ? boostStatistics.boosts : boostStatistics.giftedBoosts : boostStatistics.boosts;
    if (!list?.count) return undefined;
    const loadedBoostsCount = list.list.reduce((total, boost) => {
      return total + (boost.multiplier || 1);
    }, 0);
    const totalCount = list.count;
    const toLoadCount = totalCount - loadedBoostsCount;
    return toLoadCount > 0 ? toLoadCount : undefined;
  }, [shouldDisplayGiftList, boostStatistics, tabType]);
  const renderBoostIcon = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(multiplier => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].quantity
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadge, _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeButtonColor)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "boost",
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeIcon
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeValue
  }, multiplier))));
  const renderBoostTypeIcon = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(boost => {
    if (!boost.isFromGiveaway && !boost.isGift) {
      return undefined;
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].quantity
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadge, !boost.isFromGiveaway && _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeWarning, _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeButtonColor, _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeButton)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
      name: "gift",
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeIcon
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeValue
    }, lang(boost.isFromGiveaway ? 'BoostingGiveaway' : 'BoostingGift'))));
  });
  const handleBoosterClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(userId => {
    if (!userId) {
      showNotification({
        message: lang('BoostingRecipientWillBeSelected')
      });
      return;
    }
    openChat({
      id: userId
    });
    closeBoostStatistics();
  });
  const renderBoostList = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(boost => {
    const hasStars = Boolean(boost?.stars);
    let customPeer;
    if (hasStars) {
      customPeer = {
        ...CUSTOM_PEER_STAR_TEMPLATE,
        title: lang('Stars', boost.stars)
      };
    }
    if (!boost.userId) {
      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_15__["default"], {
      className: "chat-item-clickable"
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => handleBoosterClick(boost.userId)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PrivateChatInfo__WEBPACK_IMPORTED_MODULE_14__["default"], {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].user,
      userId: boost.userId,
      customPeer: customPeer,
      status: lang('BoostExpireOn', (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatDateAtTime)(lang, boost.expires * 1000)),
      noEmojiStatus: true,
      forceShowSelf: true,
      noFake: true,
      noVerified: true,
      iconElement: boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined,
      rightElement: renderBoostTypeIcon(boost)
    }));
  });
  const handleGiveawayClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    openGiveawayModal({
      chatId
    });
  });
  const handleLoadMore = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    e.preventDefault();
    loadMoreBoosters({
      isGifts: tabType === 'giftedBoostList'
    });
  });
  const launchPrepaidGiveawayHandler = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(prepaidGiveaway => {
    openGiveawayModal({
      chatId,
      prepaidGiveaway
    });
  });
  function renderContent() {
    let listToRender;
    if (tabType === 'boostList') {
      listToRender = boostStatistics?.boosts?.list;
    } else if (tabType === 'giftedBoostList') {
      listToRender = boostStatistics?.giftedBoosts?.list;
    }
    if (listToRender && !listToRender?.length) {
      return undefined;
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].section
    }, listToRender?.map(boost => renderBoostList(boost)));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].root, 'custom-scroll')
  }, !isLoaded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_16__["default"], null), isLoaded && statsOverview && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].section
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PremiumProgress__WEBPACK_IMPORTED_MODULE_13__["default"], {
    leftText: lang('BoostsLevel', currentLevel),
    rightText: hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined,
    progress: levelProgress,
    floatingBadgeText: (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_7__.formatInteger)(boosts),
    floatingBadgeIcon: "boost"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StatisticsOverview__WEBPACK_IMPORTED_MODULE_20__["default"], {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].stats,
    statistics: statsOverview,
    type: "boost"
  })), statsOverview.prepaidGiveaways && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].section
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h4", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].sectionHeader,
    dir: lang.isRtl ? 'rtl' : undefined
  }, lang('BoostingPreparedGiveaways')), statsOverview?.prepaidGiveaways?.map(prepaidGiveaway => {
    const isStarsGiveaway = ('stars' in prepaidGiveaway);
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_15__["default"], {
      key: prepaidGiveaway.id,
      className: "chat-item-clickable"
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => launchPrepaidGiveawayHandler(prepaidGiveaway)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].status, 'status-clickable')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, isStarsGiveaway ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
      src: _assets_premium_GiftStar_svg__WEBPACK_IMPORTED_MODULE_25__,
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].giveawayIcon,
      alt: lang('GiftStar')
    }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
      src: GIVEAWAY_IMG_LIST[prepaidGiveaway.months],
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].giveawayIcon,
      alt: lang('Giveaway')
    })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].info
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", null, isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars) : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].month
    }, isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity) : lang('PrepaidGiveawayMonths', prepaidGiveaway.months))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].quantity
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadge, _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeButtonColor, _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeButton)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
      name: "boost",
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeIcon
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].floatingBadgeValue,
      dir: lang.isRtl ? 'rtl' : undefined
    }, isStarsGiveaway ? prepaidGiveaway.boosts : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? _config__WEBPACK_IMPORTED_MODULE_2__.GIVEAWAY_BOOST_PER_PREMIUM))))));
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "text-muted hint",
    key: "links-hint"
  }, lang('BoostingSelectPaidGiveaway'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].section
  }, shouldDisplayGiftList ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].boostSection, _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].content)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_19__["default"], {
    ref: transitionRef,
    name: lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized',
    activeKey: activeKey,
    renderCount: tabs.length,
    shouldRestoreHeight: true
  }, renderContent()), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_TabList__WEBPACK_IMPORTED_MODULE_18__["default"], {
    activeTab: renderingActiveTab,
    tabs: tabs,
    onSwitchTab: setActiveTab
  })) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h4", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].sectionHeader,
    dir: lang.isRtl ? 'rtl' : undefined
  }, lang('BoostingBoostsCount', boostStatistics?.boosts?.count)), !boostStatistics?.boosts?.list?.length && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].noResults
  }, lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')), boostStatistics?.boosts?.list?.map(boost => renderBoostList(boost))), Boolean(boostersToLoadCount) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_15__["default"], {
    key: "load-more",
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].showMore,
    disabled: boostStatistics?.isLoadingBoosters,
    onClick: handleLoadMore
  }, boostStatistics?.isLoadingBoosters ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_17__["default"], {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].loadMoreSpinner
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "down",
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].down
  }), lang('ShowVotes', boostersToLoadCount, 'i'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_LinkField__WEBPACK_IMPORTED_MODULE_12__["default"], {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].section,
    link: status.boostUrl,
    withShare: true,
    title: lang('LinkForBoosting')
  }), isGiveawayAvailable && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].section
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_15__["default"], {
    key: "load-more",
    icon: "gift",
    onClick: handleGiveawayClick,
    className: _BoostStatistics_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].giveawayButton
  }, lang('BoostingGetBoostsViaGifts')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "text-muted hint",
    key: "links-hint"
  }, lang(isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup')))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  const boostStatistics = tabState.boostStatistics;
  const isGiveawayAvailable = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsGiveawayGiftsPurchaseAvailable)(global);
  const chatId = boostStatistics && boostStatistics.chatId;
  const chat = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId) : undefined;
  const isChannel = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat);
  const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;
  return {
    boostStatistics,
    isGiveawayAvailable,
    chatId: chatId,
    giveawayBoostsPerPremium,
    isChannel
  };
})(BoostStatistics)));

/***/ }),

/***/ "./src/components/right/statistics/MessageStatistics.async.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/right/statistics/MessageStatistics.async.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const MessageStatisticsAsync = props => {
  const MessageStatistics = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'MessageStatistics');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return MessageStatistics ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MessageStatistics, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MessageStatisticsAsync);

/***/ }),

/***/ "./src/components/right/statistics/MonetizationStatistics.tsx":
/*!********************************************************************!*\
  !*** ./src/components/right/statistics/MonetizationStatistics.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AboutMonetizationModal_async__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/AboutMonetizationModal.async */ "./src/components/common/AboutMonetizationModal.async.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_SafeLink__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/SafeLink */ "./src/components/common/SafeLink.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../ui/Link */ "./src/components/ui/Link.tsx");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");
/* harmony import */ var _StatisticsOverview__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./StatisticsOverview */ "./src/components/right/statistics/StatisticsOverview.tsx");
/* harmony import */ var _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./MonetizationStatistics.module.scss */ "./src/components/right/statistics/MonetizationStatistics.module.scss");



















let lovelyChartPromise;
let LovelyChart;
async function ensureLovelyChart() {
  if (!lovelyChartPromise) {
    lovelyChartPromise = __webpack_require__.e(/*! import() */ "src_lib_lovely-chart_LovelyChart_js").then(__webpack_require__.bind(__webpack_require__, /*! ../../../lib/lovely-chart/LovelyChart */ "./src/lib/lovely-chart/LovelyChart.js"));
    LovelyChart = await lovelyChartPromise;
  }
  return lovelyChartPromise;
}
const MONETIZATION_GRAPHS_TITLES = {
  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',
  revenueGraph: 'lng_channel_earn_chart_revenue'
};
const MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES);
const MonetizationStatistics = ({
  chatId,
  dcId,
  statistics,
  isCreator,
  isChannelRevenueWithdrawalEnabled,
  hasPassword
}) => {
  const {
    loadChannelMonetizationStatistics,
    openMonetizationVerificationModal,
    loadPasswordInfo
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_7__["default"])();

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [isReady, setIsReady] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const loadedCharts = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__["default"])(false);
  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const availableBalance = statistics?.balances?.availableBalance;
  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;
  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance) && isWithdrawalEnabled;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (chatId) {
      loadChannelMonetizationStatistics({
        peerId: chatId
      });
      loadPasswordInfo();
    }
  }, [chatId, loadChannelMonetizationStatistics]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    (async () => {
      await ensureLovelyChart();
      if (!isReady) {
        setIsReady(true);
        return;
      }
      if (containerRef.current) {
        Array.from(containerRef.current.children).forEach(child => {
          child.innerHTML = '';
          child.classList.add(_MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].hidden);
        });
      }
      loadedCharts.current = [];
      if (!statistics || !containerRef.current) {
        return;
      }
      MONETIZATION_GRAPHS.forEach((name, index) => {
        const graph = statistics[name];
        const isAsync = typeof graph === 'string';
        if (isAsync || loadedCharts.current.includes(name)) {
          return;
        }
        if (!graph) {
          loadedCharts.current.push(name);
          return;
        }
        LovelyChart.create(containerRef.current.children[index], {
          title: oldLang(MONETIZATION_GRAPHS_TITLES[name]),
          ...graph
        });
        loadedCharts.current.push(name);
        containerRef.current.children[index].classList.remove(_MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].hidden);
      });
      forceUpdate();
    })();
  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);
  function renderAvailableReward() {
    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];
    const [integerUsdPart, decimalUsdPart] = availableBalance && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].availableReward
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].toncoin
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].toncoinIcon,
      name: "toncoin"
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("b", {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].rewardValue
    }, integerTonPart, decimalTonPart ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].decimalPart
    }, ".", decimalTonPart) : undefined)), ' ', /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].integer
    }, "\u2248 $", integerUsdPart, decimalUsdPart ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].decimalUsdPart
    }, ".", decimalUsdPart) : undefined));
  }
  const topText = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const linkText = oldLang('LearnMore');
    return lang('ChannelEarnAbout', {
      link: /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_15__["default"], {
        isPrimary: true,
        onClick: openAboutMonetizationModal
      }, linkText, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
        name: "next"
      }))
    }, {
      withNodes: true
    });
  }, [lang, oldLang]);
  const rewardsText = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const linkText = oldLang('LearnMore');
    return lang('MonetizationBalanceZeroInfo', {
      link: /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_SafeLink__WEBPACK_IMPORTED_MODULE_12__["default"], {
        url: oldLang('MonetizationProceedsInfoLink'),
        text: linkText
      }, linkText, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
        name: "next"
      }))
    }, {
      withNodes: true
    });
  }, [lang, oldLang]);
  const verificationMonetizationHandler = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    if (hasPassword) {
      openMonetizationVerificationModal({
        chatId
      });
    } else {
      openConfirmPasswordDialogOpen();
    }
  });
  if (!isReady || !statistics) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_16__["default"], null);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].root, 'custom-scroll', isReady && _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].ready)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].section, _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].topText)
  }, topText), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StatisticsOverview__WEBPACK_IMPORTED_MODULE_17__["default"], {
    statistics: statistics,
    isToncoin: true,
    type: "monetization",
    title: oldLang('MonetizationOverview'),
    subtitle: /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].textBottom
    }, oldLang('MonetizationProceedsTONInfo'))
  }), !loadedCharts.current.length && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_16__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].section
  }, MONETIZATION_GRAPHS.filter(Boolean).map(graph => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    key: graph,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].graph, _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].hidden)
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].section
  }, oldLang('lng_channel_earn_balance_title'), renderAvailableReward(), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_13__["default"], {
    size: "smaller",
    type: "button",
    onClick: verificationMonetizationHandler,
    disabled: !canWithdraw
  }, oldLang('MonetizationWithdraw')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MonetizationStatistics_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].textBottom
  }, rewardsText)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AboutMonetizationModal_async__WEBPACK_IMPORTED_MODULE_10__["default"], {
    isOpen: isAboutMonetizationModalOpen,
    onClose: closeAboutMonetizationModal
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_14__["default"], {
    isOnlyConfirm: true,
    isOpen: isConfirmPasswordDialogOpen,
    onClose: closeConfirmPasswordDialogOpen,
    confirmHandler: closeConfirmPasswordDialogOpen,
    confirmLabel: lang('OK')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(oldLang('Monetization.Withdraw.Error.Text'), ['br']))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global);
  const {
    settings: {
      byKey: {
        hasPassword
      }
    }
  } = global;
  const monetizationStatistics = tabState.monetizationStatistics;
  const chatId = monetizationStatistics && monetizationStatistics.chatId;
  const chat = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectChat)(global, chatId) : undefined;
  const dcId = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectChatFullInfo)(global, chatId)?.statisticsDcId;
  const isCreator = Boolean(chat?.isCreator);
  const statistics = tabState.statistics.monetization;
  const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;
  return {
    chatId: chatId,
    dcId,
    statistics,
    isCreator,
    isChannelRevenueWithdrawalEnabled,
    hasPassword
  };
})(MonetizationStatistics)));

/***/ }),

/***/ "./src/components/right/statistics/Statistics.async.tsx":
/*!**************************************************************!*\
  !*** ./src/components/right/statistics/Statistics.async.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const StatisticsAsync = props => {
  const Statistics = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'Statistics');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return Statistics ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(Statistics, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StatisticsAsync);

/***/ }),

/***/ "./src/components/right/statistics/StoryStatistics.async.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/right/statistics/StoryStatistics.async.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");




const StoryStatisticsAsync = props => {
  const StoryStatistics = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'StoryStatistics');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StoryStatistics ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StoryStatistics, props) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StoryStatisticsAsync);

/***/ }),

/***/ "./src/components/story/MediaStory.tsx":
/*!*********************************************!*\
  !*** ./src/components/story/MediaStory.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _middle_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../middle/helpers/preventMessageInputBlur */ "./src/components/middle/helpers/preventMessageInputBlur.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _mediaArea_MediaAreaOverlay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mediaArea/MediaAreaOverlay */ "./src/components/story/mediaArea/MediaAreaOverlay.tsx");
/* harmony import */ var _MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./MediaStory.module.scss */ "./src/components/story/MediaStory.module.scss");

















function MediaStory({
  story,
  isProtected,
  isArchive,
  isPinned,
  canPin
}) {
  const {
    openStoryViewer,
    loadPeerSkippedStories,
    toggleStoryInProfile,
    toggleStoryPinnedToTop,
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__["default"])();
  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const getTriggerElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => containerRef.current);
  const getRootElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => document.body);
  const getMenuElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => document.querySelector('#portals .story-context-menu .bubble'));
  const getLayout = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => ({
    withPortal: true,
    isDense: true
  }));
  const peerId = story && story.peerId;
  const isFullyLoaded = story && 'content' in story;
  const isOwn = isFullyLoaded && story.isOut;
  const isDeleted = story && 'isDeleted' in story;
  const video = isFullyLoaded ? story.content.video : undefined;
  const duration = video && (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_5__.formatMediaDuration)(video.duration);
  const imageHash = isFullyLoaded ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getStoryMediaHash)(story) : undefined;
  const imgBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__["default"])(imageHash);
  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (story && !(isFullyLoaded || isDeleted)) {
      loadPeerSkippedStories({
        peerId: story.peerId
      });
    }
  }, [isDeleted, isFullyLoaded, story]);
  const {
    isContextMenuOpen,
    contextMenuAnchor,
    handleBeforeContextMenu,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_8__["default"])(containerRef, !isOwn);
  const handleClick = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    openStoryViewer({
      peerId: story.peerId,
      storyId: story.id,
      isSinglePeer: true,
      isPrivate: true,
      isArchive
    });
  }, [isArchive, story.id, story.peerId]);
  const handleMouseDown = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    (0,_middle_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_7__.preventMessageInputBlurWithBubbling)(e);
    handleBeforeContextMenu(e);
  });
  const handleUnarchiveClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    (0,_util_stopEvent__WEBPACK_IMPORTED_MODULE_6__["default"])(e);
    toggleStoryInProfile({
      peerId,
      storyId: story.id,
      isInProfile: true
    });
    showNotification({
      message: lang('Story.ToastSavedToProfileText')
    });
    handleContextMenuClose();
  });
  const handleArchiveClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    (0,_util_stopEvent__WEBPACK_IMPORTED_MODULE_6__["default"])(e);
    toggleStoryInProfile({
      peerId,
      storyId: story.id,
      isInProfile: false
    });
    showNotification({
      message: lang('Story.ToastRemovedFromProfileText')
    });
    handleContextMenuClose();
  });
  const handleTogglePinned = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    toggleStoryPinnedToTop({
      peerId,
      storyId: story.id
    });
    handleContextMenuClose();
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].root, 'scroll-item'),
    onMouseDown: handleMouseDown,
    onClick: handleClick,
    onContextMenu: handleContextMenu
  }, isDeleted && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_12__["default"], {
    className: _MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].expiredIcon,
    name: "story-expired"
  }), lang('ExpiredStory')), isPinned && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_12__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].overlayIcon, _MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].pinnedIcon),
    name: "pin-badge"
  }), isFullyLoaded && Boolean(story.views?.viewsCount) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].overlayIcon, _MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].viewsCount)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_12__["default"], {
    name: "eye"
  }), story.views.viewsCount), duration && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].overlayIcon, _MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].duration)
  }, duration), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].wrapper
  }, thumbUrl && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: thumbUrl,
    alt: "",
    className: _MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].media,
    draggable: false
  }), isFullyLoaded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_mediaArea_MediaAreaOverlay__WEBPACK_IMPORTED_MODULE_15__["default"], {
    story: story
  }), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  })), contextMenuAnchor !== undefined && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_13__["default"], {
    isOpen: isContextMenuOpen,
    anchor: contextMenuAnchor,
    getTriggerElement: getTriggerElement,
    getRootElement: getRootElement,
    getMenuElement: getMenuElement,
    getLayout: getLayout,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MediaStory_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].contextMenu, 'story-context-menu'),
    autoClose: true,
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide,
    withPortal: true
  }, isArchive && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "archive",
    onClick: handleUnarchiveClick
  }, lang('StoryList.SaveToProfile')), !isArchive && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "archive",
    onClick: handleArchiveClick
  }, lang('Story.Context.RemoveFromProfile')), !isArchive && !isPinned && canPin && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "pin",
    onClick: handleTogglePinned
  }, lang('StoryList.ItemAction.Pin')), !isArchive && isPinned && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "unpin",
    onClick: handleTogglePinned
  }, lang('StoryList.ItemAction.Unpin'))));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  story
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChat)(global, story.peerId);
  const isProtected = chat?.isProtected;
  const {
    maxPinnedStoriesCount
  } = global.appConfig || {};
  const isOwn = 'isOut' in story && story.isOut;
  const pinnedStories = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectPinnedStories)(global, story.peerId);
  const isPinned = pinnedStories?.some(pinnedStory => pinnedStory.id === story.id);
  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);
  return {
    isProtected,
    isPinned,
    canPin: canPinMore
  };
})(MediaStory)));

/***/ }),

/***/ "./src/components/story/StoryViewer.async.tsx":
/*!****************************************************!*\
  !*** ./src/components/story/StoryViewer.async.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StoryViewerAsync = ({
  isOpen
}) => {
  const StoryViewer = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'StoryViewer', !isOpen);
  return StoryViewer ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StoryViewer, null) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(StoryViewerAsync));

/***/ }),

/***/ "./src/global/actions/all.ts":
/*!***********************************!*\
  !*** ./src/global/actions/all.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_initial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/initial */ "./src/global/actions/api/initial.ts");
/* harmony import */ var _api_chats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api/chats */ "./src/global/actions/api/chats.ts");
/* harmony import */ var _api_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api/messages */ "./src/global/actions/api/messages.ts");
/* harmony import */ var _api_symbols__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api/symbols */ "./src/global/actions/api/symbols.ts");
/* harmony import */ var _api_globalSearch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./api/globalSearch */ "./src/global/actions/api/globalSearch.ts");
/* harmony import */ var _api_middleSearch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api/middleSearch */ "./src/global/actions/api/middleSearch.ts");
/* harmony import */ var _api_management__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./api/management */ "./src/global/actions/api/management.ts");
/* harmony import */ var _api_sync__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api/sync */ "./src/global/actions/api/sync.ts");
/* harmony import */ var _api_accounts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./api/accounts */ "./src/global/actions/api/accounts.ts");
/* harmony import */ var _api_users__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./api/users */ "./src/global/actions/api/users.ts");
/* harmony import */ var _api_bots__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./api/bots */ "./src/global/actions/api/bots.ts");
/* harmony import */ var _api_settings__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./api/settings */ "./src/global/actions/api/settings.ts");
/* harmony import */ var _api_twoFaSettings__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./api/twoFaSettings */ "./src/global/actions/api/twoFaSettings.ts");
/* harmony import */ var _api_payments__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./api/payments */ "./src/global/actions/api/payments.ts");
/* harmony import */ var _api_stars__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./api/stars */ "./src/global/actions/api/stars.ts");
/* harmony import */ var _api_reactions__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./api/reactions */ "./src/global/actions/api/reactions.ts");
/* harmony import */ var _api_statistics__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./api/statistics */ "./src/global/actions/api/statistics.ts");
/* harmony import */ var _api_stories__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./api/stories */ "./src/global/actions/api/stories.ts");
/* harmony import */ var _ui_initial__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ui/initial */ "./src/global/actions/ui/initial.ts");
/* harmony import */ var _ui_chats__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ui/chats */ "./src/global/actions/ui/chats.ts");
/* harmony import */ var _ui_bots__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ui/bots */ "./src/global/actions/ui/bots.ts");
/* harmony import */ var _ui_messages__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ui/messages */ "./src/global/actions/ui/messages.ts");
/* harmony import */ var _ui_globalSearch__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ui/globalSearch */ "./src/global/actions/ui/globalSearch.ts");
/* harmony import */ var _ui_middleSearch__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ui/middleSearch */ "./src/global/actions/ui/middleSearch.ts");
/* harmony import */ var _ui_stickerSearch__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./ui/stickerSearch */ "./src/global/actions/ui/stickerSearch.ts");
/* harmony import */ var _ui_users__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ui/users */ "./src/global/actions/ui/users.ts");
/* harmony import */ var _ui_settings__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./ui/settings */ "./src/global/actions/ui/settings.ts");
/* harmony import */ var _ui_misc__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./ui/misc */ "./src/global/actions/ui/misc.ts");
/* harmony import */ var _ui_payments__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./ui/payments */ "./src/global/actions/ui/payments.ts");
/* harmony import */ var _ui_calls__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./ui/calls */ "./src/global/actions/ui/calls.ts");
/* harmony import */ var _ui_mediaViewer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./ui/mediaViewer */ "./src/global/actions/ui/mediaViewer.ts");
/* harmony import */ var _ui_passcode__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./ui/passcode */ "./src/global/actions/ui/passcode.ts");
/* harmony import */ var _ui_stars__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./ui/stars */ "./src/global/actions/ui/stars.ts");
/* harmony import */ var _ui_reactions__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./ui/reactions */ "./src/global/actions/ui/reactions.ts");
/* harmony import */ var _ui_stories__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./ui/stories */ "./src/global/actions/ui/stories.ts");
/* harmony import */ var _ui_statistics__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./ui/statistics */ "./src/global/actions/ui/statistics.ts");
/* harmony import */ var _apiUpdaters_initial__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./apiUpdaters/initial */ "./src/global/actions/apiUpdaters/initial.ts");
/* harmony import */ var _apiUpdaters_chats__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./apiUpdaters/chats */ "./src/global/actions/apiUpdaters/chats.ts");
/* harmony import */ var _apiUpdaters_messages__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./apiUpdaters/messages */ "./src/global/actions/apiUpdaters/messages.ts");
/* harmony import */ var _apiUpdaters_users__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./apiUpdaters/users */ "./src/global/actions/apiUpdaters/users.ts");
/* harmony import */ var _apiUpdaters_symbols__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./apiUpdaters/symbols */ "./src/global/actions/apiUpdaters/symbols.ts");
/* harmony import */ var _apiUpdaters_misc__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./apiUpdaters/misc */ "./src/global/actions/apiUpdaters/misc.ts");
/* harmony import */ var _apiUpdaters_settings__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./apiUpdaters/settings */ "./src/global/actions/apiUpdaters/settings.ts");
/* harmony import */ var _apiUpdaters_twoFaSettings__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./apiUpdaters/twoFaSettings */ "./src/global/actions/apiUpdaters/twoFaSettings.ts");
/* harmony import */ var _apiUpdaters_calls__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./apiUpdaters/calls */ "./src/global/actions/apiUpdaters/calls.ts");
/* harmony import */ var _apiUpdaters_payments__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./apiUpdaters/payments */ "./src/global/actions/apiUpdaters/payments.ts");















































/***/ }),

/***/ "./src/global/actions/apiUpdaters/calls.ts":
/*!*************************************************!*\
  !*** ./src/global/actions/apiUpdaters/calls.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_notifications__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/notifications */ "./src/util/notifications.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_calls__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../reducers/calls */ "./src/global/reducers/calls.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _selectors_calls__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../selectors/calls */ "./src/global/selectors/calls.ts");
/* harmony import */ var _ui_calls__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/calls */ "./src/global/actions/ui/calls.ts");












(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updateGroupCall':
      {
        if (update.call.connectionState === 'discarded') {
          if (global.groupCalls.activeGroupCallId) {
            if ('leaveGroupCall' in actions) actions.leaveGroupCall({
              shouldRemove: true,
              tabId: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
            });
            return undefined;
          } else {
            return (0,_reducers_calls__WEBPACK_IMPORTED_MODULE_7__.removeGroupCall)(global, update.call.id);
          }
        }
        const groupCall = (0,_selectors_calls__WEBPACK_IMPORTED_MODULE_10__.selectGroupCall)(global, update.call.id);
        const chatId = groupCall?.chatId;
        if (chatId) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChat)(global, chatId, {
            isCallNotEmpty: groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)
          });
        }
        return (0,_reducers_calls__WEBPACK_IMPORTED_MODULE_7__.updateGroupCall)(global, update.call.id, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.omit)(update.call, ['connectionState']), undefined, update.call.participantsCount);
      }
    case 'updateGroupCallChatId':
      {
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectChat)(global, update.chatId);
        if (chat) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChatFullInfo)(global, update.chatId, {
            groupCallId: update.call.id
          });
        }
        return global;
      }
    case 'updateGroupCallParticipants':
      {
        const {
          groupCallId,
          participants,
          nextOffset
        } = update;
        const {
          currentUserId
        } = global;

        // `secret-sauce` should disconnect if the participant is us but from another device
        global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
        participants.forEach(participant => {
          if (participant.id) {
            global = (0,_reducers_calls__WEBPACK_IMPORTED_MODULE_7__.updateGroupCallParticipant)(global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id);
          }
        });
        if (nextOffset) {
          global = (0,_reducers_calls__WEBPACK_IMPORTED_MODULE_7__.updateGroupCall)(global, groupCallId, {
            nextOffset
          });
        }
        const groupCall = (0,_selectors_calls__WEBPACK_IMPORTED_MODULE_10__.selectGroupCall)(global, groupCallId);
        const chatId = groupCall?.chatId;
        if (chatId) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChat)(global, chatId, {
            isCallNotEmpty: groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)
          });
        }
        return global;
      }
    case 'updatePhoneCall':
      {
        if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.ARE_CALLS_SUPPORTED) return undefined;
        const {
          phoneCall,
          currentUserId
        } = global;
        const {
          call
        } = update;
        if (phoneCall) {
          if (call.state === 'discarded') {
            actions.playGroupCallSound({
              sound: 'end'
            });
            if ('hangUp' in actions) actions.hangUp({
              tabId: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
            });
            return {
              ...global,
              ...(call.needRating && {
                ratingPhoneCall: call
              })
            };
          }
          return undefined;
        }
        const isOutgoing = call?.adminId === currentUserId;
        if (!isOutgoing && call.state === 'requested') {
          (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_3__.onTickEnd)(() => {
            global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
            (0,_util_notifications__WEBPACK_IMPORTED_MODULE_2__.notifyAboutCall)({
              call,
              user: (0,_selectors_calls__WEBPACK_IMPORTED_MODULE_10__.selectPhoneCallUser)(global)
            });
          });
          (0,_ui_calls__WEBPACK_IMPORTED_MODULE_11__.initializeSounds)();
          void (0,_ui_calls__WEBPACK_IMPORTED_MODULE_11__.checkNavigatorUserMediaPermissions)(global, actions, call.isVideo, (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)());
          global = {
            ...global,
            phoneCall: call
          };
          return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_8__.updateTabState)(global, {
            isCallPanelVisible: false
          }, (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)());
        }
      }
  }
  return undefined;
});

/***/ }),

/***/ "./src/global/actions/apiUpdaters/chats.ts":
/*!*************************************************!*\
  !*** ./src/global/actions/apiUpdaters/chats.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/notifications */ "./src/util/notifications.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_reactions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../reducers/reactions */ "./src/global/reducers/reactions.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");











const TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds

(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updateChat':
      {
        const localChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, update.id);
        const {
          isForum: prevIsForum,
          lastReadOutboxMessageId
        } = localChat || {};
        if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {
          update = {
            ...update,
            chat: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(update.chat, ['lastReadInboxMessageId'])
          };
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, update.id, update.chat);
        if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerStoriesHidden)(global, update.id, update.chat.areStoriesHidden || false);
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        const updatedChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, update.id);
        if (!update.noTopChatsRequest && !(0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectIsChatListed)(global, update.id) && !updatedChat?.isNotJoined) {
          // Reload top chats to update chat listing
          actions.loadTopChats();
        }
        if (update.chat.id) {
          (0,_util_notifications__WEBPACK_IMPORTED_MODULE_4__.closeMessageNotifications)({
            chatId: update.chat.id,
            lastReadInboxMessageId: update.chat.lastReadInboxMessageId
          });
        }
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          const {
            chatId: currentChatId
          } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMessageList)(global, tabId) || {};
          const chatUpdate = update;
          // The property `isForum` was changed in another client
          if (currentChatId === chatUpdate.id && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {
            if (prevIsForum) {
              actions.closeForumPanel({
                tabId
              });
            }
            actions.openChat({
              id: currentChatId,
              tabId
            });
          }
        });
        return undefined;
      }
    case 'updateChatJoin':
      {
        const listType = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatListType)(global, update.id);
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, update.id);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, update.id, {
          isNotJoined: false
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        if (chat) {
          actions.requestChatUpdate({
            chatId: chat.id
          });
        }
        actions.loadFullChat({
          chatId: update.id,
          force: true
        });
        if (!listType) {
          return undefined;
        }
        global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addChatListIds)(global, listType, [update.id]);
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        return undefined;
      }
    case 'updateChatLeave':
      {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.leaveChat)(global, update.id);
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, update.id);
        if (chat && (0,_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatChannel)(chat)) {
          const chatMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatMessages)(global, update.id);
          if (chatMessages) {
            const localMessageIds = Object.keys(chatMessages).map(Number).filter(_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_3__.isLocalMessageId);
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.deleteChatMessages)(global, chat.id, localMessageIds);
          }
        }
        return global;
      }
    case 'updateChatInbox':
      {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, update.id, update.chat);
      }
    case 'updateChatTypingStatus':
      {
        const {
          id,
          threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
          typingStatus
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.replaceThreadParam)(global, id, threadId, 'typingStatus', typingStatus);
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        setTimeout(() => {
          global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
          const currentTypingStatus = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectThreadParam)(global, id, threadId, 'typingStatus');
          if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.replaceThreadParam)(global, id, threadId, 'typingStatus', undefined);
            (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
          }
        }, TYPING_STATUS_CLEAR_DELAY);
        return undefined;
      }
    case 'newMessage':
      {
        const {
          message
        } = update;
        if (message.senderId === global.currentUserId && !message.isFromScheduled) {
          return undefined;
        }
        const isLocal = (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_3__.isLocalMessageId)(message.id);
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, update.chatId);
        if (!chat) {
          return undefined;
        }
        const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);
        if (!isLocal) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, update.chatId, {
            unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1
          });
          if (hasMention) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addUnreadMentions)(global, update.chatId, chat, [update.message.id], true);
          }
          const topic = chat.isForum ? (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTopicFromMessage)(global, message) : undefined;
          if (topic) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateTopic)(global, update.chatId, topic.id, {
              unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1
            });
          }
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        (0,_util_notifications__WEBPACK_IMPORTED_MODULE_4__.notifyAboutMessage)({
          chat,
          message
        });
        return undefined;
      }
    case 'updateCommonBoxMessages':
    case 'updateChannelMessages':
      {
        const {
          ids,
          messageUpdate
        } = update;
        ids.forEach(id => {
          const chatId = 'channelId' in update ? update.channelId : (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCommonBoxChatId)(global, id);
          const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
          if (messageUpdate.reactions && chat?.unreadReactionsCount && !(0,_helpers__WEBPACK_IMPORTED_MODULE_5__.checkIfHasUnreadReactions)(global, messageUpdate.reactions)) {
            global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_8__.updateUnreadReactions)(global, chatId, {
              unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,
              unreadReactions: chat.unreadReactions?.filter(i => i !== id)
            });
          }
          if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.removeUnreadMentions)(global, chatId, chat, [id], true);
          }
        });
        return global;
      }
    case 'updateChatFullInfo':
      {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChatFullInfo)(global, update.id, update.fullInfo);
      }
    case 'updatePinnedChatIds':
      {
        const {
          ids,
          folderId
        } = update;
        const listType = folderId === _config__WEBPACK_IMPORTED_MODULE_1__.ARCHIVED_FOLDER_ID ? 'archived' : 'active';
        return {
          ...global,
          chats: {
            ...global.chats,
            orderedPinnedIds: {
              ...global.chats.orderedPinnedIds,
              [listType]: ids.length ? ids : undefined
            }
          }
        };
      }
    case 'updatePinnedSavedDialogIds':
      {
        const {
          ids
        } = update;
        return {
          ...global,
          chats: {
            ...global.chats,
            orderedPinnedIds: {
              ...global.chats.orderedPinnedIds,
              saved: ids.length ? ids : undefined
            }
          }
        };
      }
    case 'updateChatPinned':
      {
        const {
          id,
          isPinned
        } = update;
        const listType = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatListType)(global, id);
        if (!listType) {
          return undefined;
        }
        const {
          [listType]: orderedPinnedIds
        } = global.chats.orderedPinnedIds;
        let newOrderedPinnedIds = orderedPinnedIds || [];
        if (!isPinned) {
          newOrderedPinnedIds = newOrderedPinnedIds.filter(pinnedId => pinnedId !== id);
        } else if (!newOrderedPinnedIds.includes(id)) {
          // When moving pinned chats to archive, active ordered pinned ids don't get updated
          // (to preserve chat pinned state when it returns from archive)
          // If user already has max pinned chats, we should check for orderedIds
          // that don't point to listed chats
          if (listType === 'active' && newOrderedPinnedIds.length >= _config__WEBPACK_IMPORTED_MODULE_1__.MAX_ACTIVE_PINNED_CHATS) {
            const listIds = global.chats.listIds.active;
            newOrderedPinnedIds = newOrderedPinnedIds.filter(pinnedId => listIds && listIds.includes(pinnedId));
          }
          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];
        }
        return {
          ...global,
          chats: {
            ...global.chats,
            orderedPinnedIds: {
              ...global.chats.orderedPinnedIds,
              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined
            }
          }
        };
      }
    case 'updateSavedDialogPinned':
      {
        const {
          id,
          isPinned
        } = update;
        const {
          saved: orderedPinnedIds
        } = global.chats.orderedPinnedIds;
        let newOrderedPinnedIds = orderedPinnedIds || [];
        if (!isPinned) {
          newOrderedPinnedIds = newOrderedPinnedIds.filter(pinnedId => pinnedId !== id);
        } else if (!newOrderedPinnedIds.includes(id)) {
          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];
        }
        return {
          ...global,
          chats: {
            ...global.chats,
            orderedPinnedIds: {
              ...global.chats.orderedPinnedIds,
              saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined
            }
          }
        };
      }
    case 'updateChatListType':
      {
        const {
          id,
          folderId
        } = update;
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChatListType)(global, id, folderId);
      }
    case 'updateChatFolder':
      {
        const {
          id,
          folder
        } = update;
        const {
          byId: chatFoldersById,
          orderedIds
        } = global.chatFolders;
        const isDeleted = folder === undefined;
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId);
          const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;
          if (isFolderActive) {
            global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_9__.updateTabState)(global, {
              activeChatFolder: 0
            }, tabId);
          }
        });
        const newChatFoldersById = !isDeleted ? {
          ...chatFoldersById,
          [id]: folder
        } : (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(chatFoldersById, [id]);
        const newOrderedIds = !isDeleted ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id] : orderedIds?.filter(orderedId => orderedId !== id);
        return {
          ...global,
          chatFolders: {
            ...global.chatFolders,
            byId: newChatFoldersById,
            orderedIds: newOrderedIds,
            invites: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(global.chatFolders.invites, [id])
          }
        };
      }
    case 'updateChatFoldersOrder':
      {
        const {
          orderedIds
        } = update;
        return {
          ...global,
          chatFolders: {
            ...global.chatFolders,
            orderedIds
          }
        };
      }
    case 'updateRecommendedChatFolders':
      {
        const {
          folders
        } = update;
        return {
          ...global,
          chatFolders: {
            ...global.chatFolders,
            recommended: folders
          }
        };
      }
    case 'updateChatMembers':
      {
        const targetChatFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatFullInfo)(global, update.id);
        const {
          replacedMembers,
          addedMember,
          deletedMemberId
        } = update;
        if (!targetChatFullInfo) {
          return undefined;
        }
        let shouldUpdate = false;
        let members = targetChatFullInfo?.members ? [...targetChatFullInfo.members] : [];
        if (replacedMembers) {
          members = replacedMembers;
          shouldUpdate = true;
        } else if (addedMember) {
          if (!members.length || !members.some(m => m.userId === addedMember.userId)) {
            members.push(addedMember);
            shouldUpdate = true;
          }
        } else if (members.length && deletedMemberId) {
          const deleteIndex = members.findIndex(m => m.userId === deletedMemberId);
          if (deleteIndex > -1) {
            members.slice(deleteIndex, 1);
            shouldUpdate = true;
          }
        }
        if (shouldUpdate) {
          const adminMembers = members.filter(({
            isOwner,
            isAdmin
          }) => isOwner || isAdmin);
          // TODO Kicked members?

          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, update.id, {
            membersCount: members.length
          });
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChatFullInfo)(global, update.id, {
            members,
            adminMembersById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.buildCollectionByKey)(adminMembers, 'userId')
          });
          return global;
        }
        return undefined;
      }
    case 'draftMessage':
      {
        const {
          chatId,
          threadId,
          draft
        } = update;
        const chat = global.chats.byId[chatId];
        if (!chat) {
          return undefined;
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.replaceThreadParam)(global, chatId, threadId || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'draft', draft);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, chatId, {
          draftDate: draft?.date
        });
        return global;
      }
    case 'updatePendingJoinRequests':
      {
        const {
          chatId,
          requestsPending,
          recentRequesterIds
        } = update;
        const chat = global.chats.byId[chatId];
        if (!chat) {
          return undefined;
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChatFullInfo)(global, chatId, {
          requestsPending,
          recentRequesterIds
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        actions.loadChatJoinRequests({
          chatId
        });
        return undefined;
      }
    case 'updatePinnedTopic':
      {
        const {
          chatId,
          topicId,
          isPinned
        } = update;
        const chat = global.chats.byId[chatId];
        if (!chat) {
          return undefined;
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateTopic)(global, chatId, topicId, {
          isPinned
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        return undefined;
      }
    case 'updatePinnedTopicsOrder':
      {
        const {
          chatId,
          order
        } = update;
        const chat = global.chats.byId[chatId];
        if (!chat) return undefined;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.replacePinnedTopicIds)(global, chatId, order);
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        return undefined;
      }
    case 'updateTopic':
      {
        const {
          chatId,
          topicId
        } = update;
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
        if (!chat?.isForum) return undefined;
        actions.loadTopicById({
          chatId,
          topicId
        });
        return undefined;
      }
    case 'updateTopics':
      {
        const {
          chatId
        } = update;
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
        if (!chat?.isForum) return undefined;
        actions.loadTopics({
          chatId,
          force: true
        });
        return undefined;
      }
    case 'updateViewForumAsMessages':
      {
        const {
          chatId,
          isEnabled
        } = update;
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
        if (!chat?.isForum) return undefined;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, chatId, {
          isForumAsMessages: isEnabled
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        break;
      }
    case 'updateNewProfilePhoto':
      {
        const {
          peerId,
          photo
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, peerId, {
          avatarPhotoId: photo.id
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        actions.loadMoreProfilePhotos({
          peerId,
          shouldInvalidateCache: true
        });
        break;
      }
    case 'updateDeleteProfilePhoto':
      {
        const {
          peerId,
          photoId
        } = update;
        const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectPeer)(global, peerId);
        if (!peer) {
          return undefined;
        }
        if (!photoId || peer.avatarPhotoId === photoId) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateChat)(global, peerId, {
            avatarPhotoId: undefined
          });
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.replacePeerPhotos)(global, peerId, undefined);
        } else {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.deletePeerPhoto)(global, peerId, photoId);
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
        actions.loadMoreProfilePhotos({
          peerId,
          shouldInvalidateCache: true
        });
        break;
      }
  }
  return undefined;
});

/***/ }),

/***/ "./src/global/actions/apiUpdaters/messages.ts":
/*!****************************************************!*\
  !*** ./src/global/actions/apiUpdaters/messages.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteMessages: () => (/* binding */ deleteMessages),
/* harmony export */   deleteThread: () => (/* binding */ deleteThread)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_areDeepEqual__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/areDeepEqual */ "./src/util/areDeepEqual.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/notifications */ "./src/util/notifications.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _helpers_replies__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_reactions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../reducers/reactions */ "./src/global/reducers/reactions.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
















const ANIMATION_DELAY = 350;
const SNAP_ANIMATION_DELAY = 1000;
const VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;
let lastVideoProcessingNotificationTime = 0;
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'newMessage':
      {
        const {
          chatId,
          id,
          message,
          shouldForceReply,
          wasDrafted,
          poll
        } = update;
        global = updateWithLocalMedia(global, chatId, id, message);
        global = updateListedAndViewportIds(global, actions, message);
        const newMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
        const replyInfo = (0,_helpers_replies__WEBPACK_IMPORTED_MODULE_10__.getMessageReplyInfo)(newMessage);
        const storyReplyInfo = (0,_helpers_replies__WEBPACK_IMPORTED_MODULE_10__.getStoryReplyInfo)(newMessage);
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, chatId);
        if (chat?.isForum && replyInfo?.isForumTopic && !(0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectTopicFromMessage)(global, newMessage) && replyInfo.replyToMsgId) {
          actions.loadTopicById({
            chatId,
            topicId: replyInfo.replyToMsgId
          });
        }
        const isLocal = (0,_helpers__WEBPACK_IMPORTED_MODULE_9__.isMessageLocal)(message);
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          // Force update for last message on drafted messages to prevent flickering
          if (isLocal && wasDrafted) {
            global = updateChatLastMessage(global, chatId, newMessage);
          }
          const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, newMessage);
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMediaLoadingState)(global, newMessage, chatId, threadId, tabId);
          if ((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsMessageInCurrentMessageList)(global, chatId, message, tabId)) {
            if (isLocal && message.isOutgoing && !message.content?.action && !storyReplyInfo?.storyId && !message.content?.storyData) {
              const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCurrentMessageList)(global, tabId);
              if (currentMessageList) {
                // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)
                actions.focusMessage({
                  chatId,
                  threadId: currentMessageList.threadId,
                  messageId: message.id,
                  noHighlight: true,
                  isResizingContainer: true,
                  tabId
                });
              }
            }

            // @perf Wait until scroll animation finishes or simply rely on delivery status update
            // (which is itself delayed)
            if (!isLocal) {
              setTimeout(() => {
                global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
                if (shouldForceReply) {
                  actions.updateDraftReplyInfo({
                    replyToMsgId: id,
                    tabId
                  });
                }
                global = updateChatLastMessage(global, chatId, newMessage);
                (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
              }, ANIMATION_DELAY);
            }
          } else {
            global = updateChatLastMessage(global, chatId, newMessage);
          }
        });
        if (poll) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, poll.id, poll);
        }
        if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_8__.getServerTime)()) {
          actions.reportMessageDelivery({
            chatId,
            messageId: id
          });
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);

        // Reload dialogs if chat is not present in the list
        if (!isLocal && !chat?.isNotJoined && !(0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsChatListed)(global, chatId)) {
          actions.loadTopChats();
        }
        if (!isLocal && (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsChatWithSelf)(global, chatId)) {
          const savedDialogId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectSavedDialogIdFromMessage)(global, newMessage);
          if (savedDialogId && !(0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsChatListed)(global, savedDialogId, 'saved')) {
            actions.requestSavedDialogUpdate({
              chatId: savedDialogId
            });
          }
        }
        break;
      }
    case 'updateChatLastMessage':
      {
        const {
          id,
          lastMessage
        } = update;
        global = updateChatLastMessage(global, id, lastMessage, true);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.addMessages)(global, [lastMessage]);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateStartEmojiInteraction':
      {
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          const {
            chatId: currentChatId
          } = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCurrentMessageList)(global, tabId) || {};
          if (currentChatId !== update.id) return;
          const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, currentChatId, update.messageId);
          if (!message) return;

          // Workaround for a weird behavior when interaction is received after watching reaction
          if ((0,_helpers__WEBPACK_IMPORTED_MODULE_9__.getMessageText)(message) !== update.emoji) return;
          const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectTabState)(global, tabId);
          global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_14__.updateTabState)(global, {
            activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {
              id: Math.random(),
              animatedEffect: update.emoji,
              messageId: update.messageId
            }]
          }, tabId);
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'newScheduledMessage':
      {
        const {
          chatId,
          id,
          message,
          poll
        } = update;
        global = updateWithLocalMedia(global, chatId, id, message, true);
        const scheduledIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledIds)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) || [];
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'scheduledIds', (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.unique)([...scheduledIds, id]));
        const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, message);
        if (threadId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
          const threadScheduledIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledIds)(global, chatId, threadId) || [];
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, threadId, 'scheduledIds', (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.unique)([...threadScheduledIds, id]));
        }
        if (poll) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, poll.id, poll);
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePeerFullInfo)(global, chatId, {
          hasScheduledMessages: true
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateMessage':
      {
        const {
          chatId,
          id,
          message,
          poll
        } = update;
        const currentMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, chatId);
        global = updateWithLocalMedia(global, chatId, id, message);
        const newMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
        if (message.reactions && chat) {
          global = updateReactions(global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);
        }
        if (message.content?.text?.text !== currentMessage?.content?.text?.text) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.clearMessageTranslation)(global, chatId, id);
        }
        if (poll) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, poll.id, poll);
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateScheduledMessage':
      {
        const {
          chatId,
          id,
          message,
          poll
        } = update;
        const currentMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledMessage)(global, chatId, id);
        if (!currentMessage) {
          return;
        }
        global = updateWithLocalMedia(global, chatId, id, message, true);
        const ids = Object.keys((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatScheduledMessages)(global, chatId) || {}).map(Number).sort((a, b) => b - a);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'scheduledIds', ids);
        const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, currentMessage);
        if (threadId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
          const threadScheduledIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledIds)(global, chatId, threadId) || [];
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));
        }
        if (poll) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, poll.id, poll);
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateQuickReplyMessage':
      {
        const {
          id,
          message,
          poll
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateQuickReplyMessage)(global, id, message);
        if (poll) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, poll.id, poll);
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'deleteQuickReplyMessages':
      {
        const {
          messageIds
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteQuickReplyMessages)(global, messageIds);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateQuickReplies':
      {
        const {
          quickReplies
        } = update;
        const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.buildCollectionByKey)(quickReplies, 'id');
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateQuickReplies)(global, byId);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'deleteQuickReply':
      {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteQuickReply)(global, update.quickReplyId);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateVideoProcessingPending':
      {
        const {
          chatId,
          localId,
          newScheduledMessageId
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatMessages)(global, chatId, [localId]);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePeerFullInfo)(global, chatId, {
          hasScheduledMessages: true
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCurrentMessageList)(global, tabId);
          if (currentMessageList?.chatId !== chatId) return;
          const now = Date.now();
          if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {
            return;
          }
          lastVideoProcessingNotificationTime = now;
          actions.showNotification({
            message: {
              key: 'VideoConversionText'
            },
            title: {
              key: 'VideoConversionTitle'
            },
            tabId
          });
          actions.focusMessage({
            chatId,
            messageId: newScheduledMessageId,
            messageListType: 'scheduled',
            tabId
          });
        });
        break;
      }
    case 'updateMessageSendSucceeded':
      {
        const {
          chatId,
          localId,
          message,
          poll
        } = update;
        global = updateListedAndViewportIds(global, actions, message);
        const currentMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, localId);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatMessages)(global, chatId, [localId]);

        // Edge case for "Send When Online"
        if (message.isScheduled) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatScheduledMessages)(global, chatId, [localId]);
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, message.id, {
          ...currentMessage,
          ...message,
          previousLocalId: localId,
          isDeleting: undefined
        });
        if (poll) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, poll.id, poll);
        }
        global = {
          ...global,
          fileUploads: {
            byMessageKey: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(global.fileUploads.byMessageKey, [(0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__.getMessageKey)(message)])
          }
        };
        const newMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, message.id);
        global = updateChatLastMessage(global, chatId, newMessage);
        const thread = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadByMessage)(global, message);
        // For some reason Telegram requires to manually mark outgoing thread messages read
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          const {
            chatId: currentChatId,
            threadId: currentThreadId
          } = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCurrentMessageList)(global, tabId) || {};
          if (currentChatId !== chatId || (thread?.threadInfo?.threadId || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) !== currentThreadId) {
            return;
          }
          actions.markMessageListRead({
            maxId: message.id,
            tabId
          });
        });
        if (thread?.threadInfo?.threadId) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, thread.threadInfo.threadId, 'threadInfo', {
            ...thread.threadInfo,
            lastMessageId: message.id,
            lastReadInboxMessageId: message.id
          });
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChat)(global, chatId, {
          lastReadInboxMessageId: message.id
        });
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, chatId);
        // Reload dialogs if chat is not present in the list
        if (!chat?.isNotJoined && !(0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsChatListed)(global, chatId)) {
          actions.loadTopChats();
        }
        if ((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsChatWithSelf)(global, chatId)) {
          const savedDialogId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectSavedDialogIdFromMessage)(global, newMessage);
          if (savedDialogId && !(0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsChatListed)(global, savedDialogId, 'saved')) {
            actions.requestSavedDialogUpdate({
              chatId: savedDialogId
            });
          }
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateScheduledMessageSendSucceeded':
      {
        const {
          chatId,
          localId,
          message,
          poll
        } = update;
        const scheduledIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledIds)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) || [];
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);
        const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, message);
        if (threadId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
          const threadScheduledIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledIds)(global, chatId, threadId) || [];
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);
        }
        const currentMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledMessage)(global, chatId, localId);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatScheduledMessages)(global, chatId, [localId]);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateScheduledMessage)(global, chatId, message.id, {
          ...currentMessage,
          ...message,
          previousLocalId: localId,
          isDeleting: undefined
        });
        if (poll) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, poll.id, poll);
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updatePinnedIds':
      {
        const {
          chatId,
          isPinned,
          messageIds
        } = update;
        const messages = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.pickTruthy)((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessages)(global, chatId), messageIds);
        const updatePerThread = {
          [_api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID]: messageIds
        };
        Object.values(messages).forEach(message => {
          const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, message);
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, message.id, {
            isPinned
          });
          if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) return;
          const currentUpdatedInThread = updatePerThread[threadId] || [];
          currentUpdatedInThread.push(message.id);
          updatePerThread[threadId] = currentUpdatedInThread;
        });
        Object.entries(updatePerThread).forEach(([threadId, ids]) => {
          const pinnedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectPinnedIds)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) || [];
          const newPinnedIds = isPinned ? (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.unique)(pinnedIds.concat(ids)).sort((a, b) => b - a) : pinnedIds.filter(id => !ids.includes(id));
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateThreadInfo':
      {
        const {
          threadInfo
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateThreadInfos)(global, [threadInfo]);
        const {
          chatId,
          threadId
        } = threadInfo;
        if (!chatId || !threadId) return;
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, chatId);
        const currentThreadInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadInfo)(global, chatId, threadId);
        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {
          actions.loadTopicById({
            chatId,
            topicId: Number(threadId)
          });
        }

        // Update reply thread last read message id if already read in main thread
        if (!chat?.isForum) {
          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;
          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;
          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateThreadInfo)(global, chatId, threadId, {
              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId)
            });
          }
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'resetMessages':
      {
        const {
          id: chatId
        } = update;
        const messagesById = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessages)(global, chatId);
        if (messagesById && !(0,_helpers__WEBPACK_IMPORTED_MODULE_9__.isUserId)(chatId)) {
          const tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)();
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatMessages)(global, chatId, Object.keys(messagesById).map(Number));
          (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
          actions.loadFullChat({
            chatId,
            force: true
          });
          actions.loadViewportMessages({
            chatId,
            threadId: _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
            tabId
          });
        }
        break;
      }
    case 'deleteMessages':
      {
        const {
          ids,
          chatId
        } = update;
        deleteMessages(global, chatId, ids, actions);
        break;
      }
    case 'deleteScheduledMessages':
      {
        const {
          ids,
          newIds,
          chatId
        } = update;
        const hadVideoProcessing = ids?.some(id => (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledMessage)(global, chatId, id)?.isVideoProcessingPending);
        const processedVideoId = newIds?.find(id => {
          const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
          return message?.content.video;
        });
        if (hadVideoProcessing && processedVideoId) {
          Object.values(global.byTabId).forEach(({
            id: tabId
          }) => {
            actions.showNotification({
              message: {
                key: 'VideoConversionDone'
              },
              actionText: {
                key: 'VideoConversionView'
              },
              action: {
                action: 'focusMessage',
                payload: {
                  chatId,
                  messageId: processedVideoId,
                  tabId
                }
              },
              tabId
            });
          });
        }
        deleteScheduledMessages(chatId, ids, actions, global);
        break;
      }
    case 'deleteHistory':
      {
        const {
          chatId
        } = update;
        const chatMessages = global.messages.byChatId[chatId];
        if (chatId === _config__WEBPACK_IMPORTED_MODULE_1__.SERVICE_NOTIFICATIONS_USER_ID) {
          global = {
            ...global,
            serviceNotifications: global.serviceNotifications.map(notification => ({
              ...notification,
              isDeleted: true
            }))
          };
          (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        }
        if (chatMessages) {
          const ids = Object.keys(chatMessages.byId).map(Number);
          global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
          deleteMessages(global, chatId, ids, actions);
        } else {
          actions.requestChatUpdate({
            chatId
          });
        }
        global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.removeChatFromChatLists)(global, chatId);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'deleteSavedHistory':
      {
        const {
          chatId
        } = update;
        const currentUserId = global.currentUserId;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.removeChatFromChatLists)(global, chatId, 'saved');
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
        deleteThread(global, currentUserId, chatId, actions);
        break;
      }
    case 'updateCommonBoxMessages':
      {
        const {
          ids,
          messageUpdate
        } = update;
        ids.forEach(id => {
          const chatId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCommonBoxChatId)(global, id);
          if (chatId) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, id, messageUpdate);
          }
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateChannelMessages':
      {
        const {
          channelId,
          ids,
          messageUpdate
        } = update;
        ids.forEach(id => {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, channelId, id, messageUpdate);
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateMessagePoll':
      {
        const {
          pollId,
          pollUpdate
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePoll)(global, pollId, pollUpdate);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateMessagePollVote':
      {
        const {
          pollId,
          peerId,
          options
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updatePollVote)(global, pollId, peerId, options);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateServiceNotification':
      {
        const {
          message
        } = update;
        if ((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsServiceChatReady)(global)) {
          actions.createServiceNotification({
            message
          });
        }
        break;
      }
    case 'updateMessageReactions':
      {
        const {
          chatId,
          id,
          reactions
        } = update;
        const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, update.chatId);
        if (!chat || !message) return;
        global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateMessageExtendedMedia':
      {
        const {
          chatId,
          id,
          extendedMedia,
          isBought
        } = update;
        const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, update.chatId);
        if (!chat || !message) return;
        if (message.content.invoice) {
          const media = extendedMedia[0];
          if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {
            if (!message.content.invoice) return;
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, id, {
              content: {
                ...message.content,
                invoice: {
                  ...message.content.invoice,
                  extendedMedia: media
                }
              }
            });
            (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
          } else {
            const content = media;
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, id, {
              content: {
                ...content
              }
            });
            (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
          }
        }
        if (message.content.paidMedia) {
          const paidMediaUpdate = isBought ? {
            isBought,
            extendedMedia
          } : {
            extendedMedia: extendedMedia,
            isBought: undefined
          };
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, id, {
            content: {
              ...message.content,
              paidMedia: {
                ...message.content.paidMedia,
                ...paidMediaUpdate
              }
            }
          });
          (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        }
        break;
      }
    case 'updateTranscribedAudio':
      {
        const {
          transcriptionId,
          text,
          isPending
        } = update;
        global = {
          ...global,
          transcriptions: {
            ...global.transcriptions,
            [transcriptionId]: {
              ...(global.transcriptions[transcriptionId] || {}),
              transcriptionId,
              text,
              isPending
            }
          }
        };
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateMessageSendFailed':
      {
        const {
          chatId,
          localId,
          error
        } = update;
        if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {
          Object.values(global.byTabId).forEach(({
            id: tabId
          }) => {
            actions.showAllowedMessageTypesNotification({
              chatId,
              tabId
            });
          });
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, localId, {
          sendingState: 'messageSendingStateFailed'
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
    case 'updateMessageTranslations':
      {
        const {
          chatId,
          messageIds,
          toLanguageCode,
          translations
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateMessageTranslations)(global, chatId, messageIds, toLanguageCode, translations);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
        break;
      }
  }
});
function updateReactions(global, actions, chatId, id, reactions, chat, isOutgoing, message) {
  const currentReactions = message?.reactions;

  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates
  if (currentReactions && (0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_2__.areDeepEqual)(reactions, currentReactions)) {
    return global;
  }
  const localPaidReaction = currentReactions?.results.find(r => r.localAmount);
  // Save local count on update, but reset if we sent reaction
  if (localPaidReaction?.localAmount) {
    reactions.results = (0,_helpers__WEBPACK_IMPORTED_MODULE_9__.addPaidReaction)(reactions.results, localPaidReaction.localAmount);
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, id, {
    reactions
  });
  if (!isOutgoing) {
    return global;
  }
  const {
    reaction,
    isOwn,
    isUnread
  } = reactions.recentReactions?.[0] ?? {};
  const reactionEffectsEnabled = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectPerformanceSettingsValue)(global, 'reactionEffects');
  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {
    const messageKey = (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__.getMessageKey)(message);
    // Start reaction only in master tab
    actions.startActiveReaction({
      containerId: messageKey,
      reaction,
      tabId: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
    });
  }
  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);
  const hasUnreadReactionsInNewReactions = (0,_helpers__WEBPACK_IMPORTED_MODULE_9__.checkIfHasUnreadReactions)(global, reactions);

  // Only notify about added reactions, not removed ones
  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {
    global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_13__.updateUnreadReactions)(global, chatId, {
      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,
      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a)
    });
    const newMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
    if (!chat || !newMessage) return global;
    (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_7__.onTickEnd)(() => {
      (0,_util_notifications__WEBPACK_IMPORTED_MODULE_6__.notifyAboutMessage)({
        chat,
        message: newMessage,
        isReaction: true
      });
    });
  }
  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {
    global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_13__.updateUnreadReactions)(global, chatId, {
      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,
      unreadReactions: chat?.unreadReactions?.filter(i => i !== id)
    });
  }
  return global;
}
function updateWithLocalMedia(global, chatId, id, messageUpdate, isScheduled = false) {
  const currentMessage = isScheduled ? (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectScheduledMessage)(global, chatId, id) : (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);

  // Preserve locally uploaded media.
  if (currentMessage && messageUpdate.content && !(0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__.isLocalMessageId)(id)) {
    const {
      photo,
      video,
      sticker,
      document
    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_9__.getMessageContent)(currentMessage);
    if (photo && messageUpdate.content.photo) {
      var _messageUpdate$conten, _messageUpdate$conten2;
      (_messageUpdate$conten = messageUpdate.content.photo).blobUrl ?? (_messageUpdate$conten.blobUrl = photo.blobUrl);
      (_messageUpdate$conten2 = messageUpdate.content.photo).thumbnail ?? (_messageUpdate$conten2.thumbnail = photo.thumbnail);
    } else if (video && messageUpdate.content.video) {
      var _messageUpdate$conten3;
      (_messageUpdate$conten3 = messageUpdate.content.video).blobUrl ?? (_messageUpdate$conten3.blobUrl = video.blobUrl);
    } else if (sticker && messageUpdate.content.sticker) {
      var _messageUpdate$conten4;
      (_messageUpdate$conten4 = messageUpdate.content.sticker).isPreloadedGlobally ?? (_messageUpdate$conten4.isPreloadedGlobally = sticker.isPreloadedGlobally);
    } else if (document && messageUpdate.content.document) {
      var _messageUpdate$conten5;
      (_messageUpdate$conten5 = messageUpdate.content.document).previewBlobUrl ?? (_messageUpdate$conten5.previewBlobUrl = document.previewBlobUrl);
    }
  }
  const newMessage = currentMessage ? {
    ...currentMessage,
    ...messageUpdate
  } : messageUpdate;
  return isScheduled ? (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateScheduledMessage)(global, chatId, id, newMessage) : (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, id, newMessage);
}
function updateThreadUnread(global, actions, message, isDeleting) {
  const {
    chatId
  } = message;
  const replyInfo = (0,_helpers_replies__WEBPACK_IMPORTED_MODULE_10__.getMessageReplyInfo)(message);
  const {
    threadInfo
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadByMessage)(global, message) || {};
  if (!threadInfo && replyInfo?.replyToMsgId) {
    const originMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, replyInfo.replyToMsgId);
    if (originMessage) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateThreadUnreadFromForwardedMessage)(global, originMessage, chatId, message.id, isDeleting);
    } else {
      actions.loadMessage({
        chatId,
        messageId: replyInfo.replyToMsgId,
        threadUpdate: {
          isDeleting,
          lastMessageId: message.id
        }
      });
    }
  }
  return global;
}
function updateListedAndViewportIds(global, actions, message) {
  const {
    id,
    chatId
  } = message;
  const savedDialogId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectSavedDialogIdFromMessage)(global, message);
  const {
    threadInfo
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadByMessage)(global, message) || {};
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, chatId);
  const isUnreadChatNotLoaded = chat?.unreadCount && !(0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectListedIds)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID);
  global = updateThreadUnread(global, actions, message);
  const {
    threadId
  } = threadInfo ?? {
    threadId: savedDialogId
  };
  if (threadId) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateListedIds)(global, chatId, threadId, [id]);
    Object.values(global.byTabId).forEach(({
      id: tabId
    }) => {
      if ((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsViewportNewest)(global, chatId, threadId, tabId)) {
        // Always keep the first unread message in the viewport list
        const firstUnreadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectFirstUnreadId)(global, chatId, threadId);
        const candidateGlobal = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.addViewportId)(global, chatId, threadId, id, tabId);
        const newViewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectViewportIds)(candidateGlobal, chatId, threadId, tabId);
        if (!firstUnreadId || newViewportIds.includes(firstUnreadId)) {
          global = candidateGlobal;
        }
      }
    });
    if (threadInfo) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, threadId, 'threadInfo', {
        ...threadInfo,
        lastMessageId: message.id
      });
      if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_9__.isMessageLocal)(message) && !(0,_helpers__WEBPACK_IMPORTED_MODULE_9__.isActionMessage)(message)) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateThreadInfo)(global, chatId, threadId, {
          messagesCount: (threadInfo.messagesCount || 0) + 1
        });
      }
    }
  }
  if (isUnreadChatNotLoaded) {
    return global;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateListedIds)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, [id]);
  Object.values(global.byTabId).forEach(({
    id: tabId
  }) => {
    if ((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsViewportNewest)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, tabId)) {
      // Always keep the first unread message in the viewport list
      const firstUnreadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectFirstUnreadId)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID);
      const candidateGlobal = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.addViewportId)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, id, tabId);
      const newViewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectViewportIds)(candidateGlobal, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, tabId);
      if (!firstUnreadId || newViewportIds.includes(firstUnreadId)) {
        global = candidateGlobal;
      }
    }
  });
  return global;
}
function updateChatLastMessage(global, chatId, message, force = false) {
  const {
    chats
  } = global;
  const chat = chats.byId[chatId];
  const currentLastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatLastMessageId)(global, chatId);
  const topic = chat?.isForum ? (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectTopicFromMessage)(global, message) : undefined;
  if (topic) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateTopic)(global, chatId, topic.id, {
      lastMessageId: message.id
    });
  }
  const savedDialogId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectSavedDialogIdFromMessage)(global, message);
  if (savedDialogId) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatLastMessageId)(global, savedDialogId, message.id, 'saved');
  }
  if (currentLastMessageId && !force) {
    const isSameOrNewer = currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId || message.id > currentLastMessageId;
    if (!isSameOrNewer) {
      return global;
    }
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatLastMessageId)(global, chatId, message.id);
  return global;
}
function findLastMessage(global, chatId, threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
  const byId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessages)(global, chatId);
  const listedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectListedIds)(global, chatId, threadId);
  if (!byId || !listedIds) {
    return undefined;
  }
  let i = listedIds.length;
  while (i--) {
    const message = byId[listedIds[i]];
    if (message && !message.isDeleting) {
      return message;
    }
  }
  return undefined;
}
function deleteThread(global, chatId, threadId, actions) {
  const byId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessages)(global, chatId);
  if (!byId) {
    return;
  }
  const messageIds = Object.values(byId).filter(message => {
    const messageThreadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, message);
    return messageThreadId === threadId;
  }).map(message => message.id);
  if (!messageIds.length) {
    return;
  }
  deleteMessages(global, chatId, messageIds, actions);
}
function deleteMessages(global, chatId, ids, actions) {
  // Channel update

  if (chatId) {
    const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChat)(global, chatId);
    if (!chat) return;
    const threadIdsToUpdate = new Set();
    threadIdsToUpdate.add(_api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID);
    ids.forEach(id => {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, chatId, id, {
        isDeleting: true
      });
      if ((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectTopic)(global, chatId, id)) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteTopic)(global, chatId, id);
      }
      const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id);
      if (!message) {
        return;
      }
      if (message.content.action?.photo) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deletePeerPhoto)(global, chatId, message.content.action.photo.id, true);
      }
      global = updateThreadUnread(global, actions, message, true);
      const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, message);
      if (threadId) {
        threadIdsToUpdate.add(threadId);
      }
    });
    actions.requestChatUpdate({
      chatId
    });
    const idsSet = new Set(ids);
    threadIdsToUpdate.forEach(threadId => {
      const threadInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadInfo)(global, chatId, threadId);
      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;
      const newLastMessage = findLastMessage(global, chatId, threadId);
      if (!newLastMessage) {
        if (chat.isForum && threadId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
          actions.loadTopicById({
            chatId,
            topicId: Number(threadId)
          });
        }
        return;
      }
      if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
        global = updateChatLastMessage(global, chatId, newLastMessage, true);
      }
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateThreadInfo)(global, chatId, threadId, {
        lastMessageId: newLastMessage.id
      });
      if (chat.isForum) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateTopic)(global, chatId, Number(threadId), {
          lastMessageId: newLastMessage.id
        });
      }
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
    const isAnimatingAsSnap = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCanAnimateSnapEffect)(global);
    setTimeout(() => {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
      // Prevent local deletion of sent messages in case of desync
      const stillDeletedIds = ids.filter(id => (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, chatId, id)?.isDeleting);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatMessages)(global, chatId, stillDeletedIds);
      (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);
    return;
  }

  // Common box update

  const chatIdsToUpdate = [];
  ids.forEach(id => {
    const commonBoxChatId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCommonBoxChatId)(global, id);
    if (commonBoxChatId) {
      chatIdsToUpdate.push(commonBoxChatId);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatMessage)(global, commonBoxChatId, id, {
        isDeleting: true
      });
      const newLastMessage = findLastMessage(global, commonBoxChatId);
      if (newLastMessage) {
        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);
      }
      const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatMessage)(global, commonBoxChatId, id);
      if ((0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectIsChatWithSelf)(global, commonBoxChatId) && message) {
        const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectThreadIdFromMessage)(global, message);
        if ((0,_helpers__WEBPACK_IMPORTED_MODULE_9__.getIsSavedDialog)(commonBoxChatId, threadId, global.currentUserId)) {
          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);
          actions.requestSavedDialogUpdate({
            chatId: String(threadId)
          });
          if (newLastSavedDialogMessage) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateChatLastMessageId)(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');
          }
        }
      }
      if (message?.content.action?.photo) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deletePeerPhoto)(global, commonBoxChatId, message.content.action.photo.id, true);
      }
      const isAnimatingAsSnap = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCanAnimateSnapEffect)(global);
      setTimeout(() => {
        global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatMessages)(global, commonBoxChatId, [id]);
        (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);
    }
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
  (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.unique)(chatIdsToUpdate).forEach(id => {
    actions.requestChatUpdate({
      chatId: id
    });
  });
}
function deleteScheduledMessages(chatId, ids, actions, global) {
  ids.forEach(id => {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.updateScheduledMessage)(global, chatId, id, {
      isDeleting: true
    });
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
  const isAnimatingAsSnap = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectCanAnimateSnapEffect)(global);
  setTimeout(() => {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.deleteChatScheduledMessages)(global, chatId, ids);
    const scheduledMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_15__.selectChatScheduledMessages)(global, chatId);
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThreadParam)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number));
    (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);
}

/***/ }),

/***/ "./src/global/actions/apiUpdaters/misc.ts":
/*!************************************************!*\
  !*** ./src/global/actions/apiUpdaters/misc.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_localization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/localization */ "./src/util/localization/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");







(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updateEntities':
      {
        const {
          users,
          chats,
          threadInfos,
          polls
        } = update;
        if (users) global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.addUsers)(global, users);
        if (chats) global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.addChats)(global, chats);
        if (threadInfos) global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateThreadInfos)(global, threadInfos);
        if (polls) {
          polls.forEach(poll => {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updatePoll)(global, poll.id, poll);
          });
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
        break;
      }
    case 'updatePeerBlocked':
      if (update.isBlocked) {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.addBlockedUser)(global, update.id);
      } else if (update.isBlockedFromStories) {
        return global; // Unsupported
      } else {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.removeBlockedUser)(global, update.id);
      }
    case 'updateResetContactList':
      global = {
        ...global,
        contactList: {
          userIds: []
        }
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
      break;
    case 'updateConfig':
      actions.loadConfig();
      break;
    case 'updateNewAuthorization':
      {
        // Load more info about this session
        actions.loadAuthorizations();
        break;
      }
    case 'updateFavoriteStickers':
      actions.loadFavoriteStickers();
      break;
    case 'updateRecentStickers':
      actions.loadRecentStickers();
      break;
    case 'updateRecentReactions':
      actions.loadRecentReactions();
      break;
    case 'updateRecentEmojiStatuses':
      actions.loadRecentEmojiStatuses();
      break;
    case 'updateSavedReactionTags':
      actions.loadSavedReactionTags();
      break;
    case 'updateMoveStickerSetToTop':
      {
        const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;
        if (!oldOrder?.some(id => id === update.id)) return global;
        const newOrder = [update.id, ...oldOrder.filter(id => id !== update.id)];
        actions.reorderStickerSets({
          order: newOrder,
          isCustomEmoji: update.isCustomEmoji
        });
        break;
      }
    case 'updateStickerSets':
      actions.loadStickerSets();
      break;
    case 'updateStickerSetsOrder':
      {
        // Filter out invalid set IDs, which may be sent by the server
        const order = update.order.filter(setId => Boolean(global.stickers.setsById[setId]));
        actions.reorderStickerSets({
          order,
          isCustomEmoji: update.isCustomEmoji
        });
        break;
      }
    case 'updateSavedGifs':
      actions.loadSavedGifs();
      break;
    case 'updatePrivacy':
      global = {
        ...global,
        settings: {
          ...global.settings,
          privacy: {
            ...global.settings.privacy,
            [update.key]: update.rules
          }
        }
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
      break;
    case 'updatePaymentVerificationNeeded':
      Object.values(global.byTabId).forEach(({
        id: tabId
      }) => {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.setConfirmPaymentUrl)(global, update.url, tabId);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.setPaymentStep)(global, _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.ConfirmPayment, tabId);
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
      break;
    case 'updateWebViewResultSent':
      Object.values(global.byTabId).forEach(tabState => {
        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {
          if (webApp.queryId === update.queryId) {
            actions.resetDraftReplyInfo({
              tabId: tabState.id
            });
            actions.closeWebApp({
              key: webAppKey,
              tabId: tabState.id
            });
          }
        });
      });
      break;
    case 'updateStory':
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.addStoriesForPeer)(global, update.peerId, {
        [update.story.id]: update.story
      });
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updatePeersWithStories)(global, {
        [update.peerId]: (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPeerStories)(global, update.peerId)
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
      break;
    case 'deleteStory':
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.removePeerStory)(global, update.peerId, update.storyId);
      (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
      break;
    case 'updateReadStories':
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateLastReadStoryForPeer)(global, update.peerId, update.lastReadId);
      (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
      break;
    case 'updateSentStoryReaction':
      {
        const {
          peerId,
          storyId,
          reaction
        } = update;
        const story = (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPeerStory)(global, peerId, storyId);
        if (!story) return global;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updatePeerStory)(global, peerId, storyId, {
          sentReaction: reaction
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
        break;
      }
    case 'updateStealthMode':
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateStealthMode)(global, update.stealthMode);
      (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
      break;
    case 'updateAttachMenuBots':
      actions.loadAttachBots();
      break;
    case 'updatePremiumFloodWait':
      {
        actions.processPremiumFloodWait({
          isUpload: update.isUpload
        });
        break;
      }
    case 'updatePaidReactionPrivacy':
      {
        global = {
          ...global,
          settings: {
            ...global.settings,
            paidReactionPrivacy: update.isPrivate
          }
        };
        (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
        break;
      }
    case 'updateLangPackTooLong':
      {
        (0,_util_localization__WEBPACK_IMPORTED_MODULE_2__.requestLangPackDifference)(update.langCode);
        break;
      }
    case 'updateLangPack':
      {
        (0,_util_localization__WEBPACK_IMPORTED_MODULE_2__.applyLangPackDifference)(update.version, update.strings, update.keysToRemove);
        break;
      }
    case 'newMessage':
      {
        const actionStarGift = update.message.content?.action?.starGift;
        if (!update.message.isOutgoing && update.message.chatId !== _config__WEBPACK_IMPORTED_MODULE_1__.SERVICE_NOTIFICATIONS_USER_ID) return undefined;
        if (actionStarGift?.type !== 'starGiftUnique') return undefined;
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId);
          if (tabState.isWaitingForStarGiftUpgrade) {
            actions.openUniqueGiftBySlug({
              slug: actionStarGift.gift.slug,
              tabId
            });
            actions.showNotification({
              title: {
                key: 'GiftUpgradedTitle'
              },
              message: {
                key: 'GiftUpgradedDescription'
              },
              tabId
            });
            actions.requestConfetti({
              withStars: true,
              tabId
            });
            global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
              isWaitingForStarGiftUpgrade: undefined
            }, tabId);
          }
        });
      }
  }
  return undefined;
});

/***/ }),

/***/ "./src/global/actions/apiUpdaters/payments.ts":
/*!****************************************************!*\
  !*** ./src/global/actions/apiUpdaters/payments.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_formatCurrency__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/formatCurrency */ "./src/util/formatCurrency.tsx");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");






(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updatePaymentStateCompleted':
      {
        const {
          paymentState,
          tabId
        } = update;
        const form = paymentState.form;
        const {
          invoice
        } = form;
        const {
          totalAmount,
          currency
        } = invoice;
        if (paymentState.inputInvoice?.type === 'stars') {
          actions.closeStarsBalanceModal({
            tabId
          });
          actions.showNotification({
            message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),
            title: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsAcquired'),
            icon: 'star',
            tabId
          });
          actions.requestConfetti({
            withStars: true,
            tabId
          });
        } else {
          actions.showNotification({
            tabId,
            message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('PaymentInfoHint', [(0,_util_formatCurrency__WEBPACK_IMPORTED_MODULE_0__.formatCurrencyAsString)(totalAmount, currency, _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.getTranslationFn().code), form.title])
          });
        }
        (0,_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
        break;
      }
    case 'updateStarPaymentStateCompleted':
      {
        const {
          paymentState,
          tabId
        } = update;
        const {
          inputInvoice,
          subscriptionInfo,
          form
        } = paymentState;
        if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {
          const amount = subscriptionInfo.subscriptionPricing.amount;
          actions.showNotification({
            tabId,
            title: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsSubscriptionCompleted'),
            message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsSubscriptionCompletedText', [amount, subscriptionInfo.title], undefined, amount),
            icon: 'star'
          });
        }
        if (form?.invoice.subscriptionPeriod) {
          const amount = form.invoice.totalAmount;
          actions.showNotification({
            tabId,
            title: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsSubscriptionCompleted'),
            message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsSubscriptionCompletedText', [amount, form.title], undefined, amount),
            icon: 'star'
          });
        }
        if (inputInvoice?.type === 'giftcode') {
          if (!inputInvoice.userIds) {
            return;
          }
          const giftModalState = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId).giftModal;
          if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {
            global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
              giftModal: {
                ...giftModalState,
                isCompleted: true
              }
            }, tabId);
          }
        }
        if (inputInvoice?.type === 'starsgift') {
          if (!inputInvoice.userId) {
            return;
          }
          const starsModalState = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId).starsGiftModal;
          if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {
            global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
              starsGiftModal: {
                ...starsModalState,
                isCompleted: true
              }
            }, tabId);
          }
          actions.requestConfetti({
            withStars: true,
            tabId
          });
        }
        break;
      }
    case 'updateStarsBalance':
      {
        const stars = global.stars;
        if (!stars) {
          return;
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateStarsBalance)(global, update.balance);
        (0,_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
        actions.loadStarStatus();
        break;
      }
  }
});

/***/ }),

/***/ "./src/global/actions/apiUpdaters/settings.ts":
/*!****************************************************!*\
  !*** ./src/global/actions/apiUpdaters/settings.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");


(0,_index__WEBPACK_IMPORTED_MODULE_0__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updateNotifySettings':
      {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_1__.updateNotifySettings)(global, update.peerType, update.isSilent, update.shouldShowPreviews);
      }
    case 'updateNotifyExceptions':
      {
        const {
          chatId,
          isMuted,
          isSilent,
          shouldShowPreviews
        } = update;
        const chat = global.chats.byId[chatId];
        if (chat) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_1__.updateChat)(global, chatId, {
            isMuted
          });
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_1__.addNotifyException)(global, chatId, {
          isMuted,
          isSilent,
          shouldShowPreviews
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_0__.setGlobal)(global);
        break;
      }
    case 'updateTopicNotifyExceptions':
      {
        const {
          chatId,
          topicId,
          isMuted
        } = update;
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_1__.updateTopic)(global, chatId, topicId, {
          isMuted
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_0__.setGlobal)(global);
        break;
      }
  }
  return undefined;
});

/***/ }),

/***/ "./src/global/actions/apiUpdaters/symbols.ts":
/*!***************************************************!*\
  !*** ./src/global/actions/apiUpdaters/symbols.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");


(0,_index__WEBPACK_IMPORTED_MODULE_0__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updateStickerSet':
      {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_1__.updateStickerSet)(global, update.id, update.stickerSet);
      }
  }
  return undefined;
});

/***/ }),

/***/ "./src/global/actions/apiUpdaters/twoFaSettings.ts":
/*!*********************************************************!*\
  !*** ./src/global/actions/apiUpdaters/twoFaSettings.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");

(0,_index__WEBPACK_IMPORTED_MODULE_0__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updateTwoFaStateWaitCode':
      {
        return {
          ...global,
          twoFaSettings: {
            ...global.twoFaSettings,
            isLoading: false,
            waitingEmailCodeLength: update.length
          }
        };
      }
    case 'updateTwoFaError':
      {
        return {
          ...global,
          twoFaSettings: {
            ...global.twoFaSettings,
            errorKey: update.messageKey
          }
        };
      }
  }
  return undefined;
});

/***/ }),

/***/ "./src/global/actions/apiUpdaters/users.ts":
/*!*************************************************!*\
  !*** ./src/global/actions/apiUpdaters/users.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_teact_heavyAnimation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/heavyAnimation */ "./src/lib/teact/heavyAnimation.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");




const updateStatusesOnFullyIdle = (0,_lib_teact_heavyAnimation__WEBPACK_IMPORTED_MODULE_0__.throttleWithFullyIdle)(flushStatusUpdates);
let pendingStatusUpdates = {};
function flushStatusUpdates() {
  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global
  let global = (0,_index__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.replaceUserStatuses)(global, {
    ...global.users.statusesById,
    ...pendingStatusUpdates
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  pendingStatusUpdates = {};
}
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'deleteContact':
      {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.deleteContact)(global, update.id);
      }
    case 'updateUser':
      {
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          if ((0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsChatWithSelf)(global, update.id) && update.user.isPremium !== (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsCurrentUserPremium)(global)) {
            if (update.user.isPremium && global.byTabId[tabId].premiumModal) {
              actions.openPremiumModal({
                isSuccess: true,
                tabId
              });
            }

            // Reset translation cache cause premium provides additional formatting
            global = {
              ...global,
              translations: {
                byChatId: {}
              }
            };
          }
        });
        const localUser = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, update.id);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateUser)(global, update.id, update.user);
        if (update.fullInfo) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateUserFullInfo)(global, update.id, update.fullInfo);
        }
        if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updatePeerStoriesHidden)(global, update.id, update.user.areStoriesHidden || false);
        }
        return global;
      }
    case 'updateRequestUserUpdate':
      {
        actions.loadFullUser({
          userId: update.id
        });
        break;
      }
    case 'updateUserEmojiStatus':
      {
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateUser)(global, update.userId, {
          emojiStatus: update.emojiStatus
        });
      }
    case 'updateUserStatus':
      {
        // Status updates come very often so we throttle them
        pendingStatusUpdates[update.userId] = update.status;
        updateStatusesOnFullyIdle();
        return undefined;
      }
    case 'updateUserFullInfo':
      {
        const {
          id,
          fullInfo
        } = update;
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateUserFullInfo)(global, id, fullInfo);
      }
    case 'updateBotMenuButton':
      {
        const {
          botId,
          button
        } = update;
        const targetUserFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUserFullInfo)(global, botId);
        if (!targetUserFullInfo?.botInfo) {
          return undefined;
        }
        return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateUserFullInfo)(global, botId, {
          botInfo: {
            ...targetUserFullInfo.botInfo,
            menuButton: button
          }
        });
      }
  }
  return undefined;
});

/***/ }),

/***/ "./src/global/actions/api/accounts.ts":
/*!********************************************!*\
  !*** ./src/global/actions/api/accounts.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");





(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('reportPeer', async (global, actions, payload) => {
  const {
    chatId,
    reason,
    description,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  if (!chatId) {
    return;
  }
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('reportPeer', {
    peer: chat,
    reason,
    description
  });
  actions.showNotification({
    message: result ? (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate)('ReportPeer.AlertSuccess') : 'An error occurred while submitting your report. Please, try again later.',
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('reportProfilePhoto', async (global, actions, payload) => {
  const {
    chatId,
    reason,
    description,
    photo,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  if (!chatId) {
    return;
  }
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId);
  if (!chat || !photo) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('reportProfilePhoto', {
    peer: chat,
    photo,
    reason,
    description
  });
  actions.showNotification({
    message: result ? (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate)('ReportPeer.AlertSuccess') : 'An error occurred while submitting your report. Please, try again later.',
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadAuthorizations', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchAuthorizations');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = {
    ...global,
    activeSessions: {
      byHash: result.authorizations,
      orderedHashes: Object.keys(result.authorizations),
      ttlDays: result.ttlDays
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('terminateAuthorization', async (global, actions, payload) => {
  const {
    hash
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('terminateAuthorization', hash);
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  const {
    [hash]: removedSessions,
    ...newSessions
  } = global.activeSessions.byHash;
  global = {
    ...global,
    activeSessions: {
      byHash: newSessions,
      orderedHashes: global.activeSessions.orderedHashes.filter(el => el !== hash)
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('terminateAllAuthorizations', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('terminateAllAuthorizations');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  const currentSessionHash = global.activeSessions.orderedHashes.find(hash => global.activeSessions.byHash[hash].isCurrent);
  if (!currentSessionHash) {
    return;
  }
  const currentSession = global.activeSessions.byHash[currentSessionHash];
  global = {
    ...global,
    activeSessions: {
      byHash: {
        [currentSessionHash]: currentSession
      },
      orderedHashes: [currentSessionHash]
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('changeSessionSettings', async (global, actions, payload) => {
  const {
    hash,
    areCallsEnabled,
    areSecretChatsEnabled,
    isConfirmed
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('changeSessionSettings', {
    hash,
    areCallsEnabled,
    areSecretChatsEnabled,
    isConfirmed
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = {
    ...global,
    activeSessions: {
      ...global.activeSessions,
      byHash: {
        ...global.activeSessions.byHash,
        [hash]: {
          ...global.activeSessions.byHash[hash],
          ...(areCallsEnabled !== undefined ? {
            areCallsEnabled
          } : undefined),
          ...(areSecretChatsEnabled !== undefined ? {
            areSecretChatsEnabled
          } : undefined),
          ...(isConfirmed && {
            isUnconfirmed: undefined
          })
        }
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('changeSessionTtl', async (global, actions, payload) => {
  const {
    days
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('changeSessionTtl', {
    days
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = {
    ...global,
    activeSessions: {
      ...global.activeSessions,
      ttlDays: days
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadWebAuthorizations', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchWebAuthorizations');
  if (!result) {
    return;
  }
  const {
    webAuthorizations
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = {
    ...global,
    activeWebSessions: {
      byHash: webAuthorizations,
      orderedHashes: Object.keys(webAuthorizations)
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('terminateWebAuthorization', async (global, actions, payload) => {
  const {
    hash
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('terminateWebAuthorization', hash);
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  const {
    [hash]: removedSessions,
    ...newSessions
  } = global.activeWebSessions.byHash;
  global = {
    ...global,
    activeWebSessions: {
      byHash: newSessions,
      orderedHashes: global.activeWebSessions.orderedHashes.filter(el => el !== hash)
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('terminateAllWebAuthorizations', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('terminateAllWebAuthorizations');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = {
    ...global,
    activeWebSessions: {
      byHash: {},
      orderedHashes: []
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});

/***/ }),

/***/ "./src/global/actions/api/bots.ts":
/*!****************************************!*\
  !*** ./src/global/actions/api/bots.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkIfOpenOrActivate: () => (/* binding */ checkIfOpenOrActivate),
/* harmony export */   isWepAppOpened: () => (/* binding */ isWepAppOpened)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_PopupManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/PopupManager */ "./src/util/PopupManager.ts");
/* harmony import */ var _util_requestActionTimeout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/requestActionTimeout */ "./src/util/requestActionTimeout.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _util_themeStyle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/themeStyle */ "./src/util/themeStyle.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers_bots__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../helpers/bots */ "./src/global/helpers/bots.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_bots__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../reducers/bots */ "./src/global/reducers/bots.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./chats */ "./src/global/actions/api/chats.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");




















const GAMEE_URL = 'https://prizes.gamee.com/';
const TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min
const runDebouncedForSearch = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_8__.debounce)(cb => cb(), 500, false);
let botFatherId;
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('clickBotInlineButton', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    button,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, chatId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChatMessage)(global, chatId, messageId);
  if (!chat || !message) {
    return;
  }
  switch (button.type) {
    case 'command':
      actions.sendBotCommand({
        command: button.text,
        tabId
      });
      break;
    case 'url':
      {
        const {
          url
        } = button;
        actions.openUrl({
          url,
          tabId
        });
        break;
      }
    case 'copy':
      {
        (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_3__.copyTextToClipboard)(button.copyText);
        actions.showNotification({
          message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.oldTranslate)('ExactTextCopied', button.copyText),
          tabId
        });
        break;
      }
    case 'callback':
      {
        void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);
        break;
      }
    case 'requestPoll':
      actions.openPollModal({
        isQuiz: button.isQuiz,
        tabId
      });
      break;
    case 'requestPhone':
      {
        const user = global.currentUserId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, global.currentUserId) : undefined;
        if (!user) {
          return;
        }
        actions.showDialog({
          data: {
            phoneNumber: user.phoneNumber,
            firstName: user.firstName || '',
            lastName: user.lastName || '',
            userId: user.id
          },
          tabId
        });
        break;
      }
    case 'receipt':
      {
        const {
          receiptMessageId
        } = button;
        actions.getReceipt({
          chatId: chat.id,
          messageId: receiptMessageId,
          tabId
        });
        break;
      }
    case 'buy':
      {
        actions.openInvoice({
          type: 'message',
          chatId: chat.id,
          messageId,
          tabId
        });
        break;
      }
    case 'game':
      {
        void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);
        break;
      }
    case 'switchBotInline':
      {
        const {
          query,
          isSamePeer
        } = button;
        actions.switchBotInline({
          query,
          isSamePeer,
          messageId,
          tabId
        });
        break;
      }
    case 'userProfile':
      {
        const {
          userId
        } = button;
        actions.openChatWithInfo({
          id: userId,
          tabId
        });
        break;
      }
    case 'simpleWebView':
      {
        const {
          url
        } = button;
        const sender = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSender)(global, message);
        if (!sender) {
          return;
        }
        const theme = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_10__.extractCurrentThemeParams)();
        actions.requestSimpleWebView({
          url,
          botId: sender.id,
          theme,
          buttonText: button.text,
          tabId
        });
        break;
      }
    case 'webView':
      {
        const {
          url
        } = button;
        const sender = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSender)(global, message);
        const botId = message.viaBotId || sender?.id;
        if (!botId) {
          return;
        }
        const theme = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_10__.extractCurrentThemeParams)();
        actions.requestWebView({
          url,
          botId,
          peerId: chat.id,
          theme,
          buttonText: button.text,
          tabId
        });
        break;
      }
    case 'urlAuth':
      {
        const {
          url
        } = button;
        actions.requestBotUrlAuth({
          chatId: chat.id,
          messageId,
          buttonId: button.buttonId,
          url,
          tabId
        });
        break;
      }
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('sendBotCommand', (global, actions, payload) => {
  const {
    command,
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const chat = chatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, chatId) : (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectCurrentChat)(global, tabId);
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectCurrentMessageList)(global, tabId);
  if (!chat || !currentMessageList) {
    return;
  }
  const {
    threadId
  } = currentMessageList;
  actions.resetDraftReplyInfo({
    tabId
  });
  actions.clearWebPagePreview({
    tabId
  });
  const lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChatLastMessageId)(global, chat.id);
  void sendBotCommand(chat, command, (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectDraft)(global, chat.id, threadId)?.replyInfo, (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSendAs)(global, chat.id), lastMessageId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('restartBot', async (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const {
    currentUserId
  } = global;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectCurrentChat)(global, tabId);
  const bot = currentUserId && (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectBot)(global, chatId);
  if (!currentUserId || !chat || !bot) {
    return;
  }
  const lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChatLastMessageId)(global, chat.id);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('unblockUser', {
    user: bot
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_14__.removeBlockedUser)(global, bot.id);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  void sendBotCommand(chat, '/start', undefined, (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSendAs)(global, chatId), lastMessageId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('loadTopInlineBots', async global => {
  const {
    lastRequestedAt
  } = global.topInlineBots;
  if (lastRequestedAt && (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_9__.getServerTime)() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchTopInlineBots');
  if (!result) {
    return;
  }
  const {
    ids
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = {
    ...global,
    topInlineBots: {
      ...global.topInlineBots,
      userIds: ids,
      lastRequestedAt: (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_9__.getServerTime)()
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('loadTopBotApps', async global => {
  const {
    lastRequestedAt
  } = global.topBotApps;
  if (lastRequestedAt && (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_9__.getServerTime)() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchTopBotApps');
  if (!result) {
    return;
  }
  const {
    ids
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = {
    ...global,
    topBotApps: {
      ...global.topBotApps,
      userIds: ids,
      lastRequestedAt: (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_9__.getServerTime)()
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('queryInlineBot', async (global, actions, payload) => {
  const {
    chatId,
    username,
    query,
    offset,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  let inlineBotData = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId).inlineBots.byUsername[username];
  if (inlineBotData === false) {
    return;
  }
  if (inlineBotData === undefined) {
    const {
      user: inlineBot,
      chat
    } = (await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchInlineBot', {
      username
    })) || {};
    global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
    if (!inlineBot || !chat) {
      global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.replaceInlineBotSettings)(global, username, false, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
      return;
    }
    inlineBotData = {
      id: inlineBot.id,
      query: '',
      offset: '',
      switchPm: undefined,
      canLoadMore: true,
      results: [],
      cacheTime: 0
    };
    global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.replaceInlineBotSettings)(global, username, inlineBotData, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  }
  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {
    return;
  }
  void runDebouncedForSearch(() => {
    searchInlineBot(global, {
      username,
      inlineBotData: inlineBotData,
      chatId,
      query,
      offset
    }, tabId);
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('switchBotInline', (global, actions, payload) => {
  const {
    query,
    isSamePeer,
    messageId,
    filter,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  let {
    botId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectCurrentChat)(global, tabId);
  if (!chat) {
    return undefined;
  }
  if (!botId && messageId) {
    const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChatMessage)(global, chat.id, messageId);
    if (!message) {
      return undefined;
    }
    const sender = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSender)(global, message);
    botId = message.viaBotId || sender?.id;
  }
  if (!botId) {
    return undefined;
  }
  const botSender = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!botSender) {
    return undefined;
  }
  actions.openChatWithDraft({
    text: {
      text: `@${botSender.usernames[0].username} ${query}`
    },
    chatId: isSamePeer ? chat.id : undefined,
    filter,
    tabId
  });
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('sendInlineBotResult', (global, actions, payload) => {
  const {
    id,
    queryId,
    isSilent,
    scheduledAt,
    messageList,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  if (!id) {
    return;
  }
  const {
    chatId,
    threadId
  } = messageList;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, chatId);
  const draftReplyInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectDraft)(global, chatId, threadId)?.replyInfo;
  const replyInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectMessageReplyInfo)(global, chatId, threadId, draftReplyInfo);
  actions.resetDraftReplyInfo({
    tabId
  });
  actions.clearWebPagePreview({
    tabId
  });
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('sendInlineBotResult', {
    chat,
    resultId: id,
    queryId,
    replyInfo,
    sendAs: (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSendAs)(global, chatId),
    isSilent,
    scheduleDate: scheduledAt
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('resetInlineBot', (global, actions, payload) => {
  const {
    username,
    force,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  let inlineBotData = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId).inlineBots.byUsername[username];
  if (!inlineBotData) {
    return;
  }
  if (!force && Date.now() < inlineBotData.cacheTime) return;
  inlineBotData = {
    id: inlineBotData.id,
    query: '',
    offset: '',
    switchPm: undefined,
    canLoadMore: true,
    results: [],
    cacheTime: 0
  };
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.replaceInlineBotSettings)(global, username, inlineBotData, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('resetAllInlineBots', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload || {};
  const inlineBots = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId).inlineBots.byUsername;
  Object.keys(inlineBots).forEach(username => {
    actions.resetInlineBot({
      username,
      tabId
    });
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('startBot', async (global, actions, payload) => {
  const {
    botId,
    param
  } = payload;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) {
    return;
  }
  let fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUserFullInfo)(global, botId);
  if (!fullInfo) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchFullUser', {
      id: bot.id,
      accessHash: bot.accessHash
    });
    fullInfo = result?.fullInfo;
  }
  if (fullInfo?.isBlocked) {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('unblockUser', {
      user: bot
    });
  }
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('startBot', {
    bot,
    startParam: param
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('sharePhoneWithBot', async (global, actions, payload) => {
  const {
    botId
  } = payload;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) {
    return;
  }
  let fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUserFullInfo)(global, botId);
  if (!fullInfo) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchFullUser', {
      id: bot.id,
      accessHash: bot.accessHash
    });
    fullInfo = result?.fullInfo;
  }
  if (fullInfo?.isBlocked) {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('unblockUser', {
      user: bot
    });
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, botId);
  const currentUser = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, global.currentUserId);
  if (!chat) return;
  const lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChatLastMessageId)(global, chat.id);
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('sendMessage', {
    chat,
    contact: {
      mediaType: 'contact',
      firstName: currentUser.firstName || '',
      lastName: currentUser.lastName || '',
      phoneNumber: currentUser.phoneNumber || '',
      userId: currentUser.id
    },
    lastMessageId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('requestSimpleWebView', async (global, actions, payload) => {
  const {
    url,
    botId,
    theme,
    buttonText,
    isFromSideMenu,
    isFromSwitchWebView,
    startParam,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectIsTrustedBot)(global, botId)) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
      botTrustRequest: {
        botId,
        type: 'webApp',
        onConfirm: {
          action: 'requestSimpleWebView',
          payload
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
    return;
  }
  const webViewUrl = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('requestSimpleWebView', {
    url,
    bot,
    theme,
    startParam,
    isFromSideMenu,
    isFromSwitchWebView
  });
  if (!webViewUrl) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  const newActiveApp = {
    requestUrl: url,
    appName: bot.firstName,
    url: webViewUrl,
    botId,
    buttonText
  };
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.addWebAppToOpenList)(global, newActiveApp, true, true, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('requestWebView', async (global, actions, payload) => {
  const {
    url,
    botId,
    peerId,
    theme,
    isSilent,
    buttonText,
    isFromBotMenu,
    startParam,
    isFullscreen,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectPeer)(global, peerId);
  if (!peer) return;
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectIsTrustedBot)(global, botId)) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
      botTrustRequest: {
        botId,
        type: 'webApp',
        onConfirm: {
          action: 'requestWebView',
          payload
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
    return;
  }
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectCurrentMessageList)(global, tabId);
  const {
    chatId,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID
  } = currentMessageList || {};
  const draftReplyInfo = chatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectDraft)(global, chatId, threadId)?.replyInfo : undefined;
  const replyInfo = chatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectMessageReplyInfo)(global, chatId, threadId, draftReplyInfo) : undefined;
  const sendAs = chatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSendAs)(global, chatId) : undefined;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('requestWebView', {
    url,
    bot,
    peer,
    theme,
    isSilent,
    replyInfo,
    isFromBotMenu,
    startParam,
    sendAs,
    isFullscreen
  });
  if (!result) {
    return;
  }
  const {
    url: webViewUrl,
    queryId,
    isFullScreen
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  const newActiveApp = {
    requestUrl: url,
    url: webViewUrl,
    appName: bot.firstName,
    botId,
    peerId,
    queryId,
    replyInfo,
    buttonText
  };
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.addWebAppToOpenList)(global, newActiveApp, true, true, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  if (isFullScreen && (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_19__.getIsWebAppsFullscreenSupported)()) {
    actions.changeWebAppModalState({
      state: 'fullScreen',
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('requestMainWebView', async (global, actions, payload) => {
  const {
    botId,
    peerId,
    theme,
    startParam,
    mode,
    shouldMarkBotTrusted,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  if (checkIfOpenOrActivate(global, botId, tabId)) return;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectPeer)(global, peerId);
  if (!peer) return;
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectIsTrustedBot)(global, botId)) {
    if (shouldMarkBotTrusted) {
      actions.markBotTrusted({
        botId,
        isWriteAllowed: true,
        tabId
      });
    } else {
      global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
        botTrustRequest: {
          botId,
          type: 'webApp',
          onConfirm: {
            action: 'requestMainWebView',
            payload
          }
        }
      }, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
      return;
    }
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('requestMainWebView', {
    bot,
    peer,
    theme,
    startParam,
    mode
  });
  if (!result) {
    return;
  }
  const {
    url: webViewUrl,
    queryId,
    isFullscreen
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  const newActiveApp = {
    url: webViewUrl,
    appName: bot.firstName,
    botId,
    peerId,
    queryId,
    buttonText: ''
  };
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.addWebAppToOpenList)(global, newActiveApp, true, true, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  if (isFullscreen && (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_19__.getIsWebAppsFullscreenSupported)()) {
    actions.changeWebAppModalState({
      state: 'fullScreen',
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('loadPreviewMedias', async (global, actions, payload) => {
  const {
    botId
  } = payload;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;
  const medias = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchPreviewMedias', {
    bot
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  if (medias) {
    global = {
      ...global,
      users: {
        ...global.users,
        previewMediaByBotId: {
          ...global.users.previewMediaByBotId,
          [botId]: medias
        }
      }
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('openWebAppsCloseConfirmationModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    isWebAppsCloseConfirmationModalOpen: true
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('closeWebAppsCloseConfirmationModal', (global, actions, payload) => {
  const {
    shouldSkipInFuture,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload || {};
  global = {
    ...global,
    settings: {
      ...global.settings,
      byKey: {
        ...global.settings.byKey,
        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture)
      }
    }
  };
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    isWebAppsCloseConfirmationModalOpen: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('requestAppWebView', async (global, actions, payload) => {
  const {
    botId,
    appName,
    startApp,
    mode,
    theme,
    isWriteAllowed,
    isFromConfirm,
    shouldSkipBotTrustRequest,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;

  // Native clients require to install attach bots before using their named mini apps
  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);
  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('loadAttachBot', {
      bot
    });
    if (result) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
      const attachBot = result.bot;
      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;
      if (shouldAskForTos) {
        global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
          requestedAttachBotInstall: {
            bot: attachBot,
            onConfirm: {
              action: 'requestAppWebView',
              payload: {
                ...payload,
                isFromConfirm: true
              }
            }
          }
        }, tabId);
        (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
        return;
      }
    }
  }
  const botApp = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchBotApp', {
    bot,
    appName
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  if (!botApp) {
    actions.showNotification({
      message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.oldTranslate)('lng_username_app_not_found'),
      tabId
    });
    return;
  }
  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !(0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectIsTrustedBot)(global, botId));
  if (shouldRequestBotTrust) {
    payload.shouldSkipBotTrustRequest = true;
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
      botTrustRequest: {
        botId,
        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,
        type: 'botApp',
        onConfirm: {
          action: 'requestAppWebView',
          payload
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
    return;
  }
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectCurrentChat)(global, tabId);
  const {
    url,
    isFullscreen
  } = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('requestAppWebView', {
    peer: peer || bot,
    app: botApp,
    startParam: startApp,
    mode,
    isWriteAllowed,
    theme
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  if (!url) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  const peerId = peer ? peer.id : bot.id;
  const newActiveApp = {
    url,
    appName: appName && bot.firstName,
    peerId,
    botId,
    buttonText: ''
  };
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.addWebAppToOpenList)(global, newActiveApp, true, true, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  if (isFullscreen && (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_19__.getIsWebAppsFullscreenSupported)()) {
    actions.changeWebAppModalState({
      state: 'fullScreen',
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('prolongWebView', async (global, actions, payload) => {
  const {
    botId,
    peerId,
    isSilent,
    replyInfo,
    queryId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, peerId);
  if (!peer) return;
  const sendAs = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectSendAs)(global, peerId);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('prolongWebView', {
    bot,
    peer,
    isSilent,
    replyInfo,
    queryId,
    sendAs
  });
  if (!result) {
    actions.closeActiveWebApp({
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('sendWebViewData', (global, actions, payload) => {
  const {
    bot,
    data,
    buttonText
  } = payload;
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('sendWebViewData', {
    bot,
    data,
    buttonText
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('loadAttachBots', async global => {
  await loadAttachBots(global);
  (0,_util_requestActionTimeout__WEBPACK_IMPORTED_MODULE_7__["default"])({
    action: 'loadAttachBots',
    payload: undefined
  }, _config__WEBPACK_IMPORTED_MODULE_2__.GENERAL_REFETCH_INTERVAL);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('toggleAttachBot', async (global, actions, payload) => {
  const {
    botId,
    isWriteAllowed,
    isEnabled
  } = payload;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('toggleAttachBot', {
    bot,
    isWriteAllowed,
    isEnabled
  });
});
function isWepAppOpened(global, webApp, tabId) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId);
  const openedWebApps = currentTabState.webApps.openedWebApps;
  const key = (0,_helpers_bots__WEBPACK_IMPORTED_MODULE_12__.getWebAppKey)(webApp);
  if (!key) return false;
  return openedWebApps[key];
}
function checkIfOpenOrActivate(global, botId, tabId, requestUrl, webAppName) {
  const webAppForCheck = {
    botId,
    requestUrl,
    webAppName
  };
  if (isWepAppOpened(global, webAppForCheck, tabId)) {
    const key = (0,_helpers_bots__WEBPACK_IMPORTED_MODULE_12__.getWebAppKey)(webAppForCheck);
    if (key) {
      global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.activateWebAppIfOpen)(global, key, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
    }
    return true;
  }
  return false;
}
async function loadAttachBots(global, hash) {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('loadAttachBots', {
    hash
  });
  if (!result) {
    return undefined;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = {
    ...global,
    attachMenu: {
      hash: result.hash,
      bots: result.bots
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  return result;
}
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('callAttachBot', (global, actions, payload) => {
  const {
    bot,
    startParam,
    isFromConfirm,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;
  const isFromBotMenu = !bot;
  const shouldDisplayDisclaimer = !isFromBotMenu && !global.attachMenu.bots[bot.id] || bot?.isInactive || bot?.isDisclaimerNeeded;
  if (!isFromConfirm && shouldDisplayDisclaimer) {
    return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
      requestedAttachBotInstall: {
        bot,
        onConfirm: {
          action: 'callAttachBot',
          payload: {
            ...payload,
            isFromConfirm: true
          }
        }
      }
    }, tabId);
  }
  const theme = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_10__.extractCurrentThemeParams)();
  if (isFromSideMenu) {
    actions.requestSimpleWebView({
      botId: bot.id,
      buttonText: '',
      isFromSideMenu: true,
      startParam,
      theme,
      tabId
    });
  }
  if ('chatId' in payload) {
    const {
      chatId,
      threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
      url
    } = payload;
    actions.openThread({
      chatId,
      threadId,
      tabId
    });
    actions.requestWebView({
      url,
      peerId: chatId,
      botId: isFromBotMenu ? chatId : bot.id,
      theme,
      buttonText: '',
      isFromBotMenu,
      startParam,
      tabId
    });
  }
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('confirmAttachBotInstall', async (global, actions, payload) => {
  const {
    isWriteAllowed,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const {
    requestedAttachBotInstall
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId);
  const {
    bot,
    onConfirm
  } = requestedAttachBotInstall;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    requestedAttachBotInstall: undefined
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  const botUser = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, bot.id);
  if (!botUser) return;
  actions.markBotTrusted({
    botId: bot.id,
    isWriteAllowed,
    tabId
  });
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('toggleAttachBot', {
    bot: botUser,
    isWriteAllowed,
    isEnabled: true
  });
  if (onConfirm) {
    const {
      action,
      payload: actionPayload
    } = onConfirm;
    // @ts-ignore
    actions[action](actionPayload);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('requestBotUrlAuth', async (global, actions, payload) => {
  const {
    chatId,
    buttonId,
    messageId,
    url,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('requestBotUrlAuth', {
    chat,
    buttonId,
    messageId
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    urlAuth: {
      url,
      button: {
        buttonId,
        messageId,
        chatId: chat.id
      }
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  handleUrlAuthResult(global, actions, url, result, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('acceptBotUrlAuth', async (global, actions, payload) => {
  const {
    isWriteAllowed,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId);
  if (!tabState.urlAuth?.button) return;
  const {
    button,
    url
  } = tabState.urlAuth;
  const {
    chatId,
    messageId,
    buttonId
  } = button;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('acceptBotUrlAuth', {
    chat,
    messageId,
    buttonId,
    isWriteAllowed
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  handleUrlAuthResult(global, actions, url, result, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('requestLinkUrlAuth', async (global, actions, payload) => {
  const {
    url,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('requestLinkUrlAuth', {
    url
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    urlAuth: {
      url
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  handleUrlAuthResult(global, actions, url, result, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('acceptLinkUrlAuth', async (global, actions, payload) => {
  const {
    isWriteAllowed,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId);
  if (!tabState.urlAuth?.url) return;
  const {
    url
  } = tabState.urlAuth;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('acceptLinkUrlAuth', {
    url,
    isWriteAllowed
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  handleUrlAuthResult(global, actions, url, result, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('closeUrlAuthModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    urlAuth: undefined
  }, tabId);
});
function handleUrlAuthResult(global, actions, url, result, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()]) {
  if (result.type === 'request') {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
    const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId);
    if (!tabState.urlAuth) return;
    const {
      domain,
      bot,
      shouldRequestWriteAccess
    } = result;
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
      urlAuth: {
        ...tabState.urlAuth,
        request: {
          domain,
          botId: bot.id,
          shouldRequestWriteAccess
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
    return;
  }
  const siteUrl = result.type === 'accepted' ? result.url : url;
  window.open(siteUrl, '_blank', 'noopener');
  actions.closeUrlAuthModal({
    tabId
  });
}
async function searchInlineBot(global, {
  username,
  inlineBotData,
  chatId,
  query,
  offset
}, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()]) {
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, inlineBotData.id);
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectChat)(global, chatId);
  if (!bot || !chat) {
    return;
  }
  const shouldReplaceSettings = inlineBotData.query !== query;
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.replaceInlineBotsIsLoading)(global, true, tabId);
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.replaceInlineBotSettings)(global, username, {
    ...inlineBotData,
    query,
    ...(shouldReplaceSettings && {
      offset: undefined,
      results: []
    })
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('fetchInlineBotResults', {
    bot,
    chat,
    query,
    offset: shouldReplaceSettings ? undefined : offset
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  const newInlineBotData = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId).inlineBots.byUsername[username];
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.replaceInlineBotsIsLoading)(global, false, tabId);
  if (!result || !newInlineBotData || query !== newInlineBotData.query) {
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
    return;
  }
  const currentIds = new Set((newInlineBotData.results || []).map(data => data.id));
  const newResults = result.results.filter(data => !currentIds.has(data.id));
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_15__.replaceInlineBotSettings)(global, username, {
    ...newInlineBotData,
    help: result.help,
    cacheTime: Date.now() + result.cacheTime * 1000,
    ...(newResults.length && {
      isGallery: result.isGallery
    }),
    ...(result.switchPm && {
      switchPm: result.switchPm
    }),
    ...(result.switchWebview && {
      switchWebview: result.switchWebview
    }),
    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),
    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset ? result.results : (newInlineBotData.results || []).concat(newResults),
    offset: newResults.length ? result.nextOffset : ''
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
}
async function sendBotCommand(chat, command, replyInfo, sendAs, lastMessageId) {
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('sendMessage', {
    chat,
    replyInfo,
    text: command,
    sendAs,
    lastMessageId
  });
}
let gameePopups;
async function answerCallbackButton(global, actions, chat, messageId, data, isGame = false, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()]) {
  const {
    showDialog,
    showNotification,
    openUrl,
    openGame
  } = actions;
  if (isGame) {
    if (!gameePopups) {
      gameePopups = new _util_PopupManager__WEBPACK_IMPORTED_MODULE_6__["default"]('popup,width=800,height=600', () => {
        showNotification({
          message: 'Allow browser to open popup window',
          tabId
        });
      });
    }
    gameePopups.preOpenIfNeeded();
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('answerCallbackButton', {
    chatId: chat.id,
    accessHash: chat.accessHash,
    messageId,
    data,
    isGame
  });
  if (!result) {
    return;
  }
  const {
    message,
    alert: isError,
    url
  } = result;
  if (isError) {
    showDialog({
      data: {
        message: message || 'Error'
      },
      tabId
    });
  } else if (message) {
    showNotification({
      message,
      tabId
    });
  } else if (url) {
    if (isGame) {
      // Workaround for Gamee embedding bug
      if (url.includes(GAMEE_URL)) {
        gameePopups.open(url);
      } else {
        gameePopups.cancelPreOpen();
        openGame({
          url,
          chatId: chat.id,
          messageId,
          tabId
        });
      }
    } else {
      openUrl({
        url,
        tabId
      });
    }
  }
}
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('setBotInfo', async (global, actions, payload) => {
  const {
    bot,
    name,
    description: about,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  let {
    langCode
  } = payload;
  if (!langCode) langCode = global.settings.byKey.language;
  const {
    currentUserId
  } = global;
  if (!currentUserId || !bot) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_14__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_1__.ManagementProgress.InProgress, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  if (name || about) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('setBotInfo', {
      bot,
      langCode,
      name,
      about
    });
    if (result) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_14__.updateUser)(global, bot.id, {
        firstName: name
      });
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_14__.updateUserFullInfo)(global, bot.id, {
        bio: about
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
    }
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_14__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_1__.ManagementProgress.Complete, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('toggleUserEmojiStatusPermission', async (global, actions, payload) => {
  const {
    botId,
    isEnabled,
    isBotAccessEmojiGranted
  } = payload;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectBot)(global, botId);
  if (!botId || !bot) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_11__.callApi)('toggleUserEmojiStatusPermission', {
    bot,
    isEnabled
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_14__.updateUserFullInfo)(global, botId, {
    isBotCanManageEmojiStatus: isEnabled,
    isBotAccessEmojiGranted
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('toggleUserLocationPermission', (global, actions, payload) => {
  const {
    botId,
    isAccessGranted
  } = payload;
  const bot = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectUser)(global, botId);
  if (!bot) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_14__.updateBotAppPermissions)(global, bot.id, {
    geolocation: isAccessGranted
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('startBotFatherConversation', async (global, actions, payload) => {
  const {
    param,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  if (!botFatherId) {
    const chat = await (0,_chats__WEBPACK_IMPORTED_MODULE_18__.fetchChatByUsername)(global, _config__WEBPACK_IMPORTED_MODULE_2__.BOT_FATHER_USERNAME);
    if (!chat) {
      return;
    }
    botFatherId = chat.id;
  }
  if (param) {
    actions.startBot({
      botId: botFatherId,
      param
    });
  }
  actions.openChat({
    id: botFatherId,
    tabId
  });
});

/***/ }),

/***/ "./src/global/actions/api/globalSearch.ts":
/*!************************************************!*\
  !*** ./src/global/actions/api/globalSearch.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_deepLinkParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/deepLinkParser */ "./src/util/deepLinkParser.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers_chats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../helpers/chats */ "./src/global/helpers/chats.ts");
/* harmony import */ var _helpers_peers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../helpers/peers */ "./src/global/helpers/peers.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");











const searchThrottled = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.throttle)(cb => cb(), 500, false);
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('setGlobalSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload;
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).globalSearch;
  if (query && !chatId) {
    void searchThrottled(async () => {
      const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('searchChats', {
        query
      });
      global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
      const currentSearchQuery = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentGlobalSearchQuery)(global, tabId);
      if (!result || !currentSearchQuery || query !== currentSearchQuery) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchFetchingStatus)(global, {
          chats: false
        }, tabId);
        (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
        return;
      }
      const {
        accountResultIds,
        globalResultIds
      } = result;
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchFetchingStatus)(global, {
        chats: false
      }, tabId);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearch)(global, {
        localResults: {
          peerIds: accountResultIds
        },
        globalResults: {
          ...(0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).globalSearch.globalResults,
          peerIds: globalResultIds
        }
      }, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('setGlobalSearchDate', (global, actions, payload) => {
  const {
    date,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload;
  const maxDate = date ? (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__.timestampPlusDay)(date) : date;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearch)(global, {
    minDate: date,
    maxDate,
    query: '',
    resultsByType: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).globalSearch.resultsByType,
      text: {
        totalCount: undefined,
        foundIds: [],
        nextOffsetId: 0
      }
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
  actions.searchMessagesGlobal({
    type: 'text',
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('searchMessagesGlobal', (global, actions, payload) => {
  const {
    type,
    context,
    shouldResetResultsByType,
    shouldCheckFetchingMessagesStatus,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload;
  if (shouldCheckFetchingMessagesStatus) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchFetchingStatus)(global, {
      messages: true
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  }
  const {
    query,
    resultsByType,
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).globalSearch;
  const {
    totalCount,
    foundIds,
    nextOffsetId,
    nextOffsetPeerId,
    nextOffsetRate
  } = !shouldResetResultsByType && resultsByType?.[type] || {};

  // Stop loading if we have all the messages or server returned 0
  if (totalCount !== undefined && (!totalCount || foundIds && foundIds.length >= totalCount)) {
    return;
  }
  const chat = chatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectPeer)(global, chatId) : undefined;
  const offsetPeer = nextOffsetPeerId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectPeer)(global, nextOffsetPeerId) : undefined;
  searchMessagesGlobal(global, {
    query,
    type,
    context,
    shouldResetResultsByType,
    offsetRate: nextOffsetRate,
    offsetId: nextOffsetId,
    offsetPeer,
    peer: chat,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('searchPopularBotApps', async (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload || {};
  const popularBotApps = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).globalSearch.popularBotApps;
  const offset = popularBotApps?.nextOffset;
  if (popularBotApps?.peerIds && !offset) return; // Already fetched all

  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchFetchingStatus)(global, {
    botApps: true
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('fetchPopularAppBots', {
    offset
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  if (!result) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchFetchingStatus)(global, {
      botApps: false
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearch)(global, {
    popularBotApps: {
      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],
      nextOffset: result.nextOffset
    }
  }, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchFetchingStatus)(global, {
    botApps: false
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
});
async function searchMessagesGlobal(global, params) {
  const {
    query = '',
    type,
    context,
    offsetRate,
    offsetId,
    offsetPeer,
    peer,
    maxDate,
    minDate,
    shouldResetResultsByType,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = params;
  let result;
  let messageLink;
  if (peer) {
    const inChatResultRequest = (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('searchMessagesInChat', {
      peer,
      query,
      type,
      limit: _config__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_SEARCH_SLICE,
      offsetId,
      minDate,
      maxDate
    });
    const isChat = (0,_helpers_peers__WEBPACK_IMPORTED_MODULE_7__.isApiPeerChat)(peer);
    const topicsRequest = isChat && peer.isForum ? (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('fetchTopics', {
      chat: peer,
      query,
      limit: _config__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_TOPIC_SEARCH_SLICE
    }) : undefined;
    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);
    if (inChatResult) {
      const {
        messages,
        totalCount,
        nextOffsetId
      } = inChatResult;
      const {
        topics: localTopics,
        count
      } = topics || {};
      result = {
        topics: localTopics,
        totalTopicsCount: count,
        messages,
        totalCount,
        nextOffsetId
      };
    }
  } else {
    result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('searchMessagesGlobal', {
      query,
      offsetRate,
      offsetId,
      offsetPeer,
      limit: _config__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_SEARCH_SLICE,
      type,
      context,
      maxDate,
      minDate
    });
    if ((0,_util_deepLinkParser__WEBPACK_IMPORTED_MODULE_2__.isDeepLink)(query)) {
      const link = (0,_util_deepLinkParser__WEBPACK_IMPORTED_MODULE_2__.tryParseDeepLink)(query);
      if (link?.type === 'publicMessageLink') {
        messageLink = await getMessageByPublicLink(global, link);
      } else if (link?.type === 'privateMessageLink') {
        messageLink = await getMessageByPrivateLink(global, link);
      }
    }
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  if (shouldResetResultsByType) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearch)(global, {
      resultsByType: {
        ...((0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).globalSearch || {}).resultsByType,
        [type]: undefined
      }
    }, tabId);
  }
  const currentSearchQuery = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentGlobalSearchQuery)(global, tabId);
  if (!result || query !== '' && query !== currentSearchQuery) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchFetchingStatus)(global, {
      messages: false
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    return;
  }
  if (messageLink) {
    result.totalCount = result.messages.unshift(messageLink);
  }
  const {
    messages,
    userStatusesById,
    totalCount,
    nextOffsetRate,
    nextOffsetId,
    nextOffsetPeerId
  } = result;
  if (userStatusesById) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addUserStatuses)(global, userStatusesById);
  }
  if (messages.length) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addMessages)(global, messages);
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearchResults)(global, messages, totalCount, type, nextOffsetRate, nextOffsetId, nextOffsetPeerId, tabId);
  if (result.topics) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateTopics)(global, peer.id, result.totalTopicsCount, result.topics);
  }
  const sortedTopics = result.topics?.map(({
    id
  }) => id).sort((a, b) => b - a);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateGlobalSearch)(global, {
    foundTopicIds: sortedTopics
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
}
async function getMessageByPublicLink(global, link) {
  const {
    username,
    messageId
  } = link;
  const localChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatByUsername)(global, username);
  if (localChat) {
    return getChatGroupOrChannelMessage(global, localChat, messageId);
  }
  const {
    chat
  } = (await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('getChatByUsername', username)) ?? {};
  if (!chat) {
    return undefined;
  }
  return getChatGroupOrChannelMessage(global, chat, messageId);
}
function getMessageByPrivateLink(global, link) {
  const {
    channelId,
    messageId
  } = link;
  const internalChannelId = (0,_helpers_chats__WEBPACK_IMPORTED_MODULE_6__.toChannelId)(channelId);
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, internalChannelId);
  if (!chat) {
    return undefined;
  }
  return getChatGroupOrChannelMessage(global, chat, messageId);
}
async function getChatGroupOrChannelMessage(global, chat, messageId) {
  if (!(0,_helpers_chats__WEBPACK_IMPORTED_MODULE_6__.isChatGroup)(chat) && !(0,_helpers_chats__WEBPACK_IMPORTED_MODULE_6__.isChatChannel)(chat)) {
    return undefined;
  }
  const localMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatMessage)(global, chat.id, messageId);
  if (localMessage) {
    return localMessage;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('fetchMessage', {
    chat,
    messageId
  });
  return result === 'MESSAGE_DELETED' ? undefined : result?.message;
}

/***/ }),

/***/ "./src/global/actions/api/management.ts":
/*!**********************************************!*\
  !*** ./src/global/actions/api/management.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chats */ "./src/global/actions/api/chats.ts");









(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('checkPublicLink', async (global, actions, payload) => {
  const {
    username,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    return;
  }

  // No need to check the username if already in progress
  if ((0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId).management.progress === _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.InProgress) {
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    isUsernameAvailable: undefined,
    checkedUsername: undefined
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
  const {
    result,
    error
  } = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('checkChatUsername', {
    username
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress)(global, result === true ? _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Complete : _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Error, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    isUsernameAvailable: result === true,
    checkedUsername: username,
    error
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
  if (result === undefined) {
    actions.openLimitReachedModal({
      limit: 'channelsPublic',
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('updatePublicLink', async (global, actions, payload) => {
  const {
    username,
    shouldDisableUsernames,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    return;
  }
  const chat = await (0,_chats__WEBPACK_IMPORTED_MODULE_8__.ensureIsSuperGroup)(global, actions, chatId, tabId);
  if (!chat) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.InProgress, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('setChatUsername', {
    chat,
    username
  });
  if (shouldDisableUsernames) {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('deactivateAllUsernames', {
      chat
    });
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress)(global, result ? _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Complete : _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Error, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chat.id, {
    isUsernameAvailable: undefined,
    checkedUsername: undefined,
    error: undefined
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('updatePrivateLink', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMessageList)(global, tabId) || {};
  const chat = chatId && (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!chatId || !chat) {
    return;
  }
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('updatePrivateLink', {
    chat
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('setEditingExportedInvite', (global, actions, payload) => {
  const {
    chatId,
    invite,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    editingInvite: invite
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('setOpenedInviteInfo', (global, actions, payload) => {
  const {
    chatId,
    invite,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const update = invite ? {
    inviteInfo: {
      invite
    }
  } : {
    inviteInfo: undefined
  };
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, update, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('loadExportedChatInvites', async (global, actions, payload) => {
  const {
    chatId,
    adminId,
    isRevoked,
    limit,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  const admin = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, adminId || global.currentUserId);
  if (!peer || !admin) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('fetchExportedChatInvites', {
    peer,
    admin,
    isRevoked,
    limit
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const {
    invites
  } = result;
  const update = isRevoked ? {
    revokedInvites: invites
  } : {
    invites
  };
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, update, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('editExportedChatInvite', async (global, actions, payload) => {
  const {
    chatId,
    link,
    isRevoked,
    expireDate,
    usageLimit,
    isRequestNeeded,
    title,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!peer) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('editExportedChatInvite', {
    peer,
    link,
    isRevoked,
    expireDate,
    usageLimit,
    isRequestNeeded,
    title
  });
  if (!result) {
    return;
  }
  const {
    oldInvite,
    newInvite
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const {
    management
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId);
  const invites = (management.byChatId[chatId].invites || []).filter(current => current.link !== oldInvite.link);
  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];
  if (newInvite.isRevoked) {
    revokedInvites.unshift(newInvite);
  } else {
    invites.push(newInvite);
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    invites,
    revokedInvites
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('exportChatInvite', async (global, actions, payload) => {
  const {
    chatId,
    expireDate,
    usageLimit,
    isRequestNeeded,
    title,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!peer) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('exportChatInvite', {
    peer,
    expireDate,
    usageLimit,
    isRequestNeeded,
    title
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const invites = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId).management.byChatId[chatId].invites || [];
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    invites: [...invites, result]
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('deleteExportedChatInvite', async (global, actions, payload) => {
  const {
    chatId,
    link,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!peer) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('deleteExportedChatInvite', {
    peer,
    link
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const managementState = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId).management.byChatId[chatId];
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    invites: managementState?.invites?.filter(invite => invite.link !== link),
    revokedInvites: managementState?.revokedInvites?.filter(invite => invite.link !== link)
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('deleteRevokedExportedChatInvites', async (global, actions, payload) => {
  const {
    chatId,
    adminId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  const admin = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, adminId || global.currentUserId);
  if (!peer || !admin) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('deleteRevokedExportedChatInvites', {
    peer,
    admin
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    revokedInvites: []
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('loadChatInviteImporters', async (global, actions, payload) => {
  const {
    chatId,
    link,
    offsetDate,
    offsetUserId,
    limit,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  const offsetUser = offsetUserId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, offsetUserId) : undefined;
  if (!peer || offsetUserId && !offsetUser) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('fetchChatInviteImporters', {
    peer,
    link,
    offsetDate,
    offsetUser,
    limit
  });
  if (!result) {
    return;
  }
  const {
    importers
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const currentInviteInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId).management.byChatId[chatId]?.inviteInfo;
  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    inviteInfo: {
      ...currentInviteInfo,
      importers
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('loadChatInviteRequesters', async (global, actions, payload) => {
  const {
    chatId,
    link,
    offsetDate,
    offsetUserId,
    limit,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  const offsetUser = offsetUserId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, offsetUserId) : undefined;
  if (!peer || offsetUserId && !offsetUser) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('fetchChatInviteImporters', {
    peer,
    link,
    offsetDate,
    offsetUser,
    limit,
    isRequested: true
  });
  if (!result) {
    return;
  }
  const {
    importers
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const currentInviteInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId).management.byChatId[chatId]?.inviteInfo;
  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    inviteInfo: {
      ...currentInviteInfo,
      requesters: importers
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('loadChatJoinRequests', async (global, actions, payload) => {
  const {
    chatId,
    offsetDate = 0,
    offsetUserId,
    limit = 0
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  const offsetUser = offsetUserId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, offsetUserId) : undefined;
  if (!peer || offsetUserId && !offsetUser) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('fetchChatInviteImporters', {
    peer,
    offsetDate,
    offsetUser,
    limit,
    isRequested: true
  });
  if (!result) {
    return;
  }
  const {
    importers
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChat)(global, chatId, {
    joinRequests: importers
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('hideChatJoinRequest', async (global, actions, payload) => {
  const {
    chatId,
    userId,
    isApproved
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, userId);
  if (!peer || !user) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('hideChatJoinRequest', {
    peer,
    user,
    isApproved
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const targetChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!targetChat) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChat)(global, chatId, {
    joinRequests: targetChat.joinRequests?.filter(importer => importer.userId !== userId)
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('hideAllChatJoinRequests', async (global, actions, payload) => {
  const {
    chatId,
    isApproved,
    link
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!peer) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('hideAllChatJoinRequests', {
    peer,
    isApproved,
    link
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  const targetChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!targetChat) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChat)(global, chatId, {
    joinRequests: []
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChatFullInfo)(global, chatId, {
    recentRequesterIds: [],
    requestsPending: 0
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('hideChatReportPane', async (global, actions, payload) => {
  const {
    chatId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
  if (!chat) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('hideChatReportPane', chat);
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateChat)(global, chatId, {
    settings: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('uploadContactProfilePhoto', async (global, actions, payload) => {
  const {
    userId,
    file,
    isSuggest,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, userId);
  if (!user) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.InProgress, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('uploadContactProfilePhoto', {
    user,
    file,
    isSuggest
  });
  if (!result) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Error, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
  const {
    id,
    accessHash
  } = user;
  const newUser = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_3__.callApi)('fetchFullUser', {
    id,
    accessHash
  });
  if (!newUser) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Error, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
    return;
  }
  actions.loadMoreProfilePhotos({
    peerId: userId,
    shouldInvalidateCache: true
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Complete, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
  if (file && !isSuggest) {
    actions.showNotification({
      message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_2__.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', (0,_helpers__WEBPACK_IMPORTED_MODULE_4__.getUserFirstOrLastName)(user)),
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('resetManagementError', (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.updateManagement)(global, chatId, {
    error: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/api/messages.ts":
/*!********************************************!*\
  !*** ./src/global/actions/api/messages.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _util_deepLinkParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/deepLinkParser */ "./src/util/deepLinkParser.ts");
/* harmony import */ var _util_ensureProtocol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/ensureProtocol */ "./src/util/ensureProtocol.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _helpers_peers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../helpers/peers */ "./src/global/helpers/peers.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _apiUpdaters_messages__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../apiUpdaters/messages */ "./src/global/actions/apiUpdaters/messages.ts");




















const AUTOLOGIN_TOKEN_KEY = 'autologin_token';
const uploadProgressCallbacks = new Map();
const runDebouncedForMarkRead = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_10__.debounce)(cb => cb(), 500, false);
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadViewportMessages', (global, actions, payload) => {
  const {
    direction = _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around,
    isBudgetPreload = false,
    shouldForceRender = false,
    onLoaded,
    onError,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  let {
    chatId,
    threadId
  } = payload || {};
  if (!chatId || !threadId) {
    const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
    if (!currentMessageList) {
      onError?.();
      return;
    }
    chatId = currentMessageList.chatId;
    threadId = currentMessageList.threadId;
  }
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  // TODO Revise if `chat.isRestricted` check is needed
  if (!chat || chat.isRestricted) {
    onError?.();
    return;
  }
  const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectViewportIds)(global, chatId, threadId, tabId);
  const listedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectListedIds)(global, chatId, threadId);
  if (!viewportIds || !viewportIds.length || direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around) {
    const offsetId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectFocusedMessageId)(global, chatId, tabId) || (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectRealLastReadId)(global, chatId, threadId);
    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));
    const historyIds = (isOutlying ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectOutlyingListByMessageId)(global, chatId, threadId, offsetId) : listedIds) || [];
    const {
      newViewportIds,
      areSomeLocal,
      areAllLocal
    } = getViewportSlice(historyIds, offsetId, _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around);
    if (areSomeLocal) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.safeReplaceViewportIds)(global, chatId, threadId, newViewportIds, tabId);
    }
    if (!areAllLocal) {
      (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_10__.onTickEnd)(() => {
        void loadViewportMessages(global, chat, threadId, offsetId, _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId);
      });
    } else {
      onLoaded?.();
    }
  } else {
    const offsetId = direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];

    // Prevent requests with local offsets
    if ((0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_8__.isLocalMessageId)(offsetId)) return;

    // Prevent unnecessary requests in threads
    if (offsetId === threadId && direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards) return;
    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));
    const historyIds = isOutlying ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectOutlyingListByMessageId)(global, chatId, threadId, offsetId) : listedIds;
    if (historyIds?.length) {
      const {
        newViewportIds,
        areSomeLocal,
        areAllLocal
      } = getViewportSlice(historyIds, offsetId, direction);
      if (areSomeLocal) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.safeReplaceViewportIds)(global, chatId, threadId, newViewportIds, tabId);
      }
      (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_10__.onTickEnd)(() => {
        void loadWithBudget(global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId, onLoaded, tabId);
      });
    }
    if (isBudgetPreload) {
      return;
    }
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global, {
    forceOnHeavyAnimation: shouldForceRender
  });
});
async function loadWithBudget(global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId, onLoaded, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()]) {
  if (!areAllLocal) {
    await loadViewportMessages(global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId);
  }
  if (!isBudgetPreload) {
    actions.loadViewportMessages({
      chatId: chat.id,
      threadId,
      direction,
      isBudgetPreload: true,
      onLoaded,
      tabId
    });
  }
}
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadMessage', async (global, actions, payload) => {
  const {
    chatId,
    messageId,
    replyOriginForId,
    threadUpdate
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const message = await loadMessage(global, chat, messageId, replyOriginForId);
  if (message && threadUpdate) {
    const {
      lastMessageId,
      isDeleting
    } = threadUpdate;
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateThreadUnreadFromForwardedMessage)(global, message, chatId, lastMessageId, isDeleting);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('sendMessage', (global, actions, payload) => {
  const {
    messageList,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const {
    storyId,
    peerId: storyPeerId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentViewedStory)(global, tabId);
  const isStoryReply = Boolean(storyId && storyPeerId);
  if (!messageList && !isStoryReply) {
    return undefined;
  }
  let {
    chatId,
    threadId,
    type
  } = messageList || {};
  if (isStoryReply) {
    chatId = storyPeerId;
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
    type = 'thread';
  }
  payload = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.omit)(payload, ['tabId']);
  if (type === 'scheduled' && !payload.scheduledAt) {
    return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
      contentToBeScheduled: payload
    }, tabId);
  }
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const draft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, chatId, threadId);
  const isForwarding = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).forwardMessages?.messageIds?.length;
  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;
  const storyReplyInfo = isStoryReply ? {
    type: 'story',
    peerId: storyPeerId,
    storyId: storyId
  } : undefined;
  const messageReplyInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectMessageReplyInfo)(global, chatId, threadId, draftReplyInfo);
  const replyInfo = storyReplyInfo || messageReplyInfo;
  const lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatLastMessageId)(global, chatId);
  const params = {
    ...payload,
    chat,
    replyInfo,
    noWebPage: (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectNoWebPage)(global, chatId, threadId),
    sendAs: (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectSendAs)(global, chatId),
    lastMessageId
  };
  if (!isStoryReply) {
    actions.clearWebPagePreview({
      tabId
    });
  }
  const isSingle = !payload.attachments || payload.attachments.length <= 1;
  const isGrouped = !isSingle && payload.shouldGroupMessages;
  if (isSingle) {
    const {
      attachments,
      ...restParams
    } = params;
    sendMessage(global, {
      ...restParams,
      attachment: attachments ? attachments[0] : undefined,
      wasDrafted: Boolean(draft)
    });
  } else if (isGrouped) {
    const {
      text,
      entities,
      attachments,
      ...commonParams
    } = params;
    const byType = splitAttachmentsByType(attachments);
    let hasSentCaption = false;
    byType.forEach((group, groupIndex) => {
      const groupedAttachments = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.split)(group, _config__WEBPACK_IMPORTED_MODULE_2__.MAX_MEDIA_FILES_FOR_ALBUM);
      for (let i = 0; i < groupedAttachments.length; i++) {
        const groupedId = `${Date.now()}${groupIndex}${i}`;
        const isFirst = i === 0 && groupIndex === 0;
        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;
        if (group[0].quick && !group[0].shouldSendAsFile) {
          const [firstAttachment, ...restAttachments] = groupedAttachments[i];
          sendMessage(global, {
            ...commonParams,
            text: isFirst && !hasSentCaption ? text : undefined,
            entities: isFirst && !hasSentCaption ? entities : undefined,
            attachment: firstAttachment,
            groupedId: restAttachments.length > 0 ? groupedId : undefined,
            wasDrafted: Boolean(draft)
          });
          hasSentCaption = true;
          restAttachments.forEach(attachment => {
            sendMessage(global, {
              ...commonParams,
              attachment,
              groupedId
            });
          });
        } else {
          const firstAttachments = groupedAttachments[i].slice(0, -1);
          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];
          firstAttachments.forEach(attachment => {
            sendMessage(global, {
              ...commonParams,
              attachment,
              groupedId
            });
          });
          sendMessage(global, {
            ...commonParams,
            text: isLast && !hasSentCaption ? text : undefined,
            entities: isLast && !hasSentCaption ? entities : undefined,
            attachment: lastAttachment,
            groupedId: firstAttachments.length > 0 ? groupedId : undefined,
            wasDrafted: Boolean(draft)
          });
          hasSentCaption = true;
        }
      }
    });
  } else {
    const {
      text,
      entities,
      attachments,
      replyInfo: replyToForFirstMessage,
      ...commonParams
    } = params;
    if (text) {
      sendMessage(global, {
        ...commonParams,
        text,
        entities,
        replyInfo: replyToForFirstMessage,
        wasDrafted: Boolean(draft)
      });
    }
    attachments?.forEach(attachment => {
      sendMessage(global, {
        ...commonParams,
        attachment
      });
    });
  }
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('sendInviteMessages', async (global, actions, payload) => {
  const {
    chatId,
    userIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const chatFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatFullInfo)(global, chatId);
  if (!chatFullInfo?.inviteLink) {
    return undefined;
  }
  const userFullNames = [];
  await Promise.all(userIds.map(userId => {
    const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, userId);
    if (!chat) {
      return undefined;
    }
    const userFullName = (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getUserFullName)((0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUser)(global, userId));
    if (userFullName) {
      userFullNames.push(userFullName);
    }
    return sendMessage(global, {
      chat,
      text: chatFullInfo.inviteLink
    });
  }));
  return actions.showNotification({
    message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('editMessage', (global, actions, payload) => {
  const {
    messageList,
    text,
    entities,
    attachments,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  if (!messageList) {
    return;
  }
  let currentMessageKey;
  const progressCallback = attachments ? (progress, messageKey) => {
    if (!uploadProgressCallbacks.has(messageKey)) {
      currentMessageKey = messageKey;
      uploadProgressCallbacks.set(messageKey, progressCallback);
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateUploadByMessageKey)(global, messageKey, progress);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  } : undefined;
  const {
    chatId,
    threadId,
    type: messageListType
  } = messageList;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectEditingMessage)(global, chatId, threadId, messageListType);
  if (!chat || !message) {
    return;
  }
  actions.setEditingId({
    messageId: undefined,
    tabId
  });
  (async () => {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('editMessage', {
      chat,
      message,
      attachment: attachments ? attachments[0] : undefined,
      text,
      entities,
      noWebPage: (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectNoWebPage)(global, chatId, threadId)
    }, progressCallback);
    if (progressCallback && currentMessageKey) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateUploadByMessageKey)(global, currentMessageKey, undefined);
      (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
      uploadProgressCallbacks.delete(currentMessageKey);
    }
  })();
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('cancelUploadMedia', (global, actions, payload) => {
  const {
    chatId,
    messageId
  } = payload;
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessage)(global, chatId, messageId);
  if (!message) return;
  const progressCallback = message && uploadProgressCallbacks.get((0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_8__.getMessageKey)(message));
  if (progressCallback) {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.cancelApiProgress)(progressCallback);
  }
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isMessageLocal)(message)) {
    actions.apiUpdate({
      '@type': 'deleteMessages',
      ids: [messageId],
      chatId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('saveDraft', (global, actions, payload) => {
  const {
    chatId,
    threadId,
    text
  } = payload;
  if (!text) {
    return;
  }
  const currentDraft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, chatId, threadId);
  const newDraft = {
    text,
    replyInfo: currentDraft?.replyInfo,
    effectId: currentDraft?.effectId
  };
  saveDraft({
    global,
    chatId,
    threadId,
    draft: newDraft
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('clearDraft', (global, actions, payload) => {
  const {
    chatId,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
    isLocalOnly,
    shouldKeepReply
  } = payload;
  const currentDraft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, chatId, threadId);
  if (!currentDraft) {
    return;
  }
  const currentReplyInfo = currentDraft.replyInfo;
  const newDraft = shouldKeepReply && currentReplyInfo ? {
    replyInfo: currentReplyInfo
  } : undefined;
  saveDraft({
    global,
    chatId,
    threadId,
    draft: newDraft,
    isLocalOnly
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('updateDraftReplyInfo', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)(),
    ...update
  } = payload;
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return;
  }
  const {
    chatId,
    threadId
  } = currentMessageList;
  const currentDraft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, chatId, threadId);
  const updatedReplyInfo = {
    type: 'message',
    ...currentDraft?.replyInfo,
    ...update
  };
  if (!updatedReplyInfo.replyToMsgId) return;
  const newDraft = {
    ...currentDraft,
    replyInfo: updatedReplyInfo
  };
  saveDraft({
    global,
    chatId,
    threadId,
    draft: newDraft,
    isLocalOnly: true,
    noLocalTimeUpdate: true
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('resetDraftReplyInfo', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return;
  }
  const {
    chatId,
    threadId
  } = currentMessageList;
  const currentDraft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, chatId, threadId);
  const newDraft = !currentDraft?.text ? undefined : {
    ...currentDraft,
    replyInfo: undefined
  };
  saveDraft({
    global,
    chatId,
    threadId,
    draft: newDraft,
    isLocalOnly: Boolean(newDraft)
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('saveEffectInDraft', (global, actions, payload) => {
  const {
    chatId,
    threadId,
    effectId
  } = payload;
  const currentDraft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, chatId, threadId);
  const newDraft = {
    ...currentDraft,
    effectId
  };
  saveDraft({
    global,
    chatId,
    threadId,
    draft: newDraft,
    isLocalOnly: true,
    noLocalTimeUpdate: true
  });
});
async function saveDraft({
  global,
  chatId,
  threadId,
  draft,
  isLocalOnly,
  noLocalTimeUpdate
}) {
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUser)(global, chatId);
  if (!chat || user && (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isDeletedUser)(user)) return;
  const replyInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectMessageReplyInfo)(global, chatId, threadId, draft?.replyInfo);
  const newDraft = draft ? {
    ...draft,
    replyInfo,
    date: Math.floor(Date.now() / 1000),
    isLocal: true
  } : undefined;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chatId, threadId, 'draft', newDraft);
  if (!noLocalTimeUpdate) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChat)(global, chatId, {
      draftDate: newDraft?.date
    });
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  if (isLocalOnly) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('saveDraft', {
    chat,
    draft: newDraft
  });
  if (result && newDraft) {
    newDraft.isLocal = false;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chatId, threadId, 'draft', newDraft);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChat)(global, chatId, {
    draftDate: newDraft?.date
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
}
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('toggleMessageWebPage', (global, actions, payload) => {
  const {
    chatId,
    threadId,
    noWebPage
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chatId, threadId, 'noWebPage', noWebPage);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('pinMessage', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    isUnpin,
    isOneSide,
    isSilent
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('pinMessage', {
    chat,
    messageId,
    isUnpin,
    isOneSide,
    isSilent
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('unpinAllMessages', async (global, actions, payload) => {
  const {
    chatId,
    threadId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('unpinAllMessages', {
    chat,
    threadId
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const pinnedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPinnedIds)(global, chatId, threadId);
  pinnedIds?.forEach(id => {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, id, {
      isPinned: false
    });
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chat.id, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'pinnedIds', []);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('deleteMessages', (global, actions, payload) => {
  const {
    messageIds,
    shouldDeleteForAll,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return;
  }
  const {
    chatId,
    threadId
  } = currentMessageList;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const messageIdsToDelete = messageIds.filter(id => {
    const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessage)(global, chatId, id);
    return message && !(0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isMessageLocal)(message);
  });

  // Only local messages
  if (!messageIdsToDelete.length && messageIds.length) {
    (0,_apiUpdaters_messages__WEBPACK_IMPORTED_MODULE_19__.deleteMessages)(global, (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isChatChannel)(chat) ? chatId : undefined, messageIds, actions);
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('deleteMessages', {
    chat,
    messageIds: messageIdsToDelete,
    shouldDeleteForAll
  });
  const editingId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectEditingId)(global, chatId, threadId);
  if (editingId && messageIds.includes(editingId)) {
    actions.setEditingId({
      messageId: undefined,
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('deleteScheduledMessages', (global, actions, payload) => {
  const {
    messageIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return;
  }
  const {
    chatId
  } = currentMessageList;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('deleteScheduledMessages', {
    chat,
    messageIds
  });
  const editingId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectEditingScheduledId)(global, chatId);
  if (editingId && messageIds.includes(editingId)) {
    actions.setEditingId({
      messageId: undefined,
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('deleteHistory', async (global, actions, payload) => {
  const {
    chatId,
    shouldDeleteForAll,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('deleteHistory', {
    chat,
    shouldDeleteForAll
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const activeChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (activeChat && activeChat.chatId === chatId) {
    actions.openChat({
      id: undefined,
      tabId
    });
  }

  // Delete chat from folders
  const folders = global.chatFolders.byId;
  Object.values(folders).forEach(folder => {
    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {
      const newIncludedChatIds = folder.includedChatIds.filter(id => id !== chatId);
      const newPinnedChatIds = folder.pinnedChatIds?.filter(id => id !== chatId);
      const updatedFolder = {
        ...folder,
        includedChatIds: newIncludedChatIds,
        pinnedChatIds: newPinnedChatIds
      };
      (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('editChatFolder', {
        id: folder.id,
        folderUpdate: updatedFolder
      });
    }
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('deleteSavedHistory', async (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('deleteSavedHistory', {
    chat
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const activeChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (activeChat && activeChat.threadId === chatId) {
    actions.openChat({
      id: undefined,
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('reportMessages', async (global, actions, payload) => {
  const {
    messageIds,
    description = '',
    option = '',
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const response = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('reportMessages', {
    peer: chat,
    messageIds,
    description,
    option
  });
  if (!response) return;
  const {
    result,
    error
  } = response;
  if (error === _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_ID_REQUIRED_ERROR) {
    actions.showNotification({
      message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('lng_report_please_select_messages'),
      tabId
    });
    actions.closeReportModal({
      tabId
    });
    return;
  }
  if (!result) return;
  if (result.type === 'reported') {
    actions.showNotification({
      message: result ? (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('ReportPeer.AlertSuccess') : 'An error occurred while submitting your report. Please, try again later.',
      tabId
    });
    actions.closeReportModal({
      tabId
    });
    return;
  }
  if (result.type === 'selectOption') {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    const oldSections = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).reportModal?.sections;
    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find(o => o.option === option);
    const newSection = {
      title: result.title,
      options: result.options,
      subtitle: selectedOption?.text
    };
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
      reportModal: {
        chatId,
        messageIds,
        description,
        subject: 'message',
        sections: oldSections ? [...oldSections, newSection] : [newSection]
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  }
  if (result.type === 'comment') {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    const oldSections = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).reportModal?.sections;
    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find(o => o.option === option);
    const newSection = {
      isOptional: result.isOptional,
      option: result.option,
      title: selectedOption?.text
    };
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
      reportModal: {
        chatId,
        messageIds,
        description,
        subject: 'message',
        sections: oldSections ? [...oldSections, newSection] : [newSection]
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('sendMessageAction', async (global, actions, payload) => {
  const {
    action,
    chatId,
    threadId
  } = payload;
  if (global.connectionState !== 'connectionStateReady') return;
  if ((0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectIsChatWithSelf)(global, chatId)) return;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUser)(global, chatId);
  if (user && ((0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isUserBot)(user) || (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isDeletedUser)(user))) return;
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('sendMessageAction', {
    peer: chat,
    threadId,
    action
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('reportChannelSpam', (global, actions, payload) => {
  const {
    participantId,
    chatId,
    messageIds
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPeer)(global, participantId);
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!peer || !chat) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('reportChannelSpam', {
    peer,
    chat,
    messageIds
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('markMessageListRead', (global, actions, payload) => {
  const {
    maxId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return undefined;
  }
  const {
    chatId,
    threadId
  } = currentMessageList;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat || (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getIsSavedDialog)(chatId, threadId, global.currentUserId)) {
    return undefined;
  }
  runDebouncedForMarkRead(() => {
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('markMessageListRead', {
      chat,
      threadId,
      maxId
    });
  });
  if (chatId === _config__WEBPACK_IMPORTED_MODULE_2__.SERVICE_NOTIFICATIONS_USER_ID) {
    global = {
      ...global,
      serviceNotifications: global.serviceNotifications.map(notification => {
        return notification.isUnread && notification.id <= maxId ? {
          ...notification,
          isUnread: false
        } : notification;
      })
    };
  }
  const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectViewportIds)(global, chatId, threadId, tabId);
  const minId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectFirstUnreadId)(global, chatId, threadId);
  if (threadId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID && !chat.isForum) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateThreadInfo)(global, chatId, threadId, {
      lastReadInboxMessageId: maxId
    });
    return global;
  }
  if (!viewportIds || !minId || !chat.unreadCount) {
    return global;
  }
  const readCount = countSortedIds(viewportIds, minId, maxId);
  if (!readCount) {
    return global;
  }
  const topic = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTopic)(global, chatId, threadId);
  if (chat.isForum && topic) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateThreadInfo)(global, chatId, threadId, {
      lastReadInboxMessageId: maxId
    });
    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);
    if (newTopicUnreadCount === 0) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChat)(global, chatId, {
        unreadCount: Math.max(0, chat.unreadCount - 1)
      });
    }
    return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateTopic)(global, chatId, Number(threadId), {
      unreadCount: newTopicUnreadCount
    });
  }
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChat)(global, chatId, {
    lastReadInboxMessageId: maxId,
    unreadCount: Math.max(0, chat.unreadCount - readCount)
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('markMessagesRead', (global, actions, payload) => {
  const {
    messageIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)(),
    shouldFetchUnreadReactions
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
  if (!chat) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('markMessagesRead', {
    chat,
    messageIds
  }).then(() => {
    if (shouldFetchUnreadReactions) {
      actions.fetchUnreadReactions({
        chatId: chat.id
      });
    }
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadWebPagePreview', async (global, actions, payload) => {
  const {
    text,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const webPagePreview = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchWebPagePreview', {
    text
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    webPagePreview
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('clearWebPagePreview', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).webPagePreview) {
    return undefined;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    webPagePreview: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('sendPollVote', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    options
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (chat) {
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('sendPollVote', {
      chat,
      messageId,
      options
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('cancelPollVote', (global, actions, payload) => {
  const {
    chatId,
    messageId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (chat) {
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('sendPollVote', {
      chat,
      messageId,
      options: []
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closePoll', (global, actions, payload) => {
  const {
    chatId,
    messageId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessage)(global, chatId, messageId);
  const poll = message && (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPollFromMessage)(global, message);
  if (chat && poll) {
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('closePoll', {
      chat,
      messageId,
      poll
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadPollOptionResults', async (global, actions, payload) => {
  const {
    chat,
    messageId,
    option,
    offset,
    limit,
    shouldResetVoters,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('loadPollOptionResults', {
    chat,
    messageId,
    option,
    offset,
    limit
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  const {
    pollResults
  } = tabState;
  const {
    voters
  } = tabState.pollResults;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    pollResults: {
      ...pollResults,
      voters: {
        ...voters,
        [option]: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.unique)([...(!shouldResetVoters && voters?.[option] ? voters[option] : []), ...result.votes.map(vote => vote.peerId)])
      },
      offsets: {
        ...(pollResults.offsets ? pollResults.offsets : {}),
        [option]: result.nextOffset || ''
      }
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadExtendedMedia', (global, actions, payload) => {
  const {
    chatId,
    ids
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (chat) {
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchExtendedMedia', {
      chat,
      ids
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('forwardMessages', (global, actions, payload) => {
  const {
    isSilent,
    scheduledAt,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const {
    fromChatId,
    messageIds,
    toChatId,
    withMyScore,
    noAuthors,
    noCaptions,
    toThreadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).forwardMessages;
  const isCurrentUserPremium = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectIsCurrentUserPremium)(global);
  const isToMainThread = toThreadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
  const fromChat = fromChatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, fromChatId) : undefined;
  const toChat = toChatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, toChatId) : undefined;
  const messages = fromChatId && messageIds ? messageIds.sort((a, b) => a - b).map(id => (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessage)(global, fromChatId, id)).filter(Boolean) : undefined;
  if (!fromChat || !toChat || !messages || toThreadId && !isToMainThread && !toChat.isForum) {
    return;
  }
  const sendAs = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectSendAs)(global, toChatId);
  const draft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, toChatId, toThreadId || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID);
  const lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatLastMessageId)(global, toChat.id);
  const [realMessages, serviceMessages] = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.partition)(messages, m => !(0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isServiceNotificationMessage)(m));
  const forwardableRealMessages = realMessages.filter(message => (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCanForwardMessage)(global, message));
  if (forwardableRealMessages.length) {
    const messageBatches = global.config?.maxForwardedCount ? (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.splitMessagesForForwarding)(forwardableRealMessages, global.config.maxForwardedCount) : [forwardableRealMessages];
    (async () => {
      await (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_10__.rafPromise)(); // Wait one frame for any previous `sendMessage` to be processed
      messageBatches.forEach(batch => {
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('forwardMessages', {
          fromChat,
          toChat,
          toThreadId,
          messages: batch,
          isSilent,
          scheduledAt,
          sendAs,
          withMyScore,
          noAuthors,
          noCaptions,
          isCurrentUserPremium,
          wasDrafted: Boolean(draft),
          lastMessageId
        });
      });
    })();
  }
  serviceMessages.forEach(message => {
    const {
      text,
      entities
    } = message.content.text || {};
    const {
      sticker
    } = message.content;
    const replyInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectMessageReplyInfo)(global, toChat.id, toThreadId);
    void sendMessage(global, {
      chat: toChat,
      replyInfo,
      text,
      entities,
      sticker,
      isSilent,
      scheduledAt,
      sendAs,
      lastMessageId
    });
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {},
    isShareMessageModalShown: false
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadScheduledHistory', async (global, actions, payload) => {
  const {
    chatId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchScheduledHistory', {
    chat
  });
  if (!result) {
    return;
  }
  const {
    messages
  } = result;
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.buildCollectionByKey)(messages, 'id');
  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateScheduledMessages)(global, chat.id, byId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chat.id, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'scheduledIds', ids);
  if (!ids.length) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updatePeerFullInfo)(global, chat.id, {
      hasScheduledMessages: false
    });
  }
  if (chat?.isForum) {
    const scheduledPerThread = {};
    messages.forEach(message => {
      const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectThreadIdFromMessage)(global, message);
      const scheduledInThread = scheduledPerThread[threadId] || [];
      scheduledInThread.push(message.id);
      scheduledPerThread[threadId] = scheduledInThread;
    });
    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);
    });
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('sendScheduledMessages', (global, actions, payload) => {
  const {
    chatId,
    id
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('sendScheduledMessages', {
    chat,
    ids: [id]
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('rescheduleMessage', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    scheduledAt
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const message = chat && (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectScheduledMessage)(global, chat.id, messageId);
  if (!chat || !message) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('rescheduleMessage', {
    chat,
    message,
    scheduledAt
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('transcribeAudio', async (global, actions, payload) => {
  const {
    messageId,
    chatId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, messageId, {
    transcriptionId: ''
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('transcribeAudio', {
    chat,
    messageId
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, messageId, {
    transcriptionId: result,
    isTranscriptionError: !result
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadCustomEmojis', async (global, actions, payload) => {
  const {
    ids,
    ignoreCache
  } = payload;
  const newCustomEmojiIds = ignoreCache ? ids : (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.unique)(ids.filter(documentId => !global.customEmojis.byId[documentId]));
  const customEmoji = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchCustomEmoji', {
    documentId: newCustomEmojiIds
  });
  if (!customEmoji) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = {
    ...global,
    customEmojis: {
      ...global.customEmojis,
      byId: {
        ...global.customEmojis.byId,
        ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.buildCollectionByKey)(customEmoji, 'id')
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
async function loadViewportMessages(global, chat, threadId, offsetId, direction, isOutlying = false, isBudgetPreload = false, onLoaded, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()]) {
  const chatId = chat.id;
  let addOffset;
  let sliceSize = _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE;
  switch (direction) {
    case _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards:
      if (offsetId) {
        addOffset = -1;
        sliceSize += 1;
      } else {
        addOffset = undefined;
      }
      break;
    case _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around:
      addOffset = -(Math.round(_config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE / 2) + 1);
      break;
    case _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Forwards:
      addOffset = -(_config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE + 1);
      if (offsetId) {
        sliceSize += 1;
      }
      break;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const currentUserId = global.currentUserId;
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getIsSavedDialog)(chatId, threadId, currentUserId);
  const realChatId = isSavedDialog ? String(threadId) : chatId;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchMessages', {
    chat: (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, realChatId),
    offsetId,
    addOffset,
    limit: sliceSize,
    threadId,
    isSavedDialog
  });
  if (!result) {
    return;
  }
  const {
    messages,
    count
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const localMessages = chatId === _config__WEBPACK_IMPORTED_MODULE_2__.SERVICE_NOTIFICATIONS_USER_ID ? global.serviceNotifications.filter(({
    isDeleted
  }) => !isDeleted).map(({
    message
  }) => message) : [];
  const allMessages = [].concat(messages, localMessages);
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.buildCollectionByKey)(allMessages, 'id');
  const ids = Object.keys(byId).map(Number);
  if (threadId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID && !(0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getIsSavedDialog)(chatId, threadId, global.currentUserId)) {
    const threadFirstMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectFirstMessageId)(global, chatId, threadId);
    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {
      ids.unshift(Number(threadId));
    }
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.addChatMessagesById)(global, chatId, byId);
  global = isOutlying ? (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateOutlyingLists)(global, chatId, threadId, ids) : (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateListedIds)(global, chatId, threadId, ids);
  let listedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectListedIds)(global, chatId, threadId);
  const outlyingList = offsetId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectOutlyingListByMessageId)(global, chatId, threadId, offsetId) : undefined;
  if (isOutlying && listedIds && outlyingList) {
    if (!outlyingList.length || (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.areSortedArraysIntersecting)(listedIds, outlyingList)) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateListedIds)(global, chatId, threadId, outlyingList);
      listedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectListedIds)(global, chatId, threadId);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.removeOutlyingList)(global, chatId, threadId, outlyingList);
      isOutlying = false;
    }
  }
  if (!isBudgetPreload) {
    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;
    if (historyIds) {
      const {
        newViewportIds
      } = getViewportSlice(historyIds, offsetId, direction);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.safeReplaceViewportIds)(global, chatId, threadId, newViewportIds, tabId);
    }
  }
  if (count) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateThreadInfo)(global, chat.id, threadId, {
      messagesCount: count
    });
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  onLoaded?.();
}
async function loadMessage(global, chat, messageId, replyOriginForId) {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchMessage', {
    chat,
    messageId
  });
  if (!result) {
    return undefined;
  }
  if (result === _api_types__WEBPACK_IMPORTED_MODULE_0__.MESSAGE_DELETED) {
    if (replyOriginForId) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
      const replyMessage = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessage)(global, chat.id, replyOriginForId);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chat.id, replyOriginForId, {
        ...replyMessage,
        replyInfo: undefined
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    }
    return undefined;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chat.id, messageId, result.message);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  return result.message;
}
function findClosestIndex(sourceIds, offsetId) {
  if (offsetId < sourceIds[0]) {
    return 0;
  }
  if (offsetId > sourceIds[sourceIds.length - 1]) {
    return sourceIds.length - 1;
  }
  return sourceIds.findIndex((id, i) => id === offsetId || id < offsetId && sourceIds[i + 1] > offsetId);
}
function getViewportSlice(sourceIds, offsetId, direction) {
  const {
    length
  } = sourceIds;
  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;
  const isBackwards = direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards;
  const isAround = direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around;
  const indexForDirection = isBackwards ? index : index + 1 || length;
  const sliceSize = isAround ? Math.round(_config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE / 2) : _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE;
  const from = indexForDirection - sliceSize;
  const to = indexForDirection + sliceSize - 1;
  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);
  let areSomeLocal;
  let areAllLocal;
  switch (direction) {
    case _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards:
      areSomeLocal = indexForDirection >= 0;
      areAllLocal = from >= 0;
      break;
    case _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Forwards:
      areSomeLocal = indexForDirection < length;
      areAllLocal = to <= length - 1;
      break;
    case _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around:
    default:
      areSomeLocal = newViewportIds.length > 0;
      areAllLocal = newViewportIds.length === _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE;
      break;
  }
  return {
    newViewportIds,
    areSomeLocal,
    areAllLocal
  };
}
async function sendMessage(global, params) {
  let currentMessageKey;
  const progressCallback = params.attachment ? (progress, messageKey) => {
    if (!uploadProgressCallbacks.has(messageKey)) {
      currentMessageKey = messageKey;
      uploadProgressCallbacks.set(messageKey, progressCallback);
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateUploadByMessageKey)(global, messageKey, progress);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  } : undefined;

  // @optimization
  if (params.replyInfo || _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_IOS) {
    await (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_10__.rafPromise)();
  }
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('sendMessage', params, progressCallback);
  if (progressCallback && currentMessageKey) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateUploadByMessageKey)(global, currentMessageKey, undefined);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    uploadProgressCallbacks.delete(currentMessageKey);
  }
}
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadPinnedMessages', async (global, actions, payload) => {
  const {
    chatId,
    threadId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat || (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getIsSavedDialog)(chatId, threadId, global.currentUserId)) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchPinnedMessages', {
    chat,
    threadId
  });
  if (!result) {
    return;
  }
  const {
    messages
  } = result;
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.buildCollectionByKey)(messages, 'id');
  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.addChatMessagesById)(global, chat.id, byId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.safeReplacePinnedIds)(global, chat.id, threadId, ids);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadSeenBy', async (global, actions, payload) => {
  const {
    chatId,
    messageId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchSeenBy', {
    chat,
    messageId
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, messageId, {
    seenByDates: result
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('saveDefaultSendAs', (global, actions, payload) => {
  const {
    chatId,
    sendAsId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const sendAsChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, sendAsId) || (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUser)(global, sendAsId);
  if (!chat || !sendAsChat) {
    return undefined;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('saveDefaultSendAs', {
    sendAs: sendAsChat,
    chat
  });
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatFullInfo)(global, chatId, {
    sendAsId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadSendAs', async (global, actions, payload) => {
  const {
    chatId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchSendAs', {
    chat
  });
  if (!result) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChat)(global, chatId, {
      sendAsPeerIds: []
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChat)(global, chatId, {
    sendAsPeerIds: result.sendAs
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadSponsoredMessages', async (global, actions, payload) => {
  const {
    peerId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  if ((0,_helpers_peers__WEBPACK_IMPORTED_MODULE_14__.isApiPeerUser)(peer) && (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectIsChatBotNotStarted)(global, peer.id)) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchSponsoredMessages', {
    peer
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateSponsoredMessage)(global, peerId, result.messages[0]);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('viewSponsoredMessage', (global, actions, payload) => {
  const {
    peerId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPeer)(global, peerId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectSponsoredMessage)(global, peerId);
  if (!peer || !message) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('viewSponsoredMessage', {
    peer,
    random: message.randomId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('clickSponsoredMessage', (global, actions, payload) => {
  const {
    peerId,
    isMedia,
    isFullscreen
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPeer)(global, peerId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectSponsoredMessage)(global, peerId);
  if (!peer || !message) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('clickSponsoredMessage', {
    peer,
    random: message.randomId,
    isMedia,
    isFullscreen
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('reportSponsoredMessage', async (global, actions, payload) => {
  const {
    peerId,
    randomId,
    option = '',
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('reportSponsoredMessage', {
    peer,
    randomId,
    option
  });
  if (!result) return;
  if (result.type === 'premiumRequired') {
    actions.openPremiumModal({
      initialSection: 'no_ads',
      tabId
    });
    actions.closeReportAdModal({
      tabId
    });
    return;
  }
  if (result.type === 'reported' || result.type === 'hidden') {
    actions.showNotification({
      message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)(result.type === 'reported' ? 'AdReported' : 'AdHidden'),
      tabId
    });
    actions.closeReportAdModal({
      tabId
    });
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.deleteSponsoredMessage)(global, peerId);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    return;
  }
  if (result.type === 'selectOption') {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    const oldSections = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).reportAdModal?.sections;
    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find(o => o.option === option);
    const newSection = {
      title: result.title,
      options: result.options,
      subtitle: selectedOption?.text
    };
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
      reportAdModal: {
        chatId: peerId,
        randomId,
        sections: oldSections ? [...oldSections, newSection] : [newSection]
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('hideSponsoredMessages', async (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  const isCurrentUserPremium = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectIsCurrentUserPremium)(global);
  if (!isCurrentUserPremium) {
    actions.openPremiumModal({
      initialSection: 'no_ads',
      tabId
    });
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('toggleSponsoredMessages', {
    enabled: false
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateUserFullInfo)(global, global.currentUserId, {
    areAdsEnabled: false
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  actions.showNotification({
    message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('AdHidden'),
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('fetchUnreadMentions', async (global, actions, payload) => {
  const {
    chatId,
    offsetId
  } = payload;
  await fetchUnreadMentions(global, chatId, offsetId);
});
async function fetchUnreadMentions(global, chatId, offsetId) {
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchUnreadMentions', {
    chat,
    offsetId
  });
  if (!result) return;
  const {
    messages
  } = result;
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.buildCollectionByKey)(messages, 'id');
  const ids = Object.keys(byId).map(Number);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.addChatMessagesById)(global, chat.id, byId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.addUnreadMentions)(global, chatId, chat, ids);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
}
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('markMentionsRead', (global, actions, payload) => {
  const {
    messageIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
  if (!chat) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.removeUnreadMentions)(global, chat.id, chat, messageIds, true);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  actions.markMessagesRead({
    messageIds,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('focusNextMention', async (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  let chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
  if (!chat) return;
  if (!chat.unreadMentions) {
    await fetchUnreadMentions(global, chat.id);
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    const previousChatId = chat.id;
    chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
    if (!chat?.unreadMentions || previousChatId !== chat.id) return;
  }
  actions.focusMessage({
    chatId: chat.id,
    messageId: chat.unreadMentions[0],
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('readAllMentions', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
  if (!chat) return undefined;
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('readAllMentions', {
    chat
  });
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChat)(global, chat.id, {
    unreadMentionsCount: undefined,
    unreadMentions: undefined
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openUrl', (global, actions, payload) => {
  const {
    url,
    shouldSkipModal,
    ignoreDeepLinks,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const urlWithProtocol = (0,_util_ensureProtocol__WEBPACK_IMPORTED_MODULE_5__.ensureProtocol)(url);
  if (!ignoreDeepLinks && (0,_util_deepLinkParser__WEBPACK_IMPORTED_MODULE_4__.isDeepLink)(urlWithProtocol)) {
    actions.closeStoryViewer({
      tabId
    });
    actions.closePaymentModal({
      tabId
    });
    actions.openTelegramLink({
      url,
      tabId
    });
    return;
  }
  const {
    appConfig,
    config
  } = global;
  if (appConfig) {
    const parsedUrl = new URL(urlWithProtocol);
    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {
      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);
      window.open(parsedUrl.href, '_blank', 'noopener');
      return;
    }
    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {
      actions.closeStoryViewer({
        tabId
      });
      actions.requestLinkUrlAuth({
        url,
        tabId
      });
      return;
    }
  }
  const shouldDisplayModal = !urlWithProtocol.match(_config__WEBPACK_IMPORTED_MODULE_2__.RE_TELEGRAM_LINK) && !shouldSkipModal;
  if (shouldDisplayModal) {
    actions.toggleSafeLinkModal({
      url: urlWithProtocol,
      tabId
    });
  } else {
    window.open(urlWithProtocol, '_blank', 'noopener');
  }
});
async function checkIfVoiceMessagesAllowed(global, user, chatId) {
  let fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUserFullInfo)(global, chatId);
  if (!fullInfo) {
    const {
      accessHash
    } = user;
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchFullUser', {
      id: chatId,
      accessHash
    });
    fullInfo = result?.fullInfo;
  }
  return Boolean(!fullInfo?.noVoiceMessages);
}
function moveReplyToNewDraft(global, threadId, replyInfo, toChatId) {
  const currentDraft = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, toChatId, threadId);
  if (!replyInfo.replyToMsgId) return;
  const newDraft = {
    ...currentDraft,
    replyInfo
  };
  saveDraft({
    global,
    chatId: toChatId,
    threadId,
    draft: newDraft,
    isLocalOnly: true,
    noLocalTimeUpdate: true
  });
}
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openChatOrTopicWithReplyInDraft', (global, actions, payload) => {
  const {
    chatId: toChatId,
    topicId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  const replyingInfo = tabState.replyingMessage;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    isShareMessageModalShown: false,
    replyingMessage: {}
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  const currentChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
  const currentThreadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId)?.threadId;
  if (!currentChat || !currentThreadId) return;
  const threadId = topicId || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
  const currentChatId = currentChat.id;
  const newReplyInfo = {
    type: 'message',
    replyToMsgId: replyingInfo.messageId,
    replyToTopId: replyingInfo.toThreadId,
    replyToPeerId: currentChatId,
    quoteText: replyingInfo.quoteText
  };
  const currentReplyInfo = replyingInfo.messageId ? newReplyInfo : (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, currentChatId, currentThreadId)?.replyInfo;
  if (!currentReplyInfo) return;
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectReplyCanBeSentToChat)(global, toChatId, currentChatId, currentReplyInfo)) {
    actions.showNotification({
      message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('Chat.SendNotAllowedText'),
      tabId
    });
    return;
  }
  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;
  const getPeerId = () => {
    if (!currentReplyInfo?.replyToPeerId) return currentChatId;
    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;
  };
  const replyToPeerId = getPeerId();
  const newReply = {
    ...currentReplyInfo,
    replyToPeerId,
    type: 'message'
  };
  moveReplyToNewDraft(global, threadId, newReply, toChatId);
  actions.openThread({
    chatId: toChatId,
    threadId,
    tabId
  });
  actions.closeMediaViewer({
    tabId
  });
  actions.exitMessageSelectMode({
    tabId
  });
  actions.clearDraft({
    chatId: currentChatId,
    threadId: currentThreadId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setForwardChatOrTopic', async (global, actions, payload) => {
  const {
    chatId,
    topicId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUser)(global, chatId);
  const isSelectForwardsContainVoiceMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectForwardsContainVoiceMessages)(global, tabId);
  if (isSelectForwardsContainVoiceMessages && user && !(await checkIfVoiceMessagesAllowed(global, user, chatId))) {
    actions.showDialog({
      data: {
        message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('VoiceMessagesRestrictedByPrivacy', (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getUserFullName)(user))
      },
      tabId
    });
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectForwardsCanBeSentToChat)(global, chatId, tabId)) {
    actions.showAllowedMessageTypesNotification({
      chatId,
      tabId
    });
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).forwardMessages,
      toChatId: chatId,
      toThreadId: topicId
    },
    isShareMessageModalShown: false
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  actions.openThread({
    chatId,
    threadId: topicId || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
    tabId
  });
  actions.closeMediaViewer({
    tabId
  });
  actions.exitMessageSelectMode({
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('forwardToSavedMessages', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).forwardMessages,
      toChatId: global.currentUserId
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  actions.exitMessageSelectMode({
    tabId
  });
  actions.forwardMessages({
    isSilent: true,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('forwardStory', (global, actions, payload) => {
  const {
    toChatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload || {};
  const {
    fromChatId,
    storyId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).forwardMessages;
  const fromChat = fromChatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, fromChatId) : undefined;
  const toChat = toChatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, toChatId) : undefined;
  const story = fromChatId && storyId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPeerStory)(global, fromChatId, storyId) : undefined;
  if (!fromChat || !toChat || !story || 'isDeleted' in story) {
    return;
  }
  const lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatLastMessageId)(global, toChatId);
  const {
    text,
    entities
  } = story.content.text || {};
  void sendMessage(global, {
    chat: toChat,
    text,
    entities,
    story,
    lastMessageId
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {},
    isShareMessageModalShown: false
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('requestMessageTranslation', (global, actions, payload) => {
  const {
    chatId,
    id,
    toLanguageCode = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTranslationLanguage)(global),
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateRequestedMessageTranslation)(global, chatId, id, toLanguageCode, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceSettings)(global, {
    translationLanguage: toLanguageCode
  });
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('showOriginalMessage', (global, actions, payload) => {
  const {
    chatId,
    id,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.removeRequestedMessageTranslation)(global, chatId, id, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('markMessagesTranslationPending', (global, actions, payload) => {
  const {
    chatId,
    messageIds,
    toLanguageCode = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectLanguageCode)(global)
  } = payload;
  messageIds.forEach(id => {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateMessageTranslation)(global, chatId, id, toLanguageCode, {
      isPending: true
    });
  });
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('translateMessages', (global, actions, payload) => {
  const {
    chatId,
    messageIds,
    toLanguageCode = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectLanguageCode)(global)
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return undefined;
  actions.markMessagesTranslationPending({
    chatId,
    messageIds,
    toLanguageCode
  });
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('translateText', {
    chat,
    messageIds,
    toLanguageCode
  });
  return global;
});

// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22
const SEND_VIEWS_TIMEOUT = 1000;
let viewsIncrementTimeout;
let idsToIncrementViews = {};
function incrementViews() {
  if (viewsIncrementTimeout) {
    clearTimeout(viewsIncrementTimeout);
    viewsIncrementTimeout = undefined;
  }

  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions
  const {
    loadMessageViews
  } = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getActions)();
  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {
    loadMessageViews({
      chatId,
      ids: Array.from(ids),
      shouldIncrement: true
    });
  });
  idsToIncrementViews = {};
}
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('scheduleForViewsIncrement', (global, actions, payload) => {
  const {
    ids,
    chatId
  } = payload;
  if (!viewsIncrementTimeout) {
    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);
  }
  if (!idsToIncrementViews[chatId]) {
    idsToIncrementViews[chatId] = new Set();
  }
  ids.forEach(id => {
    idsToIncrementViews[chatId].add(id);
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadMessageViews', async (global, actions, payload) => {
  const {
    chatId,
    ids,
    shouldIncrement
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchMessageViews', {
    chat,
    ids,
    shouldIncrement
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  result.viewsInfo.forEach(update => {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, update.id, {
      viewsCount: update.views,
      forwardsCount: update.forwards
    }, true);
    if (update.threadInfo) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateThreadInfo)(global, chatId, update.id, update.threadInfo);
    }
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadFactChecks', async (global, actions, payload) => {
  const {
    chatId,
    ids
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchFactChecks', {
    chat,
    ids
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  result.forEach((factCheck, i) => {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, ids[i], {
      factCheck
    });
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadPaidReactionPrivacy', () => {
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchPaidReactionPrivacy');
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadOutboxReadDate', async (global, actions, payload) => {
  const {
    chatId,
    messageId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return;
  try {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchOutboxReadDate', {
      chat,
      messageId
    });
    if (result?.date) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, messageId, {
        readDate: result.date
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    }
  } catch (error) {
    const {
      message
    } = error;
    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
      const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUser)(global, chatId);
      if (!user) return;
      const userStatus = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectUserStatus)(global, chatId);
      if (!userStatus) return;
      const updateStatus = message === 'USER_PRIVACY_RESTRICTED' ? {
        isReadDateRestricted: true
      } : {
        isReadDateRestrictedByMe: true
      };
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceUserStatuses)(global, {
        [chatId]: {
          ...userStatus,
          ...updateStatus
        }
      });
      // Need to reset `readDate` to `undefined` after click on "Show my Read Time" button
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateChatMessage)(global, chatId, messageId, {
        readDate: undefined
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    }
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadQuickReplies', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('fetchQuickReplies');
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateQuickReplyMessages)(global, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.buildCollectionByKey)(result.messages, 'id'));
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateQuickReplies)(global, result.quickReplies);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('sendQuickReply', (global, actions, payload) => {
  const {
    chatId,
    quickReplyId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) return global;
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('sendQuickReply', {
    chat,
    shortcutId: quickReplyId
  });
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('copyMessageLink', async (global, actions, payload) => {
  const {
    chatId,
    messageId,
    shouldIncludeThread,
    shouldIncludeGrouped,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_6__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    actions.showNotification({
      message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('ErrorOccurred'),
      tabId
    });
    return;
  }
  const showErrorOccurredNotification = () => actions.showNotification({
    message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('ErrorOccurred'),
    tabId
  });
  if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isChatChannel)(chat) && !(0,_helpers__WEBPACK_IMPORTED_MODULE_13__.isChatSuperGroup)(chat)) {
    showErrorOccurredNotification();
    return;
  }
  const showLinkCopiedNotification = () => actions.showNotification({
    message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate)('LinkCopied'),
    tabId
  });
  const callApiExportMessageLinkPromise = (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('exportMessageLink', {
    chat,
    id: messageId,
    shouldIncludeThread,
    shouldIncludeGrouped
  });
  await (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_3__.copyTextToClipboardFromPromise)(callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification);
});
const MESSAGES_TO_REPORT_DELIVERY = new Map();
let reportDeliveryTimeout;
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('reportMessageDelivery', (global, actions, payload) => {
  const {
    chatId,
    messageId
  } = payload;
  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];
  currentIds.push(messageId);
  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);
  if (!reportDeliveryTimeout) {
    // Slightly unsafe in the multitab environment, but there is no better way to do it now.
    // Not critical if user manages to close the tab in a show window before the report is sent.
    reportDeliveryTimeout = window.setTimeout(() => {
      reportDeliveryTimeout = undefined;
      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {
        const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, cId);
        if (!chat) return;
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('reportMessagesDelivery', {
          chat,
          messageIds
        });
      });
      MESSAGES_TO_REPORT_DELIVERY.clear();
    }, 500);
  }
});
function countSortedIds(ids, from, to) {
  // If ids are outside viewport, we cannot get correct count
  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;
  let count = 0;
  for (let i = 0, l = ids.length; i < l; i++) {
    if (ids[i] >= from && ids[i] <= to) {
      count++;
    }
    if (ids[i] >= to) {
      break;
    }
  }
  return count;
}
function splitAttachmentsByType(attachments) {
  return attachments.reduce((acc, attachment, index, arr) => {
    if (index === 0) {
      acc.push([attachment]);
      return acc;
    }
    const type = getAttachmentType(attachment);
    const previousType = getAttachmentType(arr[index - 1]);
    if (type === previousType) {
      acc[acc.length - 1].push(attachment);
    } else {
      acc.push([attachment]);
    }
    return acc;
  }, []);
}
function getAttachmentType(attachment) {
  const {
    shouldSendAsFile,
    mimeType
  } = attachment;
  if (_config__WEBPACK_IMPORTED_MODULE_2__.SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';
  if (shouldSendAsFile) return 'file';
  if (mimeType === _config__WEBPACK_IMPORTED_MODULE_2__.GIF_MIME_TYPE) return 'gif';
  if (_config__WEBPACK_IMPORTED_MODULE_2__.SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || _config__WEBPACK_IMPORTED_MODULE_2__.SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';
  if (attachment.voice) return 'voice';
  return 'file';
}

/***/ }),

/***/ "./src/global/actions/api/middleSearch.ts":
/*!************************************************!*\
  !*** ./src/global/actions/api/middleSearch.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_searchResultKey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/keys/searchResultKey */ "./src/util/keys/searchResultKey.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");











const MEDIA_PRELOAD_OFFSET = 9;
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('performMiddleSearch', async (global, actions, payload) => {
  const {
    query,
    chatId,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload || {};
  if (!chatId) return;
  const currentUserId = global.currentUserId;
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_7__.getIsSavedDialog)(chatId, threadId, currentUserId);
  const realChatId = isSavedDialog ? String(threadId) : chatId;
  const peer = realChatId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectPeer)(global, realChatId) : undefined;
  let currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMiddleSearch)(global, tabId);
  if (!peer) {
    return;
  }
  if (!currentSearch) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateMiddleSearch)(global, realChatId, threadId, {}, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  }
  currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMiddleSearch)(global, tabId);
  const {
    results,
    savedTag,
    type,
    isHashtag
  } = currentSearch;
  const offsetId = results?.nextOffsetId;
  const offsetRate = results?.nextOffsetRate;
  const offsetPeerId = results?.nextOffsetPeerId;
  const offsetPeer = offsetPeerId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, offsetPeerId) : undefined;
  const shouldHaveQuery = isHashtag || !savedTag;
  if (shouldHaveQuery && !query) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateMiddleSearch)(global, realChatId, threadId, {
      fetchingQuery: undefined
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateMiddleSearch)(global, realChatId, threadId, {
    fetchingQuery: query
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
  let result;
  if (type === 'chat') {
    result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('searchMessagesInChat', {
      peer,
      type: 'text',
      query: isHashtag ? `#${query}` : query,
      threadId,
      limit: _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_SEARCH_SLICE,
      offsetId,
      isSavedDialog,
      savedTag
    });
  }
  if (type === 'myChats') {
    result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('searchMessagesGlobal', {
      type: 'text',
      query: isHashtag ? `#${query}` : query,
      limit: _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_SEARCH_SLICE,
      offsetId,
      offsetRate,
      offsetPeer
    });
  }
  if (type === 'channels') {
    result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('searchHashtagPosts', {
      hashtag: query,
      limit: _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_SEARCH_SLICE,
      offsetId,
      offsetPeer,
      offsetRate
    });
  }
  if (!result) {
    return;
  }
  const {
    userStatusesById,
    messages,
    totalCount,
    nextOffsetId,
    nextOffsetRate,
    nextOffsetPeerId
  } = result;
  const newFoundIds = messages.map(_util_keys_searchResultKey__WEBPACK_IMPORTED_MODULE_5__.getSearchResultKey);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMiddleSearch)(global, tabId);
  const hasTagChanged = currentSearch?.savedTag && !(0,_helpers__WEBPACK_IMPORTED_MODULE_7__.isSameReaction)(savedTag, currentSearch.savedTag);
  const hasSearchChanged = currentSearch?.fetchingQuery !== query;
  if (!currentSearch || hasSearchChanged || hasTagChanged) {
    return;
  }
  const resultChatId = isSavedDialog ? currentUserId : peer.id;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addUserStatuses)(global, userStatusesById);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addMessages)(global, messages);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateMiddleSearch)(global, resultChatId, threadId, {
    fetchingQuery: undefined
  }, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateMiddleSearchResults)(global, resultChatId, threadId, {
    foundIds: newFoundIds,
    totalCount,
    nextOffsetId,
    nextOffsetRate,
    nextOffsetPeerId,
    query: query || ''
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('searchHashtag', (global, actions, payload) => {
  const {
    hashtag,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload;
  const messageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMessageList)(global, tabId);
  if (!messageList) {
    return;
  }
  const cleanQuery = hashtag.replace(/^#/, '');
  actions.updateMiddleSearch({
    chatId: messageList.chatId,
    threadId: messageList.threadId,
    update: {
      isHashtag: true,
      requestedQuery: cleanQuery
    },
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('searchSharedMediaMessages', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return;
  }
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_7__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  const realChatId = isSavedDialog ? String(threadId) : chatId;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectPeer)(global, realChatId);
  const currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentSharedMediaSearch)(global, tabId);
  if (!peer || !currentSearch) {
    return;
  }
  const {
    currentType: type,
    resultsByType
  } = currentSearch;
  const currentResults = type && resultsByType && resultsByType[type];
  const offsetId = currentResults?.nextOffsetId;
  if (!type) {
    return;
  }
  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('searchChatMediaMessages', (global, actions, payload) => {
  const {
    chatId,
    threadId,
    currentMediaMessageId,
    limit,
    direction,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload;
  if (!chatId || !threadId || !currentMediaMessageId) {
    return;
  }
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_7__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  const realChatId = isSavedDialog ? String(threadId) : chatId;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, realChatId);
  if (!chat) {
    return;
  }
  let currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentChatMediaSearch)(global, tabId);
  if (!currentSearch) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.initializeChatMediaSearchResults)(global, chatId, threadId, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentChatMediaSearch)(global, tabId);
    if (!currentSearch) {
      return;
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  }
  void searchChatMedia(global, chat, threadId, currentMediaMessageId, currentSearch, direction, isSavedDialog, limit, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_8__.addActionHandler)('searchMessagesByDate', async (global, actions, payload) => {
  const {
    timestamp,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()
  } = payload;
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    return;
  }
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const messageId = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('findFirstMessageIdAfterDate', {
    chat,
    timestamp
  });
  if (!messageId) {
    return;
  }
  actions.focusMessage({
    chatId: chat.id,
    messageId,
    tabId
  });
});
async function searchSharedMedia(global, peer, threadId, type, offsetId, isBudgetPreload = false, isSavedDialog, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const resultChatId = isSavedDialog ? global.currentUserId : peer.id;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('searchMessagesInChat', {
    peer,
    type,
    limit: _config__WEBPACK_IMPORTED_MODULE_2__.SHARED_MEDIA_SLICE * 2,
    threadId,
    offsetId,
    isSavedDialog
  });
  if (!result) {
    return;
  }
  const {
    userStatusesById,
    messages,
    totalCount,
    nextOffsetId
  } = result;
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.buildCollectionByKey)(messages, 'id');
  const newFoundIds = Object.keys(byId).map(Number);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  const currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentSharedMediaSearch)(global, tabId);
  if (!currentSearch) {
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addUserStatuses)(global, userStatusesById);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addChatMessagesById)(global, resultChatId, byId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateSharedMediaSearchResults)(global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
  if (!isBudgetPreload) {
    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);
  }
}
function selectCurrentChatMediaSearchSegment(params, currentMediaMessageId) {
  if ((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.isInsideSortedArrayRange)(currentMediaMessageId, params.currentSegment.foundIds)) {
    return params.currentSegment;
  }
  const index = params.segments.findIndex(segment => (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.isInsideSortedArrayRange)(currentMediaMessageId, segment.foundIds));
  if (index === -1) {
    if (params.currentSegment && params.currentSegment.foundIds.length) {
      params.segments.push(params.currentSegment);
    }
    return undefined;
  }
  const result = params.segments.splice(index, 1)[0];
  params.segments.push(params.currentSegment);
  return result;
}
function calcChatMediaSearchAddOffset(direction, limit) {
  if (direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards) return 0;
  if (direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Forwards) return -(limit + 1);
  return -(Math.round(limit / 2) + 1);
}
function calcChatMediaSearchOffsetId(direction, currentMessageId, segment) {
  if (!segment) return currentMessageId;
  if (direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards) return segment.foundIds[0];
  if (direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];
  return currentMessageId;
}
function calcLoadMoreDirection(currentMessageId, currentSegment) {
  if (!currentSegment) return _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around;
  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;
  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);
  if (idIndexInSegment === -1) return _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Around;
  if (currentSegment.loadingState.areAllItemsLoadedBackwards && currentSegment.loadingState.areAllItemsLoadedForwards) {
    return undefined;
  }
  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);
  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;
  const lastMediaIndex = currentSegmentFoundIdsCount - 1;
  if (idIndexInSegment <= preloadOffset) {
    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;
    return _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards;
  }
  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {
    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;
    return _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Forwards;
  }
  return undefined;
}
function calcLoadingState(direction, limit, newFoundIdsCount, currentSegment) {
  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);
  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);
  if (newFoundIdsCount < limit) {
    if (direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Forwards) {
      areAllItemsLoadedForwards = true;
    } else if (direction === _types__WEBPACK_IMPORTED_MODULE_1__.LoadMoreDirection.Backwards) {
      areAllItemsLoadedBackwards = true;
    }
  }
  return {
    areAllItemsLoadedForwards,
    areAllItemsLoadedBackwards
  };
}
async function searchChatMedia(global, peer, threadId, currentMediaMessageId, chatMediaSearchParams, direction, isSavedDialog, limit = _config__WEBPACK_IMPORTED_MODULE_2__.CHAT_MEDIA_SLICE, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const {
    isSynced
  } = global;
  if (!isSynced || chatMediaSearchParams.isLoading) {
    return;
  }
  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);
  if (direction === undefined) {
    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);
  }
  if (direction === undefined) {
    return;
  }
  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);
  const addOffset = calcChatMediaSearchAddOffset(direction, limit);
  const resultChatId = isSavedDialog ? global.currentUserId : peer.id;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.setChatMediaSearchLoading)(global, resultChatId, threadId, true, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('searchMessagesInChat', {
    peer,
    type: 'media',
    limit,
    threadId,
    offsetId,
    isSavedDialog,
    addOffset
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_8__.getGlobal)();
  if (!result) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.setChatMediaSearchLoading)(global, resultChatId, threadId, false, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
    return;
  }
  const {
    messages,
    userStatusesById
  } = result;
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.buildCollectionByKey)(messages, 'id');
  const newFoundIds = Object.keys(byId).map(Number);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addUserStatuses)(global, userStatusesById);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.addChatMessagesById)(global, resultChatId, byId);
  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);
  const filteredIds = (0,_helpers__WEBPACK_IMPORTED_MODULE_7__.getChatMediaMessageIds)(byId, newFoundIds, false);
  currentSegment = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.mergeWithChatMediaSearchSegment)(filteredIds, loadingState, currentSegment);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updateChatMediaSearchResults)(global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.setChatMediaSearchLoading)(global, resultChatId, threadId, false, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_8__.setGlobal)(global);
}

/***/ }),

/***/ "./src/global/actions/api/payments.ts":
/*!********************************************!*\
  !*** ./src/global/actions/api/payments.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_payments_stripe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/payments/stripe */ "./src/util/payments/stripe.ts");
/* harmony import */ var _util_requestQuery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/requestQuery */ "./src/util/requestQuery.ts");
/* harmony import */ var _util_themeStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/themeStyle */ "./src/util/themeStyle.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _helpers_payments__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../helpers/payments */ "./src/global/helpers/payments.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");














const LOCAL_BOOST_COOLDOWN = 86400; // 24 hours

(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('validateRequestedInfo', (global, actions, payload) => {
  const {
    requestInfo,
    saveInfo,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const inputInvoice = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectPaymentInputInvoice)(global, tabId);
  if (!inputInvoice) {
    return;
  }
  const requestInputInvoice = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_9__.getRequestInputInvoice)(global, inputInvoice);
  if (!requestInputInvoice) {
    return;
  }
  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openInvoice', async (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)(),
    ...inputInvoice
  } = payload;
  const requestInputInvoice = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_9__.getRequestInputInvoice)(global, inputInvoice);
  if (!requestInputInvoice) {
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    isPaymentFormLoading: true
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const theme = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_6__.extractCurrentThemeParams)();
  const form = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('getPaymentForm', requestInputInvoice, theme);
  if (!form) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    isPaymentFormLoading: false
  }, tabId);
  if ('error' in form) {
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    return;
  }
  if (form.type === 'regular') {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updatePayment)(global, {
      inputInvoice: payload,
      form,
      isPaymentModalOpen: true,
      isExtendedMedia: payload.isExtendedMedia,
      status: undefined
    }, tabId);
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setPaymentStep)(global, _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.Checkout, tabId);
  }
  if (form.type === 'stars') {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      starsPayment: {
        inputInvoice,
        form,
        status: 'pending'
      }
    }, tabId);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('sendStarGift', (global, actions, payload) => {
  const {
    gift,
    peerId,
    message,
    shouldHideName,
    shouldUpgrade,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const inputInvoice = {
    type: 'stargift',
    peerId,
    giftId: gift.id,
    message,
    shouldHideName,
    shouldUpgrade: shouldUpgrade || undefined
  };
  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('getReceipt', async (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = chatId && (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!messageId || !chat) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('getReceipt', chat, messageId);
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  if (result.receipt.type === 'stars') {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.openStarsTransactionFromReceipt)(global, result.receipt, tabId);
  } else {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setReceipt)(global, result.receipt, tabId);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('clearPaymentError', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    payment: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).payment,
      error: undefined
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('clearReceipt', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    payment: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).payment,
      receipt: undefined
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('sendCredentialsInfo', (global, actions, payload) => {
  const {
    credentials,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const {
    nativeProvider
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).payment.form;
  const {
    data
  } = credentials;
  if (nativeProvider === 'stripe') {
    const publishableKey = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectProviderPublishableKey)(global, tabId);
    if (!publishableKey) {
      return;
    }
    void sendStripeCredentials(global, data, publishableKey, tabId);
  } else if (nativeProvider === 'smartglocal') {
    const publicToken = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectProviderPublicToken)(global, tabId);
    if (!publicToken) {
      return;
    }
    void sendSmartGlocalCredentials(global, data, publicToken, tabId);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('sendPaymentForm', async (global, actions, payload) => {
  const {
    shippingOptionId,
    saveCredentials,
    savedCredentialId,
    tipAmount,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const requestInfoId = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectPaymentRequestId)(global, tabId);
  const paymentState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).payment;
  const {
    form,
    temporaryPassword,
    inputInvoice
  } = paymentState;
  if (!inputInvoice || !form) {
    return;
  }
  const {
    nativeProvider,
    formId
  } = form;
  const requestInputInvoice = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_9__.getRequestInputInvoice)(global, inputInvoice);
  if (!requestInputInvoice) {
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updatePayment)(global, {
    status: 'pending'
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const credentials = {
    save: saveCredentials,
    data: nativeProvider === 'stripe' ? (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectStripeCredentials)(global, tabId) : (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectSmartGlocalCredentials)(global, tabId)
  };
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('sendPaymentForm', {
    inputInvoice: requestInputInvoice,
    formId,
    credentials,
    requestedInfoId: requestInfoId,
    shippingOptionId,
    savedCredentialId,
    temporaryPassword: temporaryPassword?.value,
    tipAmount
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updatePayment)(global, {
    status: 'paid'
  }, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.closeInvoice)(global, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  actions.apiUpdate({
    '@type': 'updatePaymentStateCompleted',
    paymentState,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('sendStarPaymentForm', async (global, actions, payload) => {
  const {
    directInfo,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const starPayment = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectStarsPayment)(global, tabId);
  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;
  if (!inputInvoice) return;
  const requestInputInvoice = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_9__.getRequestInputInvoice)(global, inputInvoice);
  if (!requestInputInvoice) {
    return;
  }
  const formId = starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateStarsPayment)(global, {
    status: 'pending'
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('sendStarPaymentForm', {
    inputInvoice: requestInputInvoice,
    formId
  });
  if (!result) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateStarsPayment)(global, {
      status: 'failed'
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    actions.closeStarsPaymentModal({
      tabId
    });
    actions.closeGiftModal({
      tabId
    });
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateStarsPayment)(global, {
    status: 'paid'
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  actions.closeStarsPaymentModal({
    tabId
  });
  actions.closeGiftModal({
    tabId
  });
  if ('channelId' in result) {
    actions.openChat({
      id: result.channelId,
      tabId
    });
  }
  actions.apiUpdate({
    '@type': 'updateStarPaymentStateCompleted',
    paymentState: directInfo ? {
      inputInvoice
    } : starPayment,
    tabId
  });
  actions.loadStarStatus();
});
async function sendStripeCredentials(global, data, publishableKey, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const query = (0,_util_requestQuery__WEBPACK_IMPORTED_MODULE_5__.buildQueryString)({
    'card[number]': data.cardNumber,
    'card[exp_month]': data.expiryMonth,
    'card[exp_year]': data.expiryYear,
    'card[cvc]': data.cvv,
    'card[address_zip]': data.zip,
    'card[address_country]': data.country
  });
  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {
    method: 'POST',
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Authorization: `Bearer ${publishableKey}`
    }
  });
  const result = await response.json();
  if (result.error) {
    const error = (0,_util_payments_stripe__WEBPACK_IMPORTED_MODULE_4__.getStripeError)(result.error);
    global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      payment: {
        ...(0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).payment,
        status: 'failed',
        error: {
          ...error
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setStripeCardInfo)(global, {
    type: result.type,
    id: result.id
  }, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setPaymentStep)(global, _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.Checkout, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
}
async function sendSmartGlocalCredentials(global, data, publicToken, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const params = {
    card: {
      number: data.cardNumber.replace(/\D+/g, ''),
      expiration_month: data.expiryMonth,
      expiration_year: data.expiryYear,
      security_code: data.cvv.replace(/\D+/g, '')
    }
  };
  const tokenizeUrl = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).payment.form?.nativeParams.tokenizeUrl;
  let url;
  if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG_PAYMENT_SMART_GLOCAL) {
    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';
  } else {
    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';
  }
  if (tokenizeUrl?.startsWith('https://') && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {
    url = tokenizeUrl;
  }
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
      'X-PUBLIC-TOKEN': publicToken
    },
    body: JSON.stringify(params)
  });
  const result = await response.json();
  if (result.status !== 'ok') {
    // TODO после получения документации сделать аналог getStripeError(result.error);
    const error = {
      descriptionKey: {
        key: 'ErrorUnexpected'
      }
    };
    global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      payment: {
        ...(0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).payment,
        status: 'failed',
        error: {
          ...error
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setSmartGlocalCardInfo)(global, {
    type: 'card',
    token: result.data.token
  }, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setPaymentStep)(global, _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.Checkout, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
}
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('setSmartGlocalCardInfo', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)(),
    type,
    token
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setSmartGlocalCardInfo)(global, {
    type,
    token
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('setPaymentStep', (global, actions, payload) => {
  const {
    step,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setPaymentStep)(global, step ?? _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.Checkout, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('closePremiumModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  if (!tabState.premiumModal) return undefined;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    premiumModal: {
      promo: tabState.premiumModal.promo,
      // Cache promo
      isOpen: false
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openPremiumModal', async (global, actions, payload) => {
  const {
    initialSection,
    fromUserId,
    isSuccess,
    isGift,
    monthsAmount,
    toUserId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  actions.loadPremiumStickers();
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchPremiumPromo');
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    premiumModal: {
      promo: result.promo,
      initialSection,
      isOpen: true,
      fromUserId,
      toUserId,
      isGift,
      monthsAmount,
      isSuccess
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  actions.closeReactionPicker({
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openGiveawayModal', async (global, actions, payload) => {
  const {
    chatId,
    prepaidGiveaway,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('getPremiumGiftCodeOptions', {
    chat
  });
  const starOptions = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchStarsGiveawayOptions');
  if (!result || !starOptions) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    giveawayModal: {
      chatId,
      gifts: result,
      isOpen: true,
      prepaidGiveaway,
      starOptions
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openGiftModal', async (global, actions, payload) => {
  const {
    forUserId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const gifts = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('getPremiumGiftCodeOptions', {});
  if (!gifts) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    giftModal: {
      forPeerId: forUserId,
      gifts
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openStarsGiftModal', async (global, actions, payload) => {
  const {
    forUserId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const starsGiftOptions = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('getStarsGiftOptions', {});
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    starsGiftModal: {
      isOpen: true,
      forUserId,
      starsGiftOptions
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('validatePaymentPassword', async (global, actions, payload) => {
  const {
    password,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchTemporaryPaymentPassword', password);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  if (!result) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updatePayment)(global, {
      error: {
        messageKey: {
          key: 'ErrorUnexpected'
        },
        field: 'password'
      }
    }, tabId);
  } else if ('error' in result) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updatePayment)(global, {
      error: {
        messageKey: result.messageKey,
        field: 'password'
      }
    }, tabId);
  } else {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updatePayment)(global, {
      temporaryPassword: result,
      step: _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.Checkout
    }, tabId);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
async function validateRequestedInfo(global, inputInvoice, requestInfo, shouldSave, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('validateRequestedInfo', {
    inputInvoice,
    requestInfo,
    shouldSave
  });
  if (!result) {
    return;
  }
  const {
    id,
    shippingOptions
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setRequestInfoId)(global, id, tabId);
  if (shippingOptions?.length) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateShippingOptions)(global, shippingOptions, tabId);
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setPaymentStep)(global, _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.Shipping, tabId);
  } else {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.setPaymentStep)(global, _types__WEBPACK_IMPORTED_MODULE_0__.PaymentStep.Checkout, tabId);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
}
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openBoostModal', async (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat || !((0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatChannel)(chat) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatSuperGroup)(chat))) return;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    boostModal: {
      chatId
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchBoostStatus', {
    chat
  });
  if (!result) {
    actions.closeBoostModal({
      tabId
    });
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    boostModal: {
      chatId,
      boostStatus: result
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const myBoosts = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchMyBoosts');
  if (!myBoosts) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  if (!tabState.boostModal) return;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    boostModal: {
      ...tabState.boostModal,
      myBoosts: myBoosts.boosts
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openBoostStatistics', async (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) return;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    boostStatistics: {
      chatId
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const [boostListResult, boostListGiftResult, boostStatusResult] = await Promise.all([(0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchBoostList', {
    chat
  }), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchBoostList', {
    chat,
    isGifts: true
  }), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchBoostStatus', {
    chat
  })]);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      boostStatistics: undefined
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    boostStatistics: {
      chatId,
      boostStatus: boostStatusResult,
      nextOffset: boostListResult.nextOffset,
      boosts: {
        count: boostListResult.count,
        list: boostListResult.boostList
      },
      giftedBoosts: {
        count: boostListGiftResult?.count,
        list: boostListGiftResult?.boostList
      }
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openMonetizationStatistics', (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) return;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    monetizationStatistics: {
      chatId
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadMoreBoosters', async (global, actions, payload) => {
  const {
    isGifts,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  let tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  if (!tabState.boostStatistics) return;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, tabState.boostStatistics.chatId);
  if (!chat) return;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    boostStatistics: {
      ...tabState.boostStatistics,
      isLoadingBoosters: true
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchBoostList', {
    chat,
    offset: tabState.boostStatistics.nextOffset,
    isGifts
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  if (!tabState.boostStatistics) return;
  const updatedBoostList = (isGifts ? tabState.boostStatistics.giftedBoosts?.list || [] : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    boostStatistics: {
      ...tabState.boostStatistics,
      nextOffset: result.nextOffset,
      isLoadingBoosters: false,
      [isGifts ? 'giftedBoosts' : 'boosts']: {
        count: result.count,
        list: updatedBoostList
      }
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('applyBoost', async (global, actions, payload) => {
  const {
    chatId,
    slots,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) return;
  const oldChatFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatFullInfo)(global, chatId);
  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;
  const appliedBoostsCount = slots.length;
  let tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  const oldStatus = tabState.boostModal?.boostStatus;
  if (oldStatus) {
    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;
    const newBoosts = oldStatus.boosts + appliedBoostsCount;
    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;
    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts : oldStatus.currentLevelBoosts;
    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts + boostsPerLevel : oldStatus.nextLevelBoosts;
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      boostModal: {
        ...tabState.boostModal,
        boostStatus: {
          ...oldStatus,
          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,
          currentLevelBoosts: newCurrentLevelBoosts,
          nextLevelBoosts: newNextLevelBoosts,
          hasMyBoost: true,
          boosts: newBoosts
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  const oldMyBoosts = tabState.boostModal?.myBoosts;
  if (oldMyBoosts) {
    const unixNow = Math.floor(Date.now() / 1000);
    const newMyBoosts = oldMyBoosts.map(boost => {
      if (slots.includes(boost.slot)) {
        return {
          ...boost,
          chatId,
          date: unixNow,
          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN // Will be refetched below
        };
      }
      return boost;
    });
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      boostModal: {
        ...tabState.boostModal,
        myBoosts: newMyBoosts
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('applyBoost', {
    slots,
    chat
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  if (!result) {
    // Rollback local changes
    const boostModal = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).boostModal;
    if (boostModal) {
      global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
        boostModal: {
          ...boostModal,
          boostStatus: oldStatus,
          myBoosts: oldMyBoosts
        }
      }, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    }
    return;
  }
  tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  if (oldChatFullInfo) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateChatFullInfo)(global, chatId, {
      boostsApplied: oldBoostsApplied + slots.length
    });
  }
  if (tabState.boostModal) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      boostModal: {
        ...tabState.boostModal,
        myBoosts: result.boosts
      }
    }, tabId);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('checkGiftCode', async (global, actions, payload) => {
  const {
    slug,
    message,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('checkGiftCode', {
    slug
  });
  if (!result) {
    actions.showNotification({
      message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('lng_gift_link_expired'),
      tabId
    });
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    giftCodeModal: {
      slug,
      info: result.code,
      message
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('applyGiftCode', async (global, actions, payload) => {
  const {
    slug,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('applyGiftCode', {
    slug
  });
  if (!result) {
    return;
  }
  actions.requestConfetti({
    withStars: true,
    tabId
  });
  actions.closeGiftCodeModal({
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('launchPrepaidGiveaway', async (global, actions, payload) => {
  const {
    chatId,
    giveawayId,
    paymentPurpose,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) return;
  const additionalChannels = paymentPurpose?.additionalChannelIds?.map(id => (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, id)).filter(Boolean);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('launchPrepaidGiveaway', {
    chat,
    giveawayId,
    paymentPurpose: {
      type: 'giveaway',
      chat,
      areWinnersVisible: paymentPurpose?.areWinnersVisible,
      additionalChannels,
      countries: paymentPurpose?.countries,
      prizeDescription: paymentPurpose.prizeDescription,
      untilDate: paymentPurpose.untilDate,
      currency: paymentPurpose.currency,
      amount: paymentPurpose.amount
    }
  });
  if (!result) {
    return;
  }
  actions.openBoostStatistics({
    chatId,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('launchPrepaidStarsGiveaway', async (global, actions, payload) => {
  const {
    chatId,
    giveawayId,
    paymentPurpose,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) return;
  const additionalChannels = paymentPurpose?.additionalChannelIds?.map(id => (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, id)).filter(Boolean);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('launchPrepaidGiveaway', {
    chat,
    giveawayId,
    paymentPurpose: {
      type: 'starsgiveaway',
      chat,
      areWinnersVisible: paymentPurpose?.areWinnersVisible,
      additionalChannels,
      countries: paymentPurpose?.countries,
      prizeDescription: paymentPurpose.prizeDescription,
      untilDate: paymentPurpose.untilDate,
      currency: paymentPurpose.currency,
      amount: paymentPurpose.amount,
      stars: paymentPurpose.stars,
      users: paymentPurpose.users
    }
  });
  if (!result) {
    return;
  }
  actions.openBoostStatistics({
    chatId,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('upgradeGift', (global, actions, payload) => {
  const {
    gift,
    shouldKeepOriginalDetails,
    upgradeStars,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const requestSavedGift = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_9__.getRequestInputSavedStarGift)(global, gift);
  if (!requestSavedGift) {
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    isWaitingForStarGiftUpgrade: true
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  actions.closeGiftUpgradeModal({
    tabId
  });
  actions.closeGiftInfoModal({
    tabId
  });
  if (!upgradeStars) {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('upgradeGift', {
      inputSavedGift: requestSavedGift,
      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined
    });
    return;
  }
  const invoice = {
    type: 'stargiftUpgrade',
    inputSavedGift: gift,
    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined
  };
  payInputStarInvoice(global, invoice, upgradeStars, tabId);
});
async function payInputStarInvoice(global, inputInvoice, price, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const actions = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getActions)();
  const balance = global.stars?.balance;
  if (balance === undefined) return;
  if (balance.amount < price) {
    actions.openStarsBalanceModal({
      tabId
    });
    return;
  }
  const requestInputInvoice = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_9__.getRequestInputInvoice)(global, inputInvoice);
  if (!requestInputInvoice) {
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    isPaymentFormLoading: true
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const theme = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_6__.extractCurrentThemeParams)();
  const form = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('getPaymentForm', requestInputInvoice, theme);
  if (!form) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    isPaymentFormLoading: false
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  if ('error' in form) {
    return;
  }
  actions.sendStarPaymentForm({
    directInfo: {
      inputInvoice,
      formId: form.formId
    },
    tabId
  });
}
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('openUniqueGiftBySlug', async (global, actions, payload) => {
  const {
    slug,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const gift = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchUniqueStarGift', {
    slug
  });
  if (!gift) {
    actions.showNotification({
      message: {
        key: 'GiftWasNotFound'
      },
      tabId
    });
    return;
  }
  actions.openGiftInfoModal({
    gift,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('processStarGiftWithdrawal', async (global, actions, payload) => {
  const {
    gift,
    password,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  let giftWithdrawModal = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).giftWithdrawModal;
  if (!giftWithdrawModal) return;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    giftWithdrawModal: {
      ...giftWithdrawModal,
      isLoading: true,
      errorKey: undefined
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const inputGift = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_9__.getRequestInputSavedStarGift)(global, gift);
  if (!inputGift) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchStarGiftWithdrawalUrl', {
    inputGift,
    password
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  giftWithdrawModal = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).giftWithdrawModal;
  if (!giftWithdrawModal) return;
  if ('error' in result) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
      giftWithdrawModal: {
        ...giftWithdrawModal,
        isLoading: false,
        errorKey: result.messageKey
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    return;
  }
  actions.openUrl({
    url: result.url,
    shouldSkipModal: true,
    tabId
  });
  actions.closeGiftWithdrawModal({
    tabId
  });
});

/***/ }),

/***/ "./src/global/actions/api/reactions.ts":
/*!*********************************************!*\
  !*** ./src/global/actions/api/reactions.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_requestActionTimeout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/requestActionTimeout */ "./src/util/requestActionTimeout.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_reactions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../reducers/reactions */ "./src/global/reducers/reactions.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");














const INTERACTION_RANDOM_OFFSET = 40;
let interactionLocalId = 0;
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadAvailableReactions', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchAvailableReactions');
  if (!result) {
    return;
  }

  // Preload animations
  result.forEach(availableReaction => {
    if (availableReaction.aroundAnimation) {
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__.fetch(`sticker${availableReaction.aroundAnimation.id}`, _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl);
    }
    if (availableReaction.centerIcon) {
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__.fetch(`sticker${availableReaction.centerIcon.id}`, _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl);
    }
    if (availableReaction.appearAnimation) {
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__.fetch(`sticker${availableReaction.appearAnimation.id}`, _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl);
    }
    if (availableReaction.selectAnimation) {
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__.fetch((0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getDocumentMediaHash)(availableReaction.selectAnimation, 'full'), _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl);
    }
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    reactions: {
      ...global.reactions,
      availableReactions: result
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  (0,_util_requestActionTimeout__WEBPACK_IMPORTED_MODULE_6__["default"])({
    action: 'loadAvailableReactions',
    payload: undefined
  }, _config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_REFETCH_INTERVAL);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadAvailableEffects', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchAvailableEffects');
  if (!result) {
    return;
  }
  const {
    effects,
    emojis,
    stickers
  } = result;
  const reactions = [];
  const effectById = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.buildCollectionByKey)(effects, 'id');
  for (const effect of effects) {
    if (effect.effectAnimationId) {
      const reaction = {
        type: 'emoji',
        emoticon: effect.emoticon
      };
      reactions.push(reaction);
    }
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    availableEffectById: effectById,
    stickers: {
      ...global.stickers,
      effect: {
        stickers,
        emojis
      }
    },
    reactions: {
      ...global.reactions,
      effectReactions: reactions
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('interactWithAnimatedEmoji', (global, actions, payload) => {
  const {
    emoji,
    x,
    y,
    startSize,
    isReversed,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const activeEmojiInteraction = {
    id: interactionLocalId++,
    animatedEffect: emoji,
    x: (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.subtractXForEmojiInteraction)(global, x) + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,
    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,
    startSize,
    isReversed
  };
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    activeEmojiInteractions: [...((0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction]
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('sendEmojiInteraction', (global, actions, payload) => {
  const {
    messageId,
    chatId,
    emoji,
    interactions
  } = payload;
  if (global.connectionState !== 'connectionStateReady') return;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat || !emoji || (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectIsChatWithSelf)(global, chatId)) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('sendEmojiInteraction', {
    chat,
    messageId,
    emoticon: emoji,
    timestamps: interactions
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('sendDefaultReaction', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const reaction = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectDefaultReaction)(global, chatId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatMessage)(global, chatId, messageId);
  if (!reaction || !message || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageLocal)(message)) return;
  actions.toggleReaction({
    chatId,
    messageId,
    reaction,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('toggleReaction', async (global, actions, payload) => {
  const {
    chatId,
    reaction,
    shouldAddToRecent,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  let {
    messageId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  let message = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatMessage)(global, chatId, messageId);
  if (!chat || !message) {
    return;
  }
  const isInSaved = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectIsChatWithSelf)(global, chatId);
  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;
  const documentGroupFirstMessageId = isInDocumentGroup ? (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectMessageIdsByGroupId)(global, chatId, message.groupedId)[0] : undefined;
  message = isInDocumentGroup ? (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatMessage)(global, chatId, documentGroupFirstMessageId) || message : message;
  messageId = message?.id || messageId;
  const userReactions = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getUserReactions)(message);
  const hasReaction = userReactions.some(userReaction => (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isSameReaction)(userReaction, reaction));
  const newUserReactions = hasReaction ? userReactions.filter(userReaction => !(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isSameReaction)(userReaction, reaction)) : [...userReactions, reaction];
  const limit = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectMaxUserReactions)(global);
  const [paidReactions, regularReactions] = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.partition)(newUserReactions, r => r.type === 'paid');
  const trimmedRegularReactions = regularReactions.slice(-limit);
  const localReactions = [...paidReactions, ...trimmedRegularReactions];
  const messageKey = (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageKey)(message);
  if ((0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectPerformanceSettingsValue)(global, 'reactionEffects')) {
    if (hasReaction) {
      actions.stopActiveReaction({
        containerId: messageKey,
        reaction,
        tabId
      });
    } else {
      actions.startActiveReaction({
        containerId: messageKey,
        reaction,
        tabId
      });
    }
  }
  global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.addMessageReaction)(global, message, localReactions);
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  try {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('sendReaction', {
      chat,
      messageId,
      reactions: trimmedRegularReactions,
      shouldAddToRecent
    });
    if (isInSaved) {
      actions.loadSavedReactionTags();
    }
  } catch (error) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
    global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.addMessageReaction)(global, message, userReactions);
    (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('addLocalPaidReaction', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    count,
    isPrivate,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatMessage)(global, chatId, messageId);
  if (!chat || !message) {
    return;
  }
  const currentReactions = message.reactions?.results || [];
  const newReactions = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.addPaidReaction)(currentReactions, count, isPrivate);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateChatMessage)(global, message.chatId, message.id, {
    reactions: {
      ...currentReactions,
      results: newReactions
    }
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  const messageKey = (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageKey)(message);
  if ((0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectPerformanceSettingsValue)(global, 'reactionEffects')) {
    actions.startActiveReaction({
      containerId: messageKey,
      reaction: {
        type: 'paid'
      },
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('sendPaidReaction', async (global, actions, payload) => {
  const {
    chatId,
    messageId,
    forcedAmount,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatMessage)(global, chatId, messageId);
  if (!chat || !message) {
    return;
  }
  const paidReaction = message.reactions?.results?.find(r => r.reaction.type === 'paid');
  const count = forcedAmount || paidReaction?.localAmount || 0;
  if (!count) {
    return;
  }
  actions.resetLocalPaidReactions({
    chatId,
    messageId
  });
  try {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('sendPaidReaction', {
      chat,
      messageId,
      count,
      isPrivate: paidReaction?.localIsPrivate
    });
  } catch (error) {
    if (error.message === 'BALANCE_TOO_LOW') {
      actions.openStarsBalanceModal({
        originReaction: {
          chatId,
          messageId,
          amount: count
        },
        tabId
      });
    }
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('startActiveReaction', (global, actions, payload) => {
  const {
    containerId,
    reaction,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectPerformanceSettingsValue)(global, 'reactionEffects')) return undefined;
  const currentActiveReactions = tabState.activeReactions[containerId] || [];
  if (currentActiveReactions.some(active => (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isSameReaction)(active, reaction))) {
    return undefined;
  }
  const newActiveReactions = currentActiveReactions.concat(reaction);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    activeReactions: {
      ...tabState.activeReactions,
      [containerId]: newActiveReactions
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('stopActiveReaction', (global, actions, payload) => {
  const {
    containerId,
    reaction,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  const currentActiveReactions = tabState.activeReactions[containerId] || [];
  // Remove all reactions if reaction is not specified
  const newMessageActiveReactions = reaction ? currentActiveReactions.filter(active => !(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isSameReaction)(active, reaction)) : [];
  const newActiveReactions = newMessageActiveReactions.length ? {
    ...tabState.activeReactions,
    [containerId]: newMessageActiveReactions
  } : (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.omit)(tabState.activeReactions, [containerId]);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    activeReactions: newActiveReactions
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('setDefaultReaction', async (global, actions, payload) => {
  const {
    reaction
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('setDefaultReaction', {
    reaction
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  if (!global.config) {
    actions.loadConfig(); // Refetch new config, if it is somehow not loaded
    return;
  }
  global = {
    ...global,
    config: {
      ...global.config,
      defaultReaction: reaction
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('stopActiveEmojiInteraction', (global, actions, payload) => {
  const {
    id,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    activeEmojiInteractions: (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId).activeEmojiInteractions?.filter(active => active.id !== id)
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadReactors', async (global, actions, payload) => {
  const {
    chatId,
    messageId,
    reaction
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatMessage)(global, chatId, messageId);
  if (!chat || !message) {
    return;
  }
  const offset = message.reactors?.nextOffset;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchMessageReactionsList', {
    reaction,
    chat,
    messageId,
    offset
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateChatMessage)(global, chatId, messageId, {
    reactors: result
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadMessageReactions', (global, actions, payload) => {
  const {
    ids,
    chatId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat || global.connectionState !== 'connectionStateReady') {
    return;
  }
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchMessageReactions', {
    ids,
    chat
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('sendWatchingEmojiInteraction', (global, actions, payload) => {
  const {
    chatId,
    emoticon,
    x,
    y,
    startSize,
    isReversed,
    id,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  if (!chat || !tabState.activeEmojiInteractions?.some(interaction => interaction.id === id) || (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectIsChatWithSelf)(global, chatId)) {
    return undefined;
  }
  if (global.connectionState === 'connectionStateReady') {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('sendWatchingEmojiInteraction', {
      chat,
      emoticon
    });
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    activeEmojiInteractions: tabState.activeEmojiInteractions.map(activeEmojiInteraction => {
      if (activeEmojiInteraction.id === id) {
        return {
          ...activeEmojiInteraction,
          x: (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.subtractXForEmojiInteraction)(global, x),
          y,
          startSize,
          isReversed
        };
      }
      return activeEmojiInteraction;
    })
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('fetchUnreadReactions', async (global, actions, payload) => {
  const {
    chatId,
    offsetId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchUnreadReactions', {
    chat,
    offsetId,
    addOffset: offsetId ? -1 : undefined
  });

  // Server side bug, when server returns unread reactions count > 0 for deleted messages
  if (!result || !result.messages.length) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
    global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.updateUnreadReactions)(global, chatId, {
      unreadReactionsCount: 0
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
    return;
  }
  const {
    messages
  } = result;
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.buildCollectionByKey)(messages, 'id');
  const ids = Object.keys(byId).map(Number);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.addChatMessagesById)(global, chat.id, byId);
  global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.updateUnreadReactions)(global, chatId, {
    unreadReactions: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.unique)([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a)
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('animateUnreadReaction', (global, actions, payload) => {
  const {
    messageIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectCurrentChat)(global, tabId);
  if (!chat) return undefined;
  if (!chat.unreadReactionsCount) {
    return (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.updateUnreadReactions)(global, chat.id, {
      unreadReactions: []
    });
  }
  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);
  const unreadReactions = (chat.unreadReactions || []).filter(id => !messageIds.includes(id));
  global = (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.updateUnreadReactions)(global, chat.id, {
    unreadReactions,
    unreadReactionsCount
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  actions.markMessagesRead({
    messageIds,
    shouldFetchUnreadReactions: true,
    tabId
  });
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectPerformanceSettingsValue)(global, 'reactionEffects')) return undefined;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  messageIds.forEach(id => {
    const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChatMessage)(global, chat.id, id);
    if (!message) return;
    const {
      reaction,
      isOwn,
      isUnread
    } = message.reactions?.recentReactions?.[0] ?? {};
    if (reaction && isUnread && !isOwn) {
      const messageKey = (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageKey)(message);
      actions.startActiveReaction({
        containerId: messageKey,
        reaction,
        tabId: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
      });
    }
  });
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('focusNextReaction', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectCurrentChat)(global, tabId);
  if (!chat?.unreadReactions) {
    if (chat?.unreadReactionsCount) {
      return (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateChat)(global, chat.id, {
        unreadReactionsCount: 0
      });
    }
    return undefined;
  }
  actions.focusMessage({
    chatId: chat.id,
    messageId: chat.unreadReactions[0],
    tabId,
    scrollTargetPosition: 'end'
  });
  actions.markMessagesRead({
    messageIds: [chat.unreadReactions[0]],
    tabId
  });
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('readAllReactions', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectCurrentChat)(global, tabId);
  if (!chat) return undefined;
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('readAllReactions', {
    chat
  });
  return (0,_reducers_reactions__WEBPACK_IMPORTED_MODULE_11__.updateUnreadReactions)(global, chat.id, {
    unreadReactionsCount: undefined,
    unreadReactions: undefined
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadTopReactions', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchTopReactions', {
    hash: global.reactions.hash.topReactions
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    reactions: {
      ...global.reactions,
      topReactions: result.reactions,
      hash: {
        ...global.reactions.hash,
        topReactions: result.hash
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadRecentReactions', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchRecentReactions', {
    hash: global.reactions.hash.recentReactions
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    reactions: {
      ...global.reactions,
      recentReactions: result.reactions,
      hash: {
        ...global.reactions.hash,
        recentReactions: result.hash
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('clearRecentReactions', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('clearRecentReactions');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    reactions: {
      ...global.reactions,
      recentReactions: []
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadDefaultTagReactions', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchDefaultTagReactions', {
    hash: global.reactions.hash.defaultTags
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    reactions: {
      ...global.reactions,
      defaultTags: result.reactions,
      hash: {
        ...global.reactions.hash,
        defaultTags: result.hash
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadSavedReactionTags', async global => {
  const {
    hash
  } = global.savedReactionTags || {};
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchSavedReactionTags', {
    hash
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  const tagsByKey = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.buildCollectionByCallback)(result.tags, tag => [(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getReactionKey)(tag.reaction), tag]);
  global = {
    ...global,
    savedReactionTags: {
      hash: result.hash,
      byKey: tagsByKey
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('editSavedReactionTag', async (global, actions, payload) => {
  const {
    reaction,
    title
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('updateSavedReactionTag', {
    reaction,
    title
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  const tagsByKey = global.savedReactionTags?.byKey;
  if (!tagsByKey) return;
  const key = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getReactionKey)(reaction);
  const tag = tagsByKey[key];
  const newTag = {
    ...tag,
    title
  };
  global = {
    ...global,
    savedReactionTags: {
      ...global.savedReactionTags,
      byKey: {
        ...tagsByKey,
        [key]: newTag
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});

/***/ }),

/***/ "./src/global/actions/api/stars.ts":
/*!*****************************************!*\
  !*** ./src/global/actions/api/stars.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers_payments__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../helpers/payments */ "./src/global/helpers/payments.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");








(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('loadStarStatus', async global => {
  const currentStatus = global.stars;
  const needsTopupOptions = !currentStatus?.topupOptions;
  const [status, topupOptions] = await Promise.all([(0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStarsStatus'), needsTopupOptions ? (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStarsTopupOptions') : undefined]);
  if (!status || needsTopupOptions && !topupOptions) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  global = {
    ...global,
    stars: {
      ...currentStatus,
      balance: status.balance,
      topupOptions: topupOptions || currentStatus.topupOptions,
      history: {
        all: undefined,
        inbound: undefined,
        outbound: undefined
      },
      subscriptions: undefined
    }
  };
  if (status.history) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.appendStarsTransactions)(global, 'all', status.history, status.nextHistoryOffset);
  }
  if (status.subscriptions) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.appendStarsSubscriptions)(global, status.subscriptions, status.nextSubscriptionOffset);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('loadStarsTransactions', async (global, actions, payload) => {
  const {
    type
  } = payload;
  const history = global.stars?.history[type];
  const offset = history?.nextOffset;
  if (history && !offset) return; // Already loaded all

  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStarsTransactions', {
    isInbound: type === 'inbound' || undefined,
    isOutbound: type === 'outbound' || undefined,
    offset: offset || ''
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.updateStarsBalance)(global, result.balance);
  if (result.history) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.appendStarsTransactions)(global, type, result.history, result.nextOffset);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('loadStarGifts', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStarGifts');
  if (!result) {
    return;
  }
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(result, 'id');
  const idsByCategoryName = {
    all: [],
    stock: [],
    limited: []
  };
  const allStarGiftIds = Object.keys(byId);
  const allStarGifts = Object.values(byId);
  const limitedStarGiftIds = allStarGifts.map(gift => gift.isLimited ? gift.id : undefined).filter(Boolean);
  const stockedStarGiftIds = allStarGifts.map(gift => gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined).filter(Boolean);
  idsByCategoryName.all = allStarGiftIds;
  idsByCategoryName.limited = limitedStarGiftIds;
  idsByCategoryName.stock = stockedStarGiftIds;
  allStarGifts.forEach(gift => {
    const starsCategory = gift.stars;
    if (!idsByCategoryName[starsCategory]) {
      idsByCategoryName[starsCategory] = [];
    }
    idsByCategoryName[starsCategory].push(gift.id);
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  global = {
    ...global,
    starGifts: {
      byId,
      idsByCategory: idsByCategoryName
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('loadPeerSavedGifts', async (global, actions, payload) => {
  const {
    peerId,
    shouldRefresh
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPeer)(global, peerId);
  if (!peer) return;
  const currentGifts = global.peers.giftsById[peerId];
  const localNextOffset = currentGifts?.nextOffset;
  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all

  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchSavedStarGifts', {
    peer,
    offset: !shouldRefresh ? localNextOffset : ''
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.replacePeerSavedGifts)(global, peerId, newGifts, result.nextOffset);
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('loadStarsSubscriptions', async global => {
  const subscriptions = global.stars?.subscriptions;
  const offset = subscriptions?.nextOffset;
  if (subscriptions && !offset) return; // Already loaded all

  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.updateStarsSubscriptionLoading)(global, true);
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStarsSubscriptions', {
    offset: offset || ''
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.updateStarsBalance)(global, result.balance);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.appendStarsSubscriptions)(global, result.subscriptions, result.nextOffset);
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('changeStarsSubscription', async (global, actions, payload) => {
  const {
    peerId,
    id,
    isCancelled
  } = payload;
  const peer = peerId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPeer)(global, peerId) : undefined;
  if (peerId && !peer) return;
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('changeStarsSubscription', {
    peer,
    subscriptionId: id,
    isCancelled
  });
  actions.loadStarStatus();
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('fulfillStarsSubscription', async (global, actions, payload) => {
  const {
    peerId,
    id
  } = payload;
  const peer = peerId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectPeer)(global, peerId) : undefined;
  if (peerId && !peer) return;
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fulfillStarsSubscription', {
    peer,
    subscriptionId: id
  });
  actions.loadStarStatus();
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('changeGiftVisibility', async (global, actions, payload) => {
  const {
    gift,
    shouldUnsave
  } = payload;
  const peerId = gift.type === 'user' ? global.currentUserId : gift.chatId;
  const requestInputGift = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_3__.getRequestInputSavedStarGift)(global, gift);
  if (!requestInputGift) return;
  const oldGifts = global.peers.giftsById[peerId];
  if (oldGifts?.gifts?.length) {
    const newGifts = oldGifts.gifts.map(g => {
      if (g.inputGift && (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_3__.areInputSavedGiftsEqual)(g.inputGift, gift)) {
        return {
          ...g,
          isUnsaved: shouldUnsave
        };
      }
      return g;
    });
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.replacePeerSavedGifts)(global, peerId, newGifts, oldGifts.nextOffset);
    (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('saveStarGift', {
    inputGift: requestInputGift,
    shouldUnsave
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  if (!result) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.replacePeerSavedGifts)(global, peerId, oldGifts.gifts, oldGifts.nextOffset);
    (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
    return;
  }

  // Reload gift list to avoid issues with pagination
  actions.loadPeerSavedGifts({
    peerId,
    shouldRefresh: true
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('convertGiftToStars', async (global, actions, payload) => {
  const {
    gift,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const requestInputGift = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_3__.getRequestInputSavedStarGift)(global, gift);
  if (!requestInputGift) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('convertStarGift', {
    inputSavedGift: requestInputGift
  });
  if (!result) {
    return;
  }
  actions.loadPeerSavedGifts({
    peerId: global.currentUserId,
    shouldRefresh: true
  });
  actions.openStarsBalanceModal({
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openGiftUpgradeModal', async (global, actions, payload) => {
  const {
    giftId,
    gift,
    peerId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const samples = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStarGiftUpgradePreview', {
    giftId
  });
  if (!samples) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    giftUpgradeModal: {
      recipientId: peerId,
      gift,
      sampleAttributes: samples
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
});

/***/ }),

/***/ "./src/global/actions/api/statistics.ts":
/*!**********************************************!*\
  !*** ./src/global/actions/api/statistics.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_areDeepEqual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/areDeepEqual */ "./src/util/areDeepEqual.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");






(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadStatistics', async (global, actions, payload) => {
  const {
    chatId,
    isGroup,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChat)(global, chatId);
  const fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, chatId);
  if (!chat || !fullInfo) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', {
    chat,
    dcId: fullInfo.statisticsDcId
  });
  if (!result) {
    return;
  }
  const {
    stats
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateStatistics)(global, chatId, stats, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadChannelMonetizationStatistics', async (global, actions, payload) => {
  const {
    peerId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectPeer)(global, peerId);
  const chatFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, peerId);
  if (!peer) {
    return;
  }
  const dcId = chatFullInfo?.statisticsDcId;
  const stats = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchChannelMonetizationStatistics', {
    peer,
    dcId
  });
  if (!stats) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateChannelMonetizationStatistics)(global, stats, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadMessageStatistics', async (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChat)(global, chatId);
  const fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, chatId);
  if (!chat || !fullInfo) {
    return;
  }
  const dcId = fullInfo.statisticsDcId;
  let result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchMessageStatistics', {
    chat,
    messageId,
    dcId
  });
  if (!result) {
    result = {};
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  const {
    viewsCount,
    forwardsCount,
    reactions
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatMessages)(global, chatId)[messageId] || {};
  result.viewsCount = viewsCount;
  result.forwardsCount = forwardsCount;
  result.reactionsCount = reactions?.results ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0) : undefined;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateMessageStatistics)(global, result, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
  actions.loadMessagePublicForwards({
    chatId,
    messageId,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadMessagePublicForwards', async (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChat)(global, chatId);
  const fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, chatId);
  if (!chat || !fullInfo) {
    return;
  }
  const dcId = fullInfo.statisticsDcId;
  const stats = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId).statistics.currentMessage || {};
  if (stats?.publicForwards && !stats.nextOffset) return;
  const publicForwards = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchMessagePublicForwards', {
    chat,
    messageId,
    dcId,
    offset: stats.nextOffset
  });
  const {
    forwards,
    nextOffset,
    count
  } = publicForwards || {};

  // Api returns the last element from the previous page as the first element
  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length && (0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_0__.areDeepEqual)(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateMessageStatistics)(global, {
    ...stats,
    publicForwards: count || forwards?.length,
    publicForwardsData: (stats.publicForwardsData || []).concat(shouldOmitFirstElement ? forwards.slice(1) : forwards || []),
    nextOffset
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadStatisticsAsyncGraph', async (global, actions, payload) => {
  const {
    chatId,
    token,
    name,
    isPercentage,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, chatId);
  if (!fullInfo) {
    return;
  }
  const dcId = fullInfo.statisticsDcId;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStatisticsAsyncGraph', {
    token,
    dcId,
    isPercentage
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateStatisticsGraph)(global, chatId, name, result, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadStoryStatistics', async (global, actions, payload) => {
  const {
    chatId,
    storyId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChat)(global, chatId);
  const fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, chatId);
  if (!chat || !fullInfo) {
    return;
  }
  const dcId = fullInfo.statisticsDcId;
  let result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStoryStatistics', {
    chat,
    storyId,
    dcId
  });
  if (!result) {
    result = {};
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  const story = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectPeerStory)(global, chatId, storyId);
  const {
    forwardsCount = 0,
    viewsCount = 0,
    reactionsCount = 0
  } = story && 'views' in story && story.views ? story.views : {};
  result.viewsCount = viewsCount;
  result.forwardsCount = forwardsCount;
  result.reactionsCount = reactionsCount;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateStoryStatistics)(global, result, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
  actions.loadStoryPublicForwards({
    chatId,
    storyId,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('loadStoryPublicForwards', async (global, actions, payload) => {
  const {
    chatId,
    storyId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChat)(global, chatId);
  const fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, chatId);
  if (!chat || !fullInfo) {
    return;
  }
  const dcId = fullInfo.statisticsDcId;
  const stats = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId).statistics.currentStory || {};
  if (stats?.publicForwards && !stats.nextOffset) return;
  const {
    publicForwards,
    count,
    nextOffset
  } = (await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchStoryPublicForwards', {
    chat,
    storyId,
    dcId,
    offset: stats.nextOffset
  })) || {};
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateStoryStatistics)(global, {
    ...stats,
    publicForwards: count || publicForwards?.length,
    publicForwardsData: (stats.publicForwardsData || []).concat(publicForwards || []),
    nextOffset
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload) => {
  const {
    peerId,
    currentPassword,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateVerifyMonetizationModal)(global, {
    isLoading: true
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchMonetizationRevenueWithdrawalUrl', {
    peer,
    currentPassword
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.updateVerifyMonetizationModal)(global, {
    isLoading: false,
    errorKey: 'error' in result ? result.messageKey : undefined
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_3__.setGlobal)(global);
  if ('url' in result) {
    actions.openUrl({
      url: result.url,
      shouldSkipModal: true,
      tabId,
      ignoreDeepLinks: true
    });
    actions.closeMonetizationVerificationModal({
      tabId
    });
  }
});

/***/ }),

/***/ "./src/global/actions/api/stories.ts":
/*!*******************************************!*\
  !*** ./src/global/actions/api/stories.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");










const INFINITE_LOOP_MARKER = 100;
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadAllStories', async global => {
  let i = 0;
  while (global.stories.hasNext) {
    if (i++ >= INFINITE_LOOP_MARKER) {
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
        // eslint-disable-next-line no-console
        console.error('`actions/loadAllStories`: Infinite loop detected');
      }
      return;
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    const {
      stateHash,
      hasNext
    } = global.stories;
    if (stateHash && !hasNext) {
      return;
    }
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchAllStories', {
      isFirstRequest: !stateHash,
      stateHash
    });
    if (!result) {
      return;
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    global.stories.stateHash = result.state;
    if ('peerStories' in result) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addStories)(global, result.peerStories);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeersWithStories)(global, result.peerStories);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateStealthMode)(global, result.stealthMode);
      global.stories.hasNext = result.hasMore;
    }
    (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadAllHiddenStories', async global => {
  let i = 0;
  while (global.stories.hasNextInArchive) {
    if (i++ >= INFINITE_LOOP_MARKER) {
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
        // eslint-disable-next-line no-console
        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');
      }
      return;
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    const {
      archiveStateHash,
      hasNextInArchive
    } = global.stories;
    if (archiveStateHash && !hasNextInArchive) {
      return;
    }
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchAllStories', {
      isFirstRequest: !archiveStateHash,
      stateHash: archiveStateHash,
      isHidden: true
    });
    if (!result) {
      return;
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    global.stories.archiveStateHash = result.state;
    if ('peerStories' in result) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addStories)(global, result.peerStories);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeersWithStories)(global, result.peerStories);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateStealthMode)(global, result.stealthMode);
      global.stories.hasNextInArchive = result.hasMore;
    }
    (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadPeerSkippedStories', async (global, actions, payload) => {
  const {
    peerId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeerStories)(global, peerId);
  if (!peer || !peerStories) {
    return;
  }
  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {
    if (!('content' in story)) {
      acc.push(story.id);
    }
    return acc;
  }, []);
  if (skippedStoryIds.length === 0) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchPeerStoriesByIds', {
    peer,
    ids: skippedStoryIds
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addStoriesForPeer)(global, peerId, result.stories, result.pinnedIds);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('viewStory', async (global, actions, payload) => {
  const {
    peerId,
    storyId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  const story = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeerStory)(global, peerId, storyId);
  if (!peer || !story || !('content' in story)) {
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateLastViewedStoryForPeer)(global, peerId, storyId, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  const serverTime = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_3__.getServerTime)();
  if (story.expireDate < serverTime && story.isInProfile) {
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('viewStory', {
      peer,
      storyId
    });
  }
  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;
  if (!isUnread) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('markStoryRead', {
    peer,
    storyId
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateLastReadStoryForPeer)(global, peerId, storyId);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('deleteStory', async (global, actions, payload) => {
  const {
    peerId,
    storyId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('deleteStory', {
    peer,
    storyId
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.removePeerStory)(global, peerId, storyId);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('toggleStoryInProfile', async (global, actions, payload) => {
  const {
    peerId,
    storyId,
    isInProfile
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const story = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeerStory)(global, peerId, storyId);
  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerStory)(global, peerId, storyId, {
    isInProfile
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerProfileStory)(global, peerId, storyId, isInProfile);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('toggleStoryInProfile', {
    peer,
    storyId,
    isInProfile
  });
  if (!result?.length) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerStory)(global, peerId, storyId, {
      isInProfile: currentIsPinned
    });
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerProfileStory)(global, peerId, storyId, currentIsPinned);
    (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('toggleStoryPinnedToTop', async (global, actions, payload) => {
  const {
    peerId,
    storyId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeerStories)(global, peerId);
  if (!peer || !peerStories) {
    return;
  }
  const oldPinnedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPinnedStories)(global, peerId)?.map(s => s.id) || [];
  const isRemoving = oldPinnedIds.includes(storyId);
  const newPinnedIds = isRemoving ? oldPinnedIds.filter(id => id !== storyId) : [...oldPinnedIds, storyId];
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: {
          ...peerStories,
          pinnedIds: newPinnedIds.sort((a, b) => b - a)
        }
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('toggleStoryPinnedToTop', {
    peer,
    storyIds: newPinnedIds
  });
  if (!result) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    global = {
      ...global,
      stories: {
        ...global.stories,
        byPeerId: {
          ...global.stories.byPeerId,
          [peerId]: {
            ...peerStories,
            pinnedIds: oldPinnedIds
          }
        }
      }
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadPeerStories', async (global, actions, payload) => {
  const {
    peerId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchPeerStories', {
    peer
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addStoriesForPeer)(global, peerId, result.stories);
  if (result.lastReadStoryId) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateLastReadStoryForPeer)(global, peerId, result.lastReadStoryId);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadPeerProfileStories', async (global, actions, payload) => {
  const {
    peerId,
    offsetId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeerStories)(global, peerId);
  if (!peer || peerStories?.isFullyLoaded) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchPeerProfileStories', {
    peer,
    offsetId
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  if (Object.values(result.stories).length === 0) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerStoriesFullyLoaded)(global, peerId, true);
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addStoriesForPeer)(global, peerId, result.stories, result.pinnedIds);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadStoriesArchive', async (global, actions, payload) => {
  const {
    peerId,
    offsetId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeerStories)(global, peerId);
  if (!peer || peerStories?.isArchiveFullyLoaded) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchStoriesArchive', {
    peer,
    offsetId
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  if (Object.values(result.stories).length === 0) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerStoriesFullyLoaded)(global, peerId, true, true);
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addStoriesForPeer)(global, peerId, result.stories, undefined, true);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadPeerStoriesByIds', async (global, actions, payload) => {
  const {
    peerId,
    storyIds
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchPeerStoriesByIds', {
    peer,
    ids: storyIds
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.addStoriesForPeer)(global, peerId, result.stories);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadStoryViews', async (global, actions, payload) => {
  const {
    peerId,
    storyId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchStoriesViews', {
    peer,
    storyIds: [storyId]
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerStoryViews)(global, peerId, storyId, result.views);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadStoryViewList', async (global, actions, payload) => {
  const {
    peerId,
    storyId,
    offset,
    areReactionsFirst,
    areJustContacts,
    query,
    limit,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateStoryViewsLoading)(global, true, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchStoryViewList', {
    peer,
    storyId,
    offset,
    areReactionsFirst,
    areJustContacts,
    limit,
    query
  });
  if (!result) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateStoryViewsLoading)(global, false, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateStoryViews)(global, storyId, result.views, result.nextOffset, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('reportStory', async (global, actions, payload) => {
  const {
    peerId,
    storyId,
    description = '',
    option = '',
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const response = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('reportStory', {
    peer,
    storyId,
    description,
    option
  });
  if (!response) return;
  const {
    result,
    error
  } = response;
  if (error === _config__WEBPACK_IMPORTED_MODULE_0__.MESSAGE_ID_REQUIRED_ERROR) {
    actions.showNotification({
      message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_2__.oldTranslate)('lng_report_please_select_messages'),
      tabId
    });
    actions.closeReportModal({
      tabId
    });
    return;
  }
  if (!result) return;
  if (result.type === 'reported') {
    actions.showNotification({
      message: result ? (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_2__.oldTranslate)('ReportPeer.AlertSuccess') : 'An error occurred while submitting your report. Please, try again later.',
      tabId
    });
    actions.closeReportModal({
      tabId
    });
    return;
  }
  if (result.type === 'selectOption') {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    const oldSections = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectTabState)(global, tabId).reportModal?.sections;
    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find(o => o.option === option);
    const newSection = {
      title: result.title,
      options: result.options,
      subtitle: selectedOption?.text
    };
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_8__.updateTabState)(global, {
      reportModal: {
        messageIds: [storyId],
        subject: 'story',
        peerId,
        description,
        sections: oldSections ? [...oldSections, newSection] : [newSection]
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  }
  if (result.type === 'comment') {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
    const oldSections = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectTabState)(global, tabId).reportModal?.sections;
    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find(o => o.option === option);
    const newSection = {
      isOptional: result.isOptional,
      option: result.option,
      title: selectedOption?.text
    };
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_8__.updateTabState)(global, {
      reportModal: {
        messageIds: [storyId],
        description,
        peerId,
        subject: 'story',
        sections: oldSections ? [...oldSections, newSection] : [newSection]
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('editStoryPrivacy', (global, actions, payload) => {
  const {
    peerId,
    storyId,
    privacy
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];
  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];
  const inputPrivacy = (0,_helpers__WEBPACK_IMPORTED_MODULE_5__.buildApiInputPrivacyRules)(global, {
    visibility: privacy.visibility,
    isUnspecified: privacy.isUnspecified,
    allowedIds,
    blockedIds,
    botsPrivacy: 'none'
  });
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('editStoryPrivacy', {
    peer,
    id: storyId,
    privacy: inputPrivacy
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('toggleStoriesHidden', async (global, actions, payload) => {
  const {
    peerId,
    isHidden
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('toggleStoriesHidden', {
    peer,
    isHidden
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeerStoriesHidden)(global, peerId, isHidden);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('loadStoriesMaxIds', async (global, actions, payload) => {
  const {
    peerIds
  } = payload;
  const peers = peerIds.map(peerId => (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId)).filter(Boolean);
  if (!peers.length) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchStoriesMaxIds', {
    peers
  });
  if (!result) return;
  const peerIdsToLoad = [];
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  result.forEach((maxId, i) => {
    const peer = peers[i];
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updatePeer)(global, peer.id, {
      maxStoryId: maxId,
      hasStories: maxId !== 0
    });
    if (maxId !== 0) {
      peerIdsToLoad.push(peer.id);
    }
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  peerIdsToLoad?.forEach(peerId => actions.loadPeerStories({
    peerId
  }));
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('sendStoryReaction', async (global, actions, payload) => {
  const {
    peerId,
    storyId,
    containerId,
    reaction,
    shouldAddToRecent,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeer)(global, peerId);
  if (!peer) return;
  const story = (0,_selectors__WEBPACK_IMPORTED_MODULE_9__.selectPeerStory)(global, peerId, storyId);
  if (!story || !('content' in story)) return;
  const previousReaction = story.sentReaction;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateSentStoryReaction)(global, peerId, storyId, reaction);
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
  if (reaction) {
    actions.startActiveReaction({
      containerId,
      reaction,
      tabId
    });
  } else {
    actions.stopActiveReaction({
      containerId,
      tabId
    });
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('sendStoryReaction', {
    peer,
    storyId,
    reaction,
    shouldAddToRecent
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_6__.getGlobal)();
  if (!result) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_7__.updateSentStoryReaction)(global, peerId, storyId, previousReaction);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_6__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_6__.addActionHandler)('activateStealthMode', (global, actions, payload) => {
  const {
    isForPast = true,
    isForFuture = true
  } = payload || {};
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('activateStealthMode', {
    isForPast: isForPast || true,
    isForFuture: isForFuture || true
  });
});

/***/ }),

/***/ "./src/global/actions/api/symbols.ts":
/*!*******************************************!*\
  !*** ./src/global/actions/api/symbols.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_searchWords__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/searchWords */ "./src/util/searchWords.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _selectors_limits__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../selectors/limits */ "./src/global/selectors/limits.ts");













const ADDED_SETS_THROTTLE = 200;
const ADDED_SETS_THROTTLE_CHUNK = 10;
const searchThrottled = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.throttle)(cb => cb(), 500, false);
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadStickerSets', async (global, actions) => {
  const [addedStickers, addedCustomEmojis] = await Promise.all([(0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchStickerSets', {
    hash: global.stickers.added.hash
  }), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchCustomEmojiSets', {
    hash: global.customEmojis.added.hash
  })]);
  if (!addedCustomEmojis || !addedStickers) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickerSets)(global, 'added', addedStickers.hash, addedStickers.sets);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateCustomEmojiSets)(global, addedCustomEmojis.hash, addedCustomEmojis.sets);
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
  actions.loadCustomEmojis({
    ids: global.recentCustomEmojis
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadAddedStickers', async (global, actions) => {
  const {
    added: {
      setIds: addedSetIds = []
    },
    setsById: cached
  } = global.stickers;
  const {
    added: {
      setIds: customEmojiSetIds = []
    }
  } = global.customEmojis;
  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];
  if (!setIdsToLoad.length) {
    return;
  }
  for (let i = 0; i < setIdsToLoad.length; i++) {
    const id = setIdsToLoad[i];
    if (cached[id]?.stickers) {
      continue; // Already loaded
    }
    actions.loadStickers({
      stickerSetInfo: {
        id,
        accessHash: cached[id].accessHash
      }
    });
    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {
      await (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.pause)(ADDED_SETS_THROTTLE);
    }
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadRecentStickers', global => {
  const {
    hash
  } = global.stickers.recent || {};
  void loadRecentStickers(global, hash);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadFavoriteStickers', async global => {
  const {
    hash
  } = global.stickers.favorite || {};
  const favoriteStickers = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchFavoriteStickers', {
    hash
  });
  if (!favoriteStickers) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    stickers: {
      ...global.stickers,
      favorite: favoriteStickers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadPremiumStickers', async global => {
  const {
    hash
  } = global.stickers.premium || {};
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchStickersForEmoji', {
    emoji: '⭐️⭐️',
    hash
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    stickers: {
      ...global.stickers,
      premium: {
        hash: result.hash,
        stickers: result.stickers
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadGreetingStickers', async global => {
  const {
    hash
  } = global.stickers.greeting || {};
  const greeting = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchStickersForEmoji', {
    emoji: '👋⭐️',
    hash
  });
  if (!greeting) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    stickers: {
      ...global.stickers,
      greeting: {
        hash: greeting.hash,
        stickers: greeting.stickers.filter(sticker => sticker.emoji === '👋')
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadFeaturedStickers', async global => {
  const {
    hash
  } = global.stickers.featured || {};
  const featuredStickers = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchFeaturedStickers', {
    hash
  });
  if (!featuredStickers) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickerSets)(global, 'featured', featuredStickers.hash, featuredStickers.sets);
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadPremiumGifts', async global => {
  const stickerSet = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchPremiumGifts');
  if (!stickerSet) {
    return;
  }
  const {
    set,
    stickers
  } = stickerSet;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    premiumGifts: {
      ...set,
      stickers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadDefaultTopicIcons', async global => {
  const stickerSet = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchDefaultTopicIcons');
  if (!stickerSet) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  const {
    set,
    stickers
  } = stickerSet;
  const fullSet = {
    ...set,
    stickers
  };
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickerSet)(global, fullSet.id, fullSet);
  global = {
    ...global,
    defaultTopicIconsId: fullSet.id
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadDefaultStatusIcons', async global => {
  const stickerSet = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchDefaultStatusEmojis');
  if (!stickerSet) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  const {
    set,
    stickers
  } = stickerSet;
  const fullSet = {
    ...set,
    stickers
  };
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickerSet)(global, fullSet.id, fullSet);
  global = {
    ...global,
    defaultStatusIconsId: fullSet.id
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadStickers', (global, actions, payload) => {
  const {
    stickerSetInfo
  } = payload;
  const cachedSet = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectStickerSet)(global, stickerSetInfo);
  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded
  void loadStickers(global, actions, stickerSetInfo);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadAnimatedEmojis', async global => {
  const [emojis, effects] = await Promise.all([(0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchAnimatedEmojis'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchAnimatedEmojiEffects')]);
  if (!emojis || !effects) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.replaceAnimatedEmojis)(global, {
    ...emojis.set,
    stickers: emojis.stickers
  });
  global = {
    ...global,
    animatedEmojiEffects: {
      ...effects.set,
      stickers: effects.stickers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadBirthdayNumbersStickers', async global => {
  const emojis = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchStickers', {
    stickerSetInfo: {
      shortName: _config__WEBPACK_IMPORTED_MODULE_0__.BIRTHDAY_NUMBERS_SET
    }
  });
  if (!emojis) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    birthdayNumbers: {
      ...emojis.set,
      stickers: emojis.stickers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadRestrictedEmojiStickers', async global => {
  const emojis = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchStickers', {
    stickerSetInfo: {
      shortName: _config__WEBPACK_IMPORTED_MODULE_0__.RESTRICTED_EMOJI_SET
    }
  });
  if (!emojis) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    restrictedEmoji: {
      ...emojis.set,
      stickers: emojis.stickers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadGenericEmojiEffects', async global => {
  const stickerSet = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchGenericEmojiEffects');
  if (!stickerSet) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  const {
    set,
    stickers
  } = stickerSet;
  global = {
    ...global,
    genericEmojiEffects: {
      ...set,
      stickers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadSavedGifs', async global => {
  const {
    hash
  } = global.gifs.saved;
  const savedGifs = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchSavedGifs', {
    hash
  });
  if (!savedGifs) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    gifs: {
      ...global.gifs,
      saved: savedGifs
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('saveGif', async (global, actions, payload) => {
  const {
    gif,
    shouldUnsave,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const length = global.gifs.saved.gifs?.length;
  const limit = (0,_selectors_limits__WEBPACK_IMPORTED_MODULE_11__.selectCurrentLimit)(global, 'savedGifs');
  const premiumLimit = (0,_selectors_limits__WEBPACK_IMPORTED_MODULE_11__.selectPremiumLimit)(global, 'savedGifs');
  const isPremium = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectIsCurrentUserPremium)(global);
  if (!shouldUnsave && length && length >= limit) {
    actions.showNotification({
      title: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),
      message: isPremium ? _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium') : _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('LimitReachedFavoriteGifsSubtitle', premiumLimit.toString()),
      ...(!isPremium && {
        action: {
          action: 'openPremiumModal',
          payload: {
            tabId
          }
        }
      }),
      className: 'bold-link',
      tabId
    });
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('saveGif', {
    gif,
    shouldUnsave
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  const gifs = global.gifs.saved.gifs?.filter(({
    id
  }) => id !== gif.id) || [];
  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];
  global = {
    ...global,
    gifs: {
      ...global.gifs,
      saved: {
        ...global.gifs.saved,
        gifs: newGifs
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('faveSticker', (global, actions, payload) => {
  const {
    sticker,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const current = global.stickers.favorite.stickers.length;
  const limit = (0,_selectors_limits__WEBPACK_IMPORTED_MODULE_11__.selectCurrentLimit)(global, 'stickersFaved');
  const premiumLimit = (0,_selectors_limits__WEBPACK_IMPORTED_MODULE_11__.selectPremiumLimit)(global, 'stickersFaved');
  const isPremium = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectIsCurrentUserPremium)(global);
  if (current >= limit) {
    actions.showNotification({
      title: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),
      message: isPremium ? _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium') : _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('LimitReachedFavoriteStickersSubtitle', premiumLimit.toString()),
      ...(!isPremium && {
        action: {
          action: 'openPremiumModal',
          payload: {
            tabId
          }
        }
      }),
      className: 'bold-link',
      tabId
    });
  }
  if (sticker) {
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('faveSticker', {
      sticker
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('unfaveSticker', (global, actions, payload) => {
  const {
    sticker
  } = payload;
  if (sticker) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();

    // Remove sticker preemptively to get instant feedback when user removes sticker
    // from favorites while in Sticker Picker
    global = {
      ...global,
      stickers: {
        ...global.stickers,
        favorite: {
          ...global.stickers.favorite,
          stickers: global.stickers.favorite.stickers.filter(({
            id
          }) => id !== sticker.id)
        }
      }
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('faveSticker', {
      sticker,
      unfave: true
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('removeRecentSticker', async (global, actions, payload) => {
  const {
    sticker
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('removeRecentSticker', {
    sticker
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  loadRecentStickers(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('clearRecentStickers', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('clearRecentStickers');
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    stickers: {
      ...global.stickers,
      recent: {
        stickers: []
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('toggleStickerSet', (global, actions, payload) => {
  const {
    stickerSetId
  } = payload;
  const stickerSet = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectStickerSet)(global, stickerSetId);
  if (!stickerSet) {
    return;
  }
  const {
    accessHash,
    installedDate,
    isArchived
  } = stickerSet;
  const isInstalled = !isArchived && Boolean(installedDate);
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', {
    stickerSetId,
    accessHash
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadEmojiKeywords', async (global, actions, payload) => {
  const {
    language
  } = payload;
  let currentEmojiKeywords = global.emojiKeywords[language];
  if (currentEmojiKeywords?.isLoading) {
    return;
  }
  global = {
    ...global,
    emojiKeywords: {
      ...global.emojiKeywords,
      [language]: {
        ...currentEmojiKeywords,
        isLoading: true
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
  const emojiKeywords = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchEmojiKeywords', {
    language,
    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  currentEmojiKeywords = global.emojiKeywords[language];
  if (!emojiKeywords) {
    global = {
      ...global,
      emojiKeywords: {
        ...global.emojiKeywords,
        [language]: {
          ...currentEmojiKeywords,
          isLoading: false
        }
      }
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    return;
  }
  global = {
    ...global,
    emojiKeywords: {
      ...global.emojiKeywords,
      [language]: {
        isLoading: false,
        version: emojiKeywords.version,
        keywords: {
          ...currentEmojiKeywords?.keywords,
          ...emojiKeywords.keywords
        }
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
async function loadRecentStickers(global, hash) {
  const recentStickers = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchRecentStickers', {
    hash
  });
  if (!recentStickers) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    stickers: {
      ...global.stickers,
      recent: recentStickers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
}
async function loadStickers(global, actions, stickerSetInfo) {
  let stickerSet;
  try {
    stickerSet = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchStickers', {
      stickerSetInfo
    });
  } catch (error) {
    if (error.message === 'STICKERSET_INVALID') {
      Object.values(global.byTabId).forEach(({
        id: tabId
      }) => {
        actions.showNotification({
          message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate)('StickerPack.ErrorNotFound'),
          tabId
        });
        if ('shortName' in stickerSetInfo && (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {
          global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_9__.updateTabState)(global, {
            openedStickerSetShortName: undefined
          }, tabId);
          (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
        }
      });
      return;
    }
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  if (!stickerSet) {
    // TODO handle this case when sticker cache is implemented
    return;
  }
  const {
    set,
    stickers,
    packs
  } = stickerSet;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickerSet)(global, set.id, {
    ...set,
    stickers,
    packs
  });
  const currentEmoji = global.stickers.forEmoji.emoji;
  if (currentEmoji && packs[currentEmoji]) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.rebuildStickersForEmoji)(global);
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
}
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('setStickerSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  if (query) {
    void searchThrottled(async () => {
      const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('searchStickers', {
        query
      });
      if (!result) {
        return;
      }
      global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
      const {
        setsById,
        added
      } = global.stickers;
      const resultIds = result.sets.map(({
        id
      }) => id);
      if (added.setIds) {
        added.setIds.forEach(id => {
          if (!resultIds.includes(id)) {
            const {
              title
            } = setsById[id] || {};
            if (title && (0,_util_searchWords__WEBPACK_IMPORTED_MODULE_5__["default"])(title, query)) {
              resultIds.unshift(id);
            }
          }
        });
      }
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickerSets)(global, 'search', result.hash, result.sets);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickerSearch)(global, result.hash, resultIds, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('setGifSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  if (typeof query === 'string') {
    void searchThrottled(() => {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('searchMoreGifs', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const {
    query,
    offset
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).gifSearch;
  if (typeof query === 'string') {
    void searchThrottled(() => {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadStickersForEmoji', (global, actions, payload) => {
  const {
    emoji
  } = payload;
  const {
    hash
  } = global.stickers.forEmoji;
  void searchThrottled(async () => {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
    global = {
      ...global,
      stickers: {
        ...global.stickers,
        forEmoji: {
          ...global.stickers.forEmoji,
          emoji
        }
      }
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchStickersForEmoji', {
      emoji,
      hash
    });
    global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
    if (!result || global.stickers.forEmoji.emoji !== emoji) {
      return;
    }
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateStickersForEmoji)(global, emoji, result.stickers, result.hash);
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('clearStickersForEmoji', global => {
  return {
    ...global,
    stickers: {
      ...global.stickers,
      forEmoji: {}
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadCustomEmojiForEmoji', (global, actions, payload) => {
  const {
    emoji
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateCustomEmojiForEmoji)(global, emoji);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('clearCustomEmojiForEmoji', global => {
  return {
    ...global,
    customEmojis: {
      ...global.customEmojis,
      forEmoji: {}
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadFeaturedEmojiStickers', async global => {
  const featuredStickers = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchFeaturedEmojiStickers');
  if (!featuredStickers) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    customEmojis: {
      ...global.customEmojis,
      featuredIds: featuredStickers.sets.map(({
        id
      }) => id),
      byId: {
        ...global.customEmojis.byId,
        ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.buildCollectionByKey)(featuredStickers.sets.flatMap(set => set.stickers || []), 'id')
      }
    },
    stickers: {
      ...global.stickers,
      setsById: {
        ...global.stickers.setsById,
        ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.buildCollectionByKey)(featuredStickers.sets, 'id')
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('openStickerSet', async (global, actions, payload) => {
  const {
    stickerSetInfo,
    shouldIgnoreCache,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  if (shouldIgnoreCache || !(0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectStickerSet)(global, stickerSetInfo)) {
    await loadStickers(global, actions, stickerSetInfo);
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  const set = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectStickerSet)(global, stickerSetInfo);
  if (!set?.shortName) {
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_9__.updateTabState)(global, {
    openedStickerSetShortName: set.shortName
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('loadRecentEmojiStatuses', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('fetchRecentEmojiStatuses');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateRecentStatusCustomEmojis)(global, result.hash, result.emojiStatuses);
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
});
async function searchGifs(global, query, botUsername, offset, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_6__.callApi)('searchGifs', {
    query,
    offset,
    username: botUsername
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateGifSearch)(global, !offset, result.gifs, result.nextOffset, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
}

/***/ }),

/***/ "./src/global/actions/api/sync.ts":
/*!****************************************!*\
  !*** ./src/global/actions/api/sync.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_folderManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/folderManager */ "./src/util/folderManager.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");











const RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;

let releaseStatusTimeout;
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('sync', (global, actions) => {
  if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
    // eslint-disable-next-line no-console
    console.log('>>> START SYNC');
  }
  if (releaseStatusTimeout) {
    clearTimeout(releaseStatusTimeout);
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  global = {
    ...global,
    isSyncing: true
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);

  // Workaround for `isSyncing = true` sometimes getting stuck for some reason
  releaseStatusTimeout = window.setTimeout(() => {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
    global = {
      ...global,
      isSyncing: false
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    releaseStatusTimeout = undefined;
  }, RELEASE_STATUS_TIMEOUT);
  const {
    loadAllChats,
    preloadTopChatMessages,
    loadAllStories,
    loadAllHiddenStories
  } = actions;
  (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_3__.init)();
  loadAllChats({
    listType: 'active',
    whenFirstBatchDone: async () => {
      await loadAndReplaceMessages(global, actions);
      global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
      global = {
        ...global,
        isSyncing: false,
        isSynced: true,
        isFetchingDifference: false
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
      if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
        // eslint-disable-next-line no-console
        console.log('>>> FINISH SYNC');
      }
      loadAllChats({
        listType: 'archived'
      });
      loadAllChats({
        listType: 'saved'
      });
      preloadTopChatMessages();
      loadAllStories();
      loadAllHiddenStories();
    }
  });
});
async function loadAndReplaceMessages(global, actions) {
  let areMessagesLoaded = false;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  let wasReset = false;

  // Memoize drafts
  const draftChatIds = Object.keys(global.messages.byChatId);
  /* eslint-disable @typescript-eslint/indent */
  const draftsByChatId = draftChatIds.reduce((acc, chatId) => {
    acc[chatId] = Object.keys(global.messages.byChatId[chatId].threadsById).reduce((acc2, threadId) => {
      acc2[Number(threadId)] = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omitUndefined)({
        draft: (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectDraft)(global, chatId, Number(threadId)),
        editingId: (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectEditingId)(global, chatId, Number(threadId)),
        editingDraft: (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectEditingDraft)(global, chatId, Number(threadId))
      });
      return acc2;
    }, {});
    return acc;
  }, {});
  /* eslint-enable @typescript-eslint/indent */

  // Memoize last messages
  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatMessage)(global, chatId, Number(messageId))).filter(Boolean);
  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map(messageId => (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatMessage)(global, global.currentUserId, Number(messageId))).filter(Boolean);
  for (const {
    id: tabId
  } of Object.values(global.byTabId)) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
    const {
      chatId: currentChatId,
      threadId: currentThreadId
    } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMessageList)(global, tabId) || {};
    const activeThreadId = currentThreadId || _api_types__WEBPACK_IMPORTED_MODULE_1__.MAIN_THREAD_ID;
    const threadInfo = currentChatId && currentThreadId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectThreadInfo)(global, currentChatId, currentThreadId) : undefined;
    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;
    if (currentChatId && currentChat) {
      const [result, resultDiscussion] = await Promise.all([loadTopMessages(global, currentChatId, activeThreadId), activeThreadId !== _api_types__WEBPACK_IMPORTED_MODULE_1__.MAIN_THREAD_ID && !(0,_helpers__WEBPACK_IMPORTED_MODULE_6__.getIsSavedDialog)(currentChat.id, activeThreadId, global.currentUserId) ? (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('fetchDiscussionMessage', {
        chat: currentChat,
        messageId: Number(activeThreadId)
      }) : undefined]);
      global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
      const {
        chatId: newCurrentChatId
      } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMessageList)(global, tabId) || {};
      if (result && newCurrentChatId === currentChatId) {
        const currentChatMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatMessages)(global, currentChatId);
        const localMessages = currentChatId === _config__WEBPACK_IMPORTED_MODULE_2__.SERVICE_NOTIFICATIONS_USER_ID ? global.serviceNotifications.filter(({
          isDeleted
        }) => !isDeleted).map(({
          message
        }) => message) : [];
        const topics = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTopics)(global, currentChatId);
        const topicLastMessages = topics ? Object.values(topics).map(({
          lastMessageId
        }) => currentChatMessages[lastMessageId]).filter(Boolean) : [];
        const resultMessageIds = result.messages.map(({
          id
        }) => id);
        const messagesThreadInfos = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.pick)(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);
        const isDiscussionStartLoaded = !result.messages.length || result.messages.some(({
          id
        }) => id === resultDiscussion?.firstMessageId);
        const threadStartMessages = isDiscussionStartLoaded && resultDiscussion?.topMessages || [];
        const allMessages = threadStartMessages.concat(result.messages, localMessages);
        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);
        const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.buildCollectionByKey)(allMessagesWithTopicLastMessages, 'id');
        const listedIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.unique)(allMessages.map(({
          id
        }) => id));
        if (!wasReset) {
          global = {
            ...global,
            messages: {
              ...global.messages,
              byChatId: {}
            }
          };
          // eslint-disable-next-line @typescript-eslint/no-loop-func
          Object.values(global.byTabId).forEach(({
            id: otherTabId
          }) => {
            global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_9__.updateTabState)(global, {
              tabThreads: {}
            }, otherTabId);
          });
          wasReset = true;
        }
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.addChatMessagesById)(global, currentChatId, byId);
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateListedIds)(global, currentChatId, activeThreadId, listedIds);

        // eslint-disable-next-line @typescript-eslint/no-loop-func
        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {
          if (!thread?.threadInfo) return;
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateThreadInfo)(global, currentChatId, id, thread.threadInfo);
        });
        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== _api_types__WEBPACK_IMPORTED_MODULE_1__.MAIN_THREAD_ID) {
          global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateThreadInfo)(global, currentChatId, activeThreadId, {
            ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.pick)(threadInfo, ['fromChannelId', 'fromMessageId'])
          });
        }
        // eslint-disable-next-line @typescript-eslint/no-loop-func
        Object.values(global.byTabId).forEach(({
          id: otherTabId
        }) => {
          const {
            chatId: otherChatId,
            threadId: otherThreadId
          } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectCurrentMessageList)(global, otherTabId) || {};
          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {
            global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.safeReplaceViewportIds)(global, currentChatId, activeThreadId, listedIds, otherTabId);
          }
        });
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateChats)(global, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.buildCollectionByKey)(result.chats, 'id'));
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateUsers)(global, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.buildCollectionByKey)(result.users, 'id'));
        areMessagesLoaded = true;
      }
    }
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    if (currentChat?.isForum) {
      actions.loadTopics({
        chatId: currentChatId,
        force: true
      });
      if (currentThreadId && currentThreadId !== _api_types__WEBPACK_IMPORTED_MODULE_1__.MAIN_THREAD_ID) {
        actions.loadTopicById({
          chatId: currentChatId,
          topicId: Number(currentThreadId),
          shouldCloseChatOnError: true
        });
      }
    }
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  if (!areMessagesLoaded) {
    global = {
      ...global,
      messages: {
        ...global.messages,
        byChatId: {}
      }
    };
    // eslint-disable-next-line @typescript-eslint/no-loop-func
    Object.values(global.byTabId).forEach(({
      id: otherTabId
    }) => {
      global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_9__.updateTabState)(global, {
        tabThreads: {}
      }, otherTabId);
    });
  }

  // Restore drafts
  // eslint-disable-next-line @typescript-eslint/no-loop-func
  Object.keys(draftsByChatId).forEach(chatId => {
    const threads = draftsByChatId[chatId];
    Object.keys(threads).forEach(threadId => {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.updateThread)(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);
    });
  });

  // Restore last messages
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.addMessages)(global, lastMessages);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_8__.addMessages)(global, savedLastMessages);
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
  Object.values(global.byTabId).forEach(({
    id: tabId
  }) => {
    const {
      chatId: audioChatId,
      messageId: audioMessageId
    } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global, tabId).audioPlayer;
    if (audioChatId && audioMessageId && !(0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChatMessage)(global, audioChatId, audioMessageId)) {
      actions.closeAudioPlayer({
        tabId
      });
    }
  });
}
function loadTopMessages(global, chatId, threadId) {
  const currentUserId = global.currentUserId;
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.getIsSavedDialog)(chatId, threadId, currentUserId);
  const realChatId = isSavedDialog ? String(threadId) : chatId;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, realChatId);
  return (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApi)('fetchMessages', {
    chat,
    threadId,
    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,
    addOffset: -(Math.round(_config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE / 2) + 1),
    limit: _config__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_LIST_SLICE,
    isSavedDialog
  });
}
let previousGlobal;
// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component
(0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.addCallback)(global => {
  const {
    connectionState,
    authState,
    isSynced
  } = global;
  const {
    isMasterTab
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_10__.selectTabState)(global);
  if (!isMasterTab || isSynced || previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) {
    previousGlobal = global;
    return;
  }
  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {
    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.getActions)().sync();
  }
  previousGlobal = global;
});

/***/ }),

/***/ "./src/global/actions/api/twoFaSettings.ts":
/*!*************************************************!*\
  !*** ./src/global/actions/api/twoFaSettings.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");



(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('loadPasswordInfo', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_0__.callApi)('getPasswordInfo');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.replaceSettings)(global, {
    hasPassword: result.hasPassword
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    hint: result.hint
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('checkPassword', async (global, actions, payload) => {
  const {
    currentPassword,
    onSuccess
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: true,
    errorKey: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  const isSuccess = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_0__.callApi)('checkPassword', currentPassword);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: false
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  if (isSuccess) {
    onSuccess();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('clearPassword', async (global, actions, payload) => {
  const {
    currentPassword,
    onSuccess
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: true,
    errorKey: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  const isSuccess = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_0__.callApi)('clearPassword', currentPassword);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: false
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  if (isSuccess) {
    onSuccess();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('updatePassword', async (global, actions, payload) => {
  const {
    currentPassword,
    password,
    hint,
    email,
    onSuccess
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: true,
    errorKey: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  const isSuccess = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_0__.callApi)('updatePassword', currentPassword, password, hint, email);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: false
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  if (isSuccess) {
    onSuccess();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('updateRecoveryEmail', async (global, actions, payload) => {
  const {
    currentPassword,
    email,
    onSuccess
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: true,
    errorKey: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  const isSuccess = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_0__.callApi)('updateRecoveryEmail', currentPassword, email);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    isLoading: false,
    waitingEmailCodeLength: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_1__.setGlobal)(global);
  if (isSuccess) {
    onSuccess();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('provideTwoFaEmailCode', (global, actions, payload) => {
  const {
    code
  } = payload;
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_0__.callApi)('provideRecoveryEmailCode', code);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('clearTwoFaError', global => {
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateTwoFaSettings)(global, {
    errorKey: undefined
  });
});

/***/ }),

/***/ "./src/global/actions/api/users.ts":
/*!*****************************************!*\
  !*** ./src/global/actions/api/users.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");













const PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;
const TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min
const runThrottledForSearch = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_5__.throttle)(cb => cb(), 500, false);
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadFullUser', async (global, actions, payload) => {
  const {
    userId,
    withPhotos
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUser)(global, userId);
  if (!user) {
    return;
  }
  const {
    id,
    accessHash
  } = user;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchFullUser', {
    id,
    accessHash
  });
  if (!result?.user) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  const fullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUserFullInfo)(global, userId);
  const {
    user: newUser,
    fullInfo: newFullInfo
  } = result;
  const profilePhotos = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectPeerPhotos)(global, userId);
  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;
  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;
  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;
  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;
  const hasChangedPhoto = hasChangedAvatar || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUser)(global, userId, result.user);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUserFullInfo)(global, userId, result.fullInfo);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUsers)(global, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.buildCollectionByKey)(result.users, 'id'));
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateChats)(global, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.buildCollectionByKey)(result.chats, 'id'));
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  if (withPhotos || profilePhotos?.count && hasChangedPhoto) {
    actions.loadMoreProfilePhotos({
      peerId: userId,
      shouldInvalidateCache: true
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadUser', async (global, actions, payload) => {
  const {
    userId
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUser)(global, userId);
  if (!user) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchUsers', {
    users: [user]
  });
  if (!result) {
    return;
  }
  const {
    users,
    userStatusesById
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUsers)(global, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.buildCollectionByKey)(users, 'id'));
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.replaceUserStatuses)(global, {
    ...global.users.statusesById,
    ...userStatusesById
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadTopUsers', async global => {
  const {
    topPeers: {
      lastRequestedAt
    }
  } = global;
  if (!(!lastRequestedAt || (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_6__.getServerTime)() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchTopUsers');
  if (!result) {
    return;
  }
  const {
    ids
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    topPeers: {
      ...global.topPeers,
      userIds: ids,
      lastRequestedAt: (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_6__.getServerTime)()
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadContactList', async global => {
  const contactList = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchContactList');
  if (!contactList) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.addUserStatuses)(global, contactList.userStatusesById);

  // Sort contact list by Last Name (or First Name), with latin names being placed first
  const getCompareString = user => user.lastName || user.firstName || '';
  const collator = new Intl.Collator('en-US');
  const sortedUsers = contactList.users.sort((a, b) => collator.compare(getCompareString(a), getCompareString(b))).filter(user => !user.isSelf);
  global = {
    ...global,
    contactList: {
      userIds: sortedUsers.map(user => user.id)
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadCurrentUser', () => {
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchCurrentUser');
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadCommonChats', async (global, actions, payload) => {
  const {
    userId
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUser)(global, userId);
  const commonChats = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUserCommonChats)(global, userId);
  if (!user || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserBot)(user) || commonChats?.isFullyLoaded) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchCommonChats', user, commonChats?.maxId);
  if (!result) {
    return;
  }
  const {
    chatIds,
    count
  } = result;
  const ids = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.unique)((commonChats?.ids || []).concat(chatIds));
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUserCommonChats)(global, user.id, {
    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,
    ids,
    isFullyLoaded: ids.length >= count
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('updateContact', async (global, actions, payload) => {
  const {
    userId,
    isMuted = false,
    firstName,
    lastName,
    shouldSharePhoneNumber,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUser)(global, userId);
  if (!user) {
    return;
  }
  actions.updateChatMutedState({
    chatId: userId,
    isMuted
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.InProgress, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  let result;
  if (!user.isContact && user.phoneNumber) {
    result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('importContact', {
      phone: user.phoneNumber,
      firstName,
      lastName
    });
  } else {
    const {
      id,
      accessHash
    } = user;
    result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('updateContact', {
      id,
      accessHash,
      phoneNumber: '',
      firstName,
      lastName,
      shouldSharePhoneNumber
    });
  }
  if (result) {
    actions.loadChatSettings({
      chatId: userId
    });
    actions.loadPeerStories({
      peerId: userId
    });
    global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUser)(global, user.id, {
      firstName,
      lastName
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Complete, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.closeNewContactDialog)(global, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('deleteContact', async (global, actions, payload) => {
  const {
    userId
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUser)(global, userId);
  if (!user) {
    return;
  }
  const {
    id,
    accessHash
  } = user;
  await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('deleteContact', {
    id,
    accessHash
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('loadMoreProfilePhotos', async (global, actions, payload) => {
  const {
    peerId,
    shouldInvalidateCache,
    isPreload
  } = payload;
  const isPrivate = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserId)(peerId);
  const user = isPrivate ? (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUser)(global, peerId) : undefined;
  const chat = !isPrivate ? (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectChat)(global, peerId) : undefined;
  const peer = user || chat;
  const profilePhotos = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectPeerPhotos)(global, peerId);
  if (!peer?.avatarPhotoId) {
    return;
  }
  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updatePeerPhotosIsLoading)(global, peerId, true);
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  let userFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectUserFullInfo)(global, peerId);
  let chatFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectChatFullInfo)(global, peerId);
  if (user && !userFullInfo) {
    const {
      id,
      accessHash
    } = user;
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchFullUser', {
      id,
      accessHash
    });
    if (!result?.user) {
      return;
    }
    userFullInfo = result.fullInfo;
  }
  if (chat && !chatFullInfo) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchFullChat', chat);
    if (!result?.fullInfo) {
      return;
    }
    chatFullInfo = result.fullInfo;
  }
  const peerFullInfo = userFullInfo || chatFullInfo;
  if (!peerFullInfo) return;
  const offset = profilePhotos?.nextOffset;
  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchProfilePhotos', {
    peer,
    offset,
    limit
  });
  if (!result || !result.photos) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  const {
    photos,
    count,
    nextOffsetId
  } = result;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updatePeerPhotos)(global, peerId, {
    newPhotos: photos,
    count,
    nextOffset: nextOffsetId,
    fullInfo: peerFullInfo,
    shouldInvalidateCache
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('setUserSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  if (!query) return;
  void runThrottledForSearch(async () => {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('searchChats', {
      query
    });
    global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
    const currentSearchQuery = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectTabState)(global, tabId).userSearch.query;
    if (!result || !currentSearchQuery || query !== currentSearchQuery) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUserSearchFetchingStatus)(global, false, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
      return;
    }
    const {
      accountResultIds,
      globalResultIds
    } = result;
    const localUserIds = accountResultIds.filter(_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserId);
    const globalUserIds = globalResultIds.filter(_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserId);
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUserSearchFetchingStatus)(global, false, tabId);
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUserSearch)(global, {
      localUserIds,
      globalUserIds
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('importContact', async (global, actions, payload) => {
  const {
    phoneNumber: phone,
    firstName,
    lastName,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('importContact', {
    phone,
    firstName,
    lastName
  });
  if (!result) {
    actions.showNotification({
      message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_4__.oldTranslate('Contacts.PhoneNumber.NotRegistred'),
      tabId
    });
    return;
  }
  actions.openChat({
    id: result,
    tabId
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.closeNewContactDialog)(global, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('reportSpam', (global, actions, payload) => {
  const {
    chatId
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectPeer)(global, chatId);
  if (!peer) {
    return;
  }
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('reportSpam', peer);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('setEmojiStatus', async (global, actions, payload) => {
  const {
    emojiStatusId,
    referrerWebAppKey,
    expires,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const isCurrentUserPremium = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectIsCurrentUserPremium)(global);
  if (!isCurrentUserPremium) {
    if (referrerWebAppKey) {
      actions.sendWebAppEvent({
        webAppKey: referrerWebAppKey,
        event: {
          eventType: 'emoji_status_failed',
          eventData: {
            error: 'USER_DECLINED'
          }
        },
        tabId
      });
    }
    actions.openPremiumModal({
      initialSection: 'emoji_status',
      tabId
    });
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('updateEmojiStatus', emojiStatusId, expires);
  if (referrerWebAppKey) {
    if (!result) {
      actions.sendWebAppEvent({
        webAppKey: referrerWebAppKey,
        event: {
          eventType: 'emoji_status_failed',
          eventData: {
            error: 'SERVER_ERROR'
          }
        },
        tabId
      });
      return;
    }
    actions.sendWebAppEvent({
      webAppKey: referrerWebAppKey,
      event: {
        eventType: 'emoji_status_set'
      },
      tabId
    });
    actions.showNotification({
      message: {
        key: 'BotSuggestedStatusUpdated'
      },
      customEmojiIconId: emojiStatusId,
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('saveCloseFriends', async (global, actions, payload) => {
  const {
    userIds
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('saveCloseFriends', userIds);
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global.contactList?.userIds.forEach(userId => {
    const {
      isCloseFriend
    } = global.users.byId[userId] || {};
    if (isCloseFriend && !userIds.includes(userId)) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUser)(global, userId, {
        isCloseFriend: undefined
      });
    }
  });
  userIds.forEach(userId => {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUser)(global, userId, {
      isCloseFriend: true
    });
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('openSuggestedStatusModal', async (global, actions, payload) => {
  const {
    customEmojiId,
    duration,
    botId,
    webAppKey,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const customEmoji = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_7__.callApi)('fetchCustomEmoji', {
    documentId: [customEmojiId]
  });
  if (!customEmoji?.[0]) {
    if (webAppKey) {
      actions.sendWebAppEvent({
        webAppKey,
        event: {
          eventType: 'emoji_status_failed',
          eventData: {
            error: 'SUGGESTED_EMOJI_INVALID'
          }
        },
        tabId
      });
    }
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_11__.updateTabState)(global, {
    suggestedStatusModal: {
      customEmojiId,
      duration,
      webAppKey,
      botId
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('markBotVerificationInfoShown', (global, actions, payload) => {
  const {
    peerId
  } = payload;
  const currentPeerIds = global.settings.botVerificationShownPeerIds;
  const newPeerIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.unique)([peerId, ...currentPeerIds]).slice(0, _config__WEBPACK_IMPORTED_MODULE_1__.BOT_VERIFICATION_PEERS_LIMIT);
  global = {
    ...global,
    settings: {
      ...global.settings,
      botVerificationShownPeerIds: newPeerIds
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
});

/***/ }),

/***/ "./src/global/actions/ui/bots.ts":
/*!***************************************!*\
  !*** ./src/global/actions/ui/bots.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers_bots__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers/bots */ "./src/global/reducers/bots.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");






(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openWebAppTab', (global, actions, payload) => {
  const {
    webApp,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  if (!webApp) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.addWebAppToOpenList)(global, webApp, true, true, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('updateWebApp', (global, actions, payload) => {
  const {
    key,
    update,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.updateWebApp)(global, key, update, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeActiveWebApp', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.removeActiveWebAppFromOpenList)(global, tabId);
  if (!(0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.hasOpenedWebApps)(global, tabId)) return (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.replaceIsWebAppModalOpen)(global, false, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openMoreAppsTab', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId);
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    webApps: {
      ...tabState.webApps,
      activeWebAppKey: undefined,
      isMoreAppsTabActive: true
    }
  }, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeMoreAppsTab', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId);
  const openedWebApps = tabState.webApps.openedWebApps;
  const openedWebAppsKeys = Object.keys(openedWebApps);
  const openedWebAppsCount = openedWebAppsKeys.length;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    webApps: {
      ...tabState.webApps,
      isMoreAppsTabActive: false,
      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,
      isModalOpen: openedWebAppsCount > 0
    }
  }, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeWebApp', (global, actions, payload) => {
  const {
    key,
    skipClosingConfirmation,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.removeWebAppFromOpenList)(global, key, skipClosingConfirmation, tabId);
  if (!(0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.hasOpenedWebApps)(global, tabId)) return (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.replaceIsWebAppModalOpen)(global, false, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeWebAppModal', (global, actions, payload) => {
  const {
    shouldSkipConfirmation,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const shouldShowConfirmation = !shouldSkipConfirmation && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.hasOpenedMoreThanOneWebApps)(global, tabId);
  if (shouldShowConfirmation) {
    actions.openWebAppsCloseConfirmationModal({
      tabId
    });
    return global;
  }
  global = (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.clearOpenedWebApps)(global, tabId);
  if (!(0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.hasOpenedWebApps)(global, tabId)) return (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.replaceIsWebAppModalOpen)(global, false, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('changeWebAppModalState', (global, actions, payload) => {
  const {
    state,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.replaceWebAppModalState)(global, state, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('updateMiniAppCachedPosition', (global, actions, payload) => {
  const {
    position
  } = payload;
  global = {
    ...global,
    settings: {
      ...global.settings,
      miniAppsCachedPosition: position
    }
  };
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('updateMiniAppCachedSize', (global, actions, payload) => {
  const {
    size
  } = payload;
  global = {
    ...global,
    settings: {
      ...global.settings,
      miniAppsCachedSize: size
    }
  };
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setWebAppPaymentSlug', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const activeWebApp = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectActiveWebApp)(global, tabId);
  if (!activeWebApp?.url) return undefined;
  const key = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.getWebAppKey)(activeWebApp);
  return (0,_reducers_bots__WEBPACK_IMPORTED_MODULE_3__.updateWebApp)(global, key, {
    slug: payload.slug
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('cancelBotTrustRequest', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    botTrustRequest: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('markBotTrusted', (global, actions, payload) => {
  const {
    botId,
    isWriteAllowed,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const {
    trustedBotIds
  } = global;
  const newTrustedBotIds = new Set(trustedBotIds);
  newTrustedBotIds.add(botId);
  global = {
    ...global,
    trustedBotIds: Array.from(newTrustedBotIds)
  };
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId);
  if (tabState.botTrustRequest?.onConfirm) {
    const {
      action,
      payload: callbackPayload
    } = tabState.botTrustRequest.onConfirm;
    // @ts-ignore
    actions[action]({
      ...callbackPayload,
      isWriteAllowed
    });
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    botTrustRequest: undefined
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('sendWebAppEvent', (global, actions, payload) => {
  const {
    event,
    webAppKey,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const webApp = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectWebApp)(global, webAppKey, tabId);
  if (!webApp) return global;
  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];
  actions.updateWebApp({
    key: webAppKey,
    update: {
      plannedEvents: newPlannedEvents
    },
    tabId
  });
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('cancelAttachBotInstall', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    requestedAttachBotInstall: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('requestAttachBotInChat', (global, actions, payload) => {
  const {
    bot,
    filter,
    startParam,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const currentChatId = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectCurrentMessageList)(global, tabId)?.chatId;
  const supportedFilters = bot.attachMenuPeerTypes?.filter(type => type !== 'self' && filter.includes(type));
  if (!supportedFilters?.length) {
    actions.callAttachBot({
      chatId: currentChatId || bot.id,
      bot,
      startParam,
      tabId
    });
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    requestedAttachBotInChat: {
      bot,
      filter: supportedFilters,
      startParam
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('cancelAttachBotInChat', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    requestedAttachBotInChat: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openEmojiStatusAccessModal', (global, actions, payload) => {
  const {
    bot,
    webAppKey,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  if (!bot || !webAppKey) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    emojiStatusAccessModal: {
      bot,
      webAppKey
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeEmojiStatusAccessModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    emojiStatusAccessModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openLocationAccessModal', (global, actions, payload) => {
  const {
    bot,
    webAppKey,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  if (!bot || !webAppKey) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    locationAccessModal: {
      bot,
      webAppKey
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeLocationAccessModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    locationAccessModal: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/chats.ts":
/*!****************************************!*\
  !*** ./src/global/actions/ui/chats.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");








(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('processOpenChatOrThread', (global, actions, payload) => {
  const {
    chatId,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
    type = 'thread',
    shouldReplaceHistory = false,
    shouldReplaceLast = false,
    noForumTopicPanel,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMessageList)(global, tabId);
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId);
  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
      premiumModal: {
        ...tabState.premiumModal,
        isOpen: false
      }
    }, tabId);
  }
  actions.hideEffectInComposer({
    tabId
  });
  actions.closeStoryViewer({
    tabId
  });
  actions.closeStarsBalanceModal({
    tabId
  });
  actions.closeStarsBalanceModal({
    tabId
  });
  actions.closeStarsTransactionModal({
    tabId
  });
  if (!currentMessageList || currentMessageList.chatId !== chatId || currentMessageList.threadId !== threadId || currentMessageList.type !== type) {
    if (chatId) {
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.replaceTabThreadParam)(global, chatId, threadId, 'replyStack', [], tabId);
      global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
        activeReactions: {},
        shouldPreventComposerAnimation: true
      }, tabId);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.closeMiddleSearch)(global, chatId, threadId, tabId);
    }
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.exitMessageSelectMode)(global, tabId);
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
      isStatisticsShown: false,
      monetizationStatistics: undefined,
      boostStatistics: undefined,
      contentToBeScheduled: undefined,
      ...(chatId !== (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId).forwardMessages.toChatId && {
        forwardMessages: {},
        isShareMessageModalShown: false
      })
    }, tabId);
  }
  if (chatId) {
    const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, chatId);
    if (chat?.isForum && !noForumTopicPanel) {
      actions.openForumPanel({
        chatId,
        tabId
      });
    } else if (chatId !== (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId).forumPanelChatId) {
      actions.closeForumPanel({
        tabId
      });
    }
  }
  actions.updatePageTitle({
    tabId
  });
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.updateCurrentMessageList)(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openPrivateChannel', (global, actions, payload) => {
  const {
    id,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, id);
  if (!chat) {
    actions.showNotification({
      message: {
        key: 'PrivateChannelInaccessible'
      },
      tabId
    });
    return;
  }
  actions.openChat({
    id,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openChatInNewTab', (global, actions, payload) => {
  const {
    chatId,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID
  } = payload;
  const hashUrl = (0,_util_routing__WEBPACK_IMPORTED_MODULE_2__.createMessageHashUrl)(chatId, 'thread', threadId);
  if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_ELECTRON) {
    window.electron.openNewWindow(hashUrl);
  } else {
    window.open(hashUrl, '_blank');
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openPreviousChat', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  actions.updatePageTitle({
    tabId
  });
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.updateCurrentMessageList)(global, undefined, undefined, undefined, undefined, undefined, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openChatWithInfo', (global, actions, payload) => {
  const {
    profileTab,
    forceScrollProfileTab = false,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    ...(0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId),
    isChatInfoShown: true,
    nextProfileTab: profileTab,
    forceScrollProfileTab
  }, tabId);
  global = {
    ...global,
    lastIsChatInfoShown: true
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
  actions.openChat({
    ...payload,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openThreadWithInfo', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    ...(0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTabState)(global, tabId),
    isChatInfoShown: true
  }, tabId);
  global = {
    ...global,
    lastIsChatInfoShown: true
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
  actions.openThread({
    ...payload,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openChatWithDraft', (global, actions, payload) => {
  const {
    chatId,
    text,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
    files,
    filter,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  if (chatId) {
    actions.openThread({
      chatId,
      threadId,
      tabId
    });
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    requestedDraft: {
      chatId,
      text,
      files,
      filter
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('resetChatCreation', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    chatCreation: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('setNewChatMembersDialogState', (global, actions, payload) => {
  const {
    newChatMembersProgress,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    newChatMembersProgress
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('openNextChat', (global, actions, payload) => {
  const {
    targetIndexDelta,
    orderedIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    actions.openChat({
      id: orderedIds[0],
      tabId
    });
    return;
  }
  const position = orderedIds.indexOf(chatId);
  if (position === -1) {
    return;
  }
  const nextId = orderedIds[position + targetIndexDelta];
  actions.openChat({
    id: nextId,
    shouldReplaceHistory: true,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('closeDeleteChatFolderModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    deleteFolderDialogModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('closeChatlistModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    chatlistModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('requestChatTranslation', (global, actions, payload) => {
  const {
    chatId,
    toLanguageCode,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_5__.updateRequestedChatTranslation)(global, chatId, toLanguageCode, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_4__.addActionHandler)('closeChatInviteModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    chatInviteModal: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/globalSearch.ts":
/*!***********************************************!*\
  !*** ./src/global/actions/ui/globalSearch.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");





const MAX_RECENTLY_FOUND_IDS = 10;
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setGlobalSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const {
    chatId,
    currentContent
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).globalSearch;
  const fetchingStatus = query && currentContent !== _types__WEBPACK_IMPORTED_MODULE_0__.GlobalSearchContent.BotApps ? {
    chats: !chatId,
    messages: true
  } : undefined;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateGlobalSearch)(global, {
    globalResults: {},
    localResults: {},
    resultsByType: undefined,
    fetchingStatus,
    query
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setGlobalSearchClosing', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)(),
    isClosing
  } = payload || {};
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateGlobalSearch)(global, {
    isClosing
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('addRecentlyFoundChatId', (global, actions, payload) => {
  const {
    id
  } = payload;
  const {
    recentlyFoundChatIds
  } = global;
  if (!recentlyFoundChatIds) {
    return {
      ...global,
      recentlyFoundChatIds: [id]
    };
  }
  const newRecentIds = recentlyFoundChatIds.filter(chatId => chatId !== id);
  newRecentIds.unshift(id);
  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {
    newRecentIds.pop();
  }
  return {
    ...global,
    recentlyFoundChatIds: newRecentIds
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('clearRecentlyFoundChats', global => {
  return {
    ...global,
    recentlyFoundChatIds: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setGlobalSearchContent', (global, actions, payload) => {
  const {
    content,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateGlobalSearchContent)(global, content, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setGlobalSearchChatId', (global, actions, payload) => {
  const {
    id,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateGlobalSearch)(global, {
    chatId: id,
    query: undefined,
    resultsByType: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/mediaViewer.ts":
/*!**********************************************!*\
  !*** ./src/global/actions/ui/mediaViewer.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");





(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openMediaViewer', (global, actions, payload) => {
  const {
    chatId,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
    messageId,
    mediaIndex,
    isAvatarView,
    isSponsoredMessage,
    origin,
    withDynamicLoading,
    standaloneMedia,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    mediaViewer: {
      ...tabState.mediaViewer,
      chatId,
      threadId,
      messageId,
      mediaIndex: mediaIndex || 0,
      isAvatarView,
      isSponsoredMessage,
      origin,
      standaloneMedia,
      isHidden: false,
      withDynamicLoading
    },
    forwardMessages: {},
    isShareMessageModalShown: false
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeMediaViewer', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const {
    volume,
    isMuted,
    playbackRate,
    isHidden
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).mediaViewer;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    mediaViewer: {
      volume,
      isMuted,
      isHidden,
      playbackRate
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setMediaViewerVolume', (global, actions, payload) => {
  const {
    volume,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    mediaViewer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).mediaViewer,
      volume,
      isMuted: false
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setMediaViewerPlaybackRate', (global, actions, payload) => {
  const {
    playbackRate,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  global = {
    ...global,
    mediaViewer: {
      ...global.mediaViewer,
      lastPlaybackRate: playbackRate
    }
  };
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    mediaViewer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).mediaViewer,
      playbackRate
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setMediaViewerMuted', (global, actions, payload) => {
  const {
    isMuted,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    mediaViewer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).mediaViewer,
      isMuted
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setMediaViewerHidden', (global, actions, payload) => {
  const {
    isHidden,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    mediaViewer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).mediaViewer,
      isHidden
    }
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/messages.ts":
/*!*******************************************!*\
  !*** ./src/global/actions/ui/messages.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_animateScroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/animateScroll */ "./src/util/animateScroll.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/parseHtmlAsFormattedText */ "./src/util/parseHtmlAsFormattedText.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _versionNotification_txt__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../versionNotification.txt */ "./src/versionNotification.txt");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _helpers_messageSummary__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../helpers/messageSummary */ "./src/global/helpers/messageSummary.ts");
/* harmony import */ var _helpers_renderMessageSummaryHtml__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../helpers/renderMessageSummaryHtml */ "./src/global/helpers/renderMessageSummaryHtml.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");





















const FOCUS_DURATION = 1500;
const FOCUS_NO_HIGHLIGHT_DURATION = _config__WEBPACK_IMPORTED_MODULE_2__.SCROLL_MAX_DURATION + _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_END_DELAY;
const POLL_RESULT_OPEN_DELAY_MS = 450;
const VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days
const SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;
let blurTimeout;
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setScrollOffset', (global, actions, payload) => {
  const {
    chatId,
    threadId,
    scrollOffset,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chatId, threadId, 'lastScrollOffset', scrollOffset);
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceTabThreadParam)(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setEditingId', (global, actions, payload) => {
  const {
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return undefined;
  }
  const {
    chatId,
    threadId,
    type
  } = currentMessageList;
  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chatId, threadId, paramName, messageId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setEditingDraft', (global, actions, payload) => {
  const {
    text,
    chatId,
    threadId,
    type
  } = payload;
  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chatId, threadId, paramName, text);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('editLastMessage', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  const chatMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessages)(global, chatId);
  const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectViewportIds)(global, chatId, threadId, tabId);
  if (!chatMessages || !viewportIds) {
    return undefined;
  }
  const lastOwnEditableMessageId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.findLast)(viewportIds, id => {
    return Boolean(chatMessages[id] && (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectAllowedMessageActionsSlow)(global, chatMessages[id], threadId).canEdit);
  });
  if (!lastOwnEditableMessageId) {
    return undefined;
  }
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceThreadParam)(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('replyToNextMessage', (global, actions, payload) => {
  const {
    targetIndexDelta,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const {
    chatId,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return;
  }
  const chatMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessages)(global, chatId);
  const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectViewportIds)(global, chatId, threadId, tabId);
  if (!chatMessages || !viewportIds) {
    return;
  }
  const replyInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectDraft)(global, chatId, threadId)?.replyInfo;
  const isLatest = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectIsViewportNewest)(global, chatId, threadId, tabId);
  let messageId;
  if (!isLatest || !replyInfo?.replyToMsgId) {
    if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
      messageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatLastMessageId)(global, chatId);
    } else {
      const threadInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectThreadInfo)(global, chatId, threadId);
      messageId = threadInfo?.lastMessageId;
    }
  } else {
    const chatMessageKeys = Object.keys(chatMessages);
    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());
    const newIndex = indexOfCurrent + targetIndexDelta;
    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0 ? Number(chatMessageKeys[newIndex]) : undefined;
  }
  actions.updateDraftReplyInfo({
    replyToMsgId: messageId,
    replyToPeerId: undefined,
    quoteText: undefined,
    tabId
  });
  actions.focusMessage({
    chatId,
    threadId,
    messageId: messageId,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openAudioPlayer', (global, actions, payload) => {
  const {
    chatId,
    threadId,
    messageId,
    origin,
    volume,
    playbackRate,
    isMuted,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    audioPlayer: {
      chatId,
      threadId,
      messageId,
      origin: origin ?? tabState.audioPlayer.origin,
      volume: volume ?? tabState.audioPlayer.volume,
      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,
      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive === undefined ? global.audioPlayer.isLastPlaybackRateActive : tabState.audioPlayer.isPlaybackRateActive,
      isMuted: isMuted || tabState.audioPlayer.isMuted
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setAudioPlayerVolume', (global, actions, payload) => {
  const {
    volume,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    audioPlayer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).audioPlayer,
      volume,
      isMuted: false
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setAudioPlayerPlaybackRate', (global, actions, payload) => {
  const {
    playbackRate,
    isPlaybackRateActive,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  global = {
    ...global,
    audioPlayer: {
      ...global.audioPlayer,
      lastPlaybackRate: playbackRate,
      isLastPlaybackRateActive: isPlaybackRateActive
    }
  };
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    audioPlayer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).audioPlayer,
      playbackRate,
      isPlaybackRateActive
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setAudioPlayerMuted', (global, actions, payload) => {
  const {
    isMuted,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    audioPlayer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).audioPlayer,
      isMuted
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setAudioPlayerOrigin', (global, actions, payload) => {
  const {
    origin,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    audioPlayer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).audioPlayer,
      origin
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeAudioPlayer', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    audioPlayer: {
      volume: tabState.audioPlayer.volume,
      playbackRate: tabState.audioPlayer.playbackRate,
      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,
      isMuted: tabState.audioPlayer.isMuted
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openPollResults', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const shouldOpenInstantly = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectIsRightColumnShown)(global, (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_19__.getIsMobile)(), tabId);
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  if (!shouldOpenInstantly) {
    window.setTimeout(() => {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
      global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
        pollResults: {
          chatId,
          messageId,
          voters: {}
        }
      }, tabId);
      (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    }, POLL_RESULT_OPEN_DELAY_MS);
  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {
    return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
      pollResults: {
        chatId,
        messageId,
        voters: {}
      }
    }, tabId);
  }
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closePollResults', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    pollResults: {}
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('focusLastMessage', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return;
  }
  const {
    chatId,
    threadId,
    type
  } = currentMessageList;
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  let lastMessageId;
  if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
    if (type === 'pinned') {
      const pinnedMessageIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectPinnedIds)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID);
      if (!pinnedMessageIds?.length) {
        return;
      }
      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];
    } else {
      lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatLastMessageId)(global, chatId);
      const chatMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessages)(global, chatId);
      // Workaround for scroll to local message 'you joined this channel'
      const lastChatMessage = Object.values(chatMessages).reverse()[0];
      if (lastMessageId && (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.isJoinedChannelMessage)(lastChatMessage) && lastChatMessage.id > lastMessageId) {
        lastMessageId = lastChatMessage.id;
      }
    }
  } else if (isSavedDialog) {
    lastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatLastMessageId)(global, String(threadId), 'saved');
  } else {
    const threadInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectThreadInfo)(global, chatId, threadId);
    lastMessageId = threadInfo?.lastMessageId;
  }
  if (!lastMessageId) {
    return;
  }
  actions.focusMessage({
    chatId,
    threadId,
    messageListType: type,
    messageId: lastMessageId,
    noHighlight: true,
    noForumTopicPanel: true,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('focusNextReply', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return undefined;
  }
  const {
    chatId,
    threadId
  } = currentMessageList;
  const replyStack = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectReplyStack)(global, chatId, threadId, tabId);
  if (!replyStack || replyStack.length === 0) {
    actions.focusLastMessage({
      tabId
    });
  } else {
    const messageId = replyStack.pop();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceTabThreadParam)(global, chatId, threadId, 'replyStack', [...replyStack], tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
    actions.focusMessage({
      chatId,
      threadId,
      messageId: messageId,
      tabId,
      noForumTopicPanel: true
    });
  }
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('focusMessage', (global, actions, payload) => {
  const {
    chatId,
    threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
    messageListType = 'thread',
    noHighlight,
    groupedId,
    groupedChatId,
    replyMessageId,
    isResizingContainer,
    shouldReplaceHistory,
    noForumTopicPanel,
    quote,
    scrollTargetPosition,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  let {
    messageId
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  if (!chat) {
    actions.showNotification({
      message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_7__.oldTranslate)('Conversation.ErrorInaccessibleMessage'),
      tabId
    });
    return undefined;
  }
  if (groupedId !== undefined) {
    const ids = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectForwardedMessageIdsByGroupId)(global, groupedChatId, groupedId);
    if (ids?.length) {
      [messageId] = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.compact)(ids);
    }
  }
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  const shouldSwitchChat = !currentMessageList || chatId !== currentMessageList.chatId || threadId !== currentMessageList.threadId || messageListType !== currentMessageList.type;
  if (blurTimeout) {
    clearTimeout(blurTimeout);
    blurTimeout = undefined;
  }
  blurTimeout = window.setTimeout(() => {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateFocusedMessage)({
      global
    }, tabId);
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateFocusDirection)(global, undefined, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateFocusedMessage)({
    global,
    chatId,
    messageId,
    threadId,
    noHighlight,
    isResizingContainer,
    quote,
    scrollTargetPosition
  }, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateFocusDirection)(global, undefined, tabId);
  if (replyMessageId) {
    const replyStack = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectReplyStack)(global, chatId, threadId, tabId) || [];
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceTabThreadParam)(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);
  }
  if (shouldSwitchChat) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateFocusDirection)(global, _types__WEBPACK_IMPORTED_MODULE_1__.FocusDirection.Static, tabId);
  }
  const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectViewportIds)(global, chatId, threadId, tabId);
  if (viewportIds && viewportIds.includes(messageId)) {
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global, {
      forceOnHeavyAnimation: true
    });
    actions.openThread({
      chatId,
      threadId,
      type: messageListType,
      shouldReplaceHistory,
      noForumTopicPanel,
      tabId
    });
    return undefined;
  }
  if (shouldSwitchChat) {
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.replaceTabThreadParam)(global, chatId, threadId, 'viewportIds', undefined, tabId);
  }
  if (viewportIds && !shouldSwitchChat) {
    const direction = messageId > viewportIds[0] ? _types__WEBPACK_IMPORTED_MODULE_1__.FocusDirection.Down : _types__WEBPACK_IMPORTED_MODULE_1__.FocusDirection.Up;
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateFocusDirection)(global, direction, tabId);
  }
  if ((0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_3__.isAnimatingScroll)()) {
    (0,_util_animateScroll__WEBPACK_IMPORTED_MODULE_3__.cancelScrollBlockingAnimation)();
  }
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global, {
    forceOnHeavyAnimation: true
  });
  actions.openThread({
    chatId,
    threadId,
    type: messageListType,
    shouldReplaceHistory,
    noForumTopicPanel,
    tabId
  });
  actions.loadViewportMessages({
    chatId,
    threadId,
    tabId,
    shouldForceRender: true
  });
  return undefined;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setShouldPreventComposerAnimation', (global, actions, payload) => {
  const {
    shouldPreventComposerAnimation,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    shouldPreventComposerAnimation
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openReplyMenu', (global, actions, payload) => {
  const {
    fromChatId,
    messageId,
    quoteText,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    replyingMessage: {
      fromChatId,
      messageId,
      quoteText
    },
    isShareMessageModalShown: true
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openForwardMenu', (global, actions, payload) => {
  const {
    fromChatId,
    messageIds,
    storyId,
    groupedId,
    withMyScore,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  let groupedMessageIds;
  if (groupedId) {
    groupedMessageIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectMessageIdsByGroupId)(global, fromChatId, groupedId);
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {
      fromChatId,
      messageIds: groupedMessageIds || messageIds,
      storyId,
      withMyScore
    },
    isShareMessageModalShown: true
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('changeRecipient', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).forwardMessages,
      toChatId: undefined,
      noAuthors: false,
      noCaptions: false
    },
    isShareMessageModalShown: true
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setForwardNoAuthors', (global, actions, payload) => {
  const {
    noAuthors,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {
      ...tabState.forwardMessages,
      noAuthors,
      // `noCaptions` cannot be true when `noAuthors` is false
      noCaptions: noAuthors && tabState.forwardMessages.noCaptions
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setForwardNoCaptions', (global, actions, payload) => {
  const {
    noCaptions,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    forwardMessages: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).forwardMessages,
      noCaptions,
      noAuthors: noCaptions // On other clients `noAuthors` updates together with `noCaptions`
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('exitForwardMode', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    isShareMessageModalShown: false,
    forwardMessages: {},
    replyingMessage: {}
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openForwardMenuForSelectedMessages', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  if (!tabState.selectedMessages) {
    return;
  }
  const {
    chatId: fromChatId,
    messageIds
  } = tabState.selectedMessages;
  const forwardableMessageIds = messageIds.filter(id => {
    const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessage)(global, fromChatId, id);
    return message && (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCanForwardMessage)(global, message);
  });
  if (!forwardableMessageIds.length) {
    return;
  }
  actions.openForwardMenu({
    fromChatId,
    messageIds: forwardableMessageIds,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('cancelMediaDownload', (global, actions, payload) => {
  const {
    media,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const hash = (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getMediaHash)(media, 'download');
  if (!hash) return undefined;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.cancelMessageMediaDownload)(global, [hash], tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('cancelMediaHashDownloads', (global, actions, payload) => {
  const {
    mediaHashes,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.cancelMessageMediaDownload)(global, mediaHashes, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('downloadMedia', (global, actions, payload) => {
  const {
    media,
    originMessage,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const hash = (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getMediaHash)(media, 'download');
  if (!hash) return undefined;
  const size = 'size' in media ? media.size : 0;
  const metadata = {
    size,
    format: (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getMediaFormat)(media, 'download'),
    filename: (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getMediaFilename)(media),
    originChatId: originMessage?.chatId,
    originMessageId: originMessage?.id
  };
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.addActiveMediaDownload)(global, hash, metadata, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('downloadSelectedMessages', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  if (!tabState.selectedMessages) {
    return;
  }
  const {
    chatId,
    messageIds
  } = tabState.selectedMessages;
  const {
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId) || {};
  const chatMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessages)(global, chatId);
  if (!chatMessages || !threadId) return;
  const messages = messageIds.map(id => chatMessages[id]).filter(message => (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectAllowedMessageActionsSlow)(global, message, threadId).canDownload);
  messages.forEach(message => {
    const media = (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getMessageDownloadableMedia)(message);
    if (!media) return;
    actions.downloadMedia({
      media,
      originMessage: message,
      tabId
    });
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('enterMessageSelectMode', (global, actions, payload) => {
  const {
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const openChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
  if (!openChat) {
    return global;
  }
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.enterMessageSelectMode)(global, openChat.id, messageId, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('toggleMessageSelection', (global, actions, payload) => {
  const {
    messageId,
    groupedId,
    childMessageIds,
    withShift,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global, tabId);
  if (!currentMessageList) {
    return;
  }
  const {
    chatId,
    threadId,
    type: messageListType
  } = currentMessageList;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.toggleMessageSelection)(global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  if (global.shouldShowContextMenuHint) {
    actions.disableContextMenuHint();
    actions.showNotification({
      // eslint-disable-next-line max-len
      message: `To **edit** or **reply**, close this menu. Then ${_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('disableContextMenuHint', global => {
  if (!global.shouldShowContextMenuHint) {
    return undefined;
  }
  return {
    ...global,
    shouldShowContextMenuHint: false
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('exitMessageSelectMode', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.exitMessageSelectMode)(global, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openPollModal', (global, actions, payload) => {
  const {
    isQuiz,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    pollModal: {
      isOpen: true,
      isQuiz
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closePollModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    pollModal: {
      isOpen: false
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('checkVersionNotification', (global, actions) => {
  if (_config__WEBPACK_IMPORTED_MODULE_2__.RELEASE_DATETIME && Date.now() > Number(_config__WEBPACK_IMPORTED_MODULE_2__.RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {
    return;
  }
  const currentVersion = "10.9.39".split('.').slice(0, 2).join('.');
  const {
    serviceNotifications
  } = global;
  if (serviceNotifications.find(({
    version
  }) => version === currentVersion)) {
    return;
  }
  const message = {
    chatId: _config__WEBPACK_IMPORTED_MODULE_2__.SERVICE_NOTIFICATIONS_USER_ID,
    date: (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_9__.getServerTime)(),
    content: {
      text: (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_8__["default"])(_versionNotification_txt__WEBPACK_IMPORTED_MODULE_11__, true)
    },
    isOutgoing: false
  };
  actions.createServiceNotification({
    message: message,
    version: currentVersion
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('createServiceNotification', (global, actions, payload) => {
  const {
    message,
    version
  } = payload;
  const {
    serviceNotifications
  } = global;
  const maxId = Math.max((0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatLastMessageId)(global, _config__WEBPACK_IMPORTED_MODULE_2__.SERVICE_NOTIFICATIONS_USER_ID) || 0, ...serviceNotifications.map(({
    id
  }) => id));
  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;
  // The fractional ID is made of the largest integer ID and an incremented fractional part
  const id = Math.floor(maxId) + fractionalPart;
  message.previousLocalId = message.id;
  message.id = id;
  const serviceNotification = {
    id,
    message,
    version,
    isUnread: true
  };
  global = {
    ...global,
    serviceNotifications: [...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT), serviceNotification]
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  actions.apiUpdate({
    '@type': 'newMessage',
    id: message.id,
    chatId: message.chatId,
    message
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openReactorListModal', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    reactorModal: {
      chatId,
      messageId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeReactorListModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    reactorModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openSeenByModal', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    seenByModal: {
      chatId,
      messageId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeSeenByModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    seenByModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openPrivacySettingsNoticeModal', (global, actions, payload) => {
  const {
    chatId,
    isReadDate,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    privacySettingsNoticeModal: {
      chatId,
      isReadDate
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closePrivacySettingsNoticeModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    privacySettingsNoticeModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openChatLanguageModal', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const activeLanguage = messageId ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectRequestedMessageTranslationLanguage)(global, chatId, messageId, tabId) : (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectRequestedChatTranslationLanguage)(global, chatId, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    chatLanguageModal: {
      chatId,
      messageId,
      activeLanguage
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeChatLanguageModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    chatLanguageModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('copySelectedMessages', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId);
  if (!tabState.selectedMessages) {
    return;
  }
  const {
    chatId,
    messageIds
  } = tabState.selectedMessages;
  copyTextForMessages(global, chatId, messageIds);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('copyMessagesByIds', (global, actions, payload) => {
  const {
    messageIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentChat)(global, tabId);
  if (!messageIds || messageIds.length === 0 || !chat) {
    return;
  }
  copyTextForMessages(global, chat.id, messageIds);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openOneTimeMediaModal', (global, actions, payload) => {
  const {
    message,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    oneTimeMediaModal: {
      message
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeOneTimeMediaModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    oneTimeMediaModal: undefined
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeReportAdModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    reportAdModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeReportModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    reportModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openPreviousReportAdModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const reportAdModal = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).reportAdModal;
  if (!reportAdModal) {
    return undefined;
  }
  if (reportAdModal.sections.length === 1) {
    actions.closeReportAdModal({
      tabId
    });
    return undefined;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    reportAdModal: {
      ...reportAdModal,
      sections: reportAdModal.sections.slice(0, -1)
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openPreviousReportModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  const reportModal = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectTabState)(global, tabId).reportModal;
  if (!reportModal) {
    return undefined;
  }
  if (reportModal.sections.length === 1) {
    actions.closeReportModal({
      tabId
    });
    return undefined;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    reportModal: {
      ...reportModal,
      sections: reportModal.sections.slice(0, -1)
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openPaidReactionModal', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    paidReactionModal: {
      chatId,
      messageId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closePaidReactionModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    paidReactionModal: undefined
  }, tabId);
});
function copyTextForMessages(global, chatId, messageIds) {
  const {
    type: messageListType,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectCurrentMessageList)(global) || {};
  const lang = _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_7__.oldTranslate;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChat)(global, chatId);
  const chatMessages = messageListType === 'scheduled' ? (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatScheduledMessages)(global, chatId) : (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectChatMessages)(global, chatId);
  if (!chat || !chatMessages || !threadId) return;
  const messages = messageIds.map(id => chatMessages[id]).filter(message => (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectAllowedMessageActionsSlow)(global, message, threadId).canCopy).sort((message1, message2) => message1.id - message2.id);
  const resultHtml = [];
  const resultText = [];
  messages.forEach(message => {
    const sender = (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.isChatChannel)(chat) ? chat : (0,_selectors__WEBPACK_IMPORTED_MODULE_18__.selectSender)(global, message);
    const senderTitle = `> ${sender ? (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getPeerTitle)(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;
    const statefulContent = (0,_helpers__WEBPACK_IMPORTED_MODULE_12__.getMessageStatefulContent)(global, message);
    resultHtml.push(senderTitle);
    resultHtml.push(`${(0,_helpers_renderMessageSummaryHtml__WEBPACK_IMPORTED_MODULE_14__.renderMessageSummaryHtml)(lang, message)}\n`);
    resultText.push(senderTitle);
    resultText.push(`${(0,_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_13__.getMessageSummaryText)(lang, message, statefulContent, false, 0, true)}\n`);
  });
  (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_4__.copyHtmlToClipboard)(resultHtml.join('\n'), resultText.join('\n'));
}
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openDeleteMessageModal', (global, actions, payload) => {
  const {
    message,
    isSchedule,
    album,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    deleteMessageModal: {
      isSchedule,
      album,
      message
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeDeleteMessageModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    deleteMessageModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('openAboutAdsModal', (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    aboutAdsModal: {
      chatId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('closeAboutAdsModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_17__.updateTabState)(global, {
    aboutAdsModal: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/middleSearch.ts":
/*!***********************************************!*\
  !*** ./src/global/actions/ui/middleSearch.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");





(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openMiddleSearch', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateMiddleSearch)(global, chatId, threadId, {}, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeMiddleSearch', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.closeMiddleSearch)(global, chatId, threadId, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('updateMiddleSearch', (global, actions, payload) => {
  const {
    update,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  let chatId;
  let threadId;
  if (payload.chatId) {
    chatId = payload.chatId;
    threadId = payload.threadId || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
  } else {
    const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global, tabId);
    if (!currentMessageList) {
      return undefined;
    }
    chatId = currentMessageList.chatId;
    threadId = currentMessageList.threadId;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateMiddleSearch)(global, chatId, threadId, update, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('resetMiddleSearch', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.resetMiddleSearch)(global, chatId, threadId, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('setSharedMediaSearchType', (global, actions, payload) => {
  const {
    mediaType,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const {
    chatId,
    threadId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateSharedMediaSearchType)(global, chatId, threadId, mediaType, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/misc.ts":
/*!***************************************!*\
  !*** ./src/global/actions/ui/misc.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   APP_VERSION_URL: () => (/* binding */ APP_VERSION_URL)
/* harmony export */ });
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_folderManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/folderManager */ "./src/util/folderManager.ts");
/* harmony import */ var _util_generateUniqueId__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/generateUniqueId */ "./src/util/generateUniqueId.ts");
/* harmony import */ var _util_getIsAppUpdateNeeded__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/getIsAppUpdateNeeded */ "./src/util/getIsAppUpdateNeeded.ts");
/* harmony import */ var _util_getReadableErrorText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/getReadableErrorText */ "./src/util/getReadableErrorText.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_localization__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/localization */ "./src/util/localization/index.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_updateIcon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/updateIcon */ "./src/util/updateIcon.ts");
/* harmony import */ var _util_updatePageTitle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../util/updatePageTitle */ "./src/util/updatePageTitle.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");


















const APP_VERSION_URL = 'version.txt';
const FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;
const MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis

(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('toggleChatInfo', (global, actions, payload) => {
  const {
    force,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const isChatInfoShown = force !== undefined ? force : !(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).isChatInfoShown;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    isChatInfoShown
  }, tabId);
  global = {
    ...global,
    lastIsChatInfoShown: isChatInfoShown
  };
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setLeftColumnWidth', (global, actions, payload) => {
  const {
    leftColumnWidth
  } = payload;
  return {
    ...global,
    leftColumnWidth
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('resetLeftColumnWidth', global => {
  return {
    ...global,
    leftColumnWidth: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('toggleManagement', (global, actions, payload) => {
  const {
    force,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    return undefined;
  }
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    management: {
      byChatId: {
        ...tabState.management.byChatId,
        [chatId]: {
          ...tabState.management.byChatId[chatId],
          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive
        }
      }
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('requestNextManagementScreen', (global, actions, payload) => {
  const {
    screen,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    return undefined;
  }
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    management: {
      byChatId: {
        ...tabState.management.byChatId,
        [chatId]: {
          ...tabState.management.byChatId[chatId],
          isActive: true,
          nextScreen: screen
        }
      }
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeManagement', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    return undefined;
  }
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    management: {
      byChatId: {
        ...tabState.management.byChatId,
        [chatId]: {
          ...tabState.management.byChatId[chatId],
          isActive: false
        }
      }
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('processOpenChatOrThread', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  if (!(0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_17__.getIsMobile)() && !(0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_17__.getIsTablet)()) {
    return undefined;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    isLeftColumnShown: (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).messageLists.length === 0
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('resetNextProfileTab', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const {
    chatId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId) {
    return undefined;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    nextProfileTab: undefined,
    forceScrollProfileTab: false
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('toggleStatistics', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    isStatisticsShown: !tabState.isStatisticsShown,
    statistics: {
      ...tabState.statistics,
      currentMessageId: undefined,
      currentStoryId: undefined
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('toggleMessageStatistics', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)(),
    messageId
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    statistics: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).statistics,
      currentMessageId: messageId,
      currentStoryId: undefined
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('toggleStoryStatistics', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)(),
    storyId
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    statistics: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).statistics,
      currentStoryId: storyId,
      currentMessageId: undefined
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('toggleLeftColumn', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    isLeftColumnShown: !(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).isLeftColumnShown
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('addRecentEmoji', (global, actions, payload) => {
  const {
    emoji
  } = payload;
  const {
    recentEmojis
  } = global;
  if (!recentEmojis) {
    return {
      ...global,
      recentEmojis: [emoji]
    };
  }
  const newEmojis = recentEmojis.filter(e => e !== emoji);
  newEmojis.unshift(emoji);
  if (newEmojis.length > MAX_STORED_EMOJIS) {
    newEmojis.pop();
  }
  return {
    ...global,
    recentEmojis: newEmojis
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('addRecentSticker', (global, actions, payload) => {
  const {
    sticker
  } = payload;
  const {
    recent
  } = global.stickers;
  if (!recent) {
    return {
      ...global,
      stickers: {
        ...global.stickers,
        recent: {
          hash: '0',
          stickers: [sticker]
        }
      }
    };
  }
  const newStickers = recent.stickers.filter(s => s.id !== sticker.id);
  newStickers.unshift(sticker);
  return {
    ...global,
    stickers: {
      ...global.stickers,
      recent: {
        ...recent,
        stickers: newStickers
      }
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('addRecentCustomEmoji', (global, actions, payload) => {
  const {
    documentId
  } = payload;
  const {
    recentCustomEmojis
  } = global;
  if (!recentCustomEmojis) {
    return {
      ...global,
      recentCustomEmojis: [documentId]
    };
  }
  const newEmojis = recentCustomEmojis.filter(id => id !== documentId);
  newEmojis.unshift(documentId);
  if (newEmojis.length > MAX_STORED_EMOJIS) {
    newEmojis.pop();
  }
  return {
    ...global,
    recentCustomEmojis: newEmojis
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('clearRecentCustomEmoji', global => {
  return {
    ...global,
    recentCustomEmojis: []
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('reorderStickerSets', (global, actions, payload) => {
  const {
    order,
    isCustomEmoji
  } = payload;
  return {
    ...global,
    stickers: {
      ...global.stickers,
      added: {
        setIds: !isCustomEmoji ? order : global.stickers.added.setIds
      }
    },
    customEmojis: {
      ...global.customEmojis,
      added: {
        setIds: isCustomEmoji ? order : global.customEmojis.added.setIds
      }
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('showNotification', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)(),
    ...notification
  } = payload;
  const hasLocalId = notification.localId;
  notification.localId || (notification.localId = (0,_util_generateUniqueId__WEBPACK_IMPORTED_MODULE_4__["default"])());
  const newNotifications = [...(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).notifications];
  const existingNotificationIndex = newNotifications.findIndex(n => hasLocalId ? n.localId === notification.localId : n.message === notification.message);
  if (existingNotificationIndex !== -1) {
    newNotifications.splice(existingNotificationIndex, 1);
  }
  newNotifications.push(notification);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    notifications: newNotifications
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('showAllowedMessageTypesNotification', (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectChat)(global, chatId);
  if (!chat) return;
  const chatFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectChatFullInfo)(global, chatId);
  const {
    canSendPlainText,
    canSendPhotos,
    canSendVideos,
    canSendDocuments,
    canSendAudios,
    canSendStickers,
    canSendRoundVideos,
    canSendVoices
  } = (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getAllowedAttachmentOptions)(chat, chatFullInfo);
  const allowedContent = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.compact)([canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined, canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined, canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined, canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined, canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined, canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined, canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined, canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined]).map(l => _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate(l));
  if (!allowedContent.length) {
    actions.showNotification({
      message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate('Chat.SendNotAllowedText'),
      tabId
    });
    return;
  }
  const lastDelimiter = _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate('AutoDownloadSettings.LastDelimeter');
  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);
  actions.showNotification({
    message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate('Chat.SendAllowedContentText', allowedContentString),
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('dismissNotification', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const newNotifications = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).notifications.filter(({
    localId
  }) => localId !== payload.localId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    notifications: newNotifications
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('showDialog', (global, actions, payload) => {
  const {
    data,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;

  // Filter out errors that we don't want to show to the user
  if ('message' in data && data.hasErrorKey && !(0,_util_getReadableErrorText__WEBPACK_IMPORTED_MODULE_6__["default"])(data)) {
    return global;
  }
  const newDialogs = [...(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).dialogs];
  if ('message' in data) {
    const existingErrorIndex = newDialogs.findIndex(err => err.message === data.message);
    if (existingErrorIndex !== -1) {
      newDialogs.splice(existingErrorIndex, 1);
    }
  }
  newDialogs.push(data);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    dialogs: newDialogs
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('dismissDialog', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const newDialogs = [...(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).dialogs];
  newDialogs.pop();
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    dialogs: newDialogs
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('toggleSafeLinkModal', (global, actions, payload) => {
  const {
    url: safeLinkModalUrl,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    safeLinkModalUrl
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('openHistoryCalendar', (global, actions, payload) => {
  const {
    selectedAt,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    historyCalendarSelectedAt: selectedAt
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeHistoryCalendar', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    historyCalendarSelectedAt: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('openGame', (global, actions, payload) => {
  const {
    url,
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectChatMessage)(global, chatId, messageId);
  if (!message) return;
  const botId = message.viaBotId || (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectSender)(global, message)?.id;
  if (!botId) return;
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectIsTrustedBot)(global, botId)) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
      botTrustRequest: {
        botId,
        type: 'game',
        onConfirm: {
          action: 'openGame',
          payload
        }
      }
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    openedGame: {
      url,
      chatId,
      messageId
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeGame', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    openedGame: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('requestConfetti', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)(),
    ...rest
  } = payload;
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCanAnimateInterface)(global)) return undefined;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    confetti: {
      lastConfettiTime: Date.now(),
      ...rest
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('requestWave', (global, actions, payload) => {
  const {
    startX,
    startY,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.IS_WAVE_TRANSFORM_SUPPORTED || !(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCanAnimateInterface)(global)) return undefined;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId);
  const currentLastTime = tabState.wave?.lastWaveTime || 0;
  if (Date.now() - currentLastTime < _config__WEBPACK_IMPORTED_MODULE_1__.ANIMATION_WAVE_MIN_INTERVAL) return undefined;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    wave: {
      lastWaveTime: Date.now(),
      startX,
      startY
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('updateAttachmentSettings', (global, actions, payload) => {
  const {
    shouldCompress,
    shouldSendGrouped,
    isInvertedMedia,
    webPageMediaSize
  } = payload;
  return {
    ...global,
    attachmentSettings: {
      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,
      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,
      isInvertedMedia,
      webPageMediaSize
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('requestEffectInComposer', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    shouldPlayEffectInComposer: true
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('hideEffectInComposer', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    shouldPlayEffectInComposer: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setReactionEffect', (global, actions, payload) => {
  const {
    chatId,
    threadId,
    reaction,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;
  if (!emoticon) return;
  const effect = Object.values(global.availableEffectById).find(currentEffect => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);
  const effectId = effect?.id;
  const isCurrentUserPremium = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectIsCurrentUserPremium)(global);
  if (effect?.isPremium && !isCurrentUserPremium) {
    actions.openPremiumModal({
      initialSection: 'effects',
      tabId
    });
    return;
  }
  if (!effectId) return;
  actions.requestEffectInComposer({
    tabId
  });
  actions.saveEffectInDraft({
    chatId,
    threadId,
    effectId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('openLimitReachedModal', (global, actions, payload) => {
  const {
    limit,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    limitReachedModal: {
      limit
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeLimitReachedModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    limitReachedModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeStickerSetModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    openedStickerSetShortName: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('openCustomEmojiSets', (global, actions, payload) => {
  const {
    setIds,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    openedCustomEmojiSetIds: setIds
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeCustomEmojiSets', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    openedCustomEmojiSetIds: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('updateLastRenderedCustomEmojis', (global, actions, payload) => {
  const {
    ids
  } = payload;
  const {
    lastRendered
  } = global.customEmojis;
  return {
    ...global,
    customEmojis: {
      ...global.customEmojis,
      lastRendered: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.unique)([...lastRendered, ...ids]).slice(0, _config__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT)
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('openCreateTopicPanel', (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;

  // Topic panel can be opened only if there is a selected chat
  const currentChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCurrentChat)(global, tabId);
  if (!currentChat) actions.openChat({
    id: chatId,
    tabId
  });
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    createTopicPanel: {
      chatId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeCreateTopicPanel', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    createTopicPanel: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('openEditTopicPanel', (global, actions, payload) => {
  const {
    chatId,
    topicId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;

  // Topic panel can be opened only if there is a selected chat
  const currentChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCurrentChat)(global, tabId);
  if (!currentChat) actions.openChat({
    id: chatId,
    tabId
  });
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    editTopicPanel: {
      chatId,
      topicId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeEditTopicPanel', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    editTopicPanel: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('updateArchiveSettings', (global, actions, payload) => {
  const {
    archiveSettings
  } = global;
  const {
    isHidden = archiveSettings.isHidden,
    isMinimized = archiveSettings.isMinimized
  } = payload;
  return {
    ...global,
    archiveSettings: {
      isHidden,
      isMinimized
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('openMapModal', (global, actions, payload) => {
  const {
    geoPoint,
    zoom,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    mapModal: {
      point: geoPoint,
      zoom
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeMapModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    mapModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('checkAppVersion', global => {
  fetch(`${APP_VERSION_URL}?${Date.now()}`).then(response => response.text()).then(version => {
    version = version.trim();
    if ((0,_util_getIsAppUpdateNeeded__WEBPACK_IMPORTED_MODULE_5__["default"])(version, "10.9.39")) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getGlobal)();
      global = {
        ...global,
        isAppUpdateAvailable: true
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
    }
  }).catch(err => {
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
      // eslint-disable-next-line no-console
      console.error('[checkAppVersion failed] ', err);
    }
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setIsElectronUpdateAvailable', (global, action, payload) => {
  global = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getGlobal)();
  global = {
    ...global,
    isElectronUpdateAvailable: Boolean(payload)
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('afterHangUp', global => {
  if (!(0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()).multitabNextAction) return;
  (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.reestablishMasterToSelf)();
});
let notificationInterval;
const NOTIFICATION_INTERVAL = 500;
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('onTabFocusChange', (global, actions, payload) => {
  const {
    isBlurred,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  if (isBlurred) {
    if (notificationInterval) clearInterval(notificationInterval);
    notificationInterval = window.setInterval(() => {
      actions.updatePageTitle({
        tabId
      });
    }, NOTIFICATION_INTERVAL);
  } else {
    clearInterval(notificationInterval);
    notificationInterval = undefined;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    isBlurred
  }, tabId);
  return {
    ...global,
    initialUnreadNotifications: isBlurred ? (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_3__.getAllNotificationsCount)() : undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('updatePageTitle', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  const {
    canDisplayChatInTitle
  } = global.settings.byKey;
  const currentUserId = global.currentUserId;
  const isTestServer = global.config?.isTestServer;
  const prefix = isTestServer ? '[T] ' : '';
  if (document.title.includes(_config__WEBPACK_IMPORTED_MODULE_1__.INACTIVE_MARKER)) {
    (0,_util_updateIcon__WEBPACK_IMPORTED_MODULE_10__["default"])(false);
    (0,_util_updatePageTitle__WEBPACK_IMPORTED_MODULE_11__.setPageTitleInstant)(`${prefix}${_config__WEBPACK_IMPORTED_MODULE_1__.PAGE_TITLE} ${_config__WEBPACK_IMPORTED_MODULE_1__.INACTIVE_MARKER}`);
    return;
  }
  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {
    const notificationCount = (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_3__.getAllNotificationsCount)();
    const newUnread = notificationCount - global.initialUnreadNotifications;
    if (newUnread > 0) {
      (0,_util_updatePageTitle__WEBPACK_IMPORTED_MODULE_11__.setPageTitleInstant)(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);
      (0,_util_updateIcon__WEBPACK_IMPORTED_MODULE_10__["default"])(true);
      return;
    }
  }
  (0,_util_updateIcon__WEBPACK_IMPORTED_MODULE_10__["default"])(false);
  const messageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectCurrentMessageList)(global, tabId);
  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {
    const {
      chatId,
      threadId
    } = messageList;
    const currentChat = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectChat)(global, chatId);
    if (currentChat) {
      const title = (0,_helpers__WEBPACK_IMPORTED_MODULE_13__.getChatTitle)(_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate, currentChat, chatId === currentUserId);
      const topic = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTopic)(global, chatId, threadId);
      if (currentChat.isForum && topic) {
        (0,_util_updatePageTitle__WEBPACK_IMPORTED_MODULE_11__.setPageTitle)(`${prefix}${title} › ${topic.title}`);
        return;
      }
      (0,_util_updatePageTitle__WEBPACK_IMPORTED_MODULE_11__.setPageTitle)(`${prefix}${title}`);
      return;
    }
  }
  (0,_util_updatePageTitle__WEBPACK_IMPORTED_MODULE_11__.setPageTitleInstant)(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.IS_ELECTRON ? '' : `${prefix}${_config__WEBPACK_IMPORTED_MODULE_1__.PAGE_TITLE}`);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeInviteViaLinkModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload ?? {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    inviteViaLinkModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('closeCollectibleInfoModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload ?? {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    collectibleInfoModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setShouldCloseRightColumn', (global, actions, payload) => {
  const {
    value,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_15__.updateTabState)(global, {
    shouldCloseRightColumn: value
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('refreshLangPackFromCache', (global, actions, payload) => {
  (0,_util_localization__WEBPACK_IMPORTED_MODULE_8__.refreshFromCache)(payload.langCode);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('processPremiumFloodWait', (global, actions, payload) => {
  const {
    isUpload
  } = payload;
  const {
    bandwidthPremiumDownloadSpeedup,
    bandwidthPremiumUploadSpeedup,
    bandwidthPremiumNotifyPeriod
  } = global.appConfig || {};
  const {
    lastPremiumBandwithNotificationDate: lastNotifiedAt
  } = global.settings;
  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {
    return undefined;
  }
  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;
  const unblurredTabIds = Object.values(global.byTabId).filter(l => !l.isBlurred).map(l => l.id);
  unblurredTabIds.forEach(tabId => {
    actions.showNotification({
      title: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),
      message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_9__.oldTranslate(isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage', isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup),
      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,
      tabId
    });
  });
  return {
    ...global,
    settings: {
      ...global.settings,
      lastPremiumBandwithNotificationDate: Date.now()
    }
  };
});
let prevIsScreenLocked;
let prevBlurredTabsCount = 0;
let onlineTimeout;
const ONLINE_TIMEOUT = 100;
(0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.addCallback)(global => {
  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions
  const {
    updatePageTitle,
    updateIsOnline
  } = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getActions)();
  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;
  const blurredTabsCount = Object.values(global.byTabId).filter(l => l.isBlurred).length;
  const isMasterTab = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()).isMasterTab;
  if (isLockedUpdated) {
    updatePageTitle();
  }
  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {
    if (onlineTimeout) clearTimeout(onlineTimeout);
    onlineTimeout = window.setTimeout(() => {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getGlobal)();
      const newBlurredTabsCount = Object.values(global.byTabId).filter(l => l.isBlurred).length;
      updateIsOnline(newBlurredTabsCount !== (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getAllMultitabTokens)().length);
    }, ONLINE_TIMEOUT);
  }
  prevIsScreenLocked = global.passcode.isScreenLocked;
  prevBlurredTabsCount = blurredTabsCount;
});

/***/ }),

/***/ "./src/global/actions/ui/passcode.ts":
/*!*******************************************!*\
  !*** ./src/global/actions/ui/passcode.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_passcode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/passcode */ "./src/util/passcode.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_sessions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/sessions */ "./src/util/sessions.ts");
/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../cache */ "./src/global/cache.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _initialState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../initialState */ "./src/global/initialState.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");










let noLockOnUnload = false;
(0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.onBeforeUnload)(() => {
  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global
  const global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  if (!global.isInited) return;
  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {
    (0,_util_sessions__WEBPACK_IMPORTED_MODULE_5__.clearStoredSession)();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('setPasscode', async (global, actions, payload) => {
  const {
    passcode,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
    isLoading: true
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
  await (0,_util_passcode__WEBPACK_IMPORTED_MODULE_3__.setupPasscode)(passcode);
  const sessionJson = JSON.stringify({
    ...(0,_util_sessions__WEBPACK_IMPORTED_MODULE_5__.loadStoredSession)(),
    userId: global.currentUserId
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
  const globalJson = (0,_cache__WEBPACK_IMPORTED_MODULE_6__.serializeGlobal)((0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
    hasPasscode: true,
    error: undefined,
    isLoading: false
  }));
  try {
    await (0,_util_passcode__WEBPACK_IMPORTED_MODULE_3__.encryptSession)(sessionJson, globalJson);
    (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.signalPasscodeHash)();
    global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
      hasPasscode: true,
      error: undefined,
      isLoading: false
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    (0,_cache__WEBPACK_IMPORTED_MODULE_6__.forceUpdateCache)(true);
  } catch (err) {
    (0,_util_passcode__WEBPACK_IMPORTED_MODULE_3__.forgetPasscode)();
    global = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
      isLoading: false
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
    actions.showNotification({
      message: 'Failed to set passcode',
      tabId
    });
    actions.requestNextSettingsScreen({
      screen: _types__WEBPACK_IMPORTED_MODULE_0__.SettingsScreens.PasscodeDisabled,
      tabId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('clearPasscode', global => {
  void (0,_util_passcode__WEBPACK_IMPORTED_MODULE_3__.clearEncryptedSession)();
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.clearPasscodeSettings)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('unlockScreen', (global, actions, payload) => {
  const beforeTabStates = Object.values(global.byTabId);
  const {
    sessionJson,
    globalJson
  } = payload;
  const session = JSON.parse(sessionJson);
  (0,_util_sessions__WEBPACK_IMPORTED_MODULE_5__.storeSession)(session, session.userId);
  const previousGlobal = global;
  global = JSON.parse(globalJson);
  global.byTabId = previousGlobal.byTabId;
  (0,_cache__WEBPACK_IMPORTED_MODULE_6__.migrateCache)(global, (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.cloneDeep)(_initialState__WEBPACK_IMPORTED_MODULE_8__.INITIAL_GLOBAL_STATE));
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
    isScreenLocked: false,
    error: undefined,
    invalidAttemptsCount: 0
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_7__.setGlobal)(global);
  (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.signalPasscodeHash)();
  beforeTabStates.forEach(({
    id: tabId,
    isMasterTab
  }) => actions.init({
    tabId,
    isMasterTab
  }));
  actions.initApi();
});
const MAX_INVALID_ATTEMPTS = 5;
const TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15; // 180000; // 3 minutes

(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('logInvalidUnlockAttempt', global => {
  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
    invalidAttemptsCount,
    timeoutUntil: invalidAttemptsCount >= MAX_INVALID_ATTEMPTS ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('resetInvalidUnlockAttempts', global => {
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
    invalidAttemptsCount: 0,
    timeoutUntil: undefined
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('setPasscodeError', (global, actions, payload) => {
  const {
    error
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
    error
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('clearPasscodeError', global => {
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings)(global, {
    error: undefined
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_7__.addActionHandler)('skipLockOnUnload', () => {
  noLockOnUnload = true;
});

/***/ }),

/***/ "./src/global/actions/ui/payments.ts":
/*!*******************************************!*\
  !*** ./src/global/actions/ui/payments.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");





(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('closePaymentModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const payment = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).payment;
  const status = payment.status || 'cancelled';
  const starsBalanceModal = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).starsBalanceModal;
  actions.processOriginStarsPayment({
    originData: starsBalanceModal,
    status,
    tabId
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.clearPayment)(global, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updatePayment)(global, {
    status
  }, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('resetPaymentStatus', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updatePayment)(global, {
    status: undefined
  }, tabId);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateStarsPayment)(global, {
    status: undefined
  }, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('addPaymentError', (global, actions, payload) => {
  const {
    error,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    payment: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).payment,
      status: 'failed',
      error
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('closeGiveawayModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    giveawayModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('closeGiftCodeModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    giftCodeModal: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/reactions.ts":
/*!********************************************!*\
  !*** ./src/global/actions/ui/reactions.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");






(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('processOpenChatOrThread', (global, actions, payload) => {
  const {
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  if (chatId) {
    return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
      reactionPicker: {
        chatId,
        messageId: undefined,
        position: undefined
      }
    }, tabId);
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    reactionPicker: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openMessageReactionPicker', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    position,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    reactionPicker: {
      chatId,
      messageId,
      position
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openStoryReactionPicker', (global, actions, payload) => {
  const {
    peerId,
    storyId,
    position,
    sendAsMessage,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    reactionPicker: {
      storyPeerId: peerId,
      storyId,
      sendAsMessage,
      position
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('openEffectPicker', (global, actions, payload) => {
  const {
    position,
    chatId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    reactionPicker: {
      position,
      chatId,
      isForEffects: true
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('closeReactionPicker', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    reactionPicker: {
      ...tabState.reactionPicker,
      messageId: undefined,
      position: undefined,
      storyId: undefined,
      storyPeerId: undefined,
      isForEffects: undefined
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('resetLocalPaidReactions', (global, actions, payload) => {
  const {
    chatId,
    messageId
  } = payload;
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatMessage)(global, chatId, messageId);
  if (!message) {
    return undefined;
  }
  const {
    reactions
  } = message;
  if (!reactions) {
    return undefined;
  }
  const updatedResults = reactions.results.map(reaction => {
    if (reaction.localAmount) {
      if (!reaction.count) return undefined;
      return {
        ...reaction,
        localAmount: undefined,
        localPreviousChosenOrder: undefined,
        chosenOrder: reaction.localPreviousChosenOrder
      };
    }
    return reaction;
  }).filter(Boolean);
  Object.values(global.byTabId).forEach(({
    id: tabId
  }) => {
    actions.dismissNotification({
      localId: (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_1__.getMessageKey)(message),
      tabId
    });
  });
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_3__.updateChatMessage)(global, chatId, messageId, {
    reactions: {
      ...reactions,
      results: updatedResults
    }
  });
});

/***/ }),

/***/ "./src/global/actions/ui/stars.ts":
/*!****************************************!*\
  !*** ./src/global/actions/ui/stars.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _helpers_payments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/payments */ "./src/global/helpers/payments.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");







(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('processOriginStarsPayment', (global, actions, payload) => {
  const {
    originData,
    status,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const {
    originStarsPayment,
    originReaction,
    originGift,
    topup
  } = originData || {};
  if (!originStarsPayment && !originReaction && !originGift && !topup) {
    return undefined;
  }
  actions.closeStarsBalanceModal({
    tabId
  });
  if (status !== 'paid') {
    return undefined;
  }

  // Re-open previous payment modal
  if (originStarsPayment) {
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
      starsPayment: originStarsPayment
    }, tabId);
  }
  if (originReaction) {
    actions.sendPaidReaction({
      chatId: originReaction.chatId,
      messageId: originReaction.messageId,
      forcedAmount: originReaction.amount,
      tabId
    });
  }
  if (originGift) {
    actions.sendStarGift({
      ...originGift,
      tabId
    });
  }
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openGiftRecipientPicker', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    isGiftRecipientPickerOpen: true
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeGiftRecipientPicker', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    isGiftRecipientPickerOpen: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openStarsGiftingPickerModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsGiftingPickerModal: {
      isOpen: true
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeStarsGiftingPickerModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsGiftingPickerModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openPrizeStarsTransactionFromGiveaway', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, chatId, messageId);
  if (!message) return undefined;
  const transaction = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_2__.getPrizeStarsTransactionFromGiveaway)(message);
  if (!transaction) return undefined;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.openStarsTransactionModal)(global, transaction, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openStarsBalanceModal', (global, actions, payload) => {
  const {
    originStarsPayment,
    originReaction,
    originGift,
    topup,
    shouldIgnoreBalance,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const starBalance = global.stars?.balance;
  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {
    actions.showNotification({
      message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsTopupLinkEnough'),
      actionText: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_1__.oldTranslate('StarsTopupLinkTopupAnyway'),
      action: {
        action: 'openStarsBalanceModal',
        payload: {
          topup,
          shouldIgnoreBalance: true,
          tabId
        }
      },
      icon: 'star',
      tabId
    });
    return undefined;
  }
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.clearStarPayment)(global, tabId);

  // Always refresh status on opening
  actions.loadStarStatus();
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsBalanceModal: {
      originStarsPayment,
      originReaction,
      originGift,
      topup
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeStarsBalanceModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsBalanceModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeStarsPaymentModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const starsPayment = (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectStarsPayment)(global, tabId);
  let status = starsPayment?.status;
  if (!status || status === 'pending') {
    status = 'cancelled';
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsPayment: {
      status
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openStarsTransactionModal', (global, actions, payload) => {
  const {
    transaction,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.openStarsTransactionModal)(global, transaction, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openStarsTransactionFromGift', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, chatId, messageId);
  if (!message) return undefined;
  const transaction = (0,_helpers_payments__WEBPACK_IMPORTED_MODULE_2__.getStarsTransactionFromGift)(message);
  if (!transaction) return undefined;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_4__.openStarsTransactionModal)(global, transaction, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeStarsTransactionModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsTransactionModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openStarsSubscriptionModal', (global, actions, payload) => {
  const {
    subscription,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsSubscriptionModal: {
      subscription
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeStarsSubscriptionModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsSubscriptionModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeGiftModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    giftModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeStarsGiftModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    starsGiftModal: {
      isOpen: false
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openGiftInfoModalFromMessage', (global, actions, payload) => {
  const {
    chatId,
    messageId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, chatId, messageId);
  if (!message || !message.content.action) return;
  const action = message.content.action;
  if (action.type === 'starGiftUnique') {
    actions.openGiftInfoModal({
      gift: action.starGift?.gift,
      tabId
    });
    return;
  }
  if (action.type !== 'starGift') return;
  const starGift = action.starGift;
  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId;
  const gift = {
    date: message.date,
    gift: starGift.gift,
    message: starGift.message,
    starsToConvert: starGift.starsToConvert,
    isNameHidden: starGift.isNameHidden,
    isUnsaved: !starGift.isSaved,
    fromId: message.isOutgoing ? global.currentUserId : message.chatId,
    messageId: !message.isOutgoing || chatId === global.currentUserId ? message.id : undefined,
    isConverted: starGift.isConverted,
    upgradeMsgId: starGift.upgradeMsgId,
    canUpgrade: starGift.canUpgrade,
    alreadyPaidUpgradeStars: starGift.alreadyPaidUpgradeStars,
    inputGift: starGift.inputSavedGift
  };
  actions.openGiftInfoModal({
    peerId: giftReceiverId,
    gift,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openGiftInfoModal', (global, actions, payload) => {
  const {
    gift,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  const peerId = 'peerId' in payload ? payload.peerId : undefined;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    giftInfoModal: {
      peerId,
      gift
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeGiftInfoModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    giftInfoModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeGiftUpgradeModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    giftUpgradeModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('openGiftWithdrawModal', (global, actions, payload) => {
  const {
    gift,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    giftWithdrawModal: {
      gift
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('closeGiftWithdrawModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    giftWithdrawModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_3__.addActionHandler)('clearGiftWithdrawError', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId);
  const giftWithdrawModal = tabState?.giftWithdrawModal;
  if (!giftWithdrawModal) return undefined;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    giftWithdrawModal: {
      ...giftWithdrawModal,
      errorKey: undefined
    }
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/statistics.ts":
/*!*********************************************!*\
  !*** ./src/global/actions/ui/statistics.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../.. */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");




(0,___WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('openMonetizationVerificationModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)(),
    chatId
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    monetizationVerificationModal: {
      chatId
    }
  }, tabId);
});
(0,___WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('closeMonetizationVerificationModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    monetizationVerificationModal: undefined
  }, tabId);
});
(0,___WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('clearMonetizationVerificationError', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateVerifyMonetizationModal)(global, {
    errorKey: undefined
  }, tabId);
});
(0,___WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('closeMonetizationStatistics', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    monetizationStatistics: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/stickerSearch.ts":
/*!************************************************!*\
  !*** ./src/global/actions/ui/stickerSearch.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");



(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('setStickerSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    stickerSearch: {
      query,
      resultIds: undefined
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('setGifSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    gifSearch: {
      query,
      offset: undefined,
      // offsetId: undefined,
      results: undefined
    }
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/stories.ts":
/*!******************************************!*\
  !*** ./src/global/actions/ui/stories.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _api_chats__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../api/chats */ "./src/global/actions/api/chats.ts");










(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('openStoryViewer', async (global, actions, payload) => {
  const {
    peerId,
    storyId,
    isSinglePeer,
    isSingleStory,
    isPrivate,
    isArchive,
    origin,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeerStories)(global, peerId);
  if (storyId && (!peerStories || !peerStories.byId[storyId])) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchPeerStoriesByIds', {
      peer,
      ids: [storyId]
    });
    if (!result) {
      return;
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_6__.addStoriesForPeer)(global, peerId, result.stories);
  }
  const storyList = tabState.storyViewer.storyList || (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectStoryListForViewer)(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      peerId,
      storyId: storyId || (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeerFirstUnreadStoryId)(global, peerId) || (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeerFirstStoryId)(global, peerId),
      isSinglePeer,
      isPrivate,
      isArchive,
      isSingleStory,
      viewModal: undefined,
      origin,
      storyList
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_5__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('openStoryViewerByUsername', async (global, actions, payload) => {
  const {
    username,
    storyId,
    origin,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const chat = await (0,_api_chats__WEBPACK_IMPORTED_MODULE_9__.fetchChatByUsername)(global, username);
  if (!chat) {
    return;
  }
  actions.openStoryViewer({
    peerId: chat.id,
    storyId,
    isSinglePeer: true,
    isSingleStory: true,
    origin,
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('closeStoryViewer', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const {
    isMuted,
    isRibbonShown,
    isArchivedRibbonShown,
    storyId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId).storyViewer;
  if (!storyId) return global;
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      isMuted,
      isRibbonShown,
      isArchivedRibbonShown,
      lastViewedByPeerIds: undefined,
      storyList: undefined
    }
  }, tabId);
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('setStoryViewerMuted', (global, actions, payload) => {
  const {
    isMuted,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId).storyViewer,
      isMuted
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('toggleStoryRibbon', (global, actions, payload) => {
  const {
    isShown,
    isArchived,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];
  if (!orderedIds?.length) {
    return global;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId).storyViewer,
      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('openPreviousStory', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  const {
    peerId,
    storyId,
    isSinglePeer,
    isSingleStory,
    storyList
  } = tabState.storyViewer;
  if (isSingleStory || !storyList) {
    actions.closeStoryViewer({
      tabId
    });
    return undefined;
  }
  if (!peerId || !storyId) {
    return undefined;
  }
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeer)(global, peerId);
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeerStories)(global, peerId);
  if (!peerStories || !peer) {
    return undefined;
  }
  const {
    peerIds: orderedPeerIds,
    storyIdsByPeerId
  } = storyList;
  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];
  const currentStoryIndex = peerStoryIds.indexOf(storyId);
  let previousStoryIndex;
  let previousPeerId;
  if (currentStoryIndex > 0) {
    previousStoryIndex = currentStoryIndex - 1;
    previousPeerId = peerId;
  } else {
    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;
    if (isSinglePeer || previousPeerIdIndex < 0) {
      return undefined;
    }
    previousPeerId = orderedPeerIds[previousPeerIdIndex];
    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;
  }
  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];
  if (!previousStoryId) {
    return undefined;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      peerId: previousPeerId,
      storyId: previousStoryId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('openNextStory', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  const {
    peerId,
    storyId,
    isSinglePeer,
    isSingleStory,
    storyList
  } = tabState.storyViewer;
  if (isSingleStory || !storyList) {
    actions.closeStoryViewer({
      tabId
    });
    return undefined;
  }
  if (!peerId || !storyId) {
    return undefined;
  }
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeer)(global, peerId);
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeerStories)(global, peerId);
  if (!peerStories || !peer) {
    return undefined;
  }
  const {
    peerIds: orderedPeerIds,
    storyIdsByPeerId
  } = storyList;
  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];
  const currentStoryIndex = peerStoryIds.indexOf(storyId);
  let nextStoryIndex;
  let nextPeerId;
  if (currentStoryIndex < peerStoryIds.length - 1) {
    nextStoryIndex = currentStoryIndex + 1;
    nextPeerId = peerId;
  } else {
    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;
    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {
      actions.closeStoryViewer({
        tabId
      });
      return undefined;
    }
    nextPeerId = orderedPeerIds[nextPeerIdIndex];
    nextStoryIndex = 0;
  }
  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];
  if (!nextStoryId) {
    return undefined;
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      peerId: nextPeerId,
      storyId: nextStoryId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('openStoryViewModal', (global, actions, payload) => {
  const {
    storyId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      viewModal: {
        storyId,
        nextOffset: '',
        isLoading: true
      }
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('closeStoryViewModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(tabState.storyViewer, ['viewModal'])
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('copyStoryLink', async (global, actions, payload) => {
  const {
    peerId,
    storyId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPeer)(global, peerId);
  if (!peer) {
    return;
  }
  const link = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_4__.callApi)('fetchStoryLink', {
    peer,
    storyId
  });
  if (!link) {
    return;
  }
  (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_0__.copyTextToClipboard)(link);
  actions.showNotification({
    message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('LinkCopied'),
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('sendMessage', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const {
    storyId,
    peerId: storyPeerId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectCurrentViewedStory)(global, tabId);
  const isStoryReply = Boolean(storyId && storyPeerId);
  if (!isStoryReply) {
    return;
  }
  const {
    gif,
    sticker,
    isReaction
  } = payload;
  let message;
  if (gif) {
    message = 'Story.Tooltip.GifSent';
  } else if (sticker) {
    message = 'Story.Tooltip.StickerSent';
  } else if (isReaction) {
    message = 'Story.Tooltip.ReactionSent';
  } else {
    message = 'Story.Tooltip.MessageSent';
  }
  actions.showNotification({
    message: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate(message),
    actionText: _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_3__.oldTranslate('Story.ToastViewInChat'),
    action: [{
      action: 'closeStoryViewer',
      payload: undefined
    }, {
      action: 'openChat',
      payload: {
        id: storyPeerId
      }
    }],
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('openStoryPrivacyEditor', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      isPrivacyModalOpen: true
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('closeStoryPrivacyEditor', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      isPrivacyModalOpen: false
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('toggleStealthModal', (global, actions, payload) => {
  const {
    isOpen,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      isStealthModalOpen: isOpen
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('clearStoryViews', (global, actions, payload) => {
  const {
    isLoading,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  if (!tabState.storyViewer.viewModal) return global;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      viewModal: {
        ...tabState.storyViewer.viewModal,
        views: undefined,
        isLoading,
        nextOffset: ''
      }
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('updateStoryView', (global, actions, payload) => {
  const {
    userId,
    isUserBlocked,
    areStoriesBlocked,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  const {
    viewModal
  } = tabState.storyViewer;
  if (!viewModal?.storyId) return undefined;
  const updatedViews = viewModal?.views?.map(view => {
    if (view.peerId === userId) {
      return {
        ...view,
        isUserBlocked: isUserBlocked || undefined,
        areStoriesBlocked: areStoriesBlocked || undefined
      };
    }
    return view;
  });
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      viewModal: {
        ...viewModal,
        views: updatedViews
      }
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('closeBoostModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    boostModal: undefined
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_5__.addActionHandler)('closeBoostStatistics', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_7__.updateTabState)(global, {
    boostStatistics: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/actions/ui/users.ts":
/*!****************************************!*\
  !*** ./src/global/actions/ui/users.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");




(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('setUserSearchQuery', (global, actions, payload) => {
  const {
    query,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.updateUserSearch)(global, {
    globalUserIds: undefined,
    localUserIds: undefined,
    fetchingStatus: Boolean(query),
    query
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('openAddContactDialog', (global, actions, payload) => {
  const {
    userId,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    newContact: {
      userId
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('openNewContactDialog', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    newContact: {
      isByPhoneNumber: true
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('closeNewContactDialog', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.closeNewContactDialog)(global, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_1__.addActionHandler)('closeSuggestedStatusModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    suggestedStatusModal: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/helpers/renderMessageSummaryHtml.ts":
/*!********************************************************!*\
  !*** ./src/global/helpers/renderMessageSummaryHtml.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderMessageSummaryHtml: () => (/* binding */ renderMessageSummaryHtml)
/* harmony export */ });
/* harmony import */ var _components_common_helpers_renderMessageText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/common/helpers/renderMessageText */ "./src/components/common/helpers/renderMessageText.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .. */ "./src/global/index.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages */ "./src/global/helpers/messages.ts");
/* harmony import */ var _messageSummary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messageSummary */ "./src/global/helpers/messageSummary.ts");




function renderMessageSummaryHtml(lang, message) {
  const global = (0,___WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  const emoji = (0,_messageSummary__WEBPACK_IMPORTED_MODULE_3__.getMessageSummaryEmoji)(message);
  const emojiWithSpace = emoji ? `${emoji} ` : '';
  const text = (0,_components_common_helpers_renderMessageText__WEBPACK_IMPORTED_MODULE_0__.renderMessageText)({
    message,
    shouldRenderAsHtml: true
  })?.join('');
  const statefulContent = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.getMessageStatefulContent)(global, message);
  const description = (0,_messageSummary__WEBPACK_IMPORTED_MODULE_3__.getMessageSummaryDescription)(lang, message, statefulContent, text, true);
  return `${emojiWithSpace}${description}`;
}

/***/ }),

/***/ "./src/global/reducers/bots.ts":
/*!*************************************!*\
  !*** ./src/global/reducers/bots.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   activateWebAppIfOpen: () => (/* binding */ activateWebAppIfOpen),
/* harmony export */   addWebAppToOpenList: () => (/* binding */ addWebAppToOpenList),
/* harmony export */   clearOpenedWebApps: () => (/* binding */ clearOpenedWebApps),
/* harmony export */   hasOpenedMoreThanOneWebApps: () => (/* binding */ hasOpenedMoreThanOneWebApps),
/* harmony export */   hasOpenedWebApps: () => (/* binding */ hasOpenedWebApps),
/* harmony export */   removeActiveWebAppFromOpenList: () => (/* binding */ removeActiveWebAppFromOpenList),
/* harmony export */   removeWebAppFromOpenList: () => (/* binding */ removeWebAppFromOpenList),
/* harmony export */   replaceInlineBotSettings: () => (/* binding */ replaceInlineBotSettings),
/* harmony export */   replaceInlineBotsIsLoading: () => (/* binding */ replaceInlineBotsIsLoading),
/* harmony export */   replaceIsWebAppModalOpen: () => (/* binding */ replaceIsWebAppModalOpen),
/* harmony export */   replaceWebAppModalState: () => (/* binding */ replaceWebAppModalState),
/* harmony export */   updateWebApp: () => (/* binding */ updateWebApp)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _helpers_bots__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/bots */ "./src/global/helpers/bots.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");




function replaceInlineBotSettings(global, username, inlineBotSettings, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    inlineBots: {
      ...tabState.inlineBots,
      byUsername: {
        ...tabState.inlineBots.byUsername,
        [username]: inlineBotSettings
      }
    }
  }, tabId);
}
function replaceInlineBotsIsLoading(global, isLoading, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    inlineBots: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).inlineBots,
      isLoading
    }
  }, tabId);
}
function updateWebApp(global, key, webAppUpdate, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  const openedWebApps = currentTabState.webApps.openedWebApps;
  const originalWebApp = openedWebApps[key];
  if (!originalWebApp) return global;
  const updatedValue = {
    ...originalWebApp,
    ...webAppUpdate
  };
  const updatedWebAppKey = (0,_helpers_bots__WEBPACK_IMPORTED_MODULE_1__.getWebAppKey)(updatedValue);
  if (!updatedWebAppKey) return global;
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    webApps: {
      ...currentTabState.webApps,
      openedWebApps: {
        ...openedWebApps,
        [updatedWebAppKey]: updatedValue
      }
    }
  }, tabId);
  return global;
}
function activateWebAppIfOpen(global, webAppKey, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  const openedWebApps = currentTabState.webApps.openedWebApps;
  if (!openedWebApps[webAppKey]) {
    return global;
  }
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    webApps: {
      ...currentTabState.webApps,
      isMoreAppsTabActive: false,
      activeWebAppKey: webAppKey,
      modalState: 'maximized'
    }
  }, tabId);
  return global;
}
function addWebAppToOpenList(global, webApp, makeActive = true, openModalIfNotOpen = true, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  const key = (0,_helpers_bots__WEBPACK_IMPORTED_MODULE_1__.getWebAppKey)(webApp);
  if (!key) return global;
  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];
  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);
  const newSessionKeys = [...currentTabState.webApps.sessionKeys];
  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);
  const openedWebApps = currentTabState.webApps.openedWebApps;
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    webApps: {
      ...currentTabState.webApps,
      ...(makeActive && {
        activeWebAppKey: key
      }),
      isMoreAppsTabActive: false,
      isModalOpen: openModalIfNotOpen,
      modalState: 'maximized',
      openedWebApps: {
        ...openedWebApps,
        [key]: webApp
      },
      openedOrderedKeys: newOpenedKeys,
      sessionKeys: newSessionKeys
    }
  }, tabId);
  return global;
}
function removeActiveWebAppFromOpenList(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;
  if (!activeWebAppKey) return global;
  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);
}
function removeWebAppFromOpenList(global, key, skipClosingConfirmation, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  const {
    openedWebApps,
    openedOrderedKeys,
    activeWebAppKey
  } = currentTabState.webApps;
  const webApp = openedWebApps[key];
  if (!webApp) return global;
  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {
    return updateWebApp(global, key, {
      isCloseModalOpen: true
    }, tabId);
  }
  const updatedOpenedWebApps = {
    ...openedWebApps
  };
  const removingWebAppKey = (0,_helpers_bots__WEBPACK_IMPORTED_MODULE_1__.getWebAppKey)(webApp);
  let newOpenedKeys = openedOrderedKeys;
  if (removingWebAppKey) {
    delete updatedOpenedWebApps[removingWebAppKey];
    newOpenedKeys = openedOrderedKeys.filter(k => k !== removingWebAppKey);
  }
  const isRemovedAppActive = activeWebAppKey === (0,_helpers_bots__WEBPACK_IMPORTED_MODULE_1__.getWebAppKey)(webApp);
  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);
  const openedWebAppsCount = openedWebAppsKeys.length;
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    webApps: {
      ...currentTabState.webApps,
      ...(isRemovedAppActive && {
        activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined
      }),
      openedWebApps: updatedOpenedWebApps,
      openedOrderedKeys: newOpenedKeys,
      ...(!openedWebAppsCount && {
        sessionKeys: []
      })
    }
  }, tabId);
  return global;
}
function clearOpenedWebApps(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  const webAppsNotAllowedToClose = Object.fromEntries(Object.entries(currentTabState.webApps.openedWebApps).filter(([, webApp]) => webApp.shouldConfirmClosing));
  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);
  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;
  if (!hasNotAllowedToCloseApps) {
    return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
      webApps: {
        ...currentTabState.webApps,
        activeWebAppKey: undefined,
        openedWebApps: {},
        openedOrderedKeys: [],
        sessionKeys: []
      }
    }, tabId);
  }
  const currentActiveWebApp = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectActiveWebApp)(global, tabId);
  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];
  const newActiveWebAppKey = (0,_helpers_bots__WEBPACK_IMPORTED_MODULE_1__.getWebAppKey)(newActiveWebApp);
  if (newActiveWebAppKey) {
    webAppsNotAllowedToClose[newActiveWebAppKey] = {
      ...newActiveWebApp,
      isCloseModalOpen: true
    };
  }
  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter(k => webAppsNotAllowedToClose[k]);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    webApps: {
      ...currentTabState.webApps,
      activeWebAppKey: newActiveWebAppKey,
      isMoreAppsTabActive: false,
      openedWebApps: webAppsNotAllowedToClose,
      openedOrderedKeys: newOpenedKeys
    }
  }, tabId);
}
function hasOpenedWebApps(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return Object.keys((0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).webApps.openedWebApps).length > 0;
}
function hasOpenedMoreThanOneWebApps(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return Object.keys((0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).webApps.openedWebApps).length > 1;
}
function replaceWebAppModalState(global, modalState, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    webApps: {
      ...currentTabState.webApps,
      modalState
    }
  }, tabId);
}
function replaceIsWebAppModalOpen(global, value, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const currentTabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    webApps: {
      ...currentTabState.webApps,
      isModalOpen: value
    }
  }, tabId);
}

/***/ }),

/***/ "./src/global/reducers/reactions.ts":
/*!******************************************!*\
  !*** ./src/global/reducers/reactions.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addMessageReaction: () => (/* binding */ addMessageReaction),
/* harmony export */   subtractXForEmojiInteraction: () => (/* binding */ subtractXForEmojiInteraction),
/* harmony export */   updateUnreadReactions: () => (/* binding */ updateUnreadReactions)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/windowSize */ "./src/util/windowSize.ts");
/* harmony import */ var _components_middle_helpers_calculateMiddleFooterTransforms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/middle/helpers/calculateMiddleFooterTransforms */ "./src/components/middle/helpers/calculateMiddleFooterTransforms.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chats */ "./src/global/reducers/chats.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./messages */ "./src/global/reducers/messages.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");








function getLeftColumnWidth(windowWidth) {
  if (windowWidth > _config__WEBPACK_IMPORTED_MODULE_0__.MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {
    return Math.min(Math.max(windowWidth * 0.25, _components_middle_helpers_calculateMiddleFooterTransforms__WEBPACK_IMPORTED_MODULE_2__.MIN_LEFT_COLUMN_WIDTH), windowWidth * 0.33);
  }
  if (windowWidth > _config__WEBPACK_IMPORTED_MODULE_0__.MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {
    return Math.min(Math.max(windowWidth * 0.33, _components_middle_helpers_calculateMiddleFooterTransforms__WEBPACK_IMPORTED_MODULE_2__.MIN_LEFT_COLUMN_WIDTH), windowWidth * 0.4);
  }
  return _components_middle_helpers_calculateMiddleFooterTransforms__WEBPACK_IMPORTED_MODULE_2__.SIDE_COLUMN_MAX_WIDTH;
}
function subtractXForEmojiInteraction(global, x) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  return x - (tabState.isLeftColumnShown && !(0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__.getIsMobile)() ? global.leftColumnWidth || getLeftColumnWidth(_util_windowSize__WEBPACK_IMPORTED_MODULE_1__["default"].get().width) : 0);
}
function addMessageReaction(global, message, userReactions) {
  const isInSavedMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsChatWithSelf)(global, message.chatId);
  const currentReactions = message.reactions || {
    results: [],
    areTags: isInSavedMessages
  };
  const currentSendAs = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectSendAs)(global, message.chatId);

  // Update UI without waiting for server response
  const results = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.updateReactionCount)(currentReactions.results, userReactions);
  let {
    recentReactions = []
  } = currentReactions;
  if (recentReactions.length) {
    recentReactions = recentReactions.filter(({
      isOwn,
      peerId
    }) => !isOwn && peerId !== global.currentUserId);
  }
  userReactions.forEach(reaction => {
    const {
      currentUserId
    } = global;
    if (reaction.type === 'paid') return;
    recentReactions.unshift({
      peerId: currentSendAs?.id || currentUserId,
      reaction,
      addedDate: Math.floor(Date.now() / 1000),
      isOwn: true
    });
  });
  return (0,_messages__WEBPACK_IMPORTED_MODULE_6__.updateChatMessage)(global, message.chatId, message.id, {
    reactions: {
      ...currentReactions,
      results,
      recentReactions
    }
  });
}
function updateUnreadReactions(global, chatId, update) {
  return (0,_chats__WEBPACK_IMPORTED_MODULE_5__.updateChat)(global, chatId, update, true);
}

/***/ }),

/***/ "./src/hooks/useCacheBuster.ts":
/*!*************************************!*\
  !*** ./src/hooks/useCacheBuster.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

const useCacheBuster = () => {
  const [cacheBuster, setCacheBuster] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const updateCacheBuster = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setCacheBuster(current => current + 1);
  }, []);
  return [cacheBuster, updateCacheBuster];
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useCacheBuster);

/***/ }),

/***/ "./src/hooks/useConnectionStatus.ts":
/*!******************************************!*\
  !*** ./src/hooks/useConnectionStatus.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConnectionStatus: () => (/* binding */ ConnectionStatus),
/* harmony export */   "default": () => (/* binding */ useConnectionStatus)
/* harmony export */ });
/* harmony import */ var _window_useBrowserOnline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./window/useBrowserOnline */ "./src/hooks/window/useBrowserOnline.ts");

let ConnectionStatus = /*#__PURE__*/function (ConnectionStatus) {
  ConnectionStatus[ConnectionStatus["waitingForNetwork"] = 0] = "waitingForNetwork";
  ConnectionStatus[ConnectionStatus["syncing"] = 1] = "syncing";
  ConnectionStatus[ConnectionStatus["online"] = 2] = "online";
  return ConnectionStatus;
}({});
function useConnectionStatus(lang, connectionState, isSyncing, hasMiddleHeader, isMinimized, isDisabled) {
  let status;
  const isBrowserOnline = (0,_window_useBrowserOnline__WEBPACK_IMPORTED_MODULE_0__["default"])();
  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {
    status = ConnectionStatus.waitingForNetwork;
  } else if (isSyncing) {
    status = ConnectionStatus.syncing;
  } else {
    status = ConnectionStatus.online;
  }
  let position;
  if (status === ConnectionStatus.online || isDisabled) {
    position = 'none';
  } else if (hasMiddleHeader) {
    position = 'middleHeader';
  } else if (isMinimized) {
    position = 'minimized';
  } else {
    position = 'overlay';
  }
  let text;
  if (status === ConnectionStatus.waitingForNetwork) {
    text = lang('WaitingForNetwork');
  } else if (status === ConnectionStatus.syncing) {
    text = lang('Updating');
  }
  if (position === 'middleHeader') {
    text = text.toLowerCase().replace(/\.+$/, '');
  }
  return {
    connectionStatus: status,
    connectionStatusPosition: position,
    connectionStatusText: text
  };
}

/***/ }),

/***/ "./src/hooks/useCustomBackground.ts":
/*!******************************************!*\
  !*** ./src/hooks/useCustomBackground.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _util_cacheApi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/cacheApi */ "./src/util/cacheApi.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/files */ "./src/util/files.ts");





const useCustomBackground = (theme, settingValue) => {
  const {
    setThemeSettings
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [value, setValue] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(settingValue);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!settingValue) {
      return;
    }
    if (settingValue.startsWith('#')) {
      setValue(settingValue);
    } else {
      _util_cacheApi__WEBPACK_IMPORTED_MODULE_3__.fetch(_config__WEBPACK_IMPORTED_MODULE_2__.CUSTOM_BG_CACHE_NAME, theme, _util_cacheApi__WEBPACK_IMPORTED_MODULE_3__.Type.Blob).then(blob => {
        const url = URL.createObjectURL(blob);
        (0,_util_files__WEBPACK_IMPORTED_MODULE_4__.preloadImage)(url).then(() => {
          setValue(`url(${url})`);
        });
      }).catch(() => {
        setThemeSettings({
          theme,
          background: undefined,
          backgroundColor: undefined,
          isBlurred: true,
          patternColor: theme === 'dark' ? _config__WEBPACK_IMPORTED_MODULE_2__.DARK_THEME_PATTERN_COLOR : _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PATTERN_COLOR
        });
      });
    }
  }, [settingValue, theme]);
  return settingValue ? value : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useCustomBackground);

/***/ }),

/***/ "./src/hooks/useMessageMediaMetadata.ts":
/*!**********************************************!*\
  !*** ./src/hooks/useMessageMediaMetadata.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_imageResize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/imageResize */ "./src/util/imageResize.ts");
/* harmony import */ var _util_mediaSession__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/mediaSession */ "./src/util/mediaSession.ts");
/* harmony import */ var _components_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _useAsync__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useAsync */ "./src/hooks/useAsync.ts");
/* harmony import */ var _useMedia__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _useOldLang__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _assets_telegram_logo_filled_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../assets/telegram-logo-filled.svg */ "./src/assets/telegram-logo-filled.svg");









const LOGO_DIMENSIONS = {
  width: 200,
  height: 200
};
const MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing

// TODO Add support for video in future
const useMessageMediaMetadata = (message, sender, chat) => {
  const lang = (0,_useOldLang__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const {
    audio,
    voice
  } = message ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageContent)(message) : {};
  const title = audio ? audio.title || audio.fileName : voice ? 'Voice message' : '';
  const artist = audio?.performer || sender && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getPeerTitle)(lang, sender);
  const album = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getChatTitle)(lang, chat) || 'Telegram';
  const audioCoverHash = audio && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getAudioHasCover)(audio) && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMediaHash)(audio, 'pictogram');
  const avatarHash = sender && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getChatAvatarHash)(sender, 'big');
  const hash = audio && audioCoverHash || voice && avatarHash;
  const media = (0,_useMedia__WEBPACK_IMPORTED_MODULE_6__["default"])(hash);
  const size = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return getCoverSize(audio, voice, media);
  }, [audio, media, voice]);
  const {
    result: url
  } = (0,_useAsync__WEBPACK_IMPORTED_MODULE_5__["default"])(() => makeGoodArtwork(media, size), [media, size], _assets_telegram_logo_filled_svg__WEBPACK_IMPORTED_MODULE_8__);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_3__.buildMediaMetadata)({
      title,
      artist,
      album,
      artwork: [{
        src: url
      }]
    });
  }, [album, artist, title, url]);
};
function makeGoodArtwork(url, size) {
  if (!url) return Promise.resolve(_assets_telegram_logo_filled_svg__WEBPACK_IMPORTED_MODULE_8__);
  if (!size) return (0,_util_imageResize__WEBPACK_IMPORTED_MODULE_2__.resizeImage)(url, MINIMAL_SIZE, MINIMAL_SIZE);
  const min = Math.min(size.width, size.height);
  if (min < MINIMAL_SIZE) {
    const ratio = MINIMAL_SIZE / min;
    return (0,_util_imageResize__WEBPACK_IMPORTED_MODULE_2__.scaleImage)(url, ratio);
  }
  return Promise.resolve(url);
}
function getCoverSize(audio, voice, url) {
  if (!url) return LOGO_DIMENSIONS;
  if (audio) {
    if (!audio.thumbnailSizes?.length) return undefined;
    const preferred = audio.thumbnailSizes.find(size => size.type === 'm');
    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present
  }
  if (voice) {
    return _components_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.AVATAR_FULL_DIMENSIONS;
  }
  return undefined;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useMessageMediaMetadata);

/***/ }),

/***/ "./src/hooks/useNativeCopySelectedMessages.ts":
/*!****************************************************!*\
  !*** ./src/hooks/useNativeCopySelectedMessages.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_getMessageIdsForSelectedText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/getMessageIdsForSelectedText */ "./src/util/getMessageIdsForSelectedText.ts");
/* harmony import */ var _useHotkeys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useHotkeys */ "./src/hooks/useHotkeys.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");




const useNativeCopySelectedMessages = copyMessagesByIds => {
  const handleCopy = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(e => {
    const messageIds = (0,_util_getMessageIdsForSelectedText__WEBPACK_IMPORTED_MODULE_1__["default"])();
    if (messageIds && messageIds.length > 1) {
      e.preventDefault();
      copyMessagesByIds({
        messageIds
      });
    }
  });
  (0,_useHotkeys__WEBPACK_IMPORTED_MODULE_2__.useHotkeys)((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    'Mod+C': handleCopy
  }), []));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useNativeCopySelectedMessages);

/***/ }),

/***/ "./src/hooks/usePreventPinchZoomGesture.ts":
/*!*************************************************!*\
  !*** ./src/hooks/usePreventPinchZoomGesture.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ usePreventPinchZoomGesture)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");


const metaViewport = document.querySelector('meta[name="viewport"]');
const defaultViewportContent = metaViewport?.getAttribute('content') || '';
const allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';
function usePreventPinchZoomGesture(isDisabled = false) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_TOUCH_ENV) {
      return undefined;
    }
    if (isDisabled) {
      // Clean viewport content from values values that disable the ability to zoom a webpage
      // https://web.dev/meta-viewport/
      metaViewport?.setAttribute('content', allowedZoomViewportContent);
      return undefined;
    }
    metaViewport?.setAttribute('content', defaultViewportContent);

    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,
    // this is only applicable for the browser and does not apply to the PWA mode.
    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_IOS && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_PWA) {
      document.addEventListener('gesturestart', preventEvent);
    }
    return () => {
      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');
      if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_IOS && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_PWA) {
        document.removeEventListener('gesturestart', preventEvent);
      }
    };
  }, [isDisabled]);
}
function preventEvent(e) {
  e.preventDefault();
}

/***/ }),

/***/ "./src/hooks/useResize.ts":
/*!********************************!*\
  !*** ./src/hooks/useResize.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useResize: () => (/* binding */ useResize)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _useFlag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");




function useResize(elementRef, onResize, onReset, initialWidth, cssPropertyName) {
  const [isActive, markIsActive, unmarkIsActive] = (0,_useFlag__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const [initialMouseX, setInitialMouseX] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [initialElementWidth, setInitialElementWidth] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const setElementStyle = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(width => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      if (!elementRef.current) {
        return;
      }
      const widthPx = width ? `${width}px` : '';
      elementRef.current.style.width = widthPx;
      if (cssPropertyName) {
        elementRef.current.style.setProperty(cssPropertyName, widthPx);
      }
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!elementRef.current || !initialWidth) {
      return;
    }
    setElementStyle(initialWidth);
  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);
  function handleMouseUp() {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      document.body.classList.remove('cursor-ew-resize');
    });
  }
  function initResize(e) {
    e.preventDefault();
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      document.body.classList.add('cursor-ew-resize');
    });
    setInitialMouseX(e.clientX);
    setInitialElementWidth(elementRef.current.offsetWidth);
    markIsActive();
  }
  function resetResize(e) {
    e.preventDefault();
    setElementStyle(undefined);
    onReset();
  }
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isActive) return undefined;
    const handleMouseMove = e => {
      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);
      setElementStyle(newWidth);
    };
    function stopDrag() {
      cleanup();
      onResize(elementRef.current.offsetWidth);
    }
    function cleanup() {
      handleMouseUp();
      document.removeEventListener('mousemove', handleMouseMove, false);
      document.removeEventListener('mouseup', stopDrag, false);
      document.removeEventListener('blur', stopDrag, false);
      unmarkIsActive();
    }
    document.addEventListener('mousemove', handleMouseMove, false);
    document.addEventListener('mouseup', stopDrag, false);
    document.addEventListener('blur', stopDrag, false);
    return cleanup;
  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);
  return {
    initResize,
    resetResize,
    handleMouseUp
  };
}

/***/ }),

/***/ "./src/hooks/useTextLanguage.ts":
/*!**************************************!*\
  !*** ./src/hooks/useTextLanguage.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useTextLanguage)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_languageDetection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/languageDetection */ "./src/util/languageDetection.ts");


function useTextLanguage(text, isDisabled, getIsReady) {
  const [language, setLanguage] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled || getIsReady && !getIsReady()) return;
    if (text) {
      (0,_util_languageDetection__WEBPACK_IMPORTED_MODULE_1__.detectLanguage)(text).then(setLanguage);
    } else {
      setLanguage(undefined);
    }
  }, [isDisabled, text, getIsReady]);
  return language;
}

/***/ }),

/***/ "./src/hooks/window/useBrowserOnline.ts":
/*!**********************************************!*\
  !*** ./src/hooks/window/useBrowserOnline.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useBrowserOnline)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");

function useBrowserOnline() {
  const [isOnline, setIsOnline] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(window.navigator.onLine);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    function handleChange() {
      setIsOnline(window.navigator.onLine);
    }
    window.addEventListener('online', handleChange);
    window.addEventListener('offline', handleChange);
    return () => {
      window.removeEventListener('offline', handleChange);
      window.removeEventListener('online', handleChange);
    };
  }, []);
  return isOnline;
}

/***/ }),

/***/ "./src/util/PopupManager.ts":
/*!**********************************!*\
  !*** ./src/util/PopupManager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PopupManager)
/* harmony export */ });
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

const SHOULD_PRE_OPEN = _windowEnvironment__WEBPACK_IMPORTED_MODULE_0__.IS_IOS || _windowEnvironment__WEBPACK_IMPORTED_MODULE_0__.IS_ANDROID;
class PopupManager {
  constructor(features, onFail) {
    this.features = features;
    this.onFail = onFail;
    _defineProperty(this, "preOpened", void 0);
  }
  preOpenIfNeeded() {
    if (!SHOULD_PRE_OPEN) return;
    this.preOpened = window.open('about:blank', undefined, this.features);
    if (this.preOpened) {
      this.preOpened.blur();
    } else {
      this.onFail?.();
    }
  }
  open(url) {
    if (this.preOpened) {
      this.preOpened.location.href = url;
      this.preOpened.focus();
      this.preOpened = undefined;
      return;
    }
    if (!SHOULD_PRE_OPEN) {
      const popup = window.open(url, undefined, this.features);
      if (popup) {
        popup.focus();
      } else {
        this.onFail?.();
      }
    }
  }
  cancelPreOpen() {
    this.preOpened?.close();
    this.preOpened = undefined;
  }
}

/***/ }),

/***/ "./src/util/getIsAppUpdateNeeded.ts":
/*!******************************************!*\
  !*** ./src/util/getIsAppUpdateNeeded.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getIsAppUpdateNeeded)
/* harmony export */ });
const APP_VERSION_REGEX = /^\d+\.\d+(\.\d+)?$/;
function getIsAppUpdateNeeded(remoteVersion, appVersion, isStrict) {
  const sanitizedRemoteVersion = remoteVersion.trim();
  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {
    return false;
  }
  if (isStrict) {
    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, {
      numeric: true,
      sensitivity: 'base'
    }) === 1;
  }
  return sanitizedRemoteVersion !== appVersion;
}

/***/ }),

/***/ "./src/util/languageDetection.ts":
/*!***************************************!*\
  !*** ./src/util/languageDetection.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   detectLanguage: () => (/* binding */ detectLanguage),
/* harmony export */   detectLanguageProbability: () => (/* binding */ detectLanguageProbability)
/* harmony export */ });
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _Deferred__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Deferred */ "./src/util/Deferred.ts");
/* harmony import */ var _PostMessageConnector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PostMessageConnector */ "./src/util/PostMessageConnector.ts");



const WORKER_INIT_DELAY = 4000;
const DEFAULT_THRESHOLD = 0.2;
const DEFAULT_LABELS_COUNT = 5;
let worker;
const initializationDeferred = new _Deferred__WEBPACK_IMPORTED_MODULE_1__["default"]();
if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_0__.IS_TRANSLATION_SUPPORTED) {
  setTimeout(initWorker, WORKER_INIT_DELAY);
}
function initWorker() {
  if (!worker) {
    worker = (0,_PostMessageConnector__WEBPACK_IMPORTED_MODULE_2__.createConnector)(new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("src_lib_fasttextweb_fasttext_worker_ts"), __webpack_require__.b)));
    initializationDeferred.resolve();
  }
}
async function detectLanguage(text, threshold = DEFAULT_THRESHOLD) {
  if (!worker) await initializationDeferred.promise;
  const result = await worker.request({
    name: 'detectLanguage',
    args: [text, threshold]
  });
  return result;
}
async function detectLanguageProbability(text, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD) {
  if (!worker) await initializationDeferred.promise;
  const result = await worker.request({
    name: 'detectLanguageProbability',
    args: [text, labelsCount, threshold]
  });
  return result;
}

/***/ }),

/***/ "./src/util/payments/stripe.ts":
/*!*************************************!*\
  !*** ./src/util/payments/stripe.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getStripeError: () => (/* binding */ getStripeError)
/* harmony export */ });
const STRIPE_ERRORS = {
  missing_payment_information: {
    field: 'cardNumber',
    message: 'Incorrect card number'
  },
  invalid_number: {
    field: 'cardNumber',
    message: 'Incorrect card number'
  },
  number: {
    field: 'cardNumber',
    message: 'Incorrect card number'
  },
  exp_year: {
    field: 'expiry',
    message: 'Incorrect year'
  },
  exp_month: {
    field: 'expiry',
    message: 'Incorrect month'
  },
  invalid_expiry_year: {
    field: 'expiry',
    message: 'Incorrect year'
  },
  invalid_expiry_month: {
    field: 'expiry',
    message: 'Incorrect month'
  },
  cvc: {
    field: 'cvv',
    message: 'Incorrect CVV'
  },
  invalid_cvc: {
    field: 'cvv',
    message: 'Incorrect CVV'
  }
};
function getStripeError(error) {
  const {
    message: description,
    code,
    param
  } = error;
  const {
    field,
    message
  } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];
  return {
    field,
    message,
    description
  };
}

/***/ }),

/***/ "./src/util/requestQuery.ts":
/*!**********************************!*\
  !*** ./src/util/requestQuery.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildQueryString: () => (/* binding */ buildQueryString)
/* harmony export */ });
function buildQueryString(data) {
  const query = Object.keys(data).map(k => `${k}=${data[k]}`).join('&');
  return query.length > 0 ? `?${query}` : '';
}

/***/ }),

/***/ "./src/util/updateIcon.ts":
/*!********************************!*\
  !*** ./src/util/updateIcon.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ updateIcon)
/* harmony export */ });
function updateIcon(asUnread) {
  document.querySelectorAll('link[rel="icon"], link[rel="alternate icon"]').forEach(link => {
    if (asUnread) {
      if (!link.href.includes('favicon-unread')) {
        link.href = link.href.replace('favicon', 'favicon-unread');
      }
    } else {
      link.href = link.href.replace('favicon-unread', 'favicon');
    }
  });
}

/***/ }),

/***/ "./src/util/updatePageTitle.ts":
/*!*************************************!*\
  !*** ./src/util/updatePageTitle.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setPageTitle: () => (/* binding */ setPageTitle),
/* harmony export */   setPageTitleInstant: () => (/* binding */ setPageTitleInstant)
/* harmony export */ });
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");


const UPDATE_DEBOUNCE_MS = 200;

// For some reason setting `document.title` to the same value
// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter
function setPageTitleInstant(nextTitle) {
  if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_ELECTRON) {
    window.electron.setWindowTitle(nextTitle);
    return;
  }
  if (document.title !== nextTitle) {
    document.title = nextTitle;
  }
}

// Synchronous page title update has conflicts with History API in Chrome
const setPageTitle = (0,_schedulers__WEBPACK_IMPORTED_MODULE_0__.debounce)(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);

/***/ }),

/***/ "./src/components/common/BadgeButton.module.scss":
/*!*******************************************************!*\
  !*** ./src/components/common/BadgeButton.module.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"BadgeButton-module__root","clickable":"BadgeButton-module__clickable"});

/***/ }),

/***/ "./src/components/common/TopicChip.module.scss":
/*!*****************************************************!*\
  !*** ./src/components/common/TopicChip.module.scss ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"TopicChip-module__root"});

/***/ }),

/***/ "./src/components/common/gift/SavedGift.module.scss":
/*!**********************************************************!*\
  !*** ./src/components/common/gift/SavedGift.module.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"SavedGift-module__root","avatar":"SavedGift-module__avatar","hiddenGift":"SavedGift-module__hiddenGift","radialPattern":"SavedGift-module__radialPattern"});

/***/ }),

/***/ "./src/components/left/ConnectionStatusOverlay.scss":
/*!**********************************************************!*\
  !*** ./src/components/left/ConnectionStatusOverlay.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/left/LeftColumn.scss":
/*!*********************************************!*\
  !*** ./src/components/left/LeftColumn.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/left/NewChatButton.scss":
/*!************************************************!*\
  !*** ./src/components/left/NewChatButton.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/left/main/LeftMain.scss":
/*!************************************************!*\
  !*** ./src/components/left/main/LeftMain.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/left/main/LeftMainHeader.scss":
/*!******************************************************!*\
  !*** ./src/components/left/main/LeftMainHeader.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/main/GameModal.scss":
/*!********************************************!*\
  !*** ./src/components/main/GameModal.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/main/LockScreen.module.scss":
/*!****************************************************!*\
  !*** ./src/components/main/LockScreen.module.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"container":"LockScreen-module__container","wrapper":"LockScreen-module__wrapper","icon":"LockScreen-module__icon","help":"LockScreen-module__help"});

/***/ }),

/***/ "./src/components/main/Main.scss":
/*!***************************************!*\
  !*** ./src/components/main/Main.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/main/visualEffects/ConfettiContainer.module.scss":
/*!*************************************************************************!*\
  !*** ./src/components/main/visualEffects/ConfettiContainer.module.scss ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"ConfettiContainer-module__root"});

/***/ }),

/***/ "./src/components/main/visualEffects/WaveContainer.module.scss":
/*!*********************************************************************!*\
  !*** ./src/components/main/visualEffects/WaveContainer.module.scss ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"WaveContainer-module__root","wave":"WaveContainer-module__wave","waveGrow":"WaveContainer-module__waveGrow"});

/***/ }),

/***/ "./src/components/middle/ContactGreeting.module.scss":
/*!***********************************************************!*\
  !*** ./src/components/middle/ContactGreeting.module.scss ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"ContactGreeting-module__root","wrapper":"ContactGreeting-module__wrapper","explainer":"ContactGreeting-module__explainer","title":"ContactGreeting-module__title","description":"ContactGreeting-module__description","sticker":"ContactGreeting-module__sticker"});

/***/ }),

/***/ "./src/components/middle/FloatingActionButtons.module.scss":
/*!*****************************************************************!*\
  !*** ./src/components/middle/FloatingActionButtons.module.scss ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"FloatingActionButtons-module__root","hidden":"FloatingActionButtons-module__hidden","reactions":"FloatingActionButtons-module__reactions","transform-down":"FloatingActionButtons-module__transform-down","transformDown":"FloatingActionButtons-module__transform-down","unread":"FloatingActionButtons-module__unread","revealed":"FloatingActionButtons-module__revealed","no-composer":"FloatingActionButtons-module__no-composer","noComposer":"FloatingActionButtons-module__no-composer","no-extra-shift":"FloatingActionButtons-module__no-extra-shift","noExtraShift":"FloatingActionButtons-module__no-extra-shift","hide-scroll-down":"FloatingActionButtons-module__hide-scroll-down","hideScrollDown":"FloatingActionButtons-module__hide-scroll-down","is-symbol-menu-open":"FloatingActionButtons-module__is-symbol-menu-open","isSymbolMenuOpen":"FloatingActionButtons-module__is-symbol-menu-open"});

/***/ }),

/***/ "./src/components/middle/MessageList.scss":
/*!************************************************!*\
  !*** ./src/components/middle/MessageList.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/MessageListBotInfo.module.scss":
/*!**************************************************************!*\
  !*** ./src/components/middle/MessageListBotInfo.module.scss ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"MessageListBotInfo-module__root","bot-info":"MessageListBotInfo-module__bot-info","botInfo":"MessageListBotInfo-module__bot-info","bot-info-description":"MessageListBotInfo-module__bot-info-description","botInfoDescription":"MessageListBotInfo-module__bot-info-description","bot-info-title":"MessageListBotInfo-module__bot-info-title","botInfoTitle":"MessageListBotInfo-module__bot-info-title","media":"MessageListBotInfo-module__media"});

/***/ }),

/***/ "./src/components/middle/MiddleColumn.module.scss":
/*!********************************************************!*\
  !*** ./src/components/middle/MiddleColumn.module.scss ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"background":"MiddleColumn-module__background","customBgImage":"MiddleColumn-module__customBgImage","customBgColor":"MiddleColumn-module__customBgColor","withTransition":"MiddleColumn-module__withTransition","draggable":"MiddleColumn-module__draggable","blurred":"MiddleColumn-module__blurred","withRightColumn":"MiddleColumn-module__withRightColumn"});

/***/ }),

/***/ "./src/components/middle/MiddleColumn.scss":
/*!*************************************************!*\
  !*** ./src/components/middle/MiddleColumn.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/MiddleHeader.scss":
/*!*************************************************!*\
  !*** ./src/components/middle/MiddleHeader.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/MiddleHeaderPanes.module.scss":
/*!*************************************************************!*\
  !*** ./src/components/middle/MiddleHeaderPanes.module.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"MiddleHeaderPanes-module__root"});

/***/ }),

/***/ "./src/components/middle/NoMessages.scss":
/*!***********************************************!*\
  !*** ./src/components/middle/NoMessages.scss ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/PinnedMessageNavigation.module.scss":
/*!*******************************************************************!*\
  !*** ./src/components/middle/PinnedMessageNavigation.module.scss ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"pinned-message-border":"PinnedMessageNavigation-module__pinned-message-border","pinnedMessageBorder":"PinnedMessageNavigation-module__pinned-message-border","pinned-message-border-wrapper-1":"PinnedMessageNavigation-module__pinned-message-border-wrapper-1","pinnedMessageBorderWrapper1":"PinnedMessageNavigation-module__pinned-message-border-wrapper-1","pinned-message-border-wrapper":"PinnedMessageNavigation-module__pinned-message-border-wrapper","pinnedMessageBorderWrapper":"PinnedMessageNavigation-module__pinned-message-border-wrapper","pinned-message-border-mark":"PinnedMessageNavigation-module__pinned-message-border-mark","pinnedMessageBorderMark":"PinnedMessageNavigation-module__pinned-message-border-mark"});

/***/ }),

/***/ "./src/components/middle/PremiumRequiredMessage.module.scss":
/*!******************************************************************!*\
  !*** ./src/components/middle/PremiumRequiredMessage.module.scss ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"PremiumRequiredMessage-module__root","button":"PremiumRequiredMessage-module__button","disabled":"PremiumRequiredMessage-module__disabled","inner":"PremiumRequiredMessage-module__inner","icons-container":"PremiumRequiredMessage-module__icons-container","iconsContainer":"PremiumRequiredMessage-module__icons-container","animated-unlock":"PremiumRequiredMessage-module__animated-unlock","animatedUnlock":"PremiumRequiredMessage-module__animated-unlock","comments-icon":"PremiumRequiredMessage-module__comments-icon","commentsIcon":"PremiumRequiredMessage-module__comments-icon","description":"PremiumRequiredMessage-module__description"});

/***/ }),

/***/ "./src/components/middle/ScrollDownButton.module.scss":
/*!************************************************************!*\
  !*** ./src/components/middle/ScrollDownButton.module.scss ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"ScrollDownButton-module__root","button":"ScrollDownButton-module__button","icon":"ScrollDownButton-module__icon","unread-count":"ScrollDownButton-module__unread-count","unreadCount":"ScrollDownButton-module__unread-count"});

/***/ }),

/***/ "./src/components/middle/message/Album.scss":
/*!**************************************************!*\
  !*** ./src/components/middle/message/Album.scss ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/AnimatedEmoji.scss":
/*!**********************************************************!*\
  !*** ./src/components/middle/message/AnimatedEmoji.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/CommentButton.scss":
/*!**********************************************************!*\
  !*** ./src/components/middle/message/CommentButton.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/Contact.module.scss":
/*!***********************************************************!*\
  !*** ./src/components/middle/message/Contact.module.scss ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"Contact-module__root","info-container":"Contact-module__info-container","infoContainer":"Contact-module__info-container","info":"Contact-module__info","name":"Contact-module__name","phone":"Contact-module__phone","divider":"Contact-module__divider","buttons":"Contact-module__buttons","button":"Contact-module__button","disabled":"Contact-module__disabled","emoji-icon-background":"Contact-module__emoji-icon-background","emojiIconBackground":"Contact-module__emoji-icon-background"});

/***/ }),

/***/ "./src/components/middle/message/FactCheck.module.scss":
/*!*************************************************************!*\
  !*** ./src/components/middle/message/FactCheck.module.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"FactCheck-module__root","title":"FactCheck-module__title","content":"FactCheck-module__content","separator":"FactCheck-module__separator","footnote":"FactCheck-module__footnote","collapsed":"FactCheck-module__collapsed","cutoutWrapper":"FactCheck-module__cutoutWrapper","collapseIcon":"FactCheck-module__collapseIcon","clickable":"FactCheck-module__clickable"});

/***/ }),

/***/ "./src/components/middle/message/Game.scss":
/*!*************************************************!*\
  !*** ./src/components/middle/message/Game.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/Giveaway.module.scss":
/*!************************************************************!*\
  !*** ./src/components/middle/message/Giveaway.module.scss ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"Giveaway-module__root","title":"Giveaway-module__title","sticker":"Giveaway-module__sticker","resultSticker":"Giveaway-module__resultSticker","count":"Giveaway-module__count","section":"Giveaway-module__section","description":"Giveaway-module__description","peers":"Giveaway-module__peers","peer":"Giveaway-module__peer","button":"Giveaway-module__button","result":"Giveaway-module__result","separator":"Giveaway-module__separator"});

/***/ }),

/***/ "./src/components/middle/message/InlineButtons.scss":
/*!**********************************************************!*\
  !*** ./src/components/middle/message/InlineButtons.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/Invoice.scss":
/*!****************************************************!*\
  !*** ./src/components/middle/message/Invoice.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/InvoiceMediaPreview.module.scss":
/*!***********************************************************************!*\
  !*** ./src/components/middle/message/InvoiceMediaPreview.module.scss ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"InvoiceMediaPreview-module__root","duration":"InvoiceMediaPreview-module__duration","buy":"InvoiceMediaPreview-module__buy","spoiler":"InvoiceMediaPreview-module__spoiler"});

/***/ }),

/***/ "./src/components/middle/message/Location.scss":
/*!*****************************************************!*\
  !*** ./src/components/middle/message/Location.scss ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/Message.scss":
/*!****************************************************!*\
  !*** ./src/components/middle/message/Message.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/MessageMeta.scss":
/*!********************************************************!*\
  !*** ./src/components/middle/message/MessageMeta.scss ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/MessagePhoneCall.module.scss":
/*!********************************************************************!*\
  !*** ./src/components/middle/message/MessagePhoneCall.module.scss ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"MessagePhoneCall-module__root","button":"MessagePhoneCall-module__button","info":"MessagePhoneCall-module__info","reason":"MessagePhoneCall-module__reason","arrow":"MessagePhoneCall-module__arrow","incoming":"MessagePhoneCall-module__incoming","missed":"MessagePhoneCall-module__missed","canceled":"MessagePhoneCall-module__canceled","meta":"MessagePhoneCall-module__meta","duration":"MessagePhoneCall-module__duration"});

/***/ }),

/***/ "./src/components/middle/message/PaidMediaOverlay.module.scss":
/*!********************************************************************!*\
  !*** ./src/components/middle/message/PaidMediaOverlay.module.scss ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"PaidMediaOverlay-module__root","buyButton":"PaidMediaOverlay-module__buyButton","boughtStatus":"PaidMediaOverlay-module__boughtStatus","star":"PaidMediaOverlay-module__star","buttonText":"PaidMediaOverlay-module__buttonText"});

/***/ }),

/***/ "./src/components/middle/message/Poll.scss":
/*!*************************************************!*\
  !*** ./src/components/middle/message/Poll.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/PollOption.scss":
/*!*******************************************************!*\
  !*** ./src/components/middle/message/PollOption.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/SenderGroupContainer.module.scss":
/*!************************************************************************!*\
  !*** ./src/components/middle/message/SenderGroupContainer.module.scss ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"SenderGroupContainer-module__root","avatarContainer":"SenderGroupContainer-module__avatarContainer","senderAvatar":"SenderGroupContainer-module__senderAvatar"});

/***/ }),

/***/ "./src/components/middle/message/SponsoredMessage.scss":
/*!*************************************************************!*\
  !*** ./src/components/middle/message/SponsoredMessage.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/Sticker.module.scss":
/*!***********************************************************!*\
  !*** ./src/components/middle/message/Sticker.module.scss ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"Sticker-module__root","inactive":"Sticker-module__inactive","mirrored":"Sticker-module__mirrored","effect":"Sticker-module__effect"});

/***/ }),

/***/ "./src/components/middle/panes/AudioPlayer.scss":
/*!******************************************************!*\
  !*** ./src/components/middle/panes/AudioPlayer.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/panes/BotAdPane.module.scss":
/*!***********************************************************!*\
  !*** ./src/components/middle/panes/BotAdPane.module.scss ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"BotAdPane-module__root","content":"BotAdPane-module__content","info":"BotAdPane-module__info","avatar":"BotAdPane-module__avatar","title":"BotAdPane-module__title","text":"BotAdPane-module__text","aboutAd":"BotAdPane-module__aboutAd"});

/***/ }),

/***/ "./src/components/middle/panes/BotVerificationPane.module.scss":
/*!*********************************************************************!*\
  !*** ./src/components/middle/panes/BotVerificationPane.module.scss ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"BotVerificationPane-module__root","icon":"BotVerificationPane-module__icon"});

/***/ }),

/***/ "./src/components/middle/panes/ChatReportPane.scss":
/*!*********************************************************!*\
  !*** ./src/components/middle/panes/ChatReportPane.scss ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/panes/HeaderPinnedMessage.module.scss":
/*!*********************************************************************!*\
  !*** ./src/components/middle/panes/HeaderPinnedMessage.module.scss ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"HeaderPinnedMessage-module__root","mini":"HeaderPinnedMessage-module__mini","fullWidth":"HeaderPinnedMessage-module__fullWidth","pinnedMessage":"HeaderPinnedMessage-module__pinnedMessage","messageText":"HeaderPinnedMessage-module__messageText","loading":"HeaderPinnedMessage-module__loading","pinListIcon":"HeaderPinnedMessage-module__pinListIcon","pinListIconHidden":"HeaderPinnedMessage-module__pinListIconHidden","no-hover":"HeaderPinnedMessage-module__no-hover","noHover":"HeaderPinnedMessage-module__no-hover","messageTextTransition":"HeaderPinnedMessage-module__messageTextTransition","withMedia":"HeaderPinnedMessage-module__withMedia","title":"HeaderPinnedMessage-module__title","summary":"HeaderPinnedMessage-module__summary","inlineButton":"HeaderPinnedMessage-module__inlineButton","pictogramTransition":"HeaderPinnedMessage-module__pictogramTransition","pinnedThumb":"HeaderPinnedMessage-module__pinnedThumb","pinnedThumbImage":"HeaderPinnedMessage-module__pinnedThumbImage"});

/***/ }),

/***/ "./src/components/right/AddChatMembers.scss":
/*!**************************************************!*\
  !*** ./src/components/right/AddChatMembers.scss ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/right/Profile.scss":
/*!*******************************************!*\
  !*** ./src/components/right/Profile.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/right/RightColumn.scss":
/*!***********************************************!*\
  !*** ./src/components/right/RightColumn.scss ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/right/RightHeader.scss":
/*!***********************************************!*\
  !*** ./src/components/right/RightHeader.scss ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/right/statistics/BoostStatistics.module.scss":
/*!*********************************************************************!*\
  !*** ./src/components/right/statistics/BoostStatistics.module.scss ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"BoostStatistics-module__root","noResults":"BoostStatistics-module__noResults","section-header":"BoostStatistics-module__section-header","sectionHeader":"BoostStatistics-module__section-header","section":"BoostStatistics-module__section","user":"BoostStatistics-module__user","stats":"BoostStatistics-module__stats","down":"BoostStatistics-module__down","loadMoreSpinner":"BoostStatistics-module__loadMoreSpinner","status":"BoostStatistics-module__status","info":"BoostStatistics-module__info","month":"BoostStatistics-module__month","quantity":"BoostStatistics-module__quantity","floatingBadge":"BoostStatistics-module__floatingBadge","floatingBadgeButtonColor":"BoostStatistics-module__floatingBadgeButtonColor","floatingBadgeWarning":"BoostStatistics-module__floatingBadgeWarning","floatingBadgeButton":"BoostStatistics-module__floatingBadgeButton","floatingBadgeIcon":"BoostStatistics-module__floatingBadgeIcon","floatingBadgeValue":"BoostStatistics-module__floatingBadgeValue","content":"BoostStatistics-module__content","boostSection":"BoostStatistics-module__boostSection","giveawayButton":"BoostStatistics-module__giveawayButton","giveawayIcon":"BoostStatistics-module__giveawayIcon"});

/***/ }),

/***/ "./src/components/right/statistics/MonetizationStatistics.module.scss":
/*!****************************************************************************!*\
  !*** ./src/components/right/statistics/MonetizationStatistics.module.scss ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"MonetizationStatistics-module__root","graph":"MonetizationStatistics-module__graph","hidden":"MonetizationStatistics-module__hidden","ready":"MonetizationStatistics-module__ready","section":"MonetizationStatistics-module__section","topText":"MonetizationStatistics-module__topText","availableReward":"MonetizationStatistics-module__availableReward","rewardValue":"MonetizationStatistics-module__rewardValue","decimalPart":"MonetizationStatistics-module__decimalPart","integer":"MonetizationStatistics-module__integer","decimalUsdPart":"MonetizationStatistics-module__decimalUsdPart","toncoinIcon":"MonetizationStatistics-module__toncoinIcon","textBottom":"MonetizationStatistics-module__textBottom"});

/***/ }),

/***/ "./src/components/story/MediaStory.module.scss":
/*!*****************************************************!*\
  !*** ./src/components/story/MediaStory.module.scss ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"MediaStory-module__root","wrapper":"MediaStory-module__wrapper","media":"MediaStory-module__media","expiredIcon":"MediaStory-module__expiredIcon","overlayIcon":"MediaStory-module__overlayIcon","pinnedIcon":"MediaStory-module__pinnedIcon","viewsCount":"MediaStory-module__viewsCount","duration":"MediaStory-module__duration","contextMenu":"MediaStory-module__contextMenu"});

/***/ }),

/***/ "./src/assets/map-pin.svg":
/*!********************************!*\
  !*** ./src/assets/map-pin.svg ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "map-pin.899635f6fe777c28998a.svg";

/***/ }),

/***/ "./src/assets/telegram-logo-filled.svg":
/*!*********************************************!*\
  !*** ./src/assets/telegram-logo-filled.svg ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "telegram-logo-filled.67469f6dc5e301e8e0bd.svg";

/***/ }),

/***/ "./src/assets/wave_ripple.svg":
/*!************************************!*\
  !*** ./src/assets/wave_ripple.svg ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "wave_ripple.ae54b556387f73a62934.svg";

/***/ }),

/***/ "./src/versionNotification.txt":
/*!*************************************!*\
  !*** ./src/versionNotification.txt ***!
  \*************************************/
/***/ ((module) => {

module.exports = "**Telegram Web A Digest**\r\n\r\nMany new features and useful optimizations have been added in recent months. Here is a brief overview of what's been happening in Web A since August.\r\n\r\n**September – November** \r\n\r\n✏️ __General__\r\n• [Reply Revolution](https://telegram.org/blog/reply-revolution#reply-revolution) – the app learned to quote specific parts of any message, making your responses 100% precise.\r\n• Also, [Quote Formatting](https://telegram.org/blog/reply-revolution#quote-formatting) have arrived.\r\n\r\n📣 __Channels__\r\n• Channels added [boosts](https://telegram.org/blog/channel-stories#stories-for-channels) and [giveaways.](https://telegram.org/blog/giveaways#free-telegram-premium) \r\n• Users also got an option to reassign their boosts between channels.\r\n\r\n🌄 __Stories__\r\n• Numerous improvements have been made to the animations flow, ensuring the stories bar expands more smoothly. Additionally, a package of optimizations has been added to enhance the performance of stories on mobile devices.\r\n• Stories have been introduced for [channels,](https://telegram.org/blog/channel-stories#stories-for-channels) and the story viewer has been updated with new gestures to expand and reply.\r\n\r\n⚙️ __Settings__\r\n• The app has added an option, 'Who can find me by phone number,' along with a setting under 'Privacy and Security' to manage the visibility of your bio.\r\n\r\n✨ __Extra__\r\n• Some further improvements have been made to the Mini Apps area.\r\n• New security notifications have been added to the chat list to alert you when your account is logged into from a new device.\r\n• New design for code blocks formatting.\r\n\r\n**December – February**\r\n\r\n✏️ __General__\r\n• [Saved Messages 2.0](https://telegram.org/blog/new-saved-messages-and-9-more#saved-messages-2-0) – including tags, My Notes, Replies and forwards from hidden authors.\r\n• [One-Time Voice Messages](https://telegram.org/blog/new-saved-messages-and-9-more#one-time-voice-and-video-messages) including both listening and recording. Added support for viewing One-Time Video Messages.\r\n• [Read-Time in Private Chats](https://telegram.org/blog/new-saved-messages-and-9-more#read-time-in-private-chats)\r\n• You can now replace media when editing messages.\r\n• The app learned to [preserve the selected mode](https://telegram.org/blog/similar-channels#improvements-for-topics) for topics in groups.\r\n• Whenever you create a small group, Web A suggests a name for it based on users' name you have added.\r\n\r\n📣 __Channels__ \r\n• Added [custom channel reactions.](https://telegram.org/blog/similar-channels#custom-reactions-for-channels)\r\n• Implemented [channel stories stats.](https://telegram.org/blog/similar-channels#story-stats-for-channels)\r\n• Channel emoji statuses.\r\n• [Similar Channels.](https://telegram.org/blog/similar-channels#similar-channels)\r\n\r\n👥 __Groups__\r\n• [9 new features for groups.](https://telegram.org/blog/february2024)\r\n\r\n🤖 __Bots__\r\n• Edit your bots info right from their profile.\r\n\r\n🌄 __Stories__\r\n• Added support for [forwarded stories](https://telegram.org/blog/posts-in-stories-and-more#view-reposts-and-more) and [channel posts in stories.](https://telegram.org/blog/posts-in-stories-and-more#share-posts-in-stories)\r\n\r\n✨ __Extra__\r\n• Giveaway Improvements: displaying winners list and additional prizes.\r\n\r\n**March**\r\n\r\n📣 __Channels__ \r\n• Admins will soon be able to launch giveaways in their channels.\r\n\r\n✨ __Extra__\r\n• Added support for Emoji v15.1.\r\n• Some design enhancements for shared contacts, links preview and more.\r\n";

/***/ })

}]);
//# sourceMappingURL=BundleMain.4d36d110dcffa9133246.js.map