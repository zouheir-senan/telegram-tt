/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/api/gramjs/index.ts":
/*!*********************************!*\
  !*** ./src/api/gramjs/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   callApi: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.callApi),
/* harmony export */   callApiLocal: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.callApiLocal),
/* harmony export */   cancelApiProgress: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.cancelApiProgress),
/* harmony export */   cancelApiProgressMaster: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.cancelApiProgressMaster),
/* harmony export */   handleMethodCallback: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.handleMethodCallback),
/* harmony export */   handleMethodResponse: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.handleMethodResponse),
/* harmony export */   initApi: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.initApi),
/* harmony export */   setShouldEnableDebugLog: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.setShouldEnableDebugLog),
/* harmony export */   updateFullLocalDb: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.updateFullLocalDb),
/* harmony export */   updateLocalDb: () => (/* reexport safe */ _worker_connector__WEBPACK_IMPORTED_MODULE_0__.updateLocalDb)
/* harmony export */ });
/* harmony import */ var _worker_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worker/connector */ "./src/api/gramjs/worker/connector.ts");
// export { initApi, callApi, cancelApiProgress } from './methods/init';


/***/ }),

/***/ "./src/api/gramjs/worker/connector.ts":
/*!********************************************!*\
  !*** ./src/api/gramjs/worker/connector.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   callApi: () => (/* binding */ callApi),
/* harmony export */   callApiLocal: () => (/* binding */ callApiLocal),
/* harmony export */   callApiOnMasterTab: () => (/* binding */ callApiOnMasterTab),
/* harmony export */   cancelApiProgress: () => (/* binding */ cancelApiProgress),
/* harmony export */   cancelApiProgressMaster: () => (/* binding */ cancelApiProgressMaster),
/* harmony export */   handleMethodCallback: () => (/* binding */ handleMethodCallback),
/* harmony export */   handleMethodResponse: () => (/* binding */ handleMethodResponse),
/* harmony export */   initApi: () => (/* binding */ initApi),
/* harmony export */   initApiOnMasterTab: () => (/* binding */ initApiOnMasterTab),
/* harmony export */   setShouldEnableDebugLog: () => (/* binding */ setShouldEnableDebugLog),
/* harmony export */   updateFullLocalDb: () => (/* binding */ updateFullLocalDb),
/* harmony export */   updateLocalDb: () => (/* binding */ updateLocalDb)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_debugConsole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/debugConsole */ "./src/util/debugConsole.ts");
/* harmony import */ var _util_Deferred__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/Deferred */ "./src/util/Deferred.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_generateUniqueId__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/generateUniqueId */ "./src/util/generateUniqueId.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");







const HEALTH_CHECK_TIMEOUT = 150;
const HEALTH_CHECK_MIN_DELAY = 5 * 1000; // 5 sec
const NO_QUEUE_BEFORE_INIT = new Set(['destroy']);
let worker;
const requestStates = new Map();
const requestStatesByCallback = new Map();
let pendingPayloads = [];
const savedLocalDb = {
  chats: {},
  users: {},
  documents: {},
  stickerSets: {},
  photos: {},
  webDocuments: {},
  commonBoxState: {},
  channelPtsById: {}
};
let isMasterTab = true;
(0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.subscribeToMasterChange)(isMasterTabNew => {
  isMasterTab = isMasterTabNew;
});
const channel = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_MULTITAB_SUPPORTED ? new BroadcastChannel(_config__WEBPACK_IMPORTED_MODULE_0__.DATA_BROADCAST_CHANNEL_NAME) : undefined;
const postMessagesOnTickEnd = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_5__.throttleWithTickEnd)(() => {
  const payloads = pendingPayloads;
  pendingPayloads = [];
  worker?.postMessage({
    payloads
  });
});
function postMessageOnTickEnd(payload) {
  pendingPayloads.push(payload);
  postMessagesOnTickEnd();
}
function initApiOnMasterTab(initialArgs) {
  if (!channel) return;
  channel.postMessage({
    type: 'initApi',
    token: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)(),
    initialArgs
  });
}
let updateCallback;
let localApiRequestsQueue = [];
let apiRequestsQueue = [];
let isInited = false;
function initApi(onUpdate, initialArgs) {
  updateCallback = onUpdate;
  if (!isMasterTab) {
    initApiOnMasterTab(initialArgs);
    return Promise.resolve();
  }
  if (!worker) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      // eslint-disable-next-line no-console
      console.log('>>> START LOAD WORKER');
    }
    worker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("src_api_gramjs_worker_worker_ts"), __webpack_require__.b));
    subscribeToWorker(onUpdate);
    if (initialArgs.platform === 'iOS') {
      setupIosHealthCheck();
    }
  }
  return makeRequest({
    type: 'initApi',
    args: [initialArgs, savedLocalDb]
  }).then(() => {
    isInited = true;
    apiRequestsQueue.forEach(request => {
      callApi(request.fnName, ...request.args).then(request.deferred.resolve).catch(request.deferred.reject);
    });
    apiRequestsQueue = [];
    localApiRequestsQueue.forEach(request => {
      callApiLocal(request.fnName, ...request.args).then(request.deferred.resolve).catch(request.deferred.reject);
    });
    localApiRequestsQueue = [];
  });
}
function updateLocalDb(name, prop, value) {
  savedLocalDb[name][prop] = value;
}
function updateFullLocalDb(initial) {
  Object.assign(savedLocalDb, initial);
}
function callApiOnMasterTab(payload) {
  if (!channel) return;
  channel.postMessage({
    type: 'callApi',
    token: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)(),
    ...payload
  });
}
function setShouldEnableDebugLog(value) {
  return makeRequest({
    type: 'toggleDebugMode',
    isEnabled: value
  });
}

/*
 * Call a worker method on this tab's worker, without transferring to master tab
 * Mostly needed to disconnect worker when re-electing master
 */
function callApiLocal(fnName, ...args) {
  if (!isInited) {
    if (NO_QUEUE_BEFORE_INIT.has(fnName)) {
      return Promise.resolve(undefined);
    }
    const deferred = new _util_Deferred__WEBPACK_IMPORTED_MODULE_2__["default"]();
    localApiRequestsQueue.push({
      fnName,
      args,
      deferred
    });
    return deferred.promise;
  }
  const promise = makeRequest({
    type: 'callMethod',
    name: fnName,
    args
  });

  // Some TypeScript magic to make sure `VirtualClass` is never returned from any method
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
    (async () => {
      try {
        // Unwrap all chained promises
        const response = await promise;
        // Make sure responses do not include `VirtualClass` instances
        const allowedResponse = response;
        // Suppress "unused variable" constraint
        void allowedResponse;
      } catch (err) {
        // Do noting
      }
    })();
  }
  return promise;
}
function callApi(fnName, ...args) {
  if (!isInited && isMasterTab) {
    if (NO_QUEUE_BEFORE_INIT.has(fnName)) {
      return Promise.resolve(undefined);
    }
    const deferred = new _util_Deferred__WEBPACK_IMPORTED_MODULE_2__["default"]();
    apiRequestsQueue.push({
      fnName,
      args,
      deferred
    });
    return deferred.promise;
  }
  const promise = isMasterTab ? makeRequest({
    type: 'callMethod',
    name: fnName,
    args
  }) : makeRequestToMaster({
    name: fnName,
    args
  });

  // Some TypeScript magic to make sure `VirtualClass` is never returned from any method
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
    (async () => {
      try {
        // Unwrap all chained promises
        const response = await promise;
        // Make sure responses do not include `VirtualClass` instances
        const allowedResponse = response;
        // Suppress "unused variable" constraint
        void allowedResponse;
      } catch (err) {
        // Do noting
      }
    })();
  }
  return promise;
}
function cancelApiProgress(progressCallback) {
  progressCallback.isCanceled = true;
  const {
    messageId
  } = requestStatesByCallback.get(progressCallback) || {};
  if (!messageId) {
    return;
  }
  if (isMasterTab) {
    cancelApiProgressMaster(messageId);
  } else {
    if (!channel) return;
    channel.postMessage({
      type: 'cancelApiProgress',
      token: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)(),
      messageId
    });
  }
}
function cancelApiProgressMaster(messageId) {
  postMessageOnTickEnd({
    type: 'cancelProgress',
    messageId
  });
}
function subscribeToWorker(onUpdate) {
  worker?.addEventListener('message', ({
    data
  }) => {
    data?.payloads.forEach(payload => {
      if (payload.type === 'updates') {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        let DEBUG_startAt;
        if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
          DEBUG_startAt = performance.now();
        }
        payload.updates.forEach(onUpdate);
        if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
          const duration = performance.now() - DEBUG_startAt;
          if (duration > 5) {
            // eslint-disable-next-line no-console
            console.warn(`[API] Slow updates processing: ${payload.updates.length} updates in ${duration} ms`);
          }
        }
      } else if (payload.type === 'methodResponse') {
        handleMethodResponse(payload);
      } else if (payload.type === 'methodCallback') {
        handleMethodCallback(payload);
      } else if (payload.type === 'unhandledError') {
        const message = payload.error?.message;
        if (message && _config__WEBPACK_IMPORTED_MODULE_0__.IGNORE_UNHANDLED_ERRORS.has(message)) return;
        throw new Error(message);
      } else if (payload.type === 'sendBeacon') {
        navigator.sendBeacon(payload.url, payload.data);
      } else if (payload.type === 'debugLog') {
        (0,_util_debugConsole__WEBPACK_IMPORTED_MODULE_1__.logDebugMessage)(payload.level, ...payload.args);
      }
    });
  });
}
function handleMethodResponse(data) {
  const requestState = requestStates.get(data.messageId);
  if (requestState) {
    if (data.error) {
      requestState.reject(data.error);
    } else {
      requestState.resolve(data.response);
    }
  }
}
function handleMethodCallback(data) {
  requestStates.get(data.messageId)?.callback?.(...data.callbackArgs);
}
function makeRequestToMaster(message) {
  const messageId = (0,_util_generateUniqueId__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const payload = {
    messageId,
    ...message
  };
  const requestState = {
    messageId
  };

  // Re-wrap type because of `postMessage`
  const promise = new Promise((resolve, reject) => {
    Object.assign(requestState, {
      resolve,
      reject
    });
  });
  if ('args' in payload && 'name' in payload && typeof payload.args[1] === 'function') {
    payload.withCallback = true;
    const callback = payload.args.pop();
    requestState.callback = callback;
    requestStatesByCallback.set(callback, requestState);
  }
  requestStates.set(messageId, requestState);
  promise.catch(() => undefined).finally(() => {
    requestStates.delete(messageId);
    if (requestState.callback) {
      requestStatesByCallback.delete(requestState.callback);
    }
  });
  callApiOnMasterTab(payload);
  return promise;
}
function makeRequest(message) {
  const messageId = (0,_util_generateUniqueId__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const payload = {
    messageId,
    ...message
  };
  const requestState = {
    messageId
  };

  // Re-wrap type because of `postMessage`
  const promise = new Promise((resolve, reject) => {
    Object.assign(requestState, {
      resolve,
      reject
    });
  });
  if ('args' in payload && 'name' in payload && typeof payload.args[1] === 'function') {
    payload.withCallback = true;
    const callback = payload.args.pop();
    requestState.callback = callback;
    requestStatesByCallback.set(callback, requestState);
  }
  requestState.DEBUG_payload = payload;
  requestStates.set(messageId, requestState);
  promise.catch(() => undefined).finally(() => {
    requestStates.delete(messageId);
    if (requestState.callback) {
      requestStatesByCallback.delete(requestState.callback);
    }
  });
  postMessageOnTickEnd(payload);
  return promise;
}
const startedAt = Date.now();

// Workaround for iOS sometimes stops interacting with worker
function setupIosHealthCheck() {
  window.addEventListener('focus', () => {
    void ensureWorkerPing();
    // Sometimes a single check is not enough
    setTimeout(() => ensureWorkerPing(), 1000);
  });
}
async function ensureWorkerPing() {
  let isResolved = false;
  try {
    await Promise.race([makeRequest({
      type: 'ping'
    }), (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_5__.pause)(HEALTH_CHECK_TIMEOUT).then(() => isResolved ? undefined : Promise.reject(new Error('HEALTH_CHECK_TIMEOUT')))]);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error(err);
    if (Date.now() - startedAt >= HEALTH_CHECK_MIN_DELAY) {
      worker?.terminate();
      worker = undefined;
      updateCallback({
        '@type': 'requestReconnectApi'
      });
    }
  } finally {
    isResolved = true;
  }
}

/***/ }),

/***/ "./src/api/types/bots.ts":
/*!*******************************!*\
  !*** ./src/api/types/bots.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/business.ts":
/*!***********************************!*\
  !*** ./src/api/types/business.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/calls.ts":
/*!********************************!*\
  !*** ./src/api/types/calls.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/chats.ts":
/*!********************************!*\
  !*** ./src/api/types/chats.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/index.ts":
/*!********************************!*\
  !*** ./src/api/types/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiMediaFormat: () => (/* reexport safe */ _media__WEBPACK_IMPORTED_MODULE_4__.ApiMediaFormat),
/* harmony export */   ApiMessageEntityTypes: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes),
/* harmony export */   MAIN_THREAD_ID: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID),
/* harmony export */   MESSAGE_DELETED: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.MESSAGE_DELETED)
/* harmony export */ });
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./users */ "./src/api/types/users.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chats */ "./src/api/types/chats.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages */ "./src/api/types/messages.ts");
/* harmony import */ var _updates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./updates */ "./src/api/types/updates.ts");
/* harmony import */ var _media__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./media */ "./src/api/types/media.ts");
/* harmony import */ var _payments__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./payments */ "./src/api/types/payments.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./settings */ "./src/api/types/settings.ts");
/* harmony import */ var _bots__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bots */ "./src/api/types/bots.ts");
/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./misc */ "./src/api/types/misc.ts");
/* harmony import */ var _calls__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./calls */ "./src/api/types/calls.ts");
/* harmony import */ var _statistics__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./statistics */ "./src/api/types/statistics.ts");
/* harmony import */ var _stories__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stories */ "./src/api/types/stories.ts");
/* harmony import */ var _business__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./business */ "./src/api/types/business.ts");














/***/ }),

/***/ "./src/api/types/media.ts":
/*!********************************!*\
  !*** ./src/api/types/media.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiMediaFormat: () => (/* binding */ ApiMediaFormat)
/* harmony export */ });
// We cache avatars as Data URI for faster initial load
// and messages media as Blob for smaller size.

let ApiMediaFormat = /*#__PURE__*/function (ApiMediaFormat) {
  ApiMediaFormat[ApiMediaFormat["BlobUrl"] = 0] = "BlobUrl";
  ApiMediaFormat[ApiMediaFormat["Progressive"] = 1] = "Progressive";
  ApiMediaFormat[ApiMediaFormat["DownloadUrl"] = 2] = "DownloadUrl";
  ApiMediaFormat[ApiMediaFormat["Text"] = 3] = "Text";
  return ApiMediaFormat;
}({});

/***/ }),

/***/ "./src/api/types/messages.ts":
/*!***********************************!*\
  !*** ./src/api/types/messages.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiMessageEntityTypes: () => (/* binding */ ApiMessageEntityTypes),
/* harmony export */   MAIN_THREAD_ID: () => (/* binding */ MAIN_THREAD_ID),
/* harmony export */   MESSAGE_DELETED: () => (/* binding */ MESSAGE_DELETED)
/* harmony export */ });
let ApiMessageEntityTypes = /*#__PURE__*/function (ApiMessageEntityTypes) {
  ApiMessageEntityTypes["Bold"] = "MessageEntityBold";
  ApiMessageEntityTypes["Blockquote"] = "MessageEntityBlockquote";
  ApiMessageEntityTypes["BotCommand"] = "MessageEntityBotCommand";
  ApiMessageEntityTypes["Cashtag"] = "MessageEntityCashtag";
  ApiMessageEntityTypes["Code"] = "MessageEntityCode";
  ApiMessageEntityTypes["Email"] = "MessageEntityEmail";
  ApiMessageEntityTypes["Hashtag"] = "MessageEntityHashtag";
  ApiMessageEntityTypes["Italic"] = "MessageEntityItalic";
  ApiMessageEntityTypes["MentionName"] = "MessageEntityMentionName";
  ApiMessageEntityTypes["Mention"] = "MessageEntityMention";
  ApiMessageEntityTypes["Phone"] = "MessageEntityPhone";
  ApiMessageEntityTypes["Pre"] = "MessageEntityPre";
  ApiMessageEntityTypes["Strike"] = "MessageEntityStrike";
  ApiMessageEntityTypes["TextUrl"] = "MessageEntityTextUrl";
  ApiMessageEntityTypes["Url"] = "MessageEntityUrl";
  ApiMessageEntityTypes["Underline"] = "MessageEntityUnderline";
  ApiMessageEntityTypes["Spoiler"] = "MessageEntitySpoiler";
  ApiMessageEntityTypes["CustomEmoji"] = "MessageEntityCustomEmoji";
  ApiMessageEntityTypes["Unknown"] = "MessageEntityUnknown";
  return ApiMessageEntityTypes;
}({});

// KeyboardButtons

const MAIN_THREAD_ID = -1;

// `Symbol` can not be transferred from worker
const MESSAGE_DELETED = 'MESSAGE_DELETED';

/***/ }),

/***/ "./src/api/types/misc.ts":
/*!*******************************!*\
  !*** ./src/api/types/misc.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/payments.ts":
/*!***********************************!*\
  !*** ./src/api/types/payments.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/settings.ts":
/*!***********************************!*\
  !*** ./src/api/types/settings.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/statistics.ts":
/*!*************************************!*\
  !*** ./src/api/types/statistics.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/stories.ts":
/*!**********************************!*\
  !*** ./src/api/types/stories.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/updates.ts":
/*!**********************************!*\
  !*** ./src/api/types/updates.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/api/types/users.ts":
/*!********************************!*\
  !*** ./src/api/types/users.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./src/assets/localization/initialStrings.ts":
/*!***************************************************!*\
  !*** ./src/assets/localization/initialStrings.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* eslint-disable */
// This file is generated by dev/generateInitialLangFallback.ts. Do not edit it manually.

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  "WrongNumber": "Wrong number?",
  "SentAppCode": "We've sent the code to the **Telegram** app on your other device.",
  "LoginJustSentSms": "We've sent you a code via SMS. Please enter it above.",
  "LoginHeaderPassword": "Enter Password",
  "LoginEnterPasswordDescription": "You have Two-Step Verification enabled, so your account is protected with an additional password.",
  "StartText": "Please confirm your country code\nand enter your phone number.",
  "LoginPhonePlaceholder": "Your phone number",
  "LoginNext": "Next",
  "LoginQRLogin": "Log in by QR Code",
  "LoginQRTitle": "Log in to Telegram by QR Code",
  "LoginQRHelp1": "Open Telegram on your phone",
  "LoginQRHelp2": "Go to **Settings** > **Devices** > **Link Desktop Device**",
  "LoginQRHelp3": "Point your phone at this screen to confirm login",
  "LoginQRCancel": "Log in by phone Number",
  "YourName": "Your Name",
  "LoginRegisterDesc": "Enter your name and add a profile photo.",
  "LoginRegisterFirstNamePlaceholder": "First Name",
  "LoginRegisterLastNamePlaceholder": "Last Name",
  "LoginSelectCountryTitle": "Country",
  "CountryNone": "Country not found",
  "PleaseEnterPassword": "Enter your new password",
  "ErrorPhoneNumberInvalid": "Invalid phone number, please try again.",
  "ErrorCodeInvalid": "Invalid code, please try again.",
  "ErrorIncorrectPassword": "Invalid password, please try again.",
  "ErrorPasswordFlood": "Too many attempts, please try again later.",
  "ErrorPhoneBanned": "This phone number is banned.",
  "ErrorFloodTime": "Too many attempts, please try again in {time}.",
  "ErrorUnexpected": "Unexpected error",
  "ErrorUnexpectedMessage": "Unexpected error: {error}"
});

/***/ }),

/***/ "./src/components/App.tsx":
/*!********************************!*\
  !*** ./src/components/App.tsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_activeTabMonitor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/activeTabMonitor */ "./src/util/activeTabMonitor.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_installPrompt__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/installPrompt */ "./src/util/installPrompt.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_sessions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/sessions */ "./src/util/sessions.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/windowSize */ "./src/util/windowSize.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _auth_Auth__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./auth/Auth */ "./src/components/auth/Auth.tsx");
/* harmony import */ var _common_UiLoader__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./common/UiLoader */ "./src/components/common/UiLoader.tsx");
/* harmony import */ var _main_AppInactive__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./main/AppInactive */ "./src/components/main/AppInactive.tsx");
/* harmony import */ var _main_LockScreen_async__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./main/LockScreen.async */ "./src/components/main/LockScreen.async.tsx");
/* harmony import */ var _main_Main_async__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./main/Main.async */ "./src/components/main/Main.async.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _App_module_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./App.module.scss */ "./src/components/App.module.scss");















// import Test from './test/TestLocale';







var AppScreens = /*#__PURE__*/function (AppScreens) {
  AppScreens[AppScreens["auth"] = 0] = "auth";
  AppScreens[AppScreens["main"] = 1] = "main";
  AppScreens[AppScreens["lock"] = 2] = "lock";
  AppScreens[AppScreens["inactive"] = 3] = "inactive";
  return AppScreens;
}(AppScreens || {});
const TRANSITION_RENDER_COUNT = Object.keys(AppScreens).length / 2;
const INACTIVE_PAGE_TITLE = `${_config__WEBPACK_IMPORTED_MODULE_2__.PAGE_TITLE} ${_config__WEBPACK_IMPORTED_MODULE_2__.INACTIVE_MARKER}`;
const App = ({
  authState,
  isScreenLocked,
  hasPasscode,
  isInactiveAuth,
  hasWebAuthTokenFailed,
  isTestServer,
  theme
}) => {
  const {
    disconnect
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isInactive, markInactive, unmarkInactive] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_12__["default"])(false);
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const isMobileOs = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.PLATFORM_ENV === 'iOS' || _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.PLATFORM_ENV === 'Android';
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_INSTALL_PROMPT_SUPPORTED) {
      (0,_util_installPrompt__WEBPACK_IMPORTED_MODULE_6__.setupBeforeInstallPrompt)();
    }
  }, []);

  // Prevent drop on elements that do not accept it
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const body = document.body;
    const handleDrag = e => {
      e.preventDefault();
      if (!e.dataTransfer) return;
      if (!e.target.dataset.dropzone) {
        e.dataTransfer.dropEffect = 'none';
      } else {
        e.dataTransfer.dropEffect = 'copy';
      }
    };
    const handleDrop = e => {
      e.preventDefault();
    };
    body.addEventListener('drop', handleDrop);
    body.addEventListener('dragover', handleDrag);
    body.addEventListener('dragenter', handleDrag);
    return () => {
      body.removeEventListener('drop', handleDrop);
      body.removeEventListener('dragover', handleDrag);
      body.removeEventListener('dragenter', handleDrag);
    };
  }, []);

  // return <Test />;

  let activeKey;
  let page;
  if (isInactive) {
    activeKey = AppScreens.inactive;
  } else if (isScreenLocked) {
    page = 'lock';
    activeKey = AppScreens.lock;
  } else if (authState) {
    switch (authState) {
      case 'authorizationStateWaitPhoneNumber':
        page = 'authPhoneNumber';
        activeKey = AppScreens.auth;
        break;
      case 'authorizationStateWaitCode':
        page = 'authCode';
        activeKey = AppScreens.auth;
        break;
      case 'authorizationStateWaitPassword':
        page = 'authPassword';
        activeKey = AppScreens.auth;
        break;
      case 'authorizationStateWaitRegistration':
        activeKey = AppScreens.auth;
        break;
      case 'authorizationStateWaitQrCode':
        page = 'authQrCode';
        activeKey = AppScreens.auth;
        break;
      case 'authorizationStateClosed':
      case 'authorizationStateClosing':
      case 'authorizationStateLoggingOut':
      case 'authorizationStateReady':
        page = 'main';
        activeKey = AppScreens.main;
        break;
    }
  } else if ((0,_util_sessions__WEBPACK_IMPORTED_MODULE_8__.hasStoredSession)()) {
    page = 'main';
    activeKey = AppScreens.main;
  } else if (hasPasscode) {
    activeKey = AppScreens.lock;
  } else {
    page = isMobileOs ? 'authPhoneNumber' : 'authQrCode';
    activeKey = AppScreens.auth;
  }
  if (activeKey !== AppScreens.lock && activeKey !== AppScreens.inactive && activeKey !== AppScreens.main && (0,_util_routing__WEBPACK_IMPORTED_MODULE_7__.parseInitialLocationHash)()?.tgWebAuthToken && !hasWebAuthTokenFailed) {
    page = 'main';
    activeKey = AppScreens.main;
  }
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    (0,_util_windowSize__WEBPACK_IMPORTED_MODULE_10__.updateSizes)();
  }, []);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_MULTITAB_SUPPORTED) return;
    (0,_util_activeTabMonitor__WEBPACK_IMPORTED_MODULE_4__.addActiveTabChangeListener)(() => {
      disconnect();
      document.title = INACTIVE_PAGE_TITLE;
      markInactive();
    });
  }, [activeKey, disconnect, markInactive]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isInactiveAuth) {
      document.title = INACTIVE_PAGE_TITLE;
      markInactive();
    } else {
      document.title = _config__WEBPACK_IMPORTED_MODULE_2__.PAGE_TITLE;
      unmarkInactive();
    }
  }, [isInactiveAuth, markInactive, unmarkInactive]);
  const prevActiveKey = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_13__["default"])(activeKey);

  // eslint-disable-next-line consistent-return
  function renderContent() {
    switch (activeKey) {
      case AppScreens.auth:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_auth_Auth__WEBPACK_IMPORTED_MODULE_14__["default"], null);
      case AppScreens.main:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_main_Main_async__WEBPACK_IMPORTED_MODULE_18__["default"], {
          isMobile: isMobile
        });
      case AppScreens.lock:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_main_LockScreen_async__WEBPACK_IMPORTED_MODULE_17__["default"], {
          isLocked: isScreenLocked
        });
      case AppScreens.inactive:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_main_AppInactive__WEBPACK_IMPORTED_MODULE_16__["default"], null);
    }
  }
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    document.body.classList.add(_App_module_scss__WEBPACK_IMPORTED_MODULE_20__["default"].bg);
  }, []);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    document.body.style.setProperty('--theme-background-color', theme === 'dark' ? _config__WEBPACK_IMPORTED_MODULE_2__.DARK_THEME_BG_COLOR : _config__WEBPACK_IMPORTED_MODULE_2__.LIGHT_THEME_BG_COLOR);
  }, [theme]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_UiLoader__WEBPACK_IMPORTED_MODULE_15__["default"], {
    page: page,
    isMobile: isMobile
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_19__["default"], {
    name: "fade",
    activeKey: activeKey,
    shouldCleanup: true,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('full-height', (activeKey === AppScreens.auth || prevActiveKey === AppScreens.auth) && 'is-auth'),
    renderCount: TRANSITION_RENDER_COUNT
  }, renderContent), activeKey === AppScreens.auth && isTestServer && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "test-server-badge"
  }, "Test server"));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  return {
    authState: global.authState,
    isScreenLocked: global.passcode?.isScreenLocked,
    hasPasscode: global.passcode?.hasPasscode,
    isInactiveAuth: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global).isInactive,
    hasWebAuthTokenFailed: global.hasWebAuthTokenFailed || global.hasWebAuthTokenPasswordRequired,
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTheme)(global),
    isTestServer: global.config?.isTestServer
  };
})(App));

/***/ }),

/***/ "./src/components/auth/Auth.tsx":
/*!**************************************!*\
  !*** ./src/components/auth/Auth.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _global_actions_initial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global/actions/initial */ "./src/global/actions/initial.ts");
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useElectronDrag */ "./src/hooks/useElectronDrag.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _AuthCode_async__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AuthCode.async */ "./src/components/auth/AuthCode.async.tsx");
/* harmony import */ var _AuthPassword_async__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./AuthPassword.async */ "./src/components/auth/AuthPassword.async.tsx");
/* harmony import */ var _AuthPhoneNumber__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./AuthPhoneNumber */ "./src/components/auth/AuthPhoneNumber.tsx");
/* harmony import */ var _AuthQrCode__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./AuthQrCode */ "./src/components/auth/AuthQrCode.tsx");
/* harmony import */ var _AuthRegister_async__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./AuthRegister.async */ "./src/components/auth/AuthRegister.async.tsx");
/* harmony import */ var _Auth_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Auth.scss */ "./src/components/auth/Auth.scss");














const Auth = ({
  authState
}) => {
  const {
    returnToAuthPhoneNumber,
    goToAuthQrCode
  } = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getActions)();
  const isMobile = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.PLATFORM_ENV === 'iOS' || _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.PLATFORM_ENV === 'Android';
  const handleChangeAuthorizationMethod = () => {
    if (!isMobile) {
      goToAuthQrCode();
    } else {
      returnToAuthPhoneNumber();
    }
  };
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_6__["default"])({
    isActive: !isMobile && authState === 'authorizationStateWaitPhoneNumber' || isMobile && authState === 'authorizationStateWaitQrCode',
    onBack: handleChangeAuthorizationMethod
  });

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  (0,_hooks_useElectronDrag__WEBPACK_IMPORTED_MODULE_5__["default"])(containerRef);

  // For animation purposes
  const renderingAuthState = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_4__["default"])(authState !== 'authorizationStateReady' ? authState : undefined, true);
  function getScreen() {
    switch (renderingAuthState) {
      case 'authorizationStateWaitCode':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AuthCode_async__WEBPACK_IMPORTED_MODULE_8__["default"], null);
      case 'authorizationStateWaitPassword':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AuthPassword_async__WEBPACK_IMPORTED_MODULE_9__["default"], null);
      case 'authorizationStateWaitRegistration':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AuthRegister_async__WEBPACK_IMPORTED_MODULE_12__["default"], null);
      case 'authorizationStateWaitPhoneNumber':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AuthPhoneNumber__WEBPACK_IMPORTED_MODULE_10__["default"], null);
      case 'authorizationStateWaitQrCode':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AuthQrCode__WEBPACK_IMPORTED_MODULE_11__["default"], null);
      default:
        return isMobile ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AuthPhoneNumber__WEBPACK_IMPORTED_MODULE_10__["default"], null) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_AuthQrCode__WEBPACK_IMPORTED_MODULE_11__["default"], null);
    }
  }
  function getActiveKey() {
    switch (renderingAuthState) {
      case 'authorizationStateWaitCode':
        return 0;
      case 'authorizationStateWaitPassword':
        return 1;
      case 'authorizationStateWaitRegistration':
        return 2;
      case 'authorizationStateWaitPhoneNumber':
        return 3;
      case 'authorizationStateWaitQrCode':
        return 4;
      default:
        return isMobile ? 3 : 4;
    }
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_7__["default"], {
    activeKey: getActiveKey(),
    name: "fade",
    className: "Auth",
    ref: containerRef
  }, getScreen());
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_2__.withGlobal)(global => {
  return {
    authState: global.authState
  };
})(Auth)));

/***/ }),

/***/ "./src/components/auth/AuthCode.async.tsx":
/*!************************************************!*\
  !*** ./src/components/auth/AuthCode.async.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const AuthCodeAsync = () => {
  const AuthCode = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Auth, 'AuthCode');
  return AuthCode ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AuthCode, null) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthCodeAsync);

/***/ }),

/***/ "./src/components/auth/AuthPassword.async.tsx":
/*!****************************************************!*\
  !*** ./src/components/auth/AuthPassword.async.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const AuthPasswordAsync = () => {
  const AuthPassword = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Auth, 'AuthPassword');
  return AuthPassword ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AuthPassword, null) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthPasswordAsync);

/***/ }),

/***/ "./src/components/auth/AuthPhoneNumber.tsx":
/*!*************************************************!*\
  !*** ./src/components/auth/AuthPhoneNumber.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/files */ "./src/util/files.ts");
/* harmony import */ var _util_fonts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/fonts */ "./src/util/fonts.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_phoneNumber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/phoneNumber */ "./src/util/phoneNumber.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_getSuggestedLanguage__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/getSuggestedLanguage */ "./src/components/auth/helpers/getSuggestedLanguage.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLangString__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useLangString */ "./src/hooks/useLangString.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Checkbox__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ui/Checkbox */ "./src/components/ui/Checkbox.tsx");
/* harmony import */ var _ui_InputText__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ui/InputText */ "./src/components/ui/InputText.tsx");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");
/* harmony import */ var _CountryCodeInput__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./CountryCodeInput */ "./src/components/auth/CountryCodeInput.tsx");
/* harmony import */ var _assets_monkey_svg__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../assets/monkey.svg */ "./src/assets/monkey.svg");



















const MIN_NUMBER_LENGTH = 7;
let isPreloadInitiated = false;
const AuthPhoneNumber = ({
  connectionState,
  authState,
  authPhoneNumber,
  authIsLoading,
  authIsLoadingQrCode,
  authErrorKey,
  authRememberMe,
  authNearestCountry,
  phoneCodeList,
  language
}) => {
  const {
    setAuthPhoneNumber,
    setAuthRememberMe,
    loadNearestCountry,
    loadCountryList,
    clearAuthErrorKey,
    goToAuthQrCode,
    setSettingOption
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_11__["default"])();
  // eslint-disable-next-line no-null/no-null
  const inputRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const suggestedLanguage = (0,_helpers_getSuggestedLanguage__WEBPACK_IMPORTED_MODULE_9__.getSuggestedLanguage)();
  const isConnected = connectionState === 'connectionStateReady';
  const continueText = (0,_hooks_useLangString__WEBPACK_IMPORTED_MODULE_12__["default"])('AuthContinueOnThisLanguage', suggestedLanguage);
  const [country, setCountry] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [phoneNumber, setPhoneNumber] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isTouched, setIsTouched] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [lastSelection, setLastSelection] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isLoading, markIsLoading, unmarkIsLoading] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const fullNumber = country ? `+${country.countryCode} ${phoneNumber || ''}` : phoneNumber;
  const canSubmit = fullNumber && fullNumber.replace(/[^\d]+/g, '').length >= MIN_NUMBER_LENGTH;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_TOUCH_ENV) {
      inputRef.current.focus();
    }
  }, [country]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isConnected && !authNearestCountry) {
      loadNearestCountry();
    }
  }, [isConnected, authNearestCountry]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isConnected) {
      loadCountryList({
        langCode: language
      });
    }
  }, [isConnected, language]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (authNearestCountry && phoneCodeList && !country && !isTouched) {
      setCountry((0,_util_phoneNumber__WEBPACK_IMPORTED_MODULE_7__.getCountryCodesByIso)(phoneCodeList, authNearestCountry)[0]);
    }
  }, [country, authNearestCountry, isTouched, phoneCodeList]);
  const parseFullNumber = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(newFullNumber => {
    if (!newFullNumber.length) {
      setPhoneNumber('');
    }
    const suggestedCountry = phoneCodeList && (0,_util_phoneNumber__WEBPACK_IMPORTED_MODULE_7__.getCountryFromPhoneNumber)(phoneCodeList, newFullNumber);

    // Any phone numbers should be allowed, in some cases ignoring formatting
    const selectedCountry = !country || suggestedCountry && suggestedCountry.iso2 !== country.iso2 || !suggestedCountry && newFullNumber.length ? suggestedCountry : country;
    if (!country || !selectedCountry || selectedCountry && selectedCountry.iso2 !== country.iso2) {
      setCountry(selectedCountry);
    }
    setPhoneNumber((0,_util_phoneNumber__WEBPACK_IMPORTED_MODULE_7__.formatPhoneNumber)(newFullNumber, selectedCountry));
  }, [phoneCodeList, country]);
  const handleLangChange = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    markIsLoading();
    void (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_6__.oldSetLanguage)(suggestedLanguage, () => {
      unmarkIsLoading();
      setSettingOption({
        language: suggestedLanguage
      });
    });
  }, [markIsLoading, setSettingOption, suggestedLanguage, unmarkIsLoading]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (phoneNumber === undefined && authPhoneNumber) {
      parseFullNumber(authPhoneNumber);
    }
  }, [authPhoneNumber, phoneNumber, parseFullNumber]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (inputRef.current && lastSelection) {
      inputRef.current.setSelectionRange(...lastSelection);
    }
  }, [lastSelection]);
  const isJustPastedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const handlePaste = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    isJustPastedRef.current = true;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(() => {
      isJustPastedRef.current = false;
    });
  }, []);
  const handleCountryChange = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(value => {
    setCountry(value);
    setPhoneNumber('');
  }, []);
  const handlePhoneNumberChange = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    if (authErrorKey) {
      clearAuthErrorKey();
    }

    // This is for further screens. We delay it until user input to speed up the initial loading.
    if (!isPreloadInitiated) {
      isPreloadInitiated = true;
      (0,_util_fonts__WEBPACK_IMPORTED_MODULE_4__["default"])();
      void (0,_util_files__WEBPACK_IMPORTED_MODULE_3__.preloadImage)(_assets_monkey_svg__WEBPACK_IMPORTED_MODULE_18__);
    }
    const {
      value,
      selectionStart,
      selectionEnd
    } = e.target;
    setLastSelection(selectionStart && selectionEnd && selectionEnd < value.length ? [selectionStart, selectionEnd] : undefined);
    setIsTouched(true);
    const shouldFixSafariAutoComplete = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_SAFARI && country && fullNumber !== undefined && value.length - fullNumber.length > 1 && !isJustPastedRef.current;
    parseFullNumber(shouldFixSafariAutoComplete ? `${country.countryCode} ${value}` : value);
  }, [authErrorKey, country, fullNumber, parseFullNumber]);
  const handleKeepSessionChange = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    setAuthRememberMe(e.target.checked);
  }, [setAuthRememberMe]);
  function handleSubmit(event) {
    event.preventDefault();
    if (authIsLoading) {
      return;
    }
    if (canSubmit) {
      setAuthPhoneNumber({
        phoneNumber: fullNumber
      });
    }
  }
  const handleGoToAuthQrCode = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    goToAuthQrCode();
  }, [goToAuthQrCode]);
  const isAuthReady = authState === 'authorizationStateWaitPhoneNumber';
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "auth-phone-number-form",
    className: "custom-scroll"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "auth-form"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "logo"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h1", null, lang('AuthTitle')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "note"
  }, lang('StartText')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("form", {
    className: "form",
    action: "",
    onSubmit: handleSubmit
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CountryCodeInput__WEBPACK_IMPORTED_MODULE_17__["default"], {
    id: "sign-in-phone-code",
    value: country,
    isLoading: !authNearestCountry && !country,
    onChange: handleCountryChange
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_InputText__WEBPACK_IMPORTED_MODULE_15__["default"], {
    ref: inputRef,
    id: "sign-in-phone-number",
    label: lang('LoginPhonePlaceholder'),
    value: fullNumber,
    error: authErrorKey && lang.withRegular(authErrorKey),
    inputMode: "tel",
    onChange: handlePhoneNumberChange,
    onPaste: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_SAFARI ? handlePaste : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Checkbox__WEBPACK_IMPORTED_MODULE_14__["default"], {
    id: "sign-in-keep-session",
    label: lang('AuthKeepSignedIn'),
    checked: Boolean(authRememberMe),
    onChange: handleKeepSessionChange
  }), canSubmit && (isAuthReady ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_13__["default"], {
    size: "smaller",
    type: "submit",
    ripple: true,
    isLoading: authIsLoading
  }, lang('LoginNext')) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_16__["default"], null)), isAuthReady && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_13__["default"], {
    size: "smaller",
    isText: true,
    ripple: true,
    isLoading: authIsLoadingQrCode,
    onClick: handleGoToAuthQrCode
  }, lang('LoginQRLogin')), suggestedLanguage && suggestedLanguage !== language && continueText && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_13__["default"], {
    size: "smaller",
    isText: true,
    isLoading: isLoading,
    onClick: handleLangChange
  }, continueText))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const {
    settings: {
      byKey: {
        language
      }
    },
    countryList: {
      phoneCodes: phoneCodeList
    }
  } = global;
  return {
    ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_5__.pick)(global, ['connectionState', 'authState', 'authPhoneNumber', 'authIsLoading', 'authIsLoadingQrCode', 'authErrorKey', 'authRememberMe', 'authNearestCountry']),
    language,
    phoneCodeList
  };
})(AuthPhoneNumber)));

/***/ }),

/***/ "./src/components/auth/AuthQrCode.tsx":
/*!********************************************!*\
  !*** ./src/components/auth/AuthQrCode.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_stricterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/fasterdom/stricterdom */ "./src/lib/fasterdom/stricterdom.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/helpers/animatedAssets */ "./src/components/common/helpers/animatedAssets.ts");
/* harmony import */ var _helpers_getSuggestedLanguage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/getSuggestedLanguage */ "./src/components/auth/helpers/getSuggestedLanguage.ts");
/* harmony import */ var _hooks_useAsync__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useAsync */ "./src/hooks/useAsync.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLangString__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useLangString */ "./src/hooks/useLangString.ts");
/* harmony import */ var _hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useMediaTransitionDeprecated */ "./src/hooks/useMediaTransitionDeprecated.ts");
/* harmony import */ var _common_AnimatedIcon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/AnimatedIcon */ "./src/components/common/AnimatedIcon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");
/* harmony import */ var _assets_blank_png__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../assets/blank.png */ "./src/assets/blank.png");

















const DATA_PREFIX = 'tg://login?token=';
const QR_SIZE = 280;
const QR_PLANE_SIZE = 54;
const QR_CODE_MUTATION_DURATION = 50; // The library is asynchronous and we need to wait for its mutation code

let qrCodeStylingPromise;
function ensureQrCodeStyling() {
  if (!qrCodeStylingPromise) {
    qrCodeStylingPromise = __webpack_require__.e(/*! import() */ "vendors-node_modules_qr-code-styling_lib_qr-code-styling_js").then(__webpack_require__.t.bind(__webpack_require__, /*! qr-code-styling */ "./node_modules/qr-code-styling/lib/qr-code-styling.js", 23));
  }
  return qrCodeStylingPromise;
}
const AuthCode = ({
  connectionState,
  authState,
  authQrCode,
  language
}) => {
  const {
    returnToAuthPhoneNumber,
    setSettingOption
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const suggestedLanguage = (0,_helpers_getSuggestedLanguage__WEBPACK_IMPORTED_MODULE_7__.getSuggestedLanguage)();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_10__["default"])();
  // eslint-disable-next-line no-null/no-null
  const qrCodeRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isConnected = connectionState === 'connectionStateReady';
  const continueText = (0,_hooks_useLangString__WEBPACK_IMPORTED_MODULE_11__["default"])('AuthContinueOnThisLanguage', suggestedLanguage);
  const [isLoading, markIsLoading, unmarkIsLoading] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [isQrMounted, markQrMounted, unmarkQrMounted] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const {
    result: qrCode
  } = (0,_hooks_useAsync__WEBPACK_IMPORTED_MODULE_8__["default"])(async () => {
    const QrCodeStyling = (await ensureQrCodeStyling()).default;
    return new QrCodeStyling({
      width: QR_SIZE,
      height: QR_SIZE,
      image: _assets_blank_png__WEBPACK_IMPORTED_MODULE_16__,
      margin: 10,
      type: 'svg',
      dotsOptions: {
        type: 'rounded'
      },
      cornersSquareOptions: {
        type: 'extra-rounded'
      },
      imageOptions: {
        imageSize: 0.4,
        margin: 8
      },
      qrOptions: {
        errorCorrectionLevel: 'M'
      }
    });
  }, []);
  const transitionClassNames = (0,_hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_12__["default"])(isQrMounted);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!authQrCode || !qrCode) {
      return () => {
        unmarkQrMounted();
      };
    }
    if (!isConnected) {
      return undefined;
    }
    const container = qrCodeRef.current;
    const data = `${DATA_PREFIX}${authQrCode.token}`;
    if (_config__WEBPACK_IMPORTED_MODULE_2__.STRICTERDOM_ENABLED) {
      (0,_lib_fasterdom_stricterdom__WEBPACK_IMPORTED_MODULE_3__.disableStrict)();
    }
    qrCode.update({
      data
    });
    if (!isQrMounted) {
      qrCode.append(container);
      markQrMounted();
    }
    if (_config__WEBPACK_IMPORTED_MODULE_2__.STRICTERDOM_ENABLED) {
      setTimeout(() => {
        (0,_lib_fasterdom_stricterdom__WEBPACK_IMPORTED_MODULE_3__.enableStrict)();
      }, QR_CODE_MUTATION_DURATION);
    }
    return undefined;
  }, [isConnected, authQrCode, isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);
  const handleLangChange = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    markIsLoading();
    void (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.oldSetLanguage)(suggestedLanguage, () => {
      unmarkIsLoading();
      setSettingOption({
        language: suggestedLanguage
      });
    });
  }, [markIsLoading, setSettingOption, suggestedLanguage, unmarkIsLoading]);
  const habdleReturnToAuthPhoneNumber = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    returnToAuthPhoneNumber();
  }, [returnToAuthPhoneNumber]);
  const isAuthReady = authState === 'authorizationStateWaitQrCode';
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "auth-qr-form",
    className: "custom-scroll"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "auth-form qr"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "qr-outer"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('qr-inner', transitionClassNames),
    key: "qr-inner"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    key: "qr-container",
    className: "qr-container",
    ref: qrCodeRef,
    style: `width: ${QR_SIZE}px; height: ${QR_SIZE}px`
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIcon__WEBPACK_IMPORTED_MODULE_13__["default"], {
    tgsUrl: _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_6__.LOCAL_TGS_URLS.QrPlane,
    size: QR_PLANE_SIZE,
    className: "qr-plane",
    nonInteractive: true,
    noLoop: false
  })), !isQrMounted && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "qr-loading"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_15__["default"], null))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h1", null, lang('LoginQRTitle')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("ol", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('LoginQRHelp1'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('LoginQRHelp2', undefined, {
    withNodes: true,
    withMarkdown: true
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("li", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('LoginQRHelp3')))), isAuthReady && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_14__["default"], {
    size: "smaller",
    isText: true,
    onClick: habdleReturnToAuthPhoneNumber
  }, lang('LoginQRCancel')), suggestedLanguage && suggestedLanguage !== language && continueText && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_14__["default"], {
    size: "smaller",
    isText: true,
    isLoading: isLoading,
    onClick: handleLangChange
  }, continueText)));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const {
    connectionState,
    authState,
    authQrCode,
    settings: {
      byKey: {
        language
      }
    }
  } = global;
  return {
    connectionState,
    authState,
    authQrCode,
    language
  };
})(AuthCode)));

/***/ }),

/***/ "./src/components/auth/AuthRegister.async.tsx":
/*!****************************************************!*\
  !*** ./src/components/auth/AuthRegister.async.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Loading */ "./src/components/ui/Loading.tsx");




const AuthRegisterAsync = () => {
  const AuthRegister = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Auth, 'AuthRegister');
  return AuthRegister ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AuthRegister, null) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_3__["default"], null);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthRegisterAsync);

/***/ }),

/***/ "./src/components/auth/CountryCodeInput.tsx":
/*!**************************************************!*\
  !*** ./src/components/auth/CountryCodeInput.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_emoji_emoji__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/emoji/emoji */ "./src/util/emoji/emoji.ts");
/* harmony import */ var _util_searchWords__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/searchWords */ "./src/util/searchWords.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ui/DropdownMenu */ "./src/components/ui/DropdownMenu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _CountryCodeInput_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./CountryCodeInput.scss */ "./src/components/auth/CountryCodeInput.scss");













const MENU_HIDING_DURATION = 200 + _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_END_DELAY;
const SELECT_TIMEOUT = 50;
const CountryCodeInput = ({
  id,
  value,
  isLoading,
  onChange,
  phoneCodeList
}) => {
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_7__["default"])();
  // eslint-disable-next-line no-null/no-null
  const inputRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [filter, setFilter] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [filteredList, setFilteredList] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const updateFilter = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(filterValue => {
    setFilter(filterValue);
    setFilteredList(getFilteredList(phoneCodeList, filterValue));
  }, [phoneCodeList]);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_8__["default"])(([prevPhoneCodeList]) => {
    if (!prevPhoneCodeList?.length && phoneCodeList.length) {
      setFilteredList(getFilteredList(phoneCodeList, filter));
    }
  }, [phoneCodeList, filter]);
  const handleChange = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(country => {
    onChange(country);
    setTimeout(() => updateFilter(undefined), MENU_HIDING_DURATION);
  }, [onChange, updateFilter]);
  const handleInput = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    updateFilter(e.currentTarget.value);
  }, [updateFilter]);
  const handleInputKeyDown = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    if (e.keyCode !== 8) {
      return;
    }
    const target = e.currentTarget;
    if (value && filter === undefined) {
      target.value = '';
    }
    updateFilter(target.value);
  }, [filter, updateFilter, value]);
  const CodeInput = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({
    onTrigger,
    isOpen
  }) => {
    const handleTrigger = () => {
      if (isOpen) {
        return;
      }
      setTimeout(() => {
        inputRef.current.select();
      }, SELECT_TIMEOUT);
      onTrigger();
      const formEl = document.getElementById('auth-phone-number-form');
      formEl.scrollTo({
        top: formEl.scrollHeight,
        behavior: 'smooth'
      });
    };
    const handleCodeInput = e => {
      handleInput(e);
      handleTrigger();
    };
    const inputValue = filter ?? (value?.name || value?.defaultName || '');
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('input-group', value && 'touched')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("input", {
      ref: inputRef,
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('form-control', isOpen && 'focus'),
      type: "text",
      id: id,
      value: inputValue,
      autoComplete: "off",
      onClick: handleTrigger,
      onFocus: handleTrigger,
      onInput: handleCodeInput,
      onKeyDown: handleInputKeyDown
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("label", null, lang('LoginSelectCountryTitle')), isLoading ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_11__["default"], {
      color: "black"
    }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("i", {
      onClick: handleTrigger,
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('css-icon-down', isOpen && 'open')
    }));
  }, [filter, handleInput, handleInputKeyDown, id, isLoading, lang, value]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_9__["default"], {
    className: "CountryCodeInput",
    trigger: CodeInput
  }, filteredList.map(country => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_10__["default"], {
    key: `${country.iso2}-${country.countryCode}`,
    className: value && country.iso2 === value.iso2 ? 'selected' : ''
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => handleChange(country)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "country-flag"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])((0,_util_emoji_emoji__WEBPACK_IMPORTED_MODULE_4__.isoToEmoji)(country.iso2), ['hq_emoji'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "country-name"
  }, country.name || country.defaultName), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "country-code"
  }, "+", country.countryCode))), !filteredList.length && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_10__["default"], {
    key: "no-results",
    className: "no-results",
    disabled: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('CountryNone'))));
};
function getFilteredList(countryList, filter = '') {
  if (!filter.length) {
    return countryList;
  }
  const searchWords = (0,_util_searchWords__WEBPACK_IMPORTED_MODULE_5__.prepareSearchWordsForNeedle)(filter);
  return countryList.filter(country => searchWords(country.defaultName) || country.name && searchWords(country.name));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const {
    countryList: {
      phoneCodes: phoneCodeList
    }
  } = global;
  return {
    phoneCodeList
  };
})(CountryCodeInput)));

/***/ }),

/***/ "./src/components/auth/helpers/getSuggestedLanguage.ts":
/*!*************************************************************!*\
  !*** ./src/components/auth/helpers/getSuggestedLanguage.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSuggestedLanguage: () => (/* binding */ getSuggestedLanguage)
/* harmony export */ });
function getSuggestedLanguage() {
  let suggestedLanguage = navigator.language.toLowerCase();
  if (suggestedLanguage && suggestedLanguage !== 'pt-br') {
    suggestedLanguage = suggestedLanguage.substr(0, 2);
  }
  return suggestedLanguage;
}

/***/ }),

/***/ "./src/components/common/AnimatedIcon.tsx":
/*!************************************************!*\
  !*** ./src/components/common/AnimatedIcon.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useMediaTransitionDeprecated */ "./src/hooks/useMediaTransitionDeprecated.ts");
/* harmony import */ var _AnimatedSticker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./AnimatedSticker */ "./src/components/common/AnimatedSticker.tsx");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }






const DEFAULT_SIZE = 150;
function AnimatedIcon(props) {
  const {
    size = DEFAULT_SIZE,
    play = true,
    noLoop = true,
    className,
    noTransition,
    nonInteractive,
    onLoad,
    onClick,
    ...otherProps
  } = props;
  const [isAnimationLoaded, markAnimationLoaded] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_2__["default"])(false);
  const transitionClassNames = (0,_hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_4__["default"])(noTransition || isAnimationLoaded);
  const handleLoad = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    markAnimationLoaded();
    onLoad?.();
  });
  const [playKey, setPlayKey] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(String(Math.random()));
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    if (play === true) {
      setPlayKey(String(Math.random()));
    }
    onClick?.();
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AnimatedSticker__WEBPACK_IMPORTED_MODULE_5__["default"], _extends({
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(className, transitionClassNames),
    size: size,
    play: play === true ? playKey : play,
    noLoop: noLoop,
    onClick: !nonInteractive ? handleClick : undefined,
    onLoad: handleLoad
    /* eslint-disable-next-line react/jsx-props-no-spreading */
  }, otherProps));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(AnimatedIcon));

/***/ }),

/***/ "./src/components/common/AnimatedSticker.tsx":
/*!***************************************************!*\
  !*** ./src/components/common/AnimatedSticker.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _lib_rlottie_RLottie_async__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/rlottie/RLottie.async */ "./src/lib/rlottie/RLottie.async.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_generateUniqueId__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/generateUniqueId */ "./src/util/generateUniqueId.ts");
/* harmony import */ var _util_switchTheme__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/switchTheme */ "./src/util/switchTheme.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_stickers_useColorFilter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/stickers/useColorFilter */ "./src/hooks/stickers/useColorFilter.tsx");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useHeavyAnimation */ "./src/hooks/useHeavyAnimation.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_usePriorityPlaybackCheck__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/usePriorityPlaybackCheck */ "./src/hooks/usePriorityPlaybackCheck.ts");
/* harmony import */ var _hooks_useSharedIntersectionObserver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/useSharedIntersectionObserver */ "./src/hooks/useSharedIntersectionObserver.ts");
/* harmony import */ var _hooks_useStateRef__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hooks/useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../hooks/useThrottledCallback */ "./src/hooks/useThrottledCallback.ts");
/* harmony import */ var _hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../hooks/useUniqueId */ "./src/hooks/useUniqueId.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");




















const THROTTLE_MS = 150;
const AnimatedSticker = ({
  ref,
  renderId,
  className,
  style,
  tgsUrl,
  play,
  playSegment,
  speed,
  noLoop,
  size,
  quality,
  isLowPriority,
  color,
  forceAlways,
  forceOnHeavyAnimation,
  sharedCanvas,
  sharedCanvasCoords,
  onClick,
  onLoad,
  onEnded,
  onLoop
}) => {
  // eslint-disable-next-line no-null/no-null
  let containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  if (ref) {
    containerRef = ref;
  }
  const viewId = (0,_hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_18__["default"])();
  const [animation, setAnimation] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const animationRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const isFirstRender = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  const shouldUseColorFilter = !sharedCanvas && color;
  const colorFilter = (0,_hooks_stickers_useColorFilter__WEBPACK_IMPORTED_MODULE_8__["default"])(shouldUseColorFilter ? color : undefined);
  const playKey = play || (play === false ? false : playSegment);
  const playRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_15__.useStateRef)(play);
  const playSegmentRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_15__.useStateRef)(playSegment);
  const rgbColor = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const shouldForceOnHeavyAnimation = forceAlways || forceOnHeavyAnimation;
  // Delay initialization until heavy animation ends
  const [canInitialize, markCanInitialize, unmarkCanInitialize] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__["default"])(!(0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)() || shouldForceOnHeavyAnimation);
  (0,_hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_11__["default"])(unmarkCanInitialize, markCanInitialize, shouldForceOnHeavyAnimation);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (shouldForceOnHeavyAnimation) markCanInitialize();
  }, [shouldForceOnHeavyAnimation]);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    if (color && !shouldUseColorFilter) {
      const {
        r,
        g,
        b
      } = (0,_util_switchTheme__WEBPACK_IMPORTED_MODULE_6__.hexToRgb)(color);
      rgbColor.current = [r, g, b];
    } else {
      rgbColor.current = undefined;
    }
  }, [color, shouldUseColorFilter]);
  const isUnmountedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useUnmountCleanup)(() => {
    isUnmountedRef.current = true;
  });
  const init = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    if (animationRef.current || isUnmountedRef.current || !tgsUrl || sharedCanvas && (!sharedCanvasCoords || !sharedCanvas.offsetWidth || !sharedCanvas.offsetHeight) || (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)() && !shouldForceOnHeavyAnimation) {
      return;
    }
    const container = containerRef.current || sharedCanvas;
    if (!container) {
      return;
    }
    const newAnimation = (0,_lib_rlottie_RLottie_async__WEBPACK_IMPORTED_MODULE_2__.getRLottie)().init(tgsUrl, container, renderId || (0,_util_generateUniqueId__WEBPACK_IMPORTED_MODULE_5__["default"])(), {
      size,
      noLoop,
      quality,
      isLowPriority,
      coords: sharedCanvasCoords
    }, viewId, rgbColor.current, onLoad, onEnded, onLoop);
    if (speed) {
      newAnimation.setSpeed(speed);
    }
    setAnimation(newAnimation);
    animationRef.current = newAnimation;
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!canInitialize) return;
    if ((0,_lib_rlottie_RLottie_async__WEBPACK_IMPORTED_MODULE_2__.getRLottie)()) {
      init();
    } else {
      (0,_lib_rlottie_RLottie_async__WEBPACK_IMPORTED_MODULE_2__.ensureRLottie)().then(init);
    }
  }, [init, tgsUrl, sharedCanvas, sharedCanvasCoords, canInitialize]);
  const throttledInit = (0,_hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(init, [init], THROTTLE_MS);
  (0,_hooks_useSharedIntersectionObserver__WEBPACK_IMPORTED_MODULE_14__["default"])(sharedCanvas, throttledInit);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!animation) return;
    animation.setColor(rgbColor.current);
  }, [color, animation]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useUnmountCleanup)(() => {
    animationRef.current?.removeView(viewId);
  });
  const playAnimation = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])((shouldRestart = false) => {
    if (!animation || !(playRef.current || playSegmentRef.current) || isFrozen(forceAlways)) {
      return;
    }
    if (playSegmentRef.current) {
      animation.playSegment(playSegmentRef.current, shouldRestart, viewId);
    } else {
      animation.play(shouldRestart, viewId);
    }
  });
  const playAnimationOnRaf = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMeasure)(playAnimation);
  });
  const pauseAnimation = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    if (animation?.isPlaying()) {
      animation.pause(viewId);
    }
  });
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_9__["default"])(([prevNoLoop]) => {
    if (prevNoLoop !== undefined && noLoop !== prevNoLoop) {
      animation?.setNoLoop(noLoop);
    }
  }, [noLoop, animation]);
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_9__["default"])(([prevSharedCanvasCoords]) => {
    if (prevSharedCanvasCoords !== undefined && sharedCanvasCoords !== prevSharedCanvasCoords) {
      animation?.setSharedCanvasCoords(viewId, sharedCanvasCoords);
    }
  }, [sharedCanvasCoords, viewId, animation]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!animation) {
      return;
    }
    if (playKey) {
      if (!isFrozen(forceAlways, forceOnHeavyAnimation)) {
        playAnimation(noLoop);
      }
    } else {
      pauseAnimation();
    }
  }, [animation, playKey, noLoop, playAnimation, pauseAnimation, forceAlways, forceOnHeavyAnimation]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (animation) {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else if (tgsUrl) {
        animation.changeData(tgsUrl);
        playAnimation();
      }
    }
  }, [playAnimation, animation, tgsUrl]);
  (0,_hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_11__["default"])(pauseAnimation, playAnimation, !playKey || shouldForceOnHeavyAnimation);
  (0,_hooks_usePriorityPlaybackCheck__WEBPACK_IMPORTED_MODULE_13__["default"])(pauseAnimation, playAnimation, !playKey || forceAlways);
  // Pausing frame may not happen in background,
  // so we need to make sure it happens right after focusing,
  // then we can play again.
  (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_19__["default"])(pauseAnimation, playAnimationOnRaf, !playKey || forceAlways);
  if (sharedCanvas) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('AnimatedSticker', className),
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_4__["default"])(size !== undefined && `width: ${size}px; height: ${size}px;`, onClick && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_ELECTRON && 'cursor: pointer', colorFilter, style),
    onClick: onClick
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(AnimatedSticker));
function isFrozen(forceAlways = false, forceOnHeavyAnimation = false) {
  if (forceAlways) return false;
  return !forceOnHeavyAnimation && (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)() || (0,_hooks_usePriorityPlaybackCheck__WEBPACK_IMPORTED_MODULE_13__.isPriorityPlaybackActive)() || (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_19__.isBackgroundModeActive)();
}

/***/ }),

/***/ "./src/components/common/Blockquote.tsx":
/*!**********************************************!*\
  !*** ./src/components/common/Blockquote.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_element_useCollapsibleLines__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/element/useCollapsibleLines */ "./src/hooks/element/useCollapsibleLines.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _Blockquote_module_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Blockquote.module.scss */ "./src/components/common/Blockquote.module.scss");







const MAX_LINES = 4;
const Blockquote = ({
  canBeCollapsible,
  isToggleDisabled,
  children
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    isCollapsed,
    isCollapsible,
    setIsCollapsed
  } = (0,_hooks_element_useCollapsibleLines__WEBPACK_IMPORTED_MODULE_3__["default"])(ref, MAX_LINES, undefined, !canBeCollapsible);
  const canExpand = !isToggleDisabled && isCollapsed;
  const handleExpand = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    setIsCollapsed(false);
  });
  const handleToggle = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    setIsCollapsed(prev => !prev);
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_Blockquote_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].root, isCollapsed && _Blockquote_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].collapsed),
    onClick: canExpand ? handleExpand : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("blockquote", {
    className: _Blockquote_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].blockquote,
    ref: ref,
    "data-entity-type": _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.Blockquote
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _Blockquote_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].gradientContainer
  }, children), isCollapsible && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_Blockquote_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].collapseIcon, !isToggleDisabled && _Blockquote_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].clickable),
    onClick: !isToggleDisabled ? handleToggle : undefined,
    "aria-hidden": true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_5__["default"], {
    name: isCollapsed ? 'down' : 'up'
  }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Blockquote);

/***/ }),

/***/ "./src/components/common/ChatLink.tsx":
/*!********************************************!*\
  !*** ./src/components/common/ChatLink.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");




const ChatLink = ({
  className,
  chatId,
  children
}) => {
  const {
    openChat
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const handleClick = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (chatId) {
      openChat({
        id: chatId
      });
    }
  }, [chatId, openChat]);
  if (!chatId) {
    return children;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_3__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('ChatLink', className),
    onClick: handleClick
  }, children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ChatLink));

/***/ }),

/***/ "./src/components/common/CustomEmoji.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/CustomEmoji.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_safePlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/safePlay */ "./src/util/safePlay.ts");
/* harmony import */ var _hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/stickers/useDynamicColorListener */ "./src/hooks/stickers/useDynamicColorListener.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useCustomEmoji__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hooks/useCustomEmoji */ "./src/components/common/hooks/useCustomEmoji.ts");
/* harmony import */ var _StickerView__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./StickerView */ "./src/components/common/StickerView.tsx");
/* harmony import */ var _CustomEmoji_module_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./CustomEmoji.module.scss */ "./src/components/common/CustomEmoji.module.scss");
/* harmony import */ var _assets_blank_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../assets/blank.png */ "./src/assets/blank.png");












const STICKER_SIZE = 20;
const CustomEmoji = ({
  ref,
  documentId,
  className,
  style,
  size = STICKER_SIZE,
  isBig,
  noPlay,
  noVideoOnMobile,
  loopLimit,
  isSelectable,
  withSharedAnimation,
  sharedCanvasRef,
  sharedCanvasHqRef,
  withTranslucentThumb,
  shouldPreloadPreview,
  forceAlways,
  forceOnHeavyAnimation,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  onClick,
  onAnimationEnd
}) => {
  // eslint-disable-next-line no-null/no-null
  let containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  if (ref) {
    containerRef = ref;
  }

  // An alternative to `withGlobal` to avoid adding numerous global containers
  const {
    customEmoji,
    canPlay
  } = (0,_hooks_useCustomEmoji__WEBPACK_IMPORTED_MODULE_8__["default"])(documentId);
  const loopCountRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  const [shouldPlay, setShouldPlay] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const hasCustomColor = customEmoji?.shouldUseTextColor;
  const customColor = (0,_hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_6__["default"])(containerRef, !hasCustomColor);
  const handleVideoEnded = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(e => {
    if (!loopLimit) return;
    loopCountRef.current += 1;
    if (loopCountRef.current >= loopLimit) {
      setShouldPlay(false);
      e.currentTarget.currentTime = 0;
    } else {
      // Loop manually
      (0,_util_safePlay__WEBPACK_IMPORTED_MODULE_5__["default"])(e.currentTarget);
    }
  });
  const handleStickerLoop = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    if (!loopLimit) return;
    loopCountRef.current += 1;
    if (loopCountRef.current >= loopLimit) {
      setShouldPlay(false);
    }
  });
  const isHq = customEmoji?.stickerSetInfo && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsAlwaysHighPriorityEmoji)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), customEmoji.stickerSetInfo);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_CustomEmoji_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].root, className, 'custom-emoji', 'emoji'),
    onClick: onClick,
    onAnimationEnd: onAnimationEnd,
    "data-entity-type": _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.CustomEmoji,
    "data-document-id": documentId,
    "data-alt": customEmoji?.emoji,
    style: style
  }, isSelectable && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    className: _CustomEmoji_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].highlightCatch,
    src: _assets_blank_png__WEBPACK_IMPORTED_MODULE_11__,
    alt: customEmoji?.emoji,
    "data-entity-type": _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.CustomEmoji,
    "data-document-id": documentId,
    draggable: false
  }), !customEmoji ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_CustomEmoji_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].placeholder),
    draggable: false
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StickerView__WEBPACK_IMPORTED_MODULE_9__["default"], {
    containerRef: containerRef,
    sticker: customEmoji,
    isSmall: !isBig,
    size: size,
    noPlay: noPlay || !(shouldPlay && canPlay),
    noVideoOnMobile: noVideoOnMobile,
    thumbClassName: _CustomEmoji_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].thumb,
    fullMediaClassName: _CustomEmoji_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].media,
    shouldLoop: true,
    loopLimit: loopLimit,
    shouldPreloadPreview: shouldPreloadPreview || noPlay || !canPlay,
    forceOnHeavyAnimation: forceOnHeavyAnimation,
    forceAlways: forceAlways,
    observeIntersectionForLoading: observeIntersectionForLoading,
    observeIntersectionForPlaying: observeIntersectionForPlaying,
    withSharedAnimation: withSharedAnimation,
    sharedCanvasRef: isHq ? sharedCanvasHqRef : sharedCanvasRef,
    withTranslucentThumb: withTranslucentThumb,
    onVideoEnded: handleVideoEnded,
    onAnimatedStickerLoop: handleStickerLoop,
    customColor: customColor
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(CustomEmoji));

/***/ }),

/***/ "./src/components/common/GroupCallLink.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/GroupCallLink.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");




const GroupCallLink = ({
  className,
  groupCall,
  children
}) => {
  const {
    requestMasterAndJoinGroupCall
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const handleClick = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (groupCall) {
      requestMasterAndJoinGroupCall({
        id: groupCall.id,
        accessHash: groupCall.accessHash
      });
    }
  }, [groupCall, requestMasterAndJoinGroupCall]);
  if (!groupCall) {
    return children;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_3__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('GroupCallLink', className),
    onClick: handleClick
  }, children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GroupCallLink);

/***/ }),

/***/ "./src/components/common/MessageLink.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/MessageLink.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");




const MessageLink = ({
  className,
  message,
  children
}) => {
  const {
    focusMessage
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const handleMessageClick = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (message) {
      focusMessage({
        chatId: message.chatId,
        messageId: message.id
      });
    }
  }, [focusMessage, message]);
  if (!message) {
    return children;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_3__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('MessageLink', className),
    onClick: handleMessageClick
  }, children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MessageLink);

/***/ }),

/***/ "./src/components/common/MessageSummary.tsx":
/*!**************************************************!*\
  !*** ./src/components/common/MessageSummary.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/helpers/messageSummary */ "./src/global/helpers/messageSummary.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_trimText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/trimText */ "./src/util/trimText.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _MessageText__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MessageText */ "./src/components/common/MessageText.tsx");










function MessageSummary({
  message,
  translatedText,
  noEmoji = false,
  highlight,
  truncateLength = _global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_4__.TRUNCATED_SUMMARY_LENGTH,
  withTranslucentThumbs = false,
  inChatList = false,
  emojiSize,
  poll,
  story,
  observeIntersectionForLoading,
  observeIntersectionForPlaying
}) {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const {
    text,
    entities
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.extractMessageText)(message, inChatList) || {};
  const hasSpoilers = entities?.some(e => e.type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Spoiler);
  const hasCustomEmoji = entities?.some(e => e.type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.CustomEmoji);
  const hasPoll = Boolean((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessagePollId)(message));
  const statefulContent = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.groupStatetefulContent)({
    poll,
    story
  });
  if ((!text || !hasSpoilers && !hasCustomEmoji) && !hasPoll) {
    const summaryText = translatedText?.text || (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_4__.getMessageSummaryText)(lang, message, statefulContent, noEmoji, truncateLength);
    const trimmedText = (0,_util_trimText__WEBPACK_IMPORTED_MODULE_6__["default"])(summaryText, truncateLength);
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, highlight ? (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(trimmedText, ['emoji', 'highlight'], {
      highlight
    }) : (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(trimmedText));
  }
  function renderMessageText() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageText__WEBPACK_IMPORTED_MODULE_9__["default"], {
      messageOrStory: message,
      translatedText: translatedText,
      highlight: highlight,
      isSimple: true,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      withTranslucentThumbs: withTranslucentThumbs,
      truncateLength: truncateLength,
      inChatList: inChatList,
      emojiSize: emojiSize
    });
  }
  const emoji = !noEmoji && (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_4__.getMessageSummaryEmoji)(message);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, [emoji ? (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(`${emoji} `) : undefined, (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_4__.getMessageSummaryDescription)(lang, message, statefulContent, renderMessageText())].flat().filter(Boolean));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  message
}) => {
  const poll = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectPollFromMessage)(global, message);
  const storyData = message.content.storyData;
  const story = storyData && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectPeerStory)(global, storyData.peerId, storyData.id);
  return {
    poll,
    story
  };
})(MessageSummary)));

/***/ }),

/***/ "./src/components/common/MessageText.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/MessageText.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_trimText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/trimText */ "./src/util/trimText.ts");
/* harmony import */ var _helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useUniqueId */ "./src/hooks/useUniqueId.ts");








const MIN_CUSTOM_EMOJIS_FOR_SHARED_CANVAS = 3;
function MessageText({
  messageOrStory,
  translatedText,
  isForAnimation,
  emojiSize,
  highlight,
  isSimple,
  truncateLength,
  isProtected,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  withTranslucentThumbs,
  shouldRenderAsHtml,
  inChatList,
  forcePlayback,
  focusedQuote,
  isInSelectMode,
  canBeEmpty
}) {
  // eslint-disable-next-line no-null/no-null
  const sharedCanvasRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const sharedCanvasHqRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const textCacheBusterRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  const formattedText = translatedText || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.extractMessageText)(messageOrStory, inChatList);
  const adaptedFormattedText = isForAnimation && formattedText ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.stripCustomEmoji)(formattedText) : formattedText;
  const {
    text,
    entities
  } = adaptedFormattedText || {};
  const containerId = (0,_hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_7__["default"])();
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    textCacheBusterRef.current += 1;
  }, [text, entities]);
  const withSharedCanvas = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const hasSpoilers = entities?.some(e => e.type === _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.Spoiler);
    if (hasSpoilers) {
      return false;
    }
    const customEmojisCount = entities?.filter(e => e.type === _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.CustomEmoji).length || 0;
    return customEmojisCount >= MIN_CUSTOM_EMOJIS_FOR_SHARED_CANVAS;
  }, [entities]) || 0;
  if (!text && !canBeEmpty) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "content-unsupported"
    }, _config__WEBPACK_IMPORTED_MODULE_2__.CONTENT_NOT_SUPPORTED);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, [withSharedCanvas && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: sharedCanvasRef,
    className: "shared-canvas"
  }), withSharedCanvas && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: sharedCanvasHqRef,
    className: "shared-canvas"
  }), (0,_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_5__.renderTextWithEntities)({
    text: (0,_util_trimText__WEBPACK_IMPORTED_MODULE_4__["default"])(text, truncateLength),
    entities,
    highlight,
    emojiSize,
    shouldRenderAsHtml,
    containerId,
    isSimple,
    isProtected,
    observeIntersectionForLoading,
    observeIntersectionForPlaying,
    withTranslucentThumbs,
    sharedCanvasRef,
    sharedCanvasHqRef,
    cacheBuster: textCacheBusterRef.current.toString(),
    forcePlayback,
    focusedQuote,
    isInSelectMode
  })].flat().filter(Boolean));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageText));

/***/ }),

/***/ "./src/components/common/SafeLink.tsx":
/*!********************************************!*\
  !*** ./src/components/common/SafeLink.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _lib_punycode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/punycode */ "./src/lib/punycode.js");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_ensureProtocol__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/ensureProtocol */ "./src/util/ensureProtocol.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");








const SafeLink = ({
  url,
  text,
  className,
  children,
  isRtl
}) => {
  const {
    openUrl
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const content = children || text;
  const isRegularLink = url === text;
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(e => {
    if (!url) return true;
    e.preventDefault();
    openUrl({
      url,
      shouldSkipModal: isRegularLink
    });
    return false;
  });
  if (!url) {
    return undefined;
  }
  const classNames = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(className || 'text-entity-link', isRegularLink && 'word-break-all');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
    href: (0,_util_ensureProtocol__WEBPACK_IMPORTED_MODULE_6__.ensureProtocol)(url),
    title: getUnicodeUrl(url),
    target: "_blank",
    rel: "noopener noreferrer",
    className: classNames,
    onClick: handleClick,
    dir: isRtl ? 'rtl' : 'auto',
    "data-entity-type": _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Url
  }, content);
};
function getUnicodeUrl(url) {
  if (!url) {
    return undefined;
  }
  const href = (0,_util_ensureProtocol__WEBPACK_IMPORTED_MODULE_6__.ensureProtocol)(url);
  if (!href) {
    return undefined;
  }
  try {
    const parsedUrl = new URL(href);
    const unicodeDomain = (0,_lib_punycode__WEBPACK_IMPORTED_MODULE_4__["default"])(parsedUrl.hostname);
    try {
      return decodeURI(parsedUrl.toString()).replace(parsedUrl.hostname, unicodeDomain);
    } catch (err) {
      // URL contains invalid sequences, keep it as it is
      return parsedUrl.toString().replace(parsedUrl.hostname, unicodeDomain);
    }
  } catch (error) {
    if (_config__WEBPACK_IMPORTED_MODULE_3__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('SafeLink.getDecodedUrl error ', url, error);
    }
  }
  return undefined;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SafeLink);

/***/ }),

/***/ "./src/components/common/Sparkles.tsx":
/*!********************************************!*\
  !*** ./src/components/common/Sparkles.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _Sparkles_module_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sparkles.module.scss */ "./src/components/common/Sparkles.module.scss");




const SYMBOL = '✦';
const ANIMATION_DURATION = 5;

// Values are in percents
const BUTTON_POSITIONS = [{
  x: 20,
  y: 0,
  size: 100,
  durationShift: 10
}, {
  x: 15,
  y: 15,
  size: 75,
  durationShift: 70
}, {
  x: 10,
  y: 35,
  size: 75,
  durationShift: 90
}, {
  x: 20,
  y: 70,
  size: 125,
  durationShift: 30
}, {
  x: 40,
  y: 10,
  size: 125,
  durationShift: 0
}, {
  x: 45,
  y: 60,
  size: 75,
  durationShift: 60
}, {
  x: 60,
  y: -10,
  size: 100,
  durationShift: 20
}, {
  x: 55,
  y: 40,
  size: 75,
  durationShift: 60
}, {
  x: 70,
  y: 65,
  size: 100,
  durationShift: 90
}, {
  x: 80,
  y: 10,
  size: 75,
  durationShift: 30
}, {
  x: 80,
  y: 45,
  size: 125,
  durationShift: 0
}];
const PROGRESS_POSITIONS = generateRandomProgressPositions(100);
const Sparkles = ({
  className,
  ...presetSettings
}) => {
  if (presetSettings.preset === 'button') {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_Sparkles_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].root, _Sparkles_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].button, className)
    }, BUTTON_POSITIONS.map(position => {
      const shiftX = Math.cos(Math.atan2(-50 + position.y, -50 + position.x)) * 100;
      const shiftY = Math.sin(Math.atan2(-50 + position.y, -50 + position.x)) * 100;
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: _Sparkles_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].symbol,
        style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_2__["default"])(`top: ${position.y}%`, `left: ${position.x}%`, `--_duration-shift: ${-position.durationShift / 100 * ANIMATION_DURATION}s`, `--_shift-x: ${shiftX}%`, `--_shift-y: ${shiftY}%`, `scale: ${position.size}%`)
      }, SYMBOL);
    }));
  }
  if (presetSettings.preset === 'progress') {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_Sparkles_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].root, _Sparkles_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].progress, className)
    }, PROGRESS_POSITIONS.map(position => {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: _Sparkles_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].symbol,
        style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_2__["default"])(`top: ${position.y}%`, `left: ${position.x}%`, `--_shift-x: ${position.velocityX}%`, `--_shift-y: ${position.velocityY}%`, `scale: ${position.scale}%`, `--_duration-shift: ${-position.durationShift / 100 * ANIMATION_DURATION}s`)
      }, SYMBOL);
    }));
  }
  return undefined;
};
function generateRandomProgressPositions(count) {
  const positions = [];
  for (let i = 0; i < count; i++) {
    positions.push({
      x: Math.random() * 100,
      y: Math.random() * 100,
      velocityX: (Math.random() * 5 + 15) * 100,
      velocityY: (Math.random() * 10 - 5) * 100,
      scale: (Math.random() * 0.5 + 0.5) * 100,
      durationShift: Math.random() * 100
    });
  }
  return positions;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Sparkles));

/***/ }),

/***/ "./src/components/common/StickerView.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/StickerView.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_stickers_useColorFilter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/stickers/useColorFilter */ "./src/hooks/stickers/useColorFilter.tsx");
/* harmony import */ var _hooks_useCoordsInSharedCanvas__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useCoordsInSharedCanvas */ "./src/hooks/useCoordsInSharedCanvas.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useMediaTransition */ "./src/hooks/useMediaTransition.ts");
/* harmony import */ var _hooks_useMountAfterHeavyAnimation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/useMountAfterHeavyAnimation */ "./src/hooks/useMountAfterHeavyAnimation.ts");
/* harmony import */ var _hooks_useThumbnail__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/useThumbnail */ "./src/hooks/useThumbnail.ts");
/* harmony import */ var _hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hooks/useUniqueId */ "./src/hooks/useUniqueId.ts");
/* harmony import */ var _hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hooks/window/useDevicePixelRatio */ "./src/hooks/window/useDevicePixelRatio.ts");
/* harmony import */ var _ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../ui/OptimizedVideo */ "./src/components/ui/OptimizedVideo.tsx");
/* harmony import */ var _AnimatedSticker__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./AnimatedSticker */ "./src/components/common/AnimatedSticker.tsx");
/* harmony import */ var _StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./StickerView.module.scss */ "./src/components/common/StickerView.module.scss");




















const SHARED_PREFIX = 'shared';
const STICKER_SIZE = 24;
const StickerView = ({
  containerRef,
  sticker,
  thumbClassName,
  fullMediaHash,
  fullMediaClassName,
  isSmall,
  size = STICKER_SIZE,
  customColor,
  loopLimit,
  shouldLoop = false,
  shouldPreloadPreview,
  forceAlways,
  forceOnHeavyAnimation,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  noLoad,
  noPlay,
  noVideoOnMobile,
  withSharedAnimation,
  withTranslucentThumb,
  sharedCanvasRef,
  onVideoEnded,
  onAnimatedStickerLoop
}) => {
  const {
    id,
    isLottie,
    stickerSetInfo,
    emoji
  } = sticker;
  const [isVideoBroken, markVideoBroken] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const isUnsupportedVideo = sticker.isVideo && (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_WEBM_SUPPORTED || noVideoOnMobile && (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_IOS || _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_ANDROID));
  const isVideo = sticker.isVideo;
  const isStatic = !isLottie && !isVideo;
  const previewMediaHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getStickerMediaHash)(sticker, 'preview');
  const dpr = (0,_hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_16__["default"])();
  const filterStyle = (0,_hooks_stickers_useColorFilter__WEBPACK_IMPORTED_MODULE_7__["default"])(customColor);
  const isIntersectingForLoading = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_10__.useIsIntersecting)(containerRef, observeIntersectionForLoading);
  const shouldLoad = isIntersectingForLoading && !noLoad;
  const isIntersectingForPlaying = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_10__.useIsIntersecting)(containerRef, observeIntersectionForPlaying) && isIntersectingForLoading;
  const shouldPlay = isIntersectingForPlaying && !noPlay;
  const hasIntersectedForPlayingRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(isIntersectingForPlaying);
  if (!hasIntersectedForPlayingRef.current && isIntersectingForPlaying) {
    hasIntersectedForPlayingRef.current = true;
  }
  const cachedPreview = _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__.getFromMemory(previewMediaHash);
  const isReadyToMountFullMedia = (0,_hooks_useMountAfterHeavyAnimation__WEBPACK_IMPORTED_MODULE_13__["default"])(hasIntersectedForPlayingRef.current);
  const shouldForcePreview = isUnsupportedVideo || (isStatic ? isSmall : noPlay);
  const shouldLoadPreview = !customColor && !cachedPreview && (!isReadyToMountFullMedia || shouldForcePreview);
  const previewMediaData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_11__["default"])(previewMediaHash, !shouldLoadPreview);
  const withPreview = shouldLoadPreview || cachedPreview;
  const shouldSkipLoadingFullMedia = Boolean(shouldForcePreview || fullMediaHash === previewMediaHash && (cachedPreview || previewMediaData));
  const fullMediaData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_11__["default"])(fullMediaHash || `sticker${id}`, !shouldLoad || shouldSkipLoadingFullMedia);
  const shouldRenderFullMedia = isReadyToMountFullMedia && fullMediaData && !isVideoBroken;
  const [isPlayerReady, markPlayerReady] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const isFullMediaReady = shouldRenderFullMedia && (isStatic || isPlayerReady);
  const thumbDataUri = (0,_hooks_useThumbnail__WEBPACK_IMPORTED_MODULE_14__["default"])(sticker);
  const thumbData = cachedPreview || previewMediaData || thumbDataUri;
  const isThumbOpaque = sharedCanvasRef && !withTranslucentThumb;
  const noCrossTransition = Boolean(isLottie && withPreview);
  const thumbRef = (0,_hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_12__["default"])(thumbData && !isFullMediaReady, {
    noCloseTransition: noCrossTransition
  });
  const fullMediaRef = (0,_hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_12__["default"])(isFullMediaReady, {
    noOpenTransition: noCrossTransition
  });
  const coords = (0,_hooks_useCoordsInSharedCanvas__WEBPACK_IMPORTED_MODULE_8__["default"])(containerRef, sharedCanvasRef);

  // Preload preview for Message Input and local message
  (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_11__["default"])(previewMediaHash, !shouldLoad || !shouldPreloadPreview);
  const randomIdPrefix = (0,_hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_15__["default"])();
  const renderId = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [withSharedAnimation ? SHARED_PREFIX : randomIdPrefix, id, size, withSharedAnimation ? customColor : undefined, dpr].filter(Boolean).join('_'), [id, size, customColor, dpr, withSharedAnimation, randomIdPrefix]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    ref: thumbRef,
    src: thumbData,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__["default"].thumb, noCrossTransition && _StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__["default"].noTransition, isThumbOpaque && _StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__["default"].thumbOpaque, thumbClassName, 'sticker-media'),
    style: filterStyle,
    alt: "",
    draggable: false
  }), shouldRenderFullMedia && (isLottie ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AnimatedSticker__WEBPACK_IMPORTED_MODULE_18__["default"], {
    ref: fullMediaRef,
    key: renderId,
    renderId: renderId,
    size: size,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__["default"].media, (noCrossTransition || isThumbOpaque) && _StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__["default"].noTransition, fullMediaClassName),
    tgsUrl: fullMediaData,
    play: shouldPlay,
    noLoop: !shouldLoop,
    forceOnHeavyAnimation: forceAlways || forceOnHeavyAnimation,
    forceAlways: forceAlways,
    isLowPriority: isSmall && !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsAlwaysHighPriorityEmoji)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), stickerSetInfo),
    sharedCanvas: sharedCanvasRef?.current || undefined,
    sharedCanvasCoords: coords,
    onLoad: markPlayerReady,
    onLoop: onAnimatedStickerLoop,
    onEnded: onAnimatedStickerLoop,
    color: customColor
  }) : isVideo ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_17__["default"], {
    ref: fullMediaRef,
    canPlay: shouldPlay,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__["default"].media, fullMediaClassName, 'sticker-media'),
    src: fullMediaData,
    playsInline: true,
    muted: true,
    loop: shouldLoop && !loopLimit,
    isPriority: forceAlways,
    disablePictureInPicture: true,
    onReady: markPlayerReady,
    onBroken: markVideoBroken,
    onEnded: onVideoEnded,
    style: filterStyle
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    ref: fullMediaRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_StickerView_module_scss__WEBPACK_IMPORTED_MODULE_19__["default"].media, fullMediaClassName, 'sticker-media'),
    src: fullMediaData,
    alt: emoji,
    style: filterStyle,
    draggable: false
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(StickerView));

/***/ }),

/***/ "./src/components/common/TopicDefaultIcon.tsx":
/*!****************************************************!*\
  !*** ./src/components/common/TopicDefaultIcon.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_forumColors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/forumColors */ "./src/util/forumColors.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _TopicDefaultIcon_module_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TopicDefaultIcon.module.scss */ "./src/components/common/TopicDefaultIcon.module.scss");








const TopicDefaultIcon = ({
  className,
  letterClassName,
  topicId,
  iconColor,
  title,
  onClick
}) => {
  const iconSrc = (0,_util_forumColors__WEBPACK_IMPORTED_MODULE_3__.getTopicDefaultIcon)(iconColor);
  if (topicId === _config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_TOPIC_ID) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
      name: "hashtag",
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_TopicDefaultIcon_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].root, className, 'general-forum-icon'),
      onClick: onClick
    });
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_TopicDefaultIcon_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].root, className),
    onClick: onClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    className: _TopicDefaultIcon_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].icon,
    src: iconSrc,
    alt: "",
    draggable: false
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_TopicDefaultIcon_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].title, letterClassName, 'topic-icon-letter')
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_util_textFormat__WEBPACK_IMPORTED_MODULE_4__.getFirstLetters)(title, 1))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(TopicDefaultIcon));

/***/ }),

/***/ "./src/components/common/UiLoader.tsx":
/*!********************************************!*\
  !*** ./src/components/common/UiLoader.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers_chats__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers/chats */ "./src/global/helpers/chats.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/files */ "./src/util/files.ts");
/* harmony import */ var _util_fonts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/fonts */ "./src/util/fonts.ts");
/* harmony import */ var _util_localization__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/localization */ "./src/util/localization/index.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useEffectOnce */ "./src/hooks/useEffectOnce.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _ui_Modal_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ui/Modal.scss */ "./src/components/ui/Modal.scss");
/* harmony import */ var _Avatar_scss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Avatar.scss */ "./src/components/common/Avatar.scss");
/* harmony import */ var _App_module_scss__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../App.module.scss */ "./src/components/App.module.scss");
/* harmony import */ var _UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./UiLoader.module.scss */ "./src/components/common/UiLoader.module.scss");
/* harmony import */ var _assets_lock_png__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../assets/lock.png */ "./src/assets/lock.png");
/* harmony import */ var _assets_monkey_svg__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../assets/monkey.svg */ "./src/assets/monkey.svg");
/* harmony import */ var _assets_spoilers_mask_svg__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../assets/spoilers/mask.svg */ "./src/assets/spoilers/mask.svg");
/* harmony import */ var _assets_telegram_logo_svg__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../assets/telegram-logo.svg */ "./src/assets/telegram-logo.svg");



 // Direct import for better module splitting












// Workaround for incorrect bundling by Webpack: force including in the main chunk








const MAX_PRELOAD_DELAY = 700;
const SECOND_STATE_DELAY = 1000;
const AVATARS_TO_PRELOAD = 10;
function preloadAvatars() {
  const {
    listIds,
    byId
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().chats;
  if (!listIds.active) {
    return undefined;
  }
  return Promise.all(listIds.active.slice(0, AVATARS_TO_PRELOAD).map(chatId => {
    const chat = byId[chatId];
    if (!chat) {
      return undefined;
    }
    const avatarHash = (0,_global_helpers_chats__WEBPACK_IMPORTED_MODULE_3__.getChatAvatarHash)(chat);
    if (!avatarHash) {
      return undefined;
    }
    return _util_mediaLoader__WEBPACK_IMPORTED_MODULE_9__.fetch(avatarHash, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl);
  }));
}
const preloadTasks = {
  main: () => Promise.all([(0,_util_moduleLoader__WEBPACK_IMPORTED_MODULE_10__.loadModule)(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_10__.Bundles.Main).then(_util_fonts__WEBPACK_IMPORTED_MODULE_7__["default"]), preloadAvatars(), (0,_util_files__WEBPACK_IMPORTED_MODULE_6__.preloadImage)(_assets_spoilers_mask_svg__WEBPACK_IMPORTED_MODULE_21__), _util_localization__WEBPACK_IMPORTED_MODULE_8__.localizationReadyPromise]),
  authPhoneNumber: () => Promise.all([(0,_util_fonts__WEBPACK_IMPORTED_MODULE_7__["default"])(), (0,_util_files__WEBPACK_IMPORTED_MODULE_6__.preloadImage)(_assets_telegram_logo_svg__WEBPACK_IMPORTED_MODULE_22__)]),
  authCode: () => (0,_util_files__WEBPACK_IMPORTED_MODULE_6__.preloadImage)(_assets_monkey_svg__WEBPACK_IMPORTED_MODULE_20__),
  authPassword: () => (0,_util_files__WEBPACK_IMPORTED_MODULE_6__.preloadImage)(_assets_monkey_svg__WEBPACK_IMPORTED_MODULE_20__),
  authQrCode: _util_fonts__WEBPACK_IMPORTED_MODULE_7__["default"],
  lock: () => Promise.all([(0,_util_fonts__WEBPACK_IMPORTED_MODULE_7__["default"])(), (0,_util_files__WEBPACK_IMPORTED_MODULE_6__.preloadImage)(_assets_lock_png__WEBPACK_IMPORTED_MODULE_19__)]),
  inactive: () => {}
};
const UiLoader = ({
  page,
  children,
  isRightColumnShown,
  shouldSkipHistoryAnimations,
  leftColumnWidth
}) => {
  const {
    setIsUiReady
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isReady, markReady] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const {
    shouldRender: shouldRenderMask,
    transitionClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_14__["default"])(!isReady, undefined, true);
  (0,_hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    let timeout;
    const safePreload = async () => {
      try {
        await preloadTasks[page]();
      } catch (err) {
        // Do nothing
      }
    };
    Promise.race([(0,_util_schedulers__WEBPACK_IMPORTED_MODULE_11__.pause)(MAX_PRELOAD_DELAY), page ? safePreload() : Promise.resolve()]).then(() => {
      markReady();
      setIsUiReady({
        uiReadyState: 1
      });
      timeout = window.setTimeout(() => {
        setIsUiReady({
          uiReadyState: 2
        });
      }, SECOND_STATE_DELAY);
    });
    return () => {
      if (timeout) {
        clearTimeout(timeout);
        timeout = undefined;
      }
      setIsUiReady({
        uiReadyState: 0
      });
    };
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, children, shouldRenderMask && !shouldSkipHistoryAnimations && Boolean(page) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].mask, transitionClassNames)
  }, page === 'main' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].main
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].left,
    style: leftColumnWidth ? `width: ${leftColumnWidth}px` : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].middle, _App_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].bg)
  }), isRightColumnShown && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].right
  })) : page === 'inactive' || page === 'lock' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].blank, _App_module_scss__WEBPACK_IMPORTED_MODULE_17__["default"].bg)
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UiLoader_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].blank
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  isMobile
}) => {
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global);
  return {
    shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,
    uiReadyState: tabState.uiReadyState,
    isRightColumnShown: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsRightColumnShown)(global, isMobile),
    leftColumnWidth: global.leftColumnWidth
  };
})(UiLoader));

/***/ }),

/***/ "./src/components/common/UserLink.tsx":
/*!********************************************!*\
  !*** ./src/components/common/UserLink.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");




const UserLink = ({
  className,
  sender,
  children
}) => {
  const {
    openChat
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const handleClick = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (sender) {
      openChat({
        id: sender.id
      });
    }
  }, [sender, openChat]);
  if (!sender) {
    return children;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_3__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('UserLink', className),
    onClick: handleClick
  }, children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UserLink);

/***/ }),

/***/ "./src/components/common/code/CodeBlock.tsx":
/*!**************************************************!*\
  !*** ./src/components/common/code/CodeBlock.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_prettyCodeLanguageNames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/prettyCodeLanguageNames */ "./src/util/prettyCodeLanguageNames.ts");
/* harmony import */ var _hooks_useAsync__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useAsync */ "./src/hooks/useAsync.ts");
/* harmony import */ var _CodeOverlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CodeOverlay */ "./src/components/common/code/CodeOverlay.tsx");
/* harmony import */ var _CodeBlock_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CodeBlock.scss */ "./src/components/common/code/CodeBlock.scss");







const CodeBlock = ({
  text,
  language,
  noCopy
}) => {
  const [isWordWrap, setWordWrap] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const {
    result: highlighted
  } = (0,_hooks_useAsync__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!language) return Promise.resolve(undefined);
    return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lowlight_lib_core_js"), __webpack_require__.e("src_util_highlightCode_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ../../../util/highlightCode */ "./src/util/highlightCode.ts")).then(lib => lib.default(text, language));
  }, [language, text]);
  const handleWordWrapToggle = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(wrap => {
    setWordWrap(wrap);
  }, []);
  const blockClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('code-block', !isWordWrap && 'no-word-wrap');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "CodeBlock"
  }, language && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "code-title"
  }, (0,_util_prettyCodeLanguageNames__WEBPACK_IMPORTED_MODULE_3__.getPrettyCodeLanguageName)(language)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("pre", {
    className: blockClass,
    "data-entity-type": _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.Pre,
    "data-language": language
  }, highlighted ?? text, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CodeOverlay__WEBPACK_IMPORTED_MODULE_5__["default"], {
    text: text,
    className: "code-overlay",
    onWordWrapToggle: handleWordWrapToggle,
    noCopy: noCopy
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(CodeBlock));

/***/ }),

/***/ "./src/components/common/code/CodeOverlay.tsx":
/*!****************************************************!*\
  !*** ./src/components/common/code/CodeOverlay.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/window/useWindowSize */ "./src/hooks/window/useWindowSize.ts");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _CodeOverlay_module_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CodeOverlay.module.scss */ "./src/components/common/code/CodeOverlay.module.scss");









const CodeOverlay = ({
  text,
  className,
  noCopy,
  onWordWrapToggle
}) => {
  const {
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const windowSize = (0,_hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const [isWordWrap, setIsWordWrap] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const [withWordWrapButton, setWithWordWrapButton] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const checkWordWrap = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    const isWrap = (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__.areLinesWrapping)(text, ref.current.parentElement);
    setWithWordWrapButton(isWrap);
  }, [text]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isWordWrap) {
      checkWordWrap();
    }
  }, [checkWordWrap, isWordWrap, text, windowSize]);
  const handleCopy = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_3__.copyTextToClipboard)(text);
    showNotification({
      message: lang('TextCopied')
    });
  }, [lang, showNotification, text]);
  const handleWordWrapClick = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setIsWordWrap(!isWordWrap);
    onWordWrapToggle?.(!isWordWrap);
  }, [isWordWrap, onWordWrapToggle]);
  const contentClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_CodeOverlay_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].content, !withWordWrapButton && noCopy && _CodeOverlay_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].hidden);
  const overlayClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_CodeOverlay_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].overlay, className);
  const wrapClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_CodeOverlay_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].wrap, isWordWrap && _CodeOverlay_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].wrapOn);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: overlayClass,
    ref: ref
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: contentClass
  }, withWordWrapButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: wrapClass,
    onClick: handleWordWrapClick,
    title: "Word Wrap"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_7__["default"], {
    name: "word-wrap"
  })), !noCopy && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _CodeOverlay_module_scss__WEBPACK_IMPORTED_MODULE_8__["default"].copy,
    onClick: handleCopy,
    title: lang('Copy')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_7__["default"], {
    name: "copy"
  }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(CodeOverlay));

/***/ }),

/***/ "./src/components/common/helpers/animatedAssets.ts":
/*!*********************************************************!*\
  !*** ./src/components/common/helpers/animatedAssets.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LOCAL_TGS_URLS: () => (/* binding */ LOCAL_TGS_URLS)
/* harmony export */ });
/* harmony import */ var _assets_tgs_auth_QrPlane_tgs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../assets/tgs/auth/QrPlane.tgs */ "./src/assets/tgs/auth/QrPlane.tgs");
/* harmony import */ var _assets_tgs_calls_CameraFlip_tgs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../assets/tgs/calls/CameraFlip.tgs */ "./src/assets/tgs/calls/CameraFlip.tgs");
/* harmony import */ var _assets_tgs_calls_HandFilled_tgs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../assets/tgs/calls/HandFilled.tgs */ "./src/assets/tgs/calls/HandFilled.tgs");
/* harmony import */ var _assets_tgs_calls_HandOutline_tgs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../assets/tgs/calls/HandOutline.tgs */ "./src/assets/tgs/calls/HandOutline.tgs");
/* harmony import */ var _assets_tgs_calls_Speaker_tgs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../assets/tgs/calls/Speaker.tgs */ "./src/assets/tgs/calls/Speaker.tgs");
/* harmony import */ var _assets_tgs_calls_VoiceAllowTalk_tgs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../assets/tgs/calls/VoiceAllowTalk.tgs */ "./src/assets/tgs/calls/VoiceAllowTalk.tgs");
/* harmony import */ var _assets_tgs_calls_VoiceMini_tgs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../assets/tgs/calls/VoiceMini.tgs */ "./src/assets/tgs/calls/VoiceMini.tgs");
/* harmony import */ var _assets_tgs_calls_VoiceMuted_tgs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../assets/tgs/calls/VoiceMuted.tgs */ "./src/assets/tgs/calls/VoiceMuted.tgs");
/* harmony import */ var _assets_tgs_calls_VoiceOutlined_tgs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../assets/tgs/calls/VoiceOutlined.tgs */ "./src/assets/tgs/calls/VoiceOutlined.tgs");
/* harmony import */ var _assets_tgs_general_Flame_tgs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../assets/tgs/general/Flame.tgs */ "./src/assets/tgs/general/Flame.tgs");
/* harmony import */ var _assets_tgs_general_Fragment_tgs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../assets/tgs/general/Fragment.tgs */ "./src/assets/tgs/general/Fragment.tgs");
/* harmony import */ var _assets_tgs_general_Mention_tgs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../assets/tgs/general/Mention.tgs */ "./src/assets/tgs/general/Mention.tgs");
/* harmony import */ var _assets_tgs_general_PartyPopper_tgs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../assets/tgs/general/PartyPopper.tgs */ "./src/assets/tgs/general/PartyPopper.tgs");
/* harmony import */ var _assets_tgs_invites_Invite_tgs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../assets/tgs/invites/Invite.tgs */ "./src/assets/tgs/invites/Invite.tgs");
/* harmony import */ var _assets_tgs_invites_Requests_tgs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../assets/tgs/invites/Requests.tgs */ "./src/assets/tgs/invites/Requests.tgs");
/* harmony import */ var _assets_tgs_LastSeen_tgs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../assets/tgs/LastSeen.tgs */ "./src/assets/tgs/LastSeen.tgs");
/* harmony import */ var _assets_tgs_monkeys_TwoFactorSetupMonkeyClose_tgs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../assets/tgs/monkeys/TwoFactorSetupMonkeyClose.tgs */ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyClose.tgs");
/* harmony import */ var _assets_tgs_monkeys_TwoFactorSetupMonkeyIdle_tgs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../assets/tgs/monkeys/TwoFactorSetupMonkeyIdle.tgs */ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyIdle.tgs");
/* harmony import */ var _assets_tgs_monkeys_TwoFactorSetupMonkeyPeek_tgs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../assets/tgs/monkeys/TwoFactorSetupMonkeyPeek.tgs */ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyPeek.tgs");
/* harmony import */ var _assets_tgs_monkeys_TwoFactorSetupMonkeyTracking_tgs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../assets/tgs/monkeys/TwoFactorSetupMonkeyTracking.tgs */ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyTracking.tgs");
/* harmony import */ var _assets_tgs_ReadTime_tgs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../assets/tgs/ReadTime.tgs */ "./src/assets/tgs/ReadTime.tgs");
/* harmony import */ var _assets_tgs_Report_tgs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../assets/tgs/Report.tgs */ "./src/assets/tgs/Report.tgs");
/* harmony import */ var _assets_tgs_settings_Congratulations_tgs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../assets/tgs/settings/Congratulations.tgs */ "./src/assets/tgs/settings/Congratulations.tgs");
/* harmony import */ var _assets_tgs_settings_DiscussionGroupsDucks_tgs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../assets/tgs/settings/DiscussionGroupsDucks.tgs */ "./src/assets/tgs/settings/DiscussionGroupsDucks.tgs");
/* harmony import */ var _assets_tgs_settings_Experimental_tgs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../assets/tgs/settings/Experimental.tgs */ "./src/assets/tgs/settings/Experimental.tgs");
/* harmony import */ var _assets_tgs_settings_FoldersAll_tgs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../assets/tgs/settings/FoldersAll.tgs */ "./src/assets/tgs/settings/FoldersAll.tgs");
/* harmony import */ var _assets_tgs_settings_FoldersNew_tgs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../assets/tgs/settings/FoldersNew.tgs */ "./src/assets/tgs/settings/FoldersNew.tgs");
/* harmony import */ var _assets_tgs_settings_FoldersShare_tgs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../assets/tgs/settings/FoldersShare.tgs */ "./src/assets/tgs/settings/FoldersShare.tgs");
/* harmony import */ var _assets_tgs_settings_Lock_tgs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../assets/tgs/settings/Lock.tgs */ "./src/assets/tgs/settings/Lock.tgs");
/* harmony import */ var _assets_tgs_stars_StarReaction_tgs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../assets/tgs/stars/StarReaction.tgs */ "./src/assets/tgs/stars/StarReaction.tgs");
/* harmony import */ var _assets_tgs_stars_StarReactionEffect_tgs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../../assets/tgs/stars/StarReactionEffect.tgs */ "./src/assets/tgs/stars/StarReactionEffect.tgs");
/* harmony import */ var _assets_tgs_Unlock_tgs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../assets/tgs/Unlock.tgs */ "./src/assets/tgs/Unlock.tgs");
































const LOCAL_TGS_URLS = {
  MonkeyIdle: _assets_tgs_monkeys_TwoFactorSetupMonkeyIdle_tgs__WEBPACK_IMPORTED_MODULE_17__,
  MonkeyTracking: _assets_tgs_monkeys_TwoFactorSetupMonkeyTracking_tgs__WEBPACK_IMPORTED_MODULE_19__,
  MonkeyClose: _assets_tgs_monkeys_TwoFactorSetupMonkeyClose_tgs__WEBPACK_IMPORTED_MODULE_16__,
  MonkeyPeek: _assets_tgs_monkeys_TwoFactorSetupMonkeyPeek_tgs__WEBPACK_IMPORTED_MODULE_18__,
  FoldersAll: _assets_tgs_settings_FoldersAll_tgs__WEBPACK_IMPORTED_MODULE_25__,
  FoldersNew: _assets_tgs_settings_FoldersNew_tgs__WEBPACK_IMPORTED_MODULE_26__,
  FoldersShare: _assets_tgs_settings_FoldersShare_tgs__WEBPACK_IMPORTED_MODULE_27__,
  DiscussionGroups: _assets_tgs_settings_DiscussionGroupsDucks_tgs__WEBPACK_IMPORTED_MODULE_23__,
  Lock: _assets_tgs_settings_Lock_tgs__WEBPACK_IMPORTED_MODULE_28__,
  CameraFlip: _assets_tgs_calls_CameraFlip_tgs__WEBPACK_IMPORTED_MODULE_1__,
  HandFilled: _assets_tgs_calls_HandFilled_tgs__WEBPACK_IMPORTED_MODULE_2__,
  HandOutline: _assets_tgs_calls_HandOutline_tgs__WEBPACK_IMPORTED_MODULE_3__,
  Speaker: _assets_tgs_calls_Speaker_tgs__WEBPACK_IMPORTED_MODULE_4__,
  VoiceAllowTalk: _assets_tgs_calls_VoiceAllowTalk_tgs__WEBPACK_IMPORTED_MODULE_5__,
  VoiceMini: _assets_tgs_calls_VoiceMini_tgs__WEBPACK_IMPORTED_MODULE_6__,
  VoiceMuted: _assets_tgs_calls_VoiceMuted_tgs__WEBPACK_IMPORTED_MODULE_7__,
  VoiceOutlined: _assets_tgs_calls_VoiceOutlined_tgs__WEBPACK_IMPORTED_MODULE_8__,
  JoinRequest: _assets_tgs_invites_Requests_tgs__WEBPACK_IMPORTED_MODULE_14__,
  Invite: _assets_tgs_invites_Invite_tgs__WEBPACK_IMPORTED_MODULE_13__,
  QrPlane: _assets_tgs_auth_QrPlane_tgs__WEBPACK_IMPORTED_MODULE_0__,
  Congratulations: _assets_tgs_settings_Congratulations_tgs__WEBPACK_IMPORTED_MODULE_22__,
  Experimental: _assets_tgs_settings_Experimental_tgs__WEBPACK_IMPORTED_MODULE_24__,
  PartyPopper: _assets_tgs_general_PartyPopper_tgs__WEBPACK_IMPORTED_MODULE_12__,
  Flame: _assets_tgs_general_Flame_tgs__WEBPACK_IMPORTED_MODULE_9__,
  ReadTime: _assets_tgs_ReadTime_tgs__WEBPACK_IMPORTED_MODULE_20__,
  Unlock: _assets_tgs_Unlock_tgs__WEBPACK_IMPORTED_MODULE_31__,
  LastSeen: _assets_tgs_LastSeen_tgs__WEBPACK_IMPORTED_MODULE_15__,
  Mention: _assets_tgs_general_Mention_tgs__WEBPACK_IMPORTED_MODULE_11__,
  Fragment: _assets_tgs_general_Fragment_tgs__WEBPACK_IMPORTED_MODULE_10__,
  StarReactionEffect: _assets_tgs_stars_StarReactionEffect_tgs__WEBPACK_IMPORTED_MODULE_30__,
  StarReaction: _assets_tgs_stars_StarReaction_tgs__WEBPACK_IMPORTED_MODULE_29__,
  Report: _assets_tgs_Report_tgs__WEBPACK_IMPORTED_MODULE_21__
};

/***/ }),

/***/ "./src/components/common/helpers/documentInfo.ts":
/*!*******************************************************!*\
  !*** ./src/components/common/helpers/documentInfo.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getColorFromExtension: () => (/* binding */ getColorFromExtension),
/* harmony export */   getDocumentExtension: () => (/* binding */ getDocumentExtension),
/* harmony export */   getDocumentHasPreview: () => (/* binding */ getDocumentHasPreview),
/* harmony export */   getFileExtension: () => (/* binding */ getFileExtension),
/* harmony export */   getFileSizeString: () => (/* binding */ getFileSizeString)
/* harmony export */ });
const ONE_GIGABYTE = 1024 * 1024 * 1024;
const ONE_MEGABYTE = 1024 * 1024;
function getFileSizeString(bytes) {
  if (bytes > ONE_GIGABYTE / 2) {
    return `${(bytes / ONE_GIGABYTE).toFixed(1)} GB`;
  }
  if (bytes > ONE_MEGABYTE / 2) {
    return `${(bytes / ONE_MEGABYTE).toFixed(1)} MB`;
  }
  return `${(bytes / 1024).toFixed(1)} KB`;
}
function getDocumentExtension(document) {
  const {
    fileName,
    mimeType
  } = document;
  return getFileExtension(fileName, mimeType);
}
function getFileExtension(fileName, mimeType) {
  if (fileName && fileName.indexOf('.') !== -1) {
    return fileName.split('.').pop();
  } else {
    return mimeType.split('/').pop();
  }
}
function getColorFromExtension(extension) {
  switch (extension) {
    case 'apk':
    case 'xls':
    case 'xlsx':
    case 'ods':
      return 'green';
    case 'zip':
    case 'rar':
    case '7z':
    case 'tar':
    case 'gz':
    case 'bz2':
    case 'liz':
    case 'lz4':
    case 'lz5':
    case 'xz':
    case 'zst':
    case 'wim':
    case 'ppt':
    case 'pptx':
    case 'odp':
      return 'orange';
    case 'pdf':
    case 'xps':
      return 'red';
    default:
      return 'default';
  }
}
function getDocumentHasPreview(document) {
  return Boolean(document.previewBlobUrl || document.thumbnail);
}

/***/ }),

/***/ "./src/components/common/helpers/mediaDimensions.ts":
/*!**********************************************************!*\
  !*** ./src/components/common/helpers/mediaDimensions.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AVATAR_FULL_DIMENSIONS: () => (/* binding */ AVATAR_FULL_DIMENSIONS),
/* harmony export */   GIF_MIN_WIDTH: () => (/* binding */ GIF_MIN_WIDTH),
/* harmony export */   LIKE_STICKER_ID: () => (/* binding */ LIKE_STICKER_ID),
/* harmony export */   MEDIA_VIEWER_MEDIA_QUERY: () => (/* binding */ MEDIA_VIEWER_MEDIA_QUERY),
/* harmony export */   REM: () => (/* binding */ REM),
/* harmony export */   ROUND_VIDEO_DIMENSIONS_PX: () => (/* binding */ ROUND_VIDEO_DIMENSIONS_PX),
/* harmony export */   VIDEO_AVATAR_FULL_DIMENSIONS: () => (/* binding */ VIDEO_AVATAR_FULL_DIMENSIONS),
/* harmony export */   calculateDimensions: () => (/* binding */ calculateDimensions),
/* harmony export */   calculateDimensionsForMessageMedia: () => (/* binding */ calculateDimensionsForMessageMedia),
/* harmony export */   calculateExtendedPreviewDimensions: () => (/* binding */ calculateExtendedPreviewDimensions),
/* harmony export */   calculateInlineImageDimensions: () => (/* binding */ calculateInlineImageDimensions),
/* harmony export */   calculateMediaViewerDimensions: () => (/* binding */ calculateMediaViewerDimensions),
/* harmony export */   calculateVideoDimensions: () => (/* binding */ calculateVideoDimensions),
/* harmony export */   getAvailableWidth: () => (/* binding */ getAvailableWidth),
/* harmony export */   getDocumentThumbnailDimensions: () => (/* binding */ getDocumentThumbnailDimensions),
/* harmony export */   getMediaViewerAvailableDimensions: () => (/* binding */ getMediaViewerAvailableDimensions),
/* harmony export */   getPictogramDimensions: () => (/* binding */ getPictogramDimensions),
/* harmony export */   getStickerDimensions: () => (/* binding */ getStickerDimensions)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/windowSize */ "./src/util/windowSize.ts");




const MEDIA_VIEWER_MEDIA_QUERY = '(max-height: 640px)';
const REM = parseInt(getComputedStyle(document.documentElement).fontSize, 10);
const ROUND_VIDEO_DIMENSIONS_PX = 240;
const GIF_MIN_WIDTH = 300;
const AVATAR_FULL_DIMENSIONS = {
  width: 640,
  height: 640
};
const VIDEO_AVATAR_FULL_DIMENSIONS = {
  width: 800,
  height: 800
};
const LIKE_STICKER_ID = '4986041492570112461';
const DEFAULT_MEDIA_DIMENSIONS = {
  width: 100,
  height: 100
};
const MOBILE_SCREEN_NO_AVATARS_MESSAGE_EXTRA_WIDTH_REM = 4.5;
const MOBILE_SCREEN_MESSAGE_EXTRA_WIDTH_REM = 7;
const MESSAGE_MAX_WIDTH_REM = 29;
const MESSAGE_OWN_MAX_WIDTH_REM = 30;
let cachedMaxWidthOwn;
let cachedMaxWidth;
let cachedMaxWidthNoAvatar;
function getMaxMessageWidthRem(fromOwnMessage, noAvatars, isMobile) {
  const regularMaxWidth = fromOwnMessage ? MESSAGE_OWN_MAX_WIDTH_REM : MESSAGE_MAX_WIDTH_REM;
  if (!isMobile) {
    return regularMaxWidth;
  }
  const {
    width: windowWidth
  } = _util_windowSize__WEBPACK_IMPORTED_MODULE_3__["default"].get();

  // @optimization Limitation: changing device screen width not supported
  if (!cachedMaxWidthOwn) {
    cachedMaxWidthOwn = Math.min(MESSAGE_OWN_MAX_WIDTH_REM, windowWidth / REM - MOBILE_SCREEN_NO_AVATARS_MESSAGE_EXTRA_WIDTH_REM);
  }
  if (!cachedMaxWidth) {
    cachedMaxWidth = Math.min(MESSAGE_MAX_WIDTH_REM, windowWidth / REM - MOBILE_SCREEN_MESSAGE_EXTRA_WIDTH_REM);
  }
  if (!cachedMaxWidthNoAvatar) {
    cachedMaxWidthNoAvatar = Math.min(MESSAGE_MAX_WIDTH_REM, windowWidth / REM - MOBILE_SCREEN_NO_AVATARS_MESSAGE_EXTRA_WIDTH_REM);
  }
  return fromOwnMessage ? cachedMaxWidthOwn : noAvatars ? cachedMaxWidthNoAvatar : cachedMaxWidth;
}
function getAvailableWidth(fromOwnMessage, isWebPageMedia, noAvatars, isMobile) {
  const extraPaddingRem = isWebPageMedia ? 1.625 : 0;
  const availableWidthRem = getMaxMessageWidthRem(fromOwnMessage, noAvatars, isMobile) - extraPaddingRem;
  return availableWidthRem * REM;
}
function getAvailableHeight(isGif, aspectRatio) {
  if (isGif && aspectRatio && aspectRatio >= 0.75 && aspectRatio <= 1.25) {
    return 20 * REM;
  }
  return 27 * REM;
}
function calculateDimensionsForMessageMedia({
  width,
  height,
  fromOwnMessage,
  isWebPageMedia,
  isGif,
  noAvatars,
  isMobile
}) {
  const aspectRatio = height / width;
  const availableWidth = getAvailableWidth(fromOwnMessage, isWebPageMedia, noAvatars, isMobile);
  const availableHeight = getAvailableHeight(isGif, aspectRatio);
  const mediaWidth = isGif ? Math.max(GIF_MIN_WIDTH, width) : width;
  const mediaHeight = isGif ? height * (mediaWidth / width) : height;
  return calculateDimensions(availableWidth, availableHeight, mediaWidth, mediaHeight);
}
function getMediaViewerAvailableDimensions(withFooter, isVideo) {
  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);
  const {
    width: windowWidth,
    height: windowHeight
  } = _util_windowSize__WEBPACK_IMPORTED_MODULE_3__["default"].get();
  let occupiedHeightRem = isVideo && mql.matches ? 10 : 8.25;
  if (withFooter && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_TOUCH_ENV) {
    occupiedHeightRem = mql.matches ? 10 : 12.5;
  }
  return {
    width: windowWidth,
    height: windowHeight - occupiedHeightRem * REM
  };
}
function calculateInlineImageDimensions(photo, fromOwnMessage, asForwarded, isWebPageMedia, noAvatars, isMobile) {
  const {
    width,
    height
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getPhotoInlineDimensions)(photo) || DEFAULT_MEDIA_DIMENSIONS;
  return calculateDimensionsForMessageMedia({
    width,
    height,
    fromOwnMessage,
    asForwarded,
    isWebPageMedia,
    noAvatars,
    isMobile
  });
}
function calculateVideoDimensions(video, fromOwnMessage, asForwarded, isWebPageMedia, noAvatars, isMobile) {
  const {
    width,
    height
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getVideoDimensions)(video) || DEFAULT_MEDIA_DIMENSIONS;
  return calculateDimensionsForMessageMedia({
    width,
    height,
    fromOwnMessage,
    asForwarded,
    isWebPageMedia,
    isGif: video.isGif,
    noAvatars,
    isMobile
  });
}
function calculateExtendedPreviewDimensions(preview, fromOwnMessage, asForwarded, isWebPageMedia, noAvatars, isMobile) {
  const {
    width = DEFAULT_MEDIA_DIMENSIONS.width,
    height = DEFAULT_MEDIA_DIMENSIONS.height
  } = preview;
  return calculateDimensionsForMessageMedia({
    width,
    height,
    fromOwnMessage,
    asForwarded,
    isWebPageMedia,
    noAvatars,
    isMobile
  });
}
function getPictogramDimensions() {
  return {
    width: 2 * REM,
    height: 2 * REM
  };
}
function getDocumentThumbnailDimensions(smaller) {
  if (smaller) {
    return {
      width: 3 * REM,
      height: 3 * REM
    };
  }
  return {
    width: 3.375 * REM,
    height: 3.375 * REM
  };
}
function getStickerDimensions(sticker, isMobile) {
  const {
    width
  } = sticker;
  let {
    height
  } = sticker;

  // For some reason this sticker has some weird `height` value
  if (sticker.id === LIKE_STICKER_ID) {
    height = width;
  }
  const aspectRatio = height && width && height / width;
  const baseWidth = REM * (isMobile ? _config__WEBPACK_IMPORTED_MODULE_0__.STICKER_SIZE_INLINE_MOBILE_FACTOR : _config__WEBPACK_IMPORTED_MODULE_0__.STICKER_SIZE_INLINE_DESKTOP_FACTOR);
  const calculatedHeight = aspectRatio ? baseWidth * aspectRatio : baseWidth;
  if (aspectRatio && calculatedHeight > baseWidth) {
    return {
      width: Math.round(baseWidth / aspectRatio),
      height: baseWidth
    };
  }
  return {
    width: baseWidth,
    height: calculatedHeight
  };
}
function calculateMediaViewerDimensions({
  width,
  height
}, withFooter, isVideo = false) {
  const {
    width: availableWidth,
    height: availableHeight
  } = getMediaViewerAvailableDimensions(withFooter, isVideo);
  return calculateDimensions(availableWidth, availableHeight, width, height);
}
function calculateDimensions(availableWidth, availableHeight, mediaWidth, mediaHeight) {
  const aspectRatio = mediaHeight / mediaWidth;
  const calculatedWidth = Math.min(mediaWidth, availableWidth);
  const calculatedHeight = Math.round(calculatedWidth * aspectRatio);
  if (calculatedHeight > availableHeight) {
    return {
      width: Math.round(availableHeight / aspectRatio),
      height: availableHeight
    };
  }
  return {
    width: calculatedWidth,
    height: Math.round(calculatedWidth * aspectRatio)
  };
}

/***/ }),

/***/ "./src/components/common/helpers/renderActionMessageText.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/common/helpers/renderActionMessageText.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderActionMessageText: () => (/* binding */ renderActionMessageText)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers/messageSummary */ "./src/global/helpers/messageSummary.ts");
/* harmony import */ var _util_formatCurrency__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/formatCurrency */ "./src/util/formatCurrency.tsx");
/* harmony import */ var _util_trimText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/trimText */ "./src/util/trimText.ts");
/* harmony import */ var _renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _ChatLink__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ChatLink */ "./src/components/common/ChatLink.tsx");
/* harmony import */ var _CustomEmoji__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _GroupCallLink__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../GroupCallLink */ "./src/components/common/GroupCallLink.tsx");
/* harmony import */ var _MessageLink__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../MessageLink */ "./src/components/common/MessageLink.tsx");
/* harmony import */ var _MessageSummary__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../MessageSummary */ "./src/components/common/MessageSummary.tsx");
/* harmony import */ var _TopicDefaultIcon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../TopicDefaultIcon */ "./src/components/common/TopicDefaultIcon.tsx");
/* harmony import */ var _UserLink__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../UserLink */ "./src/components/common/UserLink.tsx");














const MAX_LENGTH = 32;
const NBSP = '\u00A0';
function renderActionMessageText(oldLang, message, actionOriginUser, actionOriginChat, targetUsers, targetMessage, targetChatId, topic, options = {}, observeIntersectionForLoading, observeIntersectionForPlaying) {
  if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isExpiredMessage)(message)) {
    return (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getExpiredMessageDescription)(oldLang, message);
  }
  if (!message.content?.action) {
    return [];
  }
  const {
    text,
    translationValues,
    amount,
    currency,
    call,
    score,
    topicEmojiIconId,
    giftCryptoInfo,
    pluralValue
  } = message.content.action;
  const noLinks = options.asPlainText || options.isEmbedded;
  const content = [];
  const translationKey = text === 'Chat.Service.Group.UpdatedPinnedMessage1' && !targetMessage ? 'Message.PinnedGenericMessage' : text;
  let unprocessed = oldLang(translationKey, translationValues?.length ? translationValues : undefined, undefined, pluralValue);
  if (translationKey.includes('ScoredInGame')) {
    // Translation hack for games
    unprocessed = unprocessed.replace('un1', '%action_origin%').replace('un2', '%message%');
  }
  if (translationKey === 'ActionGiftOutbound') {
    // Translation hack for Premium Gift
    unprocessed = unprocessed.replace('un2', '%gift_payment_amount%').replace(/\*\*/g, '');
  }
  if (translationKey === 'ActionGiftInbound') {
    // Translation hack for Premium Gift
    unprocessed = unprocessed.replace('un1', '%action_origin%').replace('un2', '%gift_payment_amount%').replace(/\*\*/g, '');
  }
  if (translationKey === 'ActionRefunded') {
    unprocessed = unprocessed.replace('un1', '%action_origin%').replace('%1$s', '%gift_payment_amount%');
  }
  if (translationKey === 'ActionRequestedPeer') {
    unprocessed = unprocessed.replace('un1', '%star_target_user%').replace('un2', '%action_origin%').replace(/\*\*/g, '');
  }
  if (translationKey.startsWith('Notification.StarsGift.Upgrade')) {
    unprocessed = unprocessed.replace('%@', '%action_origin_chat%');
  }
  if (translationKey.startsWith('ActionUniqueGiftTransfer')) {
    unprocessed = unprocessed.replace('un1', '%action_origin%').replace(/\*\*/g, '');
  }
  if (translationKey === 'BoostingReceivedPrizeFrom') {
    unprocessed = unprocessed.replace('**%s**', '%target_chat%').replace(/\*\*/g, '');
  }
  let processed;
  if (unprocessed.includes('%star_target_user%')) {
    processed = processPlaceholder(unprocessed, '%star_target_user%', targetUsers ? targetUsers.map(user => renderUserContent(user, noLinks)).filter(Boolean) : 'User');
    unprocessed = processed.pop();
    content.push(...processed);
  }
  processed = processPlaceholder(unprocessed, '%action_origin%', actionOriginUser ? actionOriginUser.id === _config__WEBPACK_IMPORTED_MODULE_1__.SERVICE_NOTIFICATIONS_USER_ID ? oldLang('StarsTransactionUnknown') : renderUserContent(actionOriginUser, noLinks) || NBSP : actionOriginChat ? renderChatContent(oldLang, actionOriginChat, noLinks) || NBSP : 'User', '');
  unprocessed = processed.pop();
  content.push(...processed);
  processed = processPlaceholder(unprocessed, '%action_origin_chat%', actionOriginChat ? renderChatContent(oldLang, actionOriginChat, noLinks) || NBSP : 'Chat', '');
  unprocessed = processed.pop();
  content.push(...processed);
  if (unprocessed.includes('%payment_amount%')) {
    processed = processPlaceholder(unprocessed, '%payment_amount%', (0,_util_formatCurrency__WEBPACK_IMPORTED_MODULE_4__.formatCurrencyAsString)(amount, currency, oldLang.code));
    unprocessed = processed.pop();
    content.push(...processed);
  }
  if (unprocessed.includes('%action_topic%')) {
    const topicEmoji = topic?.iconEmojiId ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CustomEmoji__WEBPACK_IMPORTED_MODULE_8__["default"], {
      documentId: topic.iconEmojiId,
      isSelectable: true
    }) : '';
    const topicString = topic ? `${topic.title}` : 'a topic';
    processed = processPlaceholder(unprocessed, '%action_topic%', [topicEmoji, topicString], '');
    unprocessed = processed.pop();
    content.push(...processed);
  }
  if (unprocessed.includes('%action_topic_icon%')) {
    const topicIcon = topicEmojiIconId || topic?.iconEmojiId;
    const hasIcon = topicIcon && topicIcon !== '0';
    processed = processPlaceholder(unprocessed, '%action_topic_icon%', hasIcon ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CustomEmoji__WEBPACK_IMPORTED_MODULE_8__["default"], {
      documentId: topicIcon,
      isSelectable: true
    }) : topic ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TopicDefaultIcon__WEBPACK_IMPORTED_MODULE_12__["default"], {
      topicId: topic.id,
      title: topic.title
    }) : '...');
    unprocessed = processed.pop();
    content.push(...processed);
  }
  if (unprocessed.includes('%gift_payment_amount%')) {
    let priceText;
    if (currency && currency === _config__WEBPACK_IMPORTED_MODULE_1__.STARS_CURRENCY_CODE) {
      priceText = oldLang('ActionGiftStarsTitle', amount);
    } else {
      const price = (0,_util_formatCurrency__WEBPACK_IMPORTED_MODULE_4__.formatCurrencyAsString)(amount, currency, oldLang.code);
      if (giftCryptoInfo) {
        const cryptoPrice = (0,_util_formatCurrency__WEBPACK_IMPORTED_MODULE_4__.formatCurrencyAsString)(giftCryptoInfo.amount, giftCryptoInfo.currency, oldLang.code);
        priceText = `${cryptoPrice} (${price})`;
      } else {
        priceText = price;
      }
    }
    processed = processPlaceholder(unprocessed, '%gift_payment_amount%', priceText);
    unprocessed = processed.pop();
    content.push(...processed);
  }
  if (unprocessed.includes('%amount%')) {
    processed = processPlaceholder(unprocessed, '%amount%', amount);
    unprocessed = processed.pop();
    content.push(...processed);
  }
  if (unprocessed.includes('%score%')) {
    processed = processPlaceholder(unprocessed, '%score%', score.toString());
    unprocessed = processed.pop();
    content.push(...processed);
  }
  processed = processPlaceholder(unprocessed, '%target_user%', targetUsers ? targetUsers.map(user => renderUserContent(user, noLinks)).filter(Boolean) : 'User', '');
  unprocessed = processed.pop();
  content.push(...processed);
  processed = processPlaceholder(unprocessed, '%message%', targetMessage ? renderMessageContent(oldLang, targetMessage, options, observeIntersectionForLoading, observeIntersectionForPlaying) : 'a message');
  unprocessed = processed.pop();
  content.push(...processed);
  processed = processPlaceholder(unprocessed, '%product%', targetMessage ? renderProductContent(targetMessage) : 'a product');
  unprocessed = processed.pop();
  content.push(...processed);
  processed = processPlaceholder(unprocessed, '%target_chat%', targetChatId ? renderMigratedContent(targetChatId, noLinks) : 'another chat', '');
  processed.forEach(part => {
    content.push(...(0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(part));
  });
  if (options.asPlainText) {
    return content.join('').trim();
  }
  if (call) {
    return renderGroupCallContent(call, content);
  }
  return content;
}
function renderProductContent(message) {
  return message.content && message.content.invoice ? message.content.invoice.title : 'a product';
}
function renderMessageContent(lang, message, options = {}, observeIntersectionForLoading, observeIntersectionForPlaying) {
  const {
    asPlainText,
    isEmbedded
  } = options;
  if (asPlainText) {
    return (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__.getMessageSummaryText)(lang, message, undefined, undefined, MAX_LENGTH);
  }
  const messageSummary = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageSummary__WEBPACK_IMPORTED_MODULE_11__["default"], {
    message: message,
    truncateLength: MAX_LENGTH,
    observeIntersectionForLoading: observeIntersectionForLoading,
    observeIntersectionForPlaying: observeIntersectionForPlaying,
    withTranslucentThumbs: true
  });
  if (isEmbedded) {
    return messageSummary;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageLink__WEBPACK_IMPORTED_MODULE_10__["default"], {
    className: "action-link",
    message: message
  }, messageSummary);
}
function renderGroupCallContent(groupCall, text) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_GroupCallLink__WEBPACK_IMPORTED_MODULE_9__["default"], {
    groupCall: groupCall
  }, text);
}
function renderUserContent(sender, noLinks) {
  const text = (0,_util_trimText__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFullName)(sender), MAX_LENGTH);
  if (noLinks) {
    return (0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(text);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_UserLink__WEBPACK_IMPORTED_MODULE_13__["default"], {
    className: "action-link",
    sender: sender
  }, sender && (0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(text));
}
function renderChatContent(lang, chat, noLinks) {
  const text = (0,_util_trimText__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getChatTitle)(lang, chat), MAX_LENGTH);
  if (noLinks) {
    return (0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(text);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatLink__WEBPACK_IMPORTED_MODULE_7__["default"], {
    className: "action-link",
    chatId: chat.id
  }, chat && (0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(text));
}
function renderMigratedContent(chatId, noLinks) {
  const text = 'another chat';
  if (noLinks) {
    return text;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatLink__WEBPACK_IMPORTED_MODULE_7__["default"], {
    className: "action-link underlined-link",
    chatId: chatId
  }, text);
}
function processPlaceholder(text, placeholder, replaceValue, separator = ',') {
  const placeholderPosition = text.indexOf(placeholder);
  if (placeholderPosition < 0 || !replaceValue) {
    return [text];
  }
  const content = [];
  content.push(text.substring(0, placeholderPosition));
  if (Array.isArray(replaceValue)) {
    replaceValue.forEach((value, index) => {
      content.push(value);
      if (index + 1 < replaceValue.length) {
        content.push(`${separator} `);
      }
    });
  } else {
    content.push(replaceValue);
  }
  content.push(text.substring(placeholderPosition + placeholder.length));
  return content.flat();
}

/***/ }),

/***/ "./src/components/common/helpers/renderText.tsx":
/*!******************************************************!*\
  !*** ./src/components/common/helpers/renderText.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   areLinesWrapping: () => (/* binding */ areLinesWrapping),
/* harmony export */   "default": () => (/* binding */ renderText)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/twemojiRegex */ "./src/lib/twemojiRegex.js");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_deepLinkParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/deepLinkParser */ "./src/util/deepLinkParser.ts");
/* harmony import */ var _util_emoji_emoji__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/emoji/emoji */ "./src/util/emoji/emoji.ts");
/* harmony import */ var _util_emoji_fixNonStandardEmoji__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/emoji/fixNonStandardEmoji */ "./src/util/emoji/fixNonStandardEmoji.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _middle_message_MentionLink__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../middle/message/MentionLink */ "./src/components/middle/message/MentionLink.tsx");
/* harmony import */ var _SafeLink__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../SafeLink */ "./src/components/common/SafeLink.tsx");











const SIMPLE_MARKDOWN_REGEX = /(\*\*|__).+?\1/g;
function renderText(part, filters = ['emoji'], params) {
  if (typeof part !== 'string') {
    return [part];
  }
  return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.compact)(filters.reduce((text, filter) => {
    switch (filter) {
      case 'escape_html':
        return escapeHtml(text);
      case 'hq_emoji':
        _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__["default"].lastIndex = 0;
        return replaceEmojis(text, 'big', 'jsx');
      case 'emoji':
        _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__["default"].lastIndex = 0;
        return replaceEmojis(text, 'small', 'jsx');
      case 'emoji_html':
        _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__["default"].lastIndex = 0;
        return replaceEmojis(text, 'small', 'html');
      case 'br':
        return addLineBreaks(text, 'jsx');
      case 'br_html':
        return addLineBreaks(text, 'html');
      case 'highlight':
        return addHighlight(text, params.highlight);
      case 'quote':
        return addHighlight(text, params.quote, true);
      case 'links':
        return addLinks(text);
      case 'tg_links':
        return addLinks(text, true);
      case 'simple_markdown':
        return replaceSimpleMarkdown(text, 'jsx', params?.markdownPostProcessor);
      case 'simple_markdown_html':
        return replaceSimpleMarkdown(text, 'html');
    }
    return text;
  }, [part]));
}
function escapeHtml(textParts) {
  const divEl = document.createElement('div');
  return textParts.reduce((result, part) => {
    if (typeof part !== 'string') {
      result.push(part);
      return result;
    }
    divEl.innerText = part;
    result.push(divEl.innerHTML);
    return result;
  }, []);
}
function replaceEmojis(textParts, size, type) {
  if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_EMOJI_SUPPORTED) {
    return textParts;
  }
  return textParts.reduce((result, part) => {
    if (typeof part !== 'string') {
      result.push(part);
      return result;
    }
    part = (0,_util_emoji_fixNonStandardEmoji__WEBPACK_IMPORTED_MODULE_6__["default"])(part);
    const parts = part.split(_lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__["default"]);
    const emojis = part.match(_lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__["default"]) || [];
    result.push(parts[0]);
    return emojis.reduce((emojiResult, emoji, i) => {
      const code = (0,_util_emoji_emoji__WEBPACK_IMPORTED_MODULE_5__.nativeToUnifiedExtendedWithCache)(emoji);
      if (!code) {
        emojiResult.push(emoji);
      } else {
        const baseSrcUrl = _config__WEBPACK_IMPORTED_MODULE_1__.IS_PACKAGED_ELECTRON ? _config__WEBPACK_IMPORTED_MODULE_1__.BASE_URL : '.';
        const src = `${baseSrcUrl}/img-apple-${size === 'big' ? '160' : '64'}/${code}.png`;
        const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('emoji', size === 'small' && 'emoji-small');
        if (type === 'jsx') {
          const isLoaded = _util_emoji_emoji__WEBPACK_IMPORTED_MODULE_5__.LOADED_EMOJIS.has(src);
          emojiResult.push( /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
            src: src,
            className: `${className}${!isLoaded ? ' opacity-transition slow shown' : ''}`,
            alt: emoji,
            "data-path": src,
            draggable: false,
            onLoad: !isLoaded ? _util_emoji_emoji__WEBPACK_IMPORTED_MODULE_5__.handleEmojiLoad : undefined
          }));
        }
        if (type === 'html') {
          emojiResult.push(`<img\
            draggable="false"\
            class="${className}"\
            src="${src}"\
            alt="${emoji}"\
          />`);
        }
      }
      const index = i * 2 + 2;
      if (parts[index]) {
        emojiResult.push(parts[index]);
      }
      return emojiResult;
    }, result);
  }, []);
}
function addLineBreaks(textParts, type) {
  return textParts.reduce((result, part) => {
    if (typeof part !== 'string') {
      result.push(part);
      return result;
    }
    const splittenParts = part.split(/\r\n|\r|\n/g).reduce((parts, line, i, source) => {
      // This adds non-breaking space if line was indented with spaces, to preserve the indentation
      const trimmedLine = line.trimLeft();
      const indentLength = line.length - trimmedLine.length;
      parts.push(String.fromCharCode(160).repeat(indentLength) + trimmedLine);
      if (i !== source.length - 1) {
        parts.push(type === 'jsx' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("br", null) : '<br />');
      }
      return parts;
    }, []);
    return [...result, ...splittenParts];
  }, []);
}
function addHighlight(textParts, highlight, isQuote) {
  return textParts.reduce((result, part) => {
    if (typeof part !== 'string' || !highlight) {
      result.push(part);
      return result;
    }
    const lowerCaseText = part.toLowerCase();
    const queryPosition = lowerCaseText.indexOf(highlight.toLowerCase());
    if (queryPosition < 0) {
      result.push(part);
      return result;
    }
    const newParts = [];
    newParts.push(part.substring(0, queryPosition));
    newParts.push( /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('matching-text-highlight', isQuote && 'is-quote')
    }, part.substring(queryPosition, queryPosition + highlight.length)));
    newParts.push(part.substring(queryPosition + highlight.length));
    return [...result, ...newParts];
  }, []);
}
const RE_LINK = new RegExp(`${_config__WEBPACK_IMPORTED_MODULE_1__.RE_LINK_TEMPLATE}|${_config__WEBPACK_IMPORTED_MODULE_1__.RE_MENTION_TEMPLATE}`, 'ig');
function addLinks(textParts, allowOnlyTgLinks) {
  return textParts.reduce((result, part) => {
    if (typeof part !== 'string') {
      result.push(part);
      return result;
    }
    const links = part.match(RE_LINK);
    if (!links || !links.length) {
      result.push(part);
      return result;
    }
    const content = [];
    let nextLink = links.shift();
    let lastIndex = 0;
    while (nextLink) {
      const index = part.indexOf(nextLink, lastIndex);
      content.push(part.substring(lastIndex, index));
      if (nextLink.startsWith('@')) {
        content.push( /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_message_MentionLink__WEBPACK_IMPORTED_MODULE_9__["default"], {
          username: nextLink
        }, nextLink));
      } else {
        if (nextLink.endsWith('?')) {
          nextLink = nextLink.slice(0, nextLink.length - 1);
        }
        if (!allowOnlyTgLinks || (0,_util_deepLinkParser__WEBPACK_IMPORTED_MODULE_4__.isDeepLink)(nextLink)) {
          content.push( /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_SafeLink__WEBPACK_IMPORTED_MODULE_10__["default"], {
            text: nextLink,
            url: nextLink
          }));
        } else {
          content.push(nextLink);
        }
      }
      lastIndex = index + nextLink.length;
      nextLink = links.shift();
    }
    content.push(part.substring(lastIndex));
    return [...result, ...content];
  }, []);
}
function replaceSimpleMarkdown(textParts, type, postProcessor) {
  // Currently supported only for JSX. If needed, add typings to support HTML as well.
  const postProcess = postProcessor || (part => part);
  return textParts.reduce((result, part) => {
    if (typeof part !== 'string') {
      result.push(part);
      return result;
    }
    const parts = part.split(SIMPLE_MARKDOWN_REGEX);
    const entities = part.match(SIMPLE_MARKDOWN_REGEX) || [];
    result.push(postProcess(parts[0]));
    return entities.reduce((entityResult, entity, i) => {
      if (type === 'jsx') {
        entityResult.push(entity.startsWith('**') ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("b", null, postProcess(entity.replace(/\*\*/g, ''))) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("i", null, postProcess(entity.replace(/__/g, ''))));
      } else {
        entityResult.push(entity.startsWith('**') ? `<b>${entity.replace(/\*\*/g, '')}</b>` : `<i>${entity.replace(/__/g, '')}</i>`);
      }
      const index = i * 2 + 2;
      if (parts[index]) {
        entityResult.push(postProcess(parts[index]));
      }
      return entityResult;
    }, result);
  }, []);
}
function areLinesWrapping(text, element) {
  const lines = (text.trim().match(/\n/g) || '').length + 1;
  const {
    lineHeight
  } = getComputedStyle(element);
  const lineHeightParsed = parseFloat(lineHeight.split('px')[0]);
  return element.clientHeight >= (lines + 1) * lineHeightParsed;
}

/***/ }),

/***/ "./src/components/common/helpers/renderTextWithEntities.tsx":
/*!******************************************************************!*\
  !*** ./src/components/common/helpers/renderTextWithEntities.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTextWithEntitiesAsHtml: () => (/* binding */ getTextWithEntitiesAsHtml),
/* harmony export */   renderTextWithEntities: () => (/* binding */ renderTextWithEntities)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _middle_composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../middle/composer/helpers/customEmoji */ "./src/components/middle/composer/helpers/customEmoji.ts");
/* harmony import */ var _renderText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _middle_message_MentionLink__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../middle/message/MentionLink */ "./src/components/middle/message/MentionLink.tsx");
/* harmony import */ var _Blockquote__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Blockquote */ "./src/components/common/Blockquote.tsx");
/* harmony import */ var _code_CodeBlock__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../code/CodeBlock */ "./src/components/common/code/CodeBlock.tsx");
/* harmony import */ var _CustomEmoji__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _SafeLink__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../SafeLink */ "./src/components/common/SafeLink.tsx");
/* harmony import */ var _spoiler_Spoiler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../spoiler/Spoiler */ "./src/components/common/spoiler/Spoiler.tsx");














const HQ_EMOJI_THRESHOLD = 64;
function renderTextWithEntities({
  text,
  entities,
  highlight,
  emojiSize,
  shouldRenderAsHtml,
  containerId,
  isSimple,
  isProtected,
  noLineBreaks,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  withTranslucentThumbs,
  sharedCanvasRef,
  sharedCanvasHqRef,
  cacheBuster,
  forcePlayback,
  noCustomEmojiPlayback,
  focusedQuote,
  isInSelectMode
}) {
  if (!entities?.length) {
    return renderMessagePart({
      content: text,
      highlight,
      focusedQuote,
      emojiSize,
      shouldRenderAsHtml,
      isSimple,
      noLineBreaks
    });
  }
  const result = [];
  let deleteLineBreakAfterPre = false;
  const organizedEntities = organizeEntities(entities);

  // Recursive function to render regular and nested entities
  function renderEntity(textPartStart, textPartEnd, organizedEntity, isLastEntity) {
    const renderResult = [];
    const {
      entity,
      nestedEntities
    } = organizedEntity;
    const {
      offset,
      length,
      type
    } = entity;

    // Render text before the entity
    let textBefore = text.substring(textPartStart, offset);
    const textBeforeLength = textBefore.length;
    if (textBefore) {
      if (deleteLineBreakAfterPre && textBefore.length > 0 && textBefore[0] === '\n') {
        textBefore = textBefore.substr(1);
        deleteLineBreakAfterPre = false;
      }
      if (textBefore) {
        renderResult.push(...renderMessagePart({
          content: textBefore,
          highlight,
          focusedQuote,
          emojiSize,
          shouldRenderAsHtml,
          isSimple,
          noLineBreaks
        }));
      }
    }
    const entityStartIndex = textPartStart + textBeforeLength;
    const entityEndIndex = entityStartIndex + length;
    let entityContent = text.substring(offset, offset + length);
    const nestedEntityContent = [];
    if (deleteLineBreakAfterPre && entityContent.length > 0 && entityContent[0] === '\n') {
      entityContent = entityContent.substr(1);
      deleteLineBreakAfterPre = false;
    }
    if (type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Pre) {
      deleteLineBreakAfterPre = true;
    }

    // Render nested entities, if any
    if (nestedEntities.length) {
      let nestedIndex = entityStartIndex;
      nestedEntities.forEach((nestedEntity, nestedEntityIndex) => {
        const {
          renderResult: nestedResult,
          entityEndIndex: nestedEntityEndIndex
        } = renderEntity(nestedIndex, entityEndIndex, nestedEntity, nestedEntityIndex === nestedEntities.length - 1);
        nestedEntityContent.push(...nestedResult);
        nestedIndex = nestedEntityEndIndex;
      });
    }

    // Render the entity itself
    const newEntity = shouldRenderAsHtml ? processEntityAsHtml(entity, entityContent, nestedEntityContent) : processEntity({
      entity,
      entityContent,
      nestedEntityContent,
      highlight,
      focusedQuote,
      containerId,
      isSimple,
      noLineBreaks,
      isProtected,
      observeIntersectionForLoading,
      observeIntersectionForPlaying,
      withTranslucentThumbs,
      emojiSize,
      sharedCanvasRef,
      sharedCanvasHqRef,
      cacheBuster,
      forcePlayback,
      noCustomEmojiPlayback,
      isInSelectMode
    });
    if (Array.isArray(newEntity)) {
      renderResult.push(...newEntity);
    } else {
      renderResult.push(newEntity);
    }

    // Render text after the entity, if it is the last entity in the text,
    // or the last nested entity inside of another entity
    if (isLastEntity && entityEndIndex < textPartEnd) {
      let textAfter = text.substring(entityEndIndex, textPartEnd);
      if (deleteLineBreakAfterPre && textAfter.length > 0 && textAfter[0] === '\n') {
        textAfter = textAfter.substring(1);
      }
      if (textAfter) {
        renderResult.push(...renderMessagePart({
          content: textAfter,
          highlight,
          focusedQuote,
          emojiSize,
          shouldRenderAsHtml,
          isSimple,
          noLineBreaks
        }));
      }
    }
    return {
      renderResult,
      entityEndIndex
    };
  }

  // Process highest-level entities
  let index = 0;
  organizedEntities.forEach((entity, arrayIndex) => {
    const {
      renderResult,
      entityEndIndex
    } = renderEntity(index, text.length, entity, arrayIndex === organizedEntities.length - 1);
    result.push(...renderResult);
    index = entityEndIndex;
  });
  return result;
}
function getTextWithEntitiesAsHtml(formattedText) {
  const {
    text,
    entities
  } = formattedText || {};
  if (!text) {
    return '';
  }
  const result = renderTextWithEntities({
    text,
    entities,
    shouldRenderAsHtml: true
  });
  if (Array.isArray(result)) {
    return result.join('');
  }
  return result;
}
function renderMessagePart({
  content,
  highlight,
  focusedQuote,
  emojiSize,
  shouldRenderAsHtml,
  isSimple,
  noLineBreaks
}) {
  if (Array.isArray(content)) {
    const result = [];
    content.forEach(c => {
      result.push(...renderMessagePart({
        content: c,
        highlight,
        focusedQuote,
        emojiSize,
        shouldRenderAsHtml,
        isSimple,
        noLineBreaks
      }));
    });
    return result;
  }
  if (shouldRenderAsHtml) {
    return (0,_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(content, ['escape_html', 'emoji_html', 'br_html']);
  }
  const emojiFilter = emojiSize && emojiSize > HQ_EMOJI_THRESHOLD ? 'hq_emoji' : 'emoji';
  const filters = [emojiFilter];
  const params = {};
  if (!isSimple && !noLineBreaks) {
    filters.push('br');
  }
  if (highlight) {
    filters.push('highlight');
    params.highlight = highlight;
  }
  if (focusedQuote) {
    filters.push('quote');
    params.quote = focusedQuote;
  }
  return (0,_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(content, filters, params);
}

// Organize entities in a tree-like structure to better represent how the text will be displayed
function organizeEntities(entities) {
  const organizedEntityIndexes = new Set();
  const organizedEntities = [];
  entities.forEach((entity, index) => {
    if (organizedEntityIndexes.has(index)) {
      return;
    }
    const organizedEntity = organizeEntity(entity, index, entities, organizedEntityIndexes);
    if (organizedEntity) {
      organizedEntity.organizedIndexes.forEach(organizedIndex => {
        organizedEntityIndexes.add(organizedIndex);
      });
      organizedEntities.push(organizedEntity);
    }
  });
  return organizedEntities;
}
function organizeEntity(entity, index, entities, organizedEntityIndexes) {
  const {
    offset,
    length
  } = entity;
  const organizedIndexes = new Set([index]);
  if (organizedEntityIndexes.has(index)) {
    return undefined;
  }

  // Determine any nested entities inside current entity
  const nestedEntities = [];
  const parsedNestedEntities = entities.filter((e, i) => i > index && e.offset >= offset && e.offset < offset + length).map(e => organizeEntity(e, entities.indexOf(e), entities, organizedEntityIndexes)).filter(Boolean);
  parsedNestedEntities.forEach(parsedEntity => {
    let isChanged = false;
    parsedEntity.organizedIndexes.forEach(organizedIndex => {
      if (!isChanged && !organizedIndexes.has(organizedIndex)) {
        isChanged = true;
      }
      organizedIndexes.add(organizedIndex);
    });
    if (isChanged) {
      nestedEntities.push(parsedEntity);
    }
  });
  return {
    entity,
    organizedIndexes,
    nestedEntities
  };
}
function processEntity({
  entity,
  entityContent,
  nestedEntityContent,
  highlight,
  focusedQuote,
  containerId,
  isSimple,
  noLineBreaks,
  isProtected,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  withTranslucentThumbs,
  emojiSize,
  sharedCanvasRef,
  sharedCanvasHqRef,
  cacheBuster,
  forcePlayback,
  noCustomEmojiPlayback,
  isInSelectMode
}) {
  const entityText = typeof entityContent === 'string' && entityContent;
  const renderedContent = nestedEntityContent.length ? nestedEntityContent : entityContent;
  function renderNestedMessagePart() {
    return renderMessagePart({
      content: renderedContent,
      highlight,
      focusedQuote,
      emojiSize,
      isSimple,
      noLineBreaks
    });
  }
  if (!entityText) {
    return renderNestedMessagePart();
  }
  if (isSimple) {
    const text = renderNestedMessagePart();
    if (entity.type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Spoiler) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_spoiler_Spoiler__WEBPACK_IMPORTED_MODULE_13__["default"], null, text);
    }
    if (entity.type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.CustomEmoji) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CustomEmoji__WEBPACK_IMPORTED_MODULE_11__["default"], {
        key: cacheBuster ? `${cacheBuster}-${entity.offset}` : undefined,
        documentId: entity.documentId,
        size: emojiSize,
        isSelectable: true,
        withSharedAnimation: true,
        sharedCanvasRef: sharedCanvasRef,
        sharedCanvasHqRef: sharedCanvasHqRef,
        observeIntersectionForLoading: observeIntersectionForLoading,
        observeIntersectionForPlaying: observeIntersectionForPlaying,
        withTranslucentThumb: withTranslucentThumbs,
        forceAlways: forcePlayback,
        noPlay: noCustomEmojiPlayback
      });
    }
    return text;
  }
  switch (entity.type) {
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Bold:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("strong", {
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Blockquote:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Blockquote__WEBPACK_IMPORTED_MODULE_9__["default"], {
        canBeCollapsible: entity.canCollapse,
        isToggleDisabled: isInSelectMode
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.BotCommand:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
        onClick: handleBotCommandClick,
        className: "text-entity-link",
        dir: "auto",
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Hashtag:
      {
        const [tag, username] = entityContent.split('@');
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
          onClick: () => handleHashtagClick(tag, username),
          className: "text-entity-link",
          dir: "auto",
          "data-entity-type": entity.type
        }, renderNestedMessagePart());
      }
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Cashtag:
      {
        const [tag, username] = entityContent.split('@');
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
          onClick: () => handleHashtagClick(tag, username),
          className: "text-entity-link",
          dir: "auto",
          "data-entity-type": entity.type
        }, renderNestedMessagePart());
      }
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Code:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("code", {
        className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('text-entity-code', 'clickable'),
        onClick: handleCodeClick,
        role: "textbox",
        tabIndex: 0,
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Email:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
        href: `mailto:${entityText}`,
        target: "_blank",
        rel: "noopener noreferrer",
        className: "text-entity-link",
        dir: "auto",
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Italic:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("em", {
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.MentionName:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_message_MentionLink__WEBPACK_IMPORTED_MODULE_8__["default"], {
        userId: entity.userId
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Mention:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_message_MentionLink__WEBPACK_IMPORTED_MODULE_8__["default"], {
        username: entityText
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Phone:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
        href: `tel:${entityText}`,
        className: "text-entity-link",
        dir: "auto",
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Pre:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_code_CodeBlock__WEBPACK_IMPORTED_MODULE_10__["default"], {
        text: entityText,
        language: entity.language,
        noCopy: isProtected
      });
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Strike:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("del", {
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.TextUrl:
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Url:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_SafeLink__WEBPACK_IMPORTED_MODULE_12__["default"], {
        url: getLinkUrl(entityText, entity),
        text: entityText
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Underline:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("ins", {
        "data-entity-type": entity.type
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Spoiler:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_spoiler_Spoiler__WEBPACK_IMPORTED_MODULE_13__["default"], {
        containerId: containerId
      }, renderNestedMessagePart());
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.CustomEmoji:
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CustomEmoji__WEBPACK_IMPORTED_MODULE_11__["default"], {
        key: cacheBuster ? `${cacheBuster}-${entity.offset}` : undefined,
        documentId: entity.documentId,
        size: emojiSize,
        isSelectable: true,
        withSharedAnimation: true,
        sharedCanvasRef: sharedCanvasRef,
        sharedCanvasHqRef: sharedCanvasHqRef,
        observeIntersectionForLoading: observeIntersectionForLoading,
        observeIntersectionForPlaying: observeIntersectionForPlaying,
        withTranslucentThumb: withTranslucentThumbs,
        forceAlways: forcePlayback,
        noPlay: noCustomEmojiPlayback
      });
    default:
      return renderNestedMessagePart();
  }
}
function processEntityAsHtml(entity, entityContent, nestedEntityContent) {
  const rawEntityText = typeof entityContent === 'string' ? entityContent : undefined;

  // Prevent adding newlines when editing
  const content = entity.type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Pre ? entityContent.trimEnd() : entityContent;
  const renderedContent = nestedEntityContent.length ? nestedEntityContent.join('') : (0,_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(content, ['escape_html', 'emoji_html', 'br_html']).join('');
  if (!rawEntityText) {
    return renderedContent;
  }
  switch (entity.type) {
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Bold:
      return `<b>${renderedContent}</b>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Italic:
      return `<i>${renderedContent}</i>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Underline:
      return `<u>${renderedContent}</u>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Code:
      return `<code class="text-entity-code">${renderedContent}</code>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Pre:
      return `\`\`\`${(0,_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(entity.language || '', ['escape_html'])}<br/>${renderedContent}<br/>\`\`\`<br/>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Strike:
      return `<del>${renderedContent}</del>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.MentionName:
      return `<a
        class="text-entity-link"
        data-entity-type="${_api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.MentionName}"
        data-user-id="${entity.userId}"
        contenteditable="false"
        dir="auto"
      >${renderedContent}</a>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Url:
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.TextUrl:
      return `<a
        class="text-entity-link"
        href=${getLinkUrl(rawEntityText, entity)}
        data-entity-type="${entity.type}"
        dir="auto"
      >${renderedContent}</a>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Spoiler:
      return `<span
        class="spoiler"
        data-entity-type="${_api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Spoiler}"
        >${renderedContent}</span>`;
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.CustomEmoji:
      return (0,_middle_composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_6__.buildCustomEmojiHtmlFromEntity)(rawEntityText, entity);
    case _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Blockquote:
      return `<blockquote
        class="blockquote"
        data-entity-type="${_api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Blockquote}"
        >${renderedContent}</blockquote>`;
    default:
      return renderedContent;
  }
}
function getLinkUrl(entityContent, entity) {
  const {
    type
  } = entity;
  return type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.TextUrl && entity.url ? entity.url : entityContent;
}
function handleBotCommandClick(e) {
  (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().sendBotCommand({
    command: e.currentTarget.innerText
  });
}
function handleHashtagClick(hashtag, username) {
  if (!hashtag) return;
  if (username) {
    (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().openChatByUsername({
      username,
      onChatChanged: {
        action: 'searchHashtag',
        payload: {
          hashtag
        }
      }
    });
    return;
  }
  (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().searchHashtag({
    hashtag
  });
}
function handleCodeClick(e) {
  (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_4__.copyTextToClipboard)(e.currentTarget.innerText);
  (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().showNotification({
    message: (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.oldTranslate)('TextCopied')
  });
}

/***/ }),

/***/ "./src/components/common/hooks/useCustomEmoji.ts":
/*!*******************************************************!*\
  !*** ./src/components/common/hooks/useCustomEmoji.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useCustomEmoji)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/emoji/customEmojiManager */ "./src/util/emoji/customEmojiManager.ts");
/* harmony import */ var _hooks_useEnsureCustomEmoji__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useEnsureCustomEmoji */ "./src/hooks/useEnsureCustomEmoji.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");






function useCustomEmoji(documentId) {
  const [customEmoji, setCustomEmoji] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(documentId ? (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().customEmojis.byId[documentId] : undefined);
  const [canPlay, setCanPlay] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)((0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectCanPlayAnimatedEmojis)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)()));
  (0,_hooks_useEnsureCustomEmoji__WEBPACK_IMPORTED_MODULE_4__["default"])(documentId);
  const handleGlobalChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(customEmojis => {
    if (!documentId) return;
    const newGlobal = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
    setCustomEmoji((customEmojis ?? newGlobal.customEmojis).byId[documentId]);
    setCanPlay((0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectCanPlayAnimatedEmojis)(newGlobal));
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(handleGlobalChange, [documentId, handleGlobalChange]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!documentId) return undefined;
    (0,_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_3__.addCustomEmojiCallback)(handleGlobalChange, documentId);
    return () => {
      (0,_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_3__.removeCustomEmojiCallback)(handleGlobalChange);
    };
  }, [customEmoji, documentId, handleGlobalChange]);
  return {
    customEmoji,
    canPlay
  };
}

/***/ }),

/***/ "./src/components/common/icons/Icon.tsx":
/*!**********************************************!*\
  !*** ./src/components/common/icons/Icon.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");


const Icon = ({
  name,
  ref,
  className,
  style,
  role,
  ariaLabel,
  character,
  onClick
}) => {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("i", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(`icon icon-${name}`, className),
    style: style,
    "aria-hidden": !ariaLabel,
    "aria-label": ariaLabel,
    "data-char": character,
    role: role,
    onClick: onClick
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Icon);

/***/ }),

/***/ "./src/components/common/icons/StarIcon.tsx":
/*!**************************************************!*\
  !*** ./src/components/common/icons/StarIcon.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useUniqueId */ "./src/hooks/useUniqueId.ts");
/* harmony import */ var _StarIcon_module_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StarIcon.module.scss */ "./src/components/common/icons/StarIcon.module.scss");




/* eslint-disable max-len */
const STAR_PATH = 'M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z';
/* eslint-enable max-len */

const StarIcon = ({
  type = 'regular',
  size = 'small',
  className,
  style,
  onClick
}) => {
  const randomId = (0,_hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter

  const renderIcon = () => {
    switch (type) {
      case 'gold':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(GoldStarIcon, {
          randomId: validSvgRandomId
        });
      case 'premium':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PremiumStarIcon, {
          randomId: validSvgRandomId
        });
      default:
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(RegularStarIcon, null);
    }
  };
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("i", {
    onClick: onClick,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('StarIcon', _StarIcon_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].root, className, onClick && _StarIcon_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].clickable, _StarIcon_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"][size]),
    style: style
  }, renderIcon());
};
function GoldStarIcon({
  randomId
}) {
  const mask1Id = `${randomId}-mask1`;
  const mask2Id = `${randomId}-mask2`;
  const gradient1Id = `${randomId}-gradient1`;
  const gradient2Id = `${randomId}-gradient2`;
  const gradient3Id = `${randomId}-gradient3`;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: _StarIcon_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].svg,
    width: "20",
    height: "20",
    viewBox: "0 0 20 20",
    fill: "none"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("g", {
    "clip-path": "url(#clip0_4913_7387)"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("mask", {
    id: mask1Id,
    style: "mask-type:luminance",
    maskUnits: "userSpaceOnUse",
    x: "-2",
    y: "-2",
    width: "24",
    height: "24"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M21.416 -1.42493H-1.08398V21.0751H21.416V-1.42493Z",
    fill: "white"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("g", {
    mask: `url(#${mask1Id})`
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("mask", {
    id: mask2Id,
    style: "mask-type:luminance",
    maskUnits: "userSpaceOnUse",
    x: "-2",
    y: "-2",
    width: "24",
    height: "24"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M-1.08398 -1.42493H21.416V21.0751H-1.08398V-1.42493Z",
    fill: "white"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("g", {
    mask: `url(#${mask2Id})`
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M7.26843 6.25162L9.28943 2.22541C9.52311 1.76121 10.0884 1.5749 10.5494 1.80857C10.7294 1.90015 10.8747 2.04857 10.9662 2.23172L12.8767 6.11583C13.0314 6.43477 13.3378 6.64951 13.6883 6.69056L17.6829 7.17055C18.2261 7.23686 18.6145 7.73264 18.5513 8.27894C18.5229 8.50314 18.4218 8.71156 18.2608 8.86945L15.0998 11.9862C14.9703 12.1125 14.9103 12.2894 14.9324 12.4694L15.4598 16.6756C15.5356 17.2787 15.1093 17.8282 14.5093 17.904C14.2819 17.9324 14.0546 17.8913 13.8525 17.7808L10.5147 15.9556C10.2715 15.823 9.98099 15.8198 9.73784 15.9461L6.27687 17.7208C5.79057 17.9703 5.1969 17.7745 4.94743 17.285C4.8527 17.1019 4.82112 16.8966 4.84954 16.6945L5.12427 14.7619C5.26006 13.8177 5.84425 12.9967 6.69055 12.5641L10.5305 10.6031C10.6315 10.5526 10.6726 10.4263 10.622 10.322C10.581 10.2431 10.4957 10.1957 10.4073 10.2084L5.70847 10.8841C4.99164 10.9852 4.26535 10.7831 3.7001 10.322L2.13698 9.04629C1.69173 8.68314 1.6191 8.02 1.98225 7.57159C2.15277 7.36317 2.39592 7.22739 2.66118 7.19265L6.6716 6.67793C6.92739 6.64319 7.15159 6.4853 7.26843 6.25162Z",
    fill: `url(#${gradient1Id})`
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M10.8242 2.9422C10.4168 2.85062 9.98417 3.0464 9.78839 3.43797L7.76423 7.46419C7.64739 7.69787 7.42634 7.85576 7.1674 7.89049L3.15698 8.40837C2.89804 8.44311 2.6612 8.56942 2.49384 8.76837L3.97801 9.98097C4.44537 10.3631 5.05167 10.5304 5.64849 10.4452L10.3442 9.77255C10.6221 9.73466 10.8936 9.8736 11.0168 10.1231C11.1778 10.442 11.0515 10.8336 10.7326 10.9978L9.50734 11.623L10.9031 11.4209C10.9915 11.4083 11.0799 11.4557 11.1178 11.5346C11.1715 11.6388 11.1273 11.7651 11.0263 11.8157L7.18635 13.7767C6.34006 14.2093 5.75586 15.0303 5.62007 15.9745L5.44008 17.2282C5.60428 17.3924 5.86322 17.4366 6.07796 17.326L9.53261 15.5514C9.90839 15.3587 10.3536 15.365 10.7231 15.5671L14.0609 17.3924C14.1809 17.4587 14.3199 17.4839 14.4556 17.4682C14.8093 17.4239 15.0651 17.0955 15.0209 16.7324L14.4967 12.523C14.4588 12.2072 14.5662 11.8946 14.7904 11.6736L17.9513 8.55679C18.005 8.50311 18.0461 8.43995 18.0745 8.37048L14.1841 7.90312C13.8336 7.86207 13.5304 7.64418 13.3725 7.3284L13.2209 7.01578C12.902 6.87683 12.6399 6.63052 12.482 6.31159L10.8242 2.9422Z",
    fill: `url(#${gradient2Id})`
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M10.7484 1.41397C10.0663 1.06977 9.23893 1.3445 8.89789 2.02659L6.87373 6.05596C6.8232 6.15701 6.72531 6.22649 6.61478 6.23912L2.60436 6.757C2.22542 6.80437 1.87806 7.00015 1.63807 7.29699C1.12334 7.93486 1.22124 8.86958 1.85596 9.38746L3.42223 10.6664C4.08222 11.2032 4.93167 11.44 5.77165 11.32L9.09051 10.8432L6.48847 12.1727C5.51271 12.6716 4.84325 13.6126 4.68852 14.6989L4.41063 16.6315C4.36958 16.9252 4.41695 17.222 4.55273 17.4873C4.90956 18.1915 5.77481 18.4725 6.479 18.1125L9.93681 16.3378C10.0505 16.2778 10.1863 16.281 10.3 16.3441L13.6378 18.1662C13.9188 18.3209 14.2441 18.3841 14.563 18.343C15.4061 18.2357 15.9998 17.462 15.8956 16.622L15.3714 12.4126C15.3651 12.3716 15.3809 12.3274 15.4093 12.299L18.5703 9.1822C18.8008 8.95168 18.9492 8.65169 18.9871 8.32959C19.0787 7.5433 18.5229 6.82963 17.7366 6.73489L13.7388 6.25491C13.5399 6.2328 13.363 6.10649 13.2715 5.92334L11.3641 2.03606C11.2315 1.76765 11.0136 1.54976 10.7484 1.41397ZM9.68418 2.42132C9.80734 2.17501 10.1073 2.07712 10.3505 2.20027C10.4452 2.24764 10.5242 2.32974 10.5715 2.42763L12.482 6.31175C12.7031 6.76332 13.1357 7.06962 13.6346 7.12962L17.6324 7.60961C17.9324 7.64435 18.1471 7.91908 18.1124 8.22538C18.0966 8.3517 18.0398 8.46854 17.9513 8.55695L14.7904 11.6737C14.5662 11.8948 14.4588 12.2074 14.4967 12.5232L15.0209 16.7325C15.0651 17.0957 14.8093 17.4241 14.4556 17.4683C14.3199 17.4841 14.1809 17.4588 14.0609 17.3925L10.7231 15.5673C10.3536 15.3652 9.90839 15.362 9.53261 15.5547L6.0748 17.3294C5.80638 17.4652 5.47797 17.3578 5.33903 17.0862C5.2885 16.9852 5.26956 16.8683 5.28534 16.7546L5.56007 14.8252C5.67376 14.0231 6.17269 13.3253 6.88952 12.959L10.7294 10.9979C11.0515 10.8337 11.1778 10.4422 11.0168 10.1232C10.8905 9.87376 10.6221 9.73482 10.3442 9.77271L5.64534 10.4453C5.04851 10.5306 4.44537 10.3632 3.97801 9.98113L2.41489 8.70221C2.15595 8.49064 2.1149 8.10854 2.32647 7.8496C2.42436 7.72961 2.56331 7.65066 2.71488 7.63171L6.72531 7.11383C7.12951 7.06331 7.48003 6.81384 7.66318 6.45069L9.68418 2.42132Z",
    fill: `url(#${gradient3Id})`
  })))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("defs", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("linearGradient", {
    id: gradient1Id,
    x1: "10.1547",
    y1: "1.70752",
    x2: "10.1547",
    y2: "17.9134",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    "stop-color": "#FFF0C2"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    offset: "1",
    "stop-color": "#FFEBBA"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("linearGradient", {
    id: gradient2Id,
    x1: "10.2842",
    y1: "2.92009",
    x2: "14.7304",
    y2: "17.4713",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    "stop-color": "#FFD147"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    offset: "1",
    "stop-color": "#FFB526"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("linearGradient", {
    id: gradient3Id,
    x1: "10.1547",
    y1: "1.26556",
    x2: "14.0546",
    y2: "18.3525",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    "stop-color": "#E58F0D"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    offset: "1",
    "stop-color": "#EB7814"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("clipPath", {
    id: "clip0_4913_7387"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("rect", {
    width: "20",
    height: "20",
    fill: "white"
  }))));
}
function PremiumStarIcon({
  randomId
}) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: _StarIcon_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].svg,
    width: "14",
    height: "15",
    viewBox: "0 0 14 15",
    fill: "none"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("defs", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("linearGradient", {
    id: randomId,
    x1: "3",
    y1: "63.5001",
    x2: "84.1475",
    y2: "-1.32262",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    "stop-color": "#6B93FF"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    offset: "0.439058",
    "stop-color": "#976FFF"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("stop", {
    offset: "1",
    "stop-color": "#E46ACE"
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: STAR_PATH,
    fill: `url(#${randomId})`
  }));
}
function RegularStarIcon() {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: _StarIcon_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].svg,
    width: "14",
    height: "15",
    viewBox: "0 0 14 15",
    fill: "none"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: STAR_PATH,
    fill: "var(--color-fill)"
  }));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(StarIcon));

/***/ }),

/***/ "./src/components/common/spoiler/Spoiler.tsx":
/*!***************************************************!*\
  !*** ./src/components/common/spoiler/Spoiler.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _Spoiler_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Spoiler.scss */ "./src/components/common/spoiler/Spoiler.scss");







const revealByContainerId = new Map();
const buildClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__.createClassNameBuilder)('Spoiler');
const Spoiler = ({
  children,
  containerId
}) => {
  // eslint-disable-next-line no-null/no-null
  const contentRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [isRevealed, revealSpoiler] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(e => {
    if (!containerId) return;
    if (!isRevealed) {
      (0,_util_stopEvent__WEBPACK_IMPORTED_MODULE_3__["default"])(e);
    }
    revealByContainerId.get(containerId)?.forEach(reveal => reveal());
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!containerId) {
      return undefined;
    }
    if (revealByContainerId.has(containerId)) {
      revealByContainerId.get(containerId).push(revealSpoiler);
    } else {
      revealByContainerId.set(containerId, [revealSpoiler]);
    }
    return () => {
      revealByContainerId.delete(containerId);
    };
  }, [containerId]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: buildClassName('&', !isRevealed && 'concealed', !isRevealed && Boolean(containerId) && 'animated'),
    onClick: containerId && !isRevealed ? handleClick : undefined,
    "data-entity-type": _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.Spoiler
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: buildClassName('content'),
    ref: contentRef
  }, children));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Spoiler));

/***/ }),

/***/ "./src/components/main/AppInactive.tsx":
/*!*********************************************!*\
  !*** ./src/components/main/AppInactive.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _AppInactive_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AppInactive.scss */ "./src/components/main/AppInactive.scss");
/* harmony import */ var _assets_app_inactive_png__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../assets/app-inactive.png */ "./src/assets/app-inactive.png");





const AppInactive = () => {
  const handleReload = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    window.location.reload();
  }, []);
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_1__["default"])({
    isActive: true,
    onBack: handleReload,
    shouldResetUrlHash: true
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "AppInactive"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "content"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: _assets_app_inactive_png__WEBPACK_IMPORTED_MODULE_4__,
    alt: ""
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    className: "title"
  }, "Such error, many tabs"), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "description"
  }, "Telegram supports only one active tab with the app.", /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("br", null), "Please reload this page to continue using this tab or close it."), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "actions"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_2__["default"], {
    isText: true,
    ripple: true,
    onClick: handleReload
  }, "Reload app"))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AppInactive);

/***/ }),

/***/ "./src/components/main/LockScreen.async.tsx":
/*!**************************************************!*\
  !*** ./src/components/main/LockScreen.async.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const LockScreenAsync = props => {
  const {
    isLocked
  } = props;
  const LockScreen = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Main, 'LockScreen', !isLocked);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return LockScreen ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(LockScreen, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LockScreenAsync);

/***/ }),

/***/ "./src/components/main/Main.async.tsx":
/*!********************************************!*\
  !*** ./src/components/main/Main.async.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const MainAsync = props => {
  const Main = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Main, 'Main');

  // eslint-disable-next-line react/jsx-props-no-spreading
  return Main ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(Main, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MainAsync);

/***/ }),

/***/ "./src/components/middle/composer/helpers/customEmoji.ts":
/*!***************************************************************!*\
  !*** ./src/components/middle/composer/helpers/customEmoji.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INPUT_CUSTOM_EMOJI_SELECTOR: () => (/* binding */ INPUT_CUSTOM_EMOJI_SELECTOR),
/* harmony export */   buildCustomEmojiHtml: () => (/* binding */ buildCustomEmojiHtml),
/* harmony export */   buildCustomEmojiHtmlFromEntity: () => (/* binding */ buildCustomEmojiHtmlFromEntity),
/* harmony export */   getCustomEmojiSize: () => (/* binding */ getCustomEmojiSize)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../util/emoji/customEmojiManager */ "./src/util/emoji/customEmojiManager.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");






const INPUT_CUSTOM_EMOJI_SELECTOR = 'img[data-document-id]';
function buildCustomEmojiHtml(emoji) {
  const [isPlaceholder, src, uniqueId] = (0,_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_4__.getInputCustomEmojiParams)(emoji);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('custom-emoji', 'emoji', 'emoji-small', isPlaceholder && 'placeholder', emoji.shouldUseTextColor && 'colorable');
  return `<img
    class="${className}"
    draggable="false"
    alt="${emoji.emoji}"
    data-document-id="${emoji.id}"
    ${uniqueId ? `data-unique-id="${uniqueId}"` : ''}
    data-entity-type="${_api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.CustomEmoji}"
    src="${src}"
  />`;
}
function buildCustomEmojiHtmlFromEntity(rawText, entity) {
  const customEmoji = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)().customEmojis.byId[entity.documentId];
  const [isPlaceholder, src, uniqueId] = (0,_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_4__.getInputCustomEmojiParams)(customEmoji);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('custom-emoji', 'emoji', 'emoji-small', isPlaceholder && 'placeholder', customEmoji?.shouldUseTextColor && 'colorable');
  return `<img
    class="${className}"
    draggable="false"
    alt="${rawText}"
    data-document-id="${entity.documentId}"
    ${uniqueId ? `data-unique-id="${uniqueId}"` : ''}
    data-entity-type="${_api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.CustomEmoji}"
    src="${src}"
  />`;
}
function getCustomEmojiSize(maxEmojisInLine) {
  if (!maxEmojisInLine) return undefined;

  // Should be the same as in _message-content.scss
  if (maxEmojisInLine > _config__WEBPACK_IMPORTED_MODULE_2__.EMOJI_SIZES) return 2.25 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.REM;
  if (maxEmojisInLine === 1) return 7 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.REM;
  return Math.min(7.5 - maxEmojisInLine * 0.75, 5.625) * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.REM;
}

/***/ }),

/***/ "./src/components/middle/helpers/preventMessageInputBlur.ts":
/*!******************************************************************!*\
  !*** ./src/components/middle/helpers/preventMessageInputBlur.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   preventMessageInputBlur: () => (/* binding */ preventMessageInputBlur),
/* harmony export */   preventMessageInputBlurWithBubbling: () => (/* binding */ preventMessageInputBlurWithBubbling)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");


function preventMessageInputBlur(e, withBubbling = false) {
  if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_IOS || !document.activeElement || document.activeElement.id !== _config__WEBPACK_IMPORTED_MODULE_0__.EDITABLE_INPUT_ID || !withBubbling && e.target !== e.currentTarget) {
    return;
  }
  e.preventDefault();
}
function preventMessageInputBlurWithBubbling(e) {
  preventMessageInputBlur(e, true);
}

/***/ }),

/***/ "./src/components/middle/message/MentionLink.tsx":
/*!*******************************************************!*\
  !*** ./src/components/middle/message/MentionLink.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");





const MentionLink = ({
  userId,
  username,
  userOrChat,
  children
}) => {
  const {
    openChat,
    openChatByUsername,
    closeStoryViewer,
    setShouldCloseRightColumn
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const handleClick = () => {
    if (isMobile) {
      setShouldCloseRightColumn({
        value: true
      });
    }
    if (userOrChat) {
      openChat({
        id: userOrChat.id
      });
    } else if (username) {
      closeStoryViewer();
      openChatByUsername({
        username: username.substring(1)
      });
    }
  };
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
    onClick: handleClick,
    className: "text-entity-link",
    dir: "auto",
    "data-entity-type": userId ? _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.MentionName : _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Mention
  }, children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  userId
}) => {
  return {
    userOrChat: userId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, userId) : undefined
  };
})(MentionLink));

/***/ }),

/***/ "./src/components/middle/message/hooks/useVideoAutoPause.ts":
/*!******************************************************************!*\
  !*** ./src/components/middle/message/hooks/useVideoAutoPause.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useVideoAutoPause)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useHeavyAnimation */ "./src/hooks/useHeavyAnimation.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_usePriorityPlaybackCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/usePriorityPlaybackCheck */ "./src/hooks/usePriorityPlaybackCheck.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");






function useVideoAutoPause(playerRef, canPlay, isPriority) {
  const canPlayRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  canPlayRef.current = canPlay;
  const {
    play,
    pause
  } = usePlayPause(playerRef);
  const unfreezePlaying = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    if (canPlayRef.current && (isPriority || !isFrozen())) {
      play();
    }
  });
  const unfreezePlayingOnRaf = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMeasure)(unfreezePlaying);
  });
  (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_5__["default"])(pause, unfreezePlayingOnRaf, !canPlay || isPriority);
  (0,_hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_2__["default"])(pause, unfreezePlaying, !canPlay || isPriority);
  (0,_hooks_usePriorityPlaybackCheck__WEBPACK_IMPORTED_MODULE_4__["default"])(pause, unfreezePlaying, !canPlay || isPriority);
  const handlePlaying = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    if (!canPlayRef.current || !isPriority && isFrozen()) {
      pause();
    }
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (canPlay) {
      if (isPriority || !isFrozen()) {
        play();
      }
    } else {
      pause();
    }
  }, [canPlay, play, pause, isPriority]);
  return {
    handlePlaying
  };
}
function usePlayPause(mediaRef) {
  const shouldPauseRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const isLoadingPlayRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const play = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    shouldPauseRef.current = false;
    if (mediaRef.current && !isLoadingPlayRef.current && document.body.contains(mediaRef.current)) {
      isLoadingPlayRef.current = true;
      mediaRef.current.play().then(() => {
        isLoadingPlayRef.current = false;
        if (shouldPauseRef.current) {
          mediaRef.current?.pause();
          shouldPauseRef.current = false;
        }
      }).catch(e => {
        // eslint-disable-next-line no-console
        console.warn(e);
      });
    }
  });
  const pause = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    if (isLoadingPlayRef.current) {
      shouldPauseRef.current = true;
    } else {
      mediaRef.current?.pause();
    }
  });
  return {
    play,
    pause
  };
}
function isFrozen() {
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)() || (0,_hooks_usePriorityPlaybackCheck__WEBPACK_IMPORTED_MODULE_4__.isPriorityPlaybackActive)() || (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_5__.isBackgroundModeActive)();
}

/***/ }),

/***/ "./src/components/ui/Button.tsx":
/*!**************************************!*\
  !*** ./src/components/ui/Button.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_Sparkles__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/Sparkles */ "./src/components/common/Sparkles.tsx");
/* harmony import */ var _RippleEffect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./RippleEffect */ "./src/components/ui/RippleEffect.tsx");
/* harmony import */ var _Spinner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _Button_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Button.scss */ "./src/components/ui/Button.scss");










// Longest animation duration;
const CLICKED_TIMEOUT = 400;
const Button = ({
  ref,
  type = 'button',
  id,
  onClick,
  onContextMenu,
  onMouseDown,
  onMouseUp,
  onMouseEnter,
  onMouseLeave,
  onFocus,
  children,
  size = 'default',
  color = 'primary',
  backgroundImage,
  className,
  round,
  pill,
  badge,
  fluid,
  isText,
  isLoading,
  isShiny,
  withPremiumGradient,
  withSparkleEffect,
  onTransitionEnd,
  ariaLabel,
  ariaControls,
  hasPopup,
  href,
  download,
  disabled,
  nonInteractive,
  allowDisabledClick,
  noFastClick = color === 'danger',
  ripple,
  faded,
  tabIndex,
  isRtl,
  isRectangular,
  noPreventDefault,
  shouldStopPropagation,
  noForcedUpperCase,
  style
}) => {
  // eslint-disable-next-line no-null/no-null
  let elementRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  if (ref) {
    elementRef = ref;
  }
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const [isClicked, setIsClicked] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const isNotInteractive = disabled || nonInteractive;
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('Button', className, size, color, round && 'round', pill && 'pill', fluid && 'fluid', badge && 'badge', isNotInteractive && 'disabled', nonInteractive && 'non-interactive', allowDisabledClick && 'click-allowed', isText && 'text', isLoading && 'loading', ripple && 'has-ripple', faded && 'faded', isClicked && 'clicked', backgroundImage && 'with-image', isShiny && 'shiny', withPremiumGradient && 'premium', isRectangular && 'rectangular', noForcedUpperCase && 'no-upper-case');
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    if ((allowDisabledClick || !isNotInteractive) && onClick) {
      onClick(e);
    }
    if (shouldStopPropagation) e.stopPropagation();
    setIsClicked(true);
    setTimeout(() => {
      setIsClicked(false);
    }, CLICKED_TIMEOUT);
  });
  const handleMouseDown = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    if (!noPreventDefault) e.preventDefault();
    if ((allowDisabledClick || !isNotInteractive) && onMouseDown) {
      onMouseDown(e);
    }
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_TOUCH_ENV && e.button === _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.MouseButton.Main && !noFastClick) {
      handleClick(e);
    }
  });
  const content = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, withSparkleEffect && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Sparkles__WEBPACK_IMPORTED_MODULE_6__["default"], {
    preset: "button"
  }), isLoading ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    dir: isRtl ? 'auto' : undefined
  }, lang('Cache.ClearProgress')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Spinner__WEBPACK_IMPORTED_MODULE_8__["default"], {
    color: isText ? 'blue' : 'white'
  })) : children, !isNotInteractive && ripple && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_RippleEffect__WEBPACK_IMPORTED_MODULE_7__["default"], null));
  if (href) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
      ref: elementRef,
      id: id,
      className: fullClassName,
      href: href,
      title: ariaLabel,
      download: download,
      tabIndex: tabIndex,
      dir: isRtl ? 'rtl' : undefined,
      "aria-label": ariaLabel,
      "aria-controls": ariaControls,
      style: style,
      onTransitionEnd: onTransitionEnd,
      target: "_blank",
      rel: "noreferrer"
    }, content);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("button", {
    ref: elementRef,
    id: id,
    type: type,
    className: fullClassName,
    onClick: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_TOUCH_ENV || noFastClick ? handleClick : undefined,
    onContextMenu: onContextMenu,
    onMouseDown: handleMouseDown,
    onMouseUp: onMouseUp,
    onMouseEnter: onMouseEnter && !isNotInteractive ? onMouseEnter : undefined,
    onMouseLeave: onMouseLeave && !isNotInteractive ? onMouseLeave : undefined,
    onTransitionEnd: onTransitionEnd,
    onFocus: onFocus && !isNotInteractive ? onFocus : undefined,
    "aria-label": ariaLabel,
    "aria-controls": ariaControls,
    "aria-haspopup": hasPopup,
    title: ariaLabel,
    tabIndex: tabIndex,
    dir: isRtl ? 'rtl' : undefined,
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_2__["default"])(style, backgroundImage && `background-image: url(${backgroundImage})`) || undefined
  }, content);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Button);

/***/ }),

/***/ "./src/components/ui/Checkbox.tsx":
/*!****************************************!*\
  !*** ./src/components/ui/Checkbox.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _Spinner__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _Checkbox_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Checkbox.scss */ "./src/components/ui/Checkbox.scss");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }









const Checkbox = ({
  id,
  name,
  value,
  label,
  labelText,
  subLabel,
  checked,
  tabIndex,
  disabled,
  withIcon,
  blocking,
  permissionGroup,
  isLoading,
  className,
  rightIcon,
  onlyInput,
  isRound,
  nestedCheckbox,
  nestedCheckboxCount,
  nestedOptionList,
  leftElement,
  values = [],
  onChange,
  onCheck,
  onClickLabel
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__["default"])();
  // eslint-disable-next-line no-null/no-null
  const labelRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [showNested, setShowNested] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const handleChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(event => {
    if (disabled) {
      return;
    }
    if (onChange) {
      onChange(event, nestedOptionList);
    }
    if (onCheck) {
      onCheck(event.currentTarget.checked);
    }
  });
  const toggleNested = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    setShowNested(!showNested);
  });
  function handleClick(event) {
    if (event.target !== labelRef.current) {
      onClickLabel?.(event, value);
    }
  }
  function handleInputClick(event) {
    event.stopPropagation();
  }
  const labelClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('Checkbox', disabled && 'disabled', withIcon && 'withIcon', isLoading && 'loading', blocking && 'blocking', nestedCheckbox && 'nested', subLabel && 'withSubLabel', permissionGroup && 'permission-group', Boolean(leftElement) && 'avatar', onlyInput && 'onlyInput', isRound && 'round', Boolean(rightIcon) && 'withNestedList', className);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("label", {
    className: labelClassName,
    dir: lang.isRtl ? 'rtl' : undefined,
    onClick: onClickLabel ? handleClick : undefined,
    ref: labelRef
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("input", {
    type: "checkbox",
    id: id,
    name: name,
    value: value,
    checked: checked,
    disabled: disabled,
    tabIndex: tabIndex,
    onChange: handleChange,
    onClick: onClickLabel ? handleInputClick : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('Checkbox-main', Boolean(leftElement) && 'Nested-avatar-list')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "label",
    dir: "auto"
  }, leftElement, typeof label === 'string' ? (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__["default"])(label) : label, labelText && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "ml-1"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__["default"])(labelText))), subLabel && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "subLabel",
    dir: "auto"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__["default"])(subLabel)), rightIcon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__["default"], {
    name: rightIcon,
    className: "right-icon"
  })), nestedCheckbox && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "nestedButton",
    dir: "auto"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Button__WEBPACK_IMPORTED_MODULE_6__["default"], {
    className: "button",
    color: "translucent",
    size: "smaller",
    onClick: toggleNested
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__["default"], {
    name: "group-filled",
    className: "group-icon"
  }), nestedCheckboxCount, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__["default"], {
    name: showNested ? 'up' : 'down'
  }))), isLoading && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Spinner__WEBPACK_IMPORTED_MODULE_7__["default"], null)), nestedCheckbox && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('nested-checkbox-group', showNested && 'nested-checkbox-group-open')
  }, nestedOptionList?.nestedOptions?.map(nestedOption => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(Checkbox, _extends({
    key: nestedOption.value,
    leftElement: leftElement,
    onChange: handleChange,
    checked: values.indexOf(nestedOption.value) !== -1,
    values: values
    /* eslint-disable-next-line react/jsx-props-no-spreading */
  }, nestedOption)))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Checkbox));

/***/ }),

/***/ "./src/components/ui/DropdownMenu.tsx":
/*!********************************************!*\
  !*** ./src/components/ui/DropdownMenu.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _Menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _DropdownMenu_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DropdownMenu.scss */ "./src/components/ui/DropdownMenu.scss");





const DropdownMenu = ({
  trigger,
  className,
  children,
  transformOriginX,
  transformOriginY,
  positionX = 'left',
  positionY = 'top',
  footer,
  forceOpen,
  onOpen,
  onClose,
  onTransitionEnd,
  onMouseEnterBackdrop,
  onHide
}) => {
  // eslint-disable-next-line no-null/no-null
  const menuRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [isOpen, setIsOpen] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const toggleIsOpen = () => {
    setIsOpen(!isOpen);
    if (isOpen) {
      onClose?.();
    } else {
      onOpen?.();
    }
  };
  const handleKeyDown = e => {
    const menu = menuRef.current;
    if (!isOpen || e.keyCode !== 40 || !menu) {
      return;
    }
    const focusedElement = document.activeElement;
    const elementChildren = Array.from(menu.children);
    if (!focusedElement || elementChildren.indexOf(focusedElement) === -1) {
      elementChildren[0].focus();
    }
  };
  const handleClose = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setIsOpen(false);
    onClose?.();
  }, [onClose]);
  const triggerComponent = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (trigger) return trigger;
    return ({
      onTrigger,
      isOpen: isMenuOpen
    }) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Button__WEBPACK_IMPORTED_MODULE_2__["default"], {
      round: true,
      size: "smaller",
      color: "translucent",
      className: isMenuOpen ? 'active' : '',
      onClick: onTrigger,
      ariaLabel: "More actions"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_1__["default"], {
      name: "more"
    }));
  }, [trigger]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: `DropdownMenu ${className || ''}`,
    onKeyDown: handleKeyDown,
    onTransitionEnd: onTransitionEnd
  }, triggerComponent({
    onTrigger: toggleIsOpen,
    isOpen
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Menu__WEBPACK_IMPORTED_MODULE_3__["default"], {
    ref: menuRef,
    isOpen: isOpen || Boolean(forceOpen),
    className: className || '',
    transformOriginX: transformOriginX,
    transformOriginY: transformOriginY,
    positionX: positionX,
    positionY: positionY,
    footer: footer,
    autoClose: true,
    onClose: handleClose,
    onCloseAnimationEnd: onHide,
    onMouseEnterBackdrop: onMouseEnterBackdrop
  }, children));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DropdownMenu);

/***/ }),

/***/ "./src/components/ui/InputText.tsx":
/*!*****************************************!*\
  !*** ./src/components/ui/InputText.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");



const InputText = ({
  ref,
  id,
  className,
  value,
  label,
  error,
  success,
  disabled,
  readOnly,
  placeholder,
  autoComplete,
  inputMode,
  maxLength,
  tabIndex,
  teactExperimentControlled,
  onChange,
  onInput,
  onKeyPress,
  onKeyDown,
  onBlur,
  onPaste
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const labelText = error || success || label;
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('input-group', value && 'touched', error ? 'error' : success && 'success', disabled && 'disabled', readOnly && 'disabled', labelText && 'with-label', className);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: fullClassName,
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("input", {
    ref: ref,
    className: "form-control",
    type: "text",
    id: id,
    dir: "auto",
    value: value || '',
    tabIndex: tabIndex,
    placeholder: placeholder,
    maxLength: maxLength,
    autoComplete: autoComplete,
    inputMode: inputMode,
    disabled: disabled,
    readOnly: readOnly,
    onChange: onChange,
    onInput: onInput,
    onKeyPress: onKeyPress,
    onKeyDown: onKeyDown,
    onBlur: onBlur,
    onPaste: onPaste,
    "aria-label": labelText,
    teactExperimentControlled: teactExperimentControlled
  }), labelText && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("label", {
    htmlFor: id
  }, labelText));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(InputText));

/***/ }),

/***/ "./src/components/ui/Link.tsx":
/*!************************************!*\
  !*** ./src/components/ui/Link.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _Link_module_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Link.module.scss */ "./src/components/ui/Link.module.scss");




const Link = ({
  children,
  isPrimary,
  className,
  isRtl,
  onClick
}) => {
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(e => {
    e.preventDefault();
    onClick(e);
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
    href: "#",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('Link', _Link_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].link, className, isPrimary && _Link_module_scss__WEBPACK_IMPORTED_MODULE_3__["default"].isPrimary),
    dir: isRtl ? 'rtl' : 'auto',
    onClick: onClick ? handleClick : undefined
  }, children);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Link);

/***/ }),

/***/ "./src/components/ui/Loading.tsx":
/*!***************************************!*\
  !*** ./src/components/ui/Loading.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _Spinner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _Loading_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Loading.scss */ "./src/components/ui/Loading.scss");




const Loading = ({
  color = 'blue',
  backgroundColor,
  className,
  onClick
}) => {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('Loading', onClick && 'interactive', className),
    onClick: onClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Spinner__WEBPACK_IMPORTED_MODULE_2__["default"], {
    color: color,
    backgroundColor: backgroundColor
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Loading));

/***/ }),

/***/ "./src/components/ui/Menu.tsx":
/*!************************************!*\
  !*** ./src/components/ui/Menu.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _middle_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../middle/helpers/preventMessageInputBlur */ "./src/components/middle/helpers/preventMessageInputBlur.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _hooks_useKeyboardListNavigation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useKeyboardListNavigation */ "./src/hooks/useKeyboardListNavigation.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMenuPosition__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useMenuPosition */ "./src/hooks/useMenuPosition.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useVirtualBackdrop__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useVirtualBackdrop */ "./src/hooks/useVirtualBackdrop.ts");
/* harmony import */ var _Portal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Portal */ "./src/components/ui/Portal.ts");
/* harmony import */ var _Menu_scss__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Menu.scss */ "./src/components/ui/Menu.scss");















const ANIMATION_DURATION = 200;
const Menu = ({
  ref: externalRef,
  shouldCloseFast,
  isOpen,
  id,
  className,
  bubbleClassName,
  ariaLabelledBy,
  children,
  autoClose = false,
  footer,
  noCloseOnBackdrop = false,
  backdropExcludedSelector,
  noCompact,
  onCloseAnimationEnd,
  onClose,
  onMouseEnter,
  onMouseLeave,
  withPortal,
  onMouseEnterBackdrop,
  ...positionOptions
}) => {
  const {
    isTouchScreen
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_5__["default"])();

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    ref: bubbleRef
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_11__["default"])({
    isOpen,
    ref: externalRef,
    onCloseAnimationEnd
  });
  (0,_hooks_useMenuPosition__WEBPACK_IMPORTED_MODULE_10__["default"])(isOpen, containerRef, bubbleRef, positionOptions);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => isOpen ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_2__["default"])(onClose) : undefined, [isOpen, onClose]);
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_7__["default"])({
    isActive: isOpen,
    onBack: onClose,
    shouldBeReplaced: true
  });
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_6__["default"])(([prevIsOpen]) => {
    if (isOpen || !isOpen && prevIsOpen === true) {
      (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.beginHeavyAnimation)(ANIMATION_DURATION);
    }
  }, [isOpen]);
  const handleKeyDown = (0,_hooks_useKeyboardListNavigation__WEBPACK_IMPORTED_MODULE_8__["default"])(bubbleRef, isOpen, autoClose ? onClose : undefined, undefined, true);
  (0,_hooks_useVirtualBackdrop__WEBPACK_IMPORTED_MODULE_12__["default"])(isOpen, containerRef, noCloseOnBackdrop ? undefined : onClose, undefined, backdropExcludedSelector);
  const bubbleFullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('bubble menu-container custom-scroll', footer && 'with-footer', bubbleClassName, shouldCloseFast && 'close-fast');
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    e.stopPropagation();
    if (autoClose) {
      onClose();
    }
  });
  const menu = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    id: id,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('Menu', !noCompact && !isTouchScreen && 'compact', !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_BACKDROP_BLUR_SUPPORTED && 'no-blur', withPortal && 'in-portal', className),
    "aria-labelledby": ariaLabelledBy,
    role: ariaLabelledBy ? 'menu' : undefined,
    onKeyDown: isOpen ? handleKeyDown : undefined,
    onMouseEnter: onMouseEnter,
    onMouseLeave: isOpen ? onMouseLeave : undefined
  }, isOpen &&
  /*#__PURE__*/
  // This only prevents click events triggering on underlying elements
  _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "backdrop",
    onMouseDown: _middle_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_4__.preventMessageInputBlurWithBubbling,
    onMouseEnter: onMouseEnterBackdrop
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    role: "presentation",
    ref: bubbleRef,
    className: bubbleFullClassName,
    onClick: handleClick
  }, children, footer && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "footer"
  }, footer)));
  if (withPortal) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Portal__WEBPACK_IMPORTED_MODULE_13__["default"], null, menu);
  }
  return menu;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Menu));

/***/ }),

/***/ "./src/components/ui/MenuItem.tsx":
/*!****************************************!*\
  !*** ./src/components/ui/MenuItem.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _MenuItem_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./MenuItem.scss */ "./src/components/ui/MenuItem.scss");








const MenuItem = props => {
  const {
    icon,
    isCharIcon,
    customIcon,
    className,
    children,
    onClick,
    href,
    download,
    disabled,
    destructive,
    ariaLabel,
    withWrap,
    onContextMenu,
    clickArg,
    withPreventDefaultOnMouseDown
  } = props;
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const {
    isTouchScreen
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    if (disabled || !onClick) {
      e.preventDefault();
      return;
    }
    onClick(e, clickArg);
  });
  const handleKeyDown = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    if (e.keyCode !== 13 && e.keyCode !== 32) {
      return;
    }
    if (disabled || !onClick) {
      e.preventDefault();
      return;
    }
    onClick(e, clickArg);
  });
  const handleMouseDown = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    if (withPreventDefaultOnMouseDown) {
      e.preventDefault();
    }
  });
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('MenuItem', className, disabled && 'disabled', destructive && 'destructive', !isTouchScreen && 'compact', withWrap && 'wrap');
  const content = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, !customIcon && icon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: isCharIcon ? 'char' : icon,
    character: isCharIcon ? icon : undefined
  }), customIcon, children);
  if (href) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
      tabIndex: 0,
      className: fullClassName,
      href: href,
      download: download,
      "aria-label": ariaLabel,
      title: ariaLabel,
      target: href.startsWith(window.location.origin) || _config__WEBPACK_IMPORTED_MODULE_1__.IS_TEST ? '_self' : '_blank',
      rel: "noopener noreferrer",
      dir: lang.isRtl ? 'rtl' : undefined,
      onClick: onClick,
      onMouseDown: handleMouseDown
    }, content);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    role: "menuitem",
    tabIndex: 0,
    className: fullClassName,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onMouseDown: handleMouseDown,
    onContextMenu: onContextMenu,
    "aria-label": ariaLabel,
    title: ariaLabel,
    dir: lang.isRtl ? 'rtl' : undefined
  }, content);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MenuItem);

/***/ }),

/***/ "./src/components/ui/OptimizedVideo.tsx":
/*!**********************************************!*\
  !*** ./src/components/ui/OptimizedVideo.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useBuffering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../hooks/useBuffering */ "./src/hooks/useBuffering.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _hooks_useVideoCleanup__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useVideoCleanup */ "./src/hooks/useVideoCleanup.ts");
/* harmony import */ var _middle_message_hooks_useVideoAutoPause__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../middle/message/hooks/useVideoAutoPause */ "./src/components/middle/message/hooks/useVideoAutoPause.ts");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }






function OptimizedVideo({
  ref,
  isPriority,
  canPlay,
  children,
  onReady,
  onBroken,
  onTimeUpdate,
  ...restProps
}) {
  // eslint-disable-next-line no-null/no-null
  const localRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  if (!ref) {
    ref = localRef;
  }
  const {
    handlePlaying: handlePlayingForAutoPause
  } = (0,_middle_message_hooks_useVideoAutoPause__WEBPACK_IMPORTED_MODULE_5__["default"])(ref, canPlay, isPriority);
  const isReadyRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const handleReady = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    if (!isReadyRef.current) {
      onReady?.();
      isReadyRef.current = true;
    }
  });

  // This is only needed for browsers not allowing autoplay
  const {
    isBuffered,
    bufferingHandlers
  } = (0,_hooks_useBuffering__WEBPACK_IMPORTED_MODULE_1__["default"])(true, onTimeUpdate, onBroken);
  const {
    onPlaying: handlePlayingForBuffering,
    ...otherBufferingHandlers
  } = bufferingHandlers;
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_3__["default"])(([prevIsBuffered]) => {
    if (prevIsBuffered === undefined) {
      return;
    }
    handleReady();
  }, [isBuffered, handleReady]);
  const handlePlaying = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(e => {
    handlePlayingForAutoPause();
    handlePlayingForBuffering(e);
    handleReady();
    restProps.onPlaying?.(e);
  });
  const mergedOtherBufferingHandlers = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const mergedHandlers = {};
    Object.keys(otherBufferingHandlers).forEach(keyString => {
      const key = keyString;
      mergedHandlers[key] = event => {
        restProps[key]?.(event);
        otherBufferingHandlers[key]?.(event);
      };
    });
    return mergedHandlers;
  }, [otherBufferingHandlers, restProps]);
  (0,_hooks_useVideoCleanup__WEBPACK_IMPORTED_MODULE_4__["default"])(ref, mergedOtherBufferingHandlers);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-props-no-spreading
    _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("video", _extends({
      ref: ref,
      autoPlay: true
    }, restProps, mergedOtherBufferingHandlers, {
      onPlaying: handlePlaying
    }), children)
  );
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(OptimizedVideo));

/***/ }),

/***/ "./src/components/ui/Portal.ts":
/*!*************************************!*\
  !*** ./src/components/ui/Portal.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");


const Portal = ({
  containerSelector,
  className,
  children
}) => {
  const elementRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  if (!elementRef.current) {
    elementRef.current = document.createElement('div');
  }
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const container = document.querySelector(containerSelector || '#portals');
    if (!container) {
      return undefined;
    }
    const element = elementRef.current;
    if (className) {
      element.classList.add(className);
    }
    container.appendChild(element);
    return () => {
      _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__["default"].render(undefined, element);
      container.removeChild(element);
    };
  }, [className, containerSelector]);
  return _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__["default"].render(children, elementRef.current);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Portal);

/***/ }),

/***/ "./src/components/ui/RippleEffect.tsx":
/*!********************************************!*\
  !*** ./src/components/ui/RippleEffect.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _RippleEffect_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RippleEffect.scss */ "./src/components/ui/RippleEffect.scss");




const ANIMATION_DURATION_MS = 700;
const RippleEffect = () => {
  const [ripples, setRipples] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const cleanUpDebounced = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.debounce)(() => {
      setRipples([]);
    }, ANIMATION_DURATION_MS, false);
  }, []);
  const handleMouseDown = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(e => {
    if (e.button !== 0) {
      return;
    }
    const container = e.currentTarget;
    const position = container.getBoundingClientRect();
    const rippleSize = container.offsetWidth / 2;
    setRipples([...ripples, {
      x: e.clientX - position.x - rippleSize / 2,
      y: e.clientY - position.y - rippleSize / 2,
      size: rippleSize
    }]);
    cleanUpDebounced();
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "ripple-container",
    onMouseDown: handleMouseDown
  }, ripples.map(({
    x,
    y,
    size
  }) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "ripple-wave",
    style: `left: ${x}px; top: ${y}px; width: ${size}px; height: ${size}px;`
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(RippleEffect));

/***/ }),

/***/ "./src/components/ui/Spinner.tsx":
/*!***************************************!*\
  !*** ./src/components/ui/Spinner.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _Spinner_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Spinner.scss */ "./src/components/ui/Spinner.scss");



const Spinner = ({
  color = 'blue',
  backgroundColor,
  className
}) => {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('Spinner', className, color, backgroundColor && 'with-background', backgroundColor && `bg-${backgroundColor}`)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "Spinner__inner"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Spinner);

/***/ }),

/***/ "./src/components/ui/Transition.tsx":
/*!******************************************!*\
  !*** ./src/components/ui/Transition.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACTIVE_SLIDE_CLASS_NAME: () => (/* binding */ ACTIVE_SLIDE_CLASS_NAME),
/* harmony export */   TO_SLIDE_CLASS_NAME: () => (/* binding */ TO_SLIDE_CLASS_NAME),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/cssAnimationEndListeners */ "./src/util/cssAnimationEndListeners.ts");
/* harmony import */ var _util_forceReflow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/forceReflow */ "./src/util/forceReflow.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_swipeController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/swipeController */ "./src/util/swipeController.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _Transition_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Transition.scss */ "./src/components/ui/Transition.scss");













const FALLBACK_ANIMATION_END = 1000;
const CLASSES = {
  slide: 'Transition_slide',
  active: 'Transition_slide-active',
  from: 'Transition_slide-from',
  to: 'Transition_slide-to',
  inactive: 'Transition_slide-inactive'
};
const ACTIVE_SLIDE_CLASS_NAME = CLASSES.active;
const TO_SLIDE_CLASS_NAME = CLASSES.to;
const DISABLEABLE_ANIMATIONS = new Set(['slide', 'slideRtl', 'slideFade', 'zoomFade', 'zoomBounceSemiFade', 'slideLayers', 'pushSlide', 'reveal', 'slideOptimized', 'slideOptimizedRtl', 'slideVertical', 'slideVerticalFade']);
function Transition({
  ref,
  activeKey,
  nextKey,
  name,
  direction = 'auto',
  renderCount,
  shouldRestoreHeight,
  shouldCleanup,
  cleanupExceptionKey,
  cleanupOnlyKey,
  shouldWrap,
  wrapExceptionKey,
  id,
  className,
  slideClassName,
  withSwipeControl,
  isBlockingAnimation,
  onStart,
  onStop,
  children
}) {
  const currentKeyRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  // No need for a container to update on change
  const shouldDisableAnimation = DISABLEABLE_ANIMATIONS.has(name) && !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanAnimateInterface)((0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)());

  // eslint-disable-next-line no-null/no-null
  let containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  if (ref) {
    containerRef = ref;
  }
  const rendersRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)({});
  const prevActiveKey = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_11__["default"])(activeKey);
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const isAnimatingRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const isSwipeJustCancelledRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const hasActiveKeyChanged = prevActiveKey !== undefined && activeKey !== prevActiveKey;
  if (!renderCount && hasActiveKeyChanged) {
    rendersRef.current = {
      [prevActiveKey]: rendersRef.current[prevActiveKey]
    };
  }
  rendersRef.current[activeKey] = children;
  if (nextKey) {
    rendersRef.current[nextKey] = children;
  }
  const isBackwards = direction === -1 || direction === 'auto' && prevActiveKey > activeKey || direction === 'inverse' && prevActiveKey < activeKey;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    function cleanup() {
      if (!shouldCleanup) {
        return;
      }
      if (cleanupExceptionKey !== undefined) {
        rendersRef.current = {
          [cleanupExceptionKey]: rendersRef.current[cleanupExceptionKey]
        };
      } else if (cleanupOnlyKey !== undefined) {
        rendersRef.current = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_8__.omit)(rendersRef.current, [cleanupOnlyKey]);
      } else {
        rendersRef.current = {};
      }
      forceUpdate();
    }
    const isSlideOptimized = name === 'slideOptimized' || name === 'slideOptimizedRtl';
    const container = containerRef.current;
    const keys = Object.keys(rendersRef.current).map(Number);
    const prevActiveIndex = renderCount ? prevActiveKey : keys.indexOf(prevActiveKey);
    const activeIndex = renderCount ? activeKey : keys.indexOf(activeKey);
    const childNodes = Array.from(container.childNodes);
    if (!childNodes.length) {
      return;
    }
    const childElements = Array.from(container.children);
    childElements.forEach(el => {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(el, CLASSES.slide);
      if (slideClassName) {
        slideClassName.split(/\s+/).forEach(token => {
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(el, token);
        });
      }
    });
    if (!hasActiveKeyChanged) {
      if (isAnimatingRef.current) {
        return;
      }
      childElements.forEach(childElement => {
        if (childElement === childNodes[activeIndex]) {
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(childElement, CLASSES.active);
          if (isSlideOptimized) {
            (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(childElement, {
              transition: 'none',
              transform: 'translate3d(0, 0, 0)'
            });
          }
        } else if (!isSlideOptimized) {
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(childElement, CLASSES.inactive);
        }
      });
      return;
    }
    currentKeyRef.current = activeKey;
    if (isSlideOptimized) {
      if (!childNodes[activeIndex]) {
        return;
      }
      performSlideOptimized(shouldDisableAnimation, name, isBackwards, cleanup, activeKey, currentKeyRef, isAnimatingRef, container, childNodes[activeIndex], childNodes[prevActiveIndex], shouldRestoreHeight, isBlockingAnimation, onStart, onStop);
      return;
    }
    if (name === 'none' || shouldDisableAnimation || isSwipeJustCancelledRef.current) {
      if (isSwipeJustCancelledRef.current) {
        isSwipeJustCancelledRef.current = false;
      }
      childNodes.forEach((node, i) => {
        if (node instanceof HTMLElement) {
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(node, CLASSES.from);
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(node, CLASSES.to);
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(node, CLASSES.active, i === activeIndex);
          (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(node, CLASSES.inactive, i !== activeIndex);
        }
      });
      cleanup();
      return;
    }
    childNodes.forEach((node, i) => {
      if (node instanceof HTMLElement) {
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(node, CLASSES.active);
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(node, CLASSES.from, i === prevActiveIndex);
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(node, CLASSES.to, i === activeIndex);
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(node, CLASSES.inactive, i !== prevActiveIndex && i !== activeIndex);
      }
    });
    isAnimatingRef.current = true;
    const endHeavyAnimation = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.beginHeavyAnimation)(undefined, isBlockingAnimation);
    onStart?.();
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(container, `Transition-${name}`, !isBackwards);
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(container, `Transition-${name}Backwards`, isBackwards);
    function onAnimationEnd() {
      const activeElement = container.querySelector(`.${CLASSES.active}`);
      const {
        clientHeight
      } = activeElement || {};
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
        if (activeKey !== currentKeyRef.current) {
          endHeavyAnimation();
          return;
        }
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(container, `Transition-${name}`);
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(container, `Transition-${name}Backwards`);
        childNodes.forEach((node, i) => {
          if (node instanceof HTMLElement) {
            (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(node, CLASSES.from);
            (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(node, CLASSES.to);
            (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(node, CLASSES.active, i === activeIndex);
            (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(node, CLASSES.inactive, i !== activeIndex);
          }
        });
        if (shouldRestoreHeight) {
          if (activeElement) {
            (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(activeElement, {
              height: 'auto'
            });
            (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(container, {
              height: `${clientHeight}px`
            });
          }
        }
        onStop?.();
        endHeavyAnimation();
        isAnimatingRef.current = false;
        cleanup();
      });
    }
    const watchedNode = (name === 'reveal' || name === 'slideFadeAndroid') && isBackwards ? childNodes[prevActiveIndex] : childNodes[activeIndex];
    if (watchedNode) {
      if (withSwipeControl && childNodes[prevActiveIndex]) {
        const giveUpAnimationEnd = (0,_util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_6__.waitForAnimationEnd)(watchedNode, onAnimationEnd);
        (0,_util_swipeController__WEBPACK_IMPORTED_MODULE_9__.allowSwipeControlForTransition)(childNodes[prevActiveIndex], childNodes[activeIndex], () => {
          giveUpAnimationEnd();
          isSwipeJustCancelledRef.current = true;
          onStop?.();
          endHeavyAnimation();
          isAnimatingRef.current = false;
        });
      } else {
        (0,_util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_6__.waitForAnimationEnd)(watchedNode, onAnimationEnd, undefined, FALLBACK_ANIMATION_END);
      }
    } else {
      onAnimationEnd();
    }
  }, [activeKey, nextKey, prevActiveKey, hasActiveKeyChanged, isBackwards, name, onStart, onStop, renderCount, shouldRestoreHeight, shouldCleanup, slideClassName, cleanupExceptionKey, shouldDisableAnimation, forceUpdate, withSwipeControl, isBlockingAnimation, cleanupOnlyKey]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!shouldRestoreHeight) {
      return;
    }
    const container = containerRef.current;
    const activeElement = container.querySelector(`.${CLASSES.active}`) || container.querySelector(`.${CLASSES.from}`);
    if (!activeElement) {
      return;
    }
    const {
      clientHeight,
      clientWidth
    } = activeElement || {};
    if (!clientHeight || !clientWidth) {
      return;
    }
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(activeElement, {
        height: 'auto'
      });
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(container, {
        height: `${clientHeight}px`,
        flexBasis: `${clientHeight}px`
      });
    });
  }, [shouldRestoreHeight, children]);
  const asFastList = !renderCount;
  const renders = rendersRef.current;
  const renderKeys = Object.keys(renderCount ? new Array(renderCount).fill(undefined) : renders).map(Number);
  const contents = renderKeys.map(key => {
    const render = renders[key];
    if (!render) {
      return undefined;
    }
    const rendered = typeof render === 'function' ? render(key === activeKey, key === prevActiveKey, key, activeKey) : render;
    return shouldWrap && key !== wrapExceptionKey || asFastList ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      key: key,
      teactOrderKey: key
    }, rendered) : rendered;
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: containerRef,
    id: id,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('Transition', className),
    teactFastList: asFastList
  }, contents);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Transition);
function performSlideOptimized(shouldDisableAnimation, name, isBackwards, cleanup, activeKey, currentKeyRef, isAnimatingRef, container, toSlide, fromSlide, shouldRestoreHeight, isBlockingAnimation, onStart, onStop) {
  if (shouldDisableAnimation) {
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(container, `Transition-${name}`, !isBackwards);
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(container, `Transition-${name}Backwards`, isBackwards);
    if (fromSlide instanceof HTMLElement) {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(fromSlide, CLASSES.active);
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(fromSlide, {
        transition: 'none',
        transform: ''
      });
    }
    if (toSlide instanceof HTMLElement) {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(toSlide, CLASSES.active);
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(toSlide, {
        transition: 'none',
        transform: 'translate3d(0, 0, 0)'
      });
    }
    cleanup();
    return;
  }
  if (name === 'slideOptimizedRtl') {
    isBackwards = !isBackwards;
  }
  isAnimatingRef.current = true;
  const endHeavyAnimation = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.beginHeavyAnimation)(undefined, isBlockingAnimation);
  onStart?.();
  (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(container, `Transition-${name}`, !isBackwards);
  (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(container, `Transition-${name}Backwards`, isBackwards);
  if (fromSlide instanceof HTMLElement) {
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(fromSlide, {
      transition: 'none',
      transform: 'translate3d(0, 0, 0)'
    });
  }
  if (toSlide instanceof HTMLElement) {
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(toSlide, {
      transition: 'none',
      transform: `translate3d(${isBackwards ? '-' : ''}100%, 0, 0)`
    });
  }
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestForcedReflow)(() => {
    if (toSlide instanceof HTMLElement) {
      (0,_util_forceReflow__WEBPACK_IMPORTED_MODULE_7__["default"])(toSlide);
    }
    return () => {
      if (fromSlide instanceof HTMLElement) {
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.removeExtraClass)(fromSlide, CLASSES.active);
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(fromSlide, {
          transition: '',
          transform: `translate3d(${isBackwards ? '' : '-'}100%, 0, 0)`
        });
      }
      if (toSlide instanceof HTMLElement) {
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(toSlide, CLASSES.active);
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(toSlide, {
          transition: '',
          transform: 'translate3d(0, 0, 0)'
        });
      }
    };
  });
  (0,_util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_6__.waitForTransitionEnd)(toSlide, () => {
    const clientHeight = toSlide instanceof HTMLElement ? toSlide.clientHeight : undefined;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
      if (activeKey !== currentKeyRef.current) {
        endHeavyAnimation();
        return;
      }
      if (fromSlide instanceof HTMLElement) {
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(fromSlide, {
          transition: 'none',
          transform: ''
        });
      }
      if (shouldRestoreHeight && clientHeight && toSlide instanceof HTMLElement) {
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(toSlide, {
          height: 'auto'
        });
        (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(container, {
          height: `${clientHeight}px`
        });
      }
      onStop?.();
      endHeavyAnimation();
      isAnimatingRef.current = false;
      cleanup();
    });
  });
}

/***/ }),

/***/ "./src/config.ts":
/*!***********************!*\
  !*** ./src/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACCEPTABLE_USERNAME_ERRORS: () => (/* binding */ ACCEPTABLE_USERNAME_ERRORS),
/* harmony export */   ALL_FOLDER_ID: () => (/* binding */ ALL_FOLDER_ID),
/* harmony export */   ANIMATION_END_DELAY: () => (/* binding */ ANIMATION_END_DELAY),
/* harmony export */   ANIMATION_LEVEL_CUSTOM: () => (/* binding */ ANIMATION_LEVEL_CUSTOM),
/* harmony export */   ANIMATION_LEVEL_DEFAULT: () => (/* binding */ ANIMATION_LEVEL_DEFAULT),
/* harmony export */   ANIMATION_LEVEL_MAX: () => (/* binding */ ANIMATION_LEVEL_MAX),
/* harmony export */   ANIMATION_LEVEL_MED: () => (/* binding */ ANIMATION_LEVEL_MED),
/* harmony export */   ANIMATION_LEVEL_MIN: () => (/* binding */ ANIMATION_LEVEL_MIN),
/* harmony export */   ANIMATION_WAVE_MIN_INTERVAL: () => (/* binding */ ANIMATION_WAVE_MIN_INTERVAL),
/* harmony export */   ANONYMOUS_USER_ID: () => (/* binding */ ANONYMOUS_USER_ID),
/* harmony export */   API_CHAT_TYPES: () => (/* binding */ API_CHAT_TYPES),
/* harmony export */   API_GENERAL_ID_LIMIT: () => (/* binding */ API_GENERAL_ID_LIMIT),
/* harmony export */   API_THROTTLE_RESET_UPDATES: () => (/* binding */ API_THROTTLE_RESET_UPDATES),
/* harmony export */   API_UPDATE_THROTTLE: () => (/* binding */ API_UPDATE_THROTTLE),
/* harmony export */   APP_CODE_NAME: () => (/* binding */ APP_CODE_NAME),
/* harmony export */   APP_CONFIG_REFETCH_INTERVAL: () => (/* binding */ APP_CONFIG_REFETCH_INTERVAL),
/* harmony export */   APP_NAME: () => (/* binding */ APP_NAME),
/* harmony export */   ARCHIVED_FOLDER_ID: () => (/* binding */ ARCHIVED_FOLDER_ID),
/* harmony export */   ARCHIVE_MINIMIZED_HEIGHT: () => (/* binding */ ARCHIVE_MINIMIZED_HEIGHT),
/* harmony export */   ASSET_CACHE_NAME: () => (/* binding */ ASSET_CACHE_NAME),
/* harmony export */   AUTODOWNLOAD_FILESIZE_MB_LIMITS: () => (/* binding */ AUTODOWNLOAD_FILESIZE_MB_LIMITS),
/* harmony export */   BASE_EMOJI_KEYWORD_LANG: () => (/* binding */ BASE_EMOJI_KEYWORD_LANG),
/* harmony export */   BASE_URL: () => (/* binding */ BASE_URL),
/* harmony export */   BETA_CHANGELOG_URL: () => (/* binding */ BETA_CHANGELOG_URL),
/* harmony export */   BIRTHDAY_NUMBERS_SET: () => (/* binding */ BIRTHDAY_NUMBERS_SET),
/* harmony export */   BLOCKED_LIST_LIMIT: () => (/* binding */ BLOCKED_LIST_LIMIT),
/* harmony export */   BOOST_PER_SENT_GIFT: () => (/* binding */ BOOST_PER_SENT_GIFT),
/* harmony export */   BOT_FATHER_USERNAME: () => (/* binding */ BOT_FATHER_USERNAME),
/* harmony export */   BOT_VERIFICATION_PEERS_LIMIT: () => (/* binding */ BOT_VERIFICATION_PEERS_LIMIT),
/* harmony export */   CHANNEL_ID_LENGTH: () => (/* binding */ CHANNEL_ID_LENGTH),
/* harmony export */   CHAT_HEIGHT_PX: () => (/* binding */ CHAT_HEIGHT_PX),
/* harmony export */   CHAT_LIST_LOAD_SLICE: () => (/* binding */ CHAT_LIST_LOAD_SLICE),
/* harmony export */   CHAT_LIST_SLICE: () => (/* binding */ CHAT_LIST_SLICE),
/* harmony export */   CHAT_MEDIA_SLICE: () => (/* binding */ CHAT_MEDIA_SLICE),
/* harmony export */   CHAT_STICKER_SET_ID: () => (/* binding */ CHAT_STICKER_SET_ID),
/* harmony export */   COMPOSER_EMOJI_SIZE_PICKER: () => (/* binding */ COMPOSER_EMOJI_SIZE_PICKER),
/* harmony export */   CONTENT_NOT_SUPPORTED: () => (/* binding */ CONTENT_NOT_SUPPORTED),
/* harmony export */   CONTENT_TYPES_WITH_PREVIEW: () => (/* binding */ CONTENT_TYPES_WITH_PREVIEW),
/* harmony export */   COUNTRIES_WITH_12H_TIME_FORMAT: () => (/* binding */ COUNTRIES_WITH_12H_TIME_FORMAT),
/* harmony export */   CUSTOM_APPENDIX_ATTRIBUTE: () => (/* binding */ CUSTOM_APPENDIX_ATTRIBUTE),
/* harmony export */   CUSTOM_BG_CACHE_NAME: () => (/* binding */ CUSTOM_BG_CACHE_NAME),
/* harmony export */   DARK_THEME_BG_COLOR: () => (/* binding */ DARK_THEME_BG_COLOR),
/* harmony export */   DARK_THEME_PATTERN_COLOR: () => (/* binding */ DARK_THEME_PATTERN_COLOR),
/* harmony export */   DATA_BROADCAST_CHANNEL_NAME: () => (/* binding */ DATA_BROADCAST_CHANNEL_NAME),
/* harmony export */   DEBUG: () => (/* binding */ DEBUG),
/* harmony export */   DEBUG_ALERT_MSG: () => (/* binding */ DEBUG_ALERT_MSG),
/* harmony export */   DEBUG_GRAMJS: () => (/* binding */ DEBUG_GRAMJS),
/* harmony export */   DEBUG_LOG_FILENAME: () => (/* binding */ DEBUG_LOG_FILENAME),
/* harmony export */   DEBUG_MORE: () => (/* binding */ DEBUG_MORE),
/* harmony export */   DEBUG_PAYMENT_SMART_GLOCAL: () => (/* binding */ DEBUG_PAYMENT_SMART_GLOCAL),
/* harmony export */   DEFAULT_GIF_SEARCH_BOT_USERNAME: () => (/* binding */ DEFAULT_GIF_SEARCH_BOT_USERNAME),
/* harmony export */   DEFAULT_LIMITS: () => (/* binding */ DEFAULT_LIMITS),
/* harmony export */   DEFAULT_MAX_MESSAGE_LENGTH: () => (/* binding */ DEFAULT_MAX_MESSAGE_LENGTH),
/* harmony export */   DEFAULT_MESSAGE_TEXT_SIZE_PX: () => (/* binding */ DEFAULT_MESSAGE_TEXT_SIZE_PX),
/* harmony export */   DEFAULT_PATTERN_COLOR: () => (/* binding */ DEFAULT_PATTERN_COLOR),
/* harmony export */   DEFAULT_PLAYBACK_RATE: () => (/* binding */ DEFAULT_PLAYBACK_RATE),
/* harmony export */   DEFAULT_STATUS_ICON_ID: () => (/* binding */ DEFAULT_STATUS_ICON_ID),
/* harmony export */   DEFAULT_TOPIC_ICON_STICKER_ID: () => (/* binding */ DEFAULT_TOPIC_ICON_STICKER_ID),
/* harmony export */   DEFAULT_VOLUME: () => (/* binding */ DEFAULT_VOLUME),
/* harmony export */   DELETED_COMMENTS_CHANNEL_ID: () => (/* binding */ DELETED_COMMENTS_CHANNEL_ID),
/* harmony export */   DOWNLOAD_WORKERS: () => (/* binding */ DOWNLOAD_WORKERS),
/* harmony export */   DRAFT_DEBOUNCE: () => (/* binding */ DRAFT_DEBOUNCE),
/* harmony export */   EDITABLE_INPUT_CSS_SELECTOR: () => (/* binding */ EDITABLE_INPUT_CSS_SELECTOR),
/* harmony export */   EDITABLE_INPUT_ID: () => (/* binding */ EDITABLE_INPUT_ID),
/* harmony export */   EDITABLE_INPUT_MODAL_CSS_SELECTOR: () => (/* binding */ EDITABLE_INPUT_MODAL_CSS_SELECTOR),
/* harmony export */   EDITABLE_INPUT_MODAL_ID: () => (/* binding */ EDITABLE_INPUT_MODAL_ID),
/* harmony export */   EDITABLE_STORY_INPUT_CSS_SELECTOR: () => (/* binding */ EDITABLE_STORY_INPUT_CSS_SELECTOR),
/* harmony export */   EDITABLE_STORY_INPUT_ID: () => (/* binding */ EDITABLE_STORY_INPUT_ID),
/* harmony export */   EFFECT_EMOJIS_SET_ID: () => (/* binding */ EFFECT_EMOJIS_SET_ID),
/* harmony export */   EFFECT_STICKERS_SET_ID: () => (/* binding */ EFFECT_STICKERS_SET_ID),
/* harmony export */   ELECTRON_HOST_URL: () => (/* binding */ ELECTRON_HOST_URL),
/* harmony export */   EMOJI_IMG_REGEX: () => (/* binding */ EMOJI_IMG_REGEX),
/* harmony export */   EMOJI_SIZES: () => (/* binding */ EMOJI_SIZES),
/* harmony export */   EMOJI_SIZE_MODAL: () => (/* binding */ EMOJI_SIZE_MODAL),
/* harmony export */   EMOJI_SIZE_PICKER: () => (/* binding */ EMOJI_SIZE_PICKER),
/* harmony export */   EMOJI_STATUS_LOOP_LIMIT: () => (/* binding */ EMOJI_STATUS_LOOP_LIMIT),
/* harmony export */   ESTABLISH_BROADCAST_CHANNEL_NAME: () => (/* binding */ ESTABLISH_BROADCAST_CHANNEL_NAME),
/* harmony export */   FAQ_URL: () => (/* binding */ FAQ_URL),
/* harmony export */   FAVORITE_SYMBOL_SET_ID: () => (/* binding */ FAVORITE_SYMBOL_SET_ID),
/* harmony export */   FEEDBACK_URL: () => (/* binding */ FEEDBACK_URL),
/* harmony export */   FRAGMENT_ADS_URL: () => (/* binding */ FRAGMENT_ADS_URL),
/* harmony export */   FRAGMENT_PHONE_CODE: () => (/* binding */ FRAGMENT_PHONE_CODE),
/* harmony export */   FRAGMENT_PHONE_LENGTH: () => (/* binding */ FRAGMENT_PHONE_LENGTH),
/* harmony export */   FRESH_AUTH_PERIOD: () => (/* binding */ FRESH_AUTH_PERIOD),
/* harmony export */   GENERAL_REFETCH_INTERVAL: () => (/* binding */ GENERAL_REFETCH_INTERVAL),
/* harmony export */   GENERAL_TOPIC_ID: () => (/* binding */ GENERAL_TOPIC_ID),
/* harmony export */   GIF_MIME_TYPE: () => (/* binding */ GIF_MIME_TYPE),
/* harmony export */   GIVEAWAY_BOOST_PER_PREMIUM: () => (/* binding */ GIVEAWAY_BOOST_PER_PREMIUM),
/* harmony export */   GIVEAWAY_MAX_ADDITIONAL_CHANNELS: () => (/* binding */ GIVEAWAY_MAX_ADDITIONAL_CHANNELS),
/* harmony export */   GIVEAWAY_MAX_ADDITIONAL_COUNTRIES: () => (/* binding */ GIVEAWAY_MAX_ADDITIONAL_COUNTRIES),
/* harmony export */   GIVEAWAY_MAX_ADDITIONAL_USERS: () => (/* binding */ GIVEAWAY_MAX_ADDITIONAL_USERS),
/* harmony export */   GLOBAL_SEARCH_CONTACTS_LIMIT: () => (/* binding */ GLOBAL_SEARCH_CONTACTS_LIMIT),
/* harmony export */   GLOBAL_SEARCH_SLICE: () => (/* binding */ GLOBAL_SEARCH_SLICE),
/* harmony export */   GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT: () => (/* binding */ GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT),
/* harmony export */   GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT: () => (/* binding */ GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT),
/* harmony export */   GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT: () => (/* binding */ GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),
/* harmony export */   GLOBAL_STATE_CACHE_DISABLED: () => (/* binding */ GLOBAL_STATE_CACHE_DISABLED),
/* harmony export */   GLOBAL_STATE_CACHE_KEY: () => (/* binding */ GLOBAL_STATE_CACHE_KEY),
/* harmony export */   GLOBAL_STATE_CACHE_USER_LIST_LIMIT: () => (/* binding */ GLOBAL_STATE_CACHE_USER_LIST_LIMIT),
/* harmony export */   GLOBAL_SUGGESTED_CHANNELS_ID: () => (/* binding */ GLOBAL_SUGGESTED_CHANNELS_ID),
/* harmony export */   GLOBAL_TOPIC_SEARCH_SLICE: () => (/* binding */ GLOBAL_TOPIC_SEARCH_SLICE),
/* harmony export */   GROUP_CALL_DEFAULT_VOLUME: () => (/* binding */ GROUP_CALL_DEFAULT_VOLUME),
/* harmony export */   GROUP_CALL_PARTICIPANTS_LIMIT: () => (/* binding */ GROUP_CALL_PARTICIPANTS_LIMIT),
/* harmony export */   GROUP_CALL_VOLUME_MULTIPLIER: () => (/* binding */ GROUP_CALL_VOLUME_MULTIPLIER),
/* harmony export */   HEART_REACTION: () => (/* binding */ HEART_REACTION),
/* harmony export */   IGNORE_UNHANDLED_ERRORS: () => (/* binding */ IGNORE_UNHANDLED_ERRORS),
/* harmony export */   INACTIVE_MARKER: () => (/* binding */ INACTIVE_MARKER),
/* harmony export */   IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX: () => (/* binding */ IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX),
/* harmony export */   IS_BETA: () => (/* binding */ IS_BETA),
/* harmony export */   IS_MOCKED_CLIENT: () => (/* binding */ IS_MOCKED_CLIENT),
/* harmony export */   IS_PACKAGED_ELECTRON: () => (/* binding */ IS_PACKAGED_ELECTRON),
/* harmony export */   IS_PERF: () => (/* binding */ IS_PERF),
/* harmony export */   IS_SCREEN_LOCKED_CACHE_KEY: () => (/* binding */ IS_SCREEN_LOCKED_CACHE_KEY),
/* harmony export */   IS_TEST: () => (/* binding */ IS_TEST),
/* harmony export */   LANG_CACHE_NAME: () => (/* binding */ LANG_CACHE_NAME),
/* harmony export */   LANG_PACK: () => (/* binding */ LANG_PACK),
/* harmony export */   LANG_PACKS: () => (/* binding */ LANG_PACKS),
/* harmony export */   LEGACY_PASSCODE_CACHE_NAME: () => (/* binding */ LEGACY_PASSCODE_CACHE_NAME),
/* harmony export */   LIGHT_THEME_BG_COLOR: () => (/* binding */ LIGHT_THEME_BG_COLOR),
/* harmony export */   LOCK_SCREEN_ANIMATION_DURATION_MS: () => (/* binding */ LOCK_SCREEN_ANIMATION_DURATION_MS),
/* harmony export */   LOTTIE_STICKER_MIME_TYPE: () => (/* binding */ LOTTIE_STICKER_MIME_TYPE),
/* harmony export */   MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX: () => (/* binding */ MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX),
/* harmony export */   MAX_ACTIVE_PINNED_CHATS: () => (/* binding */ MAX_ACTIVE_PINNED_CHATS),
/* harmony export */   MAX_INT_32: () => (/* binding */ MAX_INT_32),
/* harmony export */   MAX_MEDIA_FILES_FOR_ALBUM: () => (/* binding */ MAX_MEDIA_FILES_FOR_ALBUM),
/* harmony export */   MAX_UNIQUE_REACTIONS: () => (/* binding */ MAX_UNIQUE_REACTIONS),
/* harmony export */   MAX_UPLOAD_FILEPART_SIZE: () => (/* binding */ MAX_UPLOAD_FILEPART_SIZE),
/* harmony export */   MEDIA_CACHE_DISABLED: () => (/* binding */ MEDIA_CACHE_DISABLED),
/* harmony export */   MEDIA_CACHE_MAX_BYTES: () => (/* binding */ MEDIA_CACHE_MAX_BYTES),
/* harmony export */   MEDIA_CACHE_NAME: () => (/* binding */ MEDIA_CACHE_NAME),
/* harmony export */   MEDIA_CACHE_NAME_AVATARS: () => (/* binding */ MEDIA_CACHE_NAME_AVATARS),
/* harmony export */   MEDIA_PROGRESSIVE_CACHE_DISABLED: () => (/* binding */ MEDIA_PROGRESSIVE_CACHE_DISABLED),
/* harmony export */   MEDIA_PROGRESSIVE_CACHE_NAME: () => (/* binding */ MEDIA_PROGRESSIVE_CACHE_NAME),
/* harmony export */   MEMBERS_LOAD_SLICE: () => (/* binding */ MEMBERS_LOAD_SLICE),
/* harmony export */   MEMBERS_SLICE: () => (/* binding */ MEMBERS_SLICE),
/* harmony export */   MENTION_UNREAD_SLICE: () => (/* binding */ MENTION_UNREAD_SLICE),
/* harmony export */   MENU_TRANSITION_DURATION: () => (/* binding */ MENU_TRANSITION_DURATION),
/* harmony export */   MESSAGE_CONTENT_CLASS_NAME: () => (/* binding */ MESSAGE_CONTENT_CLASS_NAME),
/* harmony export */   MESSAGE_CONTENT_SELECTOR: () => (/* binding */ MESSAGE_CONTENT_SELECTOR),
/* harmony export */   MESSAGE_ID_REQUIRED_ERROR: () => (/* binding */ MESSAGE_ID_REQUIRED_ERROR),
/* harmony export */   MESSAGE_LIST_SLICE: () => (/* binding */ MESSAGE_LIST_SLICE),
/* harmony export */   MESSAGE_LIST_VIEWPORT_LIMIT: () => (/* binding */ MESSAGE_LIST_VIEWPORT_LIMIT),
/* harmony export */   MESSAGE_SEARCH_SLICE: () => (/* binding */ MESSAGE_SEARCH_SLICE),
/* harmony export */   MINI_APP_TOS_URL: () => (/* binding */ MINI_APP_TOS_URL),
/* harmony export */   MIN_PASSWORD_LENGTH: () => (/* binding */ MIN_PASSWORD_LENGTH),
/* harmony export */   MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN: () => (/* binding */ MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN),
/* harmony export */   MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN: () => (/* binding */ MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN),
/* harmony export */   MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT: () => (/* binding */ MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT),
/* harmony export */   MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH: () => (/* binding */ MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH),
/* harmony export */   MOBILE_SCREEN_MAX_WIDTH: () => (/* binding */ MOBILE_SCREEN_MAX_WIDTH),
/* harmony export */   MULTITAB_LOCALSTORAGE_KEY: () => (/* binding */ MULTITAB_LOCALSTORAGE_KEY),
/* harmony export */   ONE_TIME_MEDIA_TTL_SECONDS: () => (/* binding */ ONE_TIME_MEDIA_TTL_SECONDS),
/* harmony export */   PAGE_TITLE: () => (/* binding */ PAGE_TITLE),
/* harmony export */   PEER_COLOR_BG_ACTIVE_OPACITY: () => (/* binding */ PEER_COLOR_BG_ACTIVE_OPACITY),
/* harmony export */   PEER_COLOR_BG_OPACITY: () => (/* binding */ PEER_COLOR_BG_OPACITY),
/* harmony export */   PEER_COLOR_GRADIENT_STEP: () => (/* binding */ PEER_COLOR_GRADIENT_STEP),
/* harmony export */   PEER_PICKER_ITEM_HEIGHT_PX: () => (/* binding */ PEER_PICKER_ITEM_HEIGHT_PX),
/* harmony export */   PINNED_MESSAGES_LIMIT: () => (/* binding */ PINNED_MESSAGES_LIMIT),
/* harmony export */   PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION: () => (/* binding */ PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION),
/* harmony export */   POPULAR_SYMBOL_SET_ID: () => (/* binding */ POPULAR_SYMBOL_SET_ID),
/* harmony export */   PREMIUM_BOTTOM_VIDEOS: () => (/* binding */ PREMIUM_BOTTOM_VIDEOS),
/* harmony export */   PREMIUM_FEATURE_SECTIONS: () => (/* binding */ PREMIUM_FEATURE_SECTIONS),
/* harmony export */   PREMIUM_LIMITS_ORDER: () => (/* binding */ PREMIUM_LIMITS_ORDER),
/* harmony export */   PREVIEW_AVATAR_COUNT: () => (/* binding */ PREVIEW_AVATAR_COUNT),
/* harmony export */   PRIVACY_URL: () => (/* binding */ PRIVACY_URL),
/* harmony export */   PRODUCTION_HOSTNAME: () => (/* binding */ PRODUCTION_HOSTNAME),
/* harmony export */   PRODUCTION_URL: () => (/* binding */ PRODUCTION_URL),
/* harmony export */   PROFILE_SENSITIVE_AREA: () => (/* binding */ PROFILE_SENSITIVE_AREA),
/* harmony export */   PURCHASE_USERNAME: () => (/* binding */ PURCHASE_USERNAME),
/* harmony export */   REACTION_LIST_LIMIT: () => (/* binding */ REACTION_LIST_LIMIT),
/* harmony export */   REACTION_UNREAD_SLICE: () => (/* binding */ REACTION_UNREAD_SLICE),
/* harmony export */   RECENT_REACTIONS_LIMIT: () => (/* binding */ RECENT_REACTIONS_LIMIT),
/* harmony export */   RECENT_STATUS_LIMIT: () => (/* binding */ RECENT_STATUS_LIMIT),
/* harmony export */   RECENT_STICKERS_LIMIT: () => (/* binding */ RECENT_STICKERS_LIMIT),
/* harmony export */   RECENT_SYMBOL_SET_ID: () => (/* binding */ RECENT_SYMBOL_SET_ID),
/* harmony export */   RELEASE_DATETIME: () => (/* binding */ RELEASE_DATETIME),
/* harmony export */   REPLIES_USER_ID: () => (/* binding */ REPLIES_USER_ID),
/* harmony export */   RESIZE_HANDLE_CLASS_NAME: () => (/* binding */ RESIZE_HANDLE_CLASS_NAME),
/* harmony export */   RESIZE_HANDLE_SELECTOR: () => (/* binding */ RESIZE_HANDLE_SELECTOR),
/* harmony export */   RESTRICTED_EMOJI_SET: () => (/* binding */ RESTRICTED_EMOJI_SET),
/* harmony export */   RESTRICTED_EMOJI_SET_ID: () => (/* binding */ RESTRICTED_EMOJI_SET_ID),
/* harmony export */   RE_LINK_TEMPLATE: () => (/* binding */ RE_LINK_TEMPLATE),
/* harmony export */   RE_MENTION_TEMPLATE: () => (/* binding */ RE_MENTION_TEMPLATE),
/* harmony export */   RE_TELEGRAM_LINK: () => (/* binding */ RE_TELEGRAM_LINK),
/* harmony export */   RE_TG_LINK: () => (/* binding */ RE_TG_LINK),
/* harmony export */   RE_TME_LINK: () => (/* binding */ RE_TME_LINK),
/* harmony export */   SAVED_FOLDER_ID: () => (/* binding */ SAVED_FOLDER_ID),
/* harmony export */   SCHEDULED_WHEN_ONLINE: () => (/* binding */ SCHEDULED_WHEN_ONLINE),
/* harmony export */   SCROLL_MAX_DISTANCE: () => (/* binding */ SCROLL_MAX_DISTANCE),
/* harmony export */   SCROLL_MAX_DURATION: () => (/* binding */ SCROLL_MAX_DURATION),
/* harmony export */   SCROLL_MIN_DURATION: () => (/* binding */ SCROLL_MIN_DURATION),
/* harmony export */   SCROLL_SHORT_TRANSITION_MAX_DISTANCE: () => (/* binding */ SCROLL_SHORT_TRANSITION_MAX_DISTANCE),
/* harmony export */   SEND_MESSAGE_ACTION_INTERVAL: () => (/* binding */ SEND_MESSAGE_ACTION_INTERVAL),
/* harmony export */   SERVICE_NOTIFICATIONS_USER_ID: () => (/* binding */ SERVICE_NOTIFICATIONS_USER_ID),
/* harmony export */   SESSION_USER_KEY: () => (/* binding */ SESSION_USER_KEY),
/* harmony export */   SHARED_MEDIA_SLICE: () => (/* binding */ SHARED_MEDIA_SLICE),
/* harmony export */   SLIDE_TRANSITION_DURATION: () => (/* binding */ SLIDE_TRANSITION_DURATION),
/* harmony export */   SNAP_EFFECT_CONTAINER_ID: () => (/* binding */ SNAP_EFFECT_CONTAINER_ID),
/* harmony export */   SNAP_EFFECT_ID: () => (/* binding */ SNAP_EFFECT_ID),
/* harmony export */   SPONSORED_MESSAGE_CACHE_MS: () => (/* binding */ SPONSORED_MESSAGE_CACHE_MS),
/* harmony export */   STARS_CURRENCY_CODE: () => (/* binding */ STARS_CURRENCY_CODE),
/* harmony export */   STARS_ICON_PLACEHOLDER: () => (/* binding */ STARS_ICON_PLACEHOLDER),
/* harmony export */   STATISTICS_PUBLIC_FORWARDS_LIMIT: () => (/* binding */ STATISTICS_PUBLIC_FORWARDS_LIMIT),
/* harmony export */   STICKER_PICKER_MAX_SHARED_COVERS: () => (/* binding */ STICKER_PICKER_MAX_SHARED_COVERS),
/* harmony export */   STICKER_SIZE_AUTH: () => (/* binding */ STICKER_SIZE_AUTH),
/* harmony export */   STICKER_SIZE_AUTH_MOBILE: () => (/* binding */ STICKER_SIZE_AUTH_MOBILE),
/* harmony export */   STICKER_SIZE_DISCUSSION_GROUPS: () => (/* binding */ STICKER_SIZE_DISCUSSION_GROUPS),
/* harmony export */   STICKER_SIZE_FOLDER_SETTINGS: () => (/* binding */ STICKER_SIZE_FOLDER_SETTINGS),
/* harmony export */   STICKER_SIZE_GENERAL_SETTINGS: () => (/* binding */ STICKER_SIZE_GENERAL_SETTINGS),
/* harmony export */   STICKER_SIZE_INLINE_BOT_RESULT: () => (/* binding */ STICKER_SIZE_INLINE_BOT_RESULT),
/* harmony export */   STICKER_SIZE_INLINE_DESKTOP_FACTOR: () => (/* binding */ STICKER_SIZE_INLINE_DESKTOP_FACTOR),
/* harmony export */   STICKER_SIZE_INLINE_MOBILE_FACTOR: () => (/* binding */ STICKER_SIZE_INLINE_MOBILE_FACTOR),
/* harmony export */   STICKER_SIZE_INVITES: () => (/* binding */ STICKER_SIZE_INVITES),
/* harmony export */   STICKER_SIZE_JOIN_REQUESTS: () => (/* binding */ STICKER_SIZE_JOIN_REQUESTS),
/* harmony export */   STICKER_SIZE_MODAL: () => (/* binding */ STICKER_SIZE_MODAL),
/* harmony export */   STICKER_SIZE_PASSCODE: () => (/* binding */ STICKER_SIZE_PASSCODE),
/* harmony export */   STICKER_SIZE_PICKER: () => (/* binding */ STICKER_SIZE_PICKER),
/* harmony export */   STICKER_SIZE_PICKER_HEADER: () => (/* binding */ STICKER_SIZE_PICKER_HEADER),
/* harmony export */   STICKER_SIZE_SEARCH: () => (/* binding */ STICKER_SIZE_SEARCH),
/* harmony export */   STICKER_SIZE_TWO_FA: () => (/* binding */ STICKER_SIZE_TWO_FA),
/* harmony export */   STORY_EXPIRE_PERIOD: () => (/* binding */ STORY_EXPIRE_PERIOD),
/* harmony export */   STORY_LIST_LIMIT: () => (/* binding */ STORY_LIST_LIMIT),
/* harmony export */   STORY_MIN_REACTIONS_SORT: () => (/* binding */ STORY_MIN_REACTIONS_SORT),
/* harmony export */   STORY_VIEWERS_EXPIRE_PERIOD: () => (/* binding */ STORY_VIEWERS_EXPIRE_PERIOD),
/* harmony export */   STORY_VIEWS_MIN_CONTACTS_FILTER: () => (/* binding */ STORY_VIEWS_MIN_CONTACTS_FILTER),
/* harmony export */   STORY_VIEWS_MIN_SEARCH: () => (/* binding */ STORY_VIEWS_MIN_SEARCH),
/* harmony export */   STRICTERDOM_ENABLED: () => (/* binding */ STRICTERDOM_ENABLED),
/* harmony export */   SUPPORTED_AUDIO_CONTENT_TYPES: () => (/* binding */ SUPPORTED_AUDIO_CONTENT_TYPES),
/* harmony export */   SUPPORTED_PHOTO_CONTENT_TYPES: () => (/* binding */ SUPPORTED_PHOTO_CONTENT_TYPES),
/* harmony export */   SUPPORTED_TRANSLATION_LANGUAGES: () => (/* binding */ SUPPORTED_TRANSLATION_LANGUAGES),
/* harmony export */   SUPPORTED_VIDEO_CONTENT_TYPES: () => (/* binding */ SUPPORTED_VIDEO_CONTENT_TYPES),
/* harmony export */   SVG_NAMESPACE: () => (/* binding */ SVG_NAMESPACE),
/* harmony export */   TME_LINK_PREFIX: () => (/* binding */ TME_LINK_PREFIX),
/* harmony export */   TME_WEB_DOMAINS: () => (/* binding */ TME_WEB_DOMAINS),
/* harmony export */   TMP_CHAT_ID: () => (/* binding */ TMP_CHAT_ID),
/* harmony export */   TOPICS_SLICE: () => (/* binding */ TOPICS_SLICE),
/* harmony export */   TOPICS_SLICE_SECOND_LOAD: () => (/* binding */ TOPICS_SLICE_SECOND_LOAD),
/* harmony export */   TOPIC_HEIGHT_PX: () => (/* binding */ TOPIC_HEIGHT_PX),
/* harmony export */   TOPIC_LIST_SENSITIVE_AREA: () => (/* binding */ TOPIC_LIST_SENSITIVE_AREA),
/* harmony export */   TOP_CHAT_MESSAGES_PRELOAD_LIMIT: () => (/* binding */ TOP_CHAT_MESSAGES_PRELOAD_LIMIT),
/* harmony export */   TOP_REACTIONS_LIMIT: () => (/* binding */ TOP_REACTIONS_LIMIT),
/* harmony export */   TOP_SYMBOL_SET_ID: () => (/* binding */ TOP_SYMBOL_SET_ID),
/* harmony export */   UPLOAD_WORKERS: () => (/* binding */ UPLOAD_WORKERS),
/* harmony export */   USERNAME_PURCHASE_ERROR: () => (/* binding */ USERNAME_PURCHASE_ERROR),
/* harmony export */   VERIFICATION_CODES_USER_ID: () => (/* binding */ VERIFICATION_CODES_USER_ID),
/* harmony export */   VIDEO_STICKER_MIME_TYPE: () => (/* binding */ VIDEO_STICKER_MIME_TYPE),
/* harmony export */   VIDEO_WEBM_TYPE: () => (/* binding */ VIDEO_WEBM_TYPE),
/* harmony export */   WEB_APP_PLATFORM: () => (/* binding */ WEB_APP_PLATFORM),
/* harmony export */   WEB_VERSION_BASE: () => (/* binding */ WEB_VERSION_BASE)
/* harmony export */ });
const APP_CODE_NAME = 'A';
const APP_NAME =  false || `Telegram Web ${APP_CODE_NAME}`;
const RELEASE_DATETIME = 1739925977129;
const PRODUCTION_HOSTNAME = 'web.telegram.org';
const PRODUCTION_URL = 'https://web.telegram.org/a';
const WEB_VERSION_BASE = 'https://web.telegram.org/'; // Used to redirect to other versions
const BASE_URL = "https://web.telegram.org/a/";
const IS_MOCKED_CLIENT = "1" === '1';
const IS_TEST = "test" === 'test';
const IS_PERF = "test" === 'perf';
const IS_BETA = "test" === 'staging';
const IS_PACKAGED_ELECTRON = false;
const DEBUG = "test" !== 'production';
const DEBUG_MORE = false;
const DEBUG_LOG_FILENAME = 'tt-log.json';
const STRICTERDOM_ENABLED = DEBUG;
const BOT_VERIFICATION_PEERS_LIMIT = 20;
const BETA_CHANGELOG_URL = 'https://telegra.ph/WebA-Beta-03-20';
const ELECTRON_HOST_URL = "https://telegram-a-host";
const DEBUG_ALERT_MSG = 'Shoot!\nSomething went wrong, please see the error details in Dev Tools Console.';
const DEBUG_GRAMJS = false;
const PAGE_TITLE = "Telegram Beta";
const INACTIVE_MARKER = '[Inactive]';
const DEBUG_PAYMENT_SMART_GLOCAL = false;
const SESSION_USER_KEY = 'user_auth';
const LEGACY_PASSCODE_CACHE_NAME = 'tt-passcode';
const GLOBAL_STATE_CACHE_DISABLED = false;
const GLOBAL_STATE_CACHE_KEY = 'tt-global-state';
const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 500;
const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 200;
const GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT = 10;
const GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT = 150;
const IS_SCREEN_LOCKED_CACHE_KEY = 'tt-is-screen-locked';
const MEDIA_CACHE_DISABLED = false;
const MEDIA_CACHE_NAME = 'tt-media';
const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';
const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;
const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';
const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB
const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';
const LANG_CACHE_NAME = 'tt-lang-packs-v49';
const ASSET_CACHE_NAME = 'tt-assets';
const AUTODOWNLOAD_FILESIZE_MB_LIMITS = [1, 5, 10, 50, 100, 500];
const DATA_BROADCAST_CHANNEL_NAME = 'tt-global';
const ESTABLISH_BROADCAST_CHANNEL_NAME = 'tt-establish';
const MULTITAB_LOCALSTORAGE_KEY = 'tt-multitab';
const DOWNLOAD_WORKERS = 16;
const UPLOAD_WORKERS = 16;
const isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;
const MIN_PASSWORD_LENGTH = 1;
const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;
const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;
const ARCHIVE_MINIMIZED_HEIGHT = 36;
const CHAT_HEIGHT_PX = 72;
const TOPIC_HEIGHT_PX = 65;
const PEER_PICKER_ITEM_HEIGHT_PX = 56;
const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;
const CHAT_LIST_LOAD_SLICE = 100;
const SHARED_MEDIA_SLICE = 42;
const CHAT_MEDIA_SLICE = 42;
const MESSAGE_SEARCH_SLICE = 42;
const GLOBAL_SEARCH_SLICE = 20;
const GLOBAL_TOPIC_SEARCH_SLICE = 5;
const GLOBAL_SEARCH_CONTACTS_LIMIT = 20;
const MEMBERS_SLICE = 30;
const MEMBERS_LOAD_SLICE = 200;
const PINNED_MESSAGES_LIMIT = 50;
const BLOCKED_LIST_LIMIT = 100;
const PROFILE_SENSITIVE_AREA = 500;
const TOPIC_LIST_SENSITIVE_AREA = 600;
const GROUP_CALL_PARTICIPANTS_LIMIT = 100;
const STORY_LIST_LIMIT = 100;
const API_GENERAL_ID_LIMIT = 100;
const STATISTICS_PUBLIC_FORWARDS_LIMIT = 50;
const STORY_VIEWS_MIN_SEARCH = 15;
const STORY_MIN_REACTIONS_SORT = 10;
const STORY_VIEWS_MIN_CONTACTS_FILTER = 20;
const GLOBAL_SUGGESTED_CHANNELS_ID = 'global';

// As in Telegram for Android
// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7799
const TOP_REACTIONS_LIMIT = 100;

// As in Telegram for Android
// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7781
const RECENT_REACTIONS_LIMIT = 50;
const REACTION_LIST_LIMIT = 100;
const REACTION_UNREAD_SLICE = 100;
const MENTION_UNREAD_SLICE = 100;
const TOPICS_SLICE = 20;
const TOPICS_SLICE_SECOND_LOAD = 500;
const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;
const SPONSORED_MESSAGE_CACHE_MS = 300000; // 5 min

const DEFAULT_VOLUME = 1;
const DEFAULT_PLAYBACK_RATE = 1;
const PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION = 20 * 60; // 20 min

const ANIMATION_LEVEL_CUSTOM = -1;
const ANIMATION_LEVEL_MIN = 0;
const ANIMATION_LEVEL_MED = 1;
const ANIMATION_LEVEL_MAX = 2;
const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;
const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;
const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;
const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;
const PREVIEW_AVATAR_COUNT = 3;
const DRAFT_DEBOUNCE = 10000; // 10s
const SEND_MESSAGE_ACTION_INTERVAL = 3000; // 3s
// 10000s from https://corefork.telegram.org/api/url-authorization#automatic-authorization
const APP_CONFIG_REFETCH_INTERVAL = 10000 * 1000;
const GENERAL_REFETCH_INTERVAL = 60 * 60 * 1000; // 1h

const EDITABLE_INPUT_ID = 'editable-message-text';
const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';
const EDITABLE_STORY_INPUT_ID = 'editable-story-input-text';
// eslint-disable-next-line max-len
const EDITABLE_INPUT_CSS_SELECTOR = `.messages-layout .Transition_slide-active #${EDITABLE_INPUT_ID}, .messages-layout .Transition > .Transition_slide-to #${EDITABLE_INPUT_ID}`;
const EDITABLE_INPUT_MODAL_CSS_SELECTOR = `#${EDITABLE_INPUT_MODAL_ID}`;
const EDITABLE_STORY_INPUT_CSS_SELECTOR = `#${EDITABLE_STORY_INPUT_ID}`;
const CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';
const MESSAGE_CONTENT_CLASS_NAME = 'message-content';
const MESSAGE_CONTENT_SELECTOR = '.message-content';
const RESIZE_HANDLE_CLASS_NAME = 'resizeHandle';
const RESIZE_HANDLE_SELECTOR = `.${RESIZE_HANDLE_CLASS_NAME}`;
const SNAP_EFFECT_CONTAINER_ID = 'snap-effect-container';
const SNAP_EFFECT_ID = 'snap-effect';
const STARS_ICON_PLACEHOLDER = '⭐';
const STARS_CURRENCY_CODE = 'XTR';
const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px
const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px
const MOBILE_SCREEN_MAX_WIDTH = 600; // px
const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px
const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px

const MAX_INT_32 = 2 ** 31 - 1;
const TMP_CHAT_ID = '0';
const ANIMATION_END_DELAY = 100;
const ANIMATION_WAVE_MIN_INTERVAL = 200;
const SCROLL_MIN_DURATION = 300;
const SCROLL_MAX_DURATION = 600;
const SCROLL_MAX_DISTANCE = 800;
const SCROLL_SHORT_TRANSITION_MAX_DISTANCE = 300; // px

// Average duration of message sending animation
const API_UPDATE_THROTTLE = Math.round((SCROLL_MIN_DURATION + SCROLL_MAX_DURATION) / 2);
const API_THROTTLE_RESET_UPDATES = new Set(['newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory']);
const LOCK_SCREEN_ANIMATION_DURATION_MS = 200;
const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;
const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;
const STICKER_SIZE_AUTH = 160;
const STICKER_SIZE_AUTH_MOBILE = 120;
const STICKER_SIZE_PICKER = 72;
const EMOJI_SIZE_PICKER = 36;
const COMPOSER_EMOJI_SIZE_PICKER = 32;
const STICKER_SIZE_GENERAL_SETTINGS = 48;
const STICKER_SIZE_PICKER_HEADER = 32;
const STICKER_PICKER_MAX_SHARED_COVERS = 20;
const STICKER_SIZE_SEARCH = 72;
const STICKER_SIZE_MODAL = 72;
const EMOJI_SIZE_MODAL = 36;
const STICKER_SIZE_TWO_FA = 160;
const STICKER_SIZE_PASSCODE = 160;
const STICKER_SIZE_DISCUSSION_GROUPS = 140;
const STICKER_SIZE_FOLDER_SETTINGS = 100;
const STICKER_SIZE_INLINE_BOT_RESULT = 100;
const STICKER_SIZE_JOIN_REQUESTS = 140;
const STICKER_SIZE_INVITES = 140;
const RECENT_STICKERS_LIMIT = 20;
const RECENT_STATUS_LIMIT = 20;
const EMOJI_STATUS_LOOP_LIMIT = 2;
const EMOJI_SIZES = 7;
const TOP_SYMBOL_SET_ID = 'top';
const POPULAR_SYMBOL_SET_ID = 'popular';
const RECENT_SYMBOL_SET_ID = 'recent';
const FAVORITE_SYMBOL_SET_ID = 'favorite';
const EFFECT_STICKERS_SET_ID = 'effectStickers';
const EFFECT_EMOJIS_SET_ID = 'effectEmojis';
const CHAT_STICKER_SET_ID = 'chatStickers';
const DEFAULT_TOPIC_ICON_STICKER_ID = 'topic-default-icon';
const DEFAULT_STATUS_ICON_ID = 'status-default-icon';
const EMOJI_IMG_REGEX = /<img[^>]+alt="([^"]+)"(?![^>]*data-document-id)[^>]*>/gm;
const BASE_EMOJI_KEYWORD_LANG = 'en';
const MENU_TRANSITION_DURATION = 200;
const SLIDE_TRANSITION_DURATION = 450;
const BIRTHDAY_NUMBERS_SET = 'FestiveFontEmoji';
const RESTRICTED_EMOJI_SET = 'RestrictedEmoji';
const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
const VIDEO_WEBM_TYPE = 'video/webm';
const GIF_MIME_TYPE = 'image/gif';
const LOTTIE_STICKER_MIME_TYPE = 'application/x-tgsticker';
const VIDEO_STICKER_MIME_TYPE = VIDEO_WEBM_TYPE;
const SUPPORTED_PHOTO_CONTENT_TYPES = new Set(['image/png', 'image/jpeg', GIF_MIME_TYPE]);
const SUPPORTED_VIDEO_CONTENT_TYPES = new Set(['video/mp4', 'video/quicktime']);
const SUPPORTED_AUDIO_CONTENT_TYPES = new Set(['audio/mp3', 'audio/ogg', 'audio/wav', 'audio/mpeg', 'audio/flac', 'audio/aac', 'audio/m4a', 'audio/mp4', 'audio/x-m4a']);
const CONTENT_TYPES_WITH_PREVIEW = new Set([...SUPPORTED_PHOTO_CONTENT_TYPES, ...SUPPORTED_VIDEO_CONTENT_TYPES]);
const CONTENT_NOT_SUPPORTED = 'The message is not supported on this version of Telegram.';

// Taken from https://github.com/telegramdesktop/tdesktop/blob/41d9a9fcbd0c809c60ddbd9350791b1436aff7d9/Telegram/SourceFiles/ui/boxes/choose_language_box.cpp#L28
const SUPPORTED_TRANSLATION_LANGUAGES = [
// Official
'en', 'ar', 'be', 'ca', 'zh', 'nl', 'fr', 'de', 'id', 'it', 'ja', 'ko', 'pl', 'pt', 'ru', 'es', 'uk',
// Unofficial
'af', 'sq', 'am', 'hy', 'az', 'eu', 'bn', 'bs', 'bg', 'ceb', 'zh-CN', 'zh-TW', 'co', 'hr', 'cs', 'da', 'eo', 'et', 'fi', 'fy', 'gl', 'ka', 'el', 'gu', 'ht', 'ha', 'haw', 'he', 'iw', 'hi', 'hmn', 'hu', 'is', 'ig', 'ga', 'jv', 'kn', 'kk', 'km', 'rw', 'ku', 'ky', 'lo', 'la', 'lv', 'lt', 'lb', 'mk', 'mg', 'ms', 'ml', 'mt', 'mi', 'mr', 'mn', 'my', 'ne', 'no', 'ny', 'or', 'ps', 'fa', 'pa', 'ro', 'sm', 'gd', 'sr', 'st', 'sn', 'sd', 'si', 'sk', 'sl', 'so', 'su', 'sw', 'sv', 'tl', 'tg', 'ta', 'tt', 'te', 'th', 'tr', 'tk', 'ur', 'ug', 'uz', 'vi', 'cy', 'xh', 'yi', 'yo', 'zu'];

// eslint-disable-next-line max-len
const RE_LINK_TEMPLATE = '((ftp|https?):\\/\\/)?((www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z][-a-zA-Z0-9]{1,62})\\b([-a-zA-Z0-9()@:%_+.,~#?&/=]*)';
const RE_MENTION_TEMPLATE = '(@[\\w\\d_-]+)';
const RE_TG_LINK = /^tg:(\/\/)?/i;
const RE_TME_LINK = /^(https?:\/\/)?([-a-zA-Z0-9@:%_+~#=]{1,32}\.)?t\.me/i;
const RE_TELEGRAM_LINK = /^(https?:\/\/)?telegram\.org\//i;
const TME_LINK_PREFIX = 'https://t.me/';
const BOT_FATHER_USERNAME = 'botfather';
const USERNAME_PURCHASE_ERROR = 'USERNAME_PURCHASE_AVAILABLE';
const MESSAGE_ID_REQUIRED_ERROR = 'MESSAGE_ID_REQUIRED';
const PURCHASE_USERNAME = 'auction';
const ACCEPTABLE_USERNAME_ERRORS = new Set([USERNAME_PURCHASE_ERROR, 'USERNAME_INVALID']);
const TME_WEB_DOMAINS = new Set(['t.me', 'web.t.me', 'a.t.me', 'k.t.me', 'z.t.me']);
const WEB_APP_PLATFORM = 'weba';
const LANG_PACK = 'weba';

// eslint-disable-next-line max-len
const COUNTRIES_WITH_12H_TIME_FORMAT = new Set(['AU', 'BD', 'CA', 'CO', 'EG', 'HN', 'IE', 'IN', 'JO', 'MX', 'MY', 'NI', 'NZ', 'PH', 'PK', 'SA', 'SV', 'US']);
const API_CHAT_TYPES = ['bots', 'channels', 'chats', 'users'];
const HEART_REACTION = {
  type: 'emoji',
  emoticon: '❤'
};

// MTProto constants
const SERVICE_NOTIFICATIONS_USER_ID = '777000';
const REPLIES_USER_ID = '1271266957'; // TODO For Test connection ID must be equal to 708513
const VERIFICATION_CODES_USER_ID = '489000';
const ANONYMOUS_USER_ID = '2666000';
const RESTRICTED_EMOJI_SET_ID = '7173162320003080';
const CHANNEL_ID_LENGTH = 14; // 14 symbols, based on TDLib's `ZERO_CHANNEL_ID = -1000000000000`
const DEFAULT_GIF_SEARCH_BOT_USERNAME = 'gif';
const ALL_FOLDER_ID = 0;
const ARCHIVED_FOLDER_ID = 1;
const SAVED_FOLDER_ID = -1;
const DELETED_COMMENTS_CHANNEL_ID = '-1000000000777';
const MAX_MEDIA_FILES_FOR_ALBUM = 10;
const MAX_ACTIVE_PINNED_CHATS = 5;
const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;
const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'];
const FEEDBACK_URL = 'https://bugs.telegram.org/?tag_ids=41&sort=time';
const FAQ_URL = 'https://telegram.org/faq';
const PRIVACY_URL = 'https://telegram.org/privacy';
const MINI_APP_TOS_URL = 'https://telegram.org/tos/mini-apps';
const FRAGMENT_ADS_URL = 'https://fragment.com/ads';
const GENERAL_TOPIC_ID = 1;
const STORY_EXPIRE_PERIOD = 86400; // 1 day
const STORY_VIEWERS_EXPIRE_PERIOD = 86400; // 1 day
const FRESH_AUTH_PERIOD = 86400; // 1 day
const GIVEAWAY_BOOST_PER_PREMIUM = 4;
const GIVEAWAY_MAX_ADDITIONAL_CHANNELS = 10;
const GIVEAWAY_MAX_ADDITIONAL_USERS = 10;
const GIVEAWAY_MAX_ADDITIONAL_COUNTRIES = 10;
const BOOST_PER_SENT_GIFT = 3;
const FRAGMENT_PHONE_CODE = '888';
const FRAGMENT_PHONE_LENGTH = 11;
const LIGHT_THEME_BG_COLOR = '#99BA92';
const DARK_THEME_BG_COLOR = '#0F0F0F';
const DEFAULT_PATTERN_COLOR = '#4A8E3A8C';
const DARK_THEME_PATTERN_COLOR = '#0A0A0A8C';
const PEER_COLOR_BG_OPACITY = '1a';
const PEER_COLOR_BG_ACTIVE_OPACITY = '2b';
const PEER_COLOR_GRADIENT_STEP = 5; // px
const MAX_UPLOAD_FILEPART_SIZE = 524288;
const MAX_UNIQUE_REACTIONS = 11;
const IGNORE_UNHANDLED_ERRORS = new Set(['USER_CANCELED']);

// Group calls
const GROUP_CALL_VOLUME_MULTIPLIER = 100;
const GROUP_CALL_DEFAULT_VOLUME = 100 * GROUP_CALL_VOLUME_MULTIPLIER;
const DEFAULT_LIMITS = {
  uploadMaxFileparts: [4000, 8000],
  stickersFaved: [5, 10],
  savedGifs: [200, 400],
  dialogFiltersChats: [100, 200],
  dialogFilters: [10, 20],
  dialogFolderPinned: [5, 10],
  captionLength: [1024, 4096],
  channels: [500, 1000],
  channelsPublic: [10, 20],
  aboutLength: [70, 140],
  chatlistInvites: [3, 100],
  chatlistJoined: [2, 20],
  recommendedChannels: [10, 100],
  savedDialogsPinned: [5, 100]
};
const DEFAULT_MAX_MESSAGE_LENGTH = 4096;
const ONE_TIME_MEDIA_TTL_SECONDS = 2147483647;

// Premium
const PREMIUM_FEATURE_SECTIONS = ['stories', 'double_limits', 'more_upload', 'faster_download', 'voice_to_text', 'no_ads', 'infinite_reactions', 'premium_stickers', 'animated_emoji', 'advanced_chat_management', 'profile_badge', 'animated_userpics', 'emoji_status', 'translations', 'saved_tags', 'last_seen', 'message_privacy', 'effects'];
const PREMIUM_BOTTOM_VIDEOS = ['faster_download', 'voice_to_text', 'advanced_chat_management', 'infinite_reactions', 'profile_badge', 'animated_userpics', 'emoji_status', 'translations', 'saved_tags', 'last_seen', 'message_privacy', 'effects'];
const PREMIUM_LIMITS_ORDER = ['channels', 'dialogFolderPinned', 'channelsPublic', 'savedGifs', 'stickersFaved', 'aboutLength', 'captionLength', 'dialogFilters', 'dialogFiltersChats', 'recommendedChannels'];

/***/ }),

/***/ "./src/global/actions/apiUpdaters/initial.ts":
/*!***************************************************!*\
  !*** ./src/global/actions/apiUpdaters/initial.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_getReadableErrorText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/getReadableErrorText */ "./src/util/getReadableErrorText.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _util_websync__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/websync */ "./src/util/websync.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");













(0,_index__WEBPACK_IMPORTED_MODULE_9__.addActionHandler)('apiUpdate', (global, actions, update) => {
  switch (update['@type']) {
    case 'updateApiReady':
      onUpdateApiReady(global);
      break;
    case 'updateAuthorizationState':
      onUpdateAuthorizationState(global, update);
      break;
    case 'updateAuthorizationError':
      onUpdateAuthorizationError(global, update);
      break;
    case 'updateWebAuthTokenFailed':
      onUpdateWebAuthTokenFailed(global);
      break;
    case 'updateConnectionState':
      onUpdateConnectionState(global, actions, update);
      break;
    case 'updateSession':
      onUpdateSession(global, actions, update);
      break;
    case 'updateServerTimeOffset':
      onUpdateServerTimeOffset(update);
      break;
    case 'updateCurrentUser':
      onUpdateCurrentUser(global, update);
      break;
    case 'requestReconnectApi':
      global = {
        ...global,
        isSynced: false
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
      onUpdateConnectionState(global, actions, {
        '@type': 'updateConnectionState',
        connectionState: 'connectionStateConnecting'
      });
      actions.initApi();
      break;
    case 'requestSync':
      actions.sync();
      break;
    case 'updateFetchingDifference':
      global = {
        ...global,
        isFetchingDifference: update.isFetching
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
      break;
    case 'error':
      {
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          const paymentShippingError = (0,_util_getReadableErrorText__WEBPACK_IMPORTED_MODULE_2__.getShippingError)(update.error);
          if (paymentShippingError) {
            actions.addPaymentError({
              error: paymentShippingError,
              tabId
            });
          } else if ((0,_util_getReadableErrorText__WEBPACK_IMPORTED_MODULE_2__.shouldClosePaymentModal)(update.error)) {
            actions.closePaymentModal({
              tabId
            });
          } else if (actions.showDialog) {
            actions.showDialog({
              data: update.error,
              tabId
            });
          }
        });
        break;
      }
  }
});
function onUpdateApiReady(global) {
  void (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_4__.oldSetLanguage)(global.settings.byKey.language);
}
function onUpdateAuthorizationState(global, update) {
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  const wasAuthReady = global.authState === 'authorizationStateReady';
  const authState = update.authorizationState;
  global = {
    ...global,
    authState,
    authIsLoading: false
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  switch (authState) {
    case 'authorizationStateLoggingOut':
      void (0,_util_websync__WEBPACK_IMPORTED_MODULE_7__.forceWebsync)(false);
      global = {
        ...global,
        isLoggingOut: true
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
      break;
    case 'authorizationStateWaitCode':
      global = {
        ...global,
        authIsCodeViaApp: update.isCodeViaApp
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
      break;
    case 'authorizationStateWaitPassword':
      global = {
        ...global,
        authHint: update.hint
      };
      if (update.noReset) {
        global = {
          ...global,
          hasWebAuthTokenPasswordRequired: true
        };
      }
      (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
      break;
    case 'authorizationStateWaitQrCode':
      global = {
        ...global,
        authIsLoadingQrCode: false,
        authQrCode: update.qrCode
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
      break;
    case 'authorizationStateReady':
      {
        if (wasAuthReady) {
          break;
        }
        void (0,_util_websync__WEBPACK_IMPORTED_MODULE_7__.forceWebsync)(true);
        global = {
          ...global,
          isLoggingOut: false
        };
        Object.values(global.byTabId).forEach(({
          id: tabId
        }) => {
          global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_11__.updateTabState)(global, {
            isInactive: false
          }, tabId);
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
        break;
      }
  }
}
function onUpdateAuthorizationError(global, update) {
  global = {
    ...global,
    authErrorKey: update.errorKey
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
}
function onUpdateWebAuthTokenFailed(global) {
  (0,_util_routing__WEBPACK_IMPORTED_MODULE_5__.clearWebTokenAuth)();
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  global = {
    ...global,
    hasWebAuthTokenFailed: true
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
}
function onUpdateConnectionState(global, actions, update) {
  const {
    connectionState
  } = update;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_9__.getGlobal)();
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_12__.selectTabState)(global, (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)());
  if (connectionState === 'connectionStateReady' && tabState.isMasterTab && tabState.multitabNextAction) {
    // @ts-ignore
    actions[tabState.multitabNextAction.action](tabState.multitabNextAction.payload);
    actions.clearMultitabNextAction({
      tabId: tabState.id
    });
  }
  if (connectionState === global.connectionState) {
    return;
  }
  global = {
    ...global,
    connectionState
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  if (global.isSynced) {
    const channelStackIds = Object.values(global.byTabId).flatMap(tab => tab.messageLists).map(messageList => messageList.chatId).filter(chatId => {
      const chat = global.chats.byId[chatId];
      return chat && ((0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatChannel)(chat) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatSuperGroup)(chat));
    });
    if (connectionState === 'connectionStateReady' && channelStackIds.length) {
      (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.unique)(channelStackIds).forEach(chatId => {
        actions.requestChannelDifference({
          chatId
        });
      });
    }
  }
  if (connectionState === 'connectionStateBroken') {
    actions.signOut({
      forceInitApi: true
    });
  }
}
function onUpdateSession(global, actions, update) {
  const {
    sessionData
  } = update;
  const {
    authRememberMe,
    authState
  } = global;
  const isEmpty = !sessionData || !sessionData.mainDcId;
  const isTest = sessionData?.isTest;
  if (isTest) {
    global = {
      ...global,
      config: {
        ...global.config,
        isTestServer: isTest
      }
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  }
  if (!authRememberMe || authState !== 'authorizationStateReady' || isEmpty) {
    return;
  }
  actions.saveSession({
    sessionData
  });
}
function onUpdateServerTimeOffset(update) {
  (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_6__.setServerTimeOffset)(update.serverTimeOffset);
}
function onUpdateCurrentUser(global, update) {
  const {
    currentUser,
    currentUserFullInfo
  } = update;
  global = {
    ...(0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUser)(global, currentUser.id, currentUser),
    currentUserId: currentUser.id
  };
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_10__.updateUserFullInfo)(global, currentUser.id, currentUserFullInfo);
  (0,_index__WEBPACK_IMPORTED_MODULE_9__.setGlobal)(global);
  updateSessionUserId(currentUser.id);
}
function updateSessionUserId(currentUserId) {
  const sessionUserAuth = localStorage.getItem(_config__WEBPACK_IMPORTED_MODULE_0__.SESSION_USER_KEY);
  if (!sessionUserAuth) return;
  const userAuth = JSON.parse(sessionUserAuth);
  userAuth.id = currentUserId;
  localStorage.setItem(_config__WEBPACK_IMPORTED_MODULE_0__.SESSION_USER_KEY, JSON.stringify(userAuth));
}

/***/ }),

/***/ "./src/global/actions/api/initial.ts":
/*!*******************************************!*\
  !*** ./src/global/actions/api/initial.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_appBadge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/appBadge */ "./src/util/appBadge.ts");
/* harmony import */ var _util_browser_idb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/browser/idb */ "./src/util/browser/idb.ts");
/* harmony import */ var _util_cacheApi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/cacheApi */ "./src/util/cacheApi.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/notifications */ "./src/util/notifications.ts");
/* harmony import */ var _util_passcode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/passcode */ "./src/util/passcode.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_sessions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/sessions */ "./src/util/sessions.ts");
/* harmony import */ var _util_websync__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../util/websync */ "./src/util/websync.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../cache */ "./src/global/cache.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");

















(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('initApi', (global, actions) => {
  const initialLocationHash = (0,_util_routing__WEBPACK_IMPORTED_MODULE_8__.parseInitialLocationHash)();
  const hasTestParam = window.location.search.includes('test') || initialLocationHash?.tgWebAuthTest === '1';
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.initApi)(actions.apiUpdate, {
    userAgent: navigator.userAgent,
    platform: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.PLATFORM_ENV,
    sessionData: (0,_util_sessions__WEBPACK_IMPORTED_MODULE_10__.loadStoredSession)(),
    isWebmSupported: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.IS_WEBM_SUPPORTED,
    maxBufferSize: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_12__.MAX_BUFFER_SIZE,
    webAuthToken: initialLocationHash?.tgWebAuthToken,
    dcId: initialLocationHash?.tgWebAuthDcId ? Number(initialLocationHash?.tgWebAuthDcId) : undefined,
    mockScenario: initialLocationHash?.mockScenario,
    shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,
    shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,
    shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,
    langCode: global.settings.byKey.language,
    isTestServerRequested: hasTestParam
  });
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.setShouldEnableDebugLog)(Boolean(global.settings.byKey.shouldCollectDebugLogs));
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setAuthPhoneNumber', (global, actions, payload) => {
  const {
    phoneNumber
  } = payload;
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('provideAuthPhoneNumber', phoneNumber.replace(/[^\d]/g, ''));
  return {
    ...global,
    authIsLoading: true,
    authErrorKey: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setAuthCode', (global, actions, payload) => {
  const {
    code
  } = payload;
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('provideAuthCode', code);
  return {
    ...global,
    authIsLoading: true,
    authErrorKey: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setAuthPassword', (global, actions, payload) => {
  const {
    password
  } = payload;
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('provideAuthPassword', password);
  return {
    ...global,
    authIsLoading: true,
    authErrorKey: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('uploadProfilePhoto', async (global, actions, payload) => {
  const {
    file,
    isFallback,
    isVideo,
    videoTs,
    bot,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  } = payload;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.InProgress, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('uploadProfilePhoto', file, isFallback, isVideo, videoTs, bot);
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updateManagementProgress)(global, _types__WEBPACK_IMPORTED_MODULE_0__.ManagementProgress.Complete, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  actions.loadFullUser({
    userId: global.currentUserId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('signUp', (global, actions, payload) => {
  const {
    firstName,
    lastName
  } = payload;
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('provideAuthRegistration', {
    firstName,
    lastName
  });
  return {
    ...global,
    authIsLoading: true,
    authErrorKey: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('returnToAuthPhoneNumber', global => {
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('restartAuth');
  return {
    ...global,
    authErrorKey: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('goToAuthQrCode', global => {
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('restartAuthWithQr');
  return {
    ...global,
    authIsLoadingQrCode: true,
    authErrorKey: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('saveSession', (global, actions, payload) => {
  if (global.passcode.isScreenLocked) {
    return;
  }
  const {
    sessionData
  } = payload;
  if (sessionData) {
    (0,_util_sessions__WEBPACK_IMPORTED_MODULE_10__.storeSession)(sessionData, global.currentUserId);
  } else {
    (0,_util_sessions__WEBPACK_IMPORTED_MODULE_10__.clearStoredSession)();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('signOut', async (global, actions, payload) => {
  if ('hangUp' in actions) actions.hangUp({
    tabId: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  });
  if ('leaveGroupCall' in actions) actions.leaveGroupCall({
    tabId: (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_5__.getCurrentTabId)()
  });
  try {
    (0,_util_routing__WEBPACK_IMPORTED_MODULE_8__.resetInitialLocationHash)();
    (0,_util_routing__WEBPACK_IMPORTED_MODULE_8__.resetLocationHash)();
    await (0,_util_notifications__WEBPACK_IMPORTED_MODULE_6__.unsubscribe)();
    await Promise.race([(0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('destroy'), (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_9__.pause)(3000)]);
    await (0,_util_websync__WEBPACK_IMPORTED_MODULE_11__.forceWebsync)(false);
  } catch (err) {
    // Do nothing
  }
  actions.reset();
  if (payload?.forceInitApi) {
    actions.initApi();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('requestChannelDifference', (global, actions, payload) => {
  const {
    chatId
  } = payload;
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('requestChannelDifference', chatId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('reset', (global, actions) => {
  (0,_util_sessions__WEBPACK_IMPORTED_MODULE_10__.clearStoredSession)();
  (0,_util_passcode__WEBPACK_IMPORTED_MODULE_7__.clearEncryptedSession)();
  void _util_cacheApi__WEBPACK_IMPORTED_MODULE_4__.clear(_config__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CACHE_NAME);
  void _util_cacheApi__WEBPACK_IMPORTED_MODULE_4__.clear(_config__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CACHE_NAME_AVATARS);
  void _util_cacheApi__WEBPACK_IMPORTED_MODULE_4__.clear(_config__WEBPACK_IMPORTED_MODULE_1__.MEDIA_PROGRESSIVE_CACHE_NAME);
  void _util_cacheApi__WEBPACK_IMPORTED_MODULE_4__.clear(_config__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_BG_CACHE_NAME);
  _util_browser_idb__WEBPACK_IMPORTED_MODULE_3__.MAIN_IDB_STORE.clear();
  _util_browser_idb__WEBPACK_IMPORTED_MODULE_3__.PASSCODE_IDB_STORE.clear();
  const langCachePrefix = _config__WEBPACK_IMPORTED_MODULE_1__.LANG_CACHE_NAME.replace(/\d+$/, '');
  const langCacheVersion = Number((_config__WEBPACK_IMPORTED_MODULE_1__.LANG_CACHE_NAME.match(/\d+$/) || ['0'])[0]);
  for (let i = 0; i < langCacheVersion; i++) {
    void _util_cacheApi__WEBPACK_IMPORTED_MODULE_4__.clear(`${langCachePrefix}${i === 0 ? '' : i}`);
  }
  (0,_util_appBadge__WEBPACK_IMPORTED_MODULE_2__.updateAppBadge)(0);
  actions.initShared({
    force: true
  });
  Object.values(global.byTabId).forEach(({
    id: otherTabId,
    isMasterTab
  }) => {
    actions.init({
      tabId: otherTabId,
      isMasterTab
    });
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('disconnect', () => {
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApiLocal)('disconnect');
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('destroyConnection', () => {
  void (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApiLocal)('destroy', true, true);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('loadNearestCountry', async global => {
  if (global.connectionState !== 'connectionStateReady') {
    return;
  }
  const authNearestCountry = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('fetchNearestCountry');
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = {
    ...global,
    authNearestCountry
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('setDeviceToken', (global, actions, deviceToken) => {
  return {
    ...global,
    push: {
      deviceToken,
      subscribedAt: Date.now()
    }
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('deleteDeviceToken', global => {
  return {
    ...global,
    push: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_15__.addActionHandler)('lockScreen', async global => {
  const sessionJson = JSON.stringify({
    ...(0,_util_sessions__WEBPACK_IMPORTED_MODULE_10__.loadStoredSession)(),
    userId: global.currentUserId
  });
  const globalJson = await (0,_cache__WEBPACK_IMPORTED_MODULE_14__.serializeGlobal)(global);
  await (0,_util_passcode__WEBPACK_IMPORTED_MODULE_7__.encryptSession)(sessionJson, globalJson);
  (0,_util_passcode__WEBPACK_IMPORTED_MODULE_7__.forgetPasscode)();
  (0,_util_sessions__WEBPACK_IMPORTED_MODULE_10__.clearStoredSession)();
  (0,_util_appBadge__WEBPACK_IMPORTED_MODULE_2__.updateAppBadge)(0);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.updatePasscodeSettings)(global, {
    isScreenLocked: true,
    invalidAttemptsCount: 0,
    timeoutUntil: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  setTimeout(() => {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_15__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_16__.clearGlobalForLockScreen)(global);
    (0,_index__WEBPACK_IMPORTED_MODULE_15__.setGlobal)(global);
  }, _config__WEBPACK_IMPORTED_MODULE_1__.LOCK_SCREEN_ANIMATION_DURATION_MS);
  try {
    await (0,_util_notifications__WEBPACK_IMPORTED_MODULE_6__.unsubscribe)();
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_13__.callApi)('destroy', true);
  } catch (err) {
    // Do nothing
  }
});

/***/ }),

/***/ "./src/global/actions/api/settings.ts":
/*!********************************************!*\
  !*** ./src/global/actions/api/settings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/notifications */ "./src/util/notifications.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_requestActionTimeout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/requestActionTimeout */ "./src/util/requestActionTimeout.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");














(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateProfile', async (global, actions, payload) => {
  const {
    photo,
    firstName,
    lastName,
    bio: about,
    username,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  const {
    currentUserId
  } = global;
  if (!currentUserId) {
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    profileEdit: {
      progress: _types__WEBPACK_IMPORTED_MODULE_0__.ProfileEditProgress.InProgress
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  if (photo) {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('uploadProfilePhoto', photo);
  }
  if (firstName || lastName || about) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateProfile', {
      firstName,
      lastName,
      about
    });
    if (result) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
      const currentUser = currentUserId && (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectUser)(global, currentUserId);
      if (currentUser) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateUser)(global, currentUser.id, {
          firstName,
          lastName
        });
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateUserFullInfo)(global, currentUser.id, {
          bio: about
        });
        (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
      }
    }
  }
  if (username !== undefined) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateUsername', username);
    global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
    const currentUser = currentUserId && (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectUser)(global, currentUserId);
    if (result && currentUser) {
      const shouldUsernameUpdate = currentUser.usernames?.find(u => u.isEditable);
      const usernames = shouldUsernameUpdate ? currentUser.usernames?.map(u => u.isEditable ? {
        ...u,
        username
      } : u) : [{
        username,
        isEditable: true,
        isActive: true
      }, ...(currentUser.usernames || [])];
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateUser)(global, currentUserId, {
        usernames
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    }
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    profileEdit: {
      progress: _types__WEBPACK_IMPORTED_MODULE_0__.ProfileEditProgress.Complete
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  if (photo) {
    actions.loadFullUser({
      userId: currentUserId,
      withPhotos: true
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateProfilePhoto', async (global, actions, payload) => {
  const {
    photo,
    isFallback
  } = payload;
  const {
    currentUserId
  } = global;
  if (!currentUserId) return;
  const currentUser = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectUser)(global, currentUserId);
  if (!currentUser) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateUser)(global, currentUserId, {
    avatarPhotoId: undefined
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateUserFullInfo)(global, currentUserId, {
    profilePhoto: undefined
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateProfilePhoto', photo, isFallback);
  if (!result) return;
  actions.loadFullUser({
    userId: currentUserId,
    withPhotos: true
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('deleteProfilePhoto', async (global, actions, payload) => {
  const {
    photo
  } = payload;
  const {
    currentUserId
  } = global;
  if (!currentUserId) return;
  const isDeleted = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('deleteProfilePhotos', [photo]);
  if (!isDeleted) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.deletePeerPhoto)(global, currentUserId, photo.id);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  actions.loadFullUser({
    userId: currentUserId,
    withPhotos: true
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('checkUsername', async (global, actions, payload) => {
  const {
    username,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  let tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  // No need to check the username if profile update is already in progress
  if (tabState.profileEdit && tabState.profileEdit.progress === _types__WEBPACK_IMPORTED_MODULE_0__.ProfileEditProgress.InProgress) {
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    profileEdit: {
      progress: tabState.profileEdit ? tabState.profileEdit.progress : _types__WEBPACK_IMPORTED_MODULE_0__.ProfileEditProgress.Idle,
      checkedUsername: undefined,
      isUsernameAvailable: undefined,
      error: undefined
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const {
    result,
    error
  } = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('checkUsername', username);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectTabState)(global, tabId);
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_12__.updateTabState)(global, {
    profileEdit: {
      ...tabState.profileEdit,
      checkedUsername: username,
      isUsernameAvailable: result === true,
      error
    }
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadWallpapers', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchWallpapers');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    settings: {
      ...global.settings,
      loadedWallpapers: result.wallpapers
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('uploadWallpaper', async (global, actions, payload) => {
  const file = payload;
  const previewBlobUrl = URL.createObjectURL(file);
  global = {
    ...global,
    settings: {
      ...global.settings,
      loadedWallpapers: [{
        slug: _types__WEBPACK_IMPORTED_MODULE_0__.UPLOADING_WALLPAPER_SLUG,
        document: {
          mediaType: 'document',
          fileName: '',
          size: file.size,
          mimeType: file.type,
          previewBlobUrl
        }
      }, ...(global.settings.loadedWallpapers || [])]
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('uploadWallpaper', file);
  if (!result) {
    return;
  }
  const {
    wallpaper
  } = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  if (!global.settings.loadedWallpapers) {
    return;
  }
  const firstWallpaper = global.settings.loadedWallpapers[0];
  if (!firstWallpaper || firstWallpaper.slug !== _types__WEBPACK_IMPORTED_MODULE_0__.UPLOADING_WALLPAPER_SLUG) {
    return;
  }
  const withLocalMedia = {
    ...wallpaper,
    document: {
      ...wallpaper.document,
      previewBlobUrl
    }
  };
  global = {
    ...global,
    settings: {
      ...global.settings,
      loadedWallpapers: [withLocalMedia, ...global.settings.loadedWallpapers.slice(1)]
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadBlockedUsers', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchBlockedUsers', {});
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    blocked: {
      ids: result.blockedIds,
      totalCount: result.totalCount
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('blockUser', async (global, actions, payload) => {
  const {
    userId,
    isOnlyStories
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectUser)(global, userId);
  if (!user) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('blockUser', {
    user,
    isOnlyStories: isOnlyStories || undefined
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.addBlockedUser)(global, userId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('unblockUser', async (global, actions, payload) => {
  const {
    userId,
    isOnlyStories
  } = payload;
  const user = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectUser)(global, userId);
  if (!user) return;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('unblockUser', {
    user,
    isOnlyStories: isOnlyStories || undefined
  });
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.removeBlockedUser)(global, userId);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadNotificationExceptions', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchNotificationExceptions');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.addNotifyExceptions)(global, result);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadNotificationSettings', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchNotificationSettings');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, result);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateNotificationSettings', async (global, actions, payload) => {
  const {
    peerType,
    isSilent,
    shouldShowPreviews
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateNotificationSettings', peerType, {
    isSilent,
    shouldShowPreviews
  });
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateNotifySettings)(global, peerType, isSilent, shouldShowPreviews);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateWebNotificationSettings', async (global, actions, payload) => {
  const oldSettings = global.settings.byKey;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, payload);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const {
    hasWebNotifications,
    hasPushNotifications
  } = global.settings.byKey;
  if (!oldSettings.hasPushNotifications && hasPushNotifications) {
    await (0,_util_notifications__WEBPACK_IMPORTED_MODULE_4__.subscribe)();
  }
  if (oldSettings.hasPushNotifications && !hasPushNotifications) {
    await (0,_util_notifications__WEBPACK_IMPORTED_MODULE_4__.unsubscribe)();
  }
  if (!oldSettings.hasWebNotifications && hasWebNotifications) {
    const isGranted = await (0,_util_notifications__WEBPACK_IMPORTED_MODULE_4__.requestPermission)();
    if (!isGranted) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, {
        hasWebNotifications: false
      });
      (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
    }
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateContactSignUpNotification', async (global, actions, payload) => {
  const {
    isSilent
  } = payload;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateContactSignUpNotification', isSilent);
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, {
    hasContactJoinedNotifications: !isSilent
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadLanguages', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchLanguages');
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    settings: {
      ...global.settings,
      languages: result
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadPrivacySettings', async global => {
  const result = await Promise.all([(0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'phoneNumber'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'addByPhone'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'lastSeen'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'profilePhoto'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'forwards'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'chatInvite'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'phoneCall'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'phoneP2P'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'voiceMessages'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'bio'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'birthday'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', 'gifts')]);
  if (result.some(e => e === undefined)) {
    return;
  }
  const [phoneNumberSettings, addByPhoneSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings, phoneCallSettings, phoneP2PSettings, voiceMessagesSettings, bioSettings, birthdaySettings, giftsSettings] = result;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    settings: {
      ...global.settings,
      privacy: {
        ...global.settings.privacy,
        phoneNumber: phoneNumberSettings.rules,
        addByPhone: addByPhoneSettings.rules,
        lastSeen: lastSeenSettings.rules,
        profilePhoto: profilePhotoSettings.rules,
        forwards: forwardsSettings.rules,
        chatInvite: chatInviteSettings.rules,
        phoneCall: phoneCallSettings.rules,
        phoneP2P: phoneP2PSettings.rules,
        voiceMessages: voiceMessagesSettings.rules,
        bio: bioSettings.rules,
        birthday: birthdaySettings.rules,
        gifts: giftsSettings.rules
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('setPrivacyVisibility', async (global, actions, payload) => {
  const {
    privacyKey,
    visibility,
    onSuccess
  } = payload;
  if (!global.settings.privacy[privacyKey]) {
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPrivacySettings', privacyKey);
    if (!result) {
      return;
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
    global = {
      ...global,
      settings: {
        ...global.settings,
        privacy: {
          ...global.settings.privacy,
          [privacyKey]: result.rules
        }
      }
    };
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  }
  const {
    privacy: {
      [privacyKey]: settings
    }
  } = global.settings;
  if (!settings) {
    return;
  }
  const rules = (0,_helpers__WEBPACK_IMPORTED_MODULE_9__.buildApiInputPrivacyRules)(global, {
    visibility,
    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],
    blockedIds: [...settings.blockUserIds, ...settings.blockChatIds],
    botsPrivacy: settings.botsPrivacy
  });
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('setPrivacySettings', privacyKey, rules);
  if (!result) {
    return;
  }
  onSuccess?.();
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    settings: {
      ...global.settings,
      privacy: {
        ...global.settings.privacy,
        [privacyKey]: result.rules
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('setPrivacySettings', async (global, actions, payload) => {
  const {
    privacyKey,
    isAllowList,
    updatedIds,
    isPremiumAllowed,
    botsPrivacy
  } = payload;
  const {
    privacy: {
      [privacyKey]: settings
    }
  } = global.settings;
  if (!settings) {
    return;
  }
  const rules = (0,_helpers__WEBPACK_IMPORTED_MODULE_9__.buildApiInputPrivacyRules)(global, {
    visibility: settings.visibility,
    isUnspecified: settings.isUnspecified,
    shouldAllowPremium: isPremiumAllowed,
    allowedIds: isAllowList ? updatedIds : [...settings.allowUserIds, ...settings.allowChatIds],
    blockedIds: !isAllowList ? updatedIds : [...settings.blockUserIds, ...settings.blockChatIds],
    botsPrivacy
  });
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('setPrivacySettings', privacyKey, rules);
  if (!result) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    settings: {
      ...global.settings,
      privacy: {
        ...global.settings.privacy,
        [privacyKey]: result.rules
      }
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateIsOnline', (global, actions, payload) => {
  if (global.connectionState !== 'connectionStateReady') return;
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateIsOnline', payload);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadContentSettings', async global => {
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchContentSettings');
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, result);
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateContentSettings', async (global, actions, payload) => {
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, {
    isSensitiveEnabled: payload
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateContentSettings', payload);
  if (!result) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, {
      isSensitiveEnabled: !payload
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadCountryList', async (global, actions, payload) => {
  let {
    langCode
  } = payload;
  if (!langCode) langCode = global.settings.byKey.language;
  const countryList = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchCountryList', {
    langCode
  });
  if (!countryList) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    countryList
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('ensureTimeFormat', async (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  if (global.authNearestCountry) {
    const timeFormat = _config__WEBPACK_IMPORTED_MODULE_1__.COUNTRIES_WITH_12H_TIME_FORMAT.has(global.authNearestCountry.toUpperCase()) ? '12h' : '24h';
    actions.setSettingOption({
      timeFormat,
      tabId
    });
    (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.setTimeFormat)(timeFormat);
  }
  if (global.settings.byKey.wasTimeFormatSetManually) {
    return;
  }
  const nearestCountryCode = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchNearestCountry');
  if (nearestCountryCode) {
    const timeFormat = _config__WEBPACK_IMPORTED_MODULE_1__.COUNTRIES_WITH_12H_TIME_FORMAT.has(nearestCountryCode.toUpperCase()) ? '12h' : '24h';
    actions.setSettingOption({
      timeFormat,
      tabId
    });
    (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.setTimeFormat)(timeFormat);
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadAppConfig', async (global, actions, payload) => {
  const hash = payload?.hash;
  const appConfig = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchAppConfig', hash);
  if (!appConfig) return;
  (0,_util_requestActionTimeout__WEBPACK_IMPORTED_MODULE_6__["default"])({
    action: 'loadAppConfig',
    payload: {
      hash: appConfig.hash
    }
  }, _config__WEBPACK_IMPORTED_MODULE_1__.APP_CONFIG_REFETCH_INTERVAL);
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    appConfig
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadConfig', async global => {
  const config = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchConfig');
  if (!config) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  const timeout = config.expiresAt - (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_7__.getServerTime)();
  (0,_util_requestActionTimeout__WEBPACK_IMPORTED_MODULE_6__["default"])({
    action: 'loadConfig',
    payload: undefined
  }, timeout * 1000);
  global = {
    ...global,
    config
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadPeerColors', async global => {
  const hash = global.peerColors?.generalHash;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchPeerColors', hash);
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    peerColors: {
      ...global.peerColors,
      general: result.colors,
      generalHash: result.hash
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadTimezones', async global => {
  const hash = global.timezones?.hash;
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchTimezones', hash);
  if (!result) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = {
    ...global,
    timezones: {
      byId: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.buildCollectionByKey)(result.timezones, 'id'),
      hash: result.hash
    }
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('loadGlobalPrivacySettings', async global => {
  const globalSettings = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchGlobalPrivacySettings');
  if (!globalSettings) {
    return;
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, {
    ...globalSettings
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('updateGlobalPrivacySettings', async (global, actions, payload) => {
  const shouldArchiveAndMuteNewNonContact = payload.shouldArchiveAndMuteNewNonContact ?? Boolean(global.settings.byKey.shouldArchiveAndMuteNewNonContact);
  const shouldHideReadMarks = payload.shouldHideReadMarks ?? Boolean(global.settings.byKey.shouldHideReadMarks);
  const shouldNewNonContactPeersRequirePremium = payload.shouldNewNonContactPeersRequirePremium ?? Boolean(global.settings.byKey.shouldNewNonContactPeersRequirePremium);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, {
    shouldArchiveAndMuteNewNonContact,
    shouldHideReadMarks
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('updateGlobalPrivacySettings', {
    shouldArchiveAndMuteNewNonContact,
    shouldHideReadMarks,
    shouldNewNonContactPeersRequirePremium
  });
  global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.replaceSettings)(global, {
    shouldArchiveAndMuteNewNonContact: !result ? !shouldArchiveAndMuteNewNonContact : result.shouldArchiveAndMuteNewNonContact,
    shouldHideReadMarks: !result ? !shouldHideReadMarks : result.shouldHideReadMarks,
    shouldNewNonContactPeersRequirePremium: !result ? !shouldNewNonContactPeersRequirePremium : result.shouldNewNonContactPeersRequirePremium
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('toggleUsername', async (global, actions, payload) => {
  const {
    username,
    isActive
  } = payload;
  const {
    currentUserId
  } = global;
  if (!currentUserId) {
    return;
  }
  const currentUser = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectUser)(global, currentUserId);
  if (!currentUser?.usernames) {
    return;
  }
  const usernames = currentUser.usernames.map(item => {
    if (item.username !== username) {
      return item;
    }
    return {
      ...item,
      isActive: isActive || undefined
    };
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateUser)(global, currentUserId, {
    usernames
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('toggleUsername', {
    username,
    isActive
  });
  if (!result) {
    actions.loadFullUser({
      userId: currentUserId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('toggleChatUsername', async (global, actions, payload) => {
  const {
    chatId,
    username,
    isActive
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat?.usernames) {
    return;
  }
  const usernames = chat.usernames.map(item => {
    if (item.username !== username) {
      return item;
    }
    return {
      ...item,
      isActive: isActive || undefined
    };
  });
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateChat)(global, chatId, {
    usernames
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('toggleUsername', {
    chatId: chat.id,
    accessHash: chat.accessHash,
    username,
    isActive
  });
  if (!result) {
    actions.loadFullChat({
      chatId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('sortUsernames', async (global, actions, payload) => {
  const {
    usernames
  } = payload;
  const {
    currentUserId
  } = global;
  if (!currentUserId) {
    return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('reorderUsernames', {
    usernames
  });

  // After saving the order of usernames, server sends an update with the necessary data,
  // so there is no need to update the state in this place
  if (!result) {
    actions.loadUser({
      userId: currentUserId
    });
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_10__.addActionHandler)('sortChatUsernames', async (global, actions, payload) => {
  const {
    chatId,
    usernames
  } = payload;
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_13__.selectChat)(global, chatId);
  if (!chat) {
    return;
  }
  const prevUsernames = [...chat.usernames];
  const sortedUsernames = chat.usernames.reduce((res, currentUsername) => {
    const idx = usernames.findIndex(username => username === currentUsername.username);
    res[idx] = currentUsername;
    return res;
  }, []);
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateChat)(global, chatId, {
    usernames: sortedUsernames
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('reorderUsernames', {
    chatId: chat.id,
    accessHash: chat.accessHash,
    usernames
  });
  if (!result) {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_10__.getGlobal)();
    global = (0,_reducers__WEBPACK_IMPORTED_MODULE_11__.updateChat)(global, chatId, {
      usernames: prevUsernames
    });
    (0,_index__WEBPACK_IMPORTED_MODULE_10__.setGlobal)(global);
  }
});

/***/ }),

/***/ "./src/global/actions/initial.ts":
/*!***************************************!*\
  !*** ./src/global/actions/initial.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_initial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui/initial */ "./src/global/actions/ui/initial.ts");
/* harmony import */ var _ui_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui/settings */ "./src/global/actions/ui/settings.ts");
/* harmony import */ var _api_initial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api/initial */ "./src/global/actions/api/initial.ts");
/* harmony import */ var _api_settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api/settings */ "./src/global/actions/api/settings.ts");
/* harmony import */ var _apiUpdaters_initial__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./apiUpdaters/initial */ "./src/global/actions/apiUpdaters/initial.ts");






/***/ }),

/***/ "./src/global/actions/ui/initial.ts":
/*!******************************************!*\
  !*** ./src/global/actions/ui/initial.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_notifications__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/notifications */ "./src/util/notifications.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_passcode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/passcode */ "./src/util/passcode.ts");
/* harmony import */ var _util_perfomanceSettings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/perfomanceSettings */ "./src/util/perfomanceSettings.ts");
/* harmony import */ var _util_sessions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/sessions */ "./src/util/sessions.ts");
/* harmony import */ var _util_switchTheme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/switchTheme */ "./src/util/switchTheme.ts");
/* harmony import */ var _util_systemTheme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/systemTheme */ "./src/util/systemTheme.ts");
/* harmony import */ var _util_websync__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/websync */ "./src/util/websync.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../cache */ "./src/global/cache.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");


















const HISTORY_ANIMATION_DURATION = 450;
(0,_util_systemTheme__WEBPACK_IMPORTED_MODULE_9__.setSystemThemeChangeCallback)(theme => {
  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global
  let global = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getGlobal)();
  if (!global.isInited || !global.settings.byKey.shouldUseSystemTheme) return;
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_15__.replaceSettings)(global, {
    theme
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('switchMultitabRole', async (global, actions, payload) => {
  const {
    isMasterTab,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  if (isMasterTab === (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, tabId).isMasterTab) {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('broadcastLocalDbUpdateFull');
    return;
  }
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    isMasterTab
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global, {
    forceSyncOnIOs: true
  });
  if (!isMasterTab) {
    void (0,_util_notifications__WEBPACK_IMPORTED_MODULE_3__.unsubscribe)();
    actions.destroyConnection();
    (0,_util_websync__WEBPACK_IMPORTED_MODULE_10__.stopWebsync)();
    (0,_cache__WEBPACK_IMPORTED_MODULE_13__.clearCaching)();
    actions.onSomeTabSwitchedMultitabRole();
  } else {
    if (global.passcode.hasPasscode && !global.passcode.isScreenLocked) {
      const {
        sessionJson
      } = await (0,_util_passcode__WEBPACK_IMPORTED_MODULE_5__.decryptSessionByCurrentHash)();
      const session = JSON.parse(sessionJson);
      (0,_util_sessions__WEBPACK_IMPORTED_MODULE_7__.storeSession)(session, session.userId);
    }
    if ((0,_util_sessions__WEBPACK_IMPORTED_MODULE_7__.hasStoredSession)()) {
      (0,_cache__WEBPACK_IMPORTED_MODULE_13__.setupCaching)();
    }
    global = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getGlobal)();
    if (!global.passcode.hasPasscode || !global.passcode.isScreenLocked) {
      if (global.connectionState === 'connectionStateReady') {
        global = {
          ...global,
          connectionState: 'connectionStateConnecting'
        };
        (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
      }
      actions.initApi();
    }
    (0,_util_websync__WEBPACK_IMPORTED_MODULE_10__.startWebsync)();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('onSomeTabSwitchedMultitabRole', async global => {
  if (global.passcode.hasPasscode && !global.passcode.isScreenLocked) {
    const {
      sessionJson
    } = await (0,_util_passcode__WEBPACK_IMPORTED_MODULE_5__.decryptSessionByCurrentHash)();
    const session = JSON.parse(sessionJson);
    (0,_util_sessions__WEBPACK_IMPORTED_MODULE_7__.storeSession)(session, session.userId);
  }
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_12__.callApi)('broadcastLocalDbUpdateFull');
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('initShared', () => {
  (0,_util_websync__WEBPACK_IMPORTED_MODULE_10__.startWebsync)();
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('initMain', global => {
  const {
    hasWebNotifications,
    hasPushNotifications
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectNotifySettings)(global);
  if (hasWebNotifications && hasPushNotifications) {
    // Most of the browsers only show the notifications permission prompt after the first user gesture.
    const events = ['click', 'keypress'];
    const subscribeAfterUserGesture = () => {
      void (0,_util_notifications__WEBPACK_IMPORTED_MODULE_3__.subscribe)();
      events.forEach(event => {
        document.removeEventListener(event, subscribeAfterUserGesture);
      });
    };
    events.forEach(event => {
      document.addEventListener(event, subscribeAfterUserGesture, {
        once: true
      });
    });
  }
});
(0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.addCallback)(global => {
  let isUpdated = false;
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTabState)(global, (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)());
  if (!tabState?.shouldInit) return;
  global = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    shouldInit: false
  }, tabState.id);
  const {
    messageTextSize,
    language
  } = global.settings.byKey;
  const globalTheme = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectTheme)(global);
  const systemTheme = (0,_util_systemTheme__WEBPACK_IMPORTED_MODULE_9__.getSystemTheme)();
  const theme = global.settings.byKey.shouldUseSystemTheme ? systemTheme : globalTheme;
  const performanceType = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectPerformanceSettings)(global);
  void (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_4__.oldSetLanguage)(language, undefined, true);
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
    document.documentElement.style.setProperty('--composer-text-size', `${Math.max(messageTextSize, _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_IOS ? 16 : 15)}px`);
    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(messageTextSize * 1.3125)}px`);
    document.documentElement.style.setProperty('--message-text-size', `${messageTextSize}px`);
    document.documentElement.setAttribute('data-message-text-size', messageTextSize.toString());
    document.body.classList.add('initial');
    document.body.classList.add(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_TOUCH_ENV ? 'is-touch-env' : 'is-pointer-env');
    (0,_util_perfomanceSettings__WEBPACK_IMPORTED_MODULE_6__.applyPerformanceSettings)(performanceType);
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_IOS) {
      document.body.classList.add('is-ios');
    } else if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_ANDROID) {
      document.body.classList.add('is-android');
    } else if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_MAC_OS) {
      document.body.classList.add('is-macos');
    } else if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_WINDOWS) {
      document.body.classList.add('is-windows');
    } else if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_LINUX) {
      document.body.classList.add('is-linux');
    }
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_SAFARI) {
      document.body.classList.add('is-safari');
    }
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_ELECTRON) {
      document.body.classList.add('is-electron');
    }
  });
  const canAnimate = (0,_selectors__WEBPACK_IMPORTED_MODULE_17__.selectCanAnimateInterface)(global);
  (0,_util_switchTheme__WEBPACK_IMPORTED_MODULE_8__["default"])(theme, canAnimate);
  // Make sure global has the latest theme. Will cause `switchTheme` on change
  global = (0,_reducers__WEBPACK_IMPORTED_MODULE_15__.replaceSettings)(global, {
    theme
  });
  (0,_util_websync__WEBPACK_IMPORTED_MODULE_10__.startWebsync)();
  isUpdated = true;
  if (isUpdated) (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setInstallPrompt', (global, actions, payload) => {
  const {
    canInstall,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    canInstall
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setIsUiReady', (global, actions, payload) => {
  const {
    uiReadyState,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  if (uiReadyState === 2) {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      document.body.classList.remove('initial');
    });
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    uiReadyState
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setAuthPhoneNumber', (global, actions, payload) => {
  const {
    phoneNumber
  } = payload;
  return {
    ...global,
    authPhoneNumber: phoneNumber
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('setAuthRememberMe', (global, actions, payload) => {
  return {
    ...global,
    authRememberMe: Boolean(payload)
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('clearAuthErrorKey', global => {
  return {
    ...global,
    authErrorKey: undefined
  };
});
(0,_index__WEBPACK_IMPORTED_MODULE_14__.addActionHandler)('disableHistoryAnimations', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  setTimeout(() => {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_14__.getGlobal)();
    global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
      shouldSkipHistoryAnimations: false
    }, tabId);
    (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      document.body.classList.remove('no-animate');
    });
  }, HISTORY_ANIMATION_DURATION);
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_16__.updateTabState)(global, {
    shouldSkipHistoryAnimations: true
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_14__.setGlobal)(global, {
    forceSyncOnIOs: true
  });
});

/***/ }),

/***/ "./src/global/actions/ui/settings.ts":
/*!*******************************************!*\
  !*** ./src/global/actions/ui/settings.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_debugConsole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/debugConsole */ "./src/util/debugConsole.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _util_perfomanceSettings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/perfomanceSettings */ "./src/util/perfomanceSettings.ts");
/* harmony import */ var _util_switchTheme__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/switchTheme */ "./src/util/switchTheme.ts");
/* harmony import */ var _util_theme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/theme */ "./src/util/theme.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../index */ "./src/global/index.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../selectors */ "./src/global/selectors/index.ts");















let prevGlobal;
(0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.addCallback)(global => {
  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions
  const {
    updatePageTitle,
    updateShouldDebugExportedSenders,
    updateShouldEnableDebugLog
  } = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getActions)();
  const oldGlobal = prevGlobal;
  prevGlobal = global;
  if (!oldGlobal) return;
  const settings = global.settings.byKey;
  const prevSettings = oldGlobal.settings.byKey;
  const performance = global.settings.performance;
  const prevPerformance = oldGlobal.settings.performance;
  const peerColors = global.peerColors;
  const prevPeerColors = oldGlobal.peerColors;
  if (peerColors && peerColors !== prevPeerColors) {
    (0,_util_theme__WEBPACK_IMPORTED_MODULE_8__.updatePeerColors)(peerColors.general);
  }
  if (performance !== prevPerformance) {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
      (0,_util_perfomanceSettings__WEBPACK_IMPORTED_MODULE_6__.applyPerformanceSettings)(performance);
    });
  }
  if (settings.theme !== prevSettings.theme) {
    const withAnimation = document.hasFocus() ? (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectCanAnimateInterface)(global) : false;
    (0,_util_switchTheme__WEBPACK_IMPORTED_MODULE_7__["default"])(settings.theme, withAnimation);
  }
  if (settings.language !== prevSettings.language) {
    (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.oldSetLanguage)(settings.language);
  }
  if (settings.timeFormat !== prevSettings.timeFormat) {
    (0,_util_oldLangProvider__WEBPACK_IMPORTED_MODULE_5__.setTimeFormat)(settings.timeFormat);
  }
  if (settings.messageTextSize !== prevSettings.messageTextSize) {
    document.documentElement.style.setProperty('--composer-text-size', `${Math.max(settings.messageTextSize, _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_IOS ? 16 : 15)}px`);
    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(settings.messageTextSize * 1.3125)}px`);
    document.documentElement.style.setProperty('--message-text-size', `${settings.messageTextSize}px`);
    document.documentElement.setAttribute('data-message-text-size', settings.messageTextSize.toString());
  }
  if (settings.canDisplayChatInTitle !== prevSettings.canDisplayChatInTitle) {
    updatePageTitle();
  }
  if (settings.shouldForceHttpTransport !== prevSettings.shouldForceHttpTransport) {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_10__.callApi)('setForceHttpTransport', Boolean(settings.shouldForceHttpTransport));
  }
  if (settings.shouldAllowHttpTransport !== prevSettings.shouldAllowHttpTransport) {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_10__.callApi)('setAllowHttpTransport', Boolean(settings.shouldAllowHttpTransport));
    if (!settings.shouldAllowHttpTransport && settings.shouldForceHttpTransport) {
      global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
      global = {
        ...global,
        settings: {
          ...global.settings,
          byKey: {
            ...global.settings.byKey,
            shouldForceHttpTransport: false
          }
        }
      };
      (0,_index__WEBPACK_IMPORTED_MODULE_11__.setGlobal)(global);
    }
  }
  if (settings.shouldDebugExportedSenders !== prevSettings.shouldDebugExportedSenders) {
    updateShouldDebugExportedSenders();
  }
  if (settings.shouldCollectDebugLogs !== prevSettings.shouldCollectDebugLogs) {
    updateShouldEnableDebugLog();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('updateShouldEnableDebugLog', global => {
  const {
    settings
  } = global;
  if (settings.byKey.shouldCollectDebugLogs) {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_10__.setShouldEnableDebugLog)(true);
    (0,_util_debugConsole__WEBPACK_IMPORTED_MODULE_3__.initDebugConsole)();
  } else {
    (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_10__.setShouldEnableDebugLog)(false);
    (0,_util_debugConsole__WEBPACK_IMPORTED_MODULE_3__.disableDebugConsole)();
  }
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('updateShouldDebugExportedSenders', global => {
  const {
    settings
  } = global;
  (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_10__.callApi)('setShouldDebugExportedSenders', Boolean(settings.byKey.shouldDebugExportedSenders));
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('setSettingOption', (global, actions, payload) => {
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceSettings)(global, payload);
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('updatePerformanceSettings', (global, actions, payload) => {
  global = {
    ...global,
    settings: {
      ...global.settings,
      performance: {
        ...global.settings.performance,
        ...payload
      }
    }
  };
  return global;
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('setThemeSettings', (global, actions, payload) => {
  const {
    theme,
    ...settings
  } = payload;
  return (0,_reducers__WEBPACK_IMPORTED_MODULE_12__.replaceThemeSettings)(global, theme, settings);
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('requestNextSettingsScreen', (global, actions, payload) => {
  const {
    screen,
    foldersAction,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_13__.updateTabState)(global, {
    nextSettingsScreen: screen,
    nextFoldersAction: foldersAction
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('openEditChatFolder', (global, actions, payload) => {
  const {
    folderId,
    isOnlyInvites,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const chatFolder = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectChatFolder)(global, folderId);
  if (!chatFolder) return;
  actions.requestNextSettingsScreen({
    screen: isOnlyInvites ? _types__WEBPACK_IMPORTED_MODULE_1__.SettingsScreens.FoldersEditFolderInvites : _types__WEBPACK_IMPORTED_MODULE_1__.SettingsScreens.FoldersEditFolderFromChatList,
    foldersAction: {
      type: 'editFolder',
      payload: chatFolder
    },
    tabId
  });
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('openShareChatFolderModal', (global, actions, payload) => {
  const {
    folderId,
    url,
    noRequestNextScreen,
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload;
  const chatFolder = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectChatFolder)(global, folderId);
  const isChatList = chatFolder?.isChatList;
  if (isChatList && !noRequestNextScreen) {
    actions.openEditChatFolder({
      folderId,
      isOnlyInvites: true,
      tabId
    });
    return undefined;
  }
  if (!noRequestNextScreen) actions.requestNextSettingsScreen({
    screen: _types__WEBPACK_IMPORTED_MODULE_1__.SettingsScreens.FoldersShare,
    tabId
  });
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_13__.updateTabState)(global, {
    shareFolderScreen: {
      folderId,
      isFromSettings: Boolean(noRequestNextScreen),
      url
    }
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('closeShareChatFolderModal', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_4__.getCurrentTabId)()
  } = payload || {};
  actions.requestNextSettingsScreen({
    screen: undefined,
    tabId
  });
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_13__.updateTabState)(global, {
    shareFolderScreen: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/cache.ts":
/*!*****************************!*\
  !*** ./src/global/cache.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cacheGlobal: () => (/* binding */ cacheGlobal),
/* harmony export */   clearCaching: () => (/* binding */ clearCaching),
/* harmony export */   forceUpdateCache: () => (/* binding */ forceUpdateCache),
/* harmony export */   initCache: () => (/* binding */ initCache),
/* harmony export */   loadCache: () => (/* binding */ loadCache),
/* harmony export */   loadCachedGlobal: () => (/* binding */ loadCachedGlobal),
/* harmony export */   migrateCache: () => (/* binding */ migrateCache),
/* harmony export */   removeGlobalFromCache: () => (/* binding */ removeGlobalFromCache),
/* harmony export */   serializeGlobal: () => (/* binding */ serializeGlobal),
/* harmony export */   setupCaching: () => (/* binding */ setupCaching)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _util_browser_idb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/browser/idb */ "./src/util/browser/idb.ts");
/* harmony import */ var _util_folderManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/folderManager */ "./src/util/folderManager.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_passcode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/passcode */ "./src/util/passcode.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_sessions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/sessions */ "./src/util/sessions.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index */ "./src/global/index.ts");
/* harmony import */ var _initialState__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./initialState */ "./src/global/initialState.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* eslint-disable eslint-multitab-tt/no-immediate-global */
















const UPDATE_THROTTLE = 5000;
const updateCacheThrottled = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_8__.throttle)(() => (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.onFullyIdle)(() => updateCache()), UPDATE_THROTTLE, false);
const updateCacheForced = () => updateCache(true);
let isCaching = false;
let isRemovingCache = false;
let unsubscribeFromBeforeUnload;
function cacheGlobal(global) {
  return _util_browser_idb__WEBPACK_IMPORTED_MODULE_4__.MAIN_IDB_STORE.set(_config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_KEY, global);
}
function loadCachedGlobal() {
  return _util_browser_idb__WEBPACK_IMPORTED_MODULE_4__.MAIN_IDB_STORE.get(_config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_KEY);
}
function removeGlobalFromCache() {
  return _util_browser_idb__WEBPACK_IMPORTED_MODULE_4__.MAIN_IDB_STORE.del(_config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_KEY);
}
function cacheIsScreenLocked(global) {
  if (global?.passcode?.isScreenLocked) localStorage.setItem(_config__WEBPACK_IMPORTED_MODULE_3__.IS_SCREEN_LOCKED_CACHE_KEY, 'true');
}
function initCache() {
  if (_config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_DISABLED) {
    return;
  }
  const resetCache = () => {
    isRemovingCache = true;
    removeGlobalFromCache().finally(() => {
      localStorage.removeItem(_config__WEBPACK_IMPORTED_MODULE_3__.IS_SCREEN_LOCKED_CACHE_KEY);
      isRemovingCache = false;
      if (!isCaching) {
        return;
      }
      clearCaching();
    });
  };
  (0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('saveSession', () => {
    if (isCaching) {
      return;
    }
    setupCaching();
    updateCacheForced();
  });
  (0,_index__WEBPACK_IMPORTED_MODULE_11__.addActionHandler)('reset', resetCache);
}
async function loadCache(initialState) {
  if (_config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_DISABLED) {
    return undefined;
  }
  const cache = await readCache(initialState);
  if (cache.passcode.hasPasscode || (0,_util_sessions__WEBPACK_IMPORTED_MODULE_9__.hasStoredSession)()) {
    setupCaching();
    return cache;
  } else {
    clearCaching();
    return undefined;
  }
}
function setupCaching() {
  isCaching = true;
  unsubscribeFromBeforeUnload = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_8__.onBeforeUnload)(updateCacheForced, true);
  window.addEventListener('blur', updateCacheForced);
  (0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_1__.addCallback)(updateCacheThrottled);
}
function clearCaching() {
  isCaching = false;
  (0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_1__.removeCallback)(updateCacheThrottled);
  window.removeEventListener('blur', updateCacheForced);
  if (unsubscribeFromBeforeUnload) {
    unsubscribeFromBeforeUnload();
  }
}
async function readCache(initialState) {
  if (_config__WEBPACK_IMPORTED_MODULE_3__.DEBUG) {
    // eslint-disable-next-line no-console
    console.time('global-state-cache-read');
  }
  const json = localStorage.getItem(_config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_KEY);
  const cachedFromLocalStorage = json ? JSON.parse(json) : undefined;
  if (cachedFromLocalStorage) localStorage.removeItem(_config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_KEY);
  const cached = cachedFromLocalStorage || (await loadCachedGlobal());
  if (_config__WEBPACK_IMPORTED_MODULE_3__.DEBUG) {
    // eslint-disable-next-line no-console
    console.timeEnd('global-state-cache-read');
  }
  if (cached) {
    migrateCache(cached, initialState);
  }
  const newState = {
    ...initialState,
    ...cached
  };
  return newState;
}
function migrateCache(cached, initialState) {
  try {
    unsafeMigrateCache(cached, initialState);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error(err);
  }
}
function unsafeMigrateCache(cached, initialState) {
  const untypedCached = cached;
  // Pre-fill settings with defaults
  cached.settings.byKey = {
    ...initialState.settings.byKey,
    ...cached.settings.byKey
  };
  cached.settings.themes = {
    ...initialState.settings.themes,
    ...cached.settings.themes
  };
  cached.chatFolders = {
    ...initialState.chatFolders,
    ...cached.chatFolders
  };
  if (!cached.settings.performance) {
    if (cached.settings.byKey.animationLevel === _config__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_LEVEL_MIN) {
      cached.settings.performance = _initialState__WEBPACK_IMPORTED_MODULE_12__.INITIAL_PERFORMANCE_STATE_MIN;
    } else if (cached.settings.byKey.animationLevel === _config__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_LEVEL_MED) {
      cached.settings.performance = _initialState__WEBPACK_IMPORTED_MODULE_12__.INITIAL_PERFORMANCE_STATE_MID;
    } else {
      cached.settings.performance = initialState.settings.performance;
    }
  }
  cached.settings.performance = {
    ...initialState.settings.performance,
    ...cached.settings.performance
  };
  if (cached.appConfig && !cached.appConfig.limits) {
    cached.appConfig.limits = _config__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_LIMITS;
  }
  if (!cached.chats.similarChannelsById) {
    cached.chats.similarChannelsById = initialState.chats.similarChannelsById;
  }
  if (!cached.chats.similarBotsById) {
    cached.chats.similarBotsById = initialState.chats.similarBotsById;
  }
  if (!cached.chats.lastMessageIds) {
    cached.chats.lastMessageIds = initialState.chats.lastMessageIds;
  }

  // Clear old color storage to optimize cache size
  if (untypedCached?.appConfig?.peerColors) {
    untypedCached.appConfig.peerColors = undefined;
    untypedCached.appConfig.darkPeerColors = undefined;
  }
  if (!cached.fileUploads.byMessageKey) {
    cached.fileUploads.byMessageKey = {};
  }
  if (!cached.reactions) {
    cached.reactions = initialState.reactions;
  }
  if (!cached.quickReplies) {
    cached.quickReplies = initialState.quickReplies;
  }
  if (!cached.users.previewMediaByBotId) {
    cached.users.previewMediaByBotId = initialState.users.previewMediaByBotId;
  }
  if (!cached.chats.loadingParameters) {
    cached.chats.loadingParameters = initialState.chats.loadingParameters;
  }
  if (!cached.topBotApps) {
    cached.topBotApps = initialState.topBotApps;
  }
  if (!cached.reactions.defaultTags?.[0]?.type) {
    cached.reactions = initialState.reactions;
  }
  if (!cached.users.commonChatsById) {
    cached.users.commonChatsById = initialState.users.commonChatsById;
  }
  if (!cached.users.botAppPermissionsById) {
    cached.users.botAppPermissionsById = initialState.users.botAppPermissionsById;
  }
  if (!cached.chats.topicsInfoById) {
    cached.chats.topicsInfoById = initialState.chats.topicsInfoById;
  }
  if (!cached.messages.pollById) {
    cached.messages.pollById = initialState.messages.pollById;
  }
  if (!cached.settings.botVerificationShownPeerIds) {
    cached.settings.botVerificationShownPeerIds = initialState.settings.botVerificationShownPeerIds;
  }
  if (!cached.peers) {
    cached.peers = initialState.peers;
  }
}
function updateCache(force) {
  const global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
  if (isRemovingCache || !isCaching || global.isLoggingOut || !force && (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)()) {
    return;
  }
  forceUpdateCache();
}
function forceUpdateCache(noEncrypt = false) {
  const global = (0,_index__WEBPACK_IMPORTED_MODULE_11__.getGlobal)();
  const {
    hasPasscode,
    isScreenLocked
  } = global.passcode;
  if (hasPasscode) {
    if (!isScreenLocked && !noEncrypt) {
      const serializedGlobal = serializeGlobal(global);
      void (0,_util_passcode__WEBPACK_IMPORTED_MODULE_7__.encryptSession)(undefined, serializedGlobal);
    }
    cacheIsScreenLocked(global);
    cacheGlobal((0,_reducers__WEBPACK_IMPORTED_MODULE_13__.clearGlobalForLockScreen)(global, false));
    return;
  }
  cacheIsScreenLocked(global);
  cacheGlobal(reduceGlobal(global));
}
function reduceGlobal(global) {
  const reducedGlobal = {
    ..._initialState__WEBPACK_IMPORTED_MODULE_12__.INITIAL_GLOBAL_STATE,
    ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pick)(global, ['appConfig', 'config', 'authState', 'authPhoneNumber', 'authRememberMe', 'authNearestCountry', 'attachMenu', 'currentUserId', 'contactList', 'topPeers', 'topInlineBots', 'topBotApps', 'recentEmojis', 'recentCustomEmojis', 'push', 'serviceNotifications', 'attachmentSettings', 'leftColumnWidth', 'archiveSettings', 'mediaViewer', 'audioPlayer', 'shouldShowContextMenuHint', 'trustedBotIds', 'recentlyFoundChatIds', 'peerColors', 'savedReactionTags', 'timezones', 'availableEffectById']),
    lastIsChatInfoShown: !(0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_15__.getIsMobile)() ? global.lastIsChatInfoShown : undefined,
    customEmojis: reduceCustomEmojis(global),
    users: reduceUsers(global),
    chats: reduceChats(global),
    messages: reduceMessages(global),
    settings: reduceSettings(global),
    chatFolders: reduceChatFolders(global),
    groupCalls: reduceGroupCalls(global),
    reactions: {
      ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pick)(global.reactions, ['defaultTags', 'recentReactions', 'topReactions', 'effectReactions', 'hash']),
      availableReactions: reduceAvailableReactions(global.reactions.availableReactions)
    },
    passcode: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pick)(global.passcode, ['isScreenLocked', 'hasPasscode', 'invalidAttemptsCount', 'timeoutUntil'])
  };
  return reducedGlobal;
}
function serializeGlobal(global) {
  return JSON.stringify(reduceGlobal(global));
}
function reduceCustomEmojis(global) {
  const {
    lastRendered,
    byId
  } = global.customEmojis;
  const idsToSave = lastRendered.slice(0, _config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT);
  const byIdToSave = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pick)(byId, idsToSave);
  return {
    byId: byIdToSave,
    lastRendered: idsToSave,
    forEmoji: {},
    added: {},
    statusRecent: {}
  };
}
function reduceUsers(global) {
  const {
    users: {
      byId,
      statusesById,
      fullInfoById,
      botAppPermissionsById
    },
    currentUserId
  } = global;
  const currentChatIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.compact)(Object.values(global.byTabId).map(({
    id: tabId
  }) => (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectCurrentMessageList)(global, tabId))).map(({
    chatId
  }) => chatId).filter(chatId => (0,_helpers__WEBPACK_IMPORTED_MODULE_10__.isUserId)(chatId));
  const visibleUserIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.unique)((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.compact)(Object.values(global.byTabId).flatMap(({
    id: tabId
  }) => (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectVisibleUsers)(global, tabId)?.map(u => u.id) || [])));
  const chatStoriesUserIds = currentChatIds.flatMap(chatId => Object.values((0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectChatMessages)(global, chatId) || {})).map(message => message.content.storyData?.peerId || message.content.webPage?.story?.peerId).filter(id => Boolean(id) && (0,_helpers__WEBPACK_IMPORTED_MODULE_10__.isUserId)(id));
  const attachBotIds = Object.keys(global.attachMenu?.bots || {});
  const idsToSave = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.unique)([...(currentUserId ? [currentUserId] : []), ...currentChatIds, ...chatStoriesUserIds, ...(visibleUserIds || []), ...attachBotIds, ...(global.topPeers.userIds || []), ...(global.recentlyFoundChatIds?.filter(_helpers__WEBPACK_IMPORTED_MODULE_10__.isUserId) || []), ...((0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID)?.slice(0, _config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT).filter(_helpers__WEBPACK_IMPORTED_MODULE_10__.isUserId) || []), ...((0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID)?.filter(_helpers__WEBPACK_IMPORTED_MODULE_10__.isUserId) || []), ...(global.contactList?.userIds || []), ...Object.keys(byId)]).slice(0, _config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_USER_LIST_LIMIT);
  return {
    ..._initialState__WEBPACK_IMPORTED_MODULE_12__.INITIAL_GLOBAL_STATE.users,
    byId: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(byId, idsToSave),
    statusesById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(statusesById, idsToSave),
    fullInfoById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(fullInfoById, idsToSave),
    botAppPermissionsById
  };
}
function reduceChats(global) {
  const {
    chats: {
      byId
    },
    currentUserId
  } = global;
  const currentChatIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.compact)(Object.values(global.byTabId).map(({
    id: tabId
  }) => {
    return (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectCurrentMessageList)(global, tabId);
  })).map(({
    chatId
  }) => chatId);
  const messagesChatIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.compact)(Object.values(global.byTabId).flatMap(({
    id: tabId
  }) => {
    const messageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectCurrentMessageList)(global, tabId);
    if (!messageList) return undefined;
    const messages = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectChatMessages)(global, messageList.chatId);
    const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectViewportIds)(global, messageList.chatId, messageList.threadId, tabId);
    return viewportIds?.map(id => {
      const message = messages[id];
      if (!message) return undefined;
      const content = message.content;
      const replyPeer = message.replyInfo?.type === 'message' && message.replyInfo.replyToPeerId;
      return content.storyData?.peerId || content.webPage?.story?.peerId || replyPeer;
    });
  }));
  const idsToSave = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.unique)([...(currentUserId ? [currentUserId] : []), ...currentChatIds, ...messagesChatIds, ...(global.recentlyFoundChatIds || []), ...((0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID)?.slice(0, _config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT) || []), ...((0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID) || []), ...((0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID) || []), ...Object.keys(byId)]).slice(0, _config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT);
  return {
    ...global.chats,
    similarChannelsById: {},
    similarBotsById: {},
    isFullyLoaded: {},
    loadingParameters: _initialState__WEBPACK_IMPORTED_MODULE_12__.INITIAL_GLOBAL_STATE.chats.loadingParameters,
    byId: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(global.chats.byId, idsToSave),
    fullInfoById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(global.chats.fullInfoById, idsToSave),
    lastMessageIds: {
      all: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(global.chats.lastMessageIds.all || {}, idsToSave),
      saved: global.chats.lastMessageIds.saved
    },
    topicsInfoById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(global.chats.topicsInfoById, currentChatIds)
  };
}
function reduceMessages(global) {
  const {
    currentUserId
  } = global;
  const byChatId = {};
  const currentChatIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.compact)(Object.values(global.byTabId).map(({
    id: tabId
  }) => (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectCurrentMessageList)(global, tabId))).map(({
    chatId
  }) => chatId);
  const forumPanelChatIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.compact)(Object.values(global.byTabId).map(({
    forumPanelChatId
  }) => forumPanelChatId));
  const chatIdsToSave = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.unique)([...currentChatIds, ...(currentUserId ? [currentUserId] : []), ...forumPanelChatIds, ...((0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID) || []), ...((0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID)?.slice(0, _config__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT) || [])]);
  const openedChatThreadIds = Object.values(global.byTabId).reduce((acc, {
    id: tabId
  }) => {
    const {
      chatId: tabChatId,
      threadId
    } = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectCurrentMessageList)(global, tabId) || {};
    if (!tabChatId || !threadId || threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID) {
      return acc;
    }
    const current = acc[tabChatId] || new Set();
    current.add(threadId);
    acc[tabChatId] = current;
    return acc;
  }, {});
  const pollIdsToSave = [];
  chatIdsToSave.forEach(chatId => {
    const current = global.messages.byChatId[chatId];
    if (!current) {
      return;
    }
    const chatLastMessageId = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectChatLastMessageId)(global, chatId);
    const openedThreadIds = Array.from(openedChatThreadIds[chatId] || []);
    const commentThreadIds = Object.values(global.messages.byChatId[chatId].threadsById || {}).map(({
      threadInfo
    }) => threadInfo?.isCommentsInfo ? threadInfo?.originMessageId : undefined).filter(Boolean);
    const threadIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.unique)(openedThreadIds.concat(commentThreadIds));
    const threadsToSave = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(current.threadsById, [_api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID, ...threadIds]);
    const viewportIdsToSave = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.unique)(Object.values(threadsToSave).flatMap(thread => thread.lastViewportIds || []));
    const topics = (0,_selectors__WEBPACK_IMPORTED_MODULE_14__.selectTopics)(global, chatId);
    const topicLastMessageIds = topics && forumPanelChatIds.includes(chatId) ? Object.values(topics).map(({
      lastMessageId
    }) => lastMessageId) : [];
    const savedLastMessageIds = chatId === currentUserId && global.chats.lastMessageIds.saved ? Object.values(global.chats.lastMessageIds.saved) : [];
    const lastMessageIdsToSave = [chatLastMessageId].concat(topicLastMessageIds).concat(savedLastMessageIds).filter(Boolean);
    const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pick)(current.byId, viewportIdsToSave.concat(lastMessageIdsToSave));
    const threadsById = Object.keys(threadsToSave).reduce((acc, key) => {
      const thread = threadsToSave[Number(key)];
      acc[Number(key)] = {
        ...thread,
        listedIds: thread.lastViewportIds,
        pinnedIds: undefined,
        typingStatus: undefined
      };
      return acc;
    }, {});
    const cleanedById = Object.values(byId).reduce((acc, message) => {
      if (!message) return acc;
      let cleanedMessage = omitLocalMedia(message);
      cleanedMessage = omitLocalPaidReactions(cleanedMessage);
      acc[message.id] = cleanedMessage;
      if (message.content.pollId) {
        pollIdsToSave.push(message.content.pollId);
      }
      return acc;
    }, {});
    byChatId[chatId] = {
      byId: cleanedById,
      threadsById
    };
  });
  return {
    byChatId,
    pollById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(global.messages.pollById, pollIdsToSave),
    sponsoredByChatId: {}
  };
}
function omitLocalPaidReactions(message) {
  if (!message.reactions?.results.length) return message;
  return {
    ...message,
    reactions: {
      ...message.reactions,
      results: message.reactions.results.map(reaction => {
        if (reaction.localAmount) {
          return {
            ...reaction,
            localAmount: undefined
          };
        }
        return reaction;
      })
    }
  };
}
function omitLocalMedia(message) {
  const {
    photo,
    video,
    document,
    sticker
  } = message.content;
  return {
    ...message,
    content: {
      ...message.content,
      photo: photo && {
        ...photo,
        blobUrl: undefined
      },
      video: video && {
        ...video,
        blobUrl: undefined,
        previewBlobUrl: undefined
      },
      document: document && {
        ...document,
        previewBlobUrl: undefined
      },
      sticker: sticker && {
        ...sticker,
        isPreloadedGlobally: undefined
      }
    },
    previousLocalId: undefined
  };
}
function reduceSettings(global) {
  const {
    byKey,
    themes,
    performance,
    botVerificationShownPeerIds,
    miniAppsCachedPosition,
    miniAppsCachedSize
  } = global.settings;
  return {
    byKey,
    themes,
    performance,
    privacy: {},
    notifyExceptions: {},
    botVerificationShownPeerIds,
    miniAppsCachedPosition,
    miniAppsCachedSize
  };
}
function reduceChatFolders(global) {
  return {
    ...global.chatFolders
  };
}
function reduceGroupCalls(global) {
  return {
    ...global.groupCalls,
    byId: {},
    activeGroupCallId: undefined
  };
}
function reduceAvailableReactions(availableReactions) {
  return availableReactions?.map(r => (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pick)(r, ['reaction', 'staticIcon', 'title', 'isInactive']));
}

/***/ }),

/***/ "./src/global/helpers/bots.ts":
/*!************************************!*\
  !*** ./src/global/helpers/bots.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertToApiChatType: () => (/* binding */ convertToApiChatType),
/* harmony export */   getBotCoverMediaHash: () => (/* binding */ getBotCoverMediaHash),
/* harmony export */   getWebAppKey: () => (/* binding */ getWebAppKey),
/* harmony export */   isSystemBot: () => (/* binding */ isSystemBot)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");

function getBotCoverMediaHash(photo) {
  return `photo${photo.id}?size=x`;
}
function convertToApiChatType(type) {
  if (type === 'channels') return 'channels';
  if (type === 'chats' || type === 'groups') return 'chats';
  if (type === 'users') return 'users';
  if (type === 'bots') return 'bots';
  return undefined;
}
function getWebAppKey(webApp) {
  if (webApp.requestUrl) return webApp.requestUrl;
  if (webApp.appName) return `${webApp.botId}?appName=${webApp.appName}`;
  return webApp.botId;
}
function isSystemBot(botId) {
  return botId === _config__WEBPACK_IMPORTED_MODULE_0__.REPLIES_USER_ID || botId === _config__WEBPACK_IMPORTED_MODULE_0__.VERIFICATION_CODES_USER_ID;
}

/***/ }),

/***/ "./src/global/helpers/chats.ts":
/*!*************************************!*\
  !*** ./src/global/helpers/chats.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterChatsByName: () => (/* binding */ filterChatsByName),
/* harmony export */   getAllowedAttachmentOptions: () => (/* binding */ getAllowedAttachmentOptions),
/* harmony export */   getCanDeleteChat: () => (/* binding */ getCanDeleteChat),
/* harmony export */   getCanManageTopic: () => (/* binding */ getCanManageTopic),
/* harmony export */   getCanPostInChat: () => (/* binding */ getCanPostInChat),
/* harmony export */   getChatAvatarHash: () => (/* binding */ getChatAvatarHash),
/* harmony export */   getChatLink: () => (/* binding */ getChatLink),
/* harmony export */   getChatTitle: () => (/* binding */ getChatTitle),
/* harmony export */   getChatTypeString: () => (/* binding */ getChatTypeString),
/* harmony export */   getCleanPeerId: () => (/* binding */ getCleanPeerId),
/* harmony export */   getCustomPeerFromInvite: () => (/* binding */ getCustomPeerFromInvite),
/* harmony export */   getFolderDescriptionText: () => (/* binding */ getFolderDescriptionText),
/* harmony export */   getForumComposerPlaceholder: () => (/* binding */ getForumComposerPlaceholder),
/* harmony export */   getGroupStatus: () => (/* binding */ getGroupStatus),
/* harmony export */   getHasAdminRight: () => (/* binding */ getHasAdminRight),
/* harmony export */   getIsSavedDialog: () => (/* binding */ getIsSavedDialog),
/* harmony export */   getMessageSenderName: () => (/* binding */ getMessageSenderName),
/* harmony export */   getMessageSendingRestrictionReason: () => (/* binding */ getMessageSendingRestrictionReason),
/* harmony export */   getOrderedTopics: () => (/* binding */ getOrderedTopics),
/* harmony export */   getPeerColorCount: () => (/* binding */ getPeerColorCount),
/* harmony export */   getPeerColorKey: () => (/* binding */ getPeerColorKey),
/* harmony export */   getPeerIdDividend: () => (/* binding */ getPeerIdDividend),
/* harmony export */   getPrivateChatUserId: () => (/* binding */ getPrivateChatUserId),
/* harmony export */   isAnonymousForwardsChat: () => (/* binding */ isAnonymousForwardsChat),
/* harmony export */   isChannelId: () => (/* binding */ isChannelId),
/* harmony export */   isChatAdmin: () => (/* binding */ isChatAdmin),
/* harmony export */   isChatArchived: () => (/* binding */ isChatArchived),
/* harmony export */   isChatBasicGroup: () => (/* binding */ isChatBasicGroup),
/* harmony export */   isChatChannel: () => (/* binding */ isChatChannel),
/* harmony export */   isChatGroup: () => (/* binding */ isChatGroup),
/* harmony export */   isChatPublic: () => (/* binding */ isChatPublic),
/* harmony export */   isChatSuperGroup: () => (/* binding */ isChatSuperGroup),
/* harmony export */   isChatWithRepliesBot: () => (/* binding */ isChatWithRepliesBot),
/* harmony export */   isChatWithVerificationCodesBot: () => (/* binding */ isChatWithVerificationCodesBot),
/* harmony export */   isCommonBoxChat: () => (/* binding */ isCommonBoxChat),
/* harmony export */   isPeerChat: () => (/* binding */ isPeerChat),
/* harmony export */   isPeerUser: () => (/* binding */ isPeerUser),
/* harmony export */   isUserId: () => (/* binding */ isUserId),
/* harmony export */   isUserRightBanned: () => (/* binding */ isUserRightBanned),
/* harmony export */   selectIsChatMuted: () => (/* binding */ selectIsChatMuted),
/* harmony export */   selectShouldShowMessagePreview: () => (/* binding */ selectShouldShowMessagePreview),
/* harmony export */   toChannelId: () => (/* binding */ toChannelId)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_searchWords__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/searchWords */ "./src/util/searchWords.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! .. */ "./src/global/index.ts");
/* harmony import */ var _bots__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bots */ "./src/global/helpers/bots.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./users */ "./src/global/helpers/users.ts");







const FOREVER_BANNED_DATE = Date.now() / 1000 + 31622400; // 366 days

function isUserId(entityId) {
  return !entityId.startsWith('-');
}
function isPeerChat(entity) {
  return 'title' in entity;
}
function isPeerUser(entity) {
  return !isPeerChat(entity);
}
function isChannelId(entityId) {
  return entityId.length === _config__WEBPACK_IMPORTED_MODULE_1__.CHANNEL_ID_LENGTH && entityId.startsWith('-1');
}
function toChannelId(mtpId) {
  return `-1${mtpId.padStart(_config__WEBPACK_IMPORTED_MODULE_1__.CHANNEL_ID_LENGTH - 2, '0')}`;
}
function isChatGroup(chat) {
  return isChatBasicGroup(chat) || isChatSuperGroup(chat);
}
function isChatBasicGroup(chat) {
  return chat.type === 'chatTypeBasicGroup';
}
function isChatSuperGroup(chat) {
  return chat.type === 'chatTypeSuperGroup';
}
function isChatChannel(chat) {
  return chat.type === 'chatTypeChannel';
}
function isCommonBoxChat(chat) {
  return chat.type === 'chatTypePrivate' || chat.type === 'chatTypeBasicGroup';
}
function isChatWithRepliesBot(chatId) {
  return chatId === _config__WEBPACK_IMPORTED_MODULE_1__.REPLIES_USER_ID;
}
function isChatWithVerificationCodesBot(chatId) {
  return chatId === _config__WEBPACK_IMPORTED_MODULE_1__.VERIFICATION_CODES_USER_ID;
}
function isAnonymousForwardsChat(chatId) {
  return chatId === _config__WEBPACK_IMPORTED_MODULE_1__.ANONYMOUS_USER_ID;
}
function getChatTypeString(chat) {
  switch (chat.type) {
    case 'chatTypePrivate':
      return 'PrivateChat';
    case 'chatTypeBasicGroup':
    case 'chatTypeSuperGroup':
      return 'AccDescrGroup';
    case 'chatTypeChannel':
      return 'AccDescrChannel';
    default:
      return 'Chat';
  }
}
function getPrivateChatUserId(chat) {
  if (chat.type !== 'chatTypePrivate' && chat.type !== 'chatTypeSecret') {
    return undefined;
  }
  return chat.id;
}
function getChatTitle(lang, chat, isSelf = false) {
  if (isSelf) {
    return lang('SavedMessages');
  }
  return chat.title || lang('HiddenName');
}
function getChatLink(chat) {
  const activeUsername = (0,_users__WEBPACK_IMPORTED_MODULE_6__.getMainUsername)(chat);
  return activeUsername ? `${_config__WEBPACK_IMPORTED_MODULE_1__.TME_LINK_PREFIX}${activeUsername}` : undefined;
}
function getChatAvatarHash(owner, size = 'normal', avatarPhotoId = owner.avatarPhotoId) {
  if (!avatarPhotoId) {
    return undefined;
  }
  switch (size) {
    case 'big':
      return `profile${owner.id}?${avatarPhotoId}`;
    default:
      return `avatar${owner.id}?${avatarPhotoId}`;
  }
}
function isChatAdmin(chat) {
  return Boolean(chat.adminRights || chat.isCreator);
}
function getHasAdminRight(chat, key) {
  return chat.adminRights?.[key] || false;
}
function getCanManageTopic(chat, topic) {
  if (topic.id === _config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_TOPIC_ID) return chat.isCreator;
  return chat.isCreator || getHasAdminRight(chat, 'manageTopics') || topic.isOwner;
}
function isUserRightBanned(chat, key, chatFullInfo) {
  const unrestrictedByBoosts = chatFullInfo?.boostsToUnrestrict && (chatFullInfo.boostsApplied || 0) >= chatFullInfo.boostsToUnrestrict;
  return Boolean(chat.currentUserBannedRights?.[key] || chat.defaultBannedRights?.[key] && !unrestrictedByBoosts);
}
function getCanPostInChat(chat, topic, isMessageThread, chatFullInfo) {
  if (topic) {
    if (chat.isForum) {
      if (chat.isNotJoined) {
        return false;
      }
      if (topic?.isClosed && !topic.isOwner && !getHasAdminRight(chat, 'manageTopics')) {
        return false;
      }
    }
  }
  if (chat.isRestricted || chat.isForbidden || chat.migratedTo || !isMessageThread && chat.isNotJoined || (0,_bots__WEBPACK_IMPORTED_MODULE_5__.isSystemBot)(chat.id) || isAnonymousForwardsChat(chat.id)) {
    return false;
  }
  if (chat.isCreator) {
    return true;
  }
  if (isUserId(chat.id)) {
    return true;
  }
  if (isChatChannel(chat)) {
    return getHasAdminRight(chat, 'postMessages');
  }
  return isChatAdmin(chat) || !isUserRightBanned(chat, 'sendMessages', chatFullInfo);
}
function getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot = false, isStoryReply = false) {
  if (!chat) {
    return {
      canAttachMedia: false,
      canAttachPolls: false,
      canSendStickers: false,
      canSendGifs: false,
      canAttachEmbedLinks: false,
      canSendPhotos: false,
      canSendVideos: false,
      canSendRoundVideos: false,
      canSendAudios: false,
      canSendVoices: false,
      canSendPlainText: false,
      canSendDocuments: false
    };
  }
  const isAdmin = isChatAdmin(chat);
  return {
    canAttachMedia: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendMedia', chatFullInfo),
    canAttachPolls: !isStoryReply && (isAdmin || !isUserRightBanned(chat, 'sendPolls', chatFullInfo)) && (!isUserId(chat.id) || isChatWithBot),
    canSendStickers: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendStickers', chatFullInfo),
    canSendGifs: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendGifs', chatFullInfo),
    canAttachEmbedLinks: !isStoryReply && (isAdmin || !isUserRightBanned(chat, 'embedLinks', chatFullInfo)),
    canSendPhotos: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendPhotos', chatFullInfo),
    canSendVideos: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendVideos', chatFullInfo),
    canSendRoundVideos: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendRoundvideos', chatFullInfo),
    canSendAudios: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendAudios', chatFullInfo),
    canSendVoices: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendVoices', chatFullInfo),
    canSendPlainText: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendPlain', chatFullInfo),
    canSendDocuments: isAdmin || isStoryReply || !isUserRightBanned(chat, 'sendDocs', chatFullInfo)
  };
}
function getMessageSendingRestrictionReason(lang, currentUserBannedRights, defaultBannedRights) {
  if (currentUserBannedRights?.sendMessages) {
    const {
      untilDate
    } = currentUserBannedRights;
    return untilDate && untilDate < FOREVER_BANNED_DATE ? lang('Channel.Persmission.Denied.SendMessages.Until', lang('formatDateAtTime', [(0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.formatDateToString)(new Date(untilDate * 1000), lang.code), (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.formatTime)(lang, untilDate * 1000)])) : lang('Channel.Persmission.Denied.SendMessages.Forever');
  }
  if (defaultBannedRights?.sendMessages) {
    return lang('Channel.Persmission.Denied.SendMessages.DefaultRestrictedText');
  }
  return undefined;
}
function getForumComposerPlaceholder(lang, chat, threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, topics, isReplying) {
  if (!chat?.isForum) {
    return undefined;
  }
  if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
    if (isReplying || topics && !topics[_config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_TOPIC_ID]?.isClosed) return undefined;
    return lang('lng_forum_replies_only');
  }
  const topic = topics?.[Number(threadId)];
  if (!topic) {
    return undefined;
  }
  if (topic.isClosed && !topic.isOwner && !getHasAdminRight(chat, 'manageTopics')) {
    return lang('TopicClosedByAdmin');
  }
  return undefined;
}
function isChatArchived(chat) {
  return chat.folderId === _config__WEBPACK_IMPORTED_MODULE_1__.ARCHIVED_FOLDER_ID;
}
function selectIsChatMuted(chat, notifySettings, notifyExceptions = {}) {
  // If this chat is in exceptions they take precedence
  if (notifyExceptions[chat.id] && notifyExceptions[chat.id].isMuted !== undefined) {
    return notifyExceptions[chat.id].isMuted;
  }
  return chat.isMuted || isUserId(chat.id) && !notifySettings.hasPrivateChatsNotifications || isChatChannel(chat) && !notifySettings.hasBroadcastNotifications || isChatGroup(chat) && !notifySettings.hasGroupNotifications;
}
function selectShouldShowMessagePreview(chat, notifySettings, notifyExceptions = {}) {
  const {
    hasPrivateChatsMessagePreview = true,
    hasBroadcastMessagePreview = true,
    hasGroupMessagePreview = true
  } = notifySettings;
  // If this chat is in exceptions they take precedence
  if (notifyExceptions[chat.id] && notifyExceptions[chat.id].shouldShowPreviews !== undefined) {
    return notifyExceptions[chat.id].shouldShowPreviews;
  }
  return isUserId(chat.id) && hasPrivateChatsMessagePreview || isChatChannel(chat) && hasBroadcastMessagePreview || isChatGroup(chat) && hasGroupMessagePreview;
}
function getCanDeleteChat(chat) {
  return isChatBasicGroup(chat) || (isChatSuperGroup(chat) || isChatChannel(chat)) && chat.isCreator;
}
function getFolderDescriptionText(lang, folder, chatsCount) {
  const {
    excludedChatIds,
    includedChatIds,
    bots,
    groups,
    contacts,
    nonContacts,
    channels
  } = folder;
  const filters = [bots, groups, contacts, nonContacts, channels];

  // If folder has multiple additive filters or uses include/exclude lists,
  // we display folder chats count
  if (chatsCount !== undefined && (Object.values(filters).filter(Boolean).length > 1 || excludedChatIds?.length || includedChatIds?.length)) {
    return lang('Chats', chatsCount);
  }

  // Otherwise, we return a short description of a single filter
  if (bots) {
    return lang('FilterBots');
  } else if (groups) {
    return lang('FilterGroups');
  } else if (channels) {
    return lang('FilterChannels');
  } else if (contacts) {
    return lang('FilterContacts');
  } else if (nonContacts) {
    return lang('FilterNonContacts');
  } else {
    return undefined;
  }
}
function getMessageSenderName(lang, chatId, sender) {
  if (!sender || isUserId(chatId)) {
    return undefined;
  }
  if (isPeerChat(sender)) {
    if (chatId === sender.id) return undefined;
    return sender.title;
  }
  if (sender.isSelf) {
    return lang('FromYou');
  }
  return (0,_users__WEBPACK_IMPORTED_MODULE_6__.getUserFirstOrLastName)(sender);
}
function filterChatsByName(lang, chatIds, chatsById, query, currentUserId) {
  if (!query) {
    return chatIds;
  }
  const searchWords = (0,_util_searchWords__WEBPACK_IMPORTED_MODULE_3__.prepareSearchWordsForNeedle)(query);
  return chatIds.filter(id => {
    const chat = chatsById[id];
    if (!chat) {
      return false;
    }
    const isSelf = id === currentUserId;
    const translatedTitle = getChatTitle(lang, chat, isSelf);
    if (isSelf) {
      // Search both "Saved Messages" and user title
      return searchWords(translatedTitle) || searchWords(chat.title);
    }
    return searchWords(translatedTitle) || Boolean(chat.usernames?.find(({
      username
    }) => searchWords(username)));
  });
}
function isChatPublic(chat) {
  return chat.usernames?.some(({
    isActive
  }) => isActive);
}
function getOrderedTopics(topics, pinnedOrder, shouldSortByLastMessage = false) {
  if (shouldSortByLastMessage) {
    return topics.sort((a, b) => b.lastMessageId - a.lastMessageId);
  } else {
    const pinned = topics.filter(topic => topic.isPinned);
    const ordered = topics.filter(topic => !topic.isPinned && !topic.isHidden).sort((a, b) => b.lastMessageId - a.lastMessageId);
    const hidden = topics.filter(topic => !topic.isPinned && topic.isHidden).sort((a, b) => b.lastMessageId - a.lastMessageId);
    const pinnedOrdered = pinnedOrder ? pinnedOrder.map(id => pinned.find(topic => topic.id === id)).filter(Boolean) : pinned;
    return [...pinnedOrdered, ...ordered, ...hidden];
  }
}
function getCleanPeerId(peerId) {
  return isChannelId(peerId)
  // Remove -1 and leading zeros
  ? peerId.replace(/^-10+/, '') : peerId.replace('-', '');
}
function getPeerIdDividend(peerId) {
  return Math.abs(Number(getCleanPeerId(peerId)));
}
function getPeerColorKey(peer) {
  if (peer?.color?.color) return peer.color.color;
  return peer ? getPeerIdDividend(peer.id) % 7 : 0;
}
function getPeerColorCount(peer) {
  const key = getPeerColorKey(peer);
  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global
  return (0,___WEBPACK_IMPORTED_MODULE_4__.getGlobal)().peerColors?.general[key].colors?.length || 1;
}
function getIsSavedDialog(chatId, threadId, currentUserId) {
  return chatId === currentUserId && threadId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
}
function getGroupStatus(lang, chat) {
  const chatTypeString = lang(getChatTypeString(chat));
  const {
    membersCount
  } = chat;
  if (chat.isRestricted) {
    return chatTypeString === 'Channel' ? 'channel is inaccessible' : 'group is inaccessible';
  }
  if (!membersCount) {
    return chatTypeString;
  }
  return chatTypeString === 'Channel' ? lang('Subscribers', membersCount, 'i') : lang('Members', membersCount, 'i');
}
function getCustomPeerFromInvite(invite) {
  const {
    title,
    color,
    isVerified,
    isFake,
    isScam
  } = invite;
  return {
    isCustomPeer: true,
    title,
    peerColorId: color,
    isVerified,
    fakeType: isFake ? 'fake' : isScam ? 'scam' : undefined
  };
}

/***/ }),

/***/ "./src/global/helpers/getEmojiOnlyCountForMessage.ts":
/*!***********************************************************!*\
  !*** ./src/global/helpers/getEmojiOnlyCountForMessage.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getEmojiOnlyCountForMessage: () => (/* binding */ getEmojiOnlyCountForMessage)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_emoji_parseEmojiOnlyString__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/emoji/parseEmojiOnlyString */ "./src/util/emoji/parseEmojiOnlyString.ts");


function getEmojiOnlyCountForMessage(content, groupedId) {
  if (!content.text) return undefined;
  return !groupedId && Object.keys(content).length === 1 // Only text is present
  && !content.text.entities?.some(entity => entity.type !== _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji) && (0,_util_emoji_parseEmojiOnlyString__WEBPACK_IMPORTED_MODULE_1__["default"])(content.text.text) || undefined;
}

/***/ }),

/***/ "./src/global/helpers/index.ts":
/*!*************************************!*\
  !*** ./src/global/helpers/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addPaidReaction: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.addPaidReaction),
/* harmony export */   appendProgressiveQueryParameters: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.appendProgressiveQueryParameters),
/* harmony export */   areReactionsEmpty: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.areReactionsEmpty),
/* harmony export */   buildApiInputPrivacyRules: () => (/* reexport safe */ _misc__WEBPACK_IMPORTED_MODULE_9__.buildApiInputPrivacyRules),
/* harmony export */   buildChatThreadKey: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_4__.buildChatThreadKey),
/* harmony export */   buildStaticMapHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.buildStaticMapHash),
/* harmony export */   canEditMedia: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.canEditMedia),
/* harmony export */   canReplaceMessageMedia: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.canReplaceMessageMedia),
/* harmony export */   canSendReaction: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.canSendReaction),
/* harmony export */   checkIfHasUnreadReactions: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.checkIfHasUnreadReactions),
/* harmony export */   containsCustomEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_8__.containsCustomEmoji),
/* harmony export */   convertToApiChatType: () => (/* reexport safe */ _bots__WEBPACK_IMPORTED_MODULE_6__.convertToApiChatType),
/* harmony export */   extractMessageText: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.extractMessageText),
/* harmony export */   filterChatsByName: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.filterChatsByName),
/* harmony export */   filterUsersByName: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.filterUsersByName),
/* harmony export */   getAllowedAttachmentOptions: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getAllowedAttachmentOptions),
/* harmony export */   getAttachmentMediaType: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getAttachmentMediaType),
/* harmony export */   getAudioHasCover: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getAudioHasCover),
/* harmony export */   getAudioMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getAudioMediaHash),
/* harmony export */   getBotCoverMediaHash: () => (/* reexport safe */ _bots__WEBPACK_IMPORTED_MODULE_6__.getBotCoverMediaHash),
/* harmony export */   getCanAddContact: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.getCanAddContact),
/* harmony export */   getCanDeleteChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getCanDeleteChat),
/* harmony export */   getCanManageTopic: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getCanManageTopic),
/* harmony export */   getCanPostInChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getCanPostInChat),
/* harmony export */   getChatAvatarHash: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getChatAvatarHash),
/* harmony export */   getChatLink: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getChatLink),
/* harmony export */   getChatMediaMessageIds: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getChatMediaMessageIds),
/* harmony export */   getChatTitle: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getChatTitle),
/* harmony export */   getChatTypeString: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getChatTypeString),
/* harmony export */   getCleanPeerId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getCleanPeerId),
/* harmony export */   getCustomPeerFromInvite: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getCustomPeerFromInvite),
/* harmony export */   getDocumentMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getDocumentMediaHash),
/* harmony export */   getExpiredMessageContentDescription: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getExpiredMessageContentDescription),
/* harmony export */   getExpiredMessageDescription: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getExpiredMessageDescription),
/* harmony export */   getFirstLinkInMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getFirstLinkInMessage),
/* harmony export */   getFolderDescriptionText: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getFolderDescriptionText),
/* harmony export */   getForumComposerPlaceholder: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getForumComposerPlaceholder),
/* harmony export */   getGamePreviewPhotoHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getGamePreviewPhotoHash),
/* harmony export */   getGamePreviewVideoHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getGamePreviewVideoHash),
/* harmony export */   getGroupStatus: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getGroupStatus),
/* harmony export */   getHasAdminRight: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getHasAdminRight),
/* harmony export */   getIsDownloading: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getIsDownloading),
/* harmony export */   getIsSavedDialog: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getIsSavedDialog),
/* harmony export */   getMainUsername: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.getMainUsername),
/* harmony export */   getMediaDuration: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMediaDuration),
/* harmony export */   getMediaFileSize: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMediaFileSize),
/* harmony export */   getMediaFilename: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMediaFilename),
/* harmony export */   getMediaFormat: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMediaFormat),
/* harmony export */   getMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMediaHash),
/* harmony export */   getMediaThumbUri: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMediaThumbUri),
/* harmony export */   getMediaTransferState: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMediaTransferState),
/* harmony export */   getMessageAction: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageAction),
/* harmony export */   getMessageActionPhoto: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageActionPhoto),
/* harmony export */   getMessageAudio: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageAudio),
/* harmony export */   getMessageContact: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageContact),
/* harmony export */   getMessageContent: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageContent),
/* harmony export */   getMessageContentIds: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageContentIds),
/* harmony export */   getMessageCustomShape: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageCustomShape),
/* harmony export */   getMessageDocument: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageDocument),
/* harmony export */   getMessageDocumentPhoto: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageDocumentPhoto),
/* harmony export */   getMessageDocumentVideo: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageDocumentVideo),
/* harmony export */   getMessageDownloadableMedia: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageDownloadableMedia),
/* harmony export */   getMessageHtmlId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageHtmlId),
/* harmony export */   getMessageInvoice: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageInvoice),
/* harmony export */   getMessageIsSpoiler: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageIsSpoiler),
/* harmony export */   getMessageLink: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageLink),
/* harmony export */   getMessageLocation: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageLocation),
/* harmony export */   getMessageMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageMediaHash),
/* harmony export */   getMessageMediaThumbDataUri: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageMediaThumbDataUri),
/* harmony export */   getMessageOriginalId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageOriginalId),
/* harmony export */   getMessagePaidMedia: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessagePaidMedia),
/* harmony export */   getMessagePhoto: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessagePhoto),
/* harmony export */   getMessagePollId: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessagePollId),
/* harmony export */   getMessageRecentReaction: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.getMessageRecentReaction),
/* harmony export */   getMessageRoundVideo: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageRoundVideo),
/* harmony export */   getMessageSenderName: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getMessageSenderName),
/* harmony export */   getMessageSendingRestrictionReason: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getMessageSendingRestrictionReason),
/* harmony export */   getMessageSingleCustomEmoji: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageSingleCustomEmoji),
/* harmony export */   getMessageSingleInlineButton: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageSingleInlineButton),
/* harmony export */   getMessageSingleRegularEmoji: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageSingleRegularEmoji),
/* harmony export */   getMessageStatefulContent: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageStatefulContent),
/* harmony export */   getMessageSticker: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageSticker),
/* harmony export */   getMessageText: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageText),
/* harmony export */   getMessageTranscription: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getMessageTranscription),
/* harmony export */   getMessageVideo: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageVideo),
/* harmony export */   getMessageVoice: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageVoice),
/* harmony export */   getMessageWebPage: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageWebPage),
/* harmony export */   getMessageWebPageAudio: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageWebPageAudio),
/* harmony export */   getMessageWebPageDocument: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageWebPageDocument),
/* harmony export */   getMessageWebPagePhoto: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageWebPagePhoto),
/* harmony export */   getMessageWebPageVideo: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageWebPageVideo),
/* harmony export */   getOrderedTopics: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getOrderedTopics),
/* harmony export */   getPeerColorCount: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getPeerColorCount),
/* harmony export */   getPeerColorKey: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getPeerColorKey),
/* harmony export */   getPeerFullTitle: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getPeerFullTitle),
/* harmony export */   getPeerIdDividend: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getPeerIdDividend),
/* harmony export */   getPeerStoryHtmlId: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.getPeerStoryHtmlId),
/* harmony export */   getPeerTitle: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getPeerTitle),
/* harmony export */   getPhotoFullDimensions: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getPhotoFullDimensions),
/* harmony export */   getPhotoInlineDimensions: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getPhotoInlineDimensions),
/* harmony export */   getPhotoMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getPhotoMediaHash),
/* harmony export */   getPrivateChatUserId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.getPrivateChatUserId),
/* harmony export */   getProfilePhotoMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getProfilePhotoMediaHash),
/* harmony export */   getReactionKey: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.getReactionKey),
/* harmony export */   getSendingState: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.getSendingState),
/* harmony export */   getStickerHashById: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_8__.getStickerHashById),
/* harmony export */   getStickerMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getStickerMediaHash),
/* harmony export */   getStoryKey: () => (/* reexport safe */ _media__WEBPACK_IMPORTED_MODULE_7__.getStoryKey),
/* harmony export */   getStoryMediaHash: () => (/* reexport safe */ _media__WEBPACK_IMPORTED_MODULE_7__.getStoryMediaHash),
/* harmony export */   getUserFirstOrLastName: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.getUserFirstOrLastName),
/* harmony export */   getUserFullName: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.getUserFullName),
/* harmony export */   getUserReactions: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.getUserReactions),
/* harmony export */   getUserStatus: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.getUserStatus),
/* harmony export */   getVideoDimensions: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getVideoDimensions),
/* harmony export */   getVideoMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getVideoMediaHash),
/* harmony export */   getVideoPreviewMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getVideoPreviewMediaHash),
/* harmony export */   getVideoProfilePhotoMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getVideoProfilePhotoMediaHash),
/* harmony export */   getVoiceMediaHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getVoiceMediaHash),
/* harmony export */   getWebAppKey: () => (/* reexport safe */ _bots__WEBPACK_IMPORTED_MODULE_6__.getWebAppKey),
/* harmony export */   getWebDocumentHash: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.getWebDocumentHash),
/* harmony export */   groupStatetefulContent: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.groupStatetefulContent),
/* harmony export */   hasMediaLocalBlobUrl: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.hasMediaLocalBlobUrl),
/* harmony export */   hasMessageMedia: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.hasMessageMedia),
/* harmony export */   hasMessageText: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.hasMessageText),
/* harmony export */   hasMessageTtl: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.hasMessageTtl),
/* harmony export */   isActionMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isActionMessage),
/* harmony export */   isAnonymousForwardsChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isAnonymousForwardsChat),
/* harmony export */   isAnonymousOwnMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isAnonymousOwnMessage),
/* harmony export */   isChannelId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChannelId),
/* harmony export */   isChatAdmin: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatAdmin),
/* harmony export */   isChatArchived: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatArchived),
/* harmony export */   isChatBasicGroup: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatBasicGroup),
/* harmony export */   isChatChannel: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatChannel),
/* harmony export */   isChatGroup: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatGroup),
/* harmony export */   isChatPublic: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatPublic),
/* harmony export */   isChatSuperGroup: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatSuperGroup),
/* harmony export */   isChatWithRepliesBot: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatWithRepliesBot),
/* harmony export */   isChatWithVerificationCodesBot: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isChatWithVerificationCodesBot),
/* harmony export */   isCommonBoxChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isCommonBoxChat),
/* harmony export */   isDeletedUser: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.isDeletedUser),
/* harmony export */   isDocumentPhoto: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.isDocumentPhoto),
/* harmony export */   isDocumentVideo: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.isDocumentVideo),
/* harmony export */   isExpiredMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isExpiredMessage),
/* harmony export */   isExpiredMessageContent: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isExpiredMessageContent),
/* harmony export */   isForwardedMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isForwardedMessage),
/* harmony export */   isGeoLiveExpired: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isGeoLiveExpired),
/* harmony export */   isHistoryClearMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isHistoryClearMessage),
/* harmony export */   isJoinedChannelMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isJoinedChannelMessage),
/* harmony export */   isMediaLoadableInViewer: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.isMediaLoadableInViewer),
/* harmony export */   isMessageDocumentSticker: () => (/* reexport safe */ _messageMedia__WEBPACK_IMPORTED_MODULE_3__.isMessageDocumentSticker),
/* harmony export */   isMessageFailed: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isMessageFailed),
/* harmony export */   isMessageLocal: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isMessageLocal),
/* harmony export */   isMessageTranslatable: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isMessageTranslatable),
/* harmony export */   isOwnMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isOwnMessage),
/* harmony export */   isPeerChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isPeerChat),
/* harmony export */   isPeerUser: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isPeerUser),
/* harmony export */   isReactionChosen: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.isReactionChosen),
/* harmony export */   isReplyToMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isReplyToMessage),
/* harmony export */   isSameReaction: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.isSameReaction),
/* harmony export */   isServiceNotificationMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isServiceNotificationMessage),
/* harmony export */   isSystemBot: () => (/* reexport safe */ _bots__WEBPACK_IMPORTED_MODULE_6__.isSystemBot),
/* harmony export */   isUploadingFileSticker: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.isUploadingFileSticker),
/* harmony export */   isUserBot: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.isUserBot),
/* harmony export */   isUserId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isUserId),
/* harmony export */   isUserOnline: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.isUserOnline),
/* harmony export */   isUserRightBanned: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.isUserRightBanned),
/* harmony export */   matchLinkInMessageText: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.matchLinkInMessageText),
/* harmony export */   mergeIdRanges: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.mergeIdRanges),
/* harmony export */   orderHistoryIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.orderHistoryIds),
/* harmony export */   orderPinnedIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.orderPinnedIds),
/* harmony export */   selectIsChatMuted: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.selectIsChatMuted),
/* harmony export */   selectShouldShowMessagePreview: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.selectShouldShowMessagePreview),
/* harmony export */   sortReactions: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.sortReactions),
/* harmony export */   sortUserIds: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_0__.sortUserIds),
/* harmony export */   splitMessagesForForwarding: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_2__.splitMessagesForForwarding),
/* harmony export */   stripCustomEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_8__.stripCustomEmoji),
/* harmony export */   toChannelId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_1__.toChannelId),
/* harmony export */   updateReactionCount: () => (/* reexport safe */ _reactions__WEBPACK_IMPORTED_MODULE_5__.updateReactionCount)
/* harmony export */ });
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./users */ "./src/global/helpers/users.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chats */ "./src/global/helpers/chats.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages */ "./src/global/helpers/messages.ts");
/* harmony import */ var _messageMedia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messageMedia */ "./src/global/helpers/messageMedia.ts");
/* harmony import */ var _middleSearch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./middleSearch */ "./src/global/helpers/middleSearch.ts");
/* harmony import */ var _reactions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reactions */ "./src/global/helpers/reactions.ts");
/* harmony import */ var _bots__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bots */ "./src/global/helpers/bots.ts");
/* harmony import */ var _media__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./media */ "./src/global/helpers/media.ts");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./symbols */ "./src/global/helpers/symbols.ts");
/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./misc */ "./src/global/helpers/misc.ts");











/***/ }),

/***/ "./src/global/helpers/media.ts":
/*!*************************************!*\
  !*** ./src/global/helpers/media.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getStoryKey: () => (/* binding */ getStoryKey),
/* harmony export */   getStoryMediaHash: () => (/* binding */ getStoryMediaHash)
/* harmony export */ });
/* harmony import */ var _messageMedia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./messageMedia */ "./src/global/helpers/messageMedia.ts");

const STORY_ALT_VIDEO_WIDTH = 480;
function getStoryMediaHash(story, size = 'preview', isAlt) {
  const isVideo = Boolean(story.content.video);
  if (isVideo) {
    if (isAlt && !story.content.altVideos) return undefined;
    const media = isAlt ? getPreferredAlt(story.content.altVideos) : story.content.video;
    return (0,_messageMedia__WEBPACK_IMPORTED_MODULE_0__.getVideoMediaHash)(media, size);
  }
  return (0,_messageMedia__WEBPACK_IMPORTED_MODULE_0__.getPhotoMediaHash)(story.content.photo, size);
}
function getPreferredAlt(alts) {
  const alt = alts.reduce((prev, curr) => Math.abs((curr.width || 0) - STORY_ALT_VIDEO_WIDTH) < Math.abs((prev.width || 0) - STORY_ALT_VIDEO_WIDTH) ? curr : prev);
  return alt;
}
function getStoryKey(chatId, storyId) {
  return `story${chatId}-${storyId}`;
}

/***/ }),

/***/ "./src/global/helpers/messageMedia.ts":
/*!********************************************!*\
  !*** ./src/global/helpers/messageMedia.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   appendProgressiveQueryParameters: () => (/* binding */ appendProgressiveQueryParameters),
/* harmony export */   buildStaticMapHash: () => (/* binding */ buildStaticMapHash),
/* harmony export */   canEditMedia: () => (/* binding */ canEditMedia),
/* harmony export */   canReplaceMessageMedia: () => (/* binding */ canReplaceMessageMedia),
/* harmony export */   getAudioHasCover: () => (/* binding */ getAudioHasCover),
/* harmony export */   getAudioMediaHash: () => (/* binding */ getAudioMediaHash),
/* harmony export */   getChatMediaMessageIds: () => (/* binding */ getChatMediaMessageIds),
/* harmony export */   getDocumentMediaHash: () => (/* binding */ getDocumentMediaHash),
/* harmony export */   getGamePreviewPhotoHash: () => (/* binding */ getGamePreviewPhotoHash),
/* harmony export */   getGamePreviewVideoHash: () => (/* binding */ getGamePreviewVideoHash),
/* harmony export */   getIsDownloading: () => (/* binding */ getIsDownloading),
/* harmony export */   getMediaDuration: () => (/* binding */ getMediaDuration),
/* harmony export */   getMediaFileSize: () => (/* binding */ getMediaFileSize),
/* harmony export */   getMediaFilename: () => (/* binding */ getMediaFilename),
/* harmony export */   getMediaFormat: () => (/* binding */ getMediaFormat),
/* harmony export */   getMediaHash: () => (/* binding */ getMediaHash),
/* harmony export */   getMediaThumbUri: () => (/* binding */ getMediaThumbUri),
/* harmony export */   getMediaTransferState: () => (/* binding */ getMediaTransferState),
/* harmony export */   getMessageAction: () => (/* binding */ getMessageAction),
/* harmony export */   getMessageActionPhoto: () => (/* binding */ getMessageActionPhoto),
/* harmony export */   getMessageAudio: () => (/* binding */ getMessageAudio),
/* harmony export */   getMessageContact: () => (/* binding */ getMessageContact),
/* harmony export */   getMessageContent: () => (/* binding */ getMessageContent),
/* harmony export */   getMessageContentIds: () => (/* binding */ getMessageContentIds),
/* harmony export */   getMessageDocument: () => (/* binding */ getMessageDocument),
/* harmony export */   getMessageDocumentPhoto: () => (/* binding */ getMessageDocumentPhoto),
/* harmony export */   getMessageDocumentVideo: () => (/* binding */ getMessageDocumentVideo),
/* harmony export */   getMessageDownloadableMedia: () => (/* binding */ getMessageDownloadableMedia),
/* harmony export */   getMessageInvoice: () => (/* binding */ getMessageInvoice),
/* harmony export */   getMessageIsSpoiler: () => (/* binding */ getMessageIsSpoiler),
/* harmony export */   getMessageLocation: () => (/* binding */ getMessageLocation),
/* harmony export */   getMessageMediaHash: () => (/* binding */ getMessageMediaHash),
/* harmony export */   getMessageMediaThumbDataUri: () => (/* binding */ getMessageMediaThumbDataUri),
/* harmony export */   getMessagePaidMedia: () => (/* binding */ getMessagePaidMedia),
/* harmony export */   getMessagePhoto: () => (/* binding */ getMessagePhoto),
/* harmony export */   getMessagePollId: () => (/* binding */ getMessagePollId),
/* harmony export */   getMessageRoundVideo: () => (/* binding */ getMessageRoundVideo),
/* harmony export */   getMessageSticker: () => (/* binding */ getMessageSticker),
/* harmony export */   getMessageVideo: () => (/* binding */ getMessageVideo),
/* harmony export */   getMessageVoice: () => (/* binding */ getMessageVoice),
/* harmony export */   getMessageWebPage: () => (/* binding */ getMessageWebPage),
/* harmony export */   getMessageWebPageAudio: () => (/* binding */ getMessageWebPageAudio),
/* harmony export */   getMessageWebPageDocument: () => (/* binding */ getMessageWebPageDocument),
/* harmony export */   getMessageWebPagePhoto: () => (/* binding */ getMessageWebPagePhoto),
/* harmony export */   getMessageWebPageVideo: () => (/* binding */ getMessageWebPageVideo),
/* harmony export */   getPhotoFullDimensions: () => (/* binding */ getPhotoFullDimensions),
/* harmony export */   getPhotoInlineDimensions: () => (/* binding */ getPhotoInlineDimensions),
/* harmony export */   getPhotoMediaHash: () => (/* binding */ getPhotoMediaHash),
/* harmony export */   getProfilePhotoMediaHash: () => (/* binding */ getProfilePhotoMediaHash),
/* harmony export */   getStickerMediaHash: () => (/* binding */ getStickerMediaHash),
/* harmony export */   getVideoDimensions: () => (/* binding */ getVideoDimensions),
/* harmony export */   getVideoMediaHash: () => (/* binding */ getVideoMediaHash),
/* harmony export */   getVideoPreviewMediaHash: () => (/* binding */ getVideoPreviewMediaHash),
/* harmony export */   getVideoProfilePhotoMediaHash: () => (/* binding */ getVideoProfilePhotoMediaHash),
/* harmony export */   getVoiceMediaHash: () => (/* binding */ getVoiceMediaHash),
/* harmony export */   getWebDocumentHash: () => (/* binding */ getWebDocumentHash),
/* harmony export */   hasMediaLocalBlobUrl: () => (/* binding */ hasMediaLocalBlobUrl),
/* harmony export */   hasMessageMedia: () => (/* binding */ hasMessageMedia),
/* harmony export */   isDocumentPhoto: () => (/* binding */ isDocumentPhoto),
/* harmony export */   isDocumentVideo: () => (/* binding */ isDocumentVideo),
/* harmony export */   isMediaLoadableInViewer: () => (/* binding */ isMediaLoadableInViewer),
/* harmony export */   isMessageDocumentSticker: () => (/* binding */ isMessageDocumentSticker)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _components_common_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/common/helpers/documentInfo */ "./src/components/common/helpers/documentInfo.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages */ "./src/global/helpers/messages.ts");




function getMessageContent(message) {
  return message.content;
}
function hasMessageMedia(message) {
  return Boolean(getMessagePhoto(message) || getMessageVideo(message) || getMessageDocument(message) || getMessageSticker(message) || getMessageContact(message) || getMessagePollId(message) || getMessageAction(message) || getMessageAudio(message) || getMessageVoice(message));
}
function canEditMedia(message) {
  const {
    photo,
    video,
    altVideos,
    audio,
    document,
    text,
    webPage,
    ...otherMedia
  } = message.content;
  return !video?.isRound && !Object.keys(otherMedia).length;
}
function getMessagePhoto(message) {
  return message.content.photo;
}
function getMessageActionPhoto(message) {
  return message.content.action?.type === 'suggestProfilePhoto' ? message.content.action.photo : undefined;
}
function getMessageVideo(message) {
  return message.content.video;
}
function getMessageRoundVideo(message) {
  const {
    video
  } = message.content;
  return video?.isRound ? video : undefined;
}
function getMessageAction(message) {
  return message.content.action;
}
function getMessageAudio(message) {
  return message.content.audio;
}
function getMessageVoice(message) {
  return message.content.voice;
}
function getMessageSticker(message) {
  return message.content.sticker;
}
function getMessageDocument(message) {
  return message.content.document;
}
function getMessageWebPageDocument(message) {
  return getMessageWebPage(message)?.document;
}
function isDocumentPhoto(document) {
  return document.innerMediaType === 'photo';
}
function isDocumentVideo(document) {
  return document.innerMediaType === 'video';
}
function isMessageDocumentSticker(message) {
  const document = getMessageDocument(message);
  return document ? document.mimeType === 'image/webp' : undefined;
}
function getMessageContact(message) {
  return message.content.contact;
}
function getMessagePollId(message) {
  return message.content.pollId;
}
function getMessageInvoice(message) {
  return message.content.invoice;
}
function getMessageLocation(message) {
  return message.content.location;
}
function getMessageWebPage(message) {
  return message.content.webPage;
}
function getMessagePaidMedia(message) {
  return message.content.paidMedia;
}
function getMessageWebPagePhoto(message) {
  return getMessageWebPage(message)?.photo;
}
function getMessageDocumentPhoto(message) {
  const document = getMessageDocument(message);
  return document && isDocumentPhoto(document) ? document : undefined;
}
function getMessageWebPageVideo(message) {
  return getMessageWebPage(message)?.video;
}
function getMessageWebPageAudio(message) {
  return getMessageWebPage(message)?.audio;
}
function getMessageDocumentVideo(message) {
  const document = getMessageDocument(message);
  return document && isDocumentVideo(document) ? document : undefined;
}
function getMessageDownloadableMedia(message) {
  return getMessagePhoto(message) || getMessageVideo(message) || getMessageDocument(message) || getMessageSticker(message) || getMessageAudio(message) || getMessageVoice(message) || getMessageWebPagePhoto(message) || getMessageWebPageVideo(message) || getMessageWebPageAudio(message);
}
function getMessageMediaThumbnail(message) {
  const media = getMessagePhoto(message) || getMessageVideo(message) || getMessageDocument(message) || getMessageSticker(message) || getMessageWebPagePhoto(message) || getMessageWebPageVideo(message) || getMessageInvoice(message)?.extendedMedia;
  if (!media) {
    return undefined;
  }
  return media.thumbnail;
}
function getMessageMediaThumbDataUri(message) {
  return getMessageMediaThumbnail(message)?.dataUri;
}
function getMediaThumbUri(media) {
  return media.thumbnail?.dataUri;
}
function getMessageIsSpoiler(message) {
  const media = getMessagePhoto(message) || getMessageVideo(message);
  const invoiceMedia = getMessageInvoice(message)?.extendedMedia;
  return Boolean(invoiceMedia || media?.isSpoiler);
}
function buildStaticMapHash(geo, width, height, zoom, scale) {
  const {
    long,
    lat,
    accessHash,
    accuracyRadius
  } = geo;

  // eslint-disable-next-line max-len
  return `staticMap:${accessHash}?lat=${lat}&long=${long}&w=${width}&h=${height}&zoom=${zoom}&scale=${scale}&accuracyRadius=${accuracyRadius}`;
}
function getMessageMediaHash(message, target) {
  const {
    video,
    sticker,
    audio,
    voice,
    document
  } = message.content;
  const messagePhoto = getMessagePhoto(message) || getMessageWebPagePhoto(message);
  const actionPhoto = getMessageActionPhoto(message);
  const messageVideo = video || getMessageWebPageVideo(message);
  const messageDocument = document || getMessageWebPageDocument(message);
  const messageAudio = audio || getMessageWebPageAudio(message);
  if (messageVideo) {
    return getVideoMediaHash(messageVideo, target);
  }
  if (messagePhoto || actionPhoto) {
    return getPhotoMediaHash(messagePhoto || actionPhoto, target, Boolean(actionPhoto));
  }
  if (messageDocument) {
    return getDocumentMediaHash(messageDocument, target);
  }
  if (sticker) {
    return getStickerMediaHash(sticker, target);
  }
  if (messageAudio) {
    return getAudioMediaHash(messageAudio, target);
  }
  if (voice) {
    return getVoiceMediaHash(voice, target);
  }
  return undefined;
}
function getPhotoMediaHash(photo, target, isAction) {
  const base = `photo${photo.id}`;
  const isVideo = photo.mediaType === 'photo' && photo.isVideo;
  switch (target) {
    case 'micro':
    case 'pictogram':
      return `${base}?size=${isAction ? 'a' : 'm'}`;
    case 'inline':
      return !hasMediaLocalBlobUrl(photo) ? `${base}?size=${isAction ? 'b' : 'x'}` : undefined;
    case 'preview':
      return `${base}?size=${isAction ? 'b' : 'x'}`;
    case 'download':
      return !isVideo ? base : getVideoProfilePhotoMediaHash(photo);
    case 'full':
    default:
      return base;
  }
}
function getProfilePhotoMediaHash(photo) {
  return `photo${photo.id}?size=c`;
}
function getVideoProfilePhotoMediaHash(photo) {
  if (!photo.isVideo) return undefined;
  return `photo${photo.id}?size=u`;
}
function getVideoMediaHash(video, target) {
  const base = `document${video.id}`;
  switch (target) {
    case 'micro':
    case 'pictogram':
      return `${base}?size=m`;
    case 'inline':
      return !hasMediaLocalBlobUrl(video) ? appendProgressiveQueryParameters(video, base) : undefined;
    case 'preview':
      return `${base}?size=x`;
    case 'download':
      return `${base}?download`;
    case 'full':
    default:
      return appendProgressiveQueryParameters(video, base);
  }
}
function getVideoPreviewMediaHash(video) {
  return video.hasVideoPreview ? `document${video.id}?size=v` : undefined;
}
function getDocumentMediaHash(document, target) {
  const base = `document${document.id}`;
  switch (target) {
    case 'micro':
    case 'pictogram':
    case 'inline':
    case 'preview':
      if (!(0,_components_common_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_2__.getDocumentHasPreview)(document) || hasMediaLocalBlobUrl(document)) {
        return undefined;
      }
      return `${base}?size=m`;
    case 'full':
    case 'download':
    default:
      return base;
  }
}
function getAudioMediaHash(audio, target) {
  const base = `document${audio.id}`;
  switch (target) {
    case 'micro':
    case 'pictogram':
      return getAudioHasCover(audio) ? `${base}?size=m` : undefined;
    case 'inline':
      return appendProgressiveQueryParameters(audio, base);
    case 'download':
      return `${base}?download`;
    default:
      return base;
  }
}
function getVoiceMediaHash(voice, target) {
  const base = `document${voice.id}`;
  switch (target) {
    case 'micro':
    case 'pictogram':
      return undefined;
    case 'download':
      return `${base}?download`;
    case 'inline':
    default:
      return base;
  }
}
function getWebDocumentHash(webDocument) {
  if (!webDocument) return undefined;
  return `webDocument:${webDocument.url}`;
}
function getStickerMediaHash(sticker, target) {
  const base = `document${sticker.id}`;
  switch (target) {
    case 'micro':
    case 'pictogram':
      if (!sticker.previewPhotoSizes?.some(size => size.type === 's')) {
        return getStickerMediaHash(sticker, 'preview');
      }
      return `${base}?size=s`;
    case 'preview':
      return `${base}?size=m`;
    case 'download':
      return `${base}?download`;
    case 'inline':
    default:
      return base;
  }
}
function getMediaHash(media, target) {
  switch (media.mediaType) {
    case 'photo':
      return getPhotoMediaHash(media, target);
    case 'video':
      return getVideoMediaHash(media, target);
    case 'document':
      return getDocumentMediaHash(media, target);
    case 'audio':
      return getAudioMediaHash(media, target);
    case 'voice':
      return getVoiceMediaHash(media, target);
    case 'sticker':
      return getStickerMediaHash(media, target);
    case 'webDocument':
      return getWebDocumentHash(media);
    default:
      return undefined;
  }
}
function getGamePreviewPhotoHash(game) {
  const {
    photo
  } = game;
  if (photo) {
    return `photo${photo.id}?size=x`;
  }
  return undefined;
}
function getGamePreviewVideoHash(game) {
  const {
    document
  } = game;
  if (document) {
    return `document${document.id}`;
  }
  return undefined;
}
function appendProgressiveQueryParameters(media, base) {
  if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_PROGRESSIVE_SUPPORTED && _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_SAFARI) {
    return `${base}?fileSize=${media.size}&mimeType=${media.mimeType}`;
  }
  return base;
}
function getAudioHasCover(media) {
  return media.thumbnailSizes && media.thumbnailSizes.length > 0;
}
function getMediaFormat(media, target) {
  const isDocument = media.mediaType === 'document';
  const hasInnerVideo = isDocument && media.innerMediaType === 'video';
  const isVideo = media.mediaType === 'video' || hasInnerVideo;
  const isAudio = media.mediaType === 'audio';
  const isVoice = media.mediaType === 'voice';
  const size = getMediaFileSize(media) || 0; // Media types that do not have `size` are smaller than `MAX_BUFFER_SIZE`

  if (target === 'download') {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_PROGRESSIVE_SUPPORTED && size > _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.MAX_BUFFER_SIZE && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_OPFS_SUPPORTED) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.DownloadUrl;
    }
    return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl;
  }
  if (isVideo && _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_PROGRESSIVE_SUPPORTED && (target === 'full' || target === 'inline')) {
    return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.Progressive;
  }
  if (isAudio || isVoice) {
    // Safari
    if (isVoice && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_OPUS_SUPPORTED) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl;
    }
    return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.Progressive;
  }
  return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl;
}
function getMediaFileSize(media) {
  return 'size' in media ? media.size : undefined;
}
function hasMediaLocalBlobUrl(media) {
  if ('blobUrl' in media) {
    return Boolean(media.blobUrl);
  }
  if ('previewBlobUrl' in media) {
    return Boolean(media.previewBlobUrl);
  }
  return false;
}
function getChatMediaMessageIds(messages, listedIds, isFromSharedMedia = false) {
  return getMessageContentIds(messages, listedIds, isFromSharedMedia ? 'media' : 'inlineMedia');
}
function getPhotoFullDimensions(photo) {
  return photo.sizes.find(size => size.type === 'w') || photo.sizes.find(size => size.type === 'y') || getPhotoInlineDimensions(photo);
}
function getPhotoInlineDimensions(photo) {
  return photo.sizes.find(size => size.type === 'x') || photo.sizes.find(size => size.type === 'm') || photo.sizes.find(size => size.type === 's') || photo.thumbnail;
}
function getVideoDimensions(video) {
  if (video.width && video.height) {
    return video;
  }
  return undefined;
}
function getMediaTransferState(progress, isLoadNeeded = false, isUploading = false) {
  const isTransferring = isUploading || isLoadNeeded;
  const transferProgress = Number(progress);
  return {
    isUploading,
    isTransferring,
    transferProgress
  };
}
function getMessageContentIds(messages, messageIds, contentType) {
  let validator;
  switch (contentType) {
    case 'media':
      validator = message => {
        const video = getMessageVideo(message);
        return getMessagePhoto(message) || video && !video.isRound && !video.isGif;
      };
      break;
    case 'documents':
      validator = getMessageDocument;
      break;
    case 'links':
      validator = message => getMessageWebPage(message) || (0,_messages__WEBPACK_IMPORTED_MODULE_3__.matchLinkInMessageText)(message);
      break;
    case 'audio':
      validator = getMessageAudio;
      break;
    case 'voice':
      validator = message => {
        const video = getMessageVideo(message);
        return getMessageVoice(message) || video && video.isRound;
      };
      break;
    case 'inlineMedia':
      validator = message => {
        const video = getMessageVideo(message);
        const document = getMessageDocument(message);
        return getMessagePhoto(message) || video && !video.isRound && !video.isGif || document && isDocumentPhoto(document) || document && isDocumentVideo(document);
      };
      break;
    default:
      return [];
  }
  return messageIds.reduce((result, messageId) => {
    if (messages[messageId] && validator(messages[messageId])) {
      result.push(messageId);
    }
    return result;
  }, []);
}
function getMediaDuration(message) {
  const {
    audio,
    voice,
    video
  } = getMessageContent(message);
  const media = audio || voice || video || getMessageWebPageVideo(message) || getMessageWebPageAudio(message);
  if (!media) {
    return undefined;
  }
  return media.duration;
}
function canReplaceMessageMedia(message, attachment) {
  const isPhotoOrVideo = Boolean(getMessagePhoto(message) || getMessageWebPagePhoto(message) || Boolean(getMessageVideo(message) || getMessageWebPageVideo(message)));
  const isFile = Boolean(getMessageAudio(message) || getMessageVoice(message) || getMessageDocument(message));
  const fileType = (0,_messages__WEBPACK_IMPORTED_MODULE_3__.getAttachmentMediaType)(attachment);
  return isPhotoOrVideo && (fileType === 'photo' || fileType === 'video') || isFile && (fileType === 'audio' || fileType === 'file');
}
function isMediaLoadableInViewer(newMessage) {
  if (!newMessage.content) return false;
  if (newMessage.content.photo) return true;
  if (newMessage.content.video && !newMessage.content.video.isRound && !newMessage.content.video.isGif) return true;
  return false;
}
function getMediaFilename(media) {
  if ('fileName' in media && media.fileName) {
    return media.fileName;
  }
  if (media.mediaType === 'sticker') {
    const extension = media.isLottie ? 'tgs' : media.isVideo ? 'webm' : 'webp';
    return `${media.id}.${extension}`;
  }
  if (media.mediaType === 'photo') {
    return `${media.id}.${media.isVideo ? 'mp4' : 'jpg'}`;
  }
  if (media.mediaType === 'voice') {
    return `${media.id}.${_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_OPUS_SUPPORTED ? 'ogg' : 'wav'}`;
  }
  if ('id' in media && media.id) {
    return media.id;
  }
  return `${media.mediaType}-${Math.random().toString(36).slice(4)}`;
}
function getIsDownloading(activeDownloads, media) {
  const hash = getMediaHash(media, 'download');
  if (!hash) return false;
  return Boolean(activeDownloads[hash]);
}

/***/ }),

/***/ "./src/global/helpers/messageSummary.ts":
/*!**********************************************!*\
  !*** ./src/global/helpers/messageSummary.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TRUNCATED_SUMMARY_LENGTH: () => (/* binding */ TRUNCATED_SUMMARY_LENGTH),
/* harmony export */   generateBrailleSpoiler: () => (/* binding */ generateBrailleSpoiler),
/* harmony export */   getMediaContentTypeDescription: () => (/* binding */ getMediaContentTypeDescription),
/* harmony export */   getMessageSummaryDescription: () => (/* binding */ getMessageSummaryDescription),
/* harmony export */   getMessageSummaryEmoji: () => (/* binding */ getMessageSummaryEmoji),
/* harmony export */   getMessageSummaryText: () => (/* binding */ getMessageSummaryText),
/* harmony export */   getMessageTextWithSpoilers: () => (/* binding */ getMessageTextWithSpoilers)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_trimText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/trimText */ "./src/util/trimText.ts");
/* harmony import */ var _components_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./messages */ "./src/global/helpers/messages.ts");





const SPOILER_CHARS = ['⠺', '⠵', '⠞', '⠟'];
const TRUNCATED_SUMMARY_LENGTH = 80;
function getMessageSummaryText(lang, message, statefulContent, noEmoji = false, truncateLength = TRUNCATED_SUMMARY_LENGTH, isExtended = false) {
  const emoji = !noEmoji && getMessageSummaryEmoji(message);
  const emojiWithSpace = emoji ? `${emoji} ` : '';
  const text = (0,_util_trimText__WEBPACK_IMPORTED_MODULE_2__["default"])(getMessageTextWithSpoilers(message, statefulContent), truncateLength);
  const description = getMessageSummaryDescription(lang, message, statefulContent, text, isExtended);
  return `${emojiWithSpace}${description}`;
}
function getMessageTextWithSpoilers(message, statefulContent) {
  const transcription = (0,_messages__WEBPACK_IMPORTED_MODULE_4__.getMessageTranscription)(message);
  const textWithoutTranscription = (0,_messages__WEBPACK_IMPORTED_MODULE_4__.getMessageText)(statefulContent?.story || message);
  if (!textWithoutTranscription) {
    return transcription;
  }
  const {
    entities
  } = message.content.text || {};
  if (!entities?.length) {
    return transcription ? `${transcription}\n${textWithoutTranscription}` : textWithoutTranscription;
  }
  const text = entities.reduce((accText, {
    type,
    offset,
    length
  }) => {
    if (type !== _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Spoiler) {
      return accText;
    }
    const spoiler = generateBrailleSpoiler(length);
    return `${accText.substr(0, offset)}${spoiler}${accText.substr(offset + length, accText.length)}`;
  }, textWithoutTranscription);
  return transcription ? `${transcription}\n${text}` : text;
}
function getMessageSummaryEmoji(message) {
  const {
    photo,
    video,
    audio,
    voice,
    document,
    sticker,
    pollId,
    paidMedia
  } = message.content;
  if (message.groupedId || photo || paidMedia) {
    return '🖼';
  }
  if (video) {
    return '📹';
  }
  if (sticker) {
    return sticker.emoji;
  }
  if (audio) {
    return '🎧';
  }
  if (voice) {
    return '🎤';
  }
  if (document) {
    return '📎';
  }
  if (pollId) {
    return '📊';
  }
  return undefined;
}
function getMediaContentTypeDescription(lang, content, statefulContent) {
  return getSummaryDescription(lang, content, statefulContent);
}
function getMessageSummaryDescription(lang, message, statefulContent, truncatedText, isExtended = false) {
  return getSummaryDescription(lang, message.content, statefulContent, message, truncatedText, isExtended);
}
function getSummaryDescription(lang, mediaContent, statefulContent, message, truncatedText, isExtended = false) {
  const {
    text,
    photo,
    video,
    audio,
    voice,
    document,
    sticker,
    contact,
    invoice,
    location,
    game,
    storyData,
    giveaway,
    giveawayResults,
    paidMedia
  } = mediaContent;
  const {
    poll
  } = statefulContent || {};
  let hasUsedTruncatedText = false;
  let summary;
  const boughtExtendedMedia = paidMedia?.isBought && paidMedia.extendedMedia;
  const previewExtendedMedia = paidMedia && !paidMedia.isBought ? paidMedia.extendedMedia : undefined;
  const isPaidMediaAlbum = paidMedia && paidMedia.extendedMedia.length > 1;
  const isPaidMediaSingleVideo = !isPaidMediaAlbum && (boughtExtendedMedia?.[0].video || previewExtendedMedia?.[0].duration);
  const isPaidMediaSinglePhoto = !isPaidMediaAlbum && !isPaidMediaSingleVideo;
  if (message?.groupedId || isPaidMediaAlbum) {
    hasUsedTruncatedText = true;
    summary = truncatedText || lang('lng_in_dlg_album');
  }
  if (photo || isPaidMediaSinglePhoto) {
    hasUsedTruncatedText = true;
    summary = truncatedText || lang('AttachPhoto');
  }
  if (video || isPaidMediaSingleVideo) {
    hasUsedTruncatedText = true;
    summary = truncatedText || lang(video?.isGif ? 'AttachGif' : 'AttachVideo');
  }
  if (sticker) {
    summary = lang('AttachSticker').trim();
  }
  if (audio) {
    summary = getMessageAudioCaption(mediaContent) || lang('AttachMusic');
  }
  if (voice) {
    hasUsedTruncatedText = true;
    summary = truncatedText || lang('AttachAudio');
  }
  if (document) {
    hasUsedTruncatedText = !isExtended;
    summary = isExtended ? document.fileName : truncatedText || document.fileName;
  }
  if (contact) {
    summary = lang('AttachContact');
  }
  if (poll) {
    summary = (0,_components_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_3__.renderTextWithEntities)({
      text: poll.summary.question.text,
      entities: poll.summary.question.entities,
      noLineBreaks: true
    });
  }
  if (invoice) {
    summary = invoice.extendedMedia ? invoice.title : `${lang('PaymentInvoice')}: ${invoice.description}`;
  }
  if (text) {
    if (isExtended && summary && !hasUsedTruncatedText) {
      summary += `\n${truncatedText}`;
    } else {
      summary = truncatedText;
    }
  }
  if (location?.mediaType === 'geo' || location?.mediaType === 'venue') {
    summary = lang('Message.Location');
  }
  if (location?.mediaType === 'geoLive') {
    summary = lang('Message.LiveLocation');
  }
  if (game) {
    summary = `🎮 ${game.title}`;
  }
  if (giveaway) {
    summary = lang('BoostingGiveawayChannelStarted');
  }
  if (giveawayResults) {
    summary = lang('Message.GiveawayEndedWinners', giveawayResults.winnersCount);
  }
  if (storyData) {
    summary = truncatedText || (message ? lang('ForwardedStory') : lang('Chat.ReplyStory'));
  }
  if ((0,_messages__WEBPACK_IMPORTED_MODULE_4__.isExpiredMessageContent)(mediaContent)) {
    const expiredMessageText = (0,_messages__WEBPACK_IMPORTED_MODULE_4__.getExpiredMessageContentDescription)(lang, mediaContent);
    if (expiredMessageText) {
      summary = expiredMessageText;
    }
  }
  return summary || _config__WEBPACK_IMPORTED_MODULE_1__.CONTENT_NOT_SUPPORTED;
}
function generateBrailleSpoiler(length) {
  return new Array(length).fill(undefined).map(() => SPOILER_CHARS[Math.floor(Math.random() * SPOILER_CHARS.length)]).join('');
}
function getMessageAudioCaption(mediaContent) {
  const {
    audio,
    text
  } = mediaContent;
  return audio && [audio.title, audio.performer].filter(Boolean).join(' — ') || text?.text;
}

/***/ }),

/***/ "./src/global/helpers/messages.ts":
/*!****************************************!*\
  !*** ./src/global/helpers/messages.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extractMessageText: () => (/* binding */ extractMessageText),
/* harmony export */   getAttachmentMediaType: () => (/* binding */ getAttachmentMediaType),
/* harmony export */   getExpiredMessageContentDescription: () => (/* binding */ getExpiredMessageContentDescription),
/* harmony export */   getExpiredMessageDescription: () => (/* binding */ getExpiredMessageDescription),
/* harmony export */   getFirstLinkInMessage: () => (/* binding */ getFirstLinkInMessage),
/* harmony export */   getMessageCustomShape: () => (/* binding */ getMessageCustomShape),
/* harmony export */   getMessageHtmlId: () => (/* binding */ getMessageHtmlId),
/* harmony export */   getMessageLink: () => (/* binding */ getMessageLink),
/* harmony export */   getMessageOriginalId: () => (/* binding */ getMessageOriginalId),
/* harmony export */   getMessageSingleCustomEmoji: () => (/* binding */ getMessageSingleCustomEmoji),
/* harmony export */   getMessageSingleInlineButton: () => (/* binding */ getMessageSingleInlineButton),
/* harmony export */   getMessageSingleRegularEmoji: () => (/* binding */ getMessageSingleRegularEmoji),
/* harmony export */   getMessageStatefulContent: () => (/* binding */ getMessageStatefulContent),
/* harmony export */   getMessageText: () => (/* binding */ getMessageText),
/* harmony export */   getMessageTranscription: () => (/* binding */ getMessageTranscription),
/* harmony export */   getPeerFullTitle: () => (/* binding */ getPeerFullTitle),
/* harmony export */   getPeerTitle: () => (/* binding */ getPeerTitle),
/* harmony export */   getSendingState: () => (/* binding */ getSendingState),
/* harmony export */   groupStatetefulContent: () => (/* binding */ groupStatetefulContent),
/* harmony export */   hasMessageText: () => (/* binding */ hasMessageText),
/* harmony export */   hasMessageTtl: () => (/* binding */ hasMessageTtl),
/* harmony export */   isActionMessage: () => (/* binding */ isActionMessage),
/* harmony export */   isAnonymousOwnMessage: () => (/* binding */ isAnonymousOwnMessage),
/* harmony export */   isExpiredMessage: () => (/* binding */ isExpiredMessage),
/* harmony export */   isExpiredMessageContent: () => (/* binding */ isExpiredMessageContent),
/* harmony export */   isForwardedMessage: () => (/* binding */ isForwardedMessage),
/* harmony export */   isGeoLiveExpired: () => (/* binding */ isGeoLiveExpired),
/* harmony export */   isHistoryClearMessage: () => (/* binding */ isHistoryClearMessage),
/* harmony export */   isJoinedChannelMessage: () => (/* binding */ isJoinedChannelMessage),
/* harmony export */   isMessageFailed: () => (/* binding */ isMessageFailed),
/* harmony export */   isMessageLocal: () => (/* binding */ isMessageLocal),
/* harmony export */   isMessageTranslatable: () => (/* binding */ isMessageTranslatable),
/* harmony export */   isOwnMessage: () => (/* binding */ isOwnMessage),
/* harmony export */   isReplyToMessage: () => (/* binding */ isReplyToMessage),
/* harmony export */   isServiceNotificationMessage: () => (/* binding */ isServiceNotificationMessage),
/* harmony export */   isUploadingFileSticker: () => (/* binding */ isUploadingFileSticker),
/* harmony export */   matchLinkInMessageText: () => (/* binding */ matchLinkInMessageText),
/* harmony export */   mergeIdRanges: () => (/* binding */ mergeIdRanges),
/* harmony export */   orderHistoryIds: () => (/* binding */ orderHistoryIds),
/* harmony export */   orderPinnedIds: () => (/* binding */ orderPinnedIds),
/* harmony export */   splitMessagesForForwarding: () => (/* binding */ splitMessagesForForwarding)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../index */ "./src/global/index.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chats */ "./src/global/helpers/chats.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./users */ "./src/global/helpers/users.ts");








const RE_LINK = new RegExp(_config__WEBPACK_IMPORTED_MODULE_1__.RE_LINK_TEMPLATE, 'i');
function getMessageHtmlId(messageId, index) {
  const parts = ['message', messageId.toString().replace('.', '-'), index].filter(Boolean);
  return parts.join('-');
}
function getMessageOriginalId(message) {
  return message.previousLocalId || message.id;
}
function getMessageTranscription(message) {
  const {
    transcriptionId
  } = message;
  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global
  const global = (0,_index__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  return transcriptionId && global.transcriptions[transcriptionId]?.text;
}
function hasMessageText(message) {
  const {
    text,
    sticker,
    photo,
    video,
    audio,
    voice,
    document,
    pollId,
    webPage,
    contact,
    invoice,
    location,
    game,
    action,
    storyData,
    giveaway,
    giveawayResults,
    isExpiredVoice,
    paidMedia
  } = message.content;
  return Boolean(text) || !(sticker || photo || video || audio || voice || document || contact || pollId || webPage || invoice || location || game || action?.phoneCall || storyData || giveaway || giveawayResults || isExpiredVoice || paidMedia);
}
function getMessageStatefulContent(global, message) {
  const poll = message.content.pollId ? global.messages.pollById[message.content.pollId] : undefined;
  const {
    peerId: storyPeerId,
    id: storyId
  } = message.content.storyData || {};
  const story = storyId && storyPeerId ? global.stories.byPeerId[storyPeerId]?.byId[storyId] : undefined;
  return groupStatetefulContent({
    poll,
    story
  });
}
function groupStatetefulContent({
  poll,
  story
}) {
  return {
    poll,
    story: story && 'content' in story ? story : undefined
  };
}
function getMessageText(message) {
  return hasMessageText(message) ? message.content.text?.text || _config__WEBPACK_IMPORTED_MODULE_1__.CONTENT_NOT_SUPPORTED : undefined;
}
function getMessageCustomShape(message) {
  const {
    text,
    sticker,
    photo,
    video,
    audio,
    voice,
    document,
    pollId,
    webPage,
    contact,
    action,
    game,
    invoice,
    location,
    storyData
  } = message.content;
  if (sticker || video?.isRound) {
    return true;
  }
  if (!text || photo || video || audio || voice || document || pollId || webPage || contact || action || game || invoice || location || storyData) {
    return false;
  }
  const hasOtherFormatting = text?.entities?.some(entity => entity.type !== _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji);
  return Boolean(message.emojiOnlyCount && !hasOtherFormatting);
}
function getMessageSingleRegularEmoji(message) {
  const {
    text
  } = message.content;
  if (text?.entities?.length || message.emojiOnlyCount !== 1) {
    return undefined;
  }
  return text.text;
}
function getMessageSingleCustomEmoji(message) {
  const {
    text
  } = message.content;
  if (text?.entities?.length !== 1 || text.entities[0].type !== _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji || message.emojiOnlyCount !== 1) {
    return undefined;
  }
  return text.entities[0].documentId;
}
function getFirstLinkInMessage(message) {
  const {
    text
  } = message.content;
  let match;
  if (text?.entities) {
    const firstTextUrl = text.entities.find(entity => entity.type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.TextUrl);
    if (firstTextUrl) {
      match = firstTextUrl.url.match(RE_LINK);
    }
    if (!match) {
      const firstUrl = text.entities.find(entity => entity.type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Url);
      if (firstUrl) {
        const {
          offset,
          length
        } = firstUrl;
        match = text.text.substring(offset, offset + length).match(RE_LINK);
      }
    }
  }
  if (!match && text) {
    match = text.text.match(RE_LINK);
  }
  if (!match) {
    return undefined;
  }
  return {
    url: match[0],
    domain: match[3]
  };
}
function matchLinkInMessageText(message) {
  const {
    text
  } = message.content;
  const match = text && text.text.match(RE_LINK);
  if (!match) {
    return undefined;
  }
  return {
    url: match[0],
    domain: match[3]
  };
}
function isOwnMessage(message) {
  return message.isOutgoing;
}
function isReplyToMessage(message) {
  return Boolean(message.replyInfo?.type === 'message');
}
function isForwardedMessage(message) {
  return Boolean(message.forwardInfo || message.content.storyData);
}
function isActionMessage(message) {
  return Boolean(message.content.action) || isExpiredMessage(message);
}
function isServiceNotificationMessage(message) {
  return message.chatId === _config__WEBPACK_IMPORTED_MODULE_1__.SERVICE_NOTIFICATIONS_USER_ID && Math.round(message.id) !== message.id;
}
function isAnonymousOwnMessage(message) {
  return Boolean(message.senderId) && !(0,_chats__WEBPACK_IMPORTED_MODULE_6__.isUserId)(message.senderId) && isOwnMessage(message);
}
function getPeerTitle(lang, peer) {
  if (!peer) return undefined;
  if ('isCustomPeer' in peer) {
    // TODO: Remove any after full migration to new lang
    return peer.titleKey ? lang(peer.titleKey) : peer.title;
  }
  return (0,_chats__WEBPACK_IMPORTED_MODULE_6__.isPeerUser)(peer) ? (0,_users__WEBPACK_IMPORTED_MODULE_7__.getUserFirstOrLastName)(peer) : (0,_chats__WEBPACK_IMPORTED_MODULE_6__.getChatTitle)(lang, peer);
}
function getPeerFullTitle(lang, peer) {
  if (!peer) return undefined;
  if ('isCustomPeer' in peer) {
    // TODO: Remove any after full migration to new lang
    return peer.titleKey ? lang(peer.titleKey) : peer.title;
  }
  return (0,_chats__WEBPACK_IMPORTED_MODULE_6__.isPeerUser)(peer) ? (0,_users__WEBPACK_IMPORTED_MODULE_7__.getUserFullName)(peer) : (0,_chats__WEBPACK_IMPORTED_MODULE_6__.getChatTitle)(lang, peer);
}
function getSendingState(message) {
  if (!message.sendingState) {
    return 'succeeded';
  }
  return message.sendingState === 'messageSendingStateFailed' ? 'failed' : 'pending';
}
function isMessageLocal(message) {
  return (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_3__.isLocalMessageId)(message.id);
}
function isMessageFailed(message) {
  return message.sendingState === 'messageSendingStateFailed';
}
function isHistoryClearMessage(message) {
  return message.content.action && message.content.action.type === 'historyClear';
}
function isGeoLiveExpired(message) {
  const {
    location
  } = message.content;
  if (location?.mediaType !== 'geoLive') return false;
  return (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_4__.getServerTime)() - (message.date || 0) >= location.period;
}
function isMessageTranslatable(message, allowOutgoing) {
  const {
    text,
    game
  } = message.content;
  const isLocal = isMessageLocal(message);
  const isServiceNotification = isServiceNotificationMessage(message);
  const isAction = isActionMessage(message);
  return Boolean(text?.text.length && !message.emojiOnlyCount && !game && (allowOutgoing || !message.isOutgoing) && !isLocal && !isServiceNotification && !isAction && !message.isScheduled);
}
function getMessageSingleInlineButton(message) {
  return message.inlineButtons?.length === 1 && message.inlineButtons[0].length === 1 && message.inlineButtons[0][0];
}
function orderHistoryIds(listedIds) {
  return listedIds.sort((a, b) => a - b);
}
function orderPinnedIds(pinnedIds) {
  return pinnedIds.sort((a, b) => b - a);
}
function mergeIdRanges(ranges, idsUpdate) {
  let hasIntersection = false;
  let newOutlyingLists = ranges.length ? ranges.map(list => {
    if ((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.areSortedArraysIntersecting)(list, idsUpdate) && !hasIntersection) {
      hasIntersection = true;
      return orderHistoryIds((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.unique)(list.concat(idsUpdate)));
    }
    return list;
  }) : [idsUpdate];
  if (!hasIntersection) {
    newOutlyingLists = newOutlyingLists.concat([idsUpdate]);
  }
  newOutlyingLists.sort((a, b) => a[0] - b[0]);
  let length = newOutlyingLists.length;
  for (let i = 0; i < length; i++) {
    const array = newOutlyingLists[i];
    const prevArray = newOutlyingLists[i - 1];
    if (prevArray && (prevArray.includes(array[0]) || prevArray.includes(array[0] - 1))) {
      newOutlyingLists[i - 1] = orderHistoryIds((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.unique)(array.concat(prevArray)));
      newOutlyingLists.splice(i, 1);
      length--;
      i--;
    }
  }
  return newOutlyingLists;
}
function extractMessageText(message, inChatList = false) {
  const contentText = message.content.text;
  if (!contentText) return undefined;
  const {
    text
  } = contentText;
  let {
    entities
  } = contentText;
  if (text && 'chatId' in message) {
    if (message.chatId === _config__WEBPACK_IMPORTED_MODULE_1__.SERVICE_NOTIFICATIONS_USER_ID) {
      const authCode = text.match(/^\D*([\d-]{5,7})\D/)?.[1];
      if (authCode) {
        entities = [...(entities || []), {
          type: inChatList ? _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Spoiler : _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Code,
          offset: text.indexOf(authCode),
          length: authCode.length
        }];
        entities.sort((a, b) => a.offset > b.offset ? 1 : -1);
      }
    }
    if (inChatList && message.chatId === _config__WEBPACK_IMPORTED_MODULE_1__.VERIFICATION_CODES_USER_ID && entities) {
      // Wrap code entities in spoiler
      const hasCodeEntities = entities.some(entity => entity.type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Code);
      if (hasCodeEntities) {
        const oldEntities = entities;
        entities = [];
        for (let i = 0; i < oldEntities.length; i++) {
          const entity = oldEntities[i];
          if (entity.type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Code) {
            entities.push({
              type: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Spoiler,
              offset: entity.offset,
              length: entity.length
            });
          }
          entities.push(entity);
        }
      }
    }
  }
  return {
    text,
    entities
  };
}
function getExpiredMessageDescription(langFn, message) {
  return getExpiredMessageContentDescription(langFn, message.content);
}
function getExpiredMessageContentDescription(langFn, mediaContent) {
  const {
    isExpiredVoice,
    isExpiredRoundVideo
  } = mediaContent;
  if (isExpiredVoice) {
    return langFn('Message.VoiceMessageExpired');
  } else if (isExpiredRoundVideo) {
    return langFn('Message.VideoMessageExpired');
  }
  return undefined;
}
function isExpiredMessage(message) {
  return isExpiredMessageContent(message.content);
}
function isExpiredMessageContent(content) {
  const {
    isExpiredVoice,
    isExpiredRoundVideo
  } = content ?? {};
  return Boolean(isExpiredVoice || isExpiredRoundVideo);
}
function hasMessageTtl(message) {
  return message.content?.ttlSeconds !== undefined;
}
function isJoinedChannelMessage(message) {
  return message.content.action && message.content.action.type === 'joinedChannel';
}
function getAttachmentMediaType(attachment) {
  if (_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {
    return 'audio';
  }
  if (attachment.shouldSendAsFile) return 'file';
  if (_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {
    return 'photo';
  }
  if (_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {
    return 'video';
  }
  return 'file';
}
function isUploadingFileSticker(attachment) {
  return attachment ? attachment.mimeType === 'image/webp' || attachment.mimeType === _config__WEBPACK_IMPORTED_MODULE_1__.LOTTIE_STICKER_MIME_TYPE || attachment.mimeType === _config__WEBPACK_IMPORTED_MODULE_1__.VIDEO_STICKER_MIME_TYPE : undefined;
}
function getMessageLink(peer, topicId, messageId) {
  const chatUsername = (0,_users__WEBPACK_IMPORTED_MODULE_7__.getMainUsername)(peer);
  const normalizedId = (0,_chats__WEBPACK_IMPORTED_MODULE_6__.getCleanPeerId)(peer.id);
  const chatPart = chatUsername || `c/${normalizedId}`;
  const topicPart = topicId && topicId !== _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID ? `/${topicId}` : '';
  const messagePart = messageId ? `/${messageId}` : '';
  return `${_config__WEBPACK_IMPORTED_MODULE_1__.TME_LINK_PREFIX}${chatPart}${topicPart}${messagePart}`;
}
function splitMessagesForForwarding(messages, limit) {
  const result = [];
  let currentArr = [];

  // Group messages by `groupedId`
  messages.reduce((acc, message) => {
    const lastGroup = acc[acc.length - 1];
    if (message.groupedId && lastGroup?.[0]?.groupedId === message.groupedId) {
      lastGroup.push(message);
      return acc;
    }
    acc.push([message]);
    return acc;
  }, []).forEach(batch => {
    // Fit them into `limit` size
    if (currentArr.length + batch.length > limit) {
      result.push(currentArr);
      currentArr = [];
    }
    currentArr.push(...batch);
  });
  if (currentArr.length) {
    result.push(currentArr);
  }
  return result;
}

/***/ }),

/***/ "./src/global/helpers/middleSearch.ts":
/*!********************************************!*\
  !*** ./src/global/helpers/middleSearch.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildChatThreadKey: () => (/* binding */ buildChatThreadKey)
/* harmony export */ });
function buildChatThreadKey(chatId, threadId) {
  return `${chatId}_${threadId}`;
}

/***/ }),

/***/ "./src/global/helpers/misc.ts":
/*!************************************!*\
  !*** ./src/global/helpers/misc.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildApiInputPrivacyRules: () => (/* binding */ buildApiInputPrivacyRules)
/* harmony export */ });
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chats */ "./src/global/helpers/chats.ts");


function buildApiInputPrivacyRules(global, {
  visibility,
  isUnspecified,
  allowedIds,
  blockedIds,
  shouldAllowPremium,
  botsPrivacy
}) {
  const {
    users: {
      byId: usersById
    },
    chats: {
      byId: chatsById
    }
  } = global;
  const [allowedUserIds, allowedChatIds] = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_0__.partition)(allowedIds, _chats__WEBPACK_IMPORTED_MODULE_1__.isUserId);
  const [blockedUserIds, blockedChatIds] = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_0__.partition)(blockedIds, _chats__WEBPACK_IMPORTED_MODULE_1__.isUserId);
  const rules = {
    visibility,
    isUnspecified,
    allowedUsers: allowedUserIds.map(userId => usersById[userId]).filter(Boolean),
    allowedChats: allowedChatIds.map(chatId => chatsById[chatId]).filter(Boolean),
    blockedUsers: blockedUserIds.map(userId => usersById[userId]).filter(Boolean),
    blockedChats: blockedChatIds.map(chatId => chatsById[chatId]).filter(Boolean),
    shouldAllowPremium,
    botsPrivacy
  };
  return rules;
}

/***/ }),

/***/ "./src/global/helpers/reactions.ts":
/*!*****************************************!*\
  !*** ./src/global/helpers/reactions.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addPaidReaction: () => (/* binding */ addPaidReaction),
/* harmony export */   areReactionsEmpty: () => (/* binding */ areReactionsEmpty),
/* harmony export */   canSendReaction: () => (/* binding */ canSendReaction),
/* harmony export */   checkIfHasUnreadReactions: () => (/* binding */ checkIfHasUnreadReactions),
/* harmony export */   getMessageRecentReaction: () => (/* binding */ getMessageRecentReaction),
/* harmony export */   getReactionKey: () => (/* binding */ getReactionKey),
/* harmony export */   getUserReactions: () => (/* binding */ getUserReactions),
/* harmony export */   isReactionChosen: () => (/* binding */ isReactionChosen),
/* harmony export */   isSameReaction: () => (/* binding */ isSameReaction),
/* harmony export */   sortReactions: () => (/* binding */ sortReactions),
/* harmony export */   updateReactionCount: () => (/* binding */ updateReactionCount)
/* harmony export */ });
function getMessageRecentReaction(message) {
  return message.isOutgoing ? message.reactions?.recentReactions?.[0] : undefined;
}
function checkIfHasUnreadReactions(global, reactions) {
  const {
    currentUserId
  } = global;
  return reactions?.recentReactions?.some(({
    isUnread,
    isOwn,
    peerId
  }) => isUnread && !isOwn && currentUserId !== peerId);
}
function areReactionsEmpty(reactions) {
  return !reactions.results.some(({
    count,
    localAmount
  }) => count || localAmount);
}
function getReactionKey(reaction) {
  switch (reaction.type) {
    case 'emoji':
      return `emoji-${reaction.emoticon}`;
    case 'custom':
      return `document-${reaction.documentId}`;
    case 'paid':
      return 'paid';
    default:
      {
        // Legacy reactions
        const uniqueValue = reaction.emoticon || reaction.documentId;
        return `unsupported-${uniqueValue}`;
      }
  }
}
function isSameReaction(first, second) {
  if (first === second) {
    return true;
  }
  if (!first || !second) {
    return false;
  }
  return getReactionKey(first) === getReactionKey(second);
}
function canSendReaction(reaction, chatReactions) {
  if (chatReactions.type === 'all') {
    return reaction.type === 'emoji' || chatReactions.areCustomAllowed;
  }
  if (chatReactions.type === 'some') {
    return chatReactions.allowed.some(r => isSameReaction(r, reaction));
  }
  return false;
}
function sortReactions(reactions, topReactions) {
  return reactions.slice().sort((left, right) => {
    const reactionOne = left ? 'reaction' in left ? left.reaction : left : undefined;
    const reactionTwo = right ? 'reaction' in right ? right.reaction : right : undefined;
    if (reactionOne?.type === 'paid') return -1;
    if (reactionTwo?.type === 'paid') return 1;
    const indexOne = topReactions?.findIndex(reaction => isSameReaction(reaction, reactionOne)) || 0;
    const indexTwo = topReactions?.findIndex(reaction => isSameReaction(reaction, reactionTwo)) || 0;
    return (indexOne > -1 ? indexOne : Infinity) - (indexTwo > -1 ? indexTwo : Infinity);
  });
}
function getUserReactions(message) {
  return message.reactions?.results?.filter(r => isReactionChosen(r)).sort((a, b) => a.chosenOrder - b.chosenOrder).map(r => r.reaction) || [];
}
function isReactionChosen(reaction) {
  return reaction.chosenOrder !== undefined;
}
function updateReactionCount(reactionCount, newReactions) {
  const results = reactionCount.map(current => isReactionChosen(current) ? {
    ...current,
    chosenOrder: undefined,
    count: current.count - 1
  } : current).filter(({
    count
  }) => count > 0);
  newReactions.forEach((reaction, i) => {
    const existingIndex = results.findIndex(r => isSameReaction(r.reaction, reaction));
    if (existingIndex > -1) {
      results[existingIndex] = {
        ...results[existingIndex],
        chosenOrder: i,
        count: results[existingIndex].count + 1
      };
    } else {
      results.push({
        reaction,
        chosenOrder: i,
        count: 1
      });
    }
  });
  return results;
}
function addPaidReaction(reactionCount, count, isAnonymous) {
  const results = [];
  const hasPaid = reactionCount.some(current => current.reaction.type === 'paid');
  if (hasPaid) {
    reactionCount.forEach(current => {
      if (current.reaction.type === 'paid') {
        results.push({
          ...current,
          localAmount: (current.localAmount || 0) + count,
          chosenOrder: -1,
          localIsPrivate: isAnonymous !== undefined ? isAnonymous : current.localIsPrivate,
          localPreviousChosenOrder: current.chosenOrder
        });
        return;
      }
      results.push(current);
    });
    return results;
  }
  return [{
    reaction: {
      type: 'paid'
    },
    count: 0,
    chosenOrder: -1,
    localAmount: count,
    localIsPrivate: isAnonymous
  }, ...reactionCount];
}

/***/ }),

/***/ "./src/global/helpers/replies.ts":
/*!***************************************!*\
  !*** ./src/global/helpers/replies.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMessageReplyInfo: () => (/* binding */ getMessageReplyInfo),
/* harmony export */   getStoryReplyInfo: () => (/* binding */ getStoryReplyInfo)
/* harmony export */ });
function getMessageReplyInfo(message) {
  const {
    replyInfo
  } = message;
  if (!replyInfo || replyInfo.type !== 'message') return undefined;
  return replyInfo;
}
function getStoryReplyInfo(message) {
  const {
    replyInfo
  } = message;
  if (!replyInfo || replyInfo.type !== 'story') return undefined;
  return replyInfo;
}

/***/ }),

/***/ "./src/global/helpers/symbols.ts":
/*!***************************************!*\
  !*** ./src/global/helpers/symbols.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   containsCustomEmoji: () => (/* binding */ containsCustomEmoji),
/* harmony export */   getStickerHashById: () => (/* binding */ getStickerHashById),
/* harmony export */   stripCustomEmoji: () => (/* binding */ stripCustomEmoji)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");

function getStickerHashById(stickerId, isPreview) {
  const base = `sticker${stickerId}`;
  return !isPreview ? base : `${base}?size=m`;
}
function containsCustomEmoji(formattedText) {
  return formattedText.entities?.some(e => e.type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji);
}
function stripCustomEmoji(text) {
  if (!text.entities) return text;
  const entities = text.entities.filter(entity => entity.type !== _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji);
  return {
    ...text,
    entities
  };
}

/***/ }),

/***/ "./src/global/helpers/users.ts":
/*!*************************************!*\
  !*** ./src/global/helpers/users.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterUsersByName: () => (/* binding */ filterUsersByName),
/* harmony export */   getCanAddContact: () => (/* binding */ getCanAddContact),
/* harmony export */   getMainUsername: () => (/* binding */ getMainUsername),
/* harmony export */   getPeerStoryHtmlId: () => (/* binding */ getPeerStoryHtmlId),
/* harmony export */   getUserFirstOrLastName: () => (/* binding */ getUserFirstOrLastName),
/* harmony export */   getUserFullName: () => (/* binding */ getUserFullName),
/* harmony export */   getUserStatus: () => (/* binding */ getUserStatus),
/* harmony export */   isDeletedUser: () => (/* binding */ isDeletedUser),
/* harmony export */   isUserBot: () => (/* binding */ isUserBot),
/* harmony export */   isUserOnline: () => (/* binding */ isUserOnline),
/* harmony export */   sortUserIds: () => (/* binding */ sortUserIds)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_dates_units__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/dates/units */ "./src/util/dates/units.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_phoneNumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/phoneNumber */ "./src/util/phoneNumber.ts");
/* harmony import */ var _util_searchWords__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/searchWords */ "./src/util/searchWords.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/serverTime */ "./src/util/serverTime.ts");







function getUserFirstOrLastName(user) {
  if (!user) {
    return undefined;
  }
  switch (user.type) {
    case 'userTypeBot':
      return user.firstName;
    case 'userTypeRegular':
      {
        return user.firstName || user.lastName;
      }
    case 'userTypeDeleted':
    case 'userTypeUnknown':
      {
        return 'Deleted';
      }
    default:
      return undefined;
  }
}
function getUserFullName(user) {
  if (!user) {
    return undefined;
  }
  if (isDeletedUser(user)) {
    return 'Deleted Account';
  }
  switch (user.type) {
    case 'userTypeBot':
    case 'userTypeRegular':
      {
        if (user.firstName && user.lastName) {
          return `${user.firstName} ${user.lastName}`;
        }
        if (user.firstName) {
          return user.firstName;
        }
        if (user.lastName) {
          return user.lastName;
        }
        if (user.phoneNumber) {
          return `+${(0,_util_phoneNumber__WEBPACK_IMPORTED_MODULE_4__.formatPhoneNumber)(user.phoneNumber)}`;
        }
        break;
      }
  }
  return undefined;
}
function getUserStatus(lang, user, userStatus) {
  if (user.id === _config__WEBPACK_IMPORTED_MODULE_0__.SERVICE_NOTIFICATIONS_USER_ID) {
    return lang('ServiceNotifications');
  }
  if (user.isSupport) {
    return lang('SupportStatus');
  }
  if (user.type && user.type === 'userTypeBot') {
    if (user.botActiveUsers) {
      return lang('BotUsers', user.botActiveUsers, 'i');
    }
    return lang('Bot');
  }
  if (!userStatus) {
    return '';
  }
  switch (userStatus.type) {
    case 'userStatusEmpty':
      {
        return lang('ALongTimeAgo');
      }
    case 'userStatusLastMonth':
      {
        return lang('WithinAMonth');
      }
    case 'userStatusLastWeek':
      {
        return lang('WithinAWeek');
      }
    case 'userStatusOffline':
      {
        const {
          wasOnline
        } = userStatus;
        if (!wasOnline) return lang('LastSeen.Offline');
        const serverTimeOffset = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_6__.getServerTimeOffset)();
        const now = new Date(Date.now() + serverTimeOffset * 1000);
        const wasOnlineDate = new Date(wasOnline * 1000);
        if (wasOnlineDate >= now) {
          return lang('LastSeen.JustNow');
        }
        const diff = new Date(now.getTime() - wasOnlineDate.getTime());

        // within a minute
        if (diff.getTime() / 1000 < 60) {
          return lang('LastSeen.JustNow');
        }

        // within an hour
        if (diff.getTime() / 1000 < 60 * 60) {
          const minutes = Math.floor(diff.getTime() / 1000 / 60);
          return lang('LastSeen.MinutesAgo', minutes);
        }

        // today
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const serverToday = new Date(today.getTime() + serverTimeOffset * 1000);
        if (wasOnlineDate > serverToday) {
          // up to 6 hours ago
          if (diff.getTime() / 1000 < 6 * 60 * 60) {
            const hours = Math.floor(diff.getTime() / 1000 / 60 / 60);
            return lang('LastSeen.HoursAgo', hours);
          }

          // other
          return lang('LastSeen.TodayAt', (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__.formatTime)(lang, wasOnlineDate));
        }

        // yesterday
        const yesterday = new Date();
        yesterday.setDate(now.getDate() - 1);
        yesterday.setHours(0, 0, 0, 0);
        const serverYesterday = new Date(yesterday.getTime() + serverTimeOffset * 1000);
        if (wasOnlineDate > serverYesterday) {
          return lang('LastSeen.YesterdayAt', (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__.formatTime)(lang, wasOnlineDate));
        }
        return lang('LastSeen.AtDate', (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_1__.formatFullDate)(lang, wasOnlineDate));
      }
    case 'userStatusOnline':
      {
        return lang('Online');
      }
    case 'userStatusRecently':
      {
        return lang('Lately');
      }
    default:
      return undefined;
  }
}
function isUserOnline(user, userStatus, withSelfOnline = false) {
  const {
    id,
    type
  } = user;
  if (!userStatus) {
    return false;
  }
  if (id === _config__WEBPACK_IMPORTED_MODULE_0__.SERVICE_NOTIFICATIONS_USER_ID) {
    return false;
  }
  if (user.isSelf && !withSelfOnline) {
    return false;
  }
  return userStatus.type === 'userStatusOnline' && type !== 'userTypeBot';
}
function isDeletedUser(user) {
  return (user.type === 'userTypeDeleted' || user.type === 'userTypeUnknown') && user.id !== _config__WEBPACK_IMPORTED_MODULE_0__.SERVICE_NOTIFICATIONS_USER_ID;
}
function isUserBot(user) {
  return user.type === 'userTypeBot';
}
function getCanAddContact(user) {
  return !user.isSelf && !user.isContact && !isUserBot(user) && user.id !== _config__WEBPACK_IMPORTED_MODULE_0__.ANONYMOUS_USER_ID;
}
function sortUserIds(userIds, usersById, userStatusesById, priorityIds) {
  return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.orderBy)(userIds, id => {
    const now = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_6__.getServerTime)();
    if (priorityIds && priorityIds.includes(id)) {
      // Assuming that online status expiration date can't be as far as two days from now,
      // this should place prioritized on top of the list.
      // Then we subtract index of `id` in `priorityIds` to preserve selected order
      return now + 48 * 60 * 60 - (priorityIds.length - priorityIds.indexOf(id));
    }
    const user = usersById[id];
    const userStatus = userStatusesById[id];
    if (!user || !userStatus) {
      return 0;
    }
    if (userStatus.type === 'userStatusOnline') {
      return userStatus.expires;
    } else if (userStatus.type === 'userStatusOffline' && userStatus.wasOnline) {
      return userStatus.wasOnline;
    }
    switch (userStatus.type) {
      case 'userStatusRecently':
        return now - _util_dates_units__WEBPACK_IMPORTED_MODULE_2__.DAY;
      case 'userStatusLastWeek':
        return now - _util_dates_units__WEBPACK_IMPORTED_MODULE_2__.DAY * 7;
      case 'userStatusLastMonth':
        return now - _util_dates_units__WEBPACK_IMPORTED_MODULE_2__.DAY * 7 * 30;
      default:
        return 0;
    }
  }, 'desc');
}
function filterUsersByName(userIds, usersById, query, currentUserId, savedMessagesLang) {
  if (!query) {
    return userIds;
  }
  const searchWords = (0,_util_searchWords__WEBPACK_IMPORTED_MODULE_5__.prepareSearchWordsForNeedle)(query);
  return userIds.filter(id => {
    const user = usersById[id];
    if (!user) {
      return false;
    }
    const name = id === currentUserId ? savedMessagesLang : getUserFullName(user);
    return name && searchWords(name) || Boolean(user.usernames?.find(({
      username
    }) => searchWords(username)));
  });
}
function getMainUsername(userOrChat) {
  return userOrChat.usernames?.find(u => u.isActive)?.username;
}
function getPeerStoryHtmlId(userId) {
  return `peer-story${userId}`;
}

/***/ }),

/***/ "./src/global/index.ts":
/*!*****************************!*\
  !*** ./src/global/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addActionHandler: () => (/* binding */ addActionHandler),
/* harmony export */   getActions: () => (/* binding */ getActions),
/* harmony export */   getGlobal: () => (/* binding */ getGlobal),
/* harmony export */   setGlobal: () => (/* binding */ setGlobal),
/* harmony export */   withGlobal: () => (/* binding */ withGlobal)
/* harmony export */ });
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");

const typed = (0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.typify)();

// `Required` actions are called from actions to ensure the `tabId` is always provided if needed.
// There are three types of actions:
// 1. With tabId, which is made required when calling action from another action handler
// 2. Without payload (= undefined), hence made the payload not required
// 3. With payload, hence made the payload required

const getGlobal = typed.getGlobal;
const setGlobal = typed.setGlobal;
const getActions = typed.getActions;
const addActionHandler = typed.addActionHandler;
const withGlobal = typed.withGlobal;

/***/ }),

/***/ "./src/global/init.ts":
/*!****************************!*\
  !*** ./src/global/init.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _intervals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intervals */ "./src/global/intervals.ts");
/* harmony import */ var _util_cacheApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/cacheApi */ "./src/util/cacheApi.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/init */ "./src/util/init.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_theme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/theme */ "./src/util/theme.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _reducers_middleSearch__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./reducers/middleSearch */ "./src/global/reducers/middleSearch.ts");
/* harmony import */ var _reducers_tabs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./reducers/tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./cache */ "./src/global/cache.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./index */ "./src/global/index.ts");
/* harmony import */ var _initialState__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./initialState */ "./src/global/initialState.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./selectors */ "./src/global/selectors/index.ts");

















(0,_cache__WEBPACK_IMPORTED_MODULE_12__.initCache)();
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('initShared', async (prevGlobal, actions, payload) => {
  const {
    force
  } = payload || {};
  await (0,_util_init__WEBPACK_IMPORTED_MODULE_3__.initGlobal)(force, prevGlobal);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('init', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)(),
    isMasterTab
  } = payload || {};
  const initialTabState = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.cloneDeep)(_initialState__WEBPACK_IMPORTED_MODULE_14__.INITIAL_TAB_STATE);
  initialTabState.id = tabId;
  initialTabState.isChatInfoShown = Boolean(global.lastIsChatInfoShown);
  initialTabState.audioPlayer.playbackRate = global.audioPlayer.lastPlaybackRate;
  initialTabState.audioPlayer.isPlaybackRateActive = global.audioPlayer.isLastPlaybackRateActive;
  initialTabState.mediaViewer.playbackRate = global.mediaViewer.lastPlaybackRate;
  global = {
    ...global,
    byTabId: {
      ...global.byTabId,
      [tabId]: initialTabState
    }
  };
  if (isMasterTab || !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_MULTITAB_SUPPORTED) {
    initialTabState.isMasterTab = true;
  }
  Object.keys(global.messages.byChatId).forEach(chatId => {
    const threadsById = global.messages.byChatId[chatId].threadsById;
    Object.keys(threadsById).forEach(thread => {
      const threadId = Number(thread);
      const lastViewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectThreadParam)(global, chatId, threadId, 'lastViewportIds');
      // Check if migration from previous version is faulty
      if (!lastViewportIds?.every(id => (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__.isLocalMessageId)(id) || global.messages.byChatId[chatId]?.byId[id])) {
        global = (0,_reducers__WEBPACK_IMPORTED_MODULE_15__.replaceThreadParam)(global, chatId, threadId, 'lastViewportIds', undefined);
        return;
      }
      global = (0,_reducers_middleSearch__WEBPACK_IMPORTED_MODULE_10__.initializeChatMediaSearchResults)(global, chatId, threadId, tabId);
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_15__.replaceTabThreadParam)(global, chatId, threadId, 'viewportIds', lastViewportIds, tabId);
    });
  });

  // Temporary state fix
  Object.keys(global.messages.byChatId).forEach(chatId => {
    const threadsById = global.messages.byChatId[chatId].threadsById;
    const fixedThreadsById = Object.keys(threadsById).reduce((acc, key) => {
      const t = threadsById[Number(key)];
      acc[Number(key)] = {
        ...t,
        listedIds: t.lastViewportIds
      };
      return acc;
    }, {});
    global = {
      ...global,
      messages: {
        ...global.messages,
        byChatId: {
          ...global.messages.byChatId,
          [chatId]: {
            ...global.messages.byChatId[chatId],
            threadsById: fixedThreadsById
          }
        }
      }
    };
  });
  const parsedMessageList = (0,_util_routing__WEBPACK_IMPORTED_MODULE_7__.parseLocationHash)(global.currentUserId);
  if (global.authState !== 'authorizationStateReady' && !global.passcode.hasPasscode && !global.passcode.isScreenLocked) {
    Object.values(global.byTabId).forEach(({
      id: otherTabId
    }) => {
      if (otherTabId === tabId) return;
      global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_11__.updateTabState)(global, {
        isInactive: true
      }, otherTabId);
    });
  }
  if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_MULTITAB_SUPPORTED) {
    actions.initApi();
  }
  (0,_util_cacheApi__WEBPACK_IMPORTED_MODULE_1__.isCacheApiSupported)().then(isSupported => {
    global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
    global.isCacheApiSupported = isSupported;
    (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
  });
  if (global.peerColors) {
    (0,_util_theme__WEBPACK_IMPORTED_MODULE_8__.updatePeerColors)(global.peerColors.general);
  }
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_11__.updateTabState)(global, {
    messageLists: parsedMessageList ? [parsedMessageList] : initialTabState.messageLists
  }, tabId);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('requestMasterAndCallAction', async (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload;
  if ((0,_selectors__WEBPACK_IMPORTED_MODULE_16__.selectTabState)(global, tabId).isMasterTab) {
    const {
      action,
      payload: actionPayload
    } = payload;
    // @ts-ignore
    actions[action](actionPayload);
    return;
  }
  if (global.phoneCall || global.groupCalls.activeGroupCallId) {
    await (0,_util_moduleLoader__WEBPACK_IMPORTED_MODULE_6__.loadBundle)(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_6__.Bundles.Calls);
    if ('hangUp' in actions) actions.hangUp({
      tabId
    });
    if ('leaveGroupCall' in actions) actions.leaveGroupCall({
      tabId
    });
  } else {
    (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.reestablishMasterToSelf)();
  }
  global = (0,_index__WEBPACK_IMPORTED_MODULE_13__.getGlobal)();
  global = (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_11__.updateTabState)(global, {
    multitabNextAction: payload
  }, tabId);
  (0,_index__WEBPACK_IMPORTED_MODULE_13__.setGlobal)(global);
});
(0,_index__WEBPACK_IMPORTED_MODULE_13__.addActionHandler)('clearMultitabNextAction', (global, actions, payload) => {
  const {
    tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()
  } = payload || {};
  return (0,_reducers_tabs__WEBPACK_IMPORTED_MODULE_11__.updateTabState)(global, {
    multitabNextAction: undefined
  }, tabId);
});

/***/ }),

/***/ "./src/global/initialState.ts":
/*!************************************!*\
  !*** ./src/global/initialState.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INITIAL_GLOBAL_STATE: () => (/* binding */ INITIAL_GLOBAL_STATE),
/* harmony export */   INITIAL_PERFORMANCE_STATE_MAX: () => (/* binding */ INITIAL_PERFORMANCE_STATE_MAX),
/* harmony export */   INITIAL_PERFORMANCE_STATE_MID: () => (/* binding */ INITIAL_PERFORMANCE_STATE_MID),
/* harmony export */   INITIAL_PERFORMANCE_STATE_MIN: () => (/* binding */ INITIAL_PERFORMANCE_STATE_MIN),
/* harmony export */   INITIAL_TAB_STATE: () => (/* binding */ INITIAL_TAB_STATE)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");



const INITIAL_PERFORMANCE_STATE_MAX = {
  animatedEmoji: true,
  autoplayGifs: true,
  autoplayVideos: true,
  contextMenuAnimations: true,
  contextMenuBlur: true,
  loopAnimatedStickers: true,
  mediaViewerAnimations: true,
  messageComposerAnimations: true,
  messageSendingAnimations: true,
  pageTransitions: true,
  reactionEffects: true,
  rightColumnAnimations: true,
  stickerEffects: true,
  storyRibbonAnimations: true,
  snapEffect: true
};
const INITIAL_PERFORMANCE_STATE_MID = {
  animatedEmoji: true,
  autoplayGifs: true,
  autoplayVideos: true,
  contextMenuAnimations: true,
  contextMenuBlur: true,
  loopAnimatedStickers: true,
  mediaViewerAnimations: true,
  messageComposerAnimations: true,
  messageSendingAnimations: true,
  pageTransitions: true,
  reactionEffects: true,
  rightColumnAnimations: false,
  stickerEffects: false,
  storyRibbonAnimations: false,
  snapEffect: false
};
const INITIAL_PERFORMANCE_STATE_MIN = {
  animatedEmoji: false,
  autoplayGifs: false,
  autoplayVideos: false,
  contextMenuAnimations: false,
  contextMenuBlur: false,
  loopAnimatedStickers: false,
  mediaViewerAnimations: false,
  messageComposerAnimations: false,
  messageSendingAnimations: false,
  pageTransitions: false,
  reactionEffects: false,
  rightColumnAnimations: false,
  stickerEffects: false,
  storyRibbonAnimations: false,
  snapEffect: false
};
const INITIAL_GLOBAL_STATE = {
  isInited: true,
  attachMenu: {
    bots: {}
  },
  passcode: {},
  twoFaSettings: {},
  isAppUpdateAvailable: false,
  isElectronUpdateAvailable: false,
  shouldShowContextMenuHint: true,
  audioPlayer: {
    lastPlaybackRate: _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PLAYBACK_RATE
  },
  mediaViewer: {
    lastPlaybackRate: _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PLAYBACK_RATE
  },
  authRememberMe: true,
  countryList: {
    phoneCodes: [],
    general: []
  },
  blocked: {
    ids: [],
    totalCount: 0
  },
  users: {
    byId: {},
    statusesById: {},
    fullInfoById: {},
    previewMediaByBotId: {},
    commonChatsById: {},
    botAppPermissionsById: {}
  },
  peers: {
    giftsById: {},
    profilePhotosById: {}
  },
  chats: {
    listIds: {},
    isFullyLoaded: {},
    orderedPinnedIds: {},
    totalCount: {},
    lastMessageIds: {},
    byId: {},
    fullInfoById: {},
    similarChannelsById: {},
    similarBotsById: {},
    topicsInfoById: {},
    loadingParameters: {
      active: {},
      archived: {},
      saved: {}
    }
  },
  messages: {
    byChatId: {},
    sponsoredByChatId: {},
    pollById: {}
  },
  stories: {
    byPeerId: {},
    orderedPeerIds: {
      archived: [],
      active: []
    },
    hasNext: true,
    hasNextInArchive: true,
    stealthMode: {}
  },
  groupCalls: {
    byId: {}
  },
  attachmentSettings: {
    shouldCompress: true,
    shouldSendGrouped: true,
    isInvertedMedia: undefined,
    webPageMediaSize: undefined
  },
  scheduledMessages: {
    byChatId: {}
  },
  quickReplies: {
    byId: {},
    messagesById: {}
  },
  chatFolders: {
    byId: {},
    invites: {}
  },
  fileUploads: {
    byMessageKey: {}
  },
  recentEmojis: ['grinning', 'kissing_heart', 'christmas_tree', 'brain', 'trophy', 'duck', 'cherries'],
  recentCustomEmojis: ['5377305978079288312'],
  reactions: {
    defaultTags: [],
    topReactions: [],
    recentReactions: [],
    effectReactions: [],
    hash: {}
  },
  availableEffectById: {},
  stickers: {
    setsById: {},
    added: {},
    recent: {
      stickers: []
    },
    favorite: {
      stickers: []
    },
    greeting: {
      stickers: []
    },
    premium: {
      stickers: []
    },
    featured: {
      setIds: []
    },
    effect: {
      stickers: [],
      emojis: []
    },
    forEmoji: {}
  },
  customEmojis: {
    lastRendered: [],
    byId: {},
    added: {},
    forEmoji: {},
    statusRecent: {}
  },
  emojiKeywords: {},
  gifs: {
    saved: {}
  },
  topPeers: {},
  topInlineBots: {},
  topBotApps: {},
  activeSessions: {
    byHash: {},
    orderedHashes: []
  },
  activeWebSessions: {
    byHash: {},
    orderedHashes: []
  },
  settings: {
    byKey: {
      theme: 'light',
      shouldUseSystemTheme: true,
      messageTextSize: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_IOS ? _config__WEBPACK_IMPORTED_MODULE_1__.IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX : _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_MAC_OS ? _config__WEBPACK_IMPORTED_MODULE_1__.MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX : _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MESSAGE_TEXT_SIZE_PX,
      animationLevel: _config__WEBPACK_IMPORTED_MODULE_1__.ANIMATION_LEVEL_DEFAULT,
      messageSendKeyCombo: 'enter',
      canAutoLoadPhotoFromContacts: true,
      canAutoLoadPhotoInPrivateChats: true,
      canAutoLoadPhotoInGroups: true,
      canAutoLoadPhotoInChannels: true,
      canAutoLoadVideoFromContacts: true,
      canAutoLoadVideoInPrivateChats: true,
      canAutoLoadVideoInGroups: true,
      canAutoLoadVideoInChannels: true,
      canAutoLoadFileFromContacts: false,
      canAutoLoadFileInPrivateChats: false,
      canAutoLoadFileInGroups: false,
      canAutoLoadFileInChannels: false,
      autoLoadFileMaxSizeMb: 10,
      hasWebNotifications: true,
      hasPushNotifications: true,
      notificationSoundVolume: 5,
      shouldSuggestStickers: true,
      shouldSuggestCustomEmoji: true,
      shouldSkipWebAppCloseConfirmation: false,
      shouldUpdateStickerSetOrder: true,
      language: 'en',
      timeFormat: '24h',
      wasTimeFormatSetManually: false,
      isConnectionStatusMinimized: true,
      shouldArchiveAndMuteNewNonContact: false,
      shouldNewNonContactPeersRequirePremium: false,
      shouldHideReadMarks: false,
      canTranslate: false,
      canTranslateChats: true,
      doNotTranslate: [],
      canDisplayChatInTitle: true,
      shouldAllowHttpTransport: true,
      shouldWarnAboutSvg: true
    },
    themes: {
      light: {
        isBlurred: true,
        patternColor: _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PATTERN_COLOR
      },
      dark: {
        isBlurred: true,
        patternColor: _config__WEBPACK_IMPORTED_MODULE_1__.DARK_THEME_PATTERN_COLOR
      }
    },
    performance: INITIAL_PERFORMANCE_STATE_MAX,
    privacy: {},
    notifyExceptions: {},
    botVerificationShownPeerIds: []
  },
  serviceNotifications: [],
  trustedBotIds: [],
  transcriptions: {},
  translations: {
    byChatId: {}
  },
  byTabId: {},
  archiveSettings: {
    isMinimized: false,
    isHidden: false
  }
};
const INITIAL_TAB_STATE = {
  id: 0,
  isMasterTab: false,
  isLeftColumnShown: true,
  isChatInfoShown: false,
  newChatMembersProgress: _types__WEBPACK_IMPORTED_MODULE_0__.NewChatMembersProgress.Closed,
  uiReadyState: 0,
  shouldInit: true,
  gifSearch: {},
  stickerSearch: {},
  messageLists: [],
  activeChatFolder: 0,
  tabThreads: {},
  inlineBots: {
    isLoading: false,
    byUsername: {}
  },
  webApps: {
    openedWebApps: {},
    openedOrderedKeys: [],
    sessionKeys: [],
    modalState: 'maximized',
    isModalOpen: false,
    isMoreAppsTabActive: false
  },
  globalSearch: {},
  userSearch: {},
  middleSearch: {
    byChatThreadKey: {}
  },
  sharedMediaSearch: {
    byChatThreadKey: {}
  },
  chatMediaSearch: {
    byChatThreadKey: {}
  },
  management: {
    byChatId: {}
  },
  storyViewer: {
    isMuted: true,
    isRibbonShown: false
  },
  mediaViewer: {
    volume: _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_VOLUME,
    playbackRate: _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PLAYBACK_RATE,
    isMuted: false
  },
  audioPlayer: {
    volume: _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_VOLUME,
    playbackRate: _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PLAYBACK_RATE,
    isMuted: false
  },
  isShareMessageModalShown: false,
  isWebAppsCloseConfirmationModalOpen: false,
  forwardMessages: {},
  replyingMessage: {},
  pollResults: {},
  payment: {},
  starsPayment: {},
  notifications: [],
  dialogs: [],
  activeReactions: {},
  activeDownloads: {},
  statistics: {
    byChatId: {}
  },
  pollModal: {
    isOpen: false
  },
  requestedTranslations: {
    byChatId: {}
  }
};

/***/ }),

/***/ "./src/global/intervals.ts":
/*!*********************************!*\
  !*** ./src/global/intervals.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! . */ "./src/global/index.ts");





const STORY_EXPIRATION_INTERVAL = 2 * 60 * 1000; // 2 min

let intervals = [];
let prevGlobal;
(0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.addCallback)(global => {
  const previousGlobal = prevGlobal;
  prevGlobal = global;
  const isCurrentMaster = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global)?.isMasterTab;
  const isPreviousMaster = previousGlobal && (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(previousGlobal)?.isMasterTab;
  if (isCurrentMaster === isPreviousMaster) return;
  if (isCurrentMaster && !isPreviousMaster) {
    startIntervals();
  } else {
    stopIntervals();
  }
});
function startIntervals() {
  if (intervals.length) return;
  intervals.push(window.setInterval(checkStoryExpiration, STORY_EXPIRATION_INTERVAL));
}
function stopIntervals() {
  intervals.forEach(interval => clearInterval(interval));
  intervals = [];
}
function checkStoryExpiration() {
  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global
  let global = (0,___WEBPACK_IMPORTED_MODULE_4__.getGlobal)();
  if (!global.isInited) return;
  const serverTime = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_1__.getServerTime)();
  Object.values(global.stories.byPeerId).forEach(peerStories => {
    const stories = Object.values(peerStories.byId);
    stories.forEach(story => {
      if (!('expireDate' in story)) return;
      if (story.expireDate > serverTime) return;
      if ('isInProfile' in story && story.isInProfile) return;
      if ('isPublic' in story && !story.isPublic) return;
      global = (0,_reducers__WEBPACK_IMPORTED_MODULE_2__.removePeerStory)(global, story.peerId, story.id);
    });
  });
  (0,___WEBPACK_IMPORTED_MODULE_4__.setGlobal)(global);
}

/***/ }),

/***/ "./src/global/reducers/chats.ts":
/*!**************************************!*\
  !*** ./src/global/reducers/chats.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addChatListIds: () => (/* binding */ addChatListIds),
/* harmony export */   addChatMembers: () => (/* binding */ addChatMembers),
/* harmony export */   addChats: () => (/* binding */ addChats),
/* harmony export */   addSimilarBots: () => (/* binding */ addSimilarBots),
/* harmony export */   addSimilarChannels: () => (/* binding */ addSimilarChannels),
/* harmony export */   addUnreadMentions: () => (/* binding */ addUnreadMentions),
/* harmony export */   leaveChat: () => (/* binding */ leaveChat),
/* harmony export */   removeChatFromChatLists: () => (/* binding */ removeChatFromChatLists),
/* harmony export */   removeUnreadMentions: () => (/* binding */ removeUnreadMentions),
/* harmony export */   replaceChatFullInfo: () => (/* binding */ replaceChatFullInfo),
/* harmony export */   replaceChatListIds: () => (/* binding */ replaceChatListIds),
/* harmony export */   replaceChatListLoadingParameters: () => (/* binding */ replaceChatListLoadingParameters),
/* harmony export */   replaceChats: () => (/* binding */ replaceChats),
/* harmony export */   toggleSimilarChannels: () => (/* binding */ toggleSimilarChannels),
/* harmony export */   updateChat: () => (/* binding */ updateChat),
/* harmony export */   updateChatFullInfo: () => (/* binding */ updateChatFullInfo),
/* harmony export */   updateChatLastMessageId: () => (/* binding */ updateChatLastMessageId),
/* harmony export */   updateChatListSecondaryInfo: () => (/* binding */ updateChatListSecondaryInfo),
/* harmony export */   updateChatListType: () => (/* binding */ updateChatListType),
/* harmony export */   updateChats: () => (/* binding */ updateChats),
/* harmony export */   updateChatsLastMessageId: () => (/* binding */ updateChatsLastMessageId)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_areDeepEqual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/areDeepEqual */ "./src/util/areDeepEqual.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");




const DEFAULT_CHAT_LISTS = ['active', 'archived'];
function replaceChatListIds(global, type, newIds) {
  return {
    ...global,
    chats: {
      ...global.chats,
      listIds: {
        ...global.chats.listIds,
        [type]: newIds
      }
    }
  };
}
function replaceChatListLoadingParameters(global, type, nextOffsetId, nextOffsetPeerId, nextOffsetDate) {
  return {
    ...global,
    chats: {
      ...global.chats,
      loadingParameters: {
        ...global.chats.loadingParameters,
        [type]: {
          nextOffsetId,
          nextOffsetPeerId,
          nextOffsetDate
        }
      }
    }
  };
}
function updateChatLastMessageId(global, chatId, lastMessageId, listType) {
  const key = listType === 'saved' ? 'saved' : 'all';
  return {
    ...global,
    chats: {
      ...global.chats,
      lastMessageIds: {
        ...global.chats.lastMessageIds,
        [key]: {
          ...global.chats.lastMessageIds[key],
          [chatId]: lastMessageId
        }
      }
    }
  };
}
function updateChatsLastMessageId(global, messageIds, listType) {
  const key = listType === 'saved' ? 'saved' : 'all';
  return {
    ...global,
    chats: {
      ...global.chats,
      lastMessageIds: {
        ...global.chats.lastMessageIds,
        [key]: {
          ...global.chats.lastMessageIds[key],
          ...messageIds
        }
      }
    }
  };
}
function addChatListIds(global, type, idsUpdate) {
  const {
    [type]: listIds
  } = global.chats.listIds;
  const newIds = listIds?.length ? idsUpdate.filter(id => !listIds.includes(id)) : idsUpdate;
  if (listIds && !newIds.length) {
    return global;
  }
  return replaceChatListIds(global, type, [...(listIds || []), ...newIds]);
}
function replaceChats(global, newById) {
  return {
    ...global,
    chats: {
      ...global.chats,
      byId: newById
    }
  };
}
function addUnreadMentions(global, chatId, chat, ids, shouldUpdateCount = false) {
  const prevChatUnreadMentions = chat.unreadMentions || [];
  const updatedUnreadMentions = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.unique)([...prevChatUnreadMentions, ...ids]).sort((a, b) => b - a);
  global = updateChat(global, chatId, {
    unreadMentions: updatedUnreadMentions
  });
  if (shouldUpdateCount) {
    const updatedUnreadMentionsCount = (chat.unreadMentionsCount || 0) + Math.max(0, updatedUnreadMentions.length - prevChatUnreadMentions.length);
    global = updateChat(global, chatId, {
      unreadMentionsCount: updatedUnreadMentionsCount
    });
  }
  return global;
}
function removeUnreadMentions(global, chatId, chat, ids, shouldUpdateCount = false) {
  const prevChatUnreadMentions = chat.unreadMentions || [];
  const updatedUnreadMentions = prevChatUnreadMentions?.filter(id => !ids.includes(id));
  global = updateChat(global, chatId, {
    unreadMentions: updatedUnreadMentions
  });
  if (shouldUpdateCount && chat.unreadMentionsCount) {
    const removedCount = prevChatUnreadMentions.length - updatedUnreadMentions.length;
    const updatedUnreadMentionsCount = Math.max(chat.unreadMentionsCount - removedCount, 0) || undefined;
    global = updateChat(global, chatId, {
      unreadMentionsCount: updatedUnreadMentionsCount
    });
  }
  return global;
}
function updateChat(global, chatId, chatUpdate, noOmitUnreadReactionCount = false, withDeepCheck = false) {
  const {
    byId
  } = global.chats;
  const chat = byId[chatId];
  if (withDeepCheck && chat) {
    const updateKeys = Object.keys(chatUpdate);
    if ((0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_1__.areDeepEqual)((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.pick)(chat, updateKeys), chatUpdate)) {
      return global;
    }
  }
  const updatedChat = getUpdatedChat(global, chatId, chatUpdate, noOmitUnreadReactionCount);
  if (!updatedChat) {
    return global;
  }
  return replaceChats(global, {
    ...byId,
    [chatId]: updatedChat
  });
}
function updateChatFullInfo(global, chatId, fullInfoUpdate) {
  const currentFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatFullInfo)(global, chatId);
  const updatedFullInfo = {
    ...currentFullInfo,
    ...fullInfoUpdate
  };
  if ((0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_1__.areDeepEqual)(currentFullInfo, updatedFullInfo)) {
    return global;
  }
  return {
    ...global,
    chats: {
      ...global.chats,
      fullInfoById: {
        ...global.chats.fullInfoById,
        [chatId]: updatedFullInfo
      }
    }
  };
}
function replaceChatFullInfo(global, chatId, fullInfo) {
  const currentFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatFullInfo)(global, chatId);
  if ((0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_1__.areDeepEqual)(currentFullInfo, fullInfo)) {
    return global;
  }
  return {
    ...global,
    chats: {
      ...global.chats,
      fullInfoById: {
        ...global.chats.fullInfoById,
        [chatId]: fullInfo
      }
    }
  };
}
function updateChats(global, newById) {
  const updatedById = Object.keys(newById).reduce((acc, id) => {
    const updatedChat = getUpdatedChat(global, id, newById[id]);
    if (updatedChat) {
      acc[id] = updatedChat;
    }
    return acc;
  }, {});
  global = replaceChats(global, {
    ...global.chats.byId,
    ...updatedById
  });
  return global;
}

// @optimization Allows to avoid redundant updates which cause a lot of renders
function addChats(global, newById) {
  const {
    byId
  } = global.chats;
  let isUpdated = false;
  const addedById = Object.keys(newById).reduce((acc, id) => {
    const existingChat = byId[id];
    const newChat = newById[id];
    const membersCountChanged = !existingChat?.membersCount && newChat.membersCount;
    if (existingChat && !existingChat.isMin && !membersCountChanged && (newChat.isMin || existingChat.accessHash === newChat.accessHash)) {
      return acc;
    }
    const updatedChat = getUpdatedChat(global, id, newChat);
    if (updatedChat) {
      acc[id] = updatedChat;
      if (!isUpdated) {
        isUpdated = true;
      }
    }
    return acc;
  }, {});
  if (!isUpdated) {
    return global;
  }
  global = replaceChats(global, {
    ...byId,
    ...addedById
  });
  return global;
}

// @optimization Don't spread/unspread global for each element, do it in a batch
function getUpdatedChat(global, chatId, chatUpdate, noOmitUnreadReactionCount = false) {
  const {
    byId
  } = global.chats;
  const chat = byId[chatId];
  const omitProps = [];
  if (chatUpdate.isMin && chat && !chat.isMin) {
    return undefined; // Do not apply updates from min constructor
  }
  if (!noOmitUnreadReactionCount) {
    omitProps.push('unreadReactionsCount');
  }
  if ((0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_1__.areDeepEqual)(chat?.usernames, chatUpdate.usernames)) {
    omitProps.push('usernames');
  }
  const updatedChat = {
    ...chat,
    ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(chatUpdate, omitProps)
  };
  if (!updatedChat.id || !updatedChat.type) {
    return undefined;
  }
  return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omitUndefined)(updatedChat);
}
function updateChatListType(global, chatId, folderId) {
  const listType = folderId === _config__WEBPACK_IMPORTED_MODULE_0__.ARCHIVED_FOLDER_ID ? 'archived' : 'active';
  let currentListIds = global.chats.listIds;
  Object.keys(currentListIds).forEach(listTypeKey => {
    const currentFolderList = currentListIds[listTypeKey] || [];
    if (listTypeKey === listType && !currentFolderList.includes(chatId)) {
      currentListIds = {
        ...currentListIds,
        [listTypeKey]: [...currentFolderList, chatId]
      };
    } else if (listTypeKey !== listType && currentFolderList.includes(chatId)) {
      currentListIds = {
        ...currentListIds,
        [listTypeKey]: currentFolderList.filter(id => id !== chatId)
      };
    }
  });
  global = {
    ...global,
    chats: {
      ...global.chats,
      listIds: currentListIds
    }
  };
  global = updateChat(global, chatId, {
    folderId: folderId || undefined
  });
  return global;
}
function updateChatListSecondaryInfo(global, type, info) {
  const totalCountKey = type === 'active' ? 'all' : type;
  return {
    ...global,
    chats: {
      ...global.chats,
      ...(info.orderedPinnedIds && {
        orderedPinnedIds: {
          ...global.chats.orderedPinnedIds,
          [type]: info.orderedPinnedIds
        }
      }),
      totalCount: {
        ...global.chats.totalCount,
        [totalCountKey]: info.totalChatCount
      }
    }
  };
}
function leaveChat(global, leftChatId) {
  global = removeChatFromChatLists(global, leftChatId);
  global = updateChat(global, leftChatId, {
    isNotJoined: true
  });
  global = updateChatFullInfo(global, leftChatId, {
    joinInfo: undefined
  });
  return global;
}
function removeChatFromChatLists(global, chatId, type = 'all') {
  const chatLists = type === 'all' ? DEFAULT_CHAT_LISTS : [type];
  chatLists.forEach(listType => {
    global = replaceChatListIds(global, listType, global.chats.listIds[listType]?.filter(id => id !== chatId));
  });
  return global;
}
function addChatMembers(global, chat, membersToAdd) {
  const currentMembers = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatFullInfo)(global, chat.id)?.members;
  const newMemberIds = new Set(membersToAdd.map(m => m.userId));
  const updatedMembers = [...(currentMembers?.filter(({
    userId
  }) => !newMemberIds.has(userId)) || []), ...membersToAdd];
  const currentIds = currentMembers?.map(({
    userId
  }) => userId) || [];
  const updatedIds = updatedMembers.map(({
    userId
  }) => userId);
  if ((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.areSortedArraysEqual)(currentIds, updatedIds)) {
    return global;
  }
  const adminMembers = updatedMembers.filter(({
    isAdmin,
    isOwner
  }) => isAdmin || isOwner);
  return updateChatFullInfo(global, chat.id, {
    members: updatedMembers,
    adminMembersById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.buildCollectionByKey)(adminMembers, 'userId')
  });
}
function addSimilarChannels(global, chatId, similarChannelIds, count, shouldShowInChat = true) {
  return {
    ...global,
    chats: {
      ...global.chats,
      similarChannelsById: {
        ...global.chats.similarChannelsById,
        [chatId]: {
          similarChannelIds,
          count: count || similarChannelIds.length,
          shouldShowInChat
        }
      }
    }
  };
}
function toggleSimilarChannels(global, chatId) {
  const similarChannels = global.chats.similarChannelsById[chatId];
  return {
    ...global,
    chats: {
      ...global.chats,
      similarChannelsById: {
        ...global.chats.similarChannelsById,
        [chatId]: {
          ...similarChannels,
          shouldShowInChat: !similarChannels.shouldShowInChat
        }
      }
    }
  };
}
function addSimilarBots(global, chatId, similarBotsIds, count) {
  return {
    ...global,
    chats: {
      ...global.chats,
      similarBotsById: {
        ...global.chats.similarBotsById,
        [chatId]: {
          similarBotsIds,
          count
        }
      }
    }
  };
}

/***/ }),

/***/ "./src/global/reducers/globalSearch.ts":
/*!*********************************************!*\
  !*** ./src/global/reducers/globalSearch.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateGlobalSearch: () => (/* binding */ updateGlobalSearch),
/* harmony export */   updateGlobalSearchContent: () => (/* binding */ updateGlobalSearchContent),
/* harmony export */   updateGlobalSearchFetchingStatus: () => (/* binding */ updateGlobalSearchFetchingStatus),
/* harmony export */   updateGlobalSearchResults: () => (/* binding */ updateGlobalSearchResults)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_searchResultKey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/keys/searchResultKey */ "./src/util/keys/searchResultKey.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");





function updateGlobalSearch(global, searchStatePartial, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_4__.updateTabState)(global, {
    globalSearch: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).globalSearch,
      ...searchStatePartial
    }
  }, tabId);
}
function updateGlobalSearchContent(global, currentContent, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updateGlobalSearch(global, {
    currentContent
  }, tabId);
}
function updateGlobalSearchResults(global, newFoundMessages, totalCount, type, nextOffsetRate, nextOffsetId, nextOffsetPeerId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    resultsByType
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).globalSearch || {};
  const newFoundMessagesById = newFoundMessages.reduce((result, message) => {
    result[(0,_util_keys_searchResultKey__WEBPACK_IMPORTED_MODULE_2__.getSearchResultKey)(message)] = message;
    return result;
  }, {});
  const foundIdsForType = resultsByType?.[type]?.foundIds;
  if (foundIdsForType !== undefined && Object.keys(newFoundMessagesById).every(newId => foundIdsForType.includes((0,_util_keys_searchResultKey__WEBPACK_IMPORTED_MODULE_2__.getSearchResultKey)(newFoundMessagesById[newId])))) {
    global = updateGlobalSearchFetchingStatus(global, {
      messages: false
    }, tabId);
    return updateGlobalSearch(global, {
      resultsByType: {
        ...((0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).globalSearch || {}).resultsByType,
        [type]: {
          foundIds: foundIdsForType,
          totalCount,
          nextOffsetId,
          nextOffsetRate,
          nextOffsetPeerId
        }
      }
    }, tabId);
  }
  const prevFoundIds = foundIdsForType || [];
  const newFoundIds = newFoundMessages.map(message => (0,_util_keys_searchResultKey__WEBPACK_IMPORTED_MODULE_2__.getSearchResultKey)(message)).filter(id => !prevFoundIds.includes(id));
  const foundIds = Array.prototype.concat(prevFoundIds, newFoundIds);
  const foundOrPrevFoundIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.areSortedArraysEqual)(prevFoundIds, foundIds) ? prevFoundIds : foundIds;
  global = updateGlobalSearchFetchingStatus(global, {
    messages: false
  }, tabId);
  return updateGlobalSearch(global, {
    resultsByType: {
      ...((0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).globalSearch || {}).resultsByType,
      [type]: {
        totalCount,
        nextOffsetId,
        nextOffsetRate,
        nextOffsetPeerId,
        foundIds: foundOrPrevFoundIds
      }
    }
  }, tabId);
}
function updateGlobalSearchFetchingStatus(global, newState, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updateGlobalSearch(global, {
    fetchingStatus: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).globalSearch.fetchingStatus,
      ...newState
    }
  }, tabId);
}

/***/ }),

/***/ "./src/global/reducers/index.ts":
/*!**************************************!*\
  !*** ./src/global/reducers/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addActiveMediaDownload: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.addActiveMediaDownload),
/* harmony export */   addBlockedUser: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_7__.addBlockedUser),
/* harmony export */   addChatListIds: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.addChatListIds),
/* harmony export */   addChatMembers: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.addChatMembers),
/* harmony export */   addChatMessagesById: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.addChatMessagesById),
/* harmony export */   addChats: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.addChats),
/* harmony export */   addMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.addMessages),
/* harmony export */   addNotifyException: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_7__.addNotifyException),
/* harmony export */   addNotifyExceptions: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_7__.addNotifyExceptions),
/* harmony export */   addSimilarBots: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.addSimilarBots),
/* harmony export */   addSimilarChannels: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.addSimilarChannels),
/* harmony export */   addStories: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.addStories),
/* harmony export */   addStoriesForPeer: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.addStoriesForPeer),
/* harmony export */   addUnreadMentions: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.addUnreadMentions),
/* harmony export */   addUserStatuses: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.addUserStatuses),
/* harmony export */   addUsers: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.addUsers),
/* harmony export */   addViewportId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.addViewportId),
/* harmony export */   appendStarsSubscriptions: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.appendStarsSubscriptions),
/* harmony export */   appendStarsTransactions: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.appendStarsTransactions),
/* harmony export */   cancelMessageMediaDownload: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.cancelMessageMediaDownload),
/* harmony export */   clearGlobalForLockScreen: () => (/* reexport safe */ _passcode__WEBPACK_IMPORTED_MODULE_9__.clearGlobalForLockScreen),
/* harmony export */   clearMessageTranslation: () => (/* reexport safe */ _translations__WEBPACK_IMPORTED_MODULE_13__.clearMessageTranslation),
/* harmony export */   clearPasscodeSettings: () => (/* reexport safe */ _passcode__WEBPACK_IMPORTED_MODULE_9__.clearPasscodeSettings),
/* harmony export */   clearPayment: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.clearPayment),
/* harmony export */   clearStarPayment: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.clearStarPayment),
/* harmony export */   closeInvoice: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.closeInvoice),
/* harmony export */   closeMiddleSearch: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.closeMiddleSearch),
/* harmony export */   closeNewContactDialog: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.closeNewContactDialog),
/* harmony export */   deleteChatMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.deleteChatMessages),
/* harmony export */   deleteChatScheduledMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.deleteChatScheduledMessages),
/* harmony export */   deleteContact: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.deleteContact),
/* harmony export */   deletePeerPhoto: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_14__.deletePeerPhoto),
/* harmony export */   deleteQuickReply: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.deleteQuickReply),
/* harmony export */   deleteQuickReplyMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.deleteQuickReplyMessages),
/* harmony export */   deleteSponsoredMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.deleteSponsoredMessage),
/* harmony export */   deleteTopic: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_15__.deleteTopic),
/* harmony export */   enterMessageSelectMode: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.enterMessageSelectMode),
/* harmony export */   exitMessageSelectMode: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.exitMessageSelectMode),
/* harmony export */   initializeChatMediaSearchResults: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.initializeChatMediaSearchResults),
/* harmony export */   leaveChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.leaveChat),
/* harmony export */   mergeWithChatMediaSearchSegment: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.mergeWithChatMediaSearchSegment),
/* harmony export */   openStarsTransactionFromReceipt: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.openStarsTransactionFromReceipt),
/* harmony export */   openStarsTransactionModal: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.openStarsTransactionModal),
/* harmony export */   rebuildStickersForEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.rebuildStickersForEmoji),
/* harmony export */   removeBlockedUser: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_7__.removeBlockedUser),
/* harmony export */   removeChatFromChatLists: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.removeChatFromChatLists),
/* harmony export */   removeIdFromSearchResults: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.removeIdFromSearchResults),
/* harmony export */   removeOutlyingList: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.removeOutlyingList),
/* harmony export */   removePeerStory: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.removePeerStory),
/* harmony export */   removeRequestedChatTranslation: () => (/* reexport safe */ _translations__WEBPACK_IMPORTED_MODULE_13__.removeRequestedChatTranslation),
/* harmony export */   removeRequestedMessageTranslation: () => (/* reexport safe */ _translations__WEBPACK_IMPORTED_MODULE_13__.removeRequestedMessageTranslation),
/* harmony export */   removeUnreadMentions: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.removeUnreadMentions),
/* harmony export */   replaceAnimatedEmojis: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.replaceAnimatedEmojis),
/* harmony export */   replaceChatFullInfo: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.replaceChatFullInfo),
/* harmony export */   replaceChatListIds: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.replaceChatListIds),
/* harmony export */   replaceChatListLoadingParameters: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.replaceChatListLoadingParameters),
/* harmony export */   replaceChatMediaSearchResults: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.replaceChatMediaSearchResults),
/* harmony export */   replaceChats: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.replaceChats),
/* harmony export */   replaceMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.replaceMessages),
/* harmony export */   replacePeerPhotos: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_14__.replacePeerPhotos),
/* harmony export */   replacePeerSavedGifts: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.replacePeerSavedGifts),
/* harmony export */   replacePinnedTopicIds: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_15__.replacePinnedTopicIds),
/* harmony export */   replaceSettings: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_7__.replaceSettings),
/* harmony export */   replaceSharedMediaSearchResults: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.replaceSharedMediaSearchResults),
/* harmony export */   replaceTabThreadParam: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.replaceTabThreadParam),
/* harmony export */   replaceThemeSettings: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_7__.replaceThemeSettings),
/* harmony export */   replaceThreadParam: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.replaceThreadParam),
/* harmony export */   replaceUserStatuses: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.replaceUserStatuses),
/* harmony export */   replaceUsers: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.replaceUsers),
/* harmony export */   resetMiddleSearch: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.resetMiddleSearch),
/* harmony export */   safeReplacePinnedIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.safeReplacePinnedIds),
/* harmony export */   safeReplaceViewportIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.safeReplaceViewportIds),
/* harmony export */   setChatMediaSearchLoading: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.setChatMediaSearchLoading),
/* harmony export */   setConfirmPaymentUrl: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.setConfirmPaymentUrl),
/* harmony export */   setPaymentStep: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.setPaymentStep),
/* harmony export */   setReceipt: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.setReceipt),
/* harmony export */   setRequestInfoId: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.setRequestInfoId),
/* harmony export */   setSmartGlocalCardInfo: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.setSmartGlocalCardInfo),
/* harmony export */   setStripeCardInfo: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.setStripeCardInfo),
/* harmony export */   toggleMessageSelection: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.toggleMessageSelection),
/* harmony export */   toggleSimilarChannels: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.toggleSimilarChannels),
/* harmony export */   updateBotAppPermissions: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateBotAppPermissions),
/* harmony export */   updateChannelMonetizationStatistics: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_11__.updateChannelMonetizationStatistics),
/* harmony export */   updateChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.updateChat),
/* harmony export */   updateChatFullInfo: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.updateChatFullInfo),
/* harmony export */   updateChatLastMessageId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.updateChatLastMessageId),
/* harmony export */   updateChatListSecondaryInfo: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.updateChatListSecondaryInfo),
/* harmony export */   updateChatListType: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.updateChatListType),
/* harmony export */   updateChatMediaLoadingState: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.updateChatMediaLoadingState),
/* harmony export */   updateChatMediaSearchResults: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.updateChatMediaSearchResults),
/* harmony export */   updateChatMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateChatMessage),
/* harmony export */   updateChats: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.updateChats),
/* harmony export */   updateChatsLastMessageId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_0__.updateChatsLastMessageId),
/* harmony export */   updateCurrentMessageList: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateCurrentMessageList),
/* harmony export */   updateCustomEmojiForEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateCustomEmojiForEmoji),
/* harmony export */   updateCustomEmojiSets: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateCustomEmojiSets),
/* harmony export */   updateFocusDirection: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateFocusDirection),
/* harmony export */   updateFocusedMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateFocusedMessage),
/* harmony export */   updateGifSearch: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateGifSearch),
/* harmony export */   updateGlobalSearch: () => (/* reexport safe */ _globalSearch__WEBPACK_IMPORTED_MODULE_4__.updateGlobalSearch),
/* harmony export */   updateGlobalSearchContent: () => (/* reexport safe */ _globalSearch__WEBPACK_IMPORTED_MODULE_4__.updateGlobalSearchContent),
/* harmony export */   updateGlobalSearchFetchingStatus: () => (/* reexport safe */ _globalSearch__WEBPACK_IMPORTED_MODULE_4__.updateGlobalSearchFetchingStatus),
/* harmony export */   updateGlobalSearchResults: () => (/* reexport safe */ _globalSearch__WEBPACK_IMPORTED_MODULE_4__.updateGlobalSearchResults),
/* harmony export */   updateLastReadStoryForPeer: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updateLastReadStoryForPeer),
/* harmony export */   updateLastViewedStoryForPeer: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updateLastViewedStoryForPeer),
/* harmony export */   updateListedIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateListedIds),
/* harmony export */   updateListedTopicIds: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_15__.updateListedTopicIds),
/* harmony export */   updateManagement: () => (/* reexport safe */ _management__WEBPACK_IMPORTED_MODULE_6__.updateManagement),
/* harmony export */   updateManagementProgress: () => (/* reexport safe */ _management__WEBPACK_IMPORTED_MODULE_6__.updateManagementProgress),
/* harmony export */   updateMessageStatistics: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_11__.updateMessageStatistics),
/* harmony export */   updateMessageStore: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateMessageStore),
/* harmony export */   updateMessageTranslation: () => (/* reexport safe */ _translations__WEBPACK_IMPORTED_MODULE_13__.updateMessageTranslation),
/* harmony export */   updateMessageTranslations: () => (/* reexport safe */ _translations__WEBPACK_IMPORTED_MODULE_13__.updateMessageTranslations),
/* harmony export */   updateMiddleSearch: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.updateMiddleSearch),
/* harmony export */   updateMiddleSearchResults: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.updateMiddleSearchResults),
/* harmony export */   updateMissingInvitedUsers: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateMissingInvitedUsers),
/* harmony export */   updateNotifySettings: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_7__.updateNotifySettings),
/* harmony export */   updateOutlyingLists: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateOutlyingLists),
/* harmony export */   updatePasscodeSettings: () => (/* reexport safe */ _passcode__WEBPACK_IMPORTED_MODULE_9__.updatePasscodeSettings),
/* harmony export */   updatePayment: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.updatePayment),
/* harmony export */   updatePeer: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_14__.updatePeer),
/* harmony export */   updatePeerFullInfo: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_14__.updatePeerFullInfo),
/* harmony export */   updatePeerPhotos: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_14__.updatePeerPhotos),
/* harmony export */   updatePeerPhotosIsLoading: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_14__.updatePeerPhotosIsLoading),
/* harmony export */   updatePeerProfileStory: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updatePeerProfileStory),
/* harmony export */   updatePeerStoriesFullyLoaded: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updatePeerStoriesFullyLoaded),
/* harmony export */   updatePeerStoriesHidden: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updatePeerStoriesHidden),
/* harmony export */   updatePeerStory: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updatePeerStory),
/* harmony export */   updatePeerStoryViews: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updatePeerStoryViews),
/* harmony export */   updatePeersWithStories: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updatePeersWithStories),
/* harmony export */   updatePoll: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updatePoll),
/* harmony export */   updatePollVote: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updatePollVote),
/* harmony export */   updateQuickReplies: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateQuickReplies),
/* harmony export */   updateQuickReplyMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateQuickReplyMessage),
/* harmony export */   updateQuickReplyMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateQuickReplyMessages),
/* harmony export */   updateRecentStatusCustomEmojis: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateRecentStatusCustomEmojis),
/* harmony export */   updateRequestedChatTranslation: () => (/* reexport safe */ _translations__WEBPACK_IMPORTED_MODULE_13__.updateRequestedChatTranslation),
/* harmony export */   updateRequestedMessageTranslation: () => (/* reexport safe */ _translations__WEBPACK_IMPORTED_MODULE_13__.updateRequestedMessageTranslation),
/* harmony export */   updateScheduledMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateScheduledMessage),
/* harmony export */   updateScheduledMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateScheduledMessages),
/* harmony export */   updateSentStoryReaction: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updateSentStoryReaction),
/* harmony export */   updateSharedMediaSearchResults: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.updateSharedMediaSearchResults),
/* harmony export */   updateSharedMediaSearchType: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.updateSharedMediaSearchType),
/* harmony export */   updateShippingOptions: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.updateShippingOptions),
/* harmony export */   updateSponsoredMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateSponsoredMessage),
/* harmony export */   updateStarsBalance: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.updateStarsBalance),
/* harmony export */   updateStarsPayment: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.updateStarsPayment),
/* harmony export */   updateStarsSubscriptionLoading: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_10__.updateStarsSubscriptionLoading),
/* harmony export */   updateStatistics: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_11__.updateStatistics),
/* harmony export */   updateStatisticsGraph: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_11__.updateStatisticsGraph),
/* harmony export */   updateStealthMode: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updateStealthMode),
/* harmony export */   updateStickerSearch: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateStickerSearch),
/* harmony export */   updateStickerSet: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateStickerSet),
/* harmony export */   updateStickerSets: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateStickerSets),
/* harmony export */   updateStickersForEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_2__.updateStickersForEmoji),
/* harmony export */   updateStoriesForPeer: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updateStoriesForPeer),
/* harmony export */   updateStoryStatistics: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_11__.updateStoryStatistics),
/* harmony export */   updateStoryViews: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updateStoryViews),
/* harmony export */   updateStoryViewsLoading: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_12__.updateStoryViewsLoading),
/* harmony export */   updateTabThread: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateTabThread),
/* harmony export */   updateThread: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateThread),
/* harmony export */   updateThreadInfo: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateThreadInfo),
/* harmony export */   updateThreadInfos: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateThreadInfos),
/* harmony export */   updateThreadUnreadFromForwardedMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateThreadUnreadFromForwardedMessage),
/* harmony export */   updateTopic: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_15__.updateTopic),
/* harmony export */   updateTopicLastMessageId: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_15__.updateTopicLastMessageId),
/* harmony export */   updateTopics: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_15__.updateTopics),
/* harmony export */   updateTwoFaSettings: () => (/* reexport safe */ _twoFaSettings__WEBPACK_IMPORTED_MODULE_8__.updateTwoFaSettings),
/* harmony export */   updateUploadByMessageKey: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_1__.updateUploadByMessageKey),
/* harmony export */   updateUser: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateUser),
/* harmony export */   updateUserBlockedState: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateUserBlockedState),
/* harmony export */   updateUserCommonChats: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateUserCommonChats),
/* harmony export */   updateUserFullInfo: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateUserFullInfo),
/* harmony export */   updateUserSearch: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateUserSearch),
/* harmony export */   updateUserSearchFetchingStatus: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateUserSearchFetchingStatus),
/* harmony export */   updateUsers: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_3__.updateUsers),
/* harmony export */   updateVerifyMonetizationModal: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_11__.updateVerifyMonetizationModal)
/* harmony export */ });
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chats */ "./src/global/reducers/chats.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages */ "./src/global/reducers/messages.ts");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbols */ "./src/global/reducers/symbols.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./users */ "./src/global/reducers/users.ts");
/* harmony import */ var _globalSearch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./globalSearch */ "./src/global/reducers/globalSearch.ts");
/* harmony import */ var _middleSearch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./middleSearch */ "./src/global/reducers/middleSearch.ts");
/* harmony import */ var _management__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./management */ "./src/global/reducers/management.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./settings */ "./src/global/reducers/settings.ts");
/* harmony import */ var _twoFaSettings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./twoFaSettings */ "./src/global/reducers/twoFaSettings.ts");
/* harmony import */ var _passcode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./passcode */ "./src/global/reducers/passcode.ts");
/* harmony import */ var _payments__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./payments */ "./src/global/reducers/payments.ts");
/* harmony import */ var _statistics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./statistics */ "./src/global/reducers/statistics.ts");
/* harmony import */ var _stories__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./stories */ "./src/global/reducers/stories.ts");
/* harmony import */ var _translations__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./translations */ "./src/global/reducers/translations.ts");
/* harmony import */ var _peers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./peers */ "./src/global/reducers/peers.ts");
/* harmony import */ var _topics__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./topics */ "./src/global/reducers/topics.ts");

















/***/ }),

/***/ "./src/global/reducers/management.ts":
/*!*******************************************!*\
  !*** ./src/global/reducers/management.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateManagement: () => (/* binding */ updateManagement),
/* harmony export */   updateManagementProgress: () => (/* binding */ updateManagementProgress)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");



function updateManagementProgress(global, progress, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    management: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).management,
      progress
    }
  }, tabId);
}
function updateManagement(global, chatId, update, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    management
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    management: {
      ...management,
      byChatId: {
        ...management.byChatId,
        [chatId]: {
          ...(management.byChatId[chatId] || {}),
          ...update
        }
      }
    }
  }, tabId);
}

/***/ }),

/***/ "./src/global/reducers/messages.ts":
/*!*****************************************!*\
  !*** ./src/global/reducers/messages.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addActiveMediaDownload: () => (/* binding */ addActiveMediaDownload),
/* harmony export */   addChatMessagesById: () => (/* binding */ addChatMessagesById),
/* harmony export */   addMessages: () => (/* binding */ addMessages),
/* harmony export */   addViewportId: () => (/* binding */ addViewportId),
/* harmony export */   cancelMessageMediaDownload: () => (/* binding */ cancelMessageMediaDownload),
/* harmony export */   deleteChatMessages: () => (/* binding */ deleteChatMessages),
/* harmony export */   deleteChatScheduledMessages: () => (/* binding */ deleteChatScheduledMessages),
/* harmony export */   deleteQuickReply: () => (/* binding */ deleteQuickReply),
/* harmony export */   deleteQuickReplyMessages: () => (/* binding */ deleteQuickReplyMessages),
/* harmony export */   deleteSponsoredMessage: () => (/* binding */ deleteSponsoredMessage),
/* harmony export */   enterMessageSelectMode: () => (/* binding */ enterMessageSelectMode),
/* harmony export */   exitMessageSelectMode: () => (/* binding */ exitMessageSelectMode),
/* harmony export */   removeOutlyingList: () => (/* binding */ removeOutlyingList),
/* harmony export */   replaceMessages: () => (/* binding */ replaceMessages),
/* harmony export */   replaceTabThreadParam: () => (/* binding */ replaceTabThreadParam),
/* harmony export */   replaceThreadParam: () => (/* binding */ replaceThreadParam),
/* harmony export */   safeReplacePinnedIds: () => (/* binding */ safeReplacePinnedIds),
/* harmony export */   safeReplaceViewportIds: () => (/* binding */ safeReplaceViewportIds),
/* harmony export */   toggleMessageSelection: () => (/* binding */ toggleMessageSelection),
/* harmony export */   updateChatMessage: () => (/* binding */ updateChatMessage),
/* harmony export */   updateCurrentMessageList: () => (/* binding */ updateCurrentMessageList),
/* harmony export */   updateFocusDirection: () => (/* binding */ updateFocusDirection),
/* harmony export */   updateFocusedMessage: () => (/* binding */ updateFocusedMessage),
/* harmony export */   updateListedIds: () => (/* binding */ updateListedIds),
/* harmony export */   updateMessageStore: () => (/* binding */ updateMessageStore),
/* harmony export */   updateOutlyingLists: () => (/* binding */ updateOutlyingLists),
/* harmony export */   updatePoll: () => (/* binding */ updatePoll),
/* harmony export */   updatePollVote: () => (/* binding */ updatePollVote),
/* harmony export */   updateQuickReplies: () => (/* binding */ updateQuickReplies),
/* harmony export */   updateQuickReplyMessage: () => (/* binding */ updateQuickReplyMessage),
/* harmony export */   updateQuickReplyMessages: () => (/* binding */ updateQuickReplyMessages),
/* harmony export */   updateScheduledMessage: () => (/* binding */ updateScheduledMessage),
/* harmony export */   updateScheduledMessages: () => (/* binding */ updateScheduledMessages),
/* harmony export */   updateSponsoredMessage: () => (/* binding */ updateSponsoredMessage),
/* harmony export */   updateTabThread: () => (/* binding */ updateTabThread),
/* harmony export */   updateThread: () => (/* binding */ updateThread),
/* harmony export */   updateThreadInfo: () => (/* binding */ updateThreadInfo),
/* harmony export */   updateThreadInfos: () => (/* binding */ updateThreadInfos),
/* harmony export */   updateThreadUnreadFromForwardedMessage: () => (/* binding */ updateThreadUnreadFromForwardedMessage),
/* harmony export */   updateUploadByMessageKey: () => (/* binding */ updateUploadByMessageKey)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_areDeepEqual__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/areDeepEqual */ "./src/util/areDeepEqual.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _helpers_getEmojiOnlyCountForMessage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/getEmojiOnlyCountForMessage */ "./src/global/helpers/getEmojiOnlyCountForMessage.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _middleSearch__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./middleSearch */ "./src/global/reducers/middleSearch.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");
/* harmony import */ var _translations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./translations */ "./src/global/reducers/translations.ts");












function updateCurrentMessageList(global, chatId, threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, type = 'thread', shouldReplaceHistory, shouldReplaceLast, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const {
    messageLists
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  let newMessageLists = messageLists;
  if (shouldReplaceHistory || _config__WEBPACK_IMPORTED_MODULE_1__.IS_TEST && !_config__WEBPACK_IMPORTED_MODULE_1__.IS_MOCKED_CLIENT) {
    newMessageLists = chatId ? [{
      chatId,
      threadId,
      type
    }] : [];
  } else if (chatId) {
    const current = messageLists[messageLists.length - 1];
    if (current?.chatId === chatId && current.threadId === threadId && current.type === type) {
      return global;
    }
    if (current && (current.chatId === _config__WEBPACK_IMPORTED_MODULE_1__.TMP_CHAT_ID || shouldReplaceLast)) {
      newMessageLists = [...messageLists.slice(0, -1), {
        chatId,
        threadId,
        type
      }];
    } else {
      const previous = messageLists[messageLists.length - 2];
      if (previous?.chatId === chatId && previous.threadId === threadId && previous.type === type) {
        newMessageLists = messageLists.slice(0, -1);
      } else {
        newMessageLists = [...messageLists, {
          chatId,
          threadId,
          type
        }];
      }
    }
  } else {
    newMessageLists = messageLists.slice(0, -1);
  }
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    messageLists: newMessageLists
  }, tabId);
}
function replaceChatMessages(global, chatId, newById) {
  return updateMessageStore(global, chatId, {
    byId: newById
  });
}
function updateTabThread(global, chatId, threadId, threadUpdate, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  const current = tabState.tabThreads[chatId]?.[threadId] || {};
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    tabThreads: {
      ...tabState.tabThreads,
      [chatId]: {
        ...tabState.tabThreads[chatId],
        [threadId]: {
          ...current,
          ...threadUpdate
        }
      }
    }
  }, tabId);
}
function updateThread(global, chatId, threadId, threadUpdate) {
  if (!threadUpdate) {
    return updateMessageStore(global, chatId, {
      threadsById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(global.messages.byChatId[chatId]?.threadsById, [threadId])
    });
  }
  const current = global.messages.byChatId[chatId];
  return updateMessageStore(global, chatId, {
    threadsById: {
      ...current?.threadsById,
      [threadId]: {
        ...current?.threadsById[threadId],
        ...threadUpdate
      }
    }
  });
}
function updateMessageStore(global, chatId, update) {
  const current = global.messages.byChatId[chatId] || {
    byId: {},
    threadsById: {}
  };
  return {
    ...global,
    messages: {
      ...global.messages,
      byChatId: {
        ...global.messages.byChatId,
        [chatId]: {
          ...current,
          ...update
        }
      }
    }
  };
}
function replaceTabThreadParam(global, chatId, threadId, paramName, newValue, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  if (paramName === 'viewportIds') {
    global = replaceThreadParam(global, chatId, threadId, 'lastViewportIds', newValue);
  }
  return updateTabThread(global, chatId, threadId, {
    [paramName]: newValue
  }, tabId);
}
function replaceThreadParam(global, chatId, threadId, paramName, newValue) {
  return updateThread(global, chatId, threadId, {
    [paramName]: newValue
  });
}
function addMessages(global, messages) {
  const addedByChatId = messages.reduce((messagesByChatId, message) => {
    if (!messagesByChatId[message.chatId]) {
      messagesByChatId[message.chatId] = {};
    }
    messagesByChatId[message.chatId][message.id] = message;
    return messagesByChatId;
  }, {});
  Object.keys(addedByChatId).forEach(chatId => {
    global = addChatMessagesById(global, chatId, addedByChatId[chatId]);
  });
  return global;
}
function replaceMessages(global, messages) {
  const updatedByChatId = messages.reduce((messagesByChatId, message) => {
    if (!messagesByChatId[message.chatId]) {
      messagesByChatId[message.chatId] = {};
    }
    messagesByChatId[message.chatId][message.id] = message;
    return messagesByChatId;
  }, {});
  Object.keys(updatedByChatId).forEach(chatId => {
    const currentById = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatMessages)(global, chatId) || {};
    const newById = {
      ...currentById,
      ...updatedByChatId[chatId]
    };
    global = replaceChatMessages(global, chatId, newById);
  });
  return global;
}
function addChatMessagesById(global, chatId, newById) {
  const byId = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatMessages)(global, chatId);
  if (byId && Object.keys(newById).every(newId => Boolean(byId[Number(newId)]))) {
    return global;
  }
  return replaceChatMessages(global, chatId, {
    ...newById,
    ...byId
  });
}
function updateChatMessage(global, chatId, messageId, messageUpdate, withDeepCheck = false) {
  const byId = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatMessages)(global, chatId) || {};
  const message = byId[messageId];
  if (withDeepCheck && message) {
    const updateKeys = Object.keys(messageUpdate);
    if ((0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_2__.areDeepEqual)((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.pick)(message, updateKeys), messageUpdate)) {
      return global;
    }
  }
  if (message && messageUpdate.isMediaUnread === false && (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.hasMessageTtl)(message)) {
    if (message.content.voice) {
      messageUpdate.content = {
        ...messageUpdate.content,
        voice: undefined,
        isExpiredVoice: true
      };
    } else if (message.content.video?.isRound) {
      messageUpdate.content = {
        ...messageUpdate.content,
        video: undefined,
        isExpiredRoundVideo: true
      };
    }
  }
  let emojiOnlyCount = message?.emojiOnlyCount;
  if (messageUpdate.content) {
    emojiOnlyCount = (0,_helpers_getEmojiOnlyCountForMessage__WEBPACK_IMPORTED_MODULE_7__.getEmojiOnlyCountForMessage)(messageUpdate.content, message?.groupedId || messageUpdate.groupedId);
  }
  const updatedMessage = {
    ...message,
    ...messageUpdate,
    emojiOnlyCount
  };
  if (!updatedMessage.id) {
    return global;
  }
  return replaceChatMessages(global, chatId, {
    ...byId,
    [messageId]: updatedMessage
  });
}
function updateScheduledMessage(global, chatId, messageId, messageUpdate) {
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectScheduledMessage)(global, chatId, messageId);
  let emojiOnlyCount = message?.emojiOnlyCount;
  if (messageUpdate.content) {
    emojiOnlyCount = (0,_helpers_getEmojiOnlyCountForMessage__WEBPACK_IMPORTED_MODULE_7__.getEmojiOnlyCountForMessage)(messageUpdate.content, message?.groupedId || messageUpdate.groupedId);
  }
  const updatedMessage = {
    ...message,
    ...messageUpdate,
    emojiOnlyCount
  };
  if (!updatedMessage.id) {
    return global;
  }
  return updateScheduledMessages(global, chatId, {
    [messageId]: updatedMessage
  });
}
function updateQuickReplyMessage(global, messageId, messageUpdate) {
  const message = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectQuickReplyMessage)(global, messageId);
  const updatedMessage = {
    ...message,
    ...messageUpdate
  };
  if (!updatedMessage.id) {
    return global;
  }
  return updateQuickReplyMessages(global, {
    [messageId]: updatedMessage
  });
}
function deleteQuickReplyMessages(global, messageIds) {
  const byId = global.quickReplies.messagesById;
  const newById = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(byId, messageIds);
  return {
    ...global,
    quickReplies: {
      ...global.quickReplies,
      messagesById: newById
    }
  };
}
function deleteChatMessages(global, chatId, messageIds) {
  const byId = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatMessages)(global, chatId);
  if (!byId) {
    return global;
  }
  (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.orderHistoryIds)(messageIds);
  const updatedThreads = new Map();
  updatedThreads.set(_api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, messageIds);
  const mediaIdsToRemove = [];
  messageIds.forEach(messageId => {
    const message = byId[messageId];
    if (!message) return;
    if ((0,_helpers__WEBPACK_IMPORTED_MODULE_6__.isMediaLoadableInViewer)(message)) {
      mediaIdsToRemove.push(messageId);
    }
    const threadId = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectThreadIdFromMessage)(global, message);
    if (!threadId || threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
      return;
    }
    const threadMessages = updatedThreads.get(threadId) || [];
    threadMessages.push(messageId);
    updatedThreads.set(threadId, threadMessages);
    global = (0,_translations__WEBPACK_IMPORTED_MODULE_11__.clearMessageTranslation)(global, chatId, messageId);
  });
  const deletedForwardedPosts = Object.values((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.pickTruthy)(byId, messageIds)).filter(({
    forwardInfo
  }) => forwardInfo?.isLinkedChannelPost);
  updatedThreads.forEach((threadMessageIds, threadId) => {
    const threadInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectThreadInfo)(global, chatId, threadId);
    let listedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectListedIds)(global, chatId, threadId);
    let pinnedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPinnedIds)(global, chatId, threadId);
    let outlyingLists = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectOutlyingLists)(global, chatId, threadId);
    let newMessageCount = threadInfo?.messagesCount;
    if (listedIds) {
      listedIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.excludeSortedArray)(listedIds, threadMessageIds);
    }
    if (outlyingLists) {
      outlyingLists = outlyingLists.map(list => (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.excludeSortedArray)(list, threadMessageIds));
    }
    if (pinnedIds) {
      pinnedIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.excludeSortedArray)(pinnedIds, (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.orderPinnedIds)(threadMessageIds));
    }
    const nonLocalMessageCount = threadMessageIds.filter(id => !(0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_5__.isLocalMessageId)(id)).length;
    if (newMessageCount !== undefined) {
      newMessageCount -= nonLocalMessageCount;
    }
    Object.values(global.byTabId).forEach(({
      id: tabId
    }) => {
      const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
      const activeDownloadsInChat = Object.entries(tabState.activeDownloads).filter(([, {
        originChatId,
        originMessageId
      }]) => originChatId === chatId && originMessageId);
      activeDownloadsInChat.forEach(([mediaHash, context]) => {
        if (messageIds.includes(context.originMessageId)) {
          global = cancelMessageMediaDownload(global, [mediaHash], tabId);
        }
      });
      mediaIdsToRemove.forEach(mediaId => {
        global = (0,_middleSearch__WEBPACK_IMPORTED_MODULE_9__.removeIdFromSearchResults)(global, chatId, threadId, mediaId, tabId);
      });
      const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectViewportIds)(global, chatId, threadId, tabId);
      if (!viewportIds) return;
      const newViewportIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.excludeSortedArray)(viewportIds, messageIds);
      global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', newViewportIds.length === 0 ? undefined : newViewportIds, tabId);
    });
    global = replaceThreadParam(global, chatId, threadId, 'listedIds', listedIds);
    global = replaceThreadParam(global, chatId, threadId, 'outlyingLists', outlyingLists);
    global = replaceThreadParam(global, chatId, threadId, 'pinnedIds', pinnedIds);
    if (threadInfo && newMessageCount !== undefined) {
      global = updateThreadInfo(global, chatId, threadId, {
        messagesCount: newMessageCount
      });
    }
  });
  if (deletedForwardedPosts.length) {
    Object.values(global.byTabId).forEach(({
      id: tabId
    }) => {
      const currentMessageList = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectCurrentMessageList)(global, tabId);
      const canDeleteCurrentThread = currentMessageList && currentMessageList.chatId === chatId && currentMessageList.type === 'thread';
      const currentThreadId = currentMessageList?.threadId;
      deletedForwardedPosts.forEach(message => {
        const {
          fromChatId,
          fromMessageId
        } = message.forwardInfo;
        const originalPost = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatMessage)(global, fromChatId, fromMessageId);
        if (canDeleteCurrentThread && currentThreadId === message.id) {
          global = updateCurrentMessageList(global, chatId, undefined, undefined, undefined, undefined, tabId);
        }
        if (originalPost) {
          global = updateThread(global, fromChatId, fromMessageId, undefined);
        }
      });
    });
  }
  const newById = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(byId, messageIds);
  global = replaceChatMessages(global, chatId, newById);
  return global;
}
function deleteChatScheduledMessages(global, chatId, messageIds) {
  const byId = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectChatScheduledMessages)(global, chatId);
  if (!byId) {
    return global;
  }
  const newById = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(byId, messageIds);
  let scheduledIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectScheduledIds)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID);
  if (scheduledIds) {
    messageIds.forEach(messageId => {
      if (scheduledIds.includes(messageId)) {
        scheduledIds = scheduledIds.filter(id => id !== messageId);
      }
    });
    global = replaceThreadParam(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'scheduledIds', scheduledIds);
    Object.entries(global.messages.byChatId[chatId].threadsById).forEach(([threadId, thread]) => {
      if (thread.scheduledIds) {
        const newScheduledIds = thread.scheduledIds.filter(id => !messageIds.includes(id));
        global = replaceThreadParam(global, chatId, Number(threadId), 'scheduledIds', newScheduledIds);
      }
    });
  }
  global = {
    ...global,
    scheduledMessages: {
      byChatId: {
        ...global.scheduledMessages.byChatId,
        [chatId]: {
          byId: newById
        }
      }
    }
  };
  return global;
}
function updateListedIds(global, chatId, threadId, idsUpdate) {
  const listedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectListedIds)(global, chatId, threadId);
  const newIds = listedIds?.length ? idsUpdate.filter(id => !listedIds.includes(id)) : idsUpdate;
  if (listedIds && !newIds.length) {
    return global;
  }
  return replaceThreadParam(global, chatId, threadId, 'listedIds', (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.orderHistoryIds)([...(listedIds || []), ...newIds]));
}
function removeOutlyingList(global, chatId, threadId, list) {
  const outlyingLists = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectOutlyingLists)(global, chatId, threadId);
  if (!outlyingLists) {
    return global;
  }
  const newOutlyingLists = outlyingLists.filter(l => l !== list);
  return replaceThreadParam(global, chatId, threadId, 'outlyingLists', newOutlyingLists);
}
function updateOutlyingLists(global, chatId, threadId, idsUpdate) {
  if (!idsUpdate.length) return global;
  const outlyingLists = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectOutlyingLists)(global, chatId, threadId);
  const newOutlyingLists = (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.mergeIdRanges)(outlyingLists || [], idsUpdate);
  return replaceThreadParam(global, chatId, threadId, 'outlyingLists', newOutlyingLists);
}
function addViewportId(global, chatId, threadId, newId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectViewportIds)(global, chatId, threadId, tabId) || [];
  if (viewportIds.includes(newId)) {
    return global;
  }
  const newIds = (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.orderHistoryIds)([...(viewportIds.length < _config__WEBPACK_IMPORTED_MODULE_1__.MESSAGE_LIST_VIEWPORT_LIMIT ? viewportIds : viewportIds.slice(-(_config__WEBPACK_IMPORTED_MODULE_1__.MESSAGE_LIST_SLICE / 2))), newId]);
  return replaceTabThreadParam(global, chatId, threadId, 'viewportIds', newIds, tabId);
}
function safeReplaceViewportIds(global, chatId, threadId, newViewportIds, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const currentIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectViewportIds)(global, chatId, threadId, tabId) || [];
  const newIds = (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.orderHistoryIds)(newViewportIds);
  return replaceTabThreadParam(global, chatId, threadId, 'viewportIds', (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.areSortedArraysEqual)(currentIds, newIds) ? currentIds : newIds, tabId);
}
function safeReplacePinnedIds(global, chatId, threadId, newPinnedIds) {
  const currentIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPinnedIds)(global, chatId, threadId) || [];
  const newIds = (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.orderPinnedIds)(newPinnedIds);
  return replaceThreadParam(global, chatId, threadId, 'pinnedIds', (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.areSortedArraysEqual)(currentIds, newIds) ? currentIds : newIds);
}
function updateThreadInfo(global, chatId, threadId, update, doNotUpdateLinked) {
  const newThreadInfo = {
    ...(0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectThreadInfo)(global, chatId, threadId),
    ...update
  };
  if (!doNotUpdateLinked && !newThreadInfo.isCommentsInfo) {
    const linkedUpdate = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.pick)(newThreadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId']);
    if (newThreadInfo.fromChannelId && newThreadInfo.fromMessageId) {
      global = updateThreadInfo(global, newThreadInfo.fromChannelId, newThreadInfo.fromMessageId, linkedUpdate, true);
    }
  }
  return replaceThreadParam(global, chatId, threadId, 'threadInfo', newThreadInfo);
}
function updateThreadInfos(global, updates) {
  updates.forEach(update => {
    global = updateThreadInfo(global, update.isCommentsInfo ? update.originChannelId : update.chatId, update.isCommentsInfo ? update.originMessageId : update.threadId, update);
  });
  return global;
}
function updateScheduledMessages(global, chatId, newById) {
  const current = global.scheduledMessages.byChatId[chatId] || {
    byId: {},
    hash: 0
  };
  return {
    ...global,
    scheduledMessages: {
      byChatId: {
        ...global.scheduledMessages.byChatId,
        [chatId]: {
          ...current,
          byId: {
            ...current.byId,
            ...newById
          }
        }
      }
    }
  };
}
function updateQuickReplyMessages(global, update) {
  return {
    ...global,
    quickReplies: {
      ...global.quickReplies,
      messagesById: {
        ...global.quickReplies.messagesById,
        ...update
      }
    }
  };
}
function updateFocusedMessage({
  global,
  chatId,
  messageId,
  threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID,
  noHighlight = false,
  isResizingContainer = false,
  quote,
  scrollTargetPosition
}, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    focusedMessage: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId).focusedMessage,
      chatId,
      threadId,
      messageId,
      noHighlight,
      isResizingContainer,
      quote,
      scrollTargetPosition
    }
  }, tabId);
}
function updateSponsoredMessage(global, chatId, message) {
  return {
    ...global,
    messages: {
      ...global.messages,
      sponsoredByChatId: {
        ...global.messages.sponsoredByChatId,
        [chatId]: message
      }
    }
  };
}
function deleteSponsoredMessage(global, chatId) {
  const byChatId = global.messages.sponsoredByChatId;
  if (!byChatId[chatId]) {
    return global;
  }
  return {
    ...global,
    messages: {
      ...global.messages,
      sponsoredByChatId: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(byChatId, [chatId])
    }
  };
}
function updateFocusDirection(global, direction, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    focusedMessage: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId).focusedMessage,
      direction
    }
  }, tabId);
}
function enterMessageSelectMode(global, chatId, messageId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const messageIds = messageId ? Array.prototype.concat([], messageId) : [];
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    selectedMessages: {
      chatId,
      messageIds
    }
  }, tabId);
}
function toggleMessageSelection(global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift = false, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const {
    selectedMessages: oldSelectedMessages
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  if (groupedId) {
    childMessageIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectMessageIdsByGroupId)(global, chatId, groupedId);
  }
  const selectedMessageIds = childMessageIds || [messageId];
  if (!oldSelectedMessages) {
    return enterMessageSelectMode(global, chatId, selectedMessageIds, tabId);
  }
  const {
    messageIds
  } = oldSelectedMessages;
  let newMessageIds;
  const newSelectedMessageIds = selectedMessageIds.filter(id => !messageIds.includes(id));
  if (newSelectedMessageIds && !newSelectedMessageIds.length) {
    newMessageIds = messageIds.filter(id => !selectedMessageIds.includes(id));
  } else if (withShift && messageIds.length) {
    const viewportIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectCurrentMessageIds)(global, chatId, threadId, messageListType, tabId);
    const prevIndex = viewportIds.indexOf(messageIds[messageIds.length - 1]);
    const currentIndex = viewportIds.indexOf(messageId);
    const from = Math.min(prevIndex, currentIndex);
    const to = Math.max(prevIndex, currentIndex);
    const slice = viewportIds.slice(from, to + 1);
    newMessageIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.unique)([...messageIds, ...slice]);
  } else {
    newMessageIds = [...messageIds, ...newSelectedMessageIds];
  }
  if (!newMessageIds.length) {
    return exitMessageSelectMode(global, tabId);
  }
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    selectedMessages: {
      ...oldSelectedMessages,
      messageIds: newMessageIds
    }
  }, tabId);
}
function exitMessageSelectMode(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    selectedMessages: undefined
  }, tabId);
}
function updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, lastMessageId, isDeleting) {
  const {
    channelPostId,
    fromChatId
  } = originMessage.forwardInfo || {};
  if (channelPostId && fromChatId) {
    const threadInfoOld = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectThreadInfo)(global, chatId, channelPostId);
    if (threadInfoOld) {
      global = replaceThreadParam(global, chatId, channelPostId, 'threadInfo', {
        ...threadInfoOld,
        lastMessageId,
        messagesCount: (threadInfoOld.messagesCount || 0) + (isDeleting ? -1 : 1)
      });
    }
  }
  return global;
}
function addActiveMediaDownload(global, mediaHash, metadata, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    activeDownloads: {
      ...tabState.activeDownloads,
      [mediaHash]: metadata
    }
  }, tabId);
  return global;
}
function cancelMessageMediaDownload(global, mediaHashes, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_3__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)(global, tabId);
  const newActiveDownloads = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(tabState.activeDownloads, mediaHashes);
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_10__.updateTabState)(global, {
    activeDownloads: newActiveDownloads
  }, tabId);
  return global;
}
function updateUploadByMessageKey(global, messageKey, progress) {
  return {
    ...global,
    fileUploads: {
      byMessageKey: progress !== undefined ? {
        ...global.fileUploads.byMessageKey,
        [messageKey]: {
          progress
        }
      } : (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(global.fileUploads.byMessageKey, [messageKey])
    }
  };
}
function updateQuickReplies(global, quickRepliesUpdate) {
  return {
    ...global,
    quickReplies: {
      ...global.quickReplies,
      byId: {
        ...global.quickReplies.byId,
        ...quickRepliesUpdate
      }
    }
  };
}
function deleteQuickReply(global, quickReplyId) {
  return {
    ...global,
    quickReplies: {
      ...global.quickReplies,
      byId: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.omit)(global.quickReplies.byId, [quickReplyId])
    }
  };
}
function updatePoll(global, pollId, pollUpdate) {
  const poll = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPoll)(global, pollId);
  const oldResults = poll?.results;
  let newResults = oldResults || pollUpdate.results;
  if (poll && pollUpdate.results?.results) {
    if (!poll.results || !pollUpdate.results.isMin) {
      newResults = pollUpdate.results;
    } else if (oldResults.results) {
      // Update voters counts, but keep local `isChosen` values
      newResults = {
        ...pollUpdate.results,
        results: pollUpdate.results.results.map(result => ({
          ...result,
          isChosen: oldResults.results.find(r => r.option === result.option)?.isChosen
        })),
        isMin: undefined
      };
    }
  }
  const updatedPoll = {
    ...poll,
    ...pollUpdate,
    results: newResults
  };
  if (!updatedPoll.id) {
    return global;
  }
  return {
    ...global,
    messages: {
      ...global.messages,
      pollById: {
        ...global.messages.pollById,
        [pollId]: updatedPoll
      }
    }
  };
}
function updatePollVote(global, pollId, peerId, options) {
  const poll = (0,_selectors__WEBPACK_IMPORTED_MODULE_8__.selectPoll)(global, pollId);
  if (!poll) {
    return global;
  }
  const {
    recentVoterIds,
    totalVoters,
    results
  } = poll.results;
  const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];
  const newTotalVoters = totalVoters ? totalVoters + 1 : 1;
  const newResults = results ? [...results] : [];
  newRecentVoterIds.push(peerId);
  options.forEach(option => {
    const targetOptionIndex = newResults.findIndex(result => result.option === option);
    const targetOption = newResults[targetOptionIndex];
    const updatedOption = targetOption ? {
      ...targetOption
    } : {
      option,
      votersCount: 0
    };
    updatedOption.votersCount += 1;
    if (peerId === global.currentUserId) {
      updatedOption.isChosen = true;
    }
    if (targetOptionIndex) {
      newResults[targetOptionIndex] = updatedOption;
    } else {
      newResults.push(updatedOption);
    }
  });
  return updatePoll(global, pollId, {
    results: {
      ...poll.results,
      recentVoterIds: newRecentVoterIds,
      totalVoters: newTotalVoters,
      results: newResults
    }
  });
}

/***/ }),

/***/ "./src/global/reducers/middleSearch.ts":
/*!*********************************************!*\
  !*** ./src/global/reducers/middleSearch.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   closeMiddleSearch: () => (/* binding */ closeMiddleSearch),
/* harmony export */   initializeChatMediaSearchResults: () => (/* binding */ initializeChatMediaSearchResults),
/* harmony export */   mergeWithChatMediaSearchSegment: () => (/* binding */ mergeWithChatMediaSearchSegment),
/* harmony export */   removeIdFromSearchResults: () => (/* binding */ removeIdFromSearchResults),
/* harmony export */   replaceChatMediaSearchResults: () => (/* binding */ replaceChatMediaSearchResults),
/* harmony export */   replaceSharedMediaSearchResults: () => (/* binding */ replaceSharedMediaSearchResults),
/* harmony export */   resetMiddleSearch: () => (/* binding */ resetMiddleSearch),
/* harmony export */   setChatMediaSearchLoading: () => (/* binding */ setChatMediaSearchLoading),
/* harmony export */   updateChatMediaLoadingState: () => (/* binding */ updateChatMediaLoadingState),
/* harmony export */   updateChatMediaSearchResults: () => (/* binding */ updateChatMediaSearchResults),
/* harmony export */   updateMiddleSearch: () => (/* binding */ updateMiddleSearch),
/* harmony export */   updateMiddleSearchResults: () => (/* binding */ updateMiddleSearchResults),
/* harmony export */   updateSharedMediaSearchResults: () => (/* binding */ updateSharedMediaSearchResults),
/* harmony export */   updateSharedMediaSearchType: () => (/* binding */ updateSharedMediaSearchType)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _selectors_middleSearch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../selectors/middleSearch */ "./src/global/selectors/middleSearch.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");






function replaceMiddleSearch(global, chatThreadKey, searchParams, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const current = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).middleSearch.byChatThreadKey;
  if (!searchParams) {
    return (0,_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
      middleSearch: {
        byChatThreadKey: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.omit)(current, [chatThreadKey])
      }
    }, tabId);
  }
  const {
    type = 'chat',
    ...rest
  } = searchParams;
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    middleSearch: {
      byChatThreadKey: {
        ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).middleSearch.byChatThreadKey,
        [chatThreadKey]: {
          type,
          ...rest
        }
      }
    }
  }, tabId);
}
function updateMiddleSearch(global, chatId, threadId, update, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  const currentSearch = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).middleSearch.byChatThreadKey[chatThreadKey];
  const updated = {
    type: 'chat',
    ...currentSearch,
    ...update
  };
  if (!updated.isHashtag) {
    updated.type = 'chat';
  }
  if (currentSearch && (currentSearch.type !== updated.type || currentSearch.savedTag !== updated.savedTag)) {
    updated.results = undefined;
  }
  return replaceMiddleSearch(global, chatThreadKey, updated, tabId);
}
function resetMiddleSearch(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return replaceMiddleSearch(global, (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId), {
    type: 'chat'
  }, tabId);
}
function replaceMiddleSearchResults(global, chatId, threadId, results, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updateMiddleSearch(global, chatId, threadId, {
    results,
    fetchingQuery: undefined
  }, tabId);
}
function updateMiddleSearchResults(global, chatId, threadId, update, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  const {
    results
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).middleSearch.byChatThreadKey[chatThreadKey] || {};
  const prevQuery = results?.query || '';
  if (update.query !== prevQuery) {
    return replaceMiddleSearchResults(global, chatId, threadId, update, tabId);
  }
  const prevFoundIds = results?.foundIds || [];
  const {
    query,
    foundIds: newFoundIds,
    totalCount,
    nextOffsetId,
    nextOffsetPeerId,
    nextOffsetRate
  } = update;
  const foundIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(Array.prototype.concat(prevFoundIds, newFoundIds));
  const foundOrPrevFoundIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.areSortedArraysEqual)(prevFoundIds, foundIds) ? prevFoundIds : foundIds;
  return replaceMiddleSearchResults(global, chatId, threadId, {
    query,
    foundIds: foundOrPrevFoundIds,
    totalCount,
    nextOffsetId,
    nextOffsetRate,
    nextOffsetPeerId
  }, tabId);
}
function closeMiddleSearch(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  return replaceMiddleSearch(global, chatThreadKey, undefined, tabId);
}
function replaceSharedMediaSearch(global, chatId, threadId, searchParams, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    sharedMediaSearch: {
      byChatThreadKey: {
        ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).sharedMediaSearch.byChatThreadKey,
        [chatThreadKey]: searchParams
      }
    }
  }, tabId);
}
function updateSharedMediaSearchType(global, chatId, threadId, currentType, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  return replaceSharedMediaSearch(global, chatId, threadId, {
    ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).sharedMediaSearch.byChatThreadKey[chatThreadKey],
    currentType
  }, tabId);
}
function replaceSharedMediaSearchResults(global, chatId, threadId, type, foundIds, totalCount, nextOffsetId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  return replaceSharedMediaSearch(global, chatId, threadId, {
    ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).sharedMediaSearch.byChatThreadKey[chatThreadKey],
    resultsByType: {
      ...((0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).sharedMediaSearch.byChatThreadKey[chatThreadKey] || {}).resultsByType,
      [type]: {
        foundIds,
        totalCount,
        nextOffsetId
      }
    }
  }, tabId);
}
function updateSharedMediaSearchResults(global, chatId, threadId, type, newFoundIds, totalCount, nextOffsetId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  const {
    resultsByType
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).sharedMediaSearch.byChatThreadKey[chatThreadKey] || {};
  const prevFoundIds = resultsByType?.[type] ? resultsByType[type].foundIds : [];
  const foundIds = orderFoundIdsByDescending((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(Array.prototype.concat(prevFoundIds, newFoundIds)));
  const foundOrPrevFoundIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.areSortedArraysEqual)(prevFoundIds, foundIds) ? prevFoundIds : foundIds;
  return replaceSharedMediaSearchResults(global, chatId, threadId, type, foundOrPrevFoundIds, totalCount, nextOffsetId, tabId);
}
function orderFoundIdsByDescending(listedIds) {
  return listedIds.sort((a, b) => b - a);
}
function orderFoundIdsByAscending(array) {
  return array.sort((a, b) => a - b);
}
function mergeWithChatMediaSearchSegment(foundIds, loadingState, segment) {
  if (!segment) {
    return {
      foundIds,
      loadingState
    };
  }
  const mergedFoundIds = orderFoundIdsByAscending((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(Array.prototype.concat(segment.foundIds, foundIds)));
  if (!(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.areSortedArraysEqual)(segment.foundIds, foundIds)) {
    segment.foundIds = mergedFoundIds;
  }
  const mergedLoadingState = {
    areAllItemsLoadedForwards: loadingState.areAllItemsLoadedForwards || segment.loadingState.areAllItemsLoadedForwards,
    areAllItemsLoadedBackwards: loadingState.areAllItemsLoadedBackwards || segment.loadingState.areAllItemsLoadedBackwards
  };
  segment.loadingState = mergedLoadingState;
  return segment;
}
function mergeChatMediaSearchSegments(currentSegment, segments) {
  return segments.reduce((acc, segment) => {
    const hasIntersection = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.areSortedArraysIntersecting)(segment.foundIds, currentSegment.foundIds);
    if (hasIntersection) {
      currentSegment = mergeWithChatMediaSearchSegment(currentSegment.foundIds, currentSegment.loadingState, segment);
    } else {
      acc.push(segment);
    }
    return acc;
  }, []);
}
function updateChatMediaSearchResults(global, chatId, threadId, currentSegment, searchParams, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const segments = mergeChatMediaSearchSegments(currentSegment, searchParams.segments);
  return replaceChatMediaSearchResults(global, chatId, threadId, currentSegment, segments, tabId);
}
function removeIdFromSegment(id, segment) {
  const foundIds = segment.foundIds.filter(foundId => foundId !== id);
  return {
    ...segment,
    foundIds
  };
}
function removeIdsFromChatMediaSearchParams(id, searchParams) {
  const currentSegment = removeIdFromSegment(id, searchParams.currentSegment);
  const segments = searchParams.segments.map(segment => removeIdFromSegment(id, segment));
  return {
    ...searchParams,
    currentSegment,
    segments
  };
}
function removeIdFromSearchResults(global, chatId, threadId, id, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const searchParams = (0,_selectors_middleSearch__WEBPACK_IMPORTED_MODULE_4__.selectChatMediaSearch)(global, chatId, threadId, tabId);
  if (!searchParams) return global;
  const updatedSearchParams = removeIdsFromChatMediaSearchParams(id, searchParams);
  return replaceChatMediaSearch(global, chatId, threadId, updatedSearchParams, tabId);
}
function resetForwardsLoadingStateInParams(searchParams) {
  searchParams.currentSegment.loadingState.areAllItemsLoadedForwards = false;
  searchParams.segments.forEach(segment => {
    segment.loadingState.areAllItemsLoadedForwards = false;
  });
}
function updateChatMediaLoadingState(global, newMessage, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_2__.isMediaLoadableInViewer)(newMessage)) {
    return global;
  }
  const searchParams = (0,_selectors_middleSearch__WEBPACK_IMPORTED_MODULE_4__.selectChatMediaSearch)(global, chatId, threadId, tabId);
  if (!searchParams) return global;
  resetForwardsLoadingStateInParams(searchParams);
  return replaceChatMediaSearch(global, chatId, threadId, searchParams, tabId);
}
function initializeChatMediaSearchResults(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const loadingState = {
    areAllItemsLoadedForwards: false,
    areAllItemsLoadedBackwards: false
  };
  const currentSegment = {
    foundIds: [],
    loadingState
  };
  const segments = [];
  const isLoading = false;
  return replaceChatMediaSearch(global, chatId, threadId, {
    currentSegment,
    segments,
    isLoading
  }, tabId);
}
function setChatMediaSearchLoading(global, chatId, threadId, isLoading, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  const searchParams = (0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).chatMediaSearch.byChatThreadKey[chatThreadKey];
  if (!searchParams) {
    return global;
  }
  return replaceChatMediaSearch(global, chatId, threadId, {
    ...searchParams,
    isLoading
  }, tabId);
}
function replaceChatMediaSearchResults(global, chatId, threadId, currentSegment, segments, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  return replaceChatMediaSearch(global, chatId, threadId, {
    ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).chatMediaSearch.byChatThreadKey[chatThreadKey],
    currentSegment,
    segments
  }, tabId);
}
function replaceChatMediaSearch(global, chatId, threadId, searchParams, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const chatThreadKey = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.buildChatThreadKey)(chatId, threadId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_5__.updateTabState)(global, {
    chatMediaSearch: {
      byChatThreadKey: {
        ...(0,_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).chatMediaSearch.byChatThreadKey,
        [chatThreadKey]: searchParams
      }
    }
  }, tabId);
}

/***/ }),

/***/ "./src/global/reducers/passcode.ts":
/*!*****************************************!*\
  !*** ./src/global/reducers/passcode.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clearGlobalForLockScreen: () => (/* binding */ clearGlobalForLockScreen),
/* harmony export */   clearPasscodeSettings: () => (/* binding */ clearPasscodeSettings),
/* harmony export */   updatePasscodeSettings: () => (/* binding */ updatePasscodeSettings)
/* harmony export */ });
/* harmony import */ var _initialState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../initialState */ "./src/global/initialState.ts");

function updatePasscodeSettings(global, update) {
  return {
    ...global,
    passcode: {
      ...global.passcode,
      ...update
    }
  };
}
function clearPasscodeSettings(global) {
  return {
    ...global,
    passcode: {}
  };
}
function clearGlobalForLockScreen(global, withTabState = true) {
  const {
    theme,
    shouldUseSystemTheme,
    animationLevel,
    language
  } = global.settings.byKey;
  return {
    ..._initialState__WEBPACK_IMPORTED_MODULE_0__.INITIAL_GLOBAL_STATE,
    passcode: global.passcode,
    settings: {
      ..._initialState__WEBPACK_IMPORTED_MODULE_0__.INITIAL_GLOBAL_STATE.settings,
      byKey: {
        ..._initialState__WEBPACK_IMPORTED_MODULE_0__.INITIAL_GLOBAL_STATE.settings.byKey,
        theme,
        shouldUseSystemTheme,
        animationLevel,
        language
      }
    },
    ...(withTabState && {
      byTabId: Object.values(global.byTabId).reduce((acc, {
        id: tabId,
        isMasterTab
      }) => {
        acc[tabId] = {
          ..._initialState__WEBPACK_IMPORTED_MODULE_0__.INITIAL_TAB_STATE,
          isMasterTab,
          id: tabId
        };
        return acc;
      }, {})
    })
  };
}

/***/ }),

/***/ "./src/global/reducers/payments.ts":
/*!*****************************************!*\
  !*** ./src/global/reducers/payments.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   appendStarsSubscriptions: () => (/* binding */ appendStarsSubscriptions),
/* harmony export */   appendStarsTransactions: () => (/* binding */ appendStarsTransactions),
/* harmony export */   clearPayment: () => (/* binding */ clearPayment),
/* harmony export */   clearStarPayment: () => (/* binding */ clearStarPayment),
/* harmony export */   closeInvoice: () => (/* binding */ closeInvoice),
/* harmony export */   openStarsTransactionFromReceipt: () => (/* binding */ openStarsTransactionFromReceipt),
/* harmony export */   openStarsTransactionModal: () => (/* binding */ openStarsTransactionModal),
/* harmony export */   setConfirmPaymentUrl: () => (/* binding */ setConfirmPaymentUrl),
/* harmony export */   setPaymentStep: () => (/* binding */ setPaymentStep),
/* harmony export */   setReceipt: () => (/* binding */ setReceipt),
/* harmony export */   setRequestInfoId: () => (/* binding */ setRequestInfoId),
/* harmony export */   setSmartGlocalCardInfo: () => (/* binding */ setSmartGlocalCardInfo),
/* harmony export */   setStripeCardInfo: () => (/* binding */ setStripeCardInfo),
/* harmony export */   updatePayment: () => (/* binding */ updatePayment),
/* harmony export */   updateShippingOptions: () => (/* binding */ updateShippingOptions),
/* harmony export */   updateStarsBalance: () => (/* binding */ updateStarsBalance),
/* harmony export */   updateStarsPayment: () => (/* binding */ updateStarsPayment),
/* harmony export */   updateStarsSubscriptionLoading: () => (/* binding */ updateStarsSubscriptionLoading)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");



function updatePayment(global, update, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    payment: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment,
      ...update
    }
  }, tabId);
}
function updateStarsPayment(global, update, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const starPayment = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectStarsPayment)(global, tabId);
  if (!starPayment) {
    return global;
  }
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    starsPayment: {
      ...starPayment,
      ...update
    }
  }, tabId);
}
function updateShippingOptions(global, shippingOptions, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updatePayment(global, {
    shippingOptions
  }, tabId);
}
function setRequestInfoId(global, id, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updatePayment(global, {
    requestId: id
  }, tabId);
}
function setPaymentStep(global, step, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updatePayment(global, {
    step
  }, tabId);
}
function setStripeCardInfo(global, cardInfo, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updatePayment(global, {
    stripeCredentials: {
      ...cardInfo
    }
  }, tabId);
}
function setSmartGlocalCardInfo(global, cardInfo, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updatePayment(global, {
    smartGlocalCredentials: {
      ...cardInfo
    }
  }, tabId);
}
function setConfirmPaymentUrl(global, url, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return updatePayment(global, {
    confirmPaymentUrl: url
  }, tabId);
}
function setReceipt(global, receipt, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  if (!receipt) {
    return updatePayment(global, {
      receipt: undefined
    }, tabId);
  }
  return updatePayment(global, {
    receipt
  }, tabId);
}
function clearPayment(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    payment: {}
  }, tabId);
}
function clearStarPayment(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    starsPayment: {}
  }, tabId);
}
function closeInvoice(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  global = updatePayment(global, {
    isPaymentModalOpen: undefined,
    isExtendedMedia: undefined
  }, tabId);
  return global;
}
function updateStarsBalance(global, balance) {
  return {
    ...global,
    stars: {
      ...global.stars,
      balance
    }
  };
}
function appendStarsTransactions(global, type, transactions, nextOffset) {
  const history = global.stars?.history;
  if (!history) {
    return global;
  }
  const newTypeObject = {
    transactions: (history[type]?.transactions || []).concat(transactions),
    nextOffset
  };
  return {
    ...global,
    stars: {
      ...global.stars,
      history: {
        ...history,
        [type]: newTypeObject
      }
    }
  };
}
function appendStarsSubscriptions(global, subscriptions, nextOffset) {
  if (!global.stars) {
    return global;
  }
  const newObject = {
    list: (global.stars.subscriptions?.list || []).concat(subscriptions),
    nextOffset
  };
  return {
    ...global,
    stars: {
      ...global.stars,
      subscriptions: newObject
    }
  };
}
function updateStarsSubscriptionLoading(global, isLoading) {
  const subscriptions = global.stars?.subscriptions;
  if (!subscriptions) {
    return global;
  }
  return {
    ...global,
    stars: {
      ...global.stars,
      subscriptions: {
        ...subscriptions,
        isLoading
      }
    }
  };
}
function openStarsTransactionModal(global, transaction, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    starsTransactionModal: {
      transaction
    }
  }, tabId);
}
function openStarsTransactionFromReceipt(global, receipt, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const transaction = {
    id: receipt.transactionId,
    peer: {
      type: 'peer',
      id: receipt.botId
    },
    stars: {
      amount: receipt.totalAmount,
      nanos: 0
    },
    date: receipt.date,
    title: receipt.title,
    description: receipt.description,
    photo: receipt.photo
  };
  return openStarsTransactionModal(global, transaction, tabId);
}

/***/ }),

/***/ "./src/global/reducers/peers.ts":
/*!**************************************!*\
  !*** ./src/global/reducers/peers.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deletePeerPhoto: () => (/* binding */ deletePeerPhoto),
/* harmony export */   replacePeerPhotos: () => (/* binding */ replacePeerPhotos),
/* harmony export */   updatePeer: () => (/* binding */ updatePeer),
/* harmony export */   updatePeerFullInfo: () => (/* binding */ updatePeerFullInfo),
/* harmony export */   updatePeerPhotos: () => (/* binding */ updatePeerPhotos),
/* harmony export */   updatePeerPhotosIsLoading: () => (/* binding */ updatePeerPhotosIsLoading)
/* harmony export */ });
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chats */ "./src/global/reducers/chats.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./users */ "./src/global/reducers/users.ts");






// `type` has different types in ApiChat and ApiUser

function updatePeer(global, peerId, peerUpdate) {
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isUserId)(peerId)) {
    return (0,_users__WEBPACK_IMPORTED_MODULE_4__.updateUser)(global, peerId, peerUpdate);
  }
  return (0,_chats__WEBPACK_IMPORTED_MODULE_3__.updateChat)(global, peerId, peerUpdate);
}
function updatePeerFullInfo(global, peerId, peerFullInfoUpdate) {
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isUserId)(peerId)) {
    return (0,_users__WEBPACK_IMPORTED_MODULE_4__.updateUserFullInfo)(global, peerId, peerFullInfoUpdate);
  }
  return (0,_chats__WEBPACK_IMPORTED_MODULE_3__.updateChatFullInfo)(global, peerId, peerFullInfoUpdate);
}
function updatePeerPhotosIsLoading(global, peerId, isLoading) {
  const profilePhotos = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeerPhotos)(global, peerId);
  if (!profilePhotos) {
    return global;
  }
  return replacePeerPhotos(global, peerId, {
    ...profilePhotos,
    isLoading
  });
}
function replacePeerPhotos(global, peerId, value) {
  if (!value) {
    return {
      ...global,
      peers: {
        ...global.peers,
        profilePhotosById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_0__.omit)(global.peers.profilePhotosById, [peerId])
      }
    };
  }
  return {
    ...global,
    peers: {
      ...global.peers,
      profilePhotosById: {
        ...global.peers.profilePhotosById,
        [peerId]: value
      }
    }
  };
}
function updatePeerPhotos(global, peerId, update) {
  const profilePhotos = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeerPhotos)(global, peerId);
  const {
    newPhotos,
    count,
    nextOffset,
    fullInfo,
    shouldInvalidateCache
  } = update;
  const currentPhotos = profilePhotos;
  const profilePhoto = fullInfo.profilePhoto;
  const fallbackPhoto = 'fallbackPhoto' in fullInfo ? fullInfo.fallbackPhoto : undefined;
  const personalPhoto = 'personalPhoto' in fullInfo ? fullInfo.personalPhoto : undefined;
  if (!currentPhotos || shouldInvalidateCache) {
    // In some channels, last service message with photo change is deleted, so we need to patch it in
    if (profilePhoto && profilePhoto.id !== newPhotos[0]?.id) {
      newPhotos.unshift(profilePhoto);
    }
    if (personalPhoto && personalPhoto.id !== newPhotos[0]?.id) {
      newPhotos.unshift(personalPhoto);
    }
    if (fallbackPhoto) {
      newPhotos.push(fallbackPhoto);
    }
    return replacePeerPhotos(global, peerId, {
      fallbackPhoto,
      personalPhoto,
      photos: newPhotos,
      count,
      nextOffset,
      isLoading: false
    });
  }
  const hasFallbackPhoto = currentPhotos.photos[currentPhotos.photos.length - 1].id === fallbackPhoto?.id;
  const currentPhotoArray = hasFallbackPhoto ? currentPhotos.photos.slice(0, -1) : currentPhotos.photos;
  const photos = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_0__.uniqueByField)([...currentPhotoArray, ...newPhotos, fallbackPhoto].filter(Boolean), 'id');
  return replacePeerPhotos(global, peerId, {
    fallbackPhoto,
    personalPhoto,
    photos,
    count,
    nextOffset,
    isLoading: false
  });
}
function deletePeerPhoto(global, peerId, photoId, isFromActionMessage) {
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeer)(global, peerId);
  const profilePhotos = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectPeerPhotos)(global, peerId);
  if (!peer || !profilePhotos) {
    return global;
  }
  const isChannel = 'title' in peer && (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isChatChannel)(peer);
  const userFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectUserFullInfo)(global, peerId);
  const chatFullInfo = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectChatFullInfo)(global, peerId);
  const isAvatar = peer.avatarPhotoId === photoId && (!isChannel || isFromActionMessage);
  const nextAvatarPhoto = isAvatar ? profilePhotos.photos[1] : undefined;
  if (userFullInfo) {
    const newFallbackPhoto = userFullInfo.fallbackPhoto?.id === photoId ? undefined : userFullInfo.fallbackPhoto;
    const newPersonalPhoto = userFullInfo.personalPhoto?.id === photoId ? undefined : userFullInfo.personalPhoto;
    const newProfilePhoto = userFullInfo.profilePhoto?.id === photoId ? nextAvatarPhoto : userFullInfo.profilePhoto;
    global = (0,_users__WEBPACK_IMPORTED_MODULE_4__.updateUserFullInfo)(global, peerId, {
      fallbackPhoto: newFallbackPhoto,
      personalPhoto: newPersonalPhoto,
      profilePhoto: newProfilePhoto
    });
  }
  if (chatFullInfo) {
    const newProfilePhoto = chatFullInfo.profilePhoto?.id === photoId ? nextAvatarPhoto : chatFullInfo.profilePhoto;
    global = (0,_chats__WEBPACK_IMPORTED_MODULE_3__.updateChatFullInfo)(global, peerId, {
      profilePhoto: newProfilePhoto
    });
  }
  const avatarPhotoId = isAvatar ? nextAvatarPhoto?.id : peer.avatarPhotoId;
  const shouldKeepInPhotos = isAvatar && 'title' in peer && (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isChatChannel)(peer);
  const photos = shouldKeepInPhotos ? profilePhotos.photos.filter(photo => photo.id !== photoId) : profilePhotos.photos.slice();
  global = updatePeer(global, peerId, {
    avatarPhotoId
  });
  global = replacePeerPhotos(global, peerId, avatarPhotoId ? {
    ...profilePhotos,
    photos,
    count: profilePhotos.count - 1
  } : undefined);
  return global;
}

/***/ }),

/***/ "./src/global/reducers/settings.ts":
/*!*****************************************!*\
  !*** ./src/global/reducers/settings.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addBlockedUser: () => (/* binding */ addBlockedUser),
/* harmony export */   addNotifyException: () => (/* binding */ addNotifyException),
/* harmony export */   addNotifyExceptions: () => (/* binding */ addNotifyExceptions),
/* harmony export */   removeBlockedUser: () => (/* binding */ removeBlockedUser),
/* harmony export */   replaceSettings: () => (/* binding */ replaceSettings),
/* harmony export */   replaceThemeSettings: () => (/* binding */ replaceThemeSettings),
/* harmony export */   updateNotifySettings: () => (/* binding */ updateNotifySettings)
/* harmony export */ });
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./users */ "./src/global/reducers/users.ts");

function replaceSettings(global, newSettings) {
  return {
    ...global,
    settings: {
      ...global.settings,
      byKey: {
        ...global.settings.byKey,
        ...newSettings
      }
    }
  };
}
function replaceThemeSettings(global, theme, newSettings) {
  return {
    ...global,
    settings: {
      ...global.settings,
      themes: {
        ...global.settings.themes,
        [theme]: {
          ...(global.settings.themes[theme] || {}),
          ...newSettings
        }
      }
    }
  };
}
function addNotifyExceptions(global, notifyExceptions) {
  notifyExceptions.forEach(notifyException => {
    const {
      chatId,
      ...exceptionData
    } = notifyException;
    global = addNotifyException(global, chatId, exceptionData);
  });
  return global;
}
function addNotifyException(global, id, notifyException) {
  return {
    ...global,
    settings: {
      ...global.settings,
      notifyExceptions: {
        ...global.settings.notifyExceptions,
        [id]: notifyException
      }
    }
  };
}

// eslint-disable-next-line consistent-return
function updateNotifySettings(global, peerType, isSilent, shouldShowPreviews) {
  switch (peerType) {
    case 'contact':
      return replaceSettings(global, {
        ...(typeof isSilent !== 'undefined' && {
          hasPrivateChatsNotifications: !isSilent
        }),
        ...(typeof shouldShowPreviews !== 'undefined' && {
          hasPrivateChatsMessagePreview: shouldShowPreviews
        })
      });
    case 'group':
      return replaceSettings(global, {
        ...(typeof isSilent !== 'undefined' && {
          hasGroupNotifications: !isSilent
        }),
        ...(typeof shouldShowPreviews !== 'undefined' && {
          hasGroupMessagePreview: shouldShowPreviews
        })
      });
    case 'broadcast':
      return replaceSettings(global, {
        ...(typeof isSilent !== 'undefined' && {
          hasBroadcastNotifications: !isSilent
        }),
        ...(typeof shouldShowPreviews !== 'undefined' && {
          hasBroadcastMessagePreview: shouldShowPreviews
        })
      });
  }
}
function addBlockedUser(global, contactId) {
  global = (0,_users__WEBPACK_IMPORTED_MODULE_0__.updateUserBlockedState)(global, contactId, true);
  return {
    ...global,
    blocked: {
      ...global.blocked,
      ids: [contactId, ...global.blocked.ids],
      totalCount: global.blocked.totalCount + 1
    }
  };
}
function removeBlockedUser(global, contactId) {
  global = (0,_users__WEBPACK_IMPORTED_MODULE_0__.updateUserBlockedState)(global, contactId, false);
  return {
    ...global,
    blocked: {
      ...global.blocked,
      ids: global.blocked.ids.filter(id => id !== contactId),
      totalCount: global.blocked.totalCount - 1
    }
  };
}

/***/ }),

/***/ "./src/global/reducers/statistics.ts":
/*!*******************************************!*\
  !*** ./src/global/reducers/statistics.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateChannelMonetizationStatistics: () => (/* binding */ updateChannelMonetizationStatistics),
/* harmony export */   updateMessageStatistics: () => (/* binding */ updateMessageStatistics),
/* harmony export */   updateStatistics: () => (/* binding */ updateStatistics),
/* harmony export */   updateStatisticsGraph: () => (/* binding */ updateStatisticsGraph),
/* harmony export */   updateStoryStatistics: () => (/* binding */ updateStoryStatistics),
/* harmony export */   updateVerifyMonetizationModal: () => (/* binding */ updateVerifyMonetizationModal)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");



function updateStatistics(global, chatId, statistics, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    statistics: {
      byChatId: {
        ...(0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).statistics.byChatId,
        [chatId]: statistics
      }
    }
  }, tabId);
}
function updateMessageStatistics(global, statistics, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    statistics: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).statistics,
      currentMessage: statistics,
      currentStory: undefined
    }
  }, tabId);
}
function updateStoryStatistics(global, statistics, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    statistics: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).statistics,
      currentStory: statistics,
      currentMessage: undefined
    }
  }, tabId);
}
function updateStatisticsGraph(global, chatId, name, update, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    statistics
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    statistics: {
      ...statistics,
      byChatId: {
        ...statistics.byChatId,
        [chatId]: {
          ...(statistics.byChatId[chatId] || {}),
          [name]: update
        }
      }
    }
  }, tabId);
}
function updateChannelMonetizationStatistics(global, statistics, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    statistics: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).statistics,
      monetization: statistics
    }
  }, tabId);
}
function updateVerifyMonetizationModal(global, update, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId);
  if (!tabState.monetizationVerificationModal) {
    return global;
  }
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.updateTabState)(global, {
    monetizationVerificationModal: {
      ...tabState.monetizationVerificationModal,
      ...update
    }
  }, tabId);
}

/***/ }),

/***/ "./src/global/reducers/stories.ts":
/*!****************************************!*\
  !*** ./src/global/reducers/stories.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addStories: () => (/* binding */ addStories),
/* harmony export */   addStoriesForPeer: () => (/* binding */ addStoriesForPeer),
/* harmony export */   removePeerStory: () => (/* binding */ removePeerStory),
/* harmony export */   updateLastReadStoryForPeer: () => (/* binding */ updateLastReadStoryForPeer),
/* harmony export */   updateLastViewedStoryForPeer: () => (/* binding */ updateLastViewedStoryForPeer),
/* harmony export */   updatePeerProfileStory: () => (/* binding */ updatePeerProfileStory),
/* harmony export */   updatePeerStoriesFullyLoaded: () => (/* binding */ updatePeerStoriesFullyLoaded),
/* harmony export */   updatePeerStoriesHidden: () => (/* binding */ updatePeerStoriesHidden),
/* harmony export */   updatePeerStory: () => (/* binding */ updatePeerStory),
/* harmony export */   updatePeerStoryViews: () => (/* binding */ updatePeerStoryViews),
/* harmony export */   updatePeersWithStories: () => (/* binding */ updatePeersWithStories),
/* harmony export */   updateSentStoryReaction: () => (/* binding */ updateSentStoryReaction),
/* harmony export */   updateStealthMode: () => (/* binding */ updateStealthMode),
/* harmony export */   updateStoriesForPeer: () => (/* binding */ updateStoriesForPeer),
/* harmony export */   updateStoryViews: () => (/* binding */ updateStoryViews),
/* harmony export */   updateStoryViewsLoading: () => (/* binding */ updateStoryViewsLoading)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _peers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./peers */ "./src/global/reducers/peers.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");







function addStories(global, newStoriesByPeerId) {
  const updatedByPeerId = Object.entries(newStoriesByPeerId).reduce((acc, [peerId, newPeerStories]) => {
    if (!acc[peerId]) {
      acc[peerId] = newPeerStories;
    } else {
      acc[peerId].byId = {
        ...acc[peerId].byId,
        ...newPeerStories.byId
      };
      acc[peerId].orderedIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(newPeerStories.orderedIds.concat(acc[peerId].orderedIds));
      acc[peerId].profileIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(newPeerStories.profileIds.concat(acc[peerId].profileIds)).sort((a, b) => b - a);
      acc[peerId].lastUpdatedAt = newPeerStories.lastUpdatedAt;
      acc[peerId].lastReadId = newPeerStories.lastReadId;
    }
    return acc;
  }, global.stories.byPeerId);
  global = {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: updatedByPeerId
    }
  };
  return updateOrderedStoriesPeerIds(global, Object.keys(newStoriesByPeerId));
}
function addStoriesForPeer(global, peerId, newStories, newPinnedIds, addToArchive) {
  const {
    byId,
    orderedIds,
    profileIds,
    archiveIds,
    pinnedIds
  } = global.stories.byPeerId[peerId] || {};
  const deletedIds = Object.keys(newStories).filter(id => 'isDeleted' in newStories[Number(id)]).map(Number);
  const updatedById = {
    ...byId,
    ...newStories
  };
  let updatedOrderedIds = [...(orderedIds || [])];
  let updatedArchiveIds = [...(archiveIds || [])];
  const updatedProfileIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)([...(profileIds || [])].concat(Object.values(newStories).reduce((ids, story) => {
    if ('isInProfile' in story && story.isInProfile) {
      ids.push(story.id);
    }
    return ids;
  }, []))).sort((a, b) => b - a).filter(storyId => !deletedIds.includes(storyId));
  updatedOrderedIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(Object.entries(newStories).reduce((acc, [storyId, story]) => {
    if ('expireDate' in story && story.expireDate && story.expireDate > (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_2__.getServerTime)()) {
      acc.push(Number(storyId));
    }
    return acc;
  }, updatedOrderedIds)).filter(storyId => !deletedIds.includes(storyId));
  if (addToArchive && (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsChatWithSelf)(global, peerId)) {
    updatedArchiveIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(updatedArchiveIds.concat(Object.keys(newStories).map(Number))).sort((a, b) => b - a).filter(storyId => !deletedIds.includes(storyId));
  }
  global = {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: {
          ...global.stories.byPeerId[peerId],
          byId: updatedById,
          orderedIds: updatedOrderedIds,
          profileIds: updatedProfileIds,
          pinnedIds: pinnedIds || newPinnedIds,
          ...(addToArchive && {
            archiveIds: updatedArchiveIds
          })
        }
      }
    }
  };
  if ((0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsChatWithSelf)(global, peerId) || (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectUser)(global, peerId)?.isContact || peerId === global.appConfig?.storyChangelogUserId) {
    global = updatePeerLastUpdatedAt(global, peerId);
    global = updateOrderedStoriesPeerIds(global, [peerId]);
  }
  return global;
}
function updateStoriesForPeer(global, peerId, peerStories) {
  return {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: peerStories
      }
    }
  };
}
function updatePeerStoriesFullyLoaded(global, peerId, isFullyLoaded, isArchive) {
  return {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: {
          ...global.stories.byPeerId[peerId],
          [isArchive ? 'isArchiveFullyLoaded' : 'isFullyLoaded']: isFullyLoaded
        }
      }
    }
  };
}
function updateLastReadStoryForPeer(global, peerId, lastReadId) {
  const {
    orderedIds
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStories)(global, peerId) || {};
  if (!orderedIds) {
    return global;
  }
  if (lastReadId >= orderedIds[orderedIds.length - 1]) {
    global = (0,_peers__WEBPACK_IMPORTED_MODULE_5__.updatePeer)(global, peerId, {
      hasUnreadStories: false
    });
  }
  return {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: {
          ...global.stories.byPeerId[peerId],
          lastReadId
        }
      }
    }
  };
}
function updateLastViewedStoryForPeer(global, peerId, lastViewedId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    orderedIds
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStories)(global, peerId) || {};
  if (!orderedIds || !orderedIds.includes(lastViewedId)) {
    return global;
  }
  const {
    storyViewer
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    storyViewer: {
      ...storyViewer,
      lastViewedByPeerIds: {
        ...storyViewer.lastViewedByPeerIds,
        [peerId]: lastViewedId
      }
    }
  }, tabId);
}
function updatePeersWithStories(global, storiesByPeerId) {
  Object.entries(storiesByPeerId).forEach(([peerId, {
    lastReadId,
    orderedIds
  }]) => {
    const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeer)(global, peerId);
    if (!peer) return;
    global = (0,_peers__WEBPACK_IMPORTED_MODULE_5__.updatePeer)(global, peerId, {
      hasStories: true,
      hasUnreadStories: !lastReadId || Boolean(lastReadId && lastReadId < (peer.maxStoryId || orderedIds[orderedIds.length - 1]))
    });
  });
  return global;
}
function updateStoryViews(global, storyId, views, nextOffset, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId);
  const {
    viewModal
  } = tabState.storyViewer;
  const newViews = viewModal?.storyId === storyId && viewModal.views ? [...viewModal.views, ...views] : views;
  global = updateStoryViewsLoading(global, false, tabId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      viewModal: {
        ...viewModal,
        storyId,
        views: newViews,
        nextOffset,
        isLoading: false
      }
    }
  }, tabId);
}
function updateStoryViewsLoading(global, isLoading, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId);
  const {
    viewModal
  } = tabState.storyViewer;
  if (!viewModal) return global;
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    storyViewer: {
      ...tabState.storyViewer,
      viewModal: {
        ...viewModal,
        isLoading
      }
    }
  }, tabId);
}
function removePeerStory(global, peerId, storyId) {
  const {
    orderedIds,
    profileIds,
    lastReadId,
    byId
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStories)(global, peerId) || {
    orderedIds: [],
    profileIds: []
  };
  const newOrderedIds = orderedIds.filter(id => id !== storyId);
  const newProfileIds = profileIds.filter(id => id !== storyId);
  const lastStoryId = newOrderedIds.length ? orderedIds[orderedIds.length - 1] : undefined;
  const previousStoryId = orderedIds[orderedIds.indexOf(storyId) - 1];
  const newLastReadId = lastReadId === storyId ? previousStoryId : lastReadId;
  const newById = {
    ...byId,
    [storyId]: {
      id: storyId,
      peerId,
      isDeleted: true
    }
  };
  const lastUpdatedAt = lastStoryId ? newById[lastStoryId]?.date : undefined;
  const hasStories = Boolean(newOrderedIds.length);
  global = (0,_peers__WEBPACK_IMPORTED_MODULE_5__.updatePeer)(global, peerId, {
    hasStories,
    hasUnreadStories: Boolean(hasStories && lastReadId && lastStoryId && lastReadId < lastStoryId)
  });
  global = updateStoriesForPeer(global, peerId, {
    byId: newById,
    orderedIds: newOrderedIds,
    profileIds: newProfileIds,
    lastUpdatedAt,
    lastReadId: newLastReadId
  });
  Object.values(global.byTabId).forEach(tab => {
    if (tab.storyViewer.lastViewedByPeerIds?.[peerId] === storyId) {
      global = updateLastViewedStoryForPeer(global, peerId, previousStoryId, tab.id);
    }
  });
  if (!hasStories) {
    global = {
      ...global,
      stories: {
        ...global.stories,
        orderedPeerIds: {
          active: global.stories.orderedPeerIds.active.filter(id => id !== peerId),
          archived: global.stories.orderedPeerIds.archived.filter(id => id !== peerId)
        }
      }
    };
  }
  return global;
}
function updateSentStoryReaction(global, peerId, storyId, reaction) {
  const story = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStory)(global, peerId, storyId);
  if (!story || !('content' in story)) return global;
  const {
    views
  } = story;
  const reactionsCount = views?.reactionsCount || 0;
  const hasReaction = views?.reactions?.some(r => r.chosenOrder !== undefined);
  const reactions = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.updateReactionCount)(views?.reactions || [], [reaction].filter(Boolean));
  const countDiff = !reaction ? -1 : hasReaction ? 0 : 1;
  const newReactionsCount = reactionsCount + countDiff;
  global = updatePeerStory(global, peerId, storyId, {
    sentReaction: reaction,
    views: {
      ...views,
      reactionsCount: newReactionsCount,
      reactions
    }
  });
  return global;
}
function updatePeerStory(global, peerId, storyId, storyUpdate) {
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStories)(global, peerId) || {
    byId: {},
    orderedIds: [],
    profileIds: [],
    archiveIds: []
  };
  return {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: {
          ...peerStories,
          byId: {
            ...peerStories.byId,
            [storyId]: {
              ...peerStories.byId[storyId],
              ...storyUpdate
            }
          }
        }
      }
    }
  };
}
function updatePeerStoryViews(global, peerId, storyId, viewsUpdate) {
  const story = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStory)(global, peerId, storyId);
  if (!story || !('content' in story)) return global;
  const {
    views
  } = story;
  return updatePeerStory(global, peerId, storyId, {
    views: {
      ...views,
      ...viewsUpdate
    }
  });
}
function updatePeerProfileStory(global, peerId, storyId, isInProfile) {
  const peerStories = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStories)(global, peerId) || {
    byId: {},
    orderedIds: [],
    profileIds: [],
    archiveIds: []
  };
  const newProfileIds = isInProfile ? (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(peerStories.profileIds.concat(storyId)).sort((a, b) => b - a) : peerStories.profileIds.filter(id => storyId !== id);
  return {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: {
          ...peerStories,
          profileIds: newProfileIds
        }
      }
    }
  };
}
function updatePeerStoriesHidden(global, peerId, areHidden) {
  const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeer)(global, peerId);
  if (!peer) return global;
  const currentState = peer.areStoriesHidden;
  if (currentState === areHidden) return global; // `updateOrderedStoriesPeerIds` is computationally expensive

  global = (0,_peers__WEBPACK_IMPORTED_MODULE_5__.updatePeer)(global, peerId, {
    areStoriesHidden: areHidden
  });
  return updateOrderedStoriesPeerIds(global, [peerId]);
}
function updateOrderedStoriesPeerIds(global, updatePeerIds) {
  const {
    currentUserId,
    stories: {
      byPeerId,
      orderedPeerIds
    }
  } = global;
  const allPeerIds = orderedPeerIds.active.concat(orderedPeerIds.archived).concat(updatePeerIds);
  const newOrderedPeerIds = allPeerIds.reduce((acc, peerId) => {
    if (!byPeerId[peerId]?.orderedIds?.length) return acc;
    const peer = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeer)(global, peerId);
    if (peer?.areStoriesHidden) {
      acc.archived.push(peerId);
    } else {
      acc.active.push(peerId);
    }
    return acc;
  }, {
    active: [],
    archived: []
  });
  function compare(peerIdA, peerIdB) {
    const peerA = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeer)(global, peerIdA);
    const peerB = (0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeer)(global, peerIdB);
    const diffCurrentUser = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.compareFields)(currentUserId === peerIdA, currentUserId === peerIdB);
    if (diffCurrentUser) return diffCurrentUser;
    const {
      lastUpdatedAt: luaA = 0,
      orderedIds: orderedA,
      lastReadId: lriA = 0
    } = byPeerId[peerIdA] || {};
    const hasUnreadA = lriA < orderedA?.[orderedA.length - 1];
    const {
      lastUpdatedAt: luaB = 0,
      orderedIds: orderedB,
      lastReadId: lriB = 0
    } = byPeerId[peerIdB] || {};
    const hasUnreadB = lriB < orderedB?.[orderedB.length - 1];
    const diffUnread = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.compareFields)(hasUnreadA, hasUnreadB);
    if (diffUnread) return diffUnread;
    const diffPremium = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.compareFields)('isPremium' in peerA, 'isPremium' in peerB);
    if (diffPremium) return diffPremium;
    const diffType = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.compareFields)((0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserId)(peerIdA), (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserId)(peerIdB));
    if (diffType) return diffType;
    return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.compareFields)(luaA, luaB);
  }
  newOrderedPeerIds.archived = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(newOrderedPeerIds.archived).filter(peerId => byPeerId[peerId]?.orderedIds?.length).sort(compare);
  newOrderedPeerIds.active = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(newOrderedPeerIds.active).filter(peerId => byPeerId[peerId]?.orderedIds?.length).sort(compare);
  return {
    ...global,
    stories: {
      ...global.stories,
      orderedPeerIds: newOrderedPeerIds
    }
  };
}
function updatePeerLastUpdatedAt(global, peerId) {
  const peerStories = global.stories.byPeerId[peerId];
  const lastUpdatedAt = peerStories.orderedIds.reduce((acc, storyId) => {
    const {
      date
    } = peerStories.byId[storyId] || {};
    if (date && (!acc || acc < date)) {
      acc = date;
    }
    return acc;
  }, undefined);
  return {
    ...global,
    stories: {
      ...global.stories,
      byPeerId: {
        ...global.stories.byPeerId,
        [peerId]: {
          ...peerStories,
          lastUpdatedAt
        }
      }
    }
  };
}
function updateStealthMode(global, stealthMode) {
  return {
    ...global,
    stories: {
      ...global.stories,
      stealthMode
    }
  };
}

/***/ }),

/***/ "./src/global/reducers/symbols.ts":
/*!****************************************!*\
  !*** ./src/global/reducers/symbols.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rebuildStickersForEmoji: () => (/* binding */ rebuildStickersForEmoji),
/* harmony export */   replaceAnimatedEmojis: () => (/* binding */ replaceAnimatedEmojis),
/* harmony export */   updateCustomEmojiForEmoji: () => (/* binding */ updateCustomEmojiForEmoji),
/* harmony export */   updateCustomEmojiSets: () => (/* binding */ updateCustomEmojiSets),
/* harmony export */   updateGifSearch: () => (/* binding */ updateGifSearch),
/* harmony export */   updateRecentStatusCustomEmojis: () => (/* binding */ updateRecentStatusCustomEmojis),
/* harmony export */   updateStickerSearch: () => (/* binding */ updateStickerSearch),
/* harmony export */   updateStickerSet: () => (/* binding */ updateStickerSet),
/* harmony export */   updateStickerSets: () => (/* binding */ updateStickerSets),
/* harmony export */   updateStickersForEmoji: () => (/* binding */ updateStickersForEmoji)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");




function updateStickerSearch(global, hash, resultIds, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    stickerSearch: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).stickerSearch,
      hash,
      resultIds
    }
  }, tabId);
}
function updateStickerSets(global, category, hash, sets) {
  const updatedSets = sets.map(stickerSet => {
    const existing = global.stickers.setsById[stickerSet.id];
    if (!existing) {
      return stickerSet;
    }
    return {
      ...existing,
      ...stickerSet
    };
  });
  const regularSetIds = sets.map(set => set.id);
  if (category === 'search') {
    return {
      ...global,
      stickers: {
        ...global.stickers,
        setsById: {
          ...global.stickers.setsById,
          ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(updatedSets, 'id')
        }
      }
    };
  }
  return {
    ...global,
    stickers: {
      ...global.stickers,
      setsById: {
        ...global.stickers.setsById,
        ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(updatedSets, 'id')
      },
      [category]: {
        ...global.stickers[category],
        hash,
        setIds: [...(global.stickers[category].setIds || []), ...regularSetIds]
      }
    }
  };
}
function updateCustomEmojiSets(global, hash, sets) {
  const updatedSets = sets.map(stickerSet => {
    const existing = global.stickers.setsById[stickerSet.id];
    if (!existing) {
      return stickerSet;
    }
    return {
      ...existing,
      ...stickerSet
    };
  });
  const customEmojis = sets.map(set => set.stickers).flat().filter(Boolean);
  const addedSetIds = sets.map(set => set.id);
  return {
    ...global,
    stickers: {
      ...global.stickers,
      setsById: {
        ...global.stickers.setsById,
        ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(updatedSets, 'id')
      }
    },
    customEmojis: {
      ...global.customEmojis,
      added: {
        ...global.customEmojis.added,
        hash,
        setIds: [...(global.customEmojis.added.setIds || []), ...addedSetIds]
      },
      byId: {
        ...global.customEmojis.byId,
        ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(customEmojis, 'id')
      }
    }
  };
}
function updateStickerSet(global, stickerSetId, update) {
  const currentStickerSet = global.stickers.setsById[stickerSetId] || {};
  const isCustomEmoji = update.isEmoji || currentStickerSet.isEmoji;
  const addedSets = (isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds) || [];
  let setIds = addedSets;
  if (update.installedDate && !update.isArchived && addedSets && !addedSets.includes(stickerSetId)) {
    setIds = [stickerSetId, ...setIds];
  }
  if (!update.installedDate && addedSets?.includes(stickerSetId)) {
    setIds = setIds.filter(id => id !== stickerSetId);
  }
  const customEmojiById = isCustomEmoji && update.stickers && (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(update.stickers, 'id');
  return {
    ...global,
    stickers: {
      ...global.stickers,
      added: {
        ...global.stickers.added,
        ...(!isCustomEmoji && {
          setIds
        })
      },
      setsById: {
        ...global.stickers.setsById,
        [stickerSetId]: {
          ...currentStickerSet,
          ...update
        }
      }
    },
    customEmojis: {
      ...global.customEmojis,
      byId: {
        ...global.customEmojis.byId,
        ...customEmojiById
      },
      added: {
        ...global.customEmojis.added,
        ...(isCustomEmoji && {
          setIds
        })
      }
    }
  };
}
function updateGifSearch(global, isNew, results, nextOffset, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    results: currentResults
  } = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).gifSearch;
  let newResults;
  if (isNew || !currentResults) {
    newResults = results;
  } else {
    const currentIds = new Set(currentResults.map(gif => gif.id));
    newResults = [...currentResults, ...results.filter(gif => !currentIds.has(gif.id))];
  }
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    gifSearch: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).gifSearch,
      offset: nextOffset,
      results: newResults
    }
  }, tabId);
}
function replaceAnimatedEmojis(global, stickerSet) {
  return {
    ...global,
    animatedEmojis: stickerSet
  };
}
function updateStickersForEmoji(global, emoji, remoteStickers, hash) {
  const localStickers = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectStickersForEmoji)(global, emoji);
  const allStickers = [...localStickers, ...(remoteStickers || [])];
  const uniqueIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(allStickers.map(({
    id
  }) => id));
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(allStickers, 'id');
  const stickers = uniqueIds.map(id => byId[id]);
  return {
    ...global,
    stickers: {
      ...global.stickers,
      forEmoji: {
        emoji,
        stickers,
        hash
      }
    }
  };
}
function updateCustomEmojiForEmoji(global, emoji) {
  const localStickers = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectCustomEmojiForEmoji)(global, emoji);
  const uniqueIds = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(localStickers.map(({
    id
  }) => id));
  const byId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.buildCollectionByKey)(localStickers, 'id');
  const stickers = uniqueIds.map(id => byId[id]);
  return {
    ...global,
    customEmojis: {
      ...global.customEmojis,
      forEmoji: {
        emoji,
        stickers
      }
    }
  };
}
function updateRecentStatusCustomEmojis(global, hash, emojis) {
  return {
    ...global,
    customEmojis: {
      ...global.customEmojis,
      statusRecent: {
        ...global.customEmojis.statusRecent,
        hash,
        emojis
      }
    }
  };
}
function rebuildStickersForEmoji(global) {
  if (global.stickers.forEmoji) {
    const {
      emoji,
      stickers,
      hash
    } = global.stickers.forEmoji;
    if (!emoji) {
      return global;
    }
    return updateStickersForEmoji(global, emoji, stickers, hash);
  }
  if (global.customEmojis.forEmoji) {
    const {
      emoji
    } = global.customEmojis.forEmoji;
    if (!emoji) {
      return global;
    }
    return updateCustomEmojiForEmoji(global, emoji);
  }
  return global;
}

/***/ }),

/***/ "./src/global/reducers/tabs.ts":
/*!*************************************!*\
  !*** ./src/global/reducers/tabs.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateTabState: () => (/* binding */ updateTabState)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");

function updateTabState(global, tabStatePartial, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return {
    ...global,
    byTabId: {
      ...global.byTabId,
      [tabId]: {
        ...global.byTabId[tabId],
        ...tabStatePartial
      }
    }
  };
}

/***/ }),

/***/ "./src/global/reducers/topics.ts":
/*!***************************************!*\
  !*** ./src/global/reducers/topics.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteTopic: () => (/* binding */ deleteTopic),
/* harmony export */   replacePinnedTopicIds: () => (/* binding */ replacePinnedTopicIds),
/* harmony export */   updateListedTopicIds: () => (/* binding */ updateListedTopicIds),
/* harmony export */   updateTopic: () => (/* binding */ updateTopic),
/* harmony export */   updateTopicLastMessageId: () => (/* binding */ updateTopicLastMessageId),
/* harmony export */   updateTopics: () => (/* binding */ updateTopics)
/* harmony export */ });
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages */ "./src/global/reducers/messages.ts");



function updateTopicsStore(global, chatId, update) {
  const info = global.chats.topicsInfoById[chatId] || {};
  global = {
    ...global,
    chats: {
      ...global.chats,
      topicsInfoById: {
        ...global.chats.topicsInfoById,
        [chatId]: {
          ...info,
          ...update
        }
      }
    }
  };
  return global;
}
function updateListedTopicIds(global, chatId, topicIds) {
  const listedIds = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTopicsInfo)(global, chatId)?.listedTopicIds || [];
  return updateTopicsStore(global, chatId, {
    listedTopicIds: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_0__.unique)([...listedIds, ...topicIds])
  });
}
function updateTopics(global, chatId, topicsCount, topics) {
  const oldTopics = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTopics)(global, chatId);
  const newTopics = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_0__.buildCollectionByKey)(topics, 'id');
  global = updateTopicsStore(global, chatId, {
    topicsById: {
      ...oldTopics,
      ...newTopics
    },
    totalCount: topicsCount
  });
  topics.forEach(topic => {
    global = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.updateThread)(global, chatId, topic.id, {
      firstMessageId: topic.id
    });
    global = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.updateThreadInfo)(global, chatId, topic.id, {
      lastMessageId: topic.lastMessageId,
      threadId: topic.id,
      chatId
    });
  });
  return global;
}
function updateTopic(global, chatId, topicId, update) {
  const chat = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectChat)(global, chatId);
  if (!chat) return global;
  const topic = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTopic)(global, chatId, topicId);
  const oldTopics = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTopics)(global, chatId);
  const updatedTopic = {
    ...topic,
    ...update
  };
  if (!updatedTopic.id) return global;
  global = updateTopicsStore(global, chatId, {
    topicsById: {
      ...oldTopics,
      [topicId]: updatedTopic
    }
  });
  global = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.updateThread)(global, chatId, updatedTopic.id, {
    firstMessageId: updatedTopic.id
  });
  global = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.updateThreadInfo)(global, chatId, updatedTopic.id, {
    lastMessageId: updatedTopic.lastMessageId,
    threadId: updatedTopic.id,
    chatId
  });
  return global;
}
function deleteTopic(global, chatId, topicId) {
  const topics = (0,_selectors__WEBPACK_IMPORTED_MODULE_1__.selectTopics)(global, chatId);
  if (!topics) return global;
  global = updateTopicsStore(global, chatId, {
    topicsById: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_0__.omit)(topics, [topicId])
  });
  return global;
}
function updateTopicLastMessageId(global, chatId, threadId, lastMessageId) {
  return updateTopic(global, chatId, threadId, {
    lastMessageId
  });
}
function replacePinnedTopicIds(global, chatId, pinnedTopicIds) {
  return updateTopicsStore(global, chatId, {
    orderedPinnedTopicIds: pinnedTopicIds
  });
}

/***/ }),

/***/ "./src/global/reducers/translations.ts":
/*!*********************************************!*\
  !*** ./src/global/reducers/translations.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clearMessageTranslation: () => (/* binding */ clearMessageTranslation),
/* harmony export */   removeRequestedChatTranslation: () => (/* binding */ removeRequestedChatTranslation),
/* harmony export */   removeRequestedMessageTranslation: () => (/* binding */ removeRequestedMessageTranslation),
/* harmony export */   updateMessageTranslation: () => (/* binding */ updateMessageTranslation),
/* harmony export */   updateMessageTranslations: () => (/* binding */ updateMessageTranslations),
/* harmony export */   updateRequestedChatTranslation: () => (/* binding */ updateRequestedChatTranslation),
/* harmony export */   updateRequestedMessageTranslation: () => (/* binding */ updateRequestedMessageTranslation)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");




function updateMessageTranslation(global, chatId, messageId, toLanguageCode, translation) {
  const translatedMessages = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectMessageTranslations)(global, chatId, toLanguageCode);
  return {
    ...global,
    translations: {
      ...global.translations,
      byChatId: {
        ...global.translations.byChatId,
        [chatId]: {
          ...global.translations.byChatId[chatId],
          byLangCode: {
            ...global.translations.byChatId[chatId]?.byLangCode,
            [toLanguageCode]: {
              ...translatedMessages,
              [messageId]: {
                ...translatedMessages[messageId],
                ...translation
              }
            }
          }
        }
      }
    }
  };
}
function clearMessageTranslation(global, chatId, messageId) {
  const chatTranslations = global.translations.byChatId[chatId];
  if (!chatTranslations) return global;
  const {
    byLangCode
  } = chatTranslations;
  const newByLangCode = Object.keys(byLangCode).reduce((acc, langCode) => {
    const newTranslatedMessages = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.omit)(byLangCode[langCode], [messageId]);
    if (Object.keys(newTranslatedMessages).length) {
      acc[langCode] = newTranslatedMessages;
    }
    return acc;
  }, {});
  return {
    ...global,
    translations: {
      ...global.translations,
      byChatId: {
        ...global.translations.byChatId,
        [chatId]: {
          ...chatTranslations,
          byLangCode: newByLangCode
        }
      }
    }
  };
}
function updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations) {
  messageIds.forEach((messageId, index) => {
    global = updateMessageTranslation(global, chatId, messageId, toLanguageCode, {
      text: translations[index],
      isPending: false
    });
  });
  return global;
}
function updateRequestedChatTranslation(global, chatId, toLanguageCode, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    requestedTranslations: {
      ...tabState.requestedTranslations,
      byChatId: {
        ...tabState.requestedTranslations.byChatId,
        [chatId]: {
          toLanguage: toLanguageCode
        }
      }
    }
  }, tabId);
  return global;
}
function removeRequestedChatTranslation(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    requestedTranslations: {
      ...tabState.requestedTranslations,
      byChatId: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.omit)(tabState.requestedTranslations.byChatId, [chatId])
    }
  }, tabId);
  return global;
}
function updateRequestedMessageTranslation(global, chatId, messageId, toLanguageCode, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    requestedTranslations: {
      ...tabState.requestedTranslations,
      byChatId: {
        ...tabState.requestedTranslations.byChatId,
        [chatId]: {
          ...tabState.requestedTranslations.byChatId[chatId],
          manualMessages: {
            ...tabState.requestedTranslations.byChatId[chatId]?.manualMessages,
            [messageId]: toLanguageCode
          }
        }
      }
    }
  }, tabId);
  return global;
}
function removeRequestedMessageTranslation(global, chatId, messageId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const tabState = (0,_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  const manualMessages = tabState.requestedTranslations.byChatId[chatId]?.manualMessages;
  if (!manualMessages) return global;
  const newManualMessages = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.omit)(manualMessages, [messageId]);
  global = (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.updateTabState)(global, {
    requestedTranslations: {
      ...tabState.requestedTranslations,
      byChatId: {
        ...tabState.requestedTranslations.byChatId,
        [chatId]: {
          ...tabState.requestedTranslations.byChatId[chatId],
          manualMessages: newManualMessages
        }
      }
    }
  }, tabId);
  return global;
}

/***/ }),

/***/ "./src/global/reducers/twoFaSettings.ts":
/*!**********************************************!*\
  !*** ./src/global/reducers/twoFaSettings.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateTwoFaSettings: () => (/* binding */ updateTwoFaSettings)
/* harmony export */ });
function updateTwoFaSettings(global, update) {
  return {
    ...global,
    twoFaSettings: {
      ...global.twoFaSettings,
      ...update
    }
  };
}

/***/ }),

/***/ "./src/global/reducers/users.ts":
/*!**************************************!*\
  !*** ./src/global/reducers/users.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addUserStatuses: () => (/* binding */ addUserStatuses),
/* harmony export */   addUsers: () => (/* binding */ addUsers),
/* harmony export */   closeNewContactDialog: () => (/* binding */ closeNewContactDialog),
/* harmony export */   deleteContact: () => (/* binding */ deleteContact),
/* harmony export */   replacePeerSavedGifts: () => (/* binding */ replacePeerSavedGifts),
/* harmony export */   replaceUserStatuses: () => (/* binding */ replaceUserStatuses),
/* harmony export */   replaceUsers: () => (/* binding */ replaceUsers),
/* harmony export */   updateBotAppPermissions: () => (/* binding */ updateBotAppPermissions),
/* harmony export */   updateMissingInvitedUsers: () => (/* binding */ updateMissingInvitedUsers),
/* harmony export */   updateUser: () => (/* binding */ updateUser),
/* harmony export */   updateUserBlockedState: () => (/* binding */ updateUserBlockedState),
/* harmony export */   updateUserCommonChats: () => (/* binding */ updateUserCommonChats),
/* harmony export */   updateUserFullInfo: () => (/* binding */ updateUserFullInfo),
/* harmony export */   updateUserSearch: () => (/* binding */ updateUserSearch),
/* harmony export */   updateUserSearchFetchingStatus: () => (/* binding */ updateUserSearchFetchingStatus),
/* harmony export */   updateUsers: () => (/* binding */ updateUsers)
/* harmony export */ });
/* harmony import */ var _util_areDeepEqual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/areDeepEqual */ "./src/util/areDeepEqual.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_memo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/memo */ "./src/util/memo.ts");
/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chats */ "./src/global/reducers/chats.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tabs */ "./src/global/reducers/tabs.ts");







function replaceUsers(global, newById) {
  return {
    ...global,
    users: {
      ...global.users,
      byId: newById
    }
  };
}
function updateContactList(global, updatedUsers) {
  const {
    userIds: contactUserIds
  } = global.contactList || {};
  if (!contactUserIds) return global;
  const contactUserIdsFromUpdate = updatedUsers.filter(user => user?.isContact).map(user => user.id);
  if (contactUserIdsFromUpdate.length === 0) return global;
  return {
    ...global,
    contactList: {
      userIds: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.unique)([...contactUserIdsFromUpdate, ...contactUserIds])
    }
  };
}
function updateUser(global, userId, userUpdate) {
  const {
    byId
  } = global.users;
  const updatedUser = getUpdatedUser(global, userId, userUpdate);
  if (!updatedUser) {
    return global;
  }
  global = updateContactList(global, [updatedUser]);
  return replaceUsers(global, {
    ...byId,
    [userId]: updatedUser
  });
}
function updateUsers(global, newById) {
  const updatedById = Object.keys(newById).reduce((acc, id) => {
    const updatedUser = getUpdatedUser(global, id, newById[id]);
    if (updatedUser) {
      acc[id] = updatedUser;
    }
    return acc;
  }, {});
  global = replaceUsers(global, {
    ...global.users.byId,
    ...updatedById
  });
  global = updateContactList(global, Object.values(updatedById));
  return global;
}

// @optimization Allows to avoid redundant updates which cause a lot of renders
function addUsers(global, newById) {
  const {
    byId
  } = global.users;
  let isUpdated = false;
  const addedById = Object.keys(newById).reduce((acc, id) => {
    const existingUser = byId[id];
    const newUser = newById[id];
    if (existingUser && !existingUser.isMin && (newUser.isMin || existingUser.accessHash === newUser.accessHash)) {
      return acc;
    }
    const updatedUser = getUpdatedUser(global, id, newUser);
    if (updatedUser) {
      acc[id] = updatedUser;
      if (!isUpdated) {
        isUpdated = true;
      }
    }
    return acc;
  }, {});
  if (!isUpdated) {
    return global;
  }
  global = replaceUsers(global, {
    ...byId,
    ...addedById
  });
  global = updateContactList(global, Object.values(addedById));
  return global;
}

// @optimization Don't spread/unspread global for each element, do it in a batch
function getUpdatedUser(global, userId, userUpdate) {
  const {
    byId
  } = global.users;
  const user = byId[userId];
  const omitProps = [];
  if (userUpdate.isMin && user && !user.isMin) {
    return undefined; // Do not apply updates from min constructor
  }
  if ((0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_0__.areDeepEqual)(user?.usernames, userUpdate.usernames)) {
    omitProps.push('usernames');
  }
  const updatedUser = {
    ...user,
    ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(userUpdate, omitProps)
  };
  if (!updatedUser.id || !updatedUser.type) {
    return undefined;
  }
  return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omitUndefined)(updatedUser);
}
function deleteContact(global, userId) {
  const {
    byId
  } = global.users;
  const {
    userIds
  } = global.contactList || {};
  global = {
    ...global,
    contactList: {
      userIds: userIds ? userIds.filter(id => id !== userId) : _util_memo__WEBPACK_IMPORTED_MODULE_3__.MEMO_EMPTY_ARRAY
    }
  };
  global = replaceUsers(global, {
    ...byId,
    [userId]: {
      ...byId[userId],
      isContact: undefined
    }
  });
  global = {
    ...global,
    stories: {
      ...global.stories,
      orderedPeerIds: {
        active: global.stories.orderedPeerIds.active.filter(id => id !== userId),
        archived: global.stories.orderedPeerIds.archived.filter(id => id !== userId)
      }
    }
  };
  return (0,_chats__WEBPACK_IMPORTED_MODULE_5__.updateChat)(global, userId, {
    settings: undefined
  });
}
function updateUserSearch(global, searchStatePartial, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    userSearch: {
      ...(0,_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).userSearch,
      ...searchStatePartial
    }
  }, tabId);
}
function updateUserSearchFetchingStatus(global, newState, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return updateUserSearch(global, {
    fetchingStatus: newState
  }, tabId);
}
function updateUserBlockedState(global, userId, isBlocked) {
  const {
    fullInfoById
  } = global.users;
  const fullInfo = fullInfoById[userId];
  if (!fullInfo) {
    return global;
  }
  return updateUserFullInfo(global, userId, {
    isBlocked
  });
}
function replaceUserStatuses(global, newById) {
  return {
    ...global,
    users: {
      ...global.users,
      statusesById: newById
    }
  };
}
function updateUserFullInfo(global, userId, fullInfo) {
  const userFullInfo = global.users.fullInfoById[userId];
  return {
    ...global,
    users: {
      ...global.users,
      fullInfoById: {
        ...global.users.fullInfoById,
        [userId]: {
          ...userFullInfo,
          ...fullInfo
        }
      }
    }
  };
}
function updateUserCommonChats(global, userId, commonChats) {
  return {
    ...global,
    users: {
      ...global.users,
      commonChatsById: {
        ...global.users.commonChatsById,
        [userId]: commonChats
      }
    }
  };
}

// @optimization Allows to avoid redundant updates which cause a lot of renders
function addUserStatuses(global, newById) {
  const {
    statusesById
  } = global.users;
  global = replaceUserStatuses(global, {
    ...statusesById,
    ...newById
  });
  return global;
}
function closeNewContactDialog(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    newContact: undefined
  }, tabId);
}
function updateMissingInvitedUsers(global, chatId, missingUsers, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  if (!missingUsers.length) {
    return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
      inviteViaLinkModal: undefined
    }, tabId);
  }
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.updateTabState)(global, {
    inviteViaLinkModal: {
      missingUsers,
      chatId
    }
  }, tabId);
}
function updateBotAppPermissions(global, botId, permissions) {
  const {
    botAppPermissionsById
  } = global.users;
  return {
    ...global,
    users: {
      ...global.users,
      botAppPermissionsById: {
        ...botAppPermissionsById,
        [botId]: {
          ...botAppPermissionsById[botId],
          ...permissions
        }
      }
    }
  };
}
function replacePeerSavedGifts(global, peerId, gifts, nextOffset) {
  global = {
    ...global,
    peers: {
      ...global.peers,
      giftsById: {
        ...global.peers.giftsById,
        [peerId]: {
          gifts,
          nextOffset
        }
      }
    }
  };
  return global;
}

/***/ }),

/***/ "./src/global/selectors/chats.ts":
/*!***************************************!*\
  !*** ./src/global/selectors/chats.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterChatIdsByType: () => (/* binding */ filterChatIdsByType),
/* harmony export */   selectAreActiveChatsLoaded: () => (/* binding */ selectAreActiveChatsLoaded),
/* harmony export */   selectCanInviteToChat: () => (/* binding */ selectCanInviteToChat),
/* harmony export */   selectCanShareFolder: () => (/* binding */ selectCanShareFolder),
/* harmony export */   selectCanTranslateChat: () => (/* binding */ selectCanTranslateChat),
/* harmony export */   selectChat: () => (/* binding */ selectChat),
/* harmony export */   selectChatByUsername: () => (/* binding */ selectChatByUsername),
/* harmony export */   selectChatFolder: () => (/* binding */ selectChatFolder),
/* harmony export */   selectChatFullInfo: () => (/* binding */ selectChatFullInfo),
/* harmony export */   selectChatLastMessage: () => (/* binding */ selectChatLastMessage),
/* harmony export */   selectChatLastMessageId: () => (/* binding */ selectChatLastMessageId),
/* harmony export */   selectChatListLoadingParameters: () => (/* binding */ selectChatListLoadingParameters),
/* harmony export */   selectChatListType: () => (/* binding */ selectChatListType),
/* harmony export */   selectChatOnlineCount: () => (/* binding */ selectChatOnlineCount),
/* harmony export */   selectChatType: () => (/* binding */ selectChatType),
/* harmony export */   selectChatUser: () => (/* binding */ selectChatUser),
/* harmony export */   selectIsChatBotNotStarted: () => (/* binding */ selectIsChatBotNotStarted),
/* harmony export */   selectIsChatListed: () => (/* binding */ selectIsChatListed),
/* harmony export */   selectIsChatPinned: () => (/* binding */ selectIsChatPinned),
/* harmony export */   selectIsChatWithBot: () => (/* binding */ selectIsChatWithBot),
/* harmony export */   selectIsChatWithSelf: () => (/* binding */ selectIsChatWithSelf),
/* harmony export */   selectIsServiceChatReady: () => (/* binding */ selectIsServiceChatReady),
/* harmony export */   selectIsTrustedBot: () => (/* binding */ selectIsTrustedBot),
/* harmony export */   selectPeerFullInfo: () => (/* binding */ selectPeerFullInfo),
/* harmony export */   selectRequestedChatTranslationLanguage: () => (/* binding */ selectRequestedChatTranslationLanguage),
/* harmony export */   selectRequestedDraft: () => (/* binding */ selectRequestedDraft),
/* harmony export */   selectRequestedDraftFiles: () => (/* binding */ selectRequestedDraftFiles),
/* harmony export */   selectSendAs: () => (/* binding */ selectSendAs),
/* harmony export */   selectShouldDetectChatLanguage: () => (/* binding */ selectShouldDetectChatLanguage),
/* harmony export */   selectSimilarBotsIds: () => (/* binding */ selectSimilarBotsIds),
/* harmony export */   selectSimilarChannelIds: () => (/* binding */ selectSimilarChannelIds),
/* harmony export */   selectSupportChat: () => (/* binding */ selectSupportChat),
/* harmony export */   selectTotalChatCount: () => (/* binding */ selectTotalChatCount)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./users */ "./src/global/selectors/users.ts");






function selectChat(global, chatId) {
  return global.chats.byId[chatId];
}
function selectChatFullInfo(global, chatId) {
  return global.chats.fullInfoById[chatId];
}
function selectPeerFullInfo(global, peerId) {
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserId)(peerId)) return (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectUserFullInfo)(global, peerId);
  return selectChatFullInfo(global, peerId);
}
function selectChatListLoadingParameters(global, listType) {
  return global.chats.loadingParameters[listType];
}
function selectChatUser(global, chat) {
  const userId = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.getPrivateChatUserId)(chat);
  if (!userId) {
    return false;
  }
  return (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectUser)(global, userId);
}
function selectIsChatWithSelf(global, chatId) {
  return chatId === global.currentUserId;
}
function selectIsChatWithBot(global, chat) {
  const user = selectChatUser(global, chat);
  return user && (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserBot)(user);
}
function selectSupportChat(global) {
  return Object.values(global.chats.byId).find(({
    isSupport
  }) => isSupport);
}
function selectChatOnlineCount(global, chat) {
  const fullInfo = selectChatFullInfo(global, chat.id);
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserId)(chat.id) || (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat) || !fullInfo) {
    return undefined;
  }
  if (!fullInfo.members || fullInfo.members.length === _config__WEBPACK_IMPORTED_MODULE_0__.MEMBERS_LOAD_SLICE) {
    return fullInfo.onlineCount;
  }
  return fullInfo.members.reduce((onlineCount, {
    userId
  }) => {
    if (!selectIsChatWithSelf(global, userId) && global.users.byId[userId] && (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserOnline)(global.users.byId[userId], global.users.statusesById[userId])) {
      return onlineCount + 1;
    }
    return onlineCount;
  }, 0);
}
function selectIsTrustedBot(global, botId) {
  return global.trustedBotIds.includes(botId);
}
function selectChatType(global, chatId) {
  const bot = (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectBot)(global, chatId);
  if (bot) {
    return 'bots';
  }
  const user = (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectUser)(global, chatId);
  if (user) {
    return 'users';
  }
  const chat = selectChat(global, chatId);
  if (!chat) return undefined;
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat)) {
    return 'channels';
  }
  return 'chats';
}
function selectIsChatBotNotStarted(global, chatId) {
  const bot = (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectBot)(global, chatId);
  if (!bot) {
    return false;
  }
  const lastMessage = selectChatLastMessage(global, chatId);
  if (lastMessage && (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isHistoryClearMessage)(lastMessage)) {
    return true;
  }
  return Boolean(!lastMessage);
}
function selectAreActiveChatsLoaded(global) {
  return Boolean(global.chats.listIds.active);
}
function selectIsChatListed(global, chatId, type) {
  const {
    listIds
  } = global.chats;
  if (type) {
    const targetList = listIds[type];
    return Boolean(targetList && targetList.includes(chatId));
  }
  return Object.values(listIds).some(list => list && list.includes(chatId));
}
function selectChatListType(global, chatId) {
  const chat = selectChat(global, chatId);
  if (!chat || !selectIsChatListed(global, chatId)) {
    return undefined;
  }
  return chat.folderId === _config__WEBPACK_IMPORTED_MODULE_0__.ARCHIVED_FOLDER_ID ? 'archived' : 'active';
}
function selectChatFolder(global, folderId) {
  return global.chatFolders.byId[folderId];
}
function selectTotalChatCount(global, listType) {
  const {
    totalCount
  } = global.chats;
  const allChatsCount = totalCount.all;
  const archivedChatsCount = totalCount.archived || 0;
  if (listType === 'archived') {
    return archivedChatsCount;
  }
  return allChatsCount ? allChatsCount - archivedChatsCount : 0;
}
function selectIsChatPinned(global, chatId, folderId = _config__WEBPACK_IMPORTED_MODULE_0__.ALL_FOLDER_ID) {
  const {
    active,
    archived,
    saved
  } = global.chats.orderedPinnedIds;
  if (folderId === _config__WEBPACK_IMPORTED_MODULE_0__.ALL_FOLDER_ID) {
    return Boolean(active?.includes(chatId));
  }
  if (folderId === _config__WEBPACK_IMPORTED_MODULE_0__.ARCHIVED_FOLDER_ID) {
    return Boolean(archived?.includes(chatId));
  }
  if (folderId === _config__WEBPACK_IMPORTED_MODULE_0__.SAVED_FOLDER_ID) {
    return Boolean(saved?.includes(chatId));
  }
  const {
    byId: chatFoldersById
  } = global.chatFolders;
  const {
    pinnedChatIds
  } = chatFoldersById[folderId] || {};
  return Boolean(pinnedChatIds?.includes(chatId));
}

// Slow, not to be used in `withGlobal`
function selectChatByUsername(global, username) {
  const usernameLowered = username.toLowerCase();
  return Object.values(global.chats.byId).find(chat => chat.usernames?.some(c => c.username.toLowerCase() === usernameLowered));
}
function selectIsServiceChatReady(global) {
  return Boolean(selectChat(global, _config__WEBPACK_IMPORTED_MODULE_0__.SERVICE_NOTIFICATIONS_USER_ID));
}
function selectSendAs(global, chatId) {
  const chat = selectChat(global, chatId);
  if (!chat) return undefined;
  const id = selectChatFullInfo(global, chatId)?.sendAsId;
  if (!id) return undefined;
  return (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectUser)(global, id) || selectChat(global, id);
}
function selectRequestedDraft(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const {
    requestedDraft
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId);
  if (requestedDraft?.chatId === chatId && !requestedDraft.files?.length) {
    return requestedDraft.text;
  }
  return undefined;
}
function selectRequestedDraftFiles(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const {
    requestedDraft
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId);
  if (requestedDraft?.chatId === chatId) {
    return requestedDraft.files;
  }
  return undefined;
}
function filterChatIdsByType(global, chatIds, filter) {
  return chatIds.filter(id => {
    const type = selectChatType(global, id);
    if (!type) {
      return false;
    }
    return filter.includes(type);
  });
}
function selectCanInviteToChat(global, chatId) {
  const chat = selectChat(global, chatId);
  if (!chat) return false;

  // https://github.com/TelegramMessenger/Telegram-iOS/blob/5126be83b3b9578fb014eb52ca553da9e7a8b83a/submodules/TelegramCore/Sources/TelegramEngine/Peers/Communities.swift#L6
  return !chat.migratedTo && Boolean(!(0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserId)(chatId) && ((0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat) || (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatSuperGroup)(chat) ? chat.isCreator || (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.getHasAdminRight)(chat, 'inviteUsers') || chat.usernames?.length && !chat.isJoinRequest : chat.isCreator || (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.getHasAdminRight)(chat, 'inviteUsers')));
}
function selectCanShareFolder(global, folderId) {
  const folder = selectChatFolder(global, folderId);
  if (!folder) return false;
  const {
    bots,
    groups,
    channels,
    contacts,
    nonContacts,
    includedChatIds,
    pinnedChatIds,
    excludeArchived,
    excludeMuted,
    excludeRead,
    excludedChatIds
  } = folder;
  return !bots && !groups && !channels && !contacts && !nonContacts && !excludeArchived && !excludeMuted && !excludeRead && !excludedChatIds?.length && (pinnedChatIds?.length || includedChatIds.length) && folder.includedChatIds.concat(folder.pinnedChatIds || []).some(chatId => {
    return selectCanInviteToChat(global, chatId);
  });
}
function selectShouldDetectChatLanguage(global, chatId) {
  const chat = selectChat(global, chatId);
  if (!chat) return false;
  const {
    canTranslateChats
  } = global.settings.byKey;
  const isPremium = (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectIsCurrentUserPremium)(global);
  const isSavedMessages = selectIsChatWithSelf(global, chatId);
  return _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_TRANSLATION_SUPPORTED && canTranslateChats && isPremium && !isSavedMessages;
}
function selectCanTranslateChat(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const chat = selectChat(global, chatId);
  if (!chat) return false;
  const requestedTranslation = selectRequestedChatTranslationLanguage(global, chatId, tabId);
  if (requestedTranslation) return true; // Prevent translation dropping on reevaluation

  const isLanguageDetectable = selectShouldDetectChatLanguage(global, chatId);
  const detectedLanguage = chat.detectedLanguage;
  const {
    doNotTranslate
  } = global.settings.byKey;
  return Boolean(isLanguageDetectable && detectedLanguage && !doNotTranslate.includes(detectedLanguage));
}
function selectRequestedChatTranslationLanguage(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const {
    requestedTranslations
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId);
  return requestedTranslations.byChatId[chatId]?.toLanguage;
}
function selectSimilarChannelIds(global, chatId) {
  return global.chats.similarChannelsById[chatId];
}
function selectSimilarBotsIds(global, chatId) {
  return global.chats.similarBotsById[chatId];
}
function selectChatLastMessageId(global, chatId, listType = 'all') {
  return global.chats.lastMessageIds[listType]?.[chatId];
}
function selectChatLastMessage(global, chatId, listType = 'all') {
  const id = selectChatLastMessageId(global, chatId, listType);
  if (!id) return undefined;
  const realChatId = listType === 'saved' ? global.currentUserId : chatId;
  return global.messages.byChatId[realChatId]?.byId[id];
}

/***/ }),

/***/ "./src/global/selectors/globalSearch.ts":
/*!**********************************************!*\
  !*** ./src/global/selectors/globalSearch.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectCurrentGlobalSearchQuery: () => (/* binding */ selectCurrentGlobalSearchQuery)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");


function selectCurrentGlobalSearchQuery(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).globalSearch.query;
}

/***/ }),

/***/ "./src/global/selectors/index.ts":
/*!***************************************!*\
  !*** ./src/global/selectors/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterChatIdsByType: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.filterChatIdsByType),
/* harmony export */   getSendersFromSelectedMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.getSendersFromSelectedMessages),
/* harmony export */   selectActiveDownloads: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectActiveDownloads),
/* harmony export */   selectActiveWebApp: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectActiveWebApp),
/* harmony export */   selectAllowedMessageActionsSlow: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectAllowedMessageActionsSlow),
/* harmony export */   selectAnimatedEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectAnimatedEmoji),
/* harmony export */   selectAnimatedEmojiEffect: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectAnimatedEmojiEffect),
/* harmony export */   selectAnimatedEmojiSound: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectAnimatedEmojiSound),
/* harmony export */   selectAreActiveChatsLoaded: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectAreActiveChatsLoaded),
/* harmony export */   selectBot: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectBot),
/* harmony export */   selectBotAppPermissions: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectBotAppPermissions),
/* harmony export */   selectCanAnimateInterface: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectCanAnimateInterface),
/* harmony export */   selectCanAnimateSnapEffect: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectCanAnimateSnapEffect),
/* harmony export */   selectCanAutoLoadMedia: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanAutoLoadMedia),
/* harmony export */   selectCanAutoPlayMedia: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectCanAutoPlayMedia),
/* harmony export */   selectCanDeleteOwnerTopic: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanDeleteOwnerTopic),
/* harmony export */   selectCanDeleteSelectedMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanDeleteSelectedMessages),
/* harmony export */   selectCanDeleteTopic: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanDeleteTopic),
/* harmony export */   selectCanDownloadSelectedMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanDownloadSelectedMessages),
/* harmony export */   selectCanForwardMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanForwardMessage),
/* harmony export */   selectCanForwardMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanForwardMessages),
/* harmony export */   selectCanGift: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_13__.selectCanGift),
/* harmony export */   selectCanInviteToChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectCanInviteToChat),
/* harmony export */   selectCanManage: () => (/* reexport safe */ _management__WEBPACK_IMPORTED_MODULE_6__.selectCanManage),
/* harmony export */   selectCanPlayAnimatedEmojis: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectCanPlayAnimatedEmojis),
/* harmony export */   selectCanReplyToMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanReplyToMessage),
/* harmony export */   selectCanReportSelectedMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanReportSelectedMessages),
/* harmony export */   selectCanScheduleUntilOnline: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanScheduleUntilOnline),
/* harmony export */   selectCanSetPasscode: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_9__.selectCanSetPasscode),
/* harmony export */   selectCanShareFolder: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectCanShareFolder),
/* harmony export */   selectCanTranslateChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectCanTranslateChat),
/* harmony export */   selectCanTranslateMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCanTranslateMessage),
/* harmony export */   selectChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChat),
/* harmony export */   selectChatByUsername: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatByUsername),
/* harmony export */   selectChatFolder: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatFolder),
/* harmony export */   selectChatFullInfo: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatFullInfo),
/* harmony export */   selectChatLastMessage: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatLastMessage),
/* harmony export */   selectChatLastMessageId: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatLastMessageId),
/* harmony export */   selectChatListLoadingParameters: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatListLoadingParameters),
/* harmony export */   selectChatListType: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatListType),
/* harmony export */   selectChatMediaSearch: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.selectChatMediaSearch),
/* harmony export */   selectChatMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectChatMessage),
/* harmony export */   selectChatMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectChatMessages),
/* harmony export */   selectChatOnlineCount: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatOnlineCount),
/* harmony export */   selectChatScheduledMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectChatScheduledMessages),
/* harmony export */   selectChatTranslations: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectChatTranslations),
/* harmony export */   selectChatType: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatType),
/* harmony export */   selectChatUser: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectChatUser),
/* harmony export */   selectCommonBoxChatId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCommonBoxChatId),
/* harmony export */   selectCurrentChat: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCurrentChat),
/* harmony export */   selectCurrentChatMediaSearch: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.selectCurrentChatMediaSearch),
/* harmony export */   selectCurrentGifSearch: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectCurrentGifSearch),
/* harmony export */   selectCurrentGlobalSearchQuery: () => (/* reexport safe */ _globalSearch__WEBPACK_IMPORTED_MODULE_4__.selectCurrentGlobalSearchQuery),
/* harmony export */   selectCurrentManagement: () => (/* reexport safe */ _management__WEBPACK_IMPORTED_MODULE_6__.selectCurrentManagement),
/* harmony export */   selectCurrentManagementType: () => (/* reexport safe */ _management__WEBPACK_IMPORTED_MODULE_6__.selectCurrentManagementType),
/* harmony export */   selectCurrentMessageIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMessageIds),
/* harmony export */   selectCurrentMessageList: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMessageList),
/* harmony export */   selectCurrentMiddleSearch: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.selectCurrentMiddleSearch),
/* harmony export */   selectCurrentSharedMediaSearch: () => (/* reexport safe */ _middleSearch__WEBPACK_IMPORTED_MODULE_5__.selectCurrentSharedMediaSearch),
/* harmony export */   selectCurrentStickerSearch: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectCurrentStickerSearch),
/* harmony export */   selectCurrentViewedStory: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectCurrentViewedStory),
/* harmony export */   selectCustomEmojiForEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectCustomEmojiForEmoji),
/* harmony export */   selectCustomEmojiForEmojis: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectCustomEmojiForEmojis),
/* harmony export */   selectCustomEmojis: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectCustomEmojis),
/* harmony export */   selectDefaultReaction: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectDefaultReaction),
/* harmony export */   selectDraft: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectDraft),
/* harmony export */   selectEditingDraft: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectEditingDraft),
/* harmony export */   selectEditingId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectEditingId),
/* harmony export */   selectEditingMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectEditingMessage),
/* harmony export */   selectEditingScheduledDraft: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectEditingScheduledDraft),
/* harmony export */   selectEditingScheduledId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectEditingScheduledId),
/* harmony export */   selectFirstMessageId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectFirstMessageId),
/* harmony export */   selectFirstUnreadId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectFirstUnreadId),
/* harmony export */   selectFocusedMessageId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectFocusedMessageId),
/* harmony export */   selectForwardedMessageIdsByGroupId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectForwardedMessageIdsByGroupId),
/* harmony export */   selectForwardedSender: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectForwardedSender),
/* harmony export */   selectForwardsCanBeSentToChat: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectForwardsCanBeSentToChat),
/* harmony export */   selectForwardsContainVoiceMessages: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectForwardsContainVoiceMessages),
/* harmony export */   selectGiftStickerForDuration: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectGiftStickerForDuration),
/* harmony export */   selectGiftStickerForStars: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectGiftStickerForStars),
/* harmony export */   selectHasProtectedMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectHasProtectedMessage),
/* harmony export */   selectIsAlwaysHighPriorityEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectIsAlwaysHighPriorityEmoji),
/* harmony export */   selectIsChatBotNotStarted: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectIsChatBotNotStarted),
/* harmony export */   selectIsChatListed: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectIsChatListed),
/* harmony export */   selectIsChatPinned: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectIsChatPinned),
/* harmony export */   selectIsChatProtected: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsChatProtected),
/* harmony export */   selectIsChatWithBot: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectIsChatWithBot),
/* harmony export */   selectIsChatWithSelf: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectIsChatWithSelf),
/* harmony export */   selectIsContextMenuTranslucent: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectIsContextMenuTranslucent),
/* harmony export */   selectIsCurrentUserPremium: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectIsCurrentUserPremium),
/* harmony export */   selectIsDocumentGroupSelected: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsDocumentGroupSelected),
/* harmony export */   selectIsForumPanelClosed: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectIsForumPanelClosed),
/* harmony export */   selectIsForumPanelOpen: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectIsForumPanelOpen),
/* harmony export */   selectIsForwardModalOpen: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsForwardModalOpen),
/* harmony export */   selectIsGiveawayGiftsPurchaseAvailable: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectIsGiveawayGiftsPurchaseAvailable),
/* harmony export */   selectIsInSelectMode: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsInSelectMode),
/* harmony export */   selectIsMediaViewerOpen: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectIsMediaViewerOpen),
/* harmony export */   selectIsMessageFocused: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsMessageFocused),
/* harmony export */   selectIsMessageInCurrentMessageList: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsMessageInCurrentMessageList),
/* harmony export */   selectIsMessageProtected: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsMessageProtected),
/* harmony export */   selectIsMessageSelected: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsMessageSelected),
/* harmony export */   selectIsMessageUnread: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsMessageUnread),
/* harmony export */   selectIsPremiumPurchaseBlocked: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectIsPremiumPurchaseBlocked),
/* harmony export */   selectIsReactionPickerOpen: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectIsReactionPickerOpen),
/* harmony export */   selectIsRightColumnShown: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectIsRightColumnShown),
/* harmony export */   selectIsServiceChatReady: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectIsServiceChatReady),
/* harmony export */   selectIsSetPremium: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectIsSetPremium),
/* harmony export */   selectIsStatisticsShown: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_10__.selectIsStatisticsShown),
/* harmony export */   selectIsStickerFavorite: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectIsStickerFavorite),
/* harmony export */   selectIsStoryViewerOpen: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectIsStoryViewerOpen),
/* harmony export */   selectIsSynced: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectIsSynced),
/* harmony export */   selectIsTrustedBot: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectIsTrustedBot),
/* harmony export */   selectIsUserBlocked: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectIsUserBlocked),
/* harmony export */   selectIsViewportNewest: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectIsViewportNewest),
/* harmony export */   selectLanguageCode: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_9__.selectLanguageCode),
/* harmony export */   selectLastScrollOffset: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectLastScrollOffset),
/* harmony export */   selectLastServiceNotification: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectLastServiceNotification),
/* harmony export */   selectListedIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectListedIds),
/* harmony export */   selectManagement: () => (/* reexport safe */ _management__WEBPACK_IMPORTED_MODULE_6__.selectManagement),
/* harmony export */   selectMaxUserReactions: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectMaxUserReactions),
/* harmony export */   selectMessageCustomEmojiSets: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectMessageCustomEmojiSets),
/* harmony export */   selectMessageIdsByGroupId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectMessageIdsByGroupId),
/* harmony export */   selectMessageReplyInfo: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectMessageReplyInfo),
/* harmony export */   selectMessageTranslations: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectMessageTranslations),
/* harmony export */   selectNewNoncontactPeersRequirePremium: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_9__.selectNewNoncontactPeersRequirePremium),
/* harmony export */   selectNewestMessageWithBotKeyboardButtons: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectNewestMessageWithBotKeyboardButtons),
/* harmony export */   selectNoWebPage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectNoWebPage),
/* harmony export */   selectNotifyExceptions: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_9__.selectNotifyExceptions),
/* harmony export */   selectNotifySettings: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_9__.selectNotifySettings),
/* harmony export */   selectOutgoingStatus: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectOutgoingStatus),
/* harmony export */   selectOutlyingListByMessageId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectOutlyingListByMessageId),
/* harmony export */   selectOutlyingLists: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectOutlyingLists),
/* harmony export */   selectPaymentForm: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectPaymentForm),
/* harmony export */   selectPaymentInputInvoice: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectPaymentInputInvoice),
/* harmony export */   selectPaymentRequestId: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectPaymentRequestId),
/* harmony export */   selectPeer: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_13__.selectPeer),
/* harmony export */   selectPeerFirstStoryId: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectPeerFirstStoryId),
/* harmony export */   selectPeerFirstUnreadStoryId: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectPeerFirstUnreadStoryId),
/* harmony export */   selectPeerFullInfo: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectPeerFullInfo),
/* harmony export */   selectPeerPhotos: () => (/* reexport safe */ _peers__WEBPACK_IMPORTED_MODULE_13__.selectPeerPhotos),
/* harmony export */   selectPeerStories: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectPeerStories),
/* harmony export */   selectPeerStory: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectPeerStory),
/* harmony export */   selectPerformanceSettings: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectPerformanceSettings),
/* harmony export */   selectPerformanceSettingsValue: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectPerformanceSettingsValue),
/* harmony export */   selectPinnedIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectPinnedIds),
/* harmony export */   selectPinnedStories: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectPinnedStories),
/* harmony export */   selectPoll: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectPoll),
/* harmony export */   selectPollFromMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectPollFromMessage),
/* harmony export */   selectProviderPublicToken: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectProviderPublicToken),
/* harmony export */   selectProviderPublishableKey: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectProviderPublishableKey),
/* harmony export */   selectQuickReplyMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectQuickReplyMessage),
/* harmony export */   selectRealLastReadId: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectRealLastReadId),
/* harmony export */   selectReplyCanBeSentToChat: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectReplyCanBeSentToChat),
/* harmony export */   selectReplyStack: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectReplyStack),
/* harmony export */   selectRequestedChatTranslationLanguage: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectRequestedChatTranslationLanguage),
/* harmony export */   selectRequestedDraft: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectRequestedDraft),
/* harmony export */   selectRequestedDraftFiles: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectRequestedDraftFiles),
/* harmony export */   selectRequestedMessageTranslationLanguage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectRequestedMessageTranslationLanguage),
/* harmony export */   selectRestrictedEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectRestrictedEmoji),
/* harmony export */   selectRightColumnContentKey: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectRightColumnContentKey),
/* harmony export */   selectSavedDialogIdFromMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectSavedDialogIdFromMessage),
/* harmony export */   selectScheduledIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectScheduledIds),
/* harmony export */   selectScheduledMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectScheduledMessage),
/* harmony export */   selectScrollOffset: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectScrollOffset),
/* harmony export */   selectSelectedMessagesCount: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectSelectedMessagesCount),
/* harmony export */   selectSendAs: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectSendAs),
/* harmony export */   selectSender: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectSender),
/* harmony export */   selectSenderFromHeader: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectSenderFromHeader),
/* harmony export */   selectSenderFromMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectSenderFromMessage),
/* harmony export */   selectShouldDetectChatLanguage: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectShouldDetectChatLanguage),
/* harmony export */   selectShouldHideReadMarks: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_9__.selectShouldHideReadMarks),
/* harmony export */   selectShouldLoopStickers: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectShouldLoopStickers),
/* harmony export */   selectShouldSchedule: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectShouldSchedule),
/* harmony export */   selectSimilarBotsIds: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectSimilarBotsIds),
/* harmony export */   selectSimilarChannelIds: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectSimilarChannelIds),
/* harmony export */   selectSmartGlocalCredentials: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectSmartGlocalCredentials),
/* harmony export */   selectSponsoredMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectSponsoredMessage),
/* harmony export */   selectStarsPayment: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectStarsPayment),
/* harmony export */   selectStatistics: () => (/* reexport safe */ _statistics__WEBPACK_IMPORTED_MODULE_10__.selectStatistics),
/* harmony export */   selectStickerSet: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectStickerSet),
/* harmony export */   selectStickersForEmoji: () => (/* reexport safe */ _symbols__WEBPACK_IMPORTED_MODULE_7__.selectStickersForEmoji),
/* harmony export */   selectStoryListForViewer: () => (/* reexport safe */ _stories__WEBPACK_IMPORTED_MODULE_11__.selectStoryListForViewer),
/* harmony export */   selectStripeCredentials: () => (/* reexport safe */ _payments__WEBPACK_IMPORTED_MODULE_8__.selectStripeCredentials),
/* harmony export */   selectSupportChat: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectSupportChat),
/* harmony export */   selectTabState: () => (/* reexport safe */ _tabs__WEBPACK_IMPORTED_MODULE_12__.selectTabState),
/* harmony export */   selectTabThreadParam: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectTabThreadParam),
/* harmony export */   selectTheme: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectTheme),
/* harmony export */   selectThread: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectThread),
/* harmony export */   selectThreadByMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectThreadByMessage),
/* harmony export */   selectThreadIdFromMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectThreadIdFromMessage),
/* harmony export */   selectThreadInfo: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectThreadInfo),
/* harmony export */   selectThreadMessagesCount: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectThreadMessagesCount),
/* harmony export */   selectThreadParam: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectThreadParam),
/* harmony export */   selectTopic: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_14__.selectTopic),
/* harmony export */   selectTopicFromMessage: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectTopicFromMessage),
/* harmony export */   selectTopicLink: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectTopicLink),
/* harmony export */   selectTopics: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_14__.selectTopics),
/* harmony export */   selectTopicsInfo: () => (/* reexport safe */ _topics__WEBPACK_IMPORTED_MODULE_14__.selectTopicsInfo),
/* harmony export */   selectTotalChatCount: () => (/* reexport safe */ _chats__WEBPACK_IMPORTED_MODULE_2__.selectTotalChatCount),
/* harmony export */   selectTranslationLanguage: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_9__.selectTranslationLanguage),
/* harmony export */   selectUploadProgress: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectUploadProgress),
/* harmony export */   selectUser: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectUser),
/* harmony export */   selectUserByPhoneNumber: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectUserByPhoneNumber),
/* harmony export */   selectUserCommonChats: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectUserCommonChats),
/* harmony export */   selectUserFullInfo: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectUserFullInfo),
/* harmony export */   selectUserStatus: () => (/* reexport safe */ _users__WEBPACK_IMPORTED_MODULE_1__.selectUserStatus),
/* harmony export */   selectViewportIds: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectViewportIds),
/* harmony export */   selectVisibleUsers: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_3__.selectVisibleUsers),
/* harmony export */   selectWebApp: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_0__.selectWebApp)
/* harmony export */ });
/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui */ "./src/global/selectors/ui.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./users */ "./src/global/selectors/users.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chats */ "./src/global/selectors/chats.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages */ "./src/global/selectors/messages.ts");
/* harmony import */ var _globalSearch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./globalSearch */ "./src/global/selectors/globalSearch.ts");
/* harmony import */ var _middleSearch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./middleSearch */ "./src/global/selectors/middleSearch.ts");
/* harmony import */ var _management__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./management */ "./src/global/selectors/management.ts");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./symbols */ "./src/global/selectors/symbols.ts");
/* harmony import */ var _payments__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./payments */ "./src/global/selectors/payments.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./settings */ "./src/global/selectors/settings.ts");
/* harmony import */ var _statistics__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./statistics */ "./src/global/selectors/statistics.ts");
/* harmony import */ var _stories__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stories */ "./src/global/selectors/stories.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");
/* harmony import */ var _peers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./peers */ "./src/global/selectors/peers.ts");
/* harmony import */ var _topics__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./topics */ "./src/global/selectors/topics.ts");
















/***/ }),

/***/ "./src/global/selectors/management.ts":
/*!********************************************!*\
  !*** ./src/global/selectors/management.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectCanManage: () => (/* binding */ selectCanManage),
/* harmony export */   selectCurrentManagement: () => (/* binding */ selectCurrentManagement),
/* harmony export */   selectCurrentManagementType: () => (/* binding */ selectCurrentManagementType),
/* harmony export */   selectManagement: () => (/* binding */ selectManagement)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chats */ "./src/global/selectors/chats.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages */ "./src/global/selectors/messages.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./users */ "./src/global/selectors/users.ts");






function selectManagement(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).management.byChatId[chatId];
}
function selectCurrentManagement(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    chatId,
    threadId
  } = (0,_messages__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  const currentManagement = (0,_tabs__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global, tabId).management.byChatId[chatId];
  if (!currentManagement?.isActive) {
    return undefined;
  }
  return currentManagement;
}
function selectCurrentManagementType(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    chatId,
    threadId
  } = (0,_messages__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  const chatBot = (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectBot)(global, chatId);
  if (chatBot) {
    return 'bot';
  }
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isUserId)(chatId)) {
    return 'user';
  }
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_2__.selectChat)(global, chatId);
  if (!chat) {
    return undefined;
  }
  if ((0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isChatGroup)(chat)) {
    return 'group';
  }
  return 'channel';
}
function selectCanManage(global, chatId) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_2__.selectChat)(global, chatId);
  if (!chat || chat.isRestricted) return false;
  const isPrivate = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isUserId)(chat.id);
  const user = isPrivate ? (0,_users__WEBPACK_IMPORTED_MODULE_5__.selectUser)(global, chatId) : undefined;
  const canAddContact = user && (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.getCanAddContact)(user);
  const isBot = user && (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isUserBot)(user);
  return Boolean(!canAddContact && chat && !(0,_chats__WEBPACK_IMPORTED_MODULE_2__.selectIsChatWithSelf)(global, chat.id) && !(0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isAnonymousForwardsChat)(chat.id)
  // chat.isCreator is for Basic Groups
  && ((0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isUserId)(chat.id) || ((0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isChatAdmin)(chat) || chat.isCreator) && !chat.isNotJoined) && !isBot);
}

/***/ }),

/***/ "./src/global/selectors/messages.ts":
/*!******************************************!*\
  !*** ./src/global/selectors/messages.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSendersFromSelectedMessages: () => (/* binding */ getSendersFromSelectedMessages),
/* harmony export */   selectActiveDownloads: () => (/* binding */ selectActiveDownloads),
/* harmony export */   selectAllowedMessageActionsSlow: () => (/* binding */ selectAllowedMessageActionsSlow),
/* harmony export */   selectCanAutoLoadMedia: () => (/* binding */ selectCanAutoLoadMedia),
/* harmony export */   selectCanDeleteOwnerTopic: () => (/* binding */ selectCanDeleteOwnerTopic),
/* harmony export */   selectCanDeleteSelectedMessages: () => (/* binding */ selectCanDeleteSelectedMessages),
/* harmony export */   selectCanDeleteTopic: () => (/* binding */ selectCanDeleteTopic),
/* harmony export */   selectCanDownloadSelectedMessages: () => (/* binding */ selectCanDownloadSelectedMessages),
/* harmony export */   selectCanForwardMessage: () => (/* binding */ selectCanForwardMessage),
/* harmony export */   selectCanForwardMessages: () => (/* binding */ selectCanForwardMessages),
/* harmony export */   selectCanReplyToMessage: () => (/* binding */ selectCanReplyToMessage),
/* harmony export */   selectCanReportSelectedMessages: () => (/* binding */ selectCanReportSelectedMessages),
/* harmony export */   selectCanScheduleUntilOnline: () => (/* binding */ selectCanScheduleUntilOnline),
/* harmony export */   selectCanTranslateMessage: () => (/* binding */ selectCanTranslateMessage),
/* harmony export */   selectChatMessage: () => (/* binding */ selectChatMessage),
/* harmony export */   selectChatMessages: () => (/* binding */ selectChatMessages),
/* harmony export */   selectChatScheduledMessages: () => (/* binding */ selectChatScheduledMessages),
/* harmony export */   selectChatTranslations: () => (/* binding */ selectChatTranslations),
/* harmony export */   selectCommonBoxChatId: () => (/* binding */ selectCommonBoxChatId),
/* harmony export */   selectCurrentChat: () => (/* binding */ selectCurrentChat),
/* harmony export */   selectCurrentMessageIds: () => (/* binding */ selectCurrentMessageIds),
/* harmony export */   selectCurrentMessageList: () => (/* binding */ selectCurrentMessageList),
/* harmony export */   selectCustomEmojis: () => (/* binding */ selectCustomEmojis),
/* harmony export */   selectDefaultReaction: () => (/* binding */ selectDefaultReaction),
/* harmony export */   selectDraft: () => (/* binding */ selectDraft),
/* harmony export */   selectEditingDraft: () => (/* binding */ selectEditingDraft),
/* harmony export */   selectEditingId: () => (/* binding */ selectEditingId),
/* harmony export */   selectEditingMessage: () => (/* binding */ selectEditingMessage),
/* harmony export */   selectEditingScheduledDraft: () => (/* binding */ selectEditingScheduledDraft),
/* harmony export */   selectEditingScheduledId: () => (/* binding */ selectEditingScheduledId),
/* harmony export */   selectFirstMessageId: () => (/* binding */ selectFirstMessageId),
/* harmony export */   selectFirstUnreadId: () => (/* binding */ selectFirstUnreadId),
/* harmony export */   selectFocusedMessageId: () => (/* binding */ selectFocusedMessageId),
/* harmony export */   selectForwardedMessageIdsByGroupId: () => (/* binding */ selectForwardedMessageIdsByGroupId),
/* harmony export */   selectForwardedSender: () => (/* binding */ selectForwardedSender),
/* harmony export */   selectForwardsCanBeSentToChat: () => (/* binding */ selectForwardsCanBeSentToChat),
/* harmony export */   selectForwardsContainVoiceMessages: () => (/* binding */ selectForwardsContainVoiceMessages),
/* harmony export */   selectHasProtectedMessage: () => (/* binding */ selectHasProtectedMessage),
/* harmony export */   selectIsChatProtected: () => (/* binding */ selectIsChatProtected),
/* harmony export */   selectIsDocumentGroupSelected: () => (/* binding */ selectIsDocumentGroupSelected),
/* harmony export */   selectIsForwardModalOpen: () => (/* binding */ selectIsForwardModalOpen),
/* harmony export */   selectIsInSelectMode: () => (/* binding */ selectIsInSelectMode),
/* harmony export */   selectIsMessageFocused: () => (/* binding */ selectIsMessageFocused),
/* harmony export */   selectIsMessageInCurrentMessageList: () => (/* binding */ selectIsMessageInCurrentMessageList),
/* harmony export */   selectIsMessageProtected: () => (/* binding */ selectIsMessageProtected),
/* harmony export */   selectIsMessageSelected: () => (/* binding */ selectIsMessageSelected),
/* harmony export */   selectIsMessageUnread: () => (/* binding */ selectIsMessageUnread),
/* harmony export */   selectIsViewportNewest: () => (/* binding */ selectIsViewportNewest),
/* harmony export */   selectLastScrollOffset: () => (/* binding */ selectLastScrollOffset),
/* harmony export */   selectLastServiceNotification: () => (/* binding */ selectLastServiceNotification),
/* harmony export */   selectListedIds: () => (/* binding */ selectListedIds),
/* harmony export */   selectMaxUserReactions: () => (/* binding */ selectMaxUserReactions),
/* harmony export */   selectMessageCustomEmojiSets: () => (/* binding */ selectMessageCustomEmojiSets),
/* harmony export */   selectMessageIdsByGroupId: () => (/* binding */ selectMessageIdsByGroupId),
/* harmony export */   selectMessageReplyInfo: () => (/* binding */ selectMessageReplyInfo),
/* harmony export */   selectMessageTranslations: () => (/* binding */ selectMessageTranslations),
/* harmony export */   selectNewestMessageWithBotKeyboardButtons: () => (/* binding */ selectNewestMessageWithBotKeyboardButtons),
/* harmony export */   selectNoWebPage: () => (/* binding */ selectNoWebPage),
/* harmony export */   selectOutgoingStatus: () => (/* binding */ selectOutgoingStatus),
/* harmony export */   selectOutlyingListByMessageId: () => (/* binding */ selectOutlyingListByMessageId),
/* harmony export */   selectOutlyingLists: () => (/* binding */ selectOutlyingLists),
/* harmony export */   selectPinnedIds: () => (/* binding */ selectPinnedIds),
/* harmony export */   selectPoll: () => (/* binding */ selectPoll),
/* harmony export */   selectPollFromMessage: () => (/* binding */ selectPollFromMessage),
/* harmony export */   selectQuickReplyMessage: () => (/* binding */ selectQuickReplyMessage),
/* harmony export */   selectRealLastReadId: () => (/* binding */ selectRealLastReadId),
/* harmony export */   selectReplyCanBeSentToChat: () => (/* binding */ selectReplyCanBeSentToChat),
/* harmony export */   selectReplyStack: () => (/* binding */ selectReplyStack),
/* harmony export */   selectRequestedMessageTranslationLanguage: () => (/* binding */ selectRequestedMessageTranslationLanguage),
/* harmony export */   selectSavedDialogIdFromMessage: () => (/* binding */ selectSavedDialogIdFromMessage),
/* harmony export */   selectScheduledIds: () => (/* binding */ selectScheduledIds),
/* harmony export */   selectScheduledMessage: () => (/* binding */ selectScheduledMessage),
/* harmony export */   selectScrollOffset: () => (/* binding */ selectScrollOffset),
/* harmony export */   selectSelectedMessagesCount: () => (/* binding */ selectSelectedMessagesCount),
/* harmony export */   selectSender: () => (/* binding */ selectSender),
/* harmony export */   selectSenderFromHeader: () => (/* binding */ selectSenderFromHeader),
/* harmony export */   selectSenderFromMessage: () => (/* binding */ selectSenderFromMessage),
/* harmony export */   selectShouldSchedule: () => (/* binding */ selectShouldSchedule),
/* harmony export */   selectSponsoredMessage: () => (/* binding */ selectSponsoredMessage),
/* harmony export */   selectTabThreadParam: () => (/* binding */ selectTabThreadParam),
/* harmony export */   selectThread: () => (/* binding */ selectThread),
/* harmony export */   selectThreadByMessage: () => (/* binding */ selectThreadByMessage),
/* harmony export */   selectThreadIdFromMessage: () => (/* binding */ selectThreadIdFromMessage),
/* harmony export */   selectThreadInfo: () => (/* binding */ selectThreadInfo),
/* harmony export */   selectThreadMessagesCount: () => (/* binding */ selectThreadMessagesCount),
/* harmony export */   selectThreadParam: () => (/* binding */ selectThreadParam),
/* harmony export */   selectTopicFromMessage: () => (/* binding */ selectTopicFromMessage),
/* harmony export */   selectTopicLink: () => (/* binding */ selectTopicLink),
/* harmony export */   selectUploadProgress: () => (/* binding */ selectUploadProgress),
/* harmony export */   selectViewportIds: () => (/* binding */ selectViewportIds),
/* harmony export */   selectVisibleUsers: () => (/* binding */ selectVisibleUsers)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_memo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/memo */ "./src/util/memo.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _helpers_replies__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chats */ "./src/global/selectors/chats.ts");
/* harmony import */ var _peers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./peers */ "./src/global/selectors/peers.ts");
/* harmony import */ var _stories__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./stories */ "./src/global/selectors/stories.ts");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./symbols */ "./src/global/selectors/symbols.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");
/* harmony import */ var _topics__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./topics */ "./src/global/selectors/topics.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./users */ "./src/global/selectors/users.ts");

















function selectCurrentMessageList(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageLists
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId);
  if (messageLists.length) {
    return messageLists[messageLists.length - 1];
  }
  return undefined;
}
function selectCurrentChat(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    chatId
  } = selectCurrentMessageList(global, tabId) || {};
  return chatId ? (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId) : undefined;
}
function selectChatMessages(global, chatId) {
  return global.messages.byChatId[chatId]?.byId;
}
function selectChatScheduledMessages(global, chatId) {
  return global.scheduledMessages.byChatId[chatId]?.byId;
}
function selectTabThreadParam(global, chatId, threadId, key, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).tabThreads[chatId]?.[threadId]?.[key];
}
function selectThreadParam(global, chatId, threadId, key) {
  return selectThread(global, chatId, threadId)?.[key];
}
function selectThread(global, chatId, threadId) {
  const messageInfo = global.messages.byChatId[chatId];
  if (!messageInfo) {
    return undefined;
  }
  const thread = messageInfo.threadsById[threadId];
  if (!thread) {
    return undefined;
  }
  return thread;
}
function selectListedIds(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'listedIds');
}
function selectOutlyingListByMessageId(global, chatId, threadId, messageId) {
  const outlyingLists = selectOutlyingLists(global, chatId, threadId);
  if (!outlyingLists) {
    return undefined;
  }
  return outlyingLists.find(list => {
    return list[0] <= messageId && list[list.length - 1] >= messageId;
  });
}
function selectOutlyingLists(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'outlyingLists');
}
function selectCurrentMessageIds(global, chatId, threadId, messageListType, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  switch (messageListType) {
    case 'thread':
      return selectViewportIds(global, chatId, threadId, tabId);
    case 'pinned':
      return selectPinnedIds(global, chatId, threadId);
    case 'scheduled':
      return selectScheduledIds(global, chatId, threadId);
  }
  return undefined;
}
function selectViewportIds(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  return selectTabThreadParam(global, chatId, threadId, 'viewportIds', tabId);
}
function selectPinnedIds(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'pinnedIds');
}
function selectScheduledIds(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'scheduledIds');
}
function selectScrollOffset(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  return selectTabThreadParam(global, chatId, threadId, 'scrollOffset', tabId);
}
function selectLastScrollOffset(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'lastScrollOffset');
}
function selectEditingId(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'editingId');
}
function selectEditingDraft(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'editingDraft');
}
function selectEditingScheduledId(global, chatId) {
  return selectThreadParam(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'editingScheduledId');
}
function selectEditingScheduledDraft(global, chatId) {
  return selectThreadParam(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, 'editingScheduledDraft');
}
function selectDraft(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'draft');
}
function selectNoWebPage(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'noWebPage');
}
function selectThreadInfo(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'threadInfo');
}
function selectFirstMessageId(global, chatId, threadId) {
  return selectThreadParam(global, chatId, threadId, 'firstMessageId');
}
function selectReplyStack(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  return selectTabThreadParam(global, chatId, threadId, 'replyStack', tabId);
}
function selectThreadMessagesCount(global, chatId, threadId) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  const threadInfo = selectThreadInfo(global, chatId, threadId);
  if (!chat || !threadInfo || threadInfo.messagesCount === undefined) return undefined;
  // In forum topics first message is ignored, but not in General
  if (chat.isForum && threadId !== _config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_TOPIC_ID) return threadInfo.messagesCount - 1;
  return threadInfo.messagesCount;
}
function selectThreadByMessage(global, message) {
  const threadId = selectThreadIdFromMessage(global, message);
  if (!threadId || threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
    return undefined;
  }
  return global.messages.byChatId[message.chatId].threadsById[threadId];
}
function selectIsMessageInCurrentMessageList(global, chatId, message, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const currentMessageList = selectCurrentMessageList(global, tabId);
  if (!currentMessageList) {
    return false;
  }
  const {
    threadInfo
  } = selectThreadByMessage(global, message) || {};
  return chatId === currentMessageList.chatId && (currentMessageList.threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID || threadInfo && currentMessageList.threadId === threadInfo.threadId);
}
function selectIsViewportNewest(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);
  if (!viewportIds || !viewportIds.length) {
    return true;
  }
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  let lastMessageId;
  if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
    const id = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChatLastMessageId)(global, chatId);
    if (!id) {
      return true;
    }
    lastMessageId = id;
  } else if (isSavedDialog) {
    const id = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChatLastMessageId)(global, String(threadId), 'saved');
    if (!id) {
      return true;
    }
    lastMessageId = id;
  } else {
    const threadInfo = selectThreadInfo(global, chatId, threadId);
    if (!threadInfo || !threadInfo.lastMessageId) {
      if (!threadInfo?.threadId) return undefined;
      // No messages in thread, except for the thread message itself
      lastMessageId = Number(threadInfo?.threadId);
    } else {
      lastMessageId = threadInfo.lastMessageId;
    }
  }

  // Edge case: outgoing `lastMessage` is updated with a delay to optimize animation
  if ((0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.isLocalMessageId)(lastMessageId) && !selectChatMessage(global, chatId, lastMessageId)) {
    return true;
  }
  return viewportIds[viewportIds.length - 1] >= lastMessageId;
}
function selectChatMessage(global, chatId, messageId) {
  const chatMessages = selectChatMessages(global, chatId);
  return chatMessages ? chatMessages[messageId] : undefined;
}
function selectScheduledMessage(global, chatId, messageId) {
  const chatMessages = selectChatScheduledMessages(global, chatId);
  return chatMessages ? chatMessages[messageId] : undefined;
}
function selectQuickReplyMessage(global, messageId) {
  return global.quickReplies.messagesById[messageId];
}
function selectEditingMessage(global, chatId, threadId, messageListType) {
  if (messageListType === 'scheduled') {
    const messageId = selectEditingScheduledId(global, chatId);
    return messageId ? selectScheduledMessage(global, chatId, messageId) : undefined;
  } else {
    const messageId = selectEditingId(global, chatId, threadId);
    return messageId ? selectChatMessage(global, chatId, messageId) : undefined;
  }
}
function selectFocusedMessageId(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    chatId: focusedChatId,
    messageId
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).focusedMessage || {};
  return focusedChatId === chatId ? messageId : undefined;
}
function selectIsMessageFocused(global, message, currentThreadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const focusedId = selectFocusedMessageId(global, message.chatId, tabId);
  const threadId = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).focusedMessage?.threadId;
  if (currentThreadId !== threadId) return false;
  return focusedId ? focusedId === message.id || focusedId === message.previousLocalId : false;
}
function selectIsMessageUnread(global, message) {
  const {
    lastReadOutboxMessageId
  } = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, message.chatId) || {};
  return (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageLocal)(message) || !lastReadOutboxMessageId || lastReadOutboxMessageId < message.id;
}
function selectOutgoingStatus(global, message, isScheduledList = false) {
  if (!selectIsMessageUnread(global, message) && !isScheduledList) {
    return 'read';
  }
  return (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getSendingState)(message);
}
function selectSender(global, message) {
  const {
    senderId
  } = message;
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, message.chatId);
  if (!senderId) {
    return chat;
  }
  if (chat && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatChannel)(chat) && !chat.areProfilesShown) return chat;
  return (0,_peers__WEBPACK_IMPORTED_MODULE_11__.selectPeer)(global, senderId);
}
function getSendersFromSelectedMessages(global, chat, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds: selectedMessageIds
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).selectedMessages || {};
  if (!chat?.id || !selectedMessageIds) {
    return undefined;
  }
  return selectedMessageIds.map(id => {
    const message = selectChatMessage(global, chat.id, id);
    return message && selectSender(global, message);
  });
}
function selectSenderFromMessage(global, chatId, messageId) {
  const message = selectChatMessage(global, chatId, messageId);
  return message && selectSender(global, message);
}
function selectSenderFromHeader(global, header) {
  const {
    fromId
  } = header;
  if (fromId) {
    return (0,_peers__WEBPACK_IMPORTED_MODULE_11__.selectPeer)(global, fromId);
  }
  return undefined;
}
function selectForwardedSender(global, message) {
  const isStoryForward = Boolean(message.content.storyData);
  if (isStoryForward) {
    const peerId = message.content.storyData.peerId;
    return (0,_peers__WEBPACK_IMPORTED_MODULE_11__.selectPeer)(global, peerId);
  }
  const {
    forwardInfo
  } = message;
  if (!forwardInfo) {
    return undefined;
  }
  if (forwardInfo.isChannelPost && forwardInfo.fromChatId) {
    return (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, forwardInfo.fromChatId);
  }
  if (forwardInfo.hiddenUserName) {
    return undefined;
  }
  if (forwardInfo.fromId) {
    return (0,_peers__WEBPACK_IMPORTED_MODULE_11__.selectPeer)(global, forwardInfo.fromId);
  }
  if (forwardInfo.savedFromPeerId) {
    return (0,_peers__WEBPACK_IMPORTED_MODULE_11__.selectPeer)(global, forwardInfo.savedFromPeerId);
  }
  return undefined;
}
function selectPoll(global, pollId) {
  return global.messages.pollById[pollId];
}
function selectPollFromMessage(global, message) {
  if (!message.content.pollId) return undefined;
  return selectPoll(global, message.content.pollId);
}
function selectTopicFromMessage(global, message) {
  const {
    chatId
  } = message;
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  if (!chat?.isForum) return undefined;
  const threadId = selectThreadIdFromMessage(global, message);
  return (0,_topics__WEBPACK_IMPORTED_MODULE_15__.selectTopic)(global, chatId, threadId);
}
const MAX_MESSAGES_TO_DELETE_OWNER_TOPIC = 10;
function selectCanDeleteOwnerTopic(global, chatId, topicId) {
  const topic = (0,_topics__WEBPACK_IMPORTED_MODULE_15__.selectTopic)(global, chatId, topicId);
  if (topic && !topic.isOwner) return false;
  const thread = selectThread(global, chatId, topicId);
  if (!thread) return false;
  const {
    listedIds
  } = thread;
  if (!listedIds
  // Plus one for root message
  || listedIds.length + 1 >= MAX_MESSAGES_TO_DELETE_OWNER_TOPIC) {
    return false;
  }
  const hasNotOutgoingMessages = listedIds.some(messageId => {
    const message = selectChatMessage(global, chatId, messageId);
    return !message || !message.isOutgoing;
  });
  return !hasNotOutgoingMessages;
}
function selectCanDeleteTopic(global, chatId, topicId) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  if (!chat) return false;
  if (topicId === _config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_TOPIC_ID) return false;
  return chat.isCreator || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'deleteMessages') || chat.isForum && selectCanDeleteOwnerTopic(global, chat.id, topicId);
}
function selectSavedDialogIdFromMessage(global, message) {
  const {
    chatId,
    senderId,
    forwardInfo,
    savedPeerId
  } = message;
  if (savedPeerId) return savedPeerId;
  if (chatId !== global.currentUserId) {
    return undefined;
  }
  if (forwardInfo?.savedFromPeerId) {
    return forwardInfo.savedFromPeerId;
  }
  if (forwardInfo?.fromId) {
    return forwardInfo.fromId;
  }
  if (forwardInfo?.hiddenUserName) {
    return _config__WEBPACK_IMPORTED_MODULE_1__.ANONYMOUS_USER_ID;
  }
  return senderId;
}
function selectThreadIdFromMessage(global, message) {
  const savedDialogId = selectSavedDialogIdFromMessage(global, message);
  if (savedDialogId) {
    return savedDialogId;
  }
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, message.chatId);
  const {
    content
  } = message;
  const {
    replyToMsgId,
    replyToTopId,
    isForumTopic
  } = (0,_helpers_replies__WEBPACK_IMPORTED_MODULE_9__.getMessageReplyInfo)(message) || {};
  if ('action' in content && content.action?.type === 'topicCreate') {
    return message.id;
  }
  if (!chat?.isForum) {
    if (chat && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatBasicGroup)(chat)) return _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
    if (chat && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatSuperGroup)(chat)) {
      return replyToTopId || replyToMsgId || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
    }
    return _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
  }
  if (!isForumTopic) return _config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_TOPIC_ID;
  return replyToTopId || replyToMsgId || _config__WEBPACK_IMPORTED_MODULE_1__.GENERAL_TOPIC_ID;
}
function selectCanReplyToMessage(global, message, threadId) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, message.chatId);
  if (!chat || chat.isRestricted || chat.isForbidden) return false;
  const isLocal = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageLocal)(message);
  const isServiceNotification = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isServiceNotificationMessage)(message);
  if (isLocal || isServiceNotification) return false;
  const threadInfo = selectThreadInfo(global, message.chatId, threadId);
  const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);
  const chatFullInfo = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChatFullInfo)(global, chat.id);
  const topic = (0,_topics__WEBPACK_IMPORTED_MODULE_15__.selectTopic)(global, chat.id, threadId);
  const canPostInChat = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getCanPostInChat)(chat, topic, isMessageThread, chatFullInfo);
  if (!canPostInChat) return false;
  const messageTopic = selectTopicFromMessage(global, message);
  return !messageTopic || !messageTopic.isClosed || messageTopic.isOwner || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'manageTopics');
}
function selectCanForwardMessage(global, message) {
  const isLocal = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageLocal)(message);
  const isServiceNotification = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isServiceNotificationMessage)(message);
  const isAction = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isActionMessage)(message);
  const hasTtl = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.hasMessageTtl)(message);
  const {
    content
  } = message;
  const story = content.storyData ? (0,_stories__WEBPACK_IMPORTED_MODULE_12__.selectPeerStory)(global, content.storyData.peerId, content.storyData.id) : content.webPage?.story ? (0,_stories__WEBPACK_IMPORTED_MODULE_12__.selectPeerStory)(global, content.webPage.story.peerId, content.webPage.story.id) : undefined;
  const isChatProtected = selectIsChatProtected(global, message.chatId);
  const isStoryForwardForbidden = story && ('isDeleted' in story || 'noForwards' in story && story.noForwards);
  const canForward = !isLocal && !isAction && !isChatProtected && !isStoryForwardForbidden && (message.isForwardingAllowed || isServiceNotification) && !hasTtl;
  return canForward;
}

// This selector is slow and not to be used within lists (e.g. Message component)
function selectAllowedMessageActionsSlow(global, message, threadId) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, message.chatId);
  if (!chat || chat.isRestricted) {
    return {};
  }
  const isPrivate = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserId)(chat.id);
  const isChatWithSelf = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectIsChatWithSelf)(global, message.chatId);
  const isBasicGroup = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatBasicGroup)(chat);
  const isSuperGroup = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatSuperGroup)(chat);
  const isChannel = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatChannel)(chat);
  const isBotChat = Boolean((0,_users__WEBPACK_IMPORTED_MODULE_16__.selectBot)(global, chat.id));
  const isLocal = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageLocal)(message);
  const isFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageFailed)(message);
  const isServiceNotification = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isServiceNotificationMessage)(message);
  const isOwn = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isOwnMessage)(message);
  const isForwarded = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isForwardedMessage)(message);
  const isAction = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isActionMessage)(message);
  const hasTtl = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.hasMessageTtl)(message);
  const {
    content
  } = message;
  const isDocumentSticker = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageDocumentSticker)(message);
  const isBoostMessage = message.content.action?.type === 'chatBoost';
  const hasChatPinPermission = chat.isCreator || !isChannel && !(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserRightBanned)(chat, 'pinMessages') || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'pinMessages');
  const hasPinPermission = isPrivate || hasChatPinPermission;

  // https://github.com/telegramdesktop/tdesktop/blob/335095a332607c41a8d20b47e61f5bbd66366d4b/Telegram/SourceFiles/data/data_peer.cpp#L653
  const canEditMessagesIndefinitely = (() => {
    if (isPrivate) return isChatWithSelf;
    if (isBasicGroup) return false;
    if (isSuperGroup) return hasChatPinPermission;
    if (isChannel) return chat.isCreator || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'editMessages');
    return false;
  })();
  const isMessageEditable = (canEditMessagesIndefinitely || (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_6__.getServerTime)() - message.date < (global.config?.editTimeLimit || Infinity)) && !(content.sticker || content.contact || content.pollId || content.action || content.video?.isRound || content.location || content.invoice || content.giveaway || content.giveawayResults || isDocumentSticker) && !isForwarded && !message.viaBotId && !chat.isForbidden;
  const isSavedDialog = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getIsSavedDialog)(chat.id, threadId, global.currentUserId);
  const canReply = selectCanReplyToMessage(global, message, threadId);
  const canReplyGlobally = canReply || !isSavedDialog && !isLocal && !isServiceNotification && (isSuperGroup || isBasicGroup || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatChannel)(chat));
  let canPin = !isLocal && !isServiceNotification && !isAction && hasPinPermission && !isSavedDialog;
  let canUnpin = false;
  const pinnedMessageIds = selectPinnedIds(global, chat.id, threadId);
  if (canPin) {
    canUnpin = Boolean(pinnedMessageIds && pinnedMessageIds.includes(message.id));
    canPin = !canUnpin;
  }
  const canNotDeleteBoostMessage = isBoostMessage && isOwn && !chat.isCreator && !(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'deleteMessages');
  const canDelete = (!isLocal || isFailed) && !isServiceNotification && !canNotDeleteBoostMessage && (isPrivate || isOwn || isBasicGroup || chat.isCreator || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'deleteMessages'));
  const canReport = !isPrivate && !isOwn;
  const canDeleteForAll = canDelete && !chat.isForbidden && (isPrivate && !isChatWithSelf && !isBotChat || isBasicGroup && (isOwn || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'deleteMessages') || chat.isCreator));
  const hasMessageEditRight = isOwn || isChannel && (chat.isCreator || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getHasAdminRight)(chat, 'editMessages'));
  const canEdit = !isLocal && !isAction && isMessageEditable && hasMessageEditRight;
  const hasSticker = Boolean(message.content.sticker);
  const hasFavoriteSticker = hasSticker && (0,_symbols__WEBPACK_IMPORTED_MODULE_13__.selectIsStickerFavorite)(global, message.content.sticker);
  const canFaveSticker = !isAction && hasSticker && !hasFavoriteSticker;
  const canUnfaveSticker = !isAction && hasFavoriteSticker;
  const canCopy = !isAction;
  const canCopyLink = !isLocal && !isAction && (isChannel || isSuperGroup);
  const canSelect = !isLocal && !isAction;
  const canDownload = Boolean(content.webPage?.document || content.webPage?.video || content.webPage?.photo || content.audio || content.voice || content.photo || content.video || content.document || content.sticker) && !hasTtl;
  const canSaveGif = message.content.video?.isGif;
  const poll = content.pollId ? selectPoll(global, content.pollId) : undefined;
  const canRevote = !poll?.summary.closed && !poll?.summary.quiz && poll?.results.results?.some(r => r.isChosen);
  const canClosePoll = hasMessageEditRight && poll && !poll.summary.closed && !isForwarded;
  const noOptions = [canReply, canReplyGlobally, canEdit, canPin, canUnpin, canReport, canDelete, canDeleteForAll, canFaveSticker, canUnfaveSticker, canCopy, canCopyLink, canSelect, canDownload, canSaveGif, canRevote, canClosePoll].every(ability => !ability);
  return {
    noOptions,
    canReply,
    canReplyGlobally,
    canEdit,
    canPin,
    canUnpin,
    canReport,
    canDelete,
    canDeleteForAll,
    canFaveSticker,
    canUnfaveSticker,
    canCopy,
    canCopyLink,
    canSelect,
    canDownload,
    canSaveGif,
    canRevote,
    canClosePoll
  };
}

// This selector always returns a new object which can not be safely used in shallow-equal checks
function selectCanDeleteSelectedMessages(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds: selectedMessageIds
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).selectedMessages || {};
  const {
    chatId,
    threadId
  } = selectCurrentMessageList(global, tabId) || {};
  const chatMessages = chatId && selectChatMessages(global, chatId);
  if (!chatMessages || !selectedMessageIds || !threadId) {
    return {};
  }
  if (selectedMessageIds.length > _config__WEBPACK_IMPORTED_MODULE_1__.API_GENERAL_ID_LIMIT) return {};
  const messageActions = selectedMessageIds.map(id => chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId)).filter(Boolean);
  return {
    canDelete: messageActions.every(actions => actions.canDelete),
    canDeleteForAll: messageActions.every(actions => actions.canDeleteForAll)
  };
}
function selectCanReportSelectedMessages(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds: selectedMessageIds
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).selectedMessages || {};
  const {
    chatId,
    threadId
  } = selectCurrentMessageList(global, tabId) || {};
  const chatMessages = chatId && selectChatMessages(global, chatId);
  if (!chatMessages || !selectedMessageIds || !threadId) {
    return false;
  }
  const messageActions = selectedMessageIds.map(id => chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId)).filter(Boolean);
  return messageActions.every(actions => actions.canReport);
}
function selectCanDownloadSelectedMessages(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds: selectedMessageIds
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).selectedMessages || {};
  const {
    chatId,
    threadId
  } = selectCurrentMessageList(global, tabId) || {};
  const chatMessages = chatId && selectChatMessages(global, chatId);
  if (!chatMessages || !selectedMessageIds || !threadId) {
    return false;
  }
  const messageActions = selectedMessageIds.map(id => chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId)).filter(Boolean);
  return messageActions.some(actions => actions.canDownload);
}
function selectActiveDownloads(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).activeDownloads;
}
function selectUploadProgress(global, message) {
  return global.fileUploads.byMessageKey[(0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageKey)(message)]?.progress;
}
function selectRealLastReadId(global, chatId, threadId) {
  if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
    const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
    if (!chat) {
      return undefined;
    }

    // `lastReadInboxMessageId` is empty for new chats
    if (!chat.lastReadInboxMessageId) {
      return undefined;
    }
    const lastMessageId = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChatLastMessageId)(global, chatId);
    if (!lastMessageId || chat.unreadCount) {
      return chat.lastReadInboxMessageId;
    }
    return lastMessageId;
  } else {
    const threadInfo = selectThreadInfo(global, chatId, threadId);
    if (!threadInfo) {
      return undefined;
    }
    if (!threadInfo.lastReadInboxMessageId) {
      return Number(threadInfo.threadId);
    }

    // Some previously read messages may be deleted
    return Math.min(threadInfo.lastReadInboxMessageId, threadInfo.lastMessageId || Infinity);
  }
}
function selectFirstUnreadId(global, chatId, threadId) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  if (threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID) {
    if (!chat) {
      return undefined;
    }
  } else {
    const threadInfo = selectThreadInfo(global, chatId, threadId);
    if (!threadInfo || threadInfo.lastMessageId !== undefined && threadInfo.lastMessageId === threadInfo.lastReadInboxMessageId) {
      return undefined;
    }
  }
  const outlyingLists = selectOutlyingLists(global, chatId, threadId);
  const listedIds = selectListedIds(global, chatId, threadId);
  const byId = selectChatMessages(global, chatId);
  if (!byId || !(outlyingLists?.length || listedIds)) {
    return undefined;
  }
  const lastReadId = selectRealLastReadId(global, chatId, threadId);
  if (!lastReadId && chat && chat.isNotJoined) {
    return undefined;
  }
  const lastReadServiceNotificationId = chatId === _config__WEBPACK_IMPORTED_MODULE_1__.SERVICE_NOTIFICATIONS_USER_ID ? global.serviceNotifications.reduce((max, notification) => {
    return !notification.isUnread && notification.id > max ? notification.id : max;
  }, -1) : -1;
  function findAfterLastReadId(listIds) {
    return listIds.find(id => {
      return (!lastReadId || id > lastReadId) && byId[id]
      // For some reason outgoing topic actions are not marked as read, thus we need to mark them as read
      // when the edit message hits the viewport
      && (!byId[id].isOutgoing || byId[id].content.action?.isTopicAction || byId[id].isFromScheduled) && id > lastReadServiceNotificationId;
    });
  }
  if (outlyingLists?.length) {
    const found = outlyingLists.map(list => findAfterLastReadId(list)).filter(Boolean)[0];
    if (found) {
      return found;
    }
  }
  if (listedIds) {
    const found = findAfterLastReadId(listedIds);
    if (found) {
      return found;
    }
  }
  return undefined;
}
function selectIsForwardModalOpen(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    isShareMessageModalShown
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId);
  return Boolean(isShareMessageModalShown);
}
function selectCommonBoxChatId(global, messageId) {
  const fromLastMessage = Object.values(global.chats.byId).find(chat => (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isCommonBoxChat)(chat) && (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChatLastMessageId)(global, chat.id) === messageId);
  if (fromLastMessage) {
    return fromLastMessage.id;
  }
  const {
    byChatId
  } = global.messages;
  return Object.keys(byChatId).find(chatId => {
    const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
    return chat && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isCommonBoxChat)(chat) && byChatId[chat.id].byId[messageId];
  });
}
function selectIsInSelectMode(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    selectedMessages
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId);
  return Boolean(selectedMessages);
}
function selectIsMessageSelected(global, messageId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).selectedMessages || {};
  if (!messageIds) {
    return false;
  }
  return messageIds.includes(messageId);
}
function selectForwardedMessageIdsByGroupId(global, chatId, groupedId) {
  const chatMessages = selectChatMessages(global, chatId);
  if (!chatMessages) {
    return undefined;
  }
  return Object.values(chatMessages).filter(message => message.groupedId === groupedId && message.forwardInfo).map(({
    forwardInfo
  }) => forwardInfo.fromMessageId);
}
function selectMessageIdsByGroupId(global, chatId, groupedId) {
  const chatMessages = selectChatMessages(global, chatId);
  if (!chatMessages) {
    return undefined;
  }
  return Object.keys(chatMessages).map(Number).filter(id => chatMessages[id].groupedId === groupedId);
}
function selectIsDocumentGroupSelected(global, chatId, groupedId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds: selectedIds
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).selectedMessages || {};
  if (!selectedIds) {
    return false;
  }
  const groupIds = selectMessageIdsByGroupId(global, chatId, groupedId);
  return groupIds && groupIds.every(id => selectedIds.includes(id));
}
function selectSelectedMessagesCount(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).selectedMessages || {};
  return messageIds ? messageIds.length : 0;
}
function selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId = _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  if (!chat) {
    return undefined;
  }
  const chatMessages = selectChatMessages(global, chatId);
  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);
  if (!chatMessages || !viewportIds) {
    return undefined;
  }
  const messageId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.findLast)(viewportIds, id => {
    const message = chatMessages[id];
    return message && selectShouldDisplayReplyKeyboard(global, message);
  });
  const replyHideMessageId = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.findLast)(viewportIds, id => {
    const message = chatMessages[id];
    return message && selectShouldHideReplyKeyboard(global, message);
  });
  if (messageId && replyHideMessageId && replyHideMessageId > messageId) {
    return undefined;
  }
  return messageId ? chatMessages[messageId] : undefined;
}
function selectShouldHideReplyKeyboard(global, message) {
  const {
    shouldHideKeyboardButtons,
    isHideKeyboardSelective,
    isMentioned
  } = message;
  if (!shouldHideKeyboardButtons) return false;
  const replyToMessageId = (0,_helpers_replies__WEBPACK_IMPORTED_MODULE_9__.getMessageReplyInfo)(message)?.replyToMsgId;
  if (isHideKeyboardSelective) {
    if (isMentioned) return true;
    if (!replyToMessageId) return false;
    const replyMessage = selectChatMessage(global, message.chatId, replyToMessageId);
    return Boolean(replyMessage?.senderId === global.currentUserId);
  }
  return true;
}
function selectShouldDisplayReplyKeyboard(global, message) {
  const {
    keyboardButtons,
    shouldHideKeyboardButtons,
    isKeyboardSelective,
    isMentioned
  } = message;
  if (!keyboardButtons || shouldHideKeyboardButtons) return false;
  const replyToMessageId = (0,_helpers_replies__WEBPACK_IMPORTED_MODULE_9__.getMessageReplyInfo)(message)?.replyToMsgId;
  if (isKeyboardSelective) {
    if (isMentioned) return true;
    if (!replyToMessageId) return false;
    const replyMessage = selectChatMessage(global, message.chatId, replyToMessageId);
    return Boolean(replyMessage?.senderId === global.currentUserId);
  }
  return true;
}
function selectCanAutoLoadMedia(global, message) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, message.chatId);
  if (!chat) {
    return undefined;
  }
  const sender = 'id' in message ? selectSender(global, message) : undefined;
  const isPhoto = Boolean((0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessagePhoto)(message) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessageWebPagePhoto)(message));
  const isVideo = Boolean((0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessageVideo)(message) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessageWebPageVideo)(message));
  const isFile = Boolean((0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessageAudio)(message) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessageVoice)(message) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessageDocument)(message));
  const {
    canAutoLoadPhotoFromContacts,
    canAutoLoadPhotoInPrivateChats,
    canAutoLoadPhotoInGroups,
    canAutoLoadPhotoInChannels,
    canAutoLoadVideoFromContacts,
    canAutoLoadVideoInPrivateChats,
    canAutoLoadVideoInGroups,
    canAutoLoadVideoInChannels,
    canAutoLoadFileFromContacts,
    canAutoLoadFileInPrivateChats,
    canAutoLoadFileInGroups,
    canAutoLoadFileInChannels
  } = global.settings.byKey;
  if (isPhoto) {
    return canAutoLoadMedia({
      global,
      chat,
      sender,
      canAutoLoadMediaFromContacts: canAutoLoadPhotoFromContacts,
      canAutoLoadMediaInPrivateChats: canAutoLoadPhotoInPrivateChats,
      canAutoLoadMediaInGroups: canAutoLoadPhotoInGroups,
      canAutoLoadMediaInChannels: canAutoLoadPhotoInChannels
    });
  }
  if (isVideo) {
    return canAutoLoadMedia({
      global,
      chat,
      sender,
      canAutoLoadMediaFromContacts: canAutoLoadVideoFromContacts,
      canAutoLoadMediaInPrivateChats: canAutoLoadVideoInPrivateChats,
      canAutoLoadMediaInGroups: canAutoLoadVideoInGroups,
      canAutoLoadMediaInChannels: canAutoLoadVideoInChannels
    });
  }
  if (isFile) {
    return canAutoLoadMedia({
      global,
      chat,
      sender,
      canAutoLoadMediaFromContacts: canAutoLoadFileFromContacts,
      canAutoLoadMediaInPrivateChats: canAutoLoadFileInPrivateChats,
      canAutoLoadMediaInGroups: canAutoLoadFileInGroups,
      canAutoLoadMediaInChannels: canAutoLoadFileInChannels
    });
  }
  return true;
}
function canAutoLoadMedia({
  global,
  chat,
  sender,
  canAutoLoadMediaFromContacts,
  canAutoLoadMediaInPrivateChats,
  canAutoLoadMediaInGroups,
  canAutoLoadMediaInChannels
}) {
  const isMediaFromContact = Boolean(sender && ((0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectIsChatWithSelf)(global, sender.id) || (0,_users__WEBPACK_IMPORTED_MODULE_16__.selectUser)(global, sender.id)?.isContact));
  return Boolean(isMediaFromContact && canAutoLoadMediaFromContacts || !isMediaFromContact && canAutoLoadMediaInPrivateChats && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserId)(chat.id) || canAutoLoadMediaInGroups && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatGroup)(chat) || canAutoLoadMediaInChannels && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isChatChannel)(chat));
}
function selectLastServiceNotification(global) {
  const {
    serviceNotifications
  } = global;
  const maxId = Math.max(...serviceNotifications.map(({
    id
  }) => id));
  return serviceNotifications.find(({
    id,
    isDeleted
  }) => !isDeleted && id === maxId);
}
function selectIsMessageProtected(global, message) {
  return Boolean(message && (message.isProtected || selectIsChatProtected(global, message.chatId) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.hasMessageTtl)(message) || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessagePaidMedia)(message)));
}
function selectIsChatProtected(global, chatId) {
  return (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId)?.isProtected || false;
}
function selectHasProtectedMessage(global, chatId, messageIds) {
  if ((0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId)?.isProtected) {
    return true;
  }
  if (!messageIds) {
    return false;
  }
  const messages = selectChatMessages(global, chatId);
  return messageIds.some(messageId => messages[messageId]?.isProtected);
}
function selectCanForwardMessages(global, chatId, messageIds) {
  if ((0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId)?.isProtected) {
    return false;
  }
  if (!messageIds) {
    return false;
  }
  const messages = selectChatMessages(global, chatId);
  return messageIds.map(id => messages[id]).every(message => message && !(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.hasMessageTtl)(message) && (message.isForwardingAllowed || (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isServiceNotificationMessage)(message)));
}
function selectSponsoredMessage(global, chatId) {
  const message = global.messages.sponsoredByChatId[chatId];
  return message && message.expiresAt >= Math.round(Date.now() / 1000) ? message : undefined;
}
function selectDefaultReaction(global, chatId) {
  if (chatId === _config__WEBPACK_IMPORTED_MODULE_1__.SERVICE_NOTIFICATIONS_USER_ID) return undefined;
  const isPrivate = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserId)(chatId);
  const defaultReaction = global.config?.defaultReaction;
  if (!defaultReaction) {
    return undefined;
  }
  if (isPrivate) {
    return defaultReaction;
  }
  const chatReactions = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChatFullInfo)(global, chatId)?.enabledReactions;
  if (!chatReactions || !(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.canSendReaction)(defaultReaction, chatReactions)) {
    return undefined;
  }
  return defaultReaction;
}
function selectMaxUserReactions(global) {
  const isPremium = (0,_users__WEBPACK_IMPORTED_MODULE_16__.selectIsCurrentUserPremium)(global);
  const {
    maxUserReactionsPremium = 3,
    maxUserReactionsDefault = 1
  } = global.appConfig || {};
  return isPremium ? maxUserReactionsPremium : maxUserReactionsDefault;
}

// Slow, not to be used in `withGlobal`
function selectVisibleUsers(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    chatId,
    threadId
  } = selectCurrentMessageList(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  const messageIds = selectTabThreadParam(global, chatId, threadId, 'viewportIds', tabId);
  if (!messageIds) {
    return undefined;
  }
  return messageIds.map(messageId => {
    const {
      senderId
    } = selectChatMessage(global, chatId, messageId) || {};
    return senderId ? (0,_users__WEBPACK_IMPORTED_MODULE_16__.selectUser)(global, senderId) : undefined;
  }).filter(Boolean);
}
function selectShouldSchedule(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  return selectCurrentMessageList(global, tabId)?.type === 'scheduled';
}
function selectCanScheduleUntilOnline(global, id) {
  const isChatWithSelf = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectIsChatWithSelf)(global, id);
  const chatBot = (0,_users__WEBPACK_IMPORTED_MODULE_16__.selectBot)(global, id);
  return Boolean(!isChatWithSelf && !chatBot && (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isUserId)(id) && (0,_users__WEBPACK_IMPORTED_MODULE_16__.selectUserStatus)(global, id)?.wasOnline);
}
function selectCustomEmojis(message) {
  const entities = message.content.text?.entities;
  return entities?.filter(entity => entity.type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji);
}
function selectMessageCustomEmojiSets(global, message) {
  const customEmojis = selectCustomEmojis(message);
  if (!customEmojis) return _util_memo__WEBPACK_IMPORTED_MODULE_5__.MEMO_EMPTY_ARRAY;
  const documents = customEmojis.map(entity => global.customEmojis.byId[entity.documentId]);
  // If some emoji still loading, do not return empty array
  if (!documents.every(Boolean)) return undefined;
  const sets = documents.map(doc => doc.stickerSetInfo);
  return sets.reduce((acc, set) => {
    if ('shortName' in set) {
      if (acc.some(s => 'shortName' in s && s.shortName === set.shortName)) {
        return acc;
      }
    }
    if ('id' in set) {
      if (acc.some(s => 'id' in s && s.id === set.id)) {
        return acc;
      }
    }
    acc.push(set); // Optimization
    return acc;
  }, []);
}
function selectForwardsContainVoiceMessages(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds,
    fromChatId
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).forwardMessages;
  if (!messageIds) return false;
  const chatMessages = selectChatMessages(global, fromChatId);
  return messageIds.some(messageId => {
    const message = chatMessages[messageId];
    return Boolean(message.content.voice) || Boolean(message.content.video?.isRound);
  });
}
function selectChatTranslations(global, chatId) {
  return global.translations.byChatId[chatId];
}
function selectMessageTranslations(global, chatId, toLanguageCode) {
  return selectChatTranslations(global, chatId)?.byLangCode[toLanguageCode] || {};
}
function selectRequestedMessageTranslationLanguage(global, chatId, messageId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const requestedInChat = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).requestedTranslations.byChatId[chatId];
  return requestedInChat?.toLanguage || requestedInChat?.manualMessages?.[messageId];
}
function selectReplyCanBeSentToChat(global, toChatId, fromChatId, replyInfo) {
  if (!replyInfo.replyToMsgId) return false;
  const fromRealChatId = replyInfo?.replyToPeerId ?? fromChatId;
  if (toChatId === fromRealChatId) return true;
  const chatMessages = selectChatMessages(global, fromRealChatId);
  const message = chatMessages[replyInfo.replyToMsgId];
  return !(0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isExpiredMessage)(message);
}
function selectForwardsCanBeSentToChat(global, toChatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    messageIds,
    storyId,
    fromChatId
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_14__.selectTabState)(global, tabId).forwardMessages;
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, toChatId);
  if (!messageIds && !storyId || !chat) return false;
  if (storyId) {
    return true;
  }
  const chatFullInfo = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChatFullInfo)(global, toChatId);
  const chatMessages = selectChatMessages(global, fromChatId);
  const options = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getAllowedAttachmentOptions)(chat, chatFullInfo);
  return !messageIds.some(messageId => сheckMessageSendingDenied(chatMessages[messageId], options));
}
function сheckMessageSendingDenied(message, options) {
  const isVoice = message.content.voice;
  const isRoundVideo = message.content.video?.isRound;
  const isPhoto = message.content.photo;
  const isGif = message.content.video?.isGif;
  const isVideo = message.content.video && !isRoundVideo && !isGif;
  const isAudio = message.content.audio;
  const isDocument = message.content.document;
  const isSticker = message.content.sticker;
  const isPlainText = message.content.text && !isVoice && !isRoundVideo && !isSticker && !isDocument && !isAudio && !isVideo && !isPhoto && !isGif;
  return isVoice && !options.canSendVoices || isRoundVideo && !options.canSendRoundVideos || isSticker && !options.canSendStickers || isDocument && !options.canSendDocuments || isAudio && !options.canSendAudios || isVideo && !options.canSendVideos || isPhoto && !options.canSendPhotos || isGif && !options.canSendGifs || isPlainText && !options.canSendPlainText;
}
function selectCanTranslateMessage(global, message, detectedLanguage, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_2__.getCurrentTabId)()]) {
  const {
    canTranslate: isTranslationEnabled,
    doNotTranslate
  } = global.settings.byKey;
  const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);
  const isTranslatable = (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.isMessageTranslatable)(message);

  // Separate translations are disabled when chat translation enabled
  const chatRequestedLanguage = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectRequestedChatTranslationLanguage)(global, message.chatId, tabId);
  return _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_TRANSLATION_SUPPORTED && isTranslationEnabled && canTranslateLanguage && isTranslatable && !chatRequestedLanguage;
}
function selectTopicLink(global, chatId, topicId) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  if (!chat || !chat?.isForum) {
    return undefined;
  }
  return (0,_helpers__WEBPACK_IMPORTED_MODULE_8__.getMessageLink)(chat, topicId);
}
function selectMessageReplyInfo(global, chatId, threadId, additionalReplyInfo) {
  const chat = (0,_chats__WEBPACK_IMPORTED_MODULE_10__.selectChat)(global, chatId);
  if (!chat) return undefined;
  const isMainThread = threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
  if (!additionalReplyInfo && isMainThread) return undefined;
  const replyInfo = {
    type: 'message',
    ...additionalReplyInfo,
    replyToMsgId: additionalReplyInfo?.replyToMsgId || Number(threadId),
    replyToTopId: additionalReplyInfo?.replyToTopId || (!isMainThread ? Number(threadId) : undefined)
  };
  return replyInfo;
}

/***/ }),

/***/ "./src/global/selectors/middleSearch.ts":
/*!**********************************************!*\
  !*** ./src/global/selectors/middleSearch.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectChatMediaSearch: () => (/* binding */ selectChatMediaSearch),
/* harmony export */   selectCurrentChatMediaSearch: () => (/* binding */ selectCurrentChatMediaSearch),
/* harmony export */   selectCurrentMiddleSearch: () => (/* binding */ selectCurrentMiddleSearch),
/* harmony export */   selectCurrentSharedMediaSearch: () => (/* binding */ selectCurrentSharedMediaSearch)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _helpers_middleSearch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/middleSearch */ "./src/global/helpers/middleSearch.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages */ "./src/global/selectors/messages.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");




function selectCurrentMiddleSearch(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    chatId,
    threadId
  } = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  const chatThreadKey = (0,_helpers_middleSearch__WEBPACK_IMPORTED_MODULE_1__.buildChatThreadKey)(chatId, threadId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).middleSearch.byChatThreadKey[chatThreadKey];
}
function selectCurrentSharedMediaSearch(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    chatId,
    threadId
  } = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  const chatThreadKey = (0,_helpers_middleSearch__WEBPACK_IMPORTED_MODULE_1__.buildChatThreadKey)(chatId, threadId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).sharedMediaSearch.byChatThreadKey[chatThreadKey];
}
function selectCurrentChatMediaSearch(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    chatId,
    threadId
  } = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.selectCurrentMessageList)(global, tabId) || {};
  if (!chatId || !threadId) {
    return undefined;
  }
  const chatThreadKey = (0,_helpers_middleSearch__WEBPACK_IMPORTED_MODULE_1__.buildChatThreadKey)(chatId, threadId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).chatMediaSearch.byChatThreadKey[chatThreadKey];
}
function selectChatMediaSearch(global, chatId, threadId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  if (!chatId || !threadId) {
    return undefined;
  }
  const chatThreadKey = (0,_helpers_middleSearch__WEBPACK_IMPORTED_MODULE_1__.buildChatThreadKey)(chatId, threadId);
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).chatMediaSearch.byChatThreadKey[chatThreadKey];
}

/***/ }),

/***/ "./src/global/selectors/payments.ts":
/*!******************************************!*\
  !*** ./src/global/selectors/payments.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectPaymentForm: () => (/* binding */ selectPaymentForm),
/* harmony export */   selectPaymentInputInvoice: () => (/* binding */ selectPaymentInputInvoice),
/* harmony export */   selectPaymentRequestId: () => (/* binding */ selectPaymentRequestId),
/* harmony export */   selectProviderPublicToken: () => (/* binding */ selectProviderPublicToken),
/* harmony export */   selectProviderPublishableKey: () => (/* binding */ selectProviderPublishableKey),
/* harmony export */   selectSmartGlocalCredentials: () => (/* binding */ selectSmartGlocalCredentials),
/* harmony export */   selectStarsPayment: () => (/* binding */ selectStarsPayment),
/* harmony export */   selectStripeCredentials: () => (/* binding */ selectStripeCredentials)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");


function selectPaymentInputInvoice(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment.inputInvoice;
}
function selectPaymentForm(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment.form;
}
function selectStarsPayment(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).starsPayment;
}
function selectPaymentRequestId(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment.requestId;
}
function selectProviderPublishableKey(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment.form?.nativeParams.publishableKey;
}
function selectProviderPublicToken(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment.form?.nativeParams.publicToken;
}
function selectStripeCredentials(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment.stripeCredentials;
}
function selectSmartGlocalCredentials(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_1__.selectTabState)(global, tabId).payment.smartGlocalCredentials;
}

/***/ }),

/***/ "./src/global/selectors/peers.ts":
/*!***************************************!*\
  !*** ./src/global/selectors/peers.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectCanGift: () => (/* binding */ selectCanGift),
/* harmony export */   selectPeer: () => (/* binding */ selectPeer),
/* harmony export */   selectPeerPhotos: () => (/* binding */ selectPeerPhotos)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chats */ "./src/global/selectors/chats.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./users */ "./src/global/selectors/users.ts");



function selectPeer(global, peerId) {
  return (0,_users__WEBPACK_IMPORTED_MODULE_2__.selectUser)(global, peerId) || (0,_chats__WEBPACK_IMPORTED_MODULE_1__.selectChat)(global, peerId);
}
function selectPeerPhotos(global, peerId) {
  return global.peers.profilePhotosById[peerId];
}
function selectCanGift(global, peerId) {
  const bot = (0,_users__WEBPACK_IMPORTED_MODULE_2__.selectBot)(global, peerId);
  const user = (0,_users__WEBPACK_IMPORTED_MODULE_2__.selectUser)(global, peerId);
  const areStarGiftsAvailable = (0,_chats__WEBPACK_IMPORTED_MODULE_1__.selectChatFullInfo)(global, peerId)?.areStarGiftsAvailable || user;
  return Boolean(!(0,_users__WEBPACK_IMPORTED_MODULE_2__.selectIsPremiumPurchaseBlocked)(global) && !bot && peerId !== _config__WEBPACK_IMPORTED_MODULE_0__.SERVICE_NOTIFICATIONS_USER_ID && areStarGiftsAvailable);
}

/***/ }),

/***/ "./src/global/selectors/settings.ts":
/*!******************************************!*\
  !*** ./src/global/selectors/settings.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectCanSetPasscode: () => (/* binding */ selectCanSetPasscode),
/* harmony export */   selectLanguageCode: () => (/* binding */ selectLanguageCode),
/* harmony export */   selectNewNoncontactPeersRequirePremium: () => (/* binding */ selectNewNoncontactPeersRequirePremium),
/* harmony export */   selectNotifyExceptions: () => (/* binding */ selectNotifyExceptions),
/* harmony export */   selectNotifySettings: () => (/* binding */ selectNotifySettings),
/* harmony export */   selectShouldHideReadMarks: () => (/* binding */ selectShouldHideReadMarks),
/* harmony export */   selectTranslationLanguage: () => (/* binding */ selectTranslationLanguage)
/* harmony export */ });
function selectNotifySettings(global) {
  return global.settings.byKey;
}
function selectNotifyExceptions(global) {
  return global.settings.notifyExceptions;
}
function selectLanguageCode(global) {
  return global.settings.byKey.language.replace('-raw', '');
}
function selectCanSetPasscode(global) {
  return global.authRememberMe && global.isCacheApiSupported;
}
function selectTranslationLanguage(global) {
  return global.settings.byKey.translationLanguage || selectLanguageCode(global);
}
function selectNewNoncontactPeersRequirePremium(global) {
  return global.settings.byKey.shouldNewNonContactPeersRequirePremium;
}
function selectShouldHideReadMarks(global) {
  return global.settings.byKey.shouldHideReadMarks;
}

/***/ }),

/***/ "./src/global/selectors/statistics.ts":
/*!********************************************!*\
  !*** ./src/global/selectors/statistics.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectIsStatisticsShown: () => (/* binding */ selectIsStatisticsShown),
/* harmony export */   selectStatistics: () => (/* binding */ selectStatistics)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _chats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chats */ "./src/global/selectors/chats.ts");
/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages */ "./src/global/selectors/messages.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");




function selectStatistics(global, chatId, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).statistics.byChatId[chatId];
}
function selectIsStatisticsShown(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  if (!(0,_tabs__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global, tabId).isStatisticsShown) {
    return false;
  }
  const {
    chatId: currentChatId
  } = (0,_messages__WEBPACK_IMPORTED_MODULE_2__.selectCurrentMessageList)(global, tabId) || {};
  return currentChatId ? (0,_chats__WEBPACK_IMPORTED_MODULE_1__.selectChatFullInfo)(global, currentChatId)?.canViewStatistics : undefined;
}

/***/ }),

/***/ "./src/global/selectors/stories.ts":
/*!*****************************************!*\
  !*** ./src/global/selectors/stories.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectCurrentViewedStory: () => (/* binding */ selectCurrentViewedStory),
/* harmony export */   selectIsStoryViewerOpen: () => (/* binding */ selectIsStoryViewerOpen),
/* harmony export */   selectPeerFirstStoryId: () => (/* binding */ selectPeerFirstStoryId),
/* harmony export */   selectPeerFirstUnreadStoryId: () => (/* binding */ selectPeerFirstUnreadStoryId),
/* harmony export */   selectPeerStories: () => (/* binding */ selectPeerStories),
/* harmony export */   selectPeerStory: () => (/* binding */ selectPeerStory),
/* harmony export */   selectPinnedStories: () => (/* binding */ selectPinnedStories),
/* harmony export */   selectStoryListForViewer: () => (/* binding */ selectStoryListForViewer)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _peers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./peers */ "./src/global/selectors/peers.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");



function selectCurrentViewedStory(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    storyViewer: {
      peerId,
      storyId
    }
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId);
  return {
    peerId,
    storyId
  };
}
function selectIsStoryViewerOpen(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  const {
    peerId,
    storyId
  } = selectCurrentViewedStory(global, tabId);
  return Boolean(peerId) && Boolean(storyId);
}
function selectPeerStories(global, peerId) {
  return global.stories.byPeerId[peerId];
}
function selectPeerStory(global, peerId, storyId) {
  return selectPeerStories(global, peerId)?.byId[storyId];
}
function selectPinnedStories(global, peerId) {
  const stories = selectPeerStories(global, peerId);
  if (!stories?.pinnedIds?.length) return undefined;
  return stories.pinnedIds.map(id => stories.byId[id]).filter(s => s && 'isInProfile' in s && s.isInProfile);
}
function selectPeerFirstUnreadStoryId(global, peerId) {
  const peerStories = selectPeerStories(global, peerId);
  if (!peerStories) {
    return undefined;
  }
  if (!peerStories.lastReadId) {
    return peerStories.orderedIds?.[0];
  }
  const lastReadIndex = peerStories.orderedIds.findIndex(id => id === peerStories.lastReadId);
  return peerStories.orderedIds?.[lastReadIndex + 1];
}
function selectPeerFirstStoryId(global, peerId) {
  return selectPeerStories(global, peerId)?.orderedIds?.[0];
}
function selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive) {
  const currentStoryId = storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId);
  if (!currentStoryId) {
    return undefined;
  }
  if (isSingleStory) {
    return {
      peerIds: [peerId],
      storyIdsByPeerId: {
        [peerId]: [currentStoryId]
      }
    };
  }
  const peer = (0,_peers__WEBPACK_IMPORTED_MODULE_1__.selectPeer)(global, peerId);
  const story = selectPeerStory(global, peerId, currentStoryId);
  if (!peer || !story) {
    return undefined;
  }
  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;
  if (isSinglePeer) {
    const storyIds = getPeerStoryIdsForViewer(global, peerId, isUnread, isArchive, isPrivate);
    return storyIds?.length ? {
      peerIds: [peerId],
      storyIdsByPeerId: {
        [peerId]: storyIds
      }
    } : undefined;
  }
  const {
    orderedPeerIds: {
      active,
      archived
    }
  } = global.stories;
  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];
  const peerIds = [];
  const storyIdsByPeerId = {};
  for (const currentPeerId of orderedPeerIds) {
    const storyIds = getPeerStoryIdsForViewer(global, currentPeerId, isUnread, isArchive, isPrivate);
    if (storyIds?.length) {
      peerIds.push(currentPeerId);
      storyIdsByPeerId[currentPeerId] = storyIds;
    }
  }
  return peerIds.length ? {
    peerIds,
    storyIdsByPeerId
  } : undefined;
}
function getPeerStoryIdsForViewer(global, peerId, isUnread, isArchive, isPrivate) {
  const peerStories = selectPeerStories(global, peerId);
  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'profileIds' : 'orderedIds';
  const storyIds = peerStories?.[storySourceProp];
  if (!peerStories || !storyIds?.length) {
    return undefined;
  }
  if (!peerStories.lastReadId || !isUnread) {
    return storyIds.slice();
  }
  const lastReadIndex = storyIds.indexOf(peerStories.lastReadId);
  return storyIds.length > lastReadIndex + 1 ? storyIds.slice(lastReadIndex + 1) : undefined;
}

/***/ }),

/***/ "./src/global/selectors/symbols.ts":
/*!*****************************************!*\
  !*** ./src/global/selectors/symbols.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectAnimatedEmoji: () => (/* binding */ selectAnimatedEmoji),
/* harmony export */   selectAnimatedEmojiEffect: () => (/* binding */ selectAnimatedEmojiEffect),
/* harmony export */   selectAnimatedEmojiSound: () => (/* binding */ selectAnimatedEmojiSound),
/* harmony export */   selectCurrentGifSearch: () => (/* binding */ selectCurrentGifSearch),
/* harmony export */   selectCurrentStickerSearch: () => (/* binding */ selectCurrentStickerSearch),
/* harmony export */   selectCustomEmojiForEmoji: () => (/* binding */ selectCustomEmojiForEmoji),
/* harmony export */   selectCustomEmojiForEmojis: () => (/* binding */ selectCustomEmojiForEmojis),
/* harmony export */   selectGiftStickerForDuration: () => (/* binding */ selectGiftStickerForDuration),
/* harmony export */   selectGiftStickerForStars: () => (/* binding */ selectGiftStickerForStars),
/* harmony export */   selectIsAlwaysHighPriorityEmoji: () => (/* binding */ selectIsAlwaysHighPriorityEmoji),
/* harmony export */   selectIsSetPremium: () => (/* binding */ selectIsSetPremium),
/* harmony export */   selectIsStickerFavorite: () => (/* binding */ selectIsStickerFavorite),
/* harmony export */   selectRestrictedEmoji: () => (/* binding */ selectRestrictedEmoji),
/* harmony export */   selectStickerSet: () => (/* binding */ selectStickerSet),
/* harmony export */   selectStickersForEmoji: () => (/* binding */ selectStickersForEmoji)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");
/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./users */ "./src/global/selectors/users.ts");





// https://github.com/DrKLO/Telegram/blob/c319639e9a4dff2f22da6762dcebd12d49f5afa1/TMessagesProj/src/main/java/org/telegram/ui/Components/Premium/boosts/cells/msg/GiveawayMessageCell.java#L59
const MONTH_EMOTICON = {
  1: `${1}\u{FE0F}\u20E3`,
  3: `${2}\u{FE0F}\u20E3`,
  6: `${3}\u{FE0F}\u20E3`,
  12: `${4}\u{FE0F}\u20E3`,
  24: `${5}\u{FE0F}\u20E3`
};
const STAR_EMOTICON = {
  1000: `${2}\u{FE0F}\u20E3`,
  2500: `${3}\u{FE0F}\u20E3`,
  5000: `${4}\u{FE0F}\u20E3`
};
function selectIsStickerFavorite(global, sticker) {
  const {
    stickers
  } = global.stickers.favorite;
  return stickers && stickers.some(({
    id
  }) => id === sticker.id);
}
function selectCurrentStickerSearch(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).stickerSearch;
}
function selectCurrentGifSearch(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global, tabId).gifSearch;
}
function selectStickerSet(global, id) {
  if (typeof id === 'string') {
    return global.stickers.setsById[id];
  }
  if ('id' in id) {
    return global.stickers.setsById[id.id];
  }
  if ('isMissing' in id) return undefined;
  return Object.values(global.stickers.setsById).find(({
    shortName
  }) => shortName.toLowerCase() === id.shortName.toLowerCase());
}
function selectStickersForEmoji(global, emoji) {
  const addedSets = global.stickers.added.setIds;
  let stickersForEmoji = [];
  // Favorites
  global.stickers.favorite.stickers.forEach(sticker => {
    if (sticker.emoji === emoji) stickersForEmoji.push(sticker);
  });

  // Added sets
  addedSets?.forEach(id => {
    const packs = global.stickers.setsById[id].packs;
    if (!packs) {
      return;
    }
    stickersForEmoji = stickersForEmoji.concat(packs[emoji] || [], packs[cleanEmoji(emoji)] || []);
  });
  return stickersForEmoji;
}
function selectCustomEmojiForEmoji(global, emoji) {
  const isCurrentUserPremium = (0,_users__WEBPACK_IMPORTED_MODULE_3__.selectIsCurrentUserPremium)(global);
  const addedCustomSets = global.customEmojis.added.setIds;
  let customEmojiForEmoji = [];

  // Added sets
  addedCustomSets?.forEach(id => {
    const packs = global.stickers.setsById[id].packs;
    if (!packs) {
      return;
    }
    customEmojiForEmoji = customEmojiForEmoji.concat(packs[emoji] || [], packs[cleanEmoji(emoji)] || []);
  });
  return isCurrentUserPremium ? customEmojiForEmoji : customEmojiForEmoji.filter(({
    isFree
  }) => isFree);
}

// Slow, not to be used in `withGlobal`
function selectCustomEmojiForEmojis(global, emojis) {
  const isCurrentUserPremium = (0,_users__WEBPACK_IMPORTED_MODULE_3__.selectIsCurrentUserPremium)(global);
  const addedCustomSets = global.customEmojis.added.setIds;
  let customEmojiForEmoji = [];

  // Added sets
  addedCustomSets?.forEach(id => {
    const packs = global.stickers.setsById[id].packs;
    if (!packs) {
      return;
    }
    const customEmojis = Object.entries(packs).filter(([emoji]) => emojis.includes(emoji) || emojis.includes(cleanEmoji(emoji))).flatMap(([, stickers]) => stickers);
    customEmojiForEmoji = customEmojiForEmoji.concat(customEmojis);
  });
  return isCurrentUserPremium ? customEmojiForEmoji : customEmojiForEmoji.filter(({
    isFree
  }) => isFree);
}
function selectIsSetPremium(stickerSet) {
  return stickerSet.isEmoji && stickerSet.stickers?.some(sticker => !sticker.isFree);
}
function cleanEmoji(emoji) {
  // Some emojis (❤️ for example) with a service symbol 'VARIATION SELECTOR-16' are not recognized as animated
  return emoji.replace('\ufe0f', '');
}
function selectAnimatedEmoji(global, emoji) {
  const {
    animatedEmojis
  } = global;
  if (!animatedEmojis || !animatedEmojis.stickers) {
    return undefined;
  }
  const cleanedEmoji = cleanEmoji(emoji);
  return animatedEmojis.stickers.find(sticker => sticker.emoji === emoji || sticker.emoji === cleanedEmoji);
}
function selectRestrictedEmoji(global, emoji) {
  const {
    restrictedEmoji
  } = global;
  if (!restrictedEmoji || !restrictedEmoji.stickers) {
    return undefined;
  }
  const cleanedEmoji = cleanEmoji(emoji);
  return restrictedEmoji.stickers.find(sticker => {
    if (!sticker.emoji) return undefined;
    const cleanedStickerEmoji = cleanEmoji(sticker.emoji);
    return cleanedStickerEmoji === cleanedEmoji;
  });
}
function selectAnimatedEmojiEffect(global, emoji) {
  const {
    animatedEmojiEffects
  } = global;
  if (!animatedEmojiEffects || !animatedEmojiEffects.stickers) {
    return undefined;
  }
  const cleanedEmoji = cleanEmoji(emoji);
  return animatedEmojiEffects.stickers.find(sticker => sticker.emoji === emoji || sticker.emoji === cleanedEmoji);
}
function selectAnimatedEmojiSound(global, emoji) {
  return global?.appConfig?.emojiSounds[cleanEmoji(emoji)];
}
function selectIsAlwaysHighPriorityEmoji(global, stickerSet) {
  if (!('id' in stickerSet)) return false;
  return stickerSet.id === global.appConfig?.defaultEmojiStatusesStickerSetId || stickerSet.id === _config__WEBPACK_IMPORTED_MODULE_0__.RESTRICTED_EMOJI_SET_ID;
}
function selectGiftStickerForDuration(global, duration = 1) {
  const stickers = global.premiumGifts?.stickers;
  if (!stickers) return undefined;
  const emoji = MONTH_EMOTICON[duration];
  return stickers.find(sticker => sticker.emoji === emoji) || stickers[0];
}
function selectGiftStickerForStars(global, starCount) {
  const stickers = global.premiumGifts?.stickers;
  if (!stickers || !starCount) return undefined;
  let emoji;
  if (starCount <= 1000) {
    emoji = STAR_EMOTICON[1000];
  } else if (starCount < 2500) {
    emoji = STAR_EMOTICON[2500];
  } else {
    emoji = STAR_EMOTICON[5000];
  }
  return stickers.find(sticker => sticker.emoji === emoji) || stickers[0];
}

/***/ }),

/***/ "./src/global/selectors/tabs.ts":
/*!**************************************!*\
  !*** ./src/global/selectors/tabs.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectTabState: () => (/* binding */ selectTabState)
/* harmony export */ });
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");

function selectTabState(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_0__.getCurrentTabId)()]) {
  return global.byTabId[tabId];
}

/***/ }),

/***/ "./src/global/selectors/topics.ts":
/*!****************************************!*\
  !*** ./src/global/selectors/topics.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectTopic: () => (/* binding */ selectTopic),
/* harmony export */   selectTopics: () => (/* binding */ selectTopics),
/* harmony export */   selectTopicsInfo: () => (/* binding */ selectTopicsInfo)
/* harmony export */ });
function selectTopicsInfo(global, chatId) {
  return global.chats.topicsInfoById[chatId];
}
function selectTopics(global, chatId) {
  return selectTopicsInfo(global, chatId)?.topicsById;
}
function selectTopic(global, chatId, threadId) {
  return selectTopicsInfo(global, chatId)?.topicsById?.[threadId];
}

/***/ }),

/***/ "./src/global/selectors/ui.ts":
/*!************************************!*\
  !*** ./src/global/selectors/ui.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectActiveWebApp: () => (/* binding */ selectActiveWebApp),
/* harmony export */   selectCanAnimateInterface: () => (/* binding */ selectCanAnimateInterface),
/* harmony export */   selectCanAnimateSnapEffect: () => (/* binding */ selectCanAnimateSnapEffect),
/* harmony export */   selectCanAutoPlayMedia: () => (/* binding */ selectCanAutoPlayMedia),
/* harmony export */   selectCanPlayAnimatedEmojis: () => (/* binding */ selectCanPlayAnimatedEmojis),
/* harmony export */   selectIsContextMenuTranslucent: () => (/* binding */ selectIsContextMenuTranslucent),
/* harmony export */   selectIsForumPanelClosed: () => (/* binding */ selectIsForumPanelClosed),
/* harmony export */   selectIsForumPanelOpen: () => (/* binding */ selectIsForumPanelOpen),
/* harmony export */   selectIsMediaViewerOpen: () => (/* binding */ selectIsMediaViewerOpen),
/* harmony export */   selectIsReactionPickerOpen: () => (/* binding */ selectIsReactionPickerOpen),
/* harmony export */   selectIsRightColumnShown: () => (/* binding */ selectIsRightColumnShown),
/* harmony export */   selectIsSynced: () => (/* binding */ selectIsSynced),
/* harmony export */   selectPerformanceSettings: () => (/* binding */ selectPerformanceSettings),
/* harmony export */   selectPerformanceSettingsValue: () => (/* binding */ selectPerformanceSettingsValue),
/* harmony export */   selectRightColumnContentKey: () => (/* binding */ selectRightColumnContentKey),
/* harmony export */   selectShouldLoopStickers: () => (/* binding */ selectShouldLoopStickers),
/* harmony export */   selectTheme: () => (/* binding */ selectTheme),
/* harmony export */   selectWebApp: () => (/* binding */ selectWebApp)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_messageMedia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/messageMedia */ "./src/global/helpers/messageMedia.ts");
/* harmony import */ var _management__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./management */ "./src/global/selectors/management.ts");
/* harmony import */ var _statistics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./statistics */ "./src/global/selectors/statistics.ts");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tabs */ "./src/global/selectors/tabs.ts");







function selectIsMediaViewerOpen(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const {
    mediaViewer: {
      chatId,
      messageId,
      isAvatarView,
      standaloneMedia,
      isSponsoredMessage
    }
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId);
  return Boolean(standaloneMedia || chatId && (isAvatarView || messageId || isSponsoredMessage));
}
function selectRightColumnContentKey(global, isMobile, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const tabState = (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId);
  return tabState.editTopicPanel ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.EditTopic : tabState.createTopicPanel ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.CreateTopic : tabState.pollResults.messageId ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.PollResults : (0,_management__WEBPACK_IMPORTED_MODULE_4__.selectCurrentManagement)(global, tabId) ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.Management : tabState.isStatisticsShown && tabState.statistics.currentMessageId ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.MessageStatistics : tabState.isStatisticsShown && tabState.statistics.currentStoryId ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.StoryStatistics : (0,_statistics__WEBPACK_IMPORTED_MODULE_5__.selectIsStatisticsShown)(global, tabId) ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.Statistics : tabState.boostStatistics ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.BoostStatistics : tabState.monetizationStatistics ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.MonetizationStatistics : tabState.stickerSearch.query !== undefined ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.StickerSearch : tabState.gifSearch.query !== undefined ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.GifSearch : tabState.newChatMembersProgress !== _types__WEBPACK_IMPORTED_MODULE_0__.NewChatMembersProgress.Closed ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.AddingMembers : tabState.isChatInfoShown && tabState.messageLists.length ? _types__WEBPACK_IMPORTED_MODULE_0__.RightColumnContent.ChatInfo : undefined;
}
function selectIsRightColumnShown(global, isMobile, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return selectRightColumnContentKey(global, isMobile, tabId) !== undefined;
}
function selectTheme(global) {
  const {
    theme
  } = global.settings.byKey;
  return theme;
}
function selectIsForumPanelOpen(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const tabState = (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId);
  return Boolean(tabState.forumPanelChatId) && (tabState.globalSearch.query === undefined || Boolean(tabState.globalSearch.isClosing));
}
function selectIsForumPanelClosed(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return !selectIsForumPanelOpen(global, tabId);
}
function selectIsReactionPickerOpen(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const {
    reactionPicker
  } = (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId);
  return Boolean(reactionPicker?.position);
}
function selectPerformanceSettings(global) {
  return global.settings.performance;
}
function selectPerformanceSettingsValue(global, key) {
  return global.settings.performance[key];
}
function selectCanAutoPlayMedia(global, message) {
  const video = (0,_helpers_messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageVideo)(message) || (0,_helpers_messageMedia__WEBPACK_IMPORTED_MODULE_3__.getMessageWebPageVideo)(message);
  if (!video) {
    return undefined;
  }
  const canAutoPlayVideos = selectPerformanceSettingsValue(global, 'autoplayVideos');
  const canAutoPlayGifs = selectPerformanceSettingsValue(global, 'autoplayGifs');
  const asGif = video.isGif || video.isRound;
  return canAutoPlayVideos && !asGif || canAutoPlayGifs && asGif;
}
function selectShouldLoopStickers(global) {
  return selectPerformanceSettingsValue(global, 'loopAnimatedStickers');
}
function selectCanPlayAnimatedEmojis(global) {
  return selectPerformanceSettingsValue(global, 'animatedEmoji');
}
function selectCanAnimateInterface(global) {
  return selectPerformanceSettingsValue(global, 'pageTransitions');
}
function selectIsContextMenuTranslucent(global) {
  return selectPerformanceSettingsValue(global, 'contextMenuBlur');
}
function selectIsSynced(global) {
  return global.isSynced;
}
function selectCanAnimateSnapEffect(global) {
  return _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_SNAP_EFFECT_SUPPORTED && selectPerformanceSettingsValue(global, 'snapEffect');
}
function selectWebApp(global, key, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  return (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId).webApps.openedWebApps[key];
}
function selectActiveWebApp(global, ...[tabId = (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.getCurrentTabId)()]) {
  const activeWebAppKey = (0,_tabs__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global, tabId).webApps.activeWebAppKey;
  if (!activeWebAppKey) return undefined;
  return selectWebApp(global, activeWebAppKey, tabId);
}

/***/ }),

/***/ "./src/global/selectors/users.ts":
/*!***************************************!*\
  !*** ./src/global/selectors/users.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectBot: () => (/* binding */ selectBot),
/* harmony export */   selectBotAppPermissions: () => (/* binding */ selectBotAppPermissions),
/* harmony export */   selectIsCurrentUserPremium: () => (/* binding */ selectIsCurrentUserPremium),
/* harmony export */   selectIsGiveawayGiftsPurchaseAvailable: () => (/* binding */ selectIsGiveawayGiftsPurchaseAvailable),
/* harmony export */   selectIsPremiumPurchaseBlocked: () => (/* binding */ selectIsPremiumPurchaseBlocked),
/* harmony export */   selectIsUserBlocked: () => (/* binding */ selectIsUserBlocked),
/* harmony export */   selectUser: () => (/* binding */ selectUser),
/* harmony export */   selectUserByPhoneNumber: () => (/* binding */ selectUserByPhoneNumber),
/* harmony export */   selectUserCommonChats: () => (/* binding */ selectUserCommonChats),
/* harmony export */   selectUserFullInfo: () => (/* binding */ selectUserFullInfo),
/* harmony export */   selectUserStatus: () => (/* binding */ selectUserStatus)
/* harmony export */ });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers */ "./src/global/helpers/index.ts");

function selectUser(global, userId) {
  return global.users.byId[userId];
}
function selectUserStatus(global, userId) {
  return global.users.statusesById[userId];
}
function selectUserFullInfo(global, userId) {
  return global.users.fullInfoById[userId];
}
function selectUserCommonChats(global, userId) {
  return global.users.commonChatsById[userId];
}
function selectIsUserBlocked(global, userId) {
  return selectUserFullInfo(global, userId)?.isBlocked;
}
function selectIsCurrentUserPremium(global) {
  if (!global.currentUserId) return false;
  return Boolean(global.users.byId[global.currentUserId].isPremium);
}
function selectIsPremiumPurchaseBlocked(global) {
  return global.appConfig?.isPremiumPurchaseBlocked ?? true;
}
function selectIsGiveawayGiftsPurchaseAvailable(global) {
  return global.appConfig?.isGiveawayGiftsPurchaseAvailable ?? true;
}

/**
 * Slow, not to be used in `withGlobal`
 */
function selectUserByPhoneNumber(global, phoneNumber) {
  const phoneNumberCleaned = phoneNumber.replace(/[^0-9]/g, '');
  return Object.values(global.users.byId).find(user => user?.phoneNumber === phoneNumberCleaned);
}
function selectBot(global, userId) {
  const user = selectUser(global, userId);
  if (!user || !(0,_helpers__WEBPACK_IMPORTED_MODULE_0__.isUserBot)(user)) {
    return undefined;
  }
  return user;
}
function selectBotAppPermissions(global, userId) {
  return global.users.botAppPermissionsById[userId];
}

/***/ }),

/***/ "./src/hooks/data/useSelector.ts":
/*!***************************************!*\
  !*** ./src/hooks/data/useSelector.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useSelector)
/* harmony export */ });
/* harmony import */ var _useDerivedState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _useSelectorSignal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useSelectorSignal */ "./src/hooks/data/useSelectorSignal.ts");


function useSelector(selector) {
  const selectorSignal = (0,_useSelectorSignal__WEBPACK_IMPORTED_MODULE_1__["default"])(selector);
  return (0,_useDerivedState__WEBPACK_IMPORTED_MODULE_0__["default"])(selectorSignal);
}

/***/ }),

/***/ "./src/hooks/data/useSelectorSignal.ts":
/*!*********************************************!*\
  !*** ./src/hooks/data/useSelectorSignal.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_signals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/signals */ "./src/util/signals.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../useSyncEffect */ "./src/hooks/useSyncEffect.ts");





/*
  This hook is a more performant variation of the standard React `useSelector` hook. It allows to:
  a) Avoid multiple subscriptions to global updates by leveraging a single selector reference.
  b) Return a signal instead of forcing a component update right away.
 */

const bySelector = new Map();
(0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.addCallback)(global => {
  for (const [selector, {
    setter
  }] of bySelector) {
    setter(selector(global));
  }
});
function useSelectorSignal(selector) {
  let state = bySelector.get(selector);
  if (!state) {
    const [getter, setter] = (0,_util_signals__WEBPACK_IMPORTED_MODULE_2__.createSignal)(selector((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)()));
    state = {
      clientsCount: 0,
      getter,
      setter
    };
    bySelector.set(selector, state);
  }
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    const state2 = bySelector.get(selector);
    state2.clientsCount++;
    return () => {
      state2.clientsCount--;
      if (!state2.clientsCount) {
        bySelector.delete(selector);
      }
    };
  }, [selector]);
  return state.getter;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useSelectorSignal);

/***/ }),

/***/ "./src/hooks/element/useCollapsibleLines.ts":
/*!**************************************************!*\
  !*** ./src/hooks/element/useCollapsibleLines.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useCollapsibleLines)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_element_calcTextLineHeightAndCount__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/element/calcTextLineHeightAndCount */ "./src/util/element/calcTextLineHeightAndCount.ts");
/* harmony import */ var _useDebouncedCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../useDebouncedCallback */ "./src/hooks/useDebouncedCallback.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _window_useWindowSize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../window/useWindowSize */ "./src/hooks/window/useWindowSize.ts");






const WINDOW_RESIZE_LINE_RECALC_DEBOUNCE = 200;
function useCollapsibleLines(ref, maxLinesBeforeCollapse, cutoutRef, isDisabled) {
  const isFirstRenderRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  const cutoutHeightRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const [isCollapsible, setIsCollapsible] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!isDisabled);
  const [isCollapsed, setIsCollapsed] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(isCollapsible);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const element = (cutoutRef || ref).current;
    if (isDisabled || !element || isFirstRenderRef.current) return;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      element.style.maxHeight = isCollapsed ? `${cutoutHeightRef.current}px` : '';
    });
  }, [cutoutRef, isCollapsed, isDisabled, ref]);
  const recalculateTextLines = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (isDisabled || !ref.current) {
      return;
    }
    const element = ref.current;
    const {
      lineHeight,
      totalLines
    } = (0,_util_element_calcTextLineHeightAndCount__WEBPACK_IMPORTED_MODULE_2__["default"])(element);
    if (totalLines > maxLinesBeforeCollapse) {
      cutoutHeightRef.current = lineHeight * maxLinesBeforeCollapse;
      setIsCollapsible(true);
    } else {
      setIsCollapsible(false);
      setIsCollapsed(false);
    }
  });
  const debouncedRecalcTextLines = (0,_useDebouncedCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMeasure)(recalculateTextLines), [recalculateTextLines], WINDOW_RESIZE_LINE_RECALC_DEBOUNCE);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!isDisabled && isFirstRenderRef.current) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestForcedReflow)(() => {
        recalculateTextLines();
        return () => {
          isFirstRenderRef.current = false;
          const element = (cutoutRef || ref).current;
          if (!element) return;
          element.style.maxHeight = cutoutHeightRef.current ? `${cutoutHeightRef.current}px` : '';
        };
      });
    }
  }, [cutoutRef, isDisabled, recalculateTextLines, ref]);

  // Parent resize is triggered on every collapse/expand, so we do recalculation only on window resize to save resources
  const {
    width: windowWidth
  } = (0,_window_useWindowSize__WEBPACK_IMPORTED_MODULE_5__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isDisabled) {
      if (isFirstRenderRef.current) return;
      debouncedRecalcTextLines();
    } else {
      setIsCollapsible(false);
      setIsCollapsed(false);
    }
  }, [debouncedRecalcTextLines, isDisabled, windowWidth]);
  return {
    isCollapsed,
    isCollapsible,
    setIsCollapsed
  };
}

/***/ }),

/***/ "./src/hooks/stickers/useColorFilter.tsx":
/*!***********************************************!*\
  !*** ./src/hooks/stickers/useColorFilter.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useColorFilter)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_svgController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/svgController */ "./src/util/svgController.ts");
/* harmony import */ var _util_switchTheme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/switchTheme */ "./src/util/switchTheme.ts");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }




const SVG_MAP = new Map();
class SvgColorFilter {
  constructor(color) {
    this.color = color;
    _defineProperty(this, "filterId", void 0);
    _defineProperty(this, "referenceCount", 0);
    this.filterId = `color-filter-${color.slice(1)}`;
    const rgbColor = (0,_util_switchTheme__WEBPACK_IMPORTED_MODULE_3__.hexToRgb)(color);
    (0,_util_svgController__WEBPACK_IMPORTED_MODULE_2__.addSvgDefinition)( /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("filter", {
      "color-interpolation-filters": "sRGB",
      xmlns: _config__WEBPACK_IMPORTED_MODULE_1__.SVG_NAMESPACE
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feColorMatrix", {
      type: "matrix",
      values: `0 0 0 0 ${rgbColor.r / 255} 0 0 0 0 ${rgbColor.g / 255} 0 0 0 0 ${rgbColor.b / 255} 0 0 0 1 0`
    })), this.filterId);
  }
  getFilterId() {
    this.referenceCount += 1;
    return this.filterId;
  }
  removeReference() {
    this.referenceCount -= 1;
    if (this.referenceCount === 0) {
      (0,_util_svgController__WEBPACK_IMPORTED_MODULE_2__.removeSvgDefinition)(this.filterId);
    }
  }
  isUsed() {
    return this.referenceCount > 0;
  }
}
function useColorFilter(color, asValue) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!color) return undefined;
    return () => {
      const colorFilter = SVG_MAP.get(color);
      if (colorFilter) {
        colorFilter.removeReference();
        if (!colorFilter.isUsed()) {
          SVG_MAP.delete(colorFilter.color);
        }
      }
    };
  }, [color]);
  if (!color) return undefined;
  if (SVG_MAP.has(color)) {
    const svg = SVG_MAP.get(color);
    return prepareStyle(svg.getFilterId(), asValue);
  }
  const svg = new SvgColorFilter(color);
  SVG_MAP.set(color, svg);
  return prepareStyle(svg.getFilterId(), asValue);
}
function prepareStyle(filterId, asValue) {
  if (asValue) {
    return `url(#${filterId})`;
  }
  return `filter: url(#${filterId});`;
}

/***/ }),

/***/ "./src/hooks/stickers/useDynamicColorListener.ts":
/*!*******************************************************!*\
  !*** ./src/hooks/stickers/useDynamicColorListener.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useDynamicColorListener)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_themeStyle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/themeStyle */ "./src/util/themeStyle.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useResizeObserver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../useResizeObserver */ "./src/hooks/useResizeObserver.ts");





// Transition required to detect `color` property change.
// Duration parameter describes a delay between color change and color state update.
// Small values may cause large amount of re-renders.
const TRANSITION_PROPERTY = 'color';
const TRANSITION_STYLE = `50ms ${TRANSITION_PROPERTY} linear`;
function useDynamicColorListener(ref, isDisabled) {
  const [hexColor, setHexColor] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const updateColor = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    if (!ref.current || isDisabled) {
      setHexColor(undefined);
      return;
    }
    const currentHexColor = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_1__.getPropertyHexColor)(getComputedStyle(ref.current), TRANSITION_PROPERTY);
    setHexColor(currentHexColor);
  });

  // Element does not receive `transitionend` event if parent has `display: none`.
  // We will receive `resize` event when parent is shown again.
  (0,_useResizeObserver__WEBPACK_IMPORTED_MODULE_3__["default"])(ref, updateColor, isDisabled);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const el = ref.current;
    if (!el || isDisabled) {
      return undefined;
    }
    el.style.setProperty('transition', TRANSITION_STYLE, 'important');
    return () => {
      el.style.removeProperty('transition');
    };
  }, [isDisabled, ref]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const el = ref.current;
    if (!el) {
      return undefined;
    }
    updateColor();
    if (isDisabled) {
      return undefined;
    }
    function handleTransitionEnd(e) {
      if (e.propertyName !== TRANSITION_PROPERTY) return;
      updateColor();
    }
    el.addEventListener('transitionend', handleTransitionEnd);
    return () => {
      el.removeEventListener('transitionend', handleTransitionEnd);
    };
  }, [isDisabled, ref, updateColor]);
  return hexColor;
}

/***/ }),

/***/ "./src/hooks/useAppLayout.ts":
/*!***********************************!*\
  !*** ./src/hooks/useAppLayout.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useAppLayout),
/* harmony export */   getIsMobile: () => (/* binding */ getIsMobile),
/* harmony export */   getIsTablet: () => (/* binding */ getIsTablet),
/* harmony export */   getIsWebAppsFullscreenSupported: () => (/* binding */ getIsWebAppsFullscreenSupported)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/windowSize */ "./src/util/windowSize.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");






const mediaQueryCache = new Map();
const callbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_2__.createCallbackManager)();
let isMobile;
let isTablet;
let isLandscape;
let isTouchScreen;
function getIsMobile() {
  return isMobile;
}
function getIsTablet() {
  return isTablet;
}
function getIsWebAppsFullscreenSupported() {
  return !getIsMobile();
}
function handleMediaQueryChange() {
  isMobile = mediaQueryCache.get('mobile')?.matches || false;
  isTablet = !isMobile && (mediaQueryCache.get('tablet')?.matches || false);
  isLandscape = mediaQueryCache.get('landscape')?.matches || false;
  isTouchScreen = mediaQueryCache.get('touch')?.matches || false;
  (0,_util_windowSize__WEBPACK_IMPORTED_MODULE_4__.updateSizes)();
  callbacks.runCallbacks();
}
function initMediaQueryCache() {
  const mobileQuery = window.matchMedia(`(max-width: ${_config__WEBPACK_IMPORTED_MODULE_1__.MOBILE_SCREEN_MAX_WIDTH}px), \
  (max-width: ${_config__WEBPACK_IMPORTED_MODULE_1__.MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH}px and max-height: ${_config__WEBPACK_IMPORTED_MODULE_1__.MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT}px)`);
  mediaQueryCache.set('mobile', mobileQuery);
  mobileQuery.addEventListener('change', handleMediaQueryChange);
  const tabletQuery = window.matchMedia(`(max-width: ${_config__WEBPACK_IMPORTED_MODULE_1__.MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN}px)`);
  mediaQueryCache.set('tablet', tabletQuery);
  tabletQuery.addEventListener('change', handleMediaQueryChange);
  const landscapeQuery = window.matchMedia(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_IOS ? '(orientation: landscape)'
  // Source: https://web.archive.org/web/20160509220835/http://blog.abouthalf.com/development/orientation-media-query-challenges-in-android-browsers/
  // Feature is marked as deprecated now, but it is still supported
  // https://developer.mozilla.org/en-US/docs/Web/CSS/@media/device-aspect-ratio#browser_compatibility
  : 'screen and (min-device-aspect-ratio: 1/1) and (orientation: landscape)');
  mediaQueryCache.set('landscape', landscapeQuery);
  landscapeQuery.addEventListener('change', handleMediaQueryChange);
  const isTouchScreenQuery = window.matchMedia('(pointer: coarse)');
  mediaQueryCache.set('touch', isTouchScreenQuery);
  isTouchScreenQuery.addEventListener('change', handleMediaQueryChange);
}
initMediaQueryCache();
handleMediaQueryChange();
function useAppLayout() {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_5__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => callbacks.addCallback(forceUpdate), [forceUpdate]);
  return {
    isMobile,
    isTablet,
    isLandscape,
    isDesktop: !isMobile && !isTablet,
    isTouchScreen
  };
}

/***/ }),

/***/ "./src/hooks/useAsync.ts":
/*!*******************************!*\
  !*** ./src/hooks/useAsync.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

const useAsync = (fn, deps, defaultValue) => {
  const [isLoading, setIsLoading] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [error, setError] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [result, setResult] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setIsLoading(true);
    let wasCancelled = false;
    fn().then(res => {
      if (wasCancelled) return;
      setIsLoading(false);
      setResult(res);
    }, err => {
      if (wasCancelled) return;
      setIsLoading(false);
      setError(err);
    });
    return () => {
      wasCancelled = true;
    };
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, deps);
  return {
    isLoading,
    error,
    result
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useAsync);

/***/ }),

/***/ "./src/hooks/useBuffering.ts":
/*!***********************************!*\
  !*** ./src/hooks/useBuffering.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_areDeepEqual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/areDeepEqual */ "./src/util/areDeepEqual.ts");
/* harmony import */ var _util_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/patchSafariProgressiveAudio */ "./src/util/patchSafariProgressiveAudio.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");





const MIN_READY_STATE = 3;
// Avoid flickering when re-mounting previously buffered video
const DEBOUNCE = 200;
const MIN_ALLOWED_MEDIA_DURATION = 0.1; // Some video emojis have weird duration of 0.04 causing extreme amount of events

/**
 * Time range relative to the duration [0, 1]
 */

const useBuffering = (noInitiallyBuffered = false, onTimeUpdate, onBroken) => {
  const [isBuffered, setIsBuffered] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!noInitiallyBuffered);
  const [isReady, setIsReady] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [bufferedProgress, setBufferedProgress] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [bufferedRanges, setBufferedRanges] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const setIsBufferedDebounced = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_3__.debounce)(setIsBuffered, DEBOUNCE, false, true);
  }, []);
  const handleBuffering = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    const media = e.currentTarget;
    if (media.duration < MIN_ALLOWED_MEDIA_DURATION) {
      onBroken?.();
      return;
    }
    if (e.type === 'timeupdate') {
      onTimeUpdate?.(e);
    }
    if (!(0,_util_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_2__.isSafariPatchInProgress)(media)) {
      if (media.buffered.length) {
        const ranges = getTimeRanges(media.buffered, media.duration);
        const bufferedLength = ranges.reduce((acc, {
          start,
          end
        }) => acc + end - start, 0);
        setBufferedProgress(bufferedLength / media.duration);
        setBufferedRanges(currentRanges => {
          return (0,_util_areDeepEqual__WEBPACK_IMPORTED_MODULE_1__.areDeepEqual)(currentRanges, ranges) ? currentRanges : ranges;
        });
      }
      setIsBufferedDebounced(media.readyState >= MIN_READY_STATE || media.currentTime > 0);
      setIsReady(current => current || media.readyState > MIN_READY_STATE);
    }
  });
  const bufferingHandlers = {
    onPLay: handleBuffering,
    onLoadedData: handleBuffering,
    onPlaying: handleBuffering,
    onLoadStart: handleBuffering,
    // Needed for Safari to start
    onPause: handleBuffering,
    // Needed for Chrome when seeking
    onTimeUpdate: handleBuffering,
    // Needed for audio buffering progress
    onProgress: handleBuffering // Needed for video buffering progress
  };
  return {
    isReady,
    isBuffered,
    bufferedProgress,
    bufferedRanges,
    bufferingHandlers,
    checkBuffering(element) {
      setIsBufferedDebounced(element.readyState >= MIN_READY_STATE);
    }
  };
};
function getTimeRanges(ranges, duration) {
  const result = [];
  for (let i = 0; i < ranges.length; i++) {
    result.push({
      start: ranges.start(i) / duration,
      end: ranges.end(i) / duration
    });
  }
  return result;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useBuffering);

/***/ }),

/***/ "./src/hooks/useCoordsInSharedCanvas.ts":
/*!**********************************************!*\
  !*** ./src/hooks/useCoordsInSharedCanvas.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useCoordsInSharedCanvas)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/math */ "./src/util/math.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useResizeObserver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _useSharedIntersectionObserver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSharedIntersectionObserver */ "./src/hooks/useSharedIntersectionObserver.ts");
/* harmony import */ var _useThrottledCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useThrottledCallback */ "./src/hooks/useThrottledCallback.ts");






const THROTTLE_MS = 150;
function useCoordsInSharedCanvas(containerRef, sharedCanvasRef) {
  const [x, setX] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [y, setY] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const recalculate = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    const container = containerRef.current;
    const canvas = sharedCanvasRef?.current;
    if (!container || !canvas) {
      return;
    }

    // Wait until elements are properly mounted
    if (!canvas.offsetWidth || !canvas.offsetHeight) {
      return;
    }
    const target = container.classList.contains('sticker-set-cover') || container.classList.contains('sticker-reaction') ? container : container.querySelector('img');
    if (!target) {
      return;
    }
    const targetBounds = target.getBoundingClientRect();
    const canvasBounds = canvas.getBoundingClientRect();

    // Factor coords are used to support rendering while being rescaled (e.g. message appearance animation)
    setX((0,_util_math__WEBPACK_IMPORTED_MODULE_1__.round)((targetBounds.left - canvasBounds.left) / canvasBounds.width, 4) || 0);
    setY((0,_util_math__WEBPACK_IMPORTED_MODULE_1__.round)((targetBounds.top - canvasBounds.top) / canvasBounds.height, 4) || 0);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(recalculate, [recalculate]);
  const throttledRecalculate = (0,_useThrottledCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(recalculate, [recalculate], THROTTLE_MS);
  (0,_useResizeObserver__WEBPACK_IMPORTED_MODULE_3__["default"])(sharedCanvasRef, throttledRecalculate);
  (0,_useSharedIntersectionObserver__WEBPACK_IMPORTED_MODULE_4__["default"])(sharedCanvasRef, throttledRecalculate);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => x !== undefined && y !== undefined ? {
    x,
    y
  } : undefined, [x, y]);
}

/***/ }),

/***/ "./src/hooks/useCurrentOrPrev.ts":
/*!***************************************!*\
  !*** ./src/hooks/useCurrentOrPrev.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useCurrentOrPrev)
/* harmony export */ });
/* harmony import */ var _usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");

function useCurrentOrPrev(current, shouldSkipUndefined = false, shouldForceCurrent = false) {
  const prev = (0,_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_0__["default"])(current, shouldSkipUndefined);

  // eslint-disable-next-line no-null/no-null
  return shouldForceCurrent || current !== null && current !== undefined ? current : prev;
}

/***/ }),

/***/ "./src/hooks/useDebouncedCallback.ts":
/*!*******************************************!*\
  !*** ./src/hooks/useDebouncedCallback.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useDebouncedCallback)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");


function useDebouncedCallback(fn, deps, ms, noFirst = false, noLast = false) {
  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  const fnMemo = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(fn, deps);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.debounce)(fnMemo, ms, !noFirst, !noLast);
  }, [fnMemo, ms, noFirst, noLast]);
}

/***/ }),

/***/ "./src/hooks/useDerivedSignal.ts":
/*!***************************************!*\
  !*** ./src/hooks/useDerivedSignal.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useSignalEffect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useSignalEffect */ "./src/hooks/useSignalEffect.ts");
/* harmony import */ var _useStateRef__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");




function useDerivedSignal(resolverOrDependency, dependencies, isAsync = false) {
  const resolver = dependencies ? resolverOrDependency : () => resolverOrDependency;
  dependencies ?? (dependencies = [resolverOrDependency]);
  const [getValue, setValue] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)();
  const resolverRef = (0,_useStateRef__WEBPACK_IMPORTED_MODULE_2__.useStateRef)(resolver);
  function runCurrentResolver() {
    const currentResolver = resolverRef.current;
    if (isAsync) {
      currentResolver(setValue);
    } else {
      setValue(currentResolver());
    }
  }

  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_3__["default"])(runCurrentResolver, dependencies);

  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  (0,_useSignalEffect__WEBPACK_IMPORTED_MODULE_1__.useSignalEffect)(runCurrentResolver, dependencies);
  return getValue;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useDerivedSignal);

/***/ }),

/***/ "./src/hooks/useDerivedState.ts":
/*!**************************************!*\
  !*** ./src/hooks/useDerivedState.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _useSignalEffect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useSignalEffect */ "./src/hooks/useSignalEffect.ts");
/* harmony import */ var _useStateRef__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");





function useDerivedState(resolverOrSignal, dependencies, isAsync = false) {
  const resolver = dependencies ? resolverOrSignal : () => resolverOrSignal();
  dependencies ?? (dependencies = [resolverOrSignal]);
  const valueRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__["default"])();
  const resolverRef = (0,_useStateRef__WEBPACK_IMPORTED_MODULE_3__.useStateRef)(resolver);
  function runCurrentResolver(isSync = false) {
    const currentResolver = resolverRef.current;
    if (isAsync) {
      currentResolver(newValue => {
        if (valueRef.current !== newValue) {
          valueRef.current = newValue;
          forceUpdate();
        }
      });
    } else {
      const newValue = currentResolver();
      if (valueRef.current !== newValue) {
        valueRef.current = newValue;
        if (!isSync) {
          forceUpdate();
        }
      }
    }
  }
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    runCurrentResolver(true);
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, dependencies);

  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  (0,_useSignalEffect__WEBPACK_IMPORTED_MODULE_2__.useSignalEffect)(runCurrentResolver, dependencies);
  return valueRef.current;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useDerivedState);

/***/ }),

/***/ "./src/hooks/useEffectOnce.ts":
/*!************************************!*\
  !*** ./src/hooks/useEffectOnce.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

function useEffectOnce(effect) {
  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(effect, []);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useEffectOnce);

/***/ }),

/***/ "./src/hooks/useEffectWithPrevDeps.ts":
/*!********************************************!*\
  !*** ./src/hooks/useEffectWithPrevDeps.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

const useEffectWithPrevDeps = (cb, dependencies, debugKey) => {
  const prevDepsRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const prevDeps = prevDepsRef.current;
    prevDepsRef.current = dependencies;
    return cb(prevDeps || []);
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, dependencies, debugKey);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useEffectWithPrevDeps);

/***/ }),

/***/ "./src/hooks/useElectronDrag.ts":
/*!**************************************!*\
  !*** ./src/hooks/useElectronDrag.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");


const DRAG_DISTANCE_THRESHOLD = 5;
const useElectronDrag = ref => {
  const isDragging = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const x = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(window.screenX);
  const y = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(window.screenY);
  const distance = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const element = ref.current;
    if (!element || !(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_ELECTRON && _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_MAC_OS)) return undefined;
    const handleClick = event => {
      distance.current = 0;
      if (isDragging.current) {
        event.preventDefault();
        event.stopPropagation();
        isDragging.current = false;
      }
    };
    const handleMousedown = event => {
      if (isDragging.current) {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    const handleDrag = event => {
      if (event.buttons === 1) {
        distance.current += Math.sqrt((x.current - window.screenX) ** 2 + (y.current - window.screenY) ** 2);
        x.current = window.screenX;
        y.current = window.screenY;
        if (!isDragging.current && distance.current > DRAG_DISTANCE_THRESHOLD) {
          isDragging.current = true;
        }
      }
    };
    const handleDoubleClick = event => {
      if (event.currentTarget === event.target) {
        window.electron?.handleDoubleClick();
      }
    };
    element.addEventListener('click', handleClick);
    element.addEventListener('mousedown', handleMousedown);
    element.addEventListener('mousemove', handleDrag);
    element.addEventListener('dblclick', handleDoubleClick);
    return () => {
      element.removeEventListener('click', handleClick);
      element.removeEventListener('mouseup', handleMousedown);
      element.removeEventListener('mousemove', handleDrag);
      element.removeEventListener('dblclick', handleDoubleClick);
    };
  }, [ref]);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useElectronDrag);

/***/ }),

/***/ "./src/hooks/useEnsureCustomEmoji.ts":
/*!*******************************************!*\
  !*** ./src/hooks/useEnsureCustomEmoji.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useEnsureCustomEmoji)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/emoji/customEmojiManager */ "./src/util/emoji/customEmojiManager.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");



let LOAD_QUEUE = new Set();
const RENDER_HISTORY = new Set();
const THROTTLE = 200;
const LIMIT_PER_REQUEST = 100;
const loadFromQueue = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_2__.throttle)(() => {
  const queue = [...LOAD_QUEUE];
  const queueToLoad = queue.slice(0, LIMIT_PER_REQUEST);
  const otherQueue = queue.slice(LIMIT_PER_REQUEST + 1);
  (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().loadCustomEmojis({
    ids: queueToLoad
  });
  LOAD_QUEUE = new Set(otherQueue);

  // Schedule next load
  if (LOAD_QUEUE.size) {
    loadFromQueue();
  }
}, THROTTLE, false);
const updateLastRendered = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_2__.throttle)(() => {
  (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().updateLastRenderedCustomEmojis({
    ids: [...RENDER_HISTORY].reverse()
  });
  RENDER_HISTORY.clear();
}, THROTTLE, false);
function notifyCustomEmojiRender(emojiId) {
  RENDER_HISTORY.add(emojiId);
  updateLastRendered();
}
(0,_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_1__.addCustomEmojiInputRenderCallback)(notifyCustomEmojiRender);
function useEnsureCustomEmoji(id) {
  if (!id) return;
  notifyCustomEmojiRender(id);
  if ((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)().customEmojis.byId[id]) {
    return;
  }
  LOAD_QUEUE.add(id);
  loadFromQueue();
}

/***/ }),

/***/ "./src/hooks/useFlag.ts":
/*!******************************!*\
  !*** ./src/hooks/useFlag.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

const useFlag = (initial = false, debugKey) => {
  const [value, setValue] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(initial, debugKey);
  const setTrue = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setValue(true);
  }, []);
  const setFalse = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setValue(false);
  }, []);
  return [value, setTrue, setFalse];
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useFlag);

/***/ }),

/***/ "./src/hooks/useForceUpdate.ts":
/*!*************************************!*\
  !*** ./src/hooks/useForceUpdate.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

const useForceUpdate = () => {
  const [, setTrigger] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setTrigger(trigger => !trigger);
  }, []);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useForceUpdate);

/***/ }),

/***/ "./src/hooks/useHeavyAnimation.ts":
/*!****************************************!*\
  !*** ./src/hooks/useHeavyAnimation.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useHeavyAnimation),
/* harmony export */   endCallbacks: () => (/* binding */ endCallbacks),
/* harmony export */   startCallbacks: () => (/* binding */ startCallbacks),
/* harmony export */   useThrottleForHeavyAnimation: () => (/* binding */ useThrottleForHeavyAnimation)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");



const startCallbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
const endCallbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating.subscribe(() => {
  if ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)()) {
    startCallbacks.runCallbacks();
  } else {
    endCallbacks.runCallbacks();
  }
});
function useHeavyAnimation(onStart, onEnd, isDisabled = false) {
  const lastOnStart = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(onStart);
  const lastOnEnd = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(onEnd);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) {
      return undefined;
    }
    if ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)()) {
      lastOnStart();
    }
    startCallbacks.addCallback(lastOnStart);
    endCallbacks.addCallback(lastOnEnd);
    return () => {
      endCallbacks.removeCallback(lastOnEnd);
      startCallbacks.removeCallback(lastOnStart);
    };
  }, [isDisabled, lastOnEnd, lastOnStart]);
}

// TODO → `onFullyIdle`?
function useThrottleForHeavyAnimation(afterHeavyAnimation, deps) {
  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  const fnMemo = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(afterHeavyAnimation, deps);
  const isScheduledRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return (...args) => {
      if (!isScheduledRef.current) {
        if (!(0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)()) {
          fnMemo(...args);
          return;
        }
        isScheduledRef.current = true;
        const removeCallback = endCallbacks.addCallback(() => {
          fnMemo(...args);
          removeCallback();
          isScheduledRef.current = false;
        });
      }
    };
  }, [fnMemo]);
}

/***/ }),

/***/ "./src/hooks/useHistoryBack.ts":
/*!*************************************!*\
  !*** ./src/hooks/useHistoryBack.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useHistoryBack)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _useEffectOnce__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useEffectOnce */ "./src/hooks/useEffectOnce.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");








const PATH_BASE = `${window.location.pathname}${window.location.search}`;
// Carefully selected by swiping and observing visual changes
// TODO: may be different on other devices such as iPad, maybe take dpi into account?
const SAFARI_EDGE_BACK_GESTURE_LIMIT = 300;
const SAFARI_EDGE_BACK_GESTURE_DURATION = 350;
// Needed to dismiss any 'trashed' history records from the previous page reloads.
const historyUniqueSessionId = Number(new Date());
// Reflects real history state, but also contains information on which records should be replaced by the next record and
// which records are deferred to close on the next operation
let historyState;
// Reflects current real history index
let historyCursor;
// If we alter real history programmatically, the popstate event will be fired, which we don't need
let isAlteringHistory = false;
// Unfortunately Safari doesn't really like when there's 2+ consequent history operations in one frame, so we need
// to delay them to the next raf
let deferredHistoryOperations = [];
let deferredPopstateOperations = [];
let isSafariGestureAnimation = false;

// Do not remove: used for history unit tests
if (_config__WEBPACK_IMPORTED_MODULE_2__.IS_TEST) {
  window.TEST_getHistoryState = () => historyState;
  window.TEST_getHistoryCursor = () => historyCursor;
}
function handleTouchStart(event) {
  const x = event.touches[0].pageX;
  if (x <= SAFARI_EDGE_BACK_GESTURE_LIMIT || x >= window.innerWidth - SAFARI_EDGE_BACK_GESTURE_LIMIT) {
    isSafariGestureAnimation = true;
  }
}
function handleTouchEnd() {
  if (!isSafariGestureAnimation) {
    return;
  }
  setTimeout(() => {
    isSafariGestureAnimation = false;
  }, SAFARI_EDGE_BACK_GESTURE_DURATION);
}
if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_IOS) {
  window.addEventListener('touchstart', handleTouchStart);
  window.addEventListener('touchend', handleTouchEnd);
  window.addEventListener('popstate', handleTouchEnd);
}
function applyDeferredHistoryOperations() {
  const goOperations = deferredHistoryOperations.filter(op => op.type === 'go');
  const stateOperations = deferredHistoryOperations.filter(op => op.type !== 'go');
  const goCount = goOperations.reduce((acc, op) => acc + op.delta, 0);
  deferredHistoryOperations = [];
  if (goCount) {
    window.history.go(goCount);

    // If we have some `state` operations after the `go` operations, we need to wait until the popstate event
    // so the order of operations is correctly preserved
    if (stateOperations.length) {
      deferredPopstateOperations.push(...stateOperations);
      return;
    }
  }
  processStateOperations(stateOperations);
}
function processStateOperations(stateOperations) {
  stateOperations.forEach(op => window.history[op.type](op.data, '', op.hash));
}
function deferHistoryOperation(historyOperation) {
  if (!deferredHistoryOperations.length) {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMeasure)(applyDeferredHistoryOperations);
  }
  deferredHistoryOperations.push(historyOperation);
}

// Resets history to the `root` state
function resetHistory() {
  historyCursor = 0;
  historyState = [{
    index: 0,
    onBack: () => window.history.back()
  }];
  window.history.replaceState({
    index: 0,
    historyUniqueSessionId
  }, '', PATH_BASE);
}
resetHistory();
function cleanupClosed(alreadyClosedCount = 1) {
  let countClosed = alreadyClosedCount;
  for (let i = historyCursor - 1; i > 0; i--) {
    if (!historyState[i].isClosed) break;
    countClosed++;
  }
  if (countClosed) {
    isAlteringHistory = true;
    deferHistoryOperation({
      type: 'go',
      delta: -countClosed
    });
  }
  return countClosed;
}
function cleanupTrashedState() {
  // Navigation to previous page reload, state of which was trashed by reload
  let isAnimationDisabled = false;
  for (let i = historyState.length - 1; i > 0; i--) {
    if (historyState[i].isClosed) {
      continue;
    }
    // TODO[history]: probably we should not call this inside the loop
    if (!isAnimationDisabled && isSafariGestureAnimation) {
      (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().disableHistoryAnimations();
      isAnimationDisabled = true;
    }
    historyState[i].onBack?.();
  }
  resetHistory();
}
window.addEventListener('popstate', ({
  state
}) => {
  if (isAlteringHistory) {
    isAlteringHistory = false;
    if (deferredPopstateOperations.length) {
      processStateOperations(deferredPopstateOperations);
      deferredPopstateOperations = [];
    }
    return;
  }
  if (!state) {
    cleanupTrashedState();
    if (!window.location.hash) {
      return;
    }
    return;
  }
  const {
    index,
    historyUniqueSessionId: previousUniqueSessionId
  } = state;
  if (previousUniqueSessionId !== historyUniqueSessionId) {
    cleanupTrashedState();
    return;
  }

  // New real history state matches the old virtual one. Not possible in theory, but in practice we have Safari
  if (index === historyCursor) {
    return;
  }
  if (index < historyCursor) {
    // Navigating back
    let alreadyClosedCount = 0;
    let isAnimationDisabled = false;
    for (let i = historyCursor; i > index - alreadyClosedCount; i--) {
      if (historyState[i].isClosed) {
        alreadyClosedCount++;
        continue;
      }
      // TODO[history]: probably we should not call this inside the loop
      if (!isAnimationDisabled && isSafariGestureAnimation) {
        (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().disableHistoryAnimations();
        isAnimationDisabled = true;
      }
      historyState[i].onBack?.();
    }
    const countClosed = cleanupClosed(alreadyClosedCount);
    historyCursor += index - historyCursor - countClosed;

    // Can happen when we have deferred a real back for some element (for example Menu), closed via UI,
    // pressed back button and caused a pushState.
    if (historyCursor < 0) {
      historyCursor = 0;
    }
  } else if (index > historyCursor) {
    // Forward navigation is not yet supported
    isAlteringHistory = true;
    deferHistoryOperation({
      type: 'go',
      delta: -(index - historyCursor)
    });
  }
});
function useHistoryBack({
  isActive,
  shouldBeReplaced,
  shouldResetUrlHash,
  hash,
  onBack
}) {
  const lastOnBack = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(onBack);

  // Active index of the record
  const indexRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const wasReplaced = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const isFirstRender = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  const pushState = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)((forceReplace = false) => {
    // Check if the old state should be replaced
    const shouldReplace = forceReplace || historyState[historyCursor].shouldBeReplaced;
    indexRef.current = shouldReplace ? historyCursor : ++historyCursor;
    historyCursor = indexRef.current;

    // Mark the previous record as replaced so effectBack doesn't perform back operation on the new record
    const previousRecord = historyState[indexRef.current];
    if (previousRecord && !previousRecord.isClosed) {
      previousRecord.markReplaced?.();
    }
    historyState[indexRef.current] = {
      index: indexRef.current,
      onBack: lastOnBack,
      shouldBeReplaced,
      markReplaced: () => {
        wasReplaced.current = true;
      }
    };
    deferHistoryOperation({
      type: shouldReplace ? 'replaceState' : 'pushState',
      data: {
        index: indexRef.current,
        historyUniqueSessionId
      },
      // Space is a hack to make the browser completely remove the hash
      hash: hash ? `#${hash}` : shouldResetUrlHash ? ' ' : undefined
    });
  }, [hash, shouldBeReplaced, shouldResetUrlHash]);
  const processBack = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    // Only process back on open records
    if (indexRef.current && historyState[indexRef.current] && !wasReplaced.current) {
      historyState[indexRef.current].isClosed = true;
      wasReplaced.current = true;
      if (indexRef.current === historyCursor && !shouldBeReplaced) {
        historyCursor -= cleanupClosed();
      }
    }
  }, [shouldBeReplaced]);

  // Process back navigation when element is unmounted
  (0,_useEffectOnce__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    isFirstRender.current = false;
    return () => {
      if (!isActive || wasReplaced.current) return;
      processBack();
    };
  });
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_7__["default"])(([prevIsActive]) => {
    if (prevIsActive === isActive) return;
    if (isFirstRender.current && !isActive) return;
    if (isActive) {
      pushState();
    } else {
      processBack();
    }
  }, [isActive, processBack, pushState]);
}

/***/ }),

/***/ "./src/hooks/useIntersectionObserver.ts":
/*!**********************************************!*\
  !*** ./src/hooks/useIntersectionObserver.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useIntersectionObserver: () => (/* binding */ useIntersectionObserver),
/* harmony export */   useIsIntersecting: () => (/* binding */ useIsIntersecting),
/* harmony export */   useOnIntersect: () => (/* binding */ useOnIntersect)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _useHeavyAnimation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useHeavyAnimation */ "./src/hooks/useHeavyAnimation.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");





function useIntersectionObserver({
  rootRef,
  throttleMs,
  throttleScheduler,
  debounceMs,
  shouldSkipFirst,
  margin,
  threshold,
  isDisabled
}, rootCallback) {
  const controllerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const rootCallbackRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const freezeFlagsRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  const onUnfreezeRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  rootCallbackRef.current = rootCallback;
  const freeze = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    freezeFlagsRef.current++;
  });
  const unfreeze = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (!freezeFlagsRef.current) {
      return;
    }
    freezeFlagsRef.current--;
    if (!freezeFlagsRef.current && onUnfreezeRef.current) {
      onUnfreezeRef.current();
      onUnfreezeRef.current = undefined;
    }
  });
  (0,_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_3__["default"])(freeze, unfreeze);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) {
      return undefined;
    }
    return () => {
      if (controllerRef.current) {
        controllerRef.current.observer.disconnect();
        controllerRef.current.destroy();
        controllerRef.current = undefined;
      }
    };
  }, [isDisabled]);
  function initController() {
    const callbacks = new Map();
    const entriesAccumulator = new Map();
    let observerCallback;
    if (typeof throttleScheduler === 'function') {
      observerCallback = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_2__.throttleWith)(throttleScheduler, observerCallbackSync);
    } else if (throttleMs) {
      observerCallback = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_2__.throttle)(observerCallbackSync, throttleMs, !shouldSkipFirst);
    } else if (debounceMs) {
      observerCallback = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_2__.debounce)(observerCallbackSync, debounceMs, !shouldSkipFirst);
    } else {
      observerCallback = observerCallbackSync;
    }
    function observerCallbackSync() {
      if (freezeFlagsRef.current) {
        onUnfreezeRef.current = observerCallback;
        return;
      }
      const entries = Array.from(entriesAccumulator.values());
      entries.forEach(entry => {
        const callbackManager = callbacks.get(entry.target);
        callbackManager?.runCallbacks(entry);
      });
      if (rootCallbackRef.current) {
        rootCallbackRef.current(entries);
      }
      entriesAccumulator.clear();
    }
    function addCallback(element, callback) {
      if (!callbacks.get(element)) {
        callbacks.set(element, (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)());
      }
      const callbackManager = callbacks.get(element);
      callbackManager.addCallback(callback);
    }
    function removeCallback(element, callback) {
      const callbackManager = callbacks.get(element);
      if (!callbackManager) return;
      callbackManager.removeCallback(callback);
      if (!callbackManager.hasCallbacks()) {
        callbacks.delete(element);
      }
    }
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        entriesAccumulator.set(entry.target, entry);
      });
      if (freezeFlagsRef.current) {
        onUnfreezeRef.current = observerCallback;
      } else {
        observerCallback();
      }
    }, {
      root: rootRef.current,
      rootMargin: margin ? `${margin}px` : undefined,
      threshold
    });
    function destroy() {
      callbacks.clear();
      observer.disconnect();
    }
    controllerRef.current = {
      observer,
      addCallback,
      removeCallback,
      destroy
    };
  }
  const observe = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])((target, targetCallback) => {
    if (!controllerRef.current) {
      initController();
    }
    const controller = controllerRef.current;
    controller.observer.observe(target);
    if (targetCallback) {
      controller.addCallback(target, targetCallback);
    }
    return () => {
      if (targetCallback) {
        controller.removeCallback(target, targetCallback);
      }
      controller.observer.unobserve(target);
    };
  });
  return {
    observe,
    freeze,
    unfreeze
  };
}
function useOnIntersect(targetRef, observe, callback) {
  const lastCallback = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(callback);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return observe ? observe(targetRef.current, lastCallback) : undefined;
  }, [lastCallback, observe, targetRef]);
}
function useIsIntersecting(targetRef, observe, callback) {
  const [isIntersecting, setIsIntersecting] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!observe);
  useOnIntersect(targetRef, observe, entry => {
    setIsIntersecting(entry.isIntersecting);
    if (callback) {
      callback(entry);
    }
  });
  return isIntersecting;
}

/***/ }),

/***/ "./src/hooks/useKeyboardListNavigation.ts":
/*!************************************************!*\
  !*** ./src/hooks/useKeyboardListNavigation.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");



const useKeyboardListNavigation = (elementRef, isOpen, onSelectWithEnter, itemSelector, noCaptureFocus) => {
  const [focusedIndex, setFocusedIndex] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setFocusedIndex(-1);
    const element = elementRef.current;
    if (isOpen && element && !noCaptureFocus) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
        element.tabIndex = -1;
      });
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMeasure)(() => element.focus());
    }
  }, [elementRef, isOpen, noCaptureFocus]);
  return (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(e => {
    const element = elementRef.current;
    if (!element) {
      return;
    }
    if (e.keyCode === 13 && onSelectWithEnter) {
      onSelectWithEnter(focusedIndex);
      return;
    }
    if (e.keyCode !== 38 && e.keyCode !== 40) {
      return;
    }
    const focusedElement = document.activeElement;
    const elementChildren = Array.from(itemSelector ? element.querySelectorAll(itemSelector) : element.children);
    let newIndex = focusedElement && elementChildren.indexOf(focusedElement) || focusedIndex;
    if (e.keyCode === 38 && newIndex > 0) {
      newIndex--;
    } else if (e.keyCode === 40 && newIndex < elementChildren.length - 1) {
      newIndex++;
    } else if (elementChildren.length === 1) {
      newIndex = 0;
    } else {
      return;
    }
    const item = elementChildren[newIndex];
    if (item) {
      setFocusedIndex(newIndex);
      item.focus();
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useKeyboardListNavigation);

/***/ }),

/***/ "./src/hooks/useLang.ts":
/*!******************************!*\
  !*** ./src/hooks/useLang.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_localization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/localization */ "./src/util/localization/index.ts");
/* harmony import */ var _useEffectOnce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useEffectOnce */ "./src/hooks/useEffectOnce.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");



const useLang = () => {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_2__["default"])();
  (0,_useEffectOnce__WEBPACK_IMPORTED_MODULE_1__["default"])(() => {
    return (0,_util_localization__WEBPACK_IMPORTED_MODULE_0__.addLocalizationCallback)(forceUpdate);
  });
  return (0,_util_localization__WEBPACK_IMPORTED_MODULE_0__.getTranslationFn)();
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useLang);

/***/ }),

/***/ "./src/hooks/useLangString.ts":
/*!************************************!*\
  !*** ./src/hooks/useLangString.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useLangString)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");




function useLangString(key, langCode) {
  const [value, setValue] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const fetchLangString = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(async () => {
    if (!langCode) return undefined;
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchLangStrings', {
      langCode,
      langPack: _config__WEBPACK_IMPORTED_MODULE_1__.LANG_PACK,
      keys: [key]
    });
    const langString = result?.strings[key];
    if (!langString || typeof langString !== 'string') return undefined;
    return langString;
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    fetchLangString().then(setValue);
  }, [key, langCode]);
  return value;
}

/***/ }),

/***/ "./src/hooks/useLastCallback.ts":
/*!**************************************!*\
  !*** ./src/hooks/useLastCallback.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useLastCallback)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useStateRef__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useStateRef */ "./src/hooks/useStateRef.ts");


function useLastCallback(callback) {
  const ref = (0,_useStateRef__WEBPACK_IMPORTED_MODULE_1__.useStateRef)(callback);

  // No need for ref dependency
  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args) => ref.current?.(...args), []);
}

/***/ }),

/***/ "./src/hooks/useMedia.ts":
/*!*******************************!*\
  !*** ./src/hooks/useMedia.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _data_useSelector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/useSelector */ "./src/hooks/data/useSelector.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");






const useMedia = (mediaHash, noLoad = false, mediaFormat = _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMediaFormat.BlobUrl, delay) => {
  const mediaData = mediaHash ? _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.getFromMemory(mediaHash) : undefined;
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const isSynced = (0,_data_useSelector__WEBPACK_IMPORTED_MODULE_4__["default"])(_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectIsSynced);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!noLoad && mediaHash && !mediaData) {
      const startedAt = Date.now();
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.fetch(mediaHash, mediaFormat).then(() => {
        const spentTime = Date.now() - startedAt;
        if (!delay || spentTime >= delay) {
          forceUpdate();
        } else {
          setTimeout(forceUpdate, delay - spentTime);
        }
      });
    }
  }, [noLoad, mediaHash, mediaData, mediaFormat, delay, isSynced]);
  return mediaData;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useMedia);

/***/ }),

/***/ "./src/hooks/useMediaTransition.ts":
/*!*****************************************!*\
  !*** ./src/hooks/useMediaTransition.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMediaTransition)
/* harmony export */ });
/* harmony import */ var _useShowTransition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useShowTransition */ "./src/hooks/useShowTransition.ts");

function useMediaTransition(mediaData, options) {
  const isMediaReady = Boolean(mediaData);
  const {
    ref
  } = (0,_useShowTransition__WEBPACK_IMPORTED_MODULE_0__["default"])({
    isOpen: isMediaReady,
    noMountTransition: isMediaReady,
    className: 'slow',
    ...options
  });
  return ref;
}

/***/ }),

/***/ "./src/hooks/useMediaTransitionDeprecated.ts":
/*!***************************************************!*\
  !*** ./src/hooks/useMediaTransitionDeprecated.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMediaTransitionDeprecated)
/* harmony export */ });
/* harmony import */ var _useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");

function useMediaTransitionDeprecated(mediaData) {
  const isMediaReady = Boolean(mediaData);
  const {
    transitionClassNames
  } = (0,_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_0__["default"])(isMediaReady, undefined, isMediaReady, 'slow');
  return transitionClassNames;
}

/***/ }),

/***/ "./src/hooks/useMenuPosition.ts":
/*!**************************************!*\
  !*** ./src/hooks/useMenuPosition.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMenuPosition)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _useStateRef__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useStateRef */ "./src/hooks/useStateRef.ts");




const MENU_POSITION_VISUAL_COMFORT_SPACE_PX = 16;
const MENU_POSITION_BOTTOM_MARGIN = 12;
const EMPTY_RECT = {
  width: 0,
  left: 0,
  height: 0,
  top: 0
};
function useMenuPosition(isOpen, containerRef, bubbleRef, options) {
  const optionsRef = (0,_useStateRef__WEBPACK_IMPORTED_MODULE_3__.useStateRef)(options);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!isOpen) return;
    const options2 = optionsRef.current;
    if (!('getTriggerElement' in options2)) {
      applyStaticOptions(containerRef, bubbleRef, options2);
    } else {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestForcedReflow)(() => {
        const staticOptions = processDynamically(containerRef, bubbleRef, options2);
        return () => {
          applyStaticOptions(containerRef, bubbleRef, staticOptions);
        };
      });
    }
  }, [isOpen, containerRef, bubbleRef, optionsRef]);
}
function applyStaticOptions(containerRef, bubbleRef, {
  positionX = 'left',
  positionY = 'top',
  transformOriginX,
  transformOriginY,
  style,
  bubbleStyle
}) {
  const containerEl = containerRef.current;
  const bubbleEl = bubbleRef.current;
  if (style) {
    containerEl.style.cssText = style;
  }
  if (bubbleStyle) {
    bubbleEl.style.cssText = bubbleStyle;
  }
  if (positionX) {
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(bubbleEl, positionX);
  }
  if (positionY) {
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(bubbleEl, positionY);
  }
  (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(bubbleEl, {
    transformOrigin: [transformOriginX ? `${transformOriginX}px` : positionX, transformOriginY ? `${transformOriginY}px` : positionY].join(' ')
  });
}
function processDynamically(containerRef, bubbleRef, {
  anchor,
  getRootElement,
  getMenuElement,
  getTriggerElement,
  getLayout,
  withMaxHeight
}) {
  const triggerEl = getTriggerElement();
  let {
    x,
    y
  } = anchor;
  const anchorX = x;
  const anchorY = y;
  const menuEl = getMenuElement();
  const rootEl = getRootElement();
  const {
    extraPaddingX = 0,
    extraTopPadding = 0,
    extraMarginTop = 0,
    topShiftY = 0,
    menuElMinWidth = 0,
    deltaX = 0,
    shouldAvoidNegativePosition = false,
    withPortal = false,
    isDense = false
  } = getLayout?.() || {};
  const marginTop = menuEl ? parseInt(getComputedStyle(menuEl).marginTop, 10) + extraMarginTop : undefined;
  const {
    offsetWidth: menuElWidth,
    offsetHeight: menuElHeight
  } = menuEl || {
    offsetWidth: 0,
    offsetHeight: 0
  };
  const menuRect = menuEl ? {
    width: Math.max(menuElWidth, menuElMinWidth),
    height: menuElHeight + marginTop
  } : EMPTY_RECT;
  const rootRect = rootEl ? rootEl.getBoundingClientRect() : EMPTY_RECT;
  let positionX;
  let positionY;
  if (isDense || x + menuRect.width + extraPaddingX < rootRect.width + rootRect.left) {
    x += 3;
    positionX = 'left';
  } else if (x - menuRect.width - rootRect.left > 0) {
    positionX = 'right';
    x -= 3;
  } else {
    positionX = 'left';
    x = 16;
  }
  x += deltaX;
  const yWithTopShift = y + topShiftY;
  if (isDense || yWithTopShift + menuRect.height < rootRect.height + rootRect.top) {
    positionY = 'top';
    y = yWithTopShift;
  } else {
    positionY = 'bottom';
    if (y - menuRect.height < rootRect.top + extraTopPadding) {
      y = rootRect.top + rootRect.height;
    }
  }
  const triggerRect = triggerEl.getBoundingClientRect();
  const addedYForPortalPositioning = withPortal ? triggerRect.top : 0;
  const addedXForPortalPositioning = withPortal ? triggerRect.left : 0;
  const leftWithPossibleNegative = Math.min(x - triggerRect.left, rootRect.width - menuRect.width - MENU_POSITION_VISUAL_COMFORT_SPACE_PX);
  let left = (positionX === 'left' ? withPortal || shouldAvoidNegativePosition ? Math.max(MENU_POSITION_VISUAL_COMFORT_SPACE_PX, leftWithPossibleNegative) : leftWithPossibleNegative : x - triggerRect.left) + addedXForPortalPositioning;
  let top = y - triggerRect.top + addedYForPortalPositioning;
  if (isDense) {
    left = Math.min(left, rootRect.width - menuRect.width - MENU_POSITION_VISUAL_COMFORT_SPACE_PX);
    top = Math.min(top, rootRect.height - menuRect.height - MENU_POSITION_VISUAL_COMFORT_SPACE_PX);
  }

  // Avoid hiding external parts of menus on mobile devices behind the edges of the screen (ReactionSelector for example)
  const addedXForMenuPositioning = menuElMinWidth ? Math.max(0, (menuElMinWidth - menuElWidth) / 2) : 0;
  if (left - addedXForMenuPositioning < 0 && shouldAvoidNegativePosition) {
    left = addedXForMenuPositioning + MENU_POSITION_VISUAL_COMFORT_SPACE_PX;
  }
  const offsetX = anchorX + addedXForPortalPositioning - triggerRect.left - left;
  const offsetY = anchorY + addedYForPortalPositioning - triggerRect.top - top - (marginTop || 0);
  const transformOriginX = positionX === 'left' ? offsetX : menuRect.width + offsetX;
  const transformOriginY = positionY === 'bottom' ? menuRect.height + offsetY : offsetY;
  const style = `left: ${left}px; top: ${top}px`;
  let bubbleStyle;
  if (withMaxHeight) {
    const menuMaxHeight = rootRect.height - MENU_POSITION_BOTTOM_MARGIN - (marginTop || 0);
    bubbleStyle = `max-height: ${menuMaxHeight}px;`;
  }
  return {
    positionX,
    positionY,
    transformOriginX,
    transformOriginY,
    style,
    bubbleStyle
  };
}

/***/ }),

/***/ "./src/hooks/useModuleLoader.ts":
/*!**************************************!*\
  !*** ./src/hooks/useModuleLoader.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");



const useModuleLoader = (bundleName, moduleName, noLoad = false, autoUpdate = false) => {
  const module = (0,_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.getModuleFromMemory)(bundleName, moduleName);
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_2__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!autoUpdate) {
      return undefined;
    }
    return (0,_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.addLoadListener)(forceUpdate);
  }, [autoUpdate, forceUpdate]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!noLoad && !module) {
      (0,_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.loadModule)(bundleName).then(forceUpdate);
    }
  }, [bundleName, forceUpdate, module, moduleName, noLoad]);
  return module;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useModuleLoader);

/***/ }),

/***/ "./src/hooks/useMountAfterHeavyAnimation.ts":
/*!**************************************************!*\
  !*** ./src/hooks/useMountAfterHeavyAnimation.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMountAfterHeavyAnimation)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useDerivedState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useDerivedState */ "./src/hooks/useDerivedState.ts");


function useMountAfterHeavyAnimation(hasIntersected) {
  const [getNoHeavyAnimation, setNoHeavyAnimation] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(false);
  const $getIsHeavyAnimating = _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating;

  // Animation is usually started right after the mount, so we use effect to check for it on the next frame
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!$getIsHeavyAnimating()) {
      setNoHeavyAnimation(true);
    }
  }, [$getIsHeavyAnimating, setNoHeavyAnimation]);
  return (0,_useDerivedState__WEBPACK_IMPORTED_MODULE_1__["default"])(() => getNoHeavyAnimation() && hasIntersected, [getNoHeavyAnimation, hasIntersected]);
}

/***/ }),

/***/ "./src/hooks/useOldLang.ts":
/*!*********************************!*\
  !*** ./src/hooks/useOldLang.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _useEffectOnce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useEffectOnce */ "./src/hooks/useEffectOnce.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");



/**
 * @deprecated
 */
const useOldLang = () => {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_2__["default"])();
  (0,_useEffectOnce__WEBPACK_IMPORTED_MODULE_1__["default"])(() => {
    return _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_0__.addCallback(forceUpdate);
  });
  return _util_oldLangProvider__WEBPACK_IMPORTED_MODULE_0__.getTranslationFn();
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useOldLang);

/***/ }),

/***/ "./src/hooks/usePreviousDeprecated.ts":
/*!********************************************!*\
  !*** ./src/hooks/usePreviousDeprecated.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");


/**
 * @deprecated
 */

// eslint-disable-next-line max-len

function usePreviousDeprecated(next, shouldSkipUndefined) {
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const {
    current
  } = ref;
  if (!shouldSkipUndefined || next !== undefined) {
    ref.current = next;
  }
  return current;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (usePreviousDeprecated);

/***/ }),

/***/ "./src/hooks/usePriorityPlaybackCheck.ts":
/*!***********************************************!*\
  !*** ./src/hooks/usePriorityPlaybackCheck.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   dispatchPriorityPlaybackEvent: () => (/* binding */ dispatchPriorityPlaybackEvent),
/* harmony export */   isPriorityPlaybackActive: () => (/* binding */ isPriorityPlaybackActive)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");



const startCallbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
const endCallbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
let timeout;
let isActive = false;
const usePriorityPlaybackCheck = (onStart, onEnd, isDisabled = false) => {
  const lastOnStart = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(onStart);
  const lastOnEnd = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(onEnd);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) {
      return undefined;
    }
    if (isActive) {
      lastOnStart();
    }
    startCallbacks.addCallback(lastOnStart);
    endCallbacks.addCallback(lastOnEnd);
    return () => {
      endCallbacks.removeCallback(lastOnEnd);
      startCallbacks.removeCallback(lastOnStart);
    };
  }, [isDisabled, lastOnStart, lastOnEnd]);
};
function isPriorityPlaybackActive() {
  return isActive;
}
function dispatchPriorityPlaybackEvent() {
  if (!isActive) {
    isActive = true;
    startCallbacks.runCallbacks();
  }
  if (timeout) {
    clearTimeout(timeout);
    timeout = undefined;
  }

  // Race condition may happen if another `dispatchPriorityPlaybackEvent` is called before `onEnd`
  function onEnd() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = undefined;
    }
    isActive = false;
    endCallbacks.runCallbacks();
  }
  return onEnd;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (usePriorityPlaybackCheck);

/***/ }),

/***/ "./src/hooks/useResizeObserver.ts":
/*!****************************************!*\
  !*** ./src/hooks/useResizeObserver.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useResizeObserver)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _useStateRef__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useStateRef */ "./src/hooks/useStateRef.ts");



const elementObserverMap = new Map();
function useResizeObserver(ref, onResize, isDisabled = false) {
  const onResizeRef = (0,_useStateRef__WEBPACK_IMPORTED_MODULE_2__.useStateRef)(onResize);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const el = ref?.current;
    if (!el || isDisabled) {
      return undefined;
    }
    const callback = ([entry]) => {
      // Ignore updates when element is not properly mounted (`display: none`)
      if (entry.contentRect.width === 0 && entry.contentRect.height === 0) {
        return;
      }
      onResizeRef.current(entry);
    };
    let [observer, callbackManager] = elementObserverMap.get(el) || [undefined, undefined];
    if (!observer) {
      callbackManager = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
      observer = new ResizeObserver(callbackManager.runCallbacks);
      elementObserverMap.set(el, [observer, callbackManager]);
      observer.observe(el);
    }
    callbackManager.addCallback(callback);
    return () => {
      callbackManager.removeCallback(callback);
      if (!callbackManager.hasCallbacks()) {
        observer.unobserve(el);
        observer.disconnect();
        elementObserverMap.delete(el);
      }
    };
  }, [isDisabled, onResizeRef, ref]);
}

/***/ }),

/***/ "./src/hooks/useSharedIntersectionObserver.ts":
/*!****************************************************!*\
  !*** ./src/hooks/useSharedIntersectionObserver.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useSharedIntersectionObserver)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");




const elementObserverMap = new Map();
function useSharedIntersectionObserver(refOrElement, onIntersectionChange, isDisabled = false) {
  const onIntersectionChangeLast = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(onIntersectionChange);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const el = refOrElement && 'current' in refOrElement ? refOrElement.current : refOrElement;
    if (!el || isDisabled) {
      return undefined;
    }
    const entriesAccumulator = new Map();
    function flush() {
      for (const entry of entriesAccumulator.values()) {
        // Ignore updates when element is not properly mounted (`display: none`)
        if (!entry.target.offsetParent) {
          continue;
        }
        onIntersectionChangeLast(entry);
      }
      entriesAccumulator.clear();
    }
    const callback = ([entry]) => {
      entriesAccumulator.set(entry.target, entry);
      if (!(0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)()) {
        flush();
      } else {
        _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating.once(() => {
          (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMeasure)(flush);
        });
      }
    };
    let [observer, callbackManager] = elementObserverMap.get(el) || [undefined, undefined];
    if (!observer) {
      callbackManager = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_2__.createCallbackManager)();
      observer = new IntersectionObserver(callbackManager.runCallbacks);
      elementObserverMap.set(el, [observer, callbackManager]);
      observer.observe(el);
    }
    callbackManager.addCallback(callback);
    return () => {
      callbackManager.removeCallback(callback);
      if (!callbackManager.hasCallbacks()) {
        observer.unobserve(el);
        observer.disconnect();
        elementObserverMap.delete(el);
      }
    };
  }, [isDisabled, refOrElement]);
}

/***/ }),

/***/ "./src/hooks/useShowTransition.ts":
/*!****************************************!*\
  !*** ./src/hooks/useShowTransition.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useShowTransition)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _useDerivedSignal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _useDerivedState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useStateRef__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _useSyncEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useSyncEffectWithPrevDeps */ "./src/hooks/useSyncEffectWithPrevDeps.ts");









const CLOSE_DURATION = 350;
function useShowTransition(params) {
  const {
    isOpen,
    noMountTransition = false,
    noOpenTransition = false,
    noCloseTransition = false,
    closeDuration = CLOSE_DURATION,
    className = 'fast',
    prefix = '',
    shouldForceOpen,
    onCloseAnimationEnd
  } = params;

  // eslint-disable-next-line no-null/no-null
  const localRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const ref = params.ref || localRef;
  const closingTimeoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const [getState, setState] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)();
  const optionsRef = (0,_useStateRef__WEBPACK_IMPORTED_MODULE_6__.useStateRef)({
    closeDuration,
    noMountTransition,
    noOpenTransition,
    noCloseTransition
  });
  const onCloseEndLast = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(onCloseAnimationEnd);
  (0,_useSyncEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_8__["default"])(([prevIsOpen]) => {
    const options = optionsRef.current;
    if (shouldForceOpen) {
      setState('open');
      return;
    }
    if (isOpen) {
      if (closingTimeoutRef.current) {
        clearTimeout(closingTimeoutRef.current);
        closingTimeoutRef.current = undefined;
      }
      if (options.noOpenTransition || prevIsOpen === undefined && options.noMountTransition) {
        setState('open');
      } else {
        setState('scheduled-open');
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(() => {
          setState('open');
        });
      }
    } else if (prevIsOpen === undefined || options.noCloseTransition) {
      setState('closed');
    } else {
      setState('closing');
      closingTimeoutRef.current = window.setTimeout(() => {
        setState('closed');
        onCloseEndLast();
      }, options.closeDuration);
    }
  }, [isOpen, shouldForceOpen]);
  const applyClassNames = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    const element = ref.current;
    if (!element) return;
    if (className !== false) {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(element, 'opacity-transition');
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.addExtraClass)(element, className);
    }
    const state = getState();
    const shouldRender = state !== 'closed';
    const hasOpenClass = state === 'open';
    const isClosing = state === 'closing';
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(element, `${prefix}shown`, shouldRender);
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(element, `${prefix}not-shown`, !shouldRender);
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(element, `${prefix}open`, hasOpenClass);
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(element, `${prefix}not-open`, !hasOpenClass);
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.toggleExtraClass)(element, `${prefix}closing`, isClosing);
  });

  // Workaround for Chrome causing forced reflow in the middle of mutation phase when unmounting a focused element.
  // Due to such forced reflow setting initial class names in the first layout effect causes transitions to start.
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    ref.onChange = () => {
      ref.onChange = undefined;
      applyClassNames();
    };
  }, [applyClassNames, ref]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(applyClassNames, [applyClassNames, getState]);
  const withShouldRender = 'withShouldRender' in params && params.withShouldRender;
  const shouldRender = (0,_useDerivedState__WEBPACK_IMPORTED_MODULE_4__["default"])(() => withShouldRender && getState() !== 'closed', [withShouldRender, getState]);
  const getIsClosing = (0,_useDerivedSignal__WEBPACK_IMPORTED_MODULE_3__["default"])(() => getState() === 'closing', [getState]);
  if (withShouldRender) {
    return {
      ref,
      shouldRender,
      getIsClosing
    };
  }
  return {
    ref,
    getIsClosing
  };
}

/***/ }),

/***/ "./src/hooks/useShowTransitionDeprecated.ts":
/*!**************************************************!*\
  !*** ./src/hooks/useShowTransitionDeprecated.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/buildClassName */ "./src/util/buildClassName.ts");


const CLOSE_DURATION = 350;
const useShowTransitionDeprecated = (isOpen = false, onCloseTransitionEnd, noFirstOpenTransition = false, className = 'fast', noCloseTransition = false, closeDuration = CLOSE_DURATION, noOpenTransition = false) => {
  const [isClosed, setIsClosed] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!isOpen);
  const closeTimeoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  // СSS class should be added in a separate tick to turn on CSS transition.
  const [hasOpenClassName, setHasOpenClassName] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(isOpen && noFirstOpenTransition);
  if (isOpen) {
    setIsClosed(false);
    setHasOpenClassName(true);
    if (closeTimeoutRef.current) {
      window.clearTimeout(closeTimeoutRef.current);
      closeTimeoutRef.current = undefined;
    }
  } else {
    setHasOpenClassName(false);
    if (!isClosed && !closeTimeoutRef.current) {
      const exec = () => {
        setIsClosed(true);
        if (onCloseTransitionEnd) {
          onCloseTransitionEnd();
        }
        closeTimeoutRef.current = undefined;
      };
      if (noCloseTransition) {
        exec();
      } else {
        closeTimeoutRef.current = window.setTimeout(exec, closeDuration);
      }
    }
  }

  // `noCloseTransition`, when set to true, should remove the open class immediately
  const shouldHaveOpenClassName = hasOpenClassName && !(noCloseTransition && !isOpen) || noOpenTransition && isOpen;
  const isClosing = Boolean(closeTimeoutRef.current);
  const shouldRender = isOpen || isClosing;
  const transitionClassNames = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(className && 'opacity-transition', className, shouldHaveOpenClassName && 'open', !shouldHaveOpenClassName && 'not-open', shouldRender && 'shown', !shouldRender && 'not-shown', isClosing && 'closing');
  return {
    shouldRender,
    transitionClassNames,
    hasShownClass: shouldRender,
    hasOpenClass: shouldHaveOpenClassName,
    isClosing
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useShowTransitionDeprecated);

/***/ }),

/***/ "./src/hooks/useSignalEffect.ts":
/*!**************************************!*\
  !*** ./src/hooks/useSignalEffect.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useSignalEffect: () => (/* binding */ useSignalEffect)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_signals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/signals */ "./src/util/signals.ts");


function useSignalEffect(effect, dependencies) {
  // The is extracted from `useEffectOnce` to run before all effects
  const isFirstRun = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  if (isFirstRun.current) {
    isFirstRun.current = false;
    dependencies?.forEach(dependency => {
      if ((0,_util_signals__WEBPACK_IMPORTED_MODULE_1__.isSignal)(dependency)) {
        dependency.subscribe(effect);
      }
    });
  }
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useUnmountCleanup)(() => {
    (0,_util_signals__WEBPACK_IMPORTED_MODULE_1__.cleanupEffect)(effect);
  });
}

/***/ }),

/***/ "./src/hooks/useStateRef.ts":
/*!**********************************!*\
  !*** ./src/hooks/useStateRef.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useStateRef: () => (/* binding */ useStateRef)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");


// Allows to use state value as "silent" dependency in hooks (not causing updates).
// Also useful for state values that update frequently (such as controlled input value).
function useStateRef(value) {
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);
  ref.current = value;
  return ref;
}

/***/ }),

/***/ "./src/hooks/useSyncEffect.ts":
/*!************************************!*\
  !*** ./src/hooks/useSyncEffect.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useSyncEffect)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");


function useSyncEffect(effect, dependencies) {
  const prevDeps = (0,_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_1__["default"])(dependencies);
  const cleanupRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  if (!prevDeps || dependencies.some((d, i) => d !== prevDeps[i])) {
    cleanupRef.current?.();
    cleanupRef.current = effect(prevDeps || []) ?? undefined;
  }
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useUnmountCleanup)(() => {
    cleanupRef.current?.();
  });
}

/***/ }),

/***/ "./src/hooks/useSyncEffectWithPrevDeps.ts":
/*!************************************************!*\
  !*** ./src/hooks/useSyncEffectWithPrevDeps.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");


const useLayoutEffectWithPrevDeps = (cb, dependencies) => {
  const prevDepsRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  return (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_1__["default"])(() => {
    const prevDeps = prevDepsRef.current;
    prevDepsRef.current = dependencies;
    return cb(prevDeps || []);
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, dependencies);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useLayoutEffectWithPrevDeps);

/***/ }),

/***/ "./src/hooks/useThrottledCallback.ts":
/*!*******************************************!*\
  !*** ./src/hooks/useThrottledCallback.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useThrottledCallback)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");


function useThrottledCallback(fn, deps, msOrSchedulerFn, noFirst = false) {
  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  const fnMemo = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(fn, deps);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (typeof msOrSchedulerFn === 'number') {
      return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttle)(fnMemo, msOrSchedulerFn, !noFirst);
    } else {
      return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttleWith)(msOrSchedulerFn, fnMemo);
    }
  }, [fnMemo, msOrSchedulerFn, noFirst]);
}

/***/ }),

/***/ "./src/hooks/useThumbnail.ts":
/*!***********************************!*\
  !*** ./src/hooks/useThumbnail.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useThumbnail)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");




function useThumbnail(media) {
  const isMediaContainer = media && 'content' in media;
  const thumbDataUri = isMediaContainer ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageMediaThumbDataUri)(media) : media?.thumbnail?.dataUri;

  // TODO Find a way to update thumbnail on theme change
  const theme = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTheme)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)());
  const dataUri = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const uri = thumbDataUri;
    if (!uri || theme !== 'dark') return uri;
    return uri.replace('<svg', '<svg fill="white"');
  }, [thumbDataUri, theme]);
  return dataUri;
}

/***/ }),

/***/ "./src/hooks/useUniqueId.ts":
/*!**********************************!*\
  !*** ./src/hooks/useUniqueId.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useUniqueId)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_generateUniqueId__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/generateUniqueId */ "./src/util/generateUniqueId.ts");


function useUniqueId() {
  const idRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  if (!idRef.current) {
    idRef.current = (0,_util_generateUniqueId__WEBPACK_IMPORTED_MODULE_1__["default"])();
  }
  return idRef.current;
}

/***/ }),

/***/ "./src/hooks/useVideoCleanup.ts":
/*!**************************************!*\
  !*** ./src/hooks/useVideoCleanup.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useVideoCleanup)
/* harmony export */ });
/* harmony import */ var _lib_teact_dom_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/dom-events */ "./src/lib/teact/dom-events.ts");
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_browser_unloadVideo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/browser/unloadVideo */ "./src/util/browser/unloadVideo.ts");
/* harmony import */ var _useStateRef__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useStateRef */ "./src/hooks/useStateRef.ts");





// Fix memory leak when unmounting video element
function useVideoCleanup(videoRef, handlers) {
  const handlersRef = (0,_useStateRef__WEBPACK_IMPORTED_MODULE_3__.useStateRef)(handlers);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(() => {
    const videoEl = videoRef.current;
    if (!videoEl) return undefined;
    return () => {
      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
      const handlers2 = handlersRef.current;
      if (handlers2) {
        Object.entries(handlers2).forEach(([key, value]) => {
          videoEl.removeEventListener((0,_lib_teact_dom_events__WEBPACK_IMPORTED_MODULE_0__.resolveEventType)(key, videoEl), value, false);
        });
      }

      // It may be slow (specifically on iOS), so we postpone it after unmounting
      (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_1__.onFullyIdle)(() => {
        (0,_util_browser_unloadVideo__WEBPACK_IMPORTED_MODULE_2__["default"])(videoEl);
      });
    };
  }, [handlersRef, videoRef]);
}

/***/ }),

/***/ "./src/hooks/useVirtualBackdrop.ts":
/*!*****************************************!*\
  !*** ./src/hooks/useVirtualBackdrop.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useVirtualBackdrop)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

const BACKDROP_CLASSNAME = 'backdrop';

// This effect implements closing menus by clicking outside of them
// without adding extra elements to the DOM
function useVirtualBackdrop(isOpen, containerRef, onClose, ignoreRightClick, excludedClosestSelector) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isOpen || !onClose) {
      return undefined;
    }
    const handleEvent = e => {
      const container = containerRef.current;
      const target = e.target;
      if (!container || !target || ignoreRightClick && e.button === 2) {
        return;
      }
      if ((!container.contains(e.target) || target.classList.contains(BACKDROP_CLASSNAME)) && !(excludedClosestSelector && (target.matches(excludedClosestSelector) || target.closest(excludedClosestSelector)))) {
        e.preventDefault();
        e.stopPropagation();
        onClose?.();
      }
    };
    document.addEventListener('mousedown', handleEvent);
    return () => {
      document.removeEventListener('mousedown', handleEvent);
    };
  }, [excludedClosestSelector, ignoreRightClick, isOpen, containerRef, onClose]);
}

/***/ }),

/***/ "./src/hooks/window/useBackgroundMode.ts":
/*!***********************************************!*\
  !*** ./src/hooks/window/useBackgroundMode.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useBackgroundMode),
/* harmony export */   isBackgroundModeActive: () => (/* binding */ isBackgroundModeActive)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../useLastCallback */ "./src/hooks/useLastCallback.ts");



const blurCallbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
const focusCallbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
let isFocused = document.hasFocus();
window.addEventListener('blur', () => {
  if (!isFocused) {
    return;
  }
  isFocused = false;
  blurCallbacks.runCallbacks();
});
window.addEventListener('focus', () => {
  isFocused = true;
  focusCallbacks.runCallbacks();
});
function useBackgroundMode(onBlur, onFocus, isDisabled = false) {
  const lastOnBlur = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(onBlur);
  const lastOnFocus = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(onFocus);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) {
      return undefined;
    }
    if (!isFocused) {
      lastOnBlur();
    }
    blurCallbacks.addCallback(lastOnBlur);
    focusCallbacks.addCallback(lastOnFocus);
    return () => {
      focusCallbacks.removeCallback(lastOnFocus);
      blurCallbacks.removeCallback(lastOnBlur);
    };
  }, [isDisabled, lastOnBlur, lastOnFocus]);
}
function isBackgroundModeActive() {
  return !isFocused;
}

/***/ }),

/***/ "./src/hooks/window/useDevicePixelRatio.ts":
/*!*************************************************!*\
  !*** ./src/hooks/window/useDevicePixelRatio.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useDevicePixelRatio)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _useEffectOnce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../useEffectOnce */ "./src/hooks/useEffectOnce.ts");



const callbacks = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
function createListener() {
  window.matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`).addEventListener('change', callbacks.runCallbacks, {
    once: true
  });
}
function useDevicePixelRatio() {
  const [dpr, setDpr] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(window.devicePixelRatio);
  (0,_useEffectOnce__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    return callbacks.addCallback(() => {
      setDpr(window.devicePixelRatio);
    });
  });
  return dpr;
}
createListener();

// Set up new listener for the next `devicePixelRatio` change
callbacks.addCallback(createListener);

/***/ }),

/***/ "./src/hooks/window/useWindowSize.ts":
/*!*******************************************!*\
  !*** ./src/hooks/window/useWindowSize.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useWindowSize)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/windowSize */ "./src/util/windowSize.ts");
/* harmony import */ var _useDebouncedCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../useDebouncedCallback */ "./src/hooks/useDebouncedCallback.ts");




const THROTTLE = 250;
function useWindowSize() {
  const {
    width: initialWidth,
    height: initialHeight
  } = _util_windowSize__WEBPACK_IMPORTED_MODULE_2__["default"].get();
  const [width, setWidth] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(initialWidth);
  const [height, setHeight] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(initialHeight);
  const [isResizing, setIsResizing] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const setIsResizingDebounced = (0,_useDebouncedCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(setIsResizing, [setIsResizing], THROTTLE, true);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const throttledSetIsResizing = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttle)(() => {
      setIsResizing(true);
    }, THROTTLE, true);
    const throttledSetSize = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttle)(() => {
      const {
        width: newWidth,
        height: newHeight
      } = _util_windowSize__WEBPACK_IMPORTED_MODULE_2__["default"].get();
      setWidth(newWidth);
      setHeight(newHeight);
      setIsResizingDebounced(false);
    }, THROTTLE, false);
    const handleResize = () => {
      throttledSetIsResizing();
      throttledSetSize();
    };
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [setIsResizingDebounced]);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    width,
    height,
    isResizing
  }), [height, isResizing, width]);
}

/***/ }),

/***/ "./src/lib/fasterdom/fasterdom.ts":
/*!****************************************!*\
  !*** ./src/lib/fasterdom/fasterdom.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   disableStrict: () => (/* reexport safe */ _stricterdom__WEBPACK_IMPORTED_MODULE_2__.disableStrict),
/* harmony export */   enableStrict: () => (/* reexport safe */ _stricterdom__WEBPACK_IMPORTED_MODULE_2__.enableStrict),
/* harmony export */   forceMeasure: () => (/* reexport safe */ _stricterdom__WEBPACK_IMPORTED_MODULE_2__.forceMeasure),
/* harmony export */   forceMutation: () => (/* reexport safe */ _stricterdom__WEBPACK_IMPORTED_MODULE_2__.forceMutation),
/* harmony export */   getPhase: () => (/* reexport safe */ _stricterdom__WEBPACK_IMPORTED_MODULE_2__.getPhase),
/* harmony export */   requestForcedReflow: () => (/* binding */ requestForcedReflow),
/* harmony export */   requestMeasure: () => (/* binding */ requestMeasure),
/* harmony export */   requestMutation: () => (/* binding */ requestMutation),
/* harmony export */   requestNextMutation: () => (/* binding */ requestNextMutation),
/* harmony export */   setHandler: () => (/* reexport safe */ _stricterdom__WEBPACK_IMPORTED_MODULE_2__.setHandler),
/* harmony export */   setPhase: () => (/* reexport safe */ _stricterdom__WEBPACK_IMPORTED_MODULE_2__.setPhase)
/* harmony export */ });
/* harmony import */ var _util_safeExec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/safeExec */ "./src/util/safeExec.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _stricterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stricterdom */ "./src/lib/fasterdom/stricterdom.ts");



let pendingMeasureTasks = [];
let pendingMutationTasks = [];
let pendingForceReflowTasks = [];
const runUpdatePassOnRaf = throttleWithRafFallback(() => {
  const currentMeasureTasks = pendingMeasureTasks;
  pendingMeasureTasks = [];
  currentMeasureTasks.forEach(task => {
    (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_0__["default"])(task);
  });

  // We use promises to provide correct order for Mutation Observer callback microtasks
  Promise.resolve().then(() => {
    (0,_stricterdom__WEBPACK_IMPORTED_MODULE_2__.setPhase)('mutate');
    const currentMutationTasks = pendingMutationTasks;
    pendingMutationTasks = [];
    currentMutationTasks.forEach(task => {
      (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_0__["default"])(task);
    });
  }).then(() => {
    (0,_stricterdom__WEBPACK_IMPORTED_MODULE_2__.setPhase)('measure');
    const pendingForceReflowMutationTasks = [];
    // Will include tasks created during the loop
    for (const task of pendingForceReflowTasks) {
      (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_0__["default"])(() => {
        const mutationTask = task();
        if (mutationTask) {
          pendingForceReflowMutationTasks.push(mutationTask);
        }
      });
    }
    pendingForceReflowTasks = [];
    return pendingForceReflowMutationTasks;
  }).then(pendingForceReflowMutationTasks => {
    (0,_stricterdom__WEBPACK_IMPORTED_MODULE_2__.setPhase)('mutate');

    // Will include tasks created during the loop
    for (const task of pendingForceReflowMutationTasks) {
      (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_0__["default"])(task);
    }
  }).then(() => {
    (0,_stricterdom__WEBPACK_IMPORTED_MODULE_2__.setPhase)('measure');
  });
});
function requestMeasure(cb) {
  pendingMeasureTasks.push(cb);
  runUpdatePassOnRaf();
}
function requestMutation(cb) {
  pendingMutationTasks.push(cb);
  runUpdatePassOnRaf();
}
function requestNextMutation(cb) {
  requestMeasure(() => {
    requestMutation(cb);
  });
}
function requestForcedReflow(cb) {
  pendingForceReflowTasks.push(cb);
  runUpdatePassOnRaf();
}
function throttleWithRafFallback(fn) {
  return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttleWith)(throttledFn => {
    (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.fastRaf)(throttledFn, true);
  }, fn);
}


/***/ }),

/***/ "./src/lib/fasterdom/layoutCauses.ts":
/*!*******************************************!*\
  !*** ./src/lib/fasterdom/layoutCauses.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// https://gist.github.com/paulirish/5d52fb081b3570c81e3a

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  Element: {
    props: ['clientLeft', 'clientTop', 'clientWidth', 'clientHeight', 'scrollWidth', 'scrollHeight', 'scrollLeft', 'scrollTop'],
    methods: ['getClientRects', 'getBoundingClientRect', 'scrollBy', 'scrollTo', 'scrollIntoView', 'scrollIntoViewIfNeeded']
  },
  HTMLElement: {
    props: ['offsetLeft', 'offsetTop', 'offsetWidth', 'offsetHeight', 'offsetParent', 'innerText'],
    methods: ['focus']
  },
  window: {
    props: ['scrollX', 'scrollY', 'innerHeight', 'innerWidth'],
    methods: ['getComputedStyle']
  },
  VisualViewport: {
    props: ['height', 'width', 'offsetTop', 'offsetLeft']
  },
  Document: {
    props: ['scrollingElement'],
    methods: ['elementFromPoint']
  },
  HTMLInputElement: {
    methods: ['select']
  },
  MouseEvent: {
    props: ['layerX', 'layerY', 'offsetX', 'offsetY']
  },
  Range: {
    methods: ['getClientRects', 'getBoundingClientRect']
  }
});

/***/ }),

/***/ "./src/lib/fasterdom/stricterdom.ts":
/*!******************************************!*\
  !*** ./src/lib/fasterdom/stricterdom.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   disableStrict: () => (/* binding */ disableStrict),
/* harmony export */   enableStrict: () => (/* binding */ enableStrict),
/* harmony export */   forceMeasure: () => (/* binding */ forceMeasure),
/* harmony export */   forceMutation: () => (/* binding */ forceMutation),
/* harmony export */   getPhase: () => (/* binding */ getPhase),
/* harmony export */   setHandler: () => (/* binding */ setHandler),
/* harmony export */   setPhase: () => (/* binding */ setPhase)
/* harmony export */ });
/* harmony import */ var _layoutCauses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layoutCauses */ "./src/lib/fasterdom/layoutCauses.ts");

// eslint-disable-next-line no-console
const DEFAULT_ERROR_HANDLER = console.error;
let onError = DEFAULT_ERROR_HANDLER;
const nativeMethods = new Map();
let phase = 'measure';
let isStrict = false;
let observer;
function setPhase(newPhase) {
  phase = newPhase;
}
function getPhase() {
  return phase;
}
function enableStrict() {
  if (isStrict) return;
  isStrict = true;
  setupLayoutDetectors();
  setupMutationObserver();
}
function disableStrict() {
  if (!isStrict) return;
  clearMutationObserver();
  clearLayoutDetectors();
  isStrict = false;
}
function forceMeasure(cb) {
  if (phase !== 'mutate') {
    throw new Error('The current phase is \'measure\'');
  }
  phase = 'measure';
  const result = cb();
  phase = 'mutate';
  return result;
}
const forcedMutationAllowedFor = new Set();
function forceMutation(cb, nodes) {
  if (phase !== 'measure') {
    throw new Error('The current phase is \'mutate\'');
  }
  if (isStrict) {
    if (Array.isArray(nodes)) {
      nodes.forEach(node => {
        forcedMutationAllowedFor.add(node);
      });
    } else {
      forcedMutationAllowedFor.add(nodes);
    }
  }
  return cb();
}
function setHandler(handler) {
  onError = handler || DEFAULT_ERROR_HANDLER;
}
function setupLayoutDetectors() {
  Object.entries(_layoutCauses__WEBPACK_IMPORTED_MODULE_0__["default"]).forEach(([name, causes]) => {
    const entity = window[name];
    if (!entity) return;
    const prototype = typeof entity === 'object' ? entity : entity.prototype;
    if ('props' in causes) {
      causes.props.forEach(prop => {
        const nativeGetter = Object.getOwnPropertyDescriptor(prototype, prop)?.get;
        if (!nativeGetter) {
          return;
        }
        nativeMethods.set(`${name}#${prop}`, nativeGetter);
        Object.defineProperty(prototype, prop, {
          get() {
            onMeasure(prop);
            return nativeGetter.call(this);
          }
        });
      });
    }
    if ('methods' in causes) {
      causes.methods.forEach(method => {
        const nativeMethod = prototype[method];
        nativeMethods.set(`${name}#${method}`, nativeMethod);

        // eslint-disable-next-line func-names
        prototype[method] = function (...args) {
          onMeasure(method);
          return nativeMethod.apply(this, args);
        };
      });
    }
  });
}
function clearLayoutDetectors() {
  Object.entries(_layoutCauses__WEBPACK_IMPORTED_MODULE_0__["default"]).forEach(([name, causes]) => {
    const entity = window[name];
    if (!entity) return;
    const prototype = typeof entity === 'object' ? entity : entity.prototype;
    if ('props' in causes) {
      causes.props.forEach(prop => {
        const nativeGetter = nativeMethods.get(`${name}#${prop}`);
        if (!nativeGetter) {
          return;
        }
        Object.defineProperty(prototype, prop, {
          get: nativeGetter
        });
      });
    }
    if ('methods' in causes) {
      causes.methods.forEach(method => {
        prototype[method] = nativeMethods.get(`${name}#${method}`);
      });
    }
  });
  nativeMethods.clear();
}
function setupMutationObserver() {
  observer = new MutationObserver(mutations => {
    if (phase !== 'mutate') {
      mutations.forEach(({
        target,
        type,
        attributeName
      }) => {
        if (!document.contains(target)) {
          return;
        }
        if (forcedMutationAllowedFor.has(target)) {
          return;
        }
        if (type === 'childList' && target instanceof HTMLElement && target.contentEditable) {
          return;
        }
        if (attributeName?.startsWith('data-')) {
          return;
        }

        // eslint-disable-next-line no-console
        onError(new Error(`Unexpected mutation detected: \`${type === 'attributes' ? attributeName : type}\``));
      });
    }
    forcedMutationAllowedFor.clear();
  });
  observer.observe(document.body, {
    childList: true,
    attributes: true,
    subtree: true,
    characterData: false
  });
}
function clearMutationObserver() {
  observer?.disconnect();
  observer = undefined;
}
function onMeasure(propName) {
  if (phase !== 'measure') {
    onError(new Error(`Unexpected measurement detected: \`${propName}\``));
  }
}

/***/ }),

/***/ "./src/lib/punycode.js":
/*!*****************************!*\
  !*** ./src/lib/punycode.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* eslint-disable no-nested-ternary */
/* eslint-disable no-bitwise */
/* eslint-disable @typescript-eslint/naming-convention */

const utf16 = {
  // The utf16-class is necessary to convert from javascripts internal character representation to unicode and back.
  decode: input => {
    const output = [];
    let i = 0;
    const len = input.length;
    let value;
    let extra;
    while (i < len) {
      value = input.charCodeAt(i++);
      if ((value & 0xf800) === 0xd800) {
        extra = input.charCodeAt(i++);
        if ((value & 0xfc00) !== 0xd800 || (extra & 0xfc00) !== 0xdc00) {
          throw new RangeError('UTF-16(decode): Illegal UTF-16 sequence');
        }
        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
      }
      output.push(value);
    }
    return output;
  },
  encode: input => {
    const output = [];
    let i = 0;
    const len = input.length;
    let value;
    while (i < len) {
      value = input[i++];
      if ((value & 0xf800) === 0xd800) {
        throw new RangeError('UTF-16(encode): Illegal UTF-16 value');
      }
      if (value > 0xffff) {
        value -= 0x10000;
        output.push(String.fromCharCode(value >>> 10 & 0x3ff | 0xd800));
        value = 0xdc00 | value & 0x3ff;
      }
      output.push(String.fromCharCode(value));
    }
    return output.join('');
  }
};

// Default parameters
const initial_n = 0x80;
const initial_bias = 72;
const delimiter = '\x2D';
const base = 36;
const damp = 700;
const tmin = 1;
const tmax = 26;
const skew = 38;
const maxint = 0x7fffffff;

// decode_digit(cp) returns the numeric value of a basic code
// point (for use in representing integers) in the range 0 to
// base-1, or base if cp is does not represent a value.

function decode_digit(cp) {
  return cp - 48 < 10 ? cp - 22 : cp - 65 < 26 ? cp - 65 : cp - 97 < 26 ? cp - 97 : base;
}

// ** Bias adaptation function **
function adapt(delta, numpoints, firsttime) {
  let k;
  delta = firsttime ? Math.floor(delta / damp) : delta >> 1;
  delta += Math.floor(delta / numpoints);
  for (k = 0; delta > (base - tmin) * tmax >> 1; k += base) {
    delta = Math.floor(delta / (base - tmin));
  }
  return Math.floor(k + (base - tmin + 1) * delta / (delta + skew));
}

// Main decode
function decode(input, preserveCase) {
  // Dont use utf16
  const output = [];
  const case_flags = [];
  const input_length = input.length;
  let n;
  let out;
  let i;
  let bias;
  let basic;
  let j;
  let ic;
  let oldi;
  let w;
  let k;
  let digit;
  let t;
  let len;

  // Initialize the state:

  n = initial_n;
  i = 0;
  bias = initial_bias;

  // Handle the basic code points: Let basic be the number of input code
  // points before the last delimiter, or 0 if there is none, then
  // copy the first basic code points to the output.

  basic = input.lastIndexOf(delimiter);
  if (basic < 0) basic = 0;
  for (j = 0; j < basic; ++j) {
    if (preserveCase) case_flags[output.length] = input.charCodeAt(j) - 65 < 26;
    if (input.charCodeAt(j) >= 0x80) {
      throw new RangeError('Illegal input >= 0x80');
    }
    output.push(input.charCodeAt(j));
  }

  // Main decoding loop: Start just after the last delimiter if any
  // basic code points were copied; start at the beginning otherwise.

  for (ic = basic > 0 ? basic + 1 : 0; ic < input_length;) {
    // ic is the index of the next character to be consumed,

    // Decode a generalized variable-length integer into delta,
    // which gets added to i. The overflow checking is easier
    // if we increase i as we go, then subtract off its starting
    // value at the end to obtain delta.
    for (oldi = i, w = 1, k = base;; k += base) {
      if (ic >= input_length) {
        throw RangeError('punycode_bad_input(1)');
      }
      digit = decode_digit(input.charCodeAt(ic++));
      if (digit >= base) {
        throw RangeError('punycode_bad_input(2)');
      }
      if (digit > Math.floor((maxint - i) / w)) {
        throw RangeError('punycode_overflow(1)');
      }
      i += digit * w;
      t = k <= bias ? tmin : k >= bias + tmax ? tmax : k - bias;
      if (digit < t) {
        break;
      }
      if (w > Math.floor(maxint / (base - t))) {
        throw RangeError('punycode_overflow(2)');
      }
      w *= base - t;
    }
    out = output.length + 1;
    bias = adapt(i - oldi, out, oldi === 0);

    // i was supposed to wrap around from out to 0,
    // incrementing n each time, so we'll fix that now:
    if (Math.floor(i / out) > maxint - n) {
      throw RangeError('punycode_overflow(3)');
    }
    n += Math.floor(i / out);
    i %= out;

    // Insert n at position i of the output:
    // Case of last character determines uppercase flag:
    if (preserveCase) {
      case_flags.splice(i, 0, input.charCodeAt(ic - 1) - 65 < 26);
    }
    output.splice(i, 0, n);
    i++;
  }
  if (preserveCase) {
    for (i = 0, len = output.length; i < len; i++) {
      if (case_flags[i]) {
        output[i] = String.fromCharCode(output[i]).toUpperCase().charCodeAt(0);
      }
    }
  }
  return utf16.encode(output);
}
function toUnicode(domain) {
  const domain_array = domain.split('.');
  const out = [];
  for (let i = 0; i < domain_array.length; ++i) {
    const s = domain_array[i];
    out.push(s.match(/^xn--/) ? decode(s.slice(4)) : s);
  }
  return out.join('.');
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toUnicode);

/***/ }),

/***/ "./src/lib/rlottie/RLottie.async.ts":
/*!******************************************!*\
  !*** ./src/lib/rlottie/RLottie.async.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ensureRLottie: () => (/* binding */ ensureRLottie),
/* harmony export */   getRLottie: () => (/* binding */ getRLottie)
/* harmony export */ });
let promise;
let RLottie;

// Time for the main interface to completely load
const LOTTIE_LOAD_DELAY = 3000;
async function ensureRLottie() {
  if (!promise) {
    promise = __webpack_require__.e(/*! import() */ "src_lib_rlottie_RLottie_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./RLottie */ "./src/lib/rlottie/RLottie.ts")).then(module => module.default);
    RLottie = await promise;
  }
  return promise;
}
function getRLottie() {
  return RLottie;
}
setTimeout(ensureRLottie, LOTTIE_LOAD_DELAY);

/***/ }),

/***/ "./src/lib/teact/dom-events.ts":
/*!*************************************!*\
  !*** ./src/lib/teact/dom-events.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addEventListener: () => (/* binding */ addEventListener),
/* harmony export */   removeAllDelegatedListeners: () => (/* binding */ removeAllDelegatedListeners),
/* harmony export */   removeEventListener: () => (/* binding */ removeEventListener),
/* harmony export */   resolveEventType: () => (/* binding */ resolveEventType)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");

const NON_BUBBLEABLE_EVENTS = new Set(['scroll', 'mouseenter', 'mouseleave', 'load']);
const documentEventCounters = {};
const delegationRegistryByEventType = {};
const delegatedEventTypesByElement = new Map();
function addEventListener(element, propName, handler, asCapture = false) {
  const eventType = resolveEventType(propName, element);
  if (canUseEventDelegation(eventType, element, asCapture)) {
    addDelegatedListener(eventType, element, handler);
  } else {
    element.addEventListener(eventType, handler, asCapture);
  }
}
function removeEventListener(element, propName, handler, asCapture = false) {
  const eventType = resolveEventType(propName, element);
  if (canUseEventDelegation(eventType, element, asCapture)) {
    removeDelegatedListener(eventType, element);
  } else {
    element.removeEventListener(eventType, handler, asCapture);
  }
}
function resolveEventType(propName, element) {
  const eventType = propName.replace(/^on/, '').replace(/Capture$/, '').toLowerCase();
  if (eventType === 'change' && element.tagName !== 'SELECT') {
    // React behavior repeated here.
    // https://stackoverflow.com/questions/38256332/in-react-whats-the-difference-between-onchange-and-oninput
    return 'input';
  }
  if (eventType === 'doubleclick') {
    return 'dblclick';
  }

  // Replace focus/blur by their "bubbleable" versions
  if (eventType === 'focus') {
    return 'focusin';
  }
  if (eventType === 'blur') {
    return 'focusout';
  }
  return eventType;
}
function canUseEventDelegation(realEventType, element, asCapture) {
  return !asCapture && !NON_BUBBLEABLE_EVENTS.has(realEventType) && element.tagName !== 'VIDEO' && element.tagName !== 'IFRAME';
}
function addDelegatedListener(eventType, element, handler) {
  if (!documentEventCounters[eventType]) {
    documentEventCounters[eventType] = 0;
    document.addEventListener(eventType, handleEvent);
  }
  resolveDelegationRegistry(eventType).set(element, handler);
  resolveDelegatedEventTypes(element).add(eventType);
  documentEventCounters[eventType]++;
}
function removeDelegatedListener(eventType, element) {
  documentEventCounters[eventType]--;
  if (!documentEventCounters[eventType]) {
    // Synchronous deletion on 0 will cause perf degradation in the case of 1 element
    // which is not a real case, so it's ok to do it this way
    document.removeEventListener(eventType, handleEvent);
  }
  delegationRegistryByEventType[eventType].delete(element);
  delegatedEventTypesByElement.get(element).delete(eventType);
}
function removeAllDelegatedListeners(element) {
  const eventTypes = delegatedEventTypesByElement.get(element);
  if (!eventTypes) {
    return;
  }
  eventTypes.forEach(eventType => removeDelegatedListener(eventType, element));
  delegatedEventTypesByElement.delete(element);
}
function handleEvent(realEvent) {
  const events = delegationRegistryByEventType[realEvent.type];
  if (events) {
    let furtherCallsPrevented = false;
    let current = realEvent.target;
    const stopPropagation = () => {
      furtherCallsPrevented = true;
    };
    const preventDefault = () => {
      realEvent.preventDefault();
    };

    // Proxy is a simplest way to provide an access to the event property
    const event = new Proxy(realEvent, {
      get(target, p) {
        if (p === 'currentTarget') {
          return current;
        }
        if (p === 'stopPropagation' || p === 'stopImmediatePropagation') {
          return stopPropagation;
        }
        if (p === 'preventDefault') {
          // "this" is changed to proxy and one can't call methods via it
          return preventDefault;
        }
        return Reflect.get(target, p);
      }
    });

    // This can also be limited by teact root
    while (current && current !== document.body) {
      const handler = events.get(current);
      if (handler) {
        handler(event);
        if (furtherCallsPrevented) {
          return;
        }
      }
      current = current.parentNode;
    }
  }
}
function resolveDelegationRegistry(eventType) {
  if (!delegationRegistryByEventType[eventType]) {
    delegationRegistryByEventType[eventType] = new Map();
  }
  return delegationRegistryByEventType[eventType];
}
function resolveDelegatedEventTypes(element) {
  const existing = delegatedEventTypesByElement.get(element);
  if (existing) {
    return existing;
  }
  const newSet = new Set();
  delegatedEventTypesByElement.set(element, newSet);
  return newSet;
}
if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
  document.addEventListener('dblclick', () => {
    const documentListenersCount = Object.keys(documentEventCounters).length;
    const delegatedHandlersCount1 = Object.values(documentEventCounters).reduce((acc, counter) => acc + counter, 0);
    const delegationRegistriesCount = Object.keys(delegationRegistryByEventType).length;
    const delegatedHandlersCount2 = Object.values(delegationRegistryByEventType).reduce((acc, delegationRegistry) => acc + delegationRegistry.size, 0);
    const delegationElementsCount = delegatedEventTypesByElement.size;
    const delegatedEventTypesCount = Array.from(delegatedEventTypesByElement.values()).reduce((acc, eventTypes) => acc + eventTypes.size, 0);

    // eslint-disable-next-line no-console
    console.warn('DELEGATED EVENTS STATS', {
      delegatedHandlersCount1,
      delegatedHandlersCount2,
      delegatedEventTypesCount,
      delegationRegistriesCount,
      delegationElementsCount,
      documentListenersCount
    });
  });
}

/***/ }),

/***/ "./src/lib/teact/heavyAnimation.ts":
/*!*****************************************!*\
  !*** ./src/lib/teact/heavyAnimation.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   beginHeavyAnimation: () => (/* binding */ beginHeavyAnimation),
/* harmony export */   getIsBlockingAnimating: () => (/* binding */ getIsBlockingAnimating),
/* harmony export */   getIsHeavyAnimating: () => (/* binding */ getIsHeavyAnimating),
/* harmony export */   onFullyIdle: () => (/* binding */ onFullyIdle),
/* harmony export */   throttleWithFullyIdle: () => (/* binding */ throttleWithFullyIdle)
/* harmony export */ });
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_signals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/signals */ "./src/util/signals.ts");
/* harmony import */ var _fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");



const AUTO_END_TIMEOUT = 1000;
let counter = 0;
let counterBlocking = 0;
const [getIsAnimating, setIsAnimating] = (0,_util_signals__WEBPACK_IMPORTED_MODULE_1__.createSignal)(false);
const [getIsBlockingAnimating, setIsBlockingAnimating] = (0,_util_signals__WEBPACK_IMPORTED_MODULE_1__.createSignal)(false);
const getIsHeavyAnimating = getIsAnimating;

function beginHeavyAnimation(duration = AUTO_END_TIMEOUT, isBlocking = false) {
  counter++;
  if (counter === 1) {
    setIsAnimating(true);
  }
  if (isBlocking) {
    counterBlocking++;
    if (counterBlocking === 1) {
      setIsBlockingAnimating(true);
    }
  }
  const timeout = window.setTimeout(onEnd, duration);
  let hasEnded = false;
  function onEnd() {
    if (hasEnded) return;
    hasEnded = true;
    clearTimeout(timeout);
    counter--;
    if (counter === 0) {
      setIsAnimating(false);
    }
    if (isBlocking) {
      counterBlocking--;
      if (counterBlocking === 0) {
        setIsBlockingAnimating(false);
      }
    }
  }
  return onEnd;
}
function onFullyIdle(cb) {
  (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_0__.onIdle)(() => {
    if (getIsAnimating()) {
      (0,_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(() => {
        onFullyIdle(cb);
      });
    } else {
      cb();
    }
  });
}
function throttleWithFullyIdle(fn) {
  return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_0__.throttleWith)(onFullyIdle, fn);
}

/***/ }),

/***/ "./src/lib/teact/teact-dom.ts":
/*!************************************!*\
  !*** ./src/lib/teact/teact-dom.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addExtraClass: () => (/* binding */ addExtraClass),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   removeExtraClass: () => (/* binding */ removeExtraClass),
/* harmony export */   setExtraStyles: () => (/* binding */ setExtraStyles),
/* harmony export */   toggleExtraClass: () => (/* binding */ toggleExtraClass)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _dom_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-events */ "./src/lib/teact/dom-events.ts");
/* harmony import */ var _teact__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./teact */ "./src/lib/teact/teact.ts");




const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
const FILTERED_ATTRIBUTES = new Set(['key', 'ref', 'teactFastList', 'teactOrderKey']);
const HTML_ATTRIBUTES = new Set(['dir', 'role', 'form']);
const CONTROLLABLE_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];
const MAPPED_ATTRIBUTES = {
  autoPlay: 'autoplay',
  autoComplete: 'autocomplete'
};
const INDEX_KEY_PREFIX = '__indexKey#';
const headsByElement = new WeakMap();
const extraClasses = new WeakMap();
const extraStyles = new WeakMap();

// eslint-disable-next-line @typescript-eslint/naming-convention
let DEBUG_virtualTreeSize = 1;
function render($element, parentEl) {
  if (!headsByElement.has(parentEl)) {
    headsByElement.set(parentEl, {
      children: []
    });
  }
  const runImmediateEffects = (0,_teact__WEBPACK_IMPORTED_MODULE_3__.captureImmediateEffects)();
  const $head = headsByElement.get(parentEl);
  const $renderedChild = renderWithVirtual(parentEl, $head.children[0], $element, $head, {}, 0);
  runImmediateEffects?.();
  $head.children = $renderedChild ? [$renderedChild] : [];
  if (false) {}
  return undefined;
}
function renderWithVirtual(parentEl, $current, $new, $parent, currentContext, index, options = {}) {
  const {
    skipComponentUpdate,
    fragment
  } = options;
  let {
    nextSibling,
    namespace
  } = options;
  const isCurrentComponent = $current?.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Component;
  const isNewComponent = $new?.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Component;
  const $newAsReal = $new;
  const isCurrentFragment = !isCurrentComponent && $current?.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Fragment;
  const isNewFragment = !isNewComponent && $new?.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Fragment;
  if ($new?.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Tag) {
    if ($new.tag === 'svg') namespace = SVG_NAMESPACE;
    if ($new.props.xmlns) namespace = $new.props.xmlns;
  }
  if (!skipComponentUpdate && isCurrentComponent && isNewComponent && !(0,_teact__WEBPACK_IMPORTED_MODULE_3__.hasElementChanged)($current, $new)) {
    $new = updateComponent($current, $new);
  }

  // Parent element may have changed, so we need to update the listener closure.
  if (!skipComponentUpdate && isNewComponent && $new.componentInstance.mountState === _teact__WEBPACK_IMPORTED_MODULE_3__.MountState.Mounted) {
    setupComponentUpdateListener(parentEl, $new, $parent, currentContext, index);
  }
  if ($current === $new) {
    return $new;
  }
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG && $new) {
    const newTarget = 'target' in $new && $new.target;
    if (newTarget && (!$current || 'target' in $current && newTarget !== $current.target)) {
      throw new Error('[Teact] Cached virtual element was moved within tree');
    }
  }
  if (!$current && $new) {
    if (isNewComponent || isNewFragment) {
      if (isNewComponent) {
        $new = initComponent(parentEl, $new, $parent, currentContext, index);
        currentContext = $new.componentInstance.context ?? currentContext;
      }
      mountChildren(parentEl, $new, currentContext, {
        nextSibling,
        fragment,
        namespace
      });
    } else {
      const canSetTextContent = !fragment && !nextSibling && $newAsReal.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Text && $parent.children.length === 1 && !parentEl.firstChild;
      if (canSetTextContent) {
        parentEl.textContent = $newAsReal.value;
        $newAsReal.target = parentEl.firstChild;
      } else {
        const node = createNode($newAsReal, currentContext, namespace);
        $newAsReal.target = node;
        insertBefore(fragment || parentEl, node, nextSibling);
        if ($newAsReal.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Tag) {
          setElementRef($newAsReal, node);
        }
      }
    }
  } else if ($current && !$new) {
    remount(parentEl, $current, currentContext, undefined);
  } else if ($current && $new) {
    if ((0,_teact__WEBPACK_IMPORTED_MODULE_3__.hasElementChanged)($current, $new)) {
      if (!nextSibling) {
        nextSibling = getNextSibling($current);
      }
      if (isNewComponent || isNewFragment) {
        if (isNewComponent) {
          $new = initComponent(parentEl, $new, $parent, currentContext, index);
          currentContext = $new.componentInstance.context ?? currentContext;
        }
        remount(parentEl, $current, currentContext, undefined);
        mountChildren(parentEl, $new, currentContext, {
          nextSibling,
          fragment,
          namespace
        });
      } else {
        const node = createNode($newAsReal, currentContext, namespace);
        $newAsReal.target = node;
        remount(parentEl, $current, currentContext, node, nextSibling);
        if ($newAsReal.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Tag) {
          setElementRef($newAsReal, node);
        }
      }
    } else {
      const isComponent = isCurrentComponent && isNewComponent;
      const isFragment = isCurrentFragment && isNewFragment;
      if (isComponent || isFragment) {
        renderChildren($current, $new, currentContext, parentEl, nextSibling, options.forceMoveToEnd);
      } else {
        const $currentAsReal = $current;
        const currentTarget = $currentAsReal.target;
        $newAsReal.target = currentTarget;
        $currentAsReal.target = undefined; // Help GC

        const isTag = $current.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Tag;
        if (isTag) {
          const $newAsTag = $new;
          setElementRef($current, undefined);
          setElementRef($newAsTag, currentTarget);
          if (nextSibling || options.forceMoveToEnd) {
            insertBefore(parentEl, currentTarget, nextSibling);
          }
          updateAttributes($current, $newAsTag, currentTarget, namespace);
          renderChildren($current, $newAsTag, currentContext, currentTarget, undefined, undefined, namespace);
        }
      }
    }
  }
  return $new;
}
function initComponent(parentEl, $element, $parent, currentContext, index) {
  const {
    componentInstance
  } = $element;
  $element.componentInstance.context = currentContext;
  if (componentInstance.mountState === _teact__WEBPACK_IMPORTED_MODULE_3__.MountState.New) {
    $element = (0,_teact__WEBPACK_IMPORTED_MODULE_3__.mountComponent)(componentInstance);
    setupComponentUpdateListener(parentEl, $element, $parent, currentContext, index);
  }
  return $element;
}
function updateComponent($current, $new) {
  $current.componentInstance.props = $new.componentInstance.props;
  return (0,_teact__WEBPACK_IMPORTED_MODULE_3__.renderComponent)($current.componentInstance);
}
function setupComponentUpdateListener(parentEl, $element, $parent, currentContext, index) {
  const {
    componentInstance
  } = $element;
  componentInstance.onUpdate = () => {
    $parent.children[index] = renderWithVirtual(parentEl, $parent.children[index], componentInstance.$element, $parent, currentContext, index, {
      skipComponentUpdate: true
    });
  };
}
function mountChildren(parentEl, $element, currentContext, options) {
  const {
    children
  } = $element;
  for (let i = 0, l = children.length; i < l; i++) {
    const $child = children[i];
    const $renderedChild = renderWithVirtual(parentEl, undefined, $child, $element, currentContext, i, options);
    if ($renderedChild !== $child) {
      children[i] = $renderedChild;
    }
  }
}
function unmountChildren(parentEl, $element, currentContext) {
  for (const $child of $element.children) {
    renderWithVirtual(parentEl, $child, undefined, $element, currentContext, -1);
  }
}
function createNode($element, currentContext, namespace = HTML_NAMESPACE) {
  if ($element.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Empty) {
    return document.createTextNode('');
  }
  if ($element.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Text) {
    return document.createTextNode($element.value);
  }
  const {
    tag,
    props,
    children
  } = $element;
  const element = document.createElementNS(namespace, tag);
  processControlled(tag, props);

  // eslint-disable-next-line no-restricted-syntax
  for (const key in props) {
    if (!props.hasOwnProperty(key)) continue;
    if (props[key] !== undefined) {
      setAttribute(element, key, props[key], namespace);
    }
  }
  processUncontrolledOnMount(element, props);
  for (let i = 0, l = children.length; i < l; i++) {
    const $child = children[i];
    const $renderedChild = renderWithVirtual(element, undefined, $child, $element, currentContext, i, {
      namespace
    });
    if ($renderedChild !== $child) {
      children[i] = $renderedChild;
    }
  }
  return element;
}
function remount(parentEl, $current, currentContext, node, componentNextSibling) {
  const isComponent = $current.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Component;
  const isFragment = !isComponent && $current.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Fragment;
  if (isComponent || isFragment) {
    if (isComponent) {
      (0,_teact__WEBPACK_IMPORTED_MODULE_3__.unmountComponent)($current.componentInstance);
    }
    unmountChildren(parentEl, $current, currentContext);
    if (node) {
      insertBefore(parentEl, node, componentNextSibling);
    }
  } else {
    if (node) {
      parentEl.replaceChild(node, $current.target);
    } else {
      parentEl.removeChild($current.target);
    }
    unmountRealTree($current);
  }
}
function unmountRealTree($element) {
  if ($element.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Component) {
    (0,_teact__WEBPACK_IMPORTED_MODULE_3__.unmountComponent)($element.componentInstance);
  } else if ($element.type !== _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Fragment) {
    if ($element.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Tag) {
      extraClasses.delete($element.target);
      setElementRef($element, undefined);
      (0,_dom_events__WEBPACK_IMPORTED_MODULE_2__.removeAllDelegatedListeners)($element.target);
    }
    $element.target = undefined; // Help GC

    if ($element.type !== _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Tag) {
      return;
    }
  }
  for (const $child of $element.children) {
    unmountRealTree($child);
  }
}
function insertBefore(parentEl, node, nextSibling) {
  if (nextSibling) {
    parentEl.insertBefore(node, nextSibling);
  } else {
    parentEl.appendChild(node);
  }
}
function getNextSibling($current) {
  if ($current.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Component || $current.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Fragment) {
    const lastChild = $current.children[$current.children.length - 1];
    return getNextSibling(lastChild);
  }
  return $current.target.nextSibling || undefined;
}
function renderChildren($current, $new, currentContext, currentEl, nextSibling, forceMoveToEnd = false, namespace) {
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
    DEBUG_checkKeyUniqueness($new.children);
  }
  if ('props' in $new && $new.props.teactFastList) {
    renderFastListChildren($current, $new, currentContext, currentEl);
    return;
  }
  const currentChildren = $current.children;
  const newChildren = $new.children;
  const currentChildrenLength = currentChildren.length;
  const newChildrenLength = newChildren.length;
  const maxLength = Math.max(currentChildrenLength, newChildrenLength);
  const fragment = newChildrenLength > currentChildrenLength ? document.createDocumentFragment() : undefined;
  const lastCurrentChild = $current.children[currentChildrenLength - 1];
  const fragmentNextSibling = fragment && (nextSibling || (lastCurrentChild ? getNextSibling(lastCurrentChild) : undefined));
  for (let i = 0; i < maxLength; i++) {
    const $renderedChild = renderWithVirtual(currentEl, currentChildren[i], newChildren[i], $new, currentContext, i, i >= currentChildrenLength ? {
      fragment,
      namespace
    } : {
      nextSibling,
      forceMoveToEnd,
      namespace
    });
    if ($renderedChild && $renderedChild !== newChildren[i]) {
      newChildren[i] = $renderedChild;
    }
  }
  if (fragment) {
    insertBefore(currentEl, fragment, fragmentNextSibling);
  }
}

// This function allows to prepend/append a bunch of new DOM nodes to the top/bottom of preserved ones.
// It also allows to selectively move particular preserved nodes within their DOM list.
function renderFastListChildren($current, $new, currentContext, currentEl) {
  const currentChildren = $current.children;
  const newChildren = $new.children;
  const newKeys = new Set();
  for (const $newChild of newChildren) {
    const key = 'props' in $newChild ? $newChild.props.key : undefined;
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG && (0,_teact__WEBPACK_IMPORTED_MODULE_3__.isParentElement)($newChild)) {
      // eslint-disable-next-line no-null/no-null
      if (key === undefined || key === null) {
        // eslint-disable-next-line no-console
        console.warn('Missing `key` in `teactFastList`');
      }
      if ($newChild.type === _teact__WEBPACK_IMPORTED_MODULE_3__.VirtualType.Fragment) {
        throw new Error('[Teact] Fragment can not be child of container with `teactFastList`');
      }
    }
    newKeys.add(key);
  }

  // Build a collection of old children that also remain in the new list
  let currentRemainingIndex = 0;
  const remainingByKey = {};
  for (let i = 0, l = currentChildren.length; i < l; i++) {
    const $currentChild = currentChildren[i];
    let key = 'props' in $currentChild ? $currentChild.props.key : undefined;
    // eslint-disable-next-line no-null/no-null
    const isKeyPresent = key !== undefined && key !== null;

    // First we process removed children
    if (isKeyPresent && !newKeys.has(key)) {
      renderWithVirtual(currentEl, $currentChild, undefined, $new, currentContext, -1);
      continue;
    } else if (!isKeyPresent) {
      const $newChild = newChildren[i];
      const newChildKey = $newChild && 'props' in $newChild ? $newChild.props.key : undefined;
      // If a non-key element remains at the same index we preserve it with a virtual `key`
      if ($newChild && !newChildKey) {
        key = `${INDEX_KEY_PREFIX}${i}`;
        // Otherwise, we just remove it
      } else {
        renderWithVirtual(currentEl, $currentChild, undefined, $new, currentContext, -1);
        continue;
      }
    }

    // Then we build up info about remaining children
    remainingByKey[key] = {
      $element: $currentChild,
      index: currentRemainingIndex++,
      orderKey: 'props' in $currentChild ? $currentChild.props.teactOrderKey : undefined
    };
  }
  let fragmentIndex;
  let fragmentSize;
  let currentPreservedIndex = 0;
  for (let i = 0, l = newChildren.length; i < l; i++) {
    const $newChild = newChildren[i];
    const key = 'props' in $newChild ? $newChild.props.key : `${INDEX_KEY_PREFIX}${i}`;
    const currentChildInfo = remainingByKey[key];
    if (!currentChildInfo) {
      if (fragmentSize === undefined) {
        fragmentIndex = i;
        fragmentSize = 0;
      }
      fragmentSize++;
      continue;
    }

    // This prepends new children to the top
    if (fragmentSize) {
      renderFragment(fragmentIndex, fragmentSize, currentEl, $new, currentContext);
      fragmentSize = undefined;
      fragmentIndex = undefined;
    }

    // Now we check if a preserved node was moved within preserved list
    const newOrderKey = 'props' in $newChild ? $newChild.props.teactOrderKey : undefined;
    // That is indicated by a changed `teactOrderKey` value
    const shouldMoveNode = currentChildInfo.index !== currentPreservedIndex && (!newOrderKey || currentChildInfo.orderKey !== newOrderKey);
    const isMovingDown = shouldMoveNode && currentPreservedIndex > currentChildInfo.index;
    if (!shouldMoveNode || isMovingDown) {
      currentPreservedIndex++;
    }
    const nextSibling = currentEl.childNodes[isMovingDown ? i + 1 : i];
    const options = shouldMoveNode ? nextSibling ? {
      nextSibling
    } : {
      forceMoveToEnd: true
    } : undefined;
    const $renderedChild = renderWithVirtual(currentEl, currentChildInfo.$element, $newChild, $new, currentContext, i, options);
    if ($renderedChild !== $newChild) {
      newChildren[i] = $renderedChild;
    }
  }

  // This appends new children to the bottom
  if (fragmentSize) {
    renderFragment(fragmentIndex, fragmentSize, currentEl, $new, currentContext);
  }
}
function renderFragment(fragmentIndex, fragmentSize, parentEl, $parent, currentContext) {
  const nextSibling = parentEl.childNodes[fragmentIndex];
  if (fragmentSize === 1) {
    const $child = $parent.children[fragmentIndex];
    const $renderedChild = renderWithVirtual(parentEl, undefined, $child, $parent, currentContext, fragmentIndex, {
      nextSibling
    });
    if ($renderedChild !== $child) {
      $parent.children[fragmentIndex] = $renderedChild;
    }
    return;
  }
  const fragment = document.createDocumentFragment();
  for (let i = fragmentIndex; i < fragmentIndex + fragmentSize; i++) {
    const $child = $parent.children[i];
    const $renderedChild = renderWithVirtual(parentEl, undefined, $child, $parent, currentContext, i, {
      fragment
    });
    if ($renderedChild !== $child) {
      $parent.children[i] = $renderedChild;
    }
  }
  insertBefore(parentEl, fragment, nextSibling);
}
function setElementRef($element, element) {
  const {
    ref
  } = $element.props;
  if (typeof ref === 'object') {
    ref.current = element;
    ref.onChange?.();
  } else if (typeof ref === 'function') {
    ref(element);
  }
}
function processControlled(tag, props) {
  // TODO Remove after tests
  if (!props.teactExperimentControlled) {
    return;
  }
  const isValueControlled = props.value !== undefined;
  const isCheckedControlled = props.checked !== undefined;
  const isControlled = (isValueControlled || isCheckedControlled) && CONTROLLABLE_TAGS.includes(tag.toUpperCase());
  if (!isControlled) {
    return;
  }
  const {
    value,
    checked,
    onInput,
    onChange
  } = props;
  props.onChange = undefined;
  props.onInput = e => {
    onInput?.(e);
    onChange?.(e);
    if (value !== undefined && value !== e.currentTarget.value) {
      const {
        selectionStart,
        selectionEnd
      } = e.currentTarget;
      const isCaretAtEnd = selectionStart === selectionEnd && selectionEnd === e.currentTarget.value.length;
      e.currentTarget.value = value;
      if (typeof selectionStart === 'number' && typeof selectionEnd === 'number') {
        e.currentTarget.setSelectionRange(selectionStart, selectionEnd);
        const selectionState = {
          selectionStart,
          selectionEnd,
          isCaretAtEnd
        };
        // eslint-disable-next-line no-underscore-dangle
        e.currentTarget.dataset.__teactSelectionState = JSON.stringify(selectionState);
      }
    }
    if (checked !== undefined) {
      e.currentTarget.checked = checked;
    }
  };
}
function processUncontrolledOnMount(element, props) {
  if (!CONTROLLABLE_TAGS.includes(element.tagName)) {
    return;
  }
  if (props.defaultValue) {
    setAttribute(element, 'value', props.defaultValue);
  }
  if (props.defaultChecked) {
    setAttribute(element, 'checked', props.defaultChecked);
  }
}
function updateAttributes($current, $new, element, namespace) {
  processControlled(element.tagName, $new.props);
  const currentEntries = Object.entries($current.props);
  const newEntries = Object.entries($new.props);
  for (const [key, currentValue] of currentEntries) {
    const newValue = $new.props[key];
    if (currentValue !== undefined && (newValue === undefined || currentValue !== newValue && key.startsWith('on'))) {
      removeAttribute(element, key, currentValue);
    }
  }
  for (const [key, newValue] of newEntries) {
    const currentValue = $current.props[key];
    if (newValue !== undefined && newValue !== currentValue) {
      setAttribute(element, key, newValue, namespace);
    }
  }
}
function setAttribute(element, key, value, namespace) {
  if (key === 'className') {
    updateClassName(element, value, namespace);
  } else if (key === 'value') {
    const inputEl = element;
    if (inputEl.value !== value) {
      inputEl.value = value;

      // eslint-disable-next-line no-underscore-dangle
      const selectionStateJson = inputEl.dataset.__teactSelectionState;
      if (selectionStateJson) {
        const {
          selectionStart,
          selectionEnd,
          isCaretAtEnd
        } = JSON.parse(selectionStateJson);
        if (isCaretAtEnd) {
          const length = inputEl.value.length;
          inputEl.setSelectionRange(length, length);
        } else if (typeof selectionStart === 'number' && typeof selectionEnd === 'number') {
          inputEl.setSelectionRange(selectionStart, selectionEnd);
        }
      }
    }
  } else if (key === 'style') {
    updateStyle(element, value);
  } else if (key === 'dangerouslySetInnerHTML') {
    // eslint-disable-next-line no-underscore-dangle
    element.innerHTML = value.__html;
  } else if (key.startsWith('on')) {
    (0,_dom_events__WEBPACK_IMPORTED_MODULE_2__.addEventListener)(element, key, value, key.endsWith('Capture'));
  } else if (namespace === SVG_NAMESPACE || key.startsWith('data-') || key.startsWith('aria-') || HTML_ATTRIBUTES.has(key)) {
    element.setAttribute(key, value);
  } else if (!FILTERED_ATTRIBUTES.has(key)) {
    element[MAPPED_ATTRIBUTES[key] || key] = value;
  }
}
function removeAttribute(element, key, value) {
  if (key === 'className') {
    updateClassName(element, '');
  } else if (key === 'value') {
    element.value = '';
  } else if (key === 'style') {
    updateStyle(element, '');
  } else if (key === 'dangerouslySetInnerHTML') {
    element.innerHTML = '';
  } else if (key.startsWith('on')) {
    (0,_dom_events__WEBPACK_IMPORTED_MODULE_2__.removeEventListener)(element, key, value, key.endsWith('Capture'));
  } else if (!FILTERED_ATTRIBUTES.has(key)) {
    element.removeAttribute(key);
  }
}
function updateClassName(element, value, namespace) {
  if (namespace === SVG_NAMESPACE) {
    element.setAttribute('class', value);
    return;
  }
  const htmlElement = element;
  const extra = extraClasses.get(element);
  if (!extra) {
    htmlElement.className = value;
    return;
  }
  const extraArray = Array.from(extra);
  if (value) {
    extraArray.push(value);
  }
  htmlElement.className = extraArray.join(' ');
}
function updateStyle(element, value) {
  element.style.cssText = value;
  const extraObject = extraStyles.get(element);
  if (extraObject) {
    applyExtraStyles(element);
  }
}
function addExtraClass(element, className) {
  element.classList.add(className);
  const classList = extraClasses.get(element);
  if (classList) {
    classList.add(className);
  } else {
    extraClasses.set(element, new Set([className]));
  }
}
function removeExtraClass(element, className) {
  element.classList.remove(className);
  const classList = extraClasses.get(element);
  if (classList) {
    classList.delete(className);
    if (!classList.size) {
      extraClasses.delete(element);
    }
  }
}
function toggleExtraClass(element, className, force) {
  if (force === true) {
    addExtraClass(element, className);
  } else if (force === false) {
    removeExtraClass(element, className);
  } else if (extraClasses.get(element)?.has(className)) {
    removeExtraClass(element, className);
  } else {
    addExtraClass(element, className);
  }
}
function setExtraStyles(element, styles) {
  extraStyles.set(element, styles);
  applyExtraStyles(element);
}
function applyExtraStyles(element) {
  const standardStyles = Object.entries(extraStyles.get(element)).reduce((acc, [prop, value]) => {
    if (prop.startsWith('--')) {
      element.style.setProperty(prop, value);
    } else {
      acc[prop] = value;
    }
    return acc;
  }, {});
  Object.assign(element.style, standardStyles);
}

// eslint-disable-next-line @typescript-eslint/naming-convention
function DEBUG_addToVirtualTreeSize($current) {
  DEBUG_virtualTreeSize += $current.children.length;
  $current.children.forEach($child => {
    if ((0,_teact__WEBPACK_IMPORTED_MODULE_3__.isParentElement)($child)) {
      DEBUG_addToVirtualTreeSize($child);
    }
  });
}

// eslint-disable-next-line @typescript-eslint/naming-convention
function DEBUG_checkKeyUniqueness(children) {
  const firstChild = children[0];
  if (firstChild && 'props' in firstChild && firstChild.props.key !== undefined) {
    const keys = children.reduce((acc, child) => {
      if ('props' in child && child.props.key) {
        acc.push(child.props.key);
      }
      return acc;
    }, []);
    if (keys.length !== (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.unique)(keys).length) {
      // eslint-disable-next-line no-console
      console.warn('[Teact] Duplicated keys:', keys.filter((e, i, a) => a.indexOf(e) !== i), children);
      throw new Error('[Teact] Children keys are not unique');
    }
  }
}
const TeactDOM = {
  render
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TeactDOM);

/***/ }),

/***/ "./src/lib/teact/teact.ts":
/*!********************************!*\
  !*** ./src/lib/teact/teact.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEBUG_resolveComponentName: () => (/* binding */ DEBUG_resolveComponentName),
/* harmony export */   MountState: () => (/* binding */ MountState),
/* harmony export */   VirtualType: () => (/* binding */ VirtualType),
/* harmony export */   beginHeavyAnimation: () => (/* reexport safe */ _heavyAnimation__WEBPACK_IMPORTED_MODULE_8__.beginHeavyAnimation),
/* harmony export */   captureImmediateEffects: () => (/* binding */ captureImmediateEffects),
/* harmony export */   createContext: () => (/* binding */ createContext),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getIsHeavyAnimating: () => (/* reexport safe */ _heavyAnimation__WEBPACK_IMPORTED_MODULE_8__.getIsHeavyAnimating),
/* harmony export */   hasElementChanged: () => (/* binding */ hasElementChanged),
/* harmony export */   isParentElement: () => (/* binding */ isParentElement),
/* harmony export */   memo: () => (/* binding */ memo),
/* harmony export */   mountComponent: () => (/* binding */ mountComponent),
/* harmony export */   onFullyIdle: () => (/* reexport safe */ _heavyAnimation__WEBPACK_IMPORTED_MODULE_8__.onFullyIdle),
/* harmony export */   renderComponent: () => (/* binding */ renderComponent),
/* harmony export */   unmountComponent: () => (/* binding */ unmountComponent),
/* harmony export */   useCallback: () => (/* binding */ useCallback),
/* harmony export */   useContextSignal: () => (/* binding */ useContextSignal),
/* harmony export */   useEffect: () => (/* binding */ useEffect),
/* harmony export */   useLayoutEffect: () => (/* binding */ useLayoutEffect),
/* harmony export */   useMemo: () => (/* binding */ useMemo),
/* harmony export */   useRef: () => (/* binding */ useRef),
/* harmony export */   useSignal: () => (/* binding */ useSignal),
/* harmony export */   useState: () => (/* binding */ useState),
/* harmony export */   useUnmountCleanup: () => (/* binding */ useUnmountCleanup)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/arePropsShallowEqual */ "./src/util/arePropsShallowEqual.ts");
/* harmony import */ var _util_debugOverlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/debugOverlay */ "./src/util/debugOverlay.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_safeExec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/safeExec */ "./src/util/safeExec.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_signals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/signals */ "./src/util/signals.ts");
/* harmony import */ var _fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _heavyAnimation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./heavyAnimation */ "./src/lib/teact/heavyAnimation.ts");











// eslint-disable-next-line @typescript-eslint/naming-convention

let VirtualType = /*#__PURE__*/function (VirtualType) {
  VirtualType[VirtualType["Empty"] = 0] = "Empty";
  VirtualType[VirtualType["Text"] = 1] = "Text";
  VirtualType[VirtualType["Tag"] = 2] = "Tag";
  VirtualType[VirtualType["Component"] = 3] = "Component";
  VirtualType[VirtualType["Fragment"] = 4] = "Fragment";
  return VirtualType;
}({});
let MountState = /*#__PURE__*/function (MountState) {
  MountState[MountState["New"] = 0] = "New";
  MountState[MountState["Mounted"] = 1] = "Mounted";
  MountState[MountState["Unmounted"] = 2] = "Unmounted";
  return MountState;
}({});

// Compatibility with JSX types

const Fragment = Symbol('Fragment');
const DEBUG_RENDER_THRESHOLD = 7;
const DEBUG_EFFECT_THRESHOLD = 7;
const DEBUG_SILENT_RENDERS_FOR = new Set(['TeactMemoWrapper', 'TeactNContainer', 'Button', 'ListItem', 'MenuItem']);
let contextCounter = 0;
let lastComponentId = 0;
let renderingInstance;
function isParentElement($element) {
  return $element.type === VirtualType.Tag || $element.type === VirtualType.Component || $element.type === VirtualType.Fragment;
}
function createElement(source, props, ...children) {
  if (source === Fragment) {
    return buildFragmentElement(children);
  } else if (typeof source === 'function') {
    return createComponentInstance(source, props || {}, children);
  } else {
    return buildTagElement(source, props || {}, children);
  }
}
function buildFragmentElement(children) {
  return {
    type: VirtualType.Fragment,
    children: buildChildren(children, true)
  };
}
function createComponentInstance(Component, props, children) {
  if (children?.length) {
    props.children = children.length === 1 ? children[0] : children;
  }
  const componentInstance = {
    id: -1,
    $element: undefined,
    Component,
    name: Component.name,
    props,
    mountState: MountState.New
  };
  componentInstance.$element = buildComponentElement(componentInstance);
  return componentInstance.$element;
}
function buildComponentElement(componentInstance, children) {
  return {
    type: VirtualType.Component,
    componentInstance,
    props: componentInstance.props,
    children: children ? buildChildren(children, true) : []
  };
}
function buildTagElement(tag, props, children) {
  return {
    type: VirtualType.Tag,
    tag,
    props,
    children: buildChildren(children)
  };
}
function buildChildren(children, noEmpty = false) {
  const cleanChildren = dropEmptyTail(children, noEmpty);
  const newChildren = [];
  for (let i = 0, l = cleanChildren.length; i < l; i++) {
    const child = cleanChildren[i];
    if (Array.isArray(child)) {
      newChildren.push(...buildChildren(child, noEmpty));
    } else {
      newChildren.push(buildChildElement(child));
    }
  }
  return newChildren;
}

// We only need placeholders in the middle of collection (to ensure other elements order).
function dropEmptyTail(children, noEmpty = false) {
  let i = children.length - 1;
  for (; i >= 0; i--) {
    if (!isEmptyPlaceholder(children[i])) {
      break;
    }
  }
  if (i === children.length - 1) {
    return children;
  }
  if (i === -1 && noEmpty) {
    return children.slice(0, 1);
  }
  return children.slice(0, i + 1);
}
function isEmptyPlaceholder(child) {
  return !child && child !== 0;
}
function buildChildElement(child) {
  if (isEmptyPlaceholder(child)) {
    return {
      type: VirtualType.Empty
    };
  } else if (isParentElement(child)) {
    return child;
  } else {
    return {
      type: VirtualType.Text,
      value: String(child)
    };
  }
}

// eslint-disable-next-line @typescript-eslint/naming-convention
const DEBUG_components = {
  TOTAL: {
    name: 'TOTAL',
    renders: 0
  }
};
// eslint-disable-next-line @typescript-eslint/naming-convention
const DEBUG_memos = {};
const DEBUG_MEMOS_CALLS_THRESHOLD = 20;
document.addEventListener('dblclick', () => {
  // eslint-disable-next-line no-console
  console.warn('COMPONENTS', (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.orderBy)(Object.values(DEBUG_components).map(({
    avgRenderTime,
    ...state
  }) => {
    return {
      ...state,
      ...(avgRenderTime !== undefined && {
        avgRenderTime: Number(avgRenderTime.toFixed(2))
      })
    };
  }), 'renders', 'desc'));

  // eslint-disable-next-line no-console
  console.warn('MEMOS', (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.orderBy)(Object.values(DEBUG_memos).filter(({
    calls
  }) => calls >= DEBUG_MEMOS_CALLS_THRESHOLD).map(state => ({
    ...state,
    hitRate: Number(state.hitRate.toFixed(2))
  })), 'hitRate', 'asc'));
});
let instancesPendingUpdate = new Set();
let idsToExcludeFromUpdate = new Set();
let pendingEffects = new Map();
let pendingCleanups = new Map();
let pendingLayoutEffects = new Map();
let pendingLayoutCleanups = new Map();
let areImmediateEffectsCaptured = false;

/*
  Order:
  - component effect cleanups
  - component effects
  - measure tasks
  - mutation tasks
  - component updates
  - component layout effect cleanups
  - component layout effects
  - forced layout measure tasks
  - forced layout mutation tasks
 */

const runUpdatePassOnRaf = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_5__.throttleWith)(_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_7__.requestMeasure, () => {
  if ((0,_heavyAnimation__WEBPACK_IMPORTED_MODULE_8__.getIsBlockingAnimating)()) {
    _heavyAnimation__WEBPACK_IMPORTED_MODULE_8__.getIsBlockingAnimating.once(runUpdatePassOnRaf);
    return;
  }
  const runImmediateEffects = captureImmediateEffects();
  idsToExcludeFromUpdate = new Set();
  const instancesToUpdate = Array.from(instancesPendingUpdate).sort((a, b) => a.id - b.id);
  instancesPendingUpdate = new Set();
  const currentCleanups = pendingCleanups;
  pendingCleanups = new Map();
  currentCleanups.forEach(cb => cb());
  const currentEffects = pendingEffects;
  pendingEffects = new Map();
  currentEffects.forEach(cb => cb());
  (0,_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_7__.requestMutation)(() => {
    instancesToUpdate.forEach(prepareComponentForFrame);
    instancesToUpdate.forEach(instance => {
      if (idsToExcludeFromUpdate.has(instance.id)) {
        return;
      }
      forceUpdateComponent(instance);
    });
    runImmediateEffects?.();
  });
});
function captureImmediateEffects() {
  if (areImmediateEffectsCaptured) {
    return undefined;
  }
  areImmediateEffectsCaptured = true;
  return runCapturedImmediateEffects;
}
function runCapturedImmediateEffects() {
  const currentLayoutCleanups = pendingLayoutCleanups;
  pendingLayoutCleanups = new Map();
  currentLayoutCleanups.forEach(cb => cb());
  const currentLayoutEffects = pendingLayoutEffects;
  pendingLayoutEffects = new Map();
  currentLayoutEffects.forEach(cb => cb());
  areImmediateEffectsCaptured = false;
}
function renderComponent(componentInstance) {
  idsToExcludeFromUpdate.add(componentInstance.id);
  const {
    Component,
    props
  } = componentInstance;
  let newRenderedValue;
  (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    renderingInstance = componentInstance;
    if (componentInstance.hooks) {
      if (componentInstance.hooks.state) {
        componentInstance.hooks.state.cursor = 0;
      }
      if (componentInstance.hooks.effects) {
        componentInstance.hooks.effects.cursor = 0;
      }
      if (componentInstance.hooks.memos) {
        componentInstance.hooks.memos.cursor = 0;
      }
      if (componentInstance.hooks.refs) {
        componentInstance.hooks.refs.cursor = 0;
      }
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    let DEBUG_startAt;
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      const componentName = DEBUG_resolveComponentName(Component);
      if (!DEBUG_components[componentName]) {
        DEBUG_components[componentName] = {
          name: componentName,
          renders: 0,
          avgRenderTime: 0
        };
      }
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG_MORE) {
        if (!DEBUG_SILENT_RENDERS_FOR.has(componentName)) {
          // eslint-disable-next-line no-console
          console.log(`[Teact] Render ${componentName}`);
        }
      }
      DEBUG_startAt = performance.now();
    }
    newRenderedValue = Component(props);
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      const duration = performance.now() - DEBUG_startAt;
      const componentName = DEBUG_resolveComponentName(Component);
      if (duration > DEBUG_RENDER_THRESHOLD) {
        // eslint-disable-next-line no-console
        console.warn(`[Teact] Slow component render: ${componentName}, ${Math.round(duration)} ms`);
      }
      const {
        renders,
        avgRenderTime
      } = DEBUG_components[componentName];
      DEBUG_components[componentName].avgRenderTime = (avgRenderTime * renders + duration) / (renders + 1);
      DEBUG_components[componentName].renders++;
      DEBUG_components.TOTAL.renders++;
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG_MORE) {
        (0,_util_debugOverlay__WEBPACK_IMPORTED_MODULE_2__.incrementOverlayCounter)(`${componentName} renders`);
        (0,_util_debugOverlay__WEBPACK_IMPORTED_MODULE_2__.incrementOverlayCounter)(`${componentName} duration`, duration);
      }
    }
  }, () => {
    // eslint-disable-next-line no-console
    console.error(`[Teact] Error while rendering component ${componentInstance.name}`, componentInstance);
    newRenderedValue = componentInstance.renderedValue;
  });
  if (componentInstance.mountState === MountState.Mounted && newRenderedValue === componentInstance.renderedValue) {
    return componentInstance.$element;
  }
  componentInstance.renderedValue = newRenderedValue;
  const children = Array.isArray(newRenderedValue) ? newRenderedValue : [newRenderedValue];
  if (componentInstance.mountState === MountState.New) {
    componentInstance.$element.children = buildChildren(children, true);
  } else {
    componentInstance.$element = buildComponentElement(componentInstance, children);
  }
  return componentInstance.$element;
}
function hasElementChanged($old, $new) {
  if (typeof $old !== typeof $new) {
    return true;
  } else if ($old.type !== $new.type) {
    return true;
  } else if ($old.type === VirtualType.Text && $new.type === VirtualType.Text) {
    return $old.value !== $new.value;
  } else if ($old.type === VirtualType.Tag && $new.type === VirtualType.Tag) {
    return $old.tag !== $new.tag || $old.props.key !== $new.props.key;
  } else if ($old.type === VirtualType.Component && $new.type === VirtualType.Component) {
    return $old.componentInstance.Component !== $new.componentInstance.Component || $old.props.key !== $new.props.key;
  }
  return false;
}
function mountComponent(componentInstance) {
  componentInstance.id = ++lastComponentId;
  renderComponent(componentInstance);
  componentInstance.mountState = MountState.Mounted;
  return componentInstance.$element;
}
function unmountComponent(componentInstance) {
  if (componentInstance.mountState !== MountState.Mounted) {
    return;
  }
  idsToExcludeFromUpdate.add(componentInstance.id);
  if (componentInstance.hooks?.effects) {
    for (const effect of componentInstance.hooks.effects.byCursor) {
      if (effect.cleanup) {
        (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_4__["default"])(effect.cleanup);
      }
      effect.cleanup = undefined;
      effect.releaseSignals?.();
    }
  }
  componentInstance.mountState = MountState.Unmounted;
  helpGc(componentInstance);
}

// We need to remove all references to DOM objects. We also clean all other references, just in case
function helpGc(componentInstance) {
  const {
    effects,
    state,
    memos,
    refs
  } = componentInstance.hooks || {};
  if (effects) {
    for (const hook of effects.byCursor) {
      hook.schedule = undefined;
      hook.cleanup = undefined;
      hook.releaseSignals = undefined;
      hook.dependencies = undefined;
    }
  }
  if (state) {
    for (const hook of state.byCursor) {
      hook.value = undefined;
      hook.nextValue = undefined;
      hook.setter = undefined;
    }
  }
  if (memos) {
    for (const hook of memos.byCursor) {
      hook.value = undefined;
      hook.dependencies = undefined;
    }
  }
  if (refs) {
    for (const hook of refs.byCursor) {
      hook.current = undefined;
      hook.onChange = undefined;
    }
  }
  componentInstance.hooks = undefined;
  componentInstance.$element = undefined;
  componentInstance.renderedValue = undefined;
  componentInstance.Component = undefined;
  componentInstance.props = undefined;
  componentInstance.onUpdate = undefined;
}
function prepareComponentForFrame(componentInstance) {
  if (componentInstance.mountState !== MountState.Mounted) {
    return;
  }
  if (componentInstance.hooks?.state) {
    for (const hook of componentInstance.hooks.state.byCursor) {
      hook.value = hook.nextValue;
    }
  }
}
function forceUpdateComponent(componentInstance) {
  if (componentInstance.mountState !== MountState.Mounted || !componentInstance.onUpdate) {
    return;
  }
  const currentElement = componentInstance.$element;
  renderComponent(componentInstance);
  if (componentInstance.$element !== currentElement) {
    componentInstance.onUpdate();
  }
}
function useState(initial, debugKey) {
  if (!renderingInstance.hooks) {
    renderingInstance.hooks = {};
  }
  if (!renderingInstance.hooks.state) {
    renderingInstance.hooks.state = {
      cursor: 0,
      byCursor: []
    };
  }
  const {
    cursor,
    byCursor
  } = renderingInstance.hooks.state;
  const componentInstance = renderingInstance;
  if (byCursor[cursor] === undefined) {
    byCursor[cursor] = {
      value: initial,
      nextValue: initial,
      setter: newValue => {
        if (componentInstance.mountState === MountState.Unmounted) {
          return;
        }
        if (typeof newValue === 'function') {
          newValue = newValue(byCursor[cursor].nextValue);
        }
        if (byCursor[cursor].nextValue === newValue) {
          return;
        }
        byCursor[cursor].nextValue = newValue;
        instancesPendingUpdate.add(componentInstance);
        runUpdatePassOnRaf();
        if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG_MORE) {
          // eslint-disable-next-line no-console
          console.log('[Teact.useState]', DEBUG_resolveComponentName(componentInstance.Component), `State update at cursor #${cursor}${debugKey ? ` (${debugKey})` : ''}, next value: `, byCursor[cursor].nextValue);
        }
      }
    };
  }
  renderingInstance.hooks.state.cursor++;
  return [byCursor[cursor].value, byCursor[cursor].setter];
}
function useEffectBase(isLayout, effect, dependencies, debugKey) {
  if (!renderingInstance.hooks) {
    renderingInstance.hooks = {};
  }
  if (!renderingInstance.hooks.effects) {
    renderingInstance.hooks.effects = {
      cursor: 0,
      byCursor: []
    };
  }
  const {
    cursor,
    byCursor
  } = renderingInstance.hooks.effects;
  const effectConfig = byCursor[cursor];
  const componentInstance = renderingInstance;
  function schedule() {
    scheduleEffect(componentInstance, cursor, effect, isLayout);
  }
  if (dependencies && effectConfig?.dependencies) {
    if (dependencies.some((dependency, i) => dependency !== effectConfig.dependencies[i])) {
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG && debugKey) {
        const causedBy = dependencies.reduce((res, newValue, i) => {
          const prevValue = effectConfig.dependencies[i];
          if (newValue !== prevValue) {
            res.push(`${i}: ${prevValue} => ${newValue}`);
          }
          return res;
        }, []);

        // eslint-disable-next-line no-console
        console.log(`[Teact] Effect "${debugKey}" caused by dependencies.`, causedBy.join(', '));
      }
      schedule();
    }
  } else {
    if (debugKey) {
      // eslint-disable-next-line no-console
      console.log(`[Teact] Effect "${debugKey}" caused by missing dependencies.`);
    }
    schedule();
  }
  function setupSignals() {
    const cleanups = dependencies?.filter(_util_signals__WEBPACK_IMPORTED_MODULE_6__.isSignal).map((signal, i) => signal.subscribe(() => {
      if (debugKey) {
        // eslint-disable-next-line no-console
        console.log(`[Teact] Effect "${debugKey}" caused by signal #${i} new value:`, signal());
      }
      byCursor[cursor].schedule();
    }));
    if (!cleanups?.length) {
      return undefined;
    }
    return () => {
      for (const cleanup of cleanups) {
        cleanup();
      }
    };
  }
  byCursor[cursor] = {
    ...effectConfig,
    dependencies,
    schedule
  };
  if (!effectConfig) {
    byCursor[cursor].releaseSignals = setupSignals();
  }
  renderingInstance.hooks.effects.cursor++;
}
function scheduleEffect(componentInstance, cursor, effect, isLayout) {
  const {
    byCursor
  } = componentInstance.hooks.effects;
  const cleanup = byCursor[cursor]?.cleanup;
  const cleanupsContainer = isLayout ? pendingLayoutCleanups : pendingCleanups;
  const effectsContainer = isLayout ? pendingLayoutEffects : pendingEffects;
  const effectId = `${componentInstance.id}_${cursor}`;
  if (cleanup) {
    const runEffectCleanup = () => (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
      if (componentInstance.mountState === MountState.Unmounted) {
        return;
      }

      // eslint-disable-next-line @typescript-eslint/naming-convention
      let DEBUG_startAt;
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
        DEBUG_startAt = performance.now();
      }
      cleanup();
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
        const duration = performance.now() - DEBUG_startAt;
        const componentName = DEBUG_resolveComponentName(componentInstance.Component);
        if (duration > DEBUG_EFFECT_THRESHOLD) {
          // eslint-disable-next-line no-console
          console.warn(`[Teact] Slow cleanup at effect cursor #${cursor}: ${componentName}, ${Math.round(duration)} ms`);
        }
      }
    }, () => {
      // eslint-disable-next-line no-console, max-len
      console.error(`[Teact] Error in effect cleanup at cursor #${cursor} in ${componentInstance.name}`, componentInstance);
    }, () => {
      byCursor[cursor].cleanup = undefined;
    });
    cleanupsContainer.set(effectId, runEffectCleanup);
  }
  const runEffect = () => (0,_util_safeExec__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    if (componentInstance.mountState === MountState.Unmounted) {
      return;
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention
    let DEBUG_startAt;
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      DEBUG_startAt = performance.now();
    }
    const result = effect();
    if (typeof result === 'function') {
      byCursor[cursor].cleanup = result;
    }
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      const duration = performance.now() - DEBUG_startAt;
      const componentName = DEBUG_resolveComponentName(componentInstance.Component);
      if (duration > DEBUG_EFFECT_THRESHOLD) {
        // eslint-disable-next-line no-console
        console.warn(`[Teact] Slow effect at cursor #${cursor}: ${componentName}, ${Math.round(duration)} ms`);
      }
    }
  }, () => {
    // eslint-disable-next-line no-console
    console.error(`[Teact] Error in effect at cursor #${cursor} in ${componentInstance.name}`, componentInstance);
  });
  effectsContainer.set(effectId, runEffect);
  runUpdatePassOnRaf();
}
function useEffect(effect, dependencies, debugKey) {
  return useEffectBase(false, effect, dependencies, debugKey);
}
function useLayoutEffect(effect, dependencies, debugKey) {
  return useEffectBase(true, effect, dependencies, debugKey);
}
function useUnmountCleanup(cleanup) {
  if (!renderingInstance.hooks) {
    renderingInstance.hooks = {};
  }
  if (!renderingInstance.hooks.effects) {
    renderingInstance.hooks.effects = {
      cursor: 0,
      byCursor: []
    };
  }
  const {
    cursor,
    byCursor
  } = renderingInstance.hooks.effects;
  if (!byCursor[cursor]) {
    byCursor[cursor] = {
      cleanup
    };
  }
  renderingInstance.hooks.effects.cursor++;
}
function useMemo(resolver, dependencies, debugKey, debugHitRateKey) {
  if (!renderingInstance.hooks) {
    renderingInstance.hooks = {};
  }
  if (!renderingInstance.hooks.memos) {
    renderingInstance.hooks.memos = {
      cursor: 0,
      byCursor: []
    };
  }
  const {
    cursor,
    byCursor
  } = renderingInstance.hooks.memos;
  let {
    value
  } = byCursor[cursor] || {};

  // eslint-disable-next-line @typescript-eslint/naming-convention
  let DEBUG_state;
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG && debugHitRateKey) {
    const instanceKey = `${debugHitRateKey}#${renderingInstance.id}`;
    DEBUG_state = DEBUG_memos[instanceKey];
    if (!DEBUG_state) {
      DEBUG_state = {
        key: instanceKey,
        calls: 0,
        misses: 0,
        hitRate: 0
      };
      DEBUG_memos[instanceKey] = DEBUG_state;
    }
    DEBUG_state.calls++;
    DEBUG_state.hitRate = (DEBUG_state.calls - DEBUG_state.misses) / DEBUG_state.calls;
  }
  if (byCursor[cursor] === undefined || dependencies.length !== byCursor[cursor].dependencies.length || dependencies.some((dependency, i) => dependency !== byCursor[cursor].dependencies[i])) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      if (debugKey) {
        const msg = `[Teact.useMemo] ${renderingInstance.name} (${debugKey}): Update is caused by:`;
        if (!byCursor[cursor]) {
          // eslint-disable-next-line no-console
          console.log(`${msg} [first render]`);
        } else {
          (0,_util_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_1__.logUnequalProps)(byCursor[cursor].dependencies, dependencies, msg, debugKey);
        }
      }
      if (DEBUG_state) {
        DEBUG_state.misses++;
        DEBUG_state.hitRate = (DEBUG_state.calls - DEBUG_state.misses) / DEBUG_state.calls;
        if (DEBUG_state.calls % 10 === 0 && DEBUG_state.calls >= DEBUG_MEMOS_CALLS_THRESHOLD && DEBUG_state.hitRate < 0.25) {
          // eslint-disable-next-line no-console
          console.warn(
          // eslint-disable-next-line max-len
          `[Teact] ${DEBUG_state.key}: Hit rate is ${DEBUG_state.hitRate.toFixed(2)} for ${DEBUG_state.calls} calls`);
        }
      }
    }
    value = resolver();
  }
  byCursor[cursor] = {
    value,
    dependencies
  };
  renderingInstance.hooks.memos.cursor++;
  return value;
}
function useCallback(newCallback, dependencies, debugKey) {
  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  return useMemo(() => newCallback, dependencies, debugKey);
}

// TT way (empty is `undefined`)

// React way (empty is `null`)
// eslint-disable-next-line no-null/no-null
function useRef(initial) {
  if (!renderingInstance.hooks) {
    renderingInstance.hooks = {};
  }
  if (!renderingInstance.hooks.refs) {
    renderingInstance.hooks.refs = {
      cursor: 0,
      byCursor: []
    };
  }
  const {
    cursor,
    byCursor
  } = renderingInstance.hooks.refs;
  if (!byCursor[cursor]) {
    byCursor[cursor] = {
      current: initial
    };
  }
  renderingInstance.hooks.refs.cursor++;
  return byCursor[cursor];
}
function createContext(defaultValue) {
  const contextId = String(contextCounter++);
  function TeactContextProvider(props) {
    const [getValue, setValue] = useSignal(props.value ?? defaultValue);
    // Create a new object to avoid mutations in the parent context
    renderingInstance.context = {
      ...renderingInstance.context
    };
    renderingInstance.context[contextId] = getValue;
    setValue(props.value);
    return props.children;
  }
  TeactContextProvider.DEBUG_contentComponentName = contextId;
  const context = {
    defaultValue,
    contextId,
    Provider: TeactContextProvider
  };
  return context;
}
function useContextSignal(context) {
  const [getDefaultValue] = useSignal(context.defaultValue);
  return renderingInstance.context?.[context.contextId] || getDefaultValue;
}
function useSignal(initial) {
  const signalRef = useRef();
  signalRef.current ?? (signalRef.current = (0,_util_signals__WEBPACK_IMPORTED_MODULE_6__.createSignal)(initial));
  return signalRef.current;
}
function memo(Component, debugKey) {
  function TeactMemoWrapper(props) {
    return useMemo(() => createElement(Component, props),
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
    Object.values(props), debugKey, _config__WEBPACK_IMPORTED_MODULE_0__.DEBUG_MORE ? DEBUG_resolveComponentName(renderingInstance.Component) : undefined);
  }
  TeactMemoWrapper.DEBUG_contentComponentName = DEBUG_resolveComponentName(Component);
  return TeactMemoWrapper;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
function DEBUG_resolveComponentName(Component) {
  // eslint-disable-next-line @typescript-eslint/naming-convention
  const {
    name,
    DEBUG_contentComponentName
  } = Component;
  if (name === 'TeactNContainer') {
    return `container>${DEBUG_contentComponentName}`;
  }
  if (name === 'TeactMemoWrapper') {
    return `memo>${DEBUG_contentComponentName}`;
  }
  if (name === 'TeactContextProvider') {
    return `context>id${DEBUG_contentComponentName}`;
  }
  return name + (DEBUG_contentComponentName ? `>${DEBUG_contentComponentName}` : '');
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  createElement,
  Fragment
});

/***/ }),

/***/ "./src/lib/teact/teactn.tsx":
/*!**********************************!*\
  !*** ./src/lib/teact/teactn.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addCallback: () => (/* binding */ addCallback),
/* harmony export */   addUntypedActionHandler: () => (/* binding */ addUntypedActionHandler),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   forceOnHeavyAnimationOnce: () => (/* binding */ forceOnHeavyAnimationOnce),
/* harmony export */   getUntypedActions: () => (/* binding */ getUntypedActions),
/* harmony export */   getUntypedGlobal: () => (/* binding */ getUntypedGlobal),
/* harmony export */   removeCallback: () => (/* binding */ removeCallback),
/* harmony export */   setUntypedGlobal: () => (/* binding */ setUntypedGlobal),
/* harmony export */   typify: () => (/* binding */ typify),
/* harmony export */   withUntypedGlobal: () => (/* binding */ withUntypedGlobal)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _util_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/arePropsShallowEqual */ "./src/util/arePropsShallowEqual.ts");
/* harmony import */ var _util_handleError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/handleError */ "./src/util/handleError.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _teact__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useUniqueId */ "./src/hooks/useUniqueId.ts");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }








/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_teact__WEBPACK_IMPORTED_MODULE_5__["default"]);
let currentGlobal = {
  isInited: false
};

// eslint-disable-next-line @typescript-eslint/naming-convention
let DEBUG_currentRandomId;
// eslint-disable-next-line @typescript-eslint/naming-convention
const DEBUG_invalidateGlobalOnTickEnd = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.throttleWithTickEnd)(() => {
  DEBUG_currentRandomId = Math.random();
});
const actionHandlers = {};
const callbacks = [updateContainers];
const actions = {};
const containers = new Map();
const runCallbacksThrottled = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.throttleWithTickEnd)(runCallbacks);
let forceOnHeavyAnimation = true;
function runCallbacks() {
  if (forceOnHeavyAnimation) {
    forceOnHeavyAnimation = false;
  } else if ((0,_teact__WEBPACK_IMPORTED_MODULE_5__.getIsHeavyAnimating)()) {
    _teact__WEBPACK_IMPORTED_MODULE_5__.getIsHeavyAnimating.once(runCallbacksThrottled);
    return;
  }
  callbacks.forEach(cb => cb(currentGlobal));
}
function setUntypedGlobal(newGlobal, options) {
  if (typeof newGlobal === 'object' && newGlobal !== currentGlobal) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      if (!options?.forceOutdated && newGlobal.DEBUG_randomId && newGlobal.DEBUG_randomId !== DEBUG_currentRandomId) {
        throw new Error('[TeactN.setGlobal] Attempt to set an outdated global');
      }
      DEBUG_currentRandomId = Math.random();
    }
    currentGlobal = newGlobal;
    if (options?.forceSyncOnIOs) {
      forceOnHeavyAnimation = true;
      runCallbacks();
    } else {
      if (options?.forceOnHeavyAnimation) {
        forceOnHeavyAnimation = true;
      }
      runCallbacksThrottled();
    }
  }
}
function getUntypedGlobal() {
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
    currentGlobal = {
      ...currentGlobal,
      DEBUG_randomId: DEBUG_currentRandomId
    };
    DEBUG_invalidateGlobalOnTickEnd();
  }
  return currentGlobal;
}
function getUntypedActions() {
  return actions;
}
function forceOnHeavyAnimationOnce() {
  forceOnHeavyAnimation = true;
}
let actionQueue = [];
function handleAction(name, payload, options) {
  actionQueue.push(() => {
    actionHandlers[name]?.forEach(handler => {
      const response = handler(_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG ? getUntypedGlobal() : currentGlobal, actions, payload);
      if (!response || typeof response.then === 'function') {
        return;
      }

      // eslint-disable-next-line eslint-multitab-tt/set-global-only-variable
      setUntypedGlobal(response, options);
    });
  });
  if (actionQueue.length === 1) {
    try {
      while (actionQueue.length) {
        actionQueue[0]();
        actionQueue.shift();
      }
    } finally {
      actionQueue = [];
    }
  }
}
function updateContainers() {
  // eslint-disable-next-line @typescript-eslint/naming-convention
  let DEBUG_startAt;
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
    DEBUG_startAt = performance.now();
  }

  // eslint-disable-next-line no-restricted-syntax
  for (const container of containers.values()) {
    const {
      mapStateToProps,
      ownProps,
      mappedProps,
      forceUpdate
    } = container;
    if (!activateContainer(container, currentGlobal, ownProps)) {
      continue;
    }
    let newMappedProps;
    try {
      newMappedProps = mapStateToProps(currentGlobal, ownProps);
    } catch (err) {
      (0,_util_handleError__WEBPACK_IMPORTED_MODULE_2__.handleError)(err);
      return;
    }
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      if (Object.values(newMappedProps).some(Number.isNaN)) {
        // eslint-disable-next-line no-console
        console.warn(
        // eslint-disable-next-line max-len
        `[TeactN] Some of \`${container.DEBUG_componentName}\` mappers contain NaN values. This may cause redundant updates because of incorrect equality check.`);
      }
    }
    if (Object.keys(newMappedProps).length && !(0,_util_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_1__["default"])(mappedProps, newMappedProps)) {
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG_MORE) {
        (0,_util_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_1__.logUnequalProps)(mappedProps, newMappedProps, `[TeactN] Will update ${container.DEBUG_componentName} caused by:`);
      }
      container.mappedProps = newMappedProps;
      container.DEBUG_updates++;
      forceUpdate();
    }
  }
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
    const updateTime = performance.now() - DEBUG_startAt;
    if (updateTime > 7) {
      // eslint-disable-next-line no-console
      console.warn(`[TeactN] Slow containers update: ${Math.round(updateTime)} ms`);
    }
  }
}
function addUntypedActionHandler(name, handler) {
  if (!actionHandlers[name]) {
    actionHandlers[name] = [];
    actions[name] = (payload, options) => {
      handleAction(name, payload, options);
    };
  }
  actionHandlers[name].push(handler);
}
function addCallback(cb) {
  callbacks.push(cb);
}
function removeCallback(cb) {
  const index = callbacks.indexOf(cb);
  if (index !== -1) {
    callbacks.splice(index, 1);
  }
}
function withUntypedGlobal(mapStateToProps = () => ({}), activationFn) {
  return Component => {
    function TeactNContainer(props) {
      const id = (0,_hooks_useUniqueId__WEBPACK_IMPORTED_MODULE_7__["default"])();
      const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_6__["default"])();
      (0,_teact__WEBPACK_IMPORTED_MODULE_5__.useUnmountCleanup)(() => {
        containers.delete(id);
      });
      let container = containers.get(id);
      if (!container) {
        container = {
          mapStateToProps,
          activationFn,
          ownProps: props,
          forceUpdate,
          DEBUG_updates: 0,
          DEBUG_componentName: Component.name
        };
        containers.set(id, container);
      }
      if (!container.mappedProps || !(0,_util_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_1__["default"])(container.ownProps, props) && activateContainer(container, currentGlobal, props)) {
        try {
          container.mappedProps = mapStateToProps(currentGlobal, props);
        } catch (err) {
          (0,_util_handleError__WEBPACK_IMPORTED_MODULE_2__.handleError)(err);
        }
      }
      container.ownProps = props;

      // eslint-disable-next-line react/jsx-props-no-spreading
      return /*#__PURE__*/_teact__WEBPACK_IMPORTED_MODULE_5__["default"].createElement(Component, _extends({}, container.mappedProps, props));
    }
    TeactNContainer.DEBUG_contentComponentName = (0,_teact__WEBPACK_IMPORTED_MODULE_5__.DEBUG_resolveComponentName)(Component);
    return TeactNContainer;
  };
}
function activateContainer(container, global, props) {
  const {
    activationFn,
    stuckTo
  } = container;
  if (!activationFn) {
    return true;
  }
  return activationFn(global, props, stickTo => {
    if (stickTo && !stuckTo) {
      container.stuckTo = stickTo;
    }
    return stickTo && (!stuckTo || stuckTo === stickTo);
  });
}
function typify() {
  // When payload is allowed to be `undefined` we consider it optional

  return {
    getGlobal: getUntypedGlobal,
    setGlobal: setUntypedGlobal,
    getActions: getUntypedActions,
    addActionHandler: addUntypedActionHandler,
    withGlobal: withUntypedGlobal
  };
}
if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
  window.getGlobal = getUntypedGlobal;
  window.setGlobal = setUntypedGlobal;
  document.addEventListener('dblclick', () => {
    // eslint-disable-next-line no-console
    console.warn('GLOBAL CONTAINERS', (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.orderBy)(Array.from(containers.values()).map(({
      DEBUG_componentName,
      DEBUG_updates
    }) => ({
      DEBUG_componentName,
      DEBUG_updates
    })), 'DEBUG_updates', 'desc'));
  });
}

/***/ }),

/***/ "./src/lib/twemojiRegex.js":
/*!*********************************!*\
  !*** ./src/lib/twemojiRegex.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   removeVS16s: () => (/* binding */ removeVS16s)
/* harmony export */ });
// Copyright Twitter Inc. Licensed under MIT
// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md
// Emoji 15.0.2 support was taken here https://github.com/mei23/twemoji-parser
// Version 3d4dedc 15.12.2023

const vs16RegExp = /\uFE0F/g;
// avoid using a string literal like `\u200D` here because minifiers expand it inline
const zeroWidthJoiner = String.fromCharCode(0x200d);
function removeVS16s(rawEmoji) {
  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;
}

// Default Twemoji regex was modified here.
// An exception for ascii emoji has been added to the beginning of the regular string: 🅰🅱🅾🅿.
// UTF-16 endcoding are `\ud83c\udd70`, `\ud83c\udd71`, `\ud83c\udd7e` and `\ud83c\udd7f`.
// These emojis in the graphic version must end with the `\ufe0f` symbol.
// Therefore, they should be excluded from the regular expression.
// You must remove next substring `\udd70\udd71\udd7e\udd7f` from the middle of the regex on every update.

// This file is generated by source/emoji/scripts/generate.sh
// eslint-disable-next-line max-len
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/(?:\ud83c[\udd70\udd71\udd7e\udd7f]\ufe0f)|(?:\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c[\udffc-\udfff]|\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c[\udffb\udffd-\udfff]|\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c[\udffb-\udffd\udfff]|\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c[\udffb-\udffe]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d\udc8f\ud83c[\udffb-\udfff]|\ud83d\udc91\ud83c[\udffb-\udfff]|\ud83e\udd1d\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d\udc8f\udc91]|\ud83e\udd1d)|(?:\ud83c\udfc3|\ud83d\udeb6|\ud83e\uddce)(?:\ud83c[\udffb-\udfff])?(?:\u200d[\u2640\u2642]\ufe0f)?(?:\u200d\u27a1\ufe0f)|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\ud83e[\uddaf\uddbc\uddbd])(?:\u200d\u27a1\ufe0f)|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf7c\udf84\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf\uddaf-\uddb3\uddbc\uddbc\uddbd\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc70\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd\uddce\uddce\uddcf\uddd4\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83e\uddd1\u200d\ud83e\uddd1\u200d\ud83e\uddd2\u200d\ud83e\uddd2|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83e\uddd1\u200d\ud83e\uddd1\u200d\ud83e\uddd2|\ud83e\uddd1\u200d\ud83e\uddd2\u200d\ud83e\uddd2|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83d\ude36\u200d\ud83c\udf2b\ufe0f|\u26d3\ufe0f\u200d\ud83d\udca5|\u2764\ufe0f\u200d\ud83d\udd25|\u2764\ufe0f\u200d\ud83e\ude79|\ud83c\udf44\u200d\ud83d\udfeb|\ud83c\udf4b\u200d\ud83d\udfe9|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc26\u200d\ud83d\udd25|\ud83d\udc3b\u200d\u2744\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83d\ude2e\u200d\ud83d\udca8|\ud83d\ude35\u200d\ud83d\udcab|\ud83d\ude42\u200d\u2194\ufe0f|\ud83d\ude42\u200d\u2195\ufe0f|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddd1\u200d\ud83e\uddd2|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|\ud83d\udc08\u200d\u2b1b|\ud83d\udc26\u200d\u2b1b)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|\ud83e\udef0|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0c\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\udd77\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd\udec3-\udec5\udef1-\udef8]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udc8e\udc90\udc92-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5-\uded7\udedc-\udedf\udeeb\udeec\udef4-\udefc\udfe0-\udfeb\udff0]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd76\udd78-\uddb4\uddb7\uddba\uddbc-\uddcc\uddd0\uddde-\uddff\ude70-\ude7c\ude80-\ude88\ude90-\udebd\udebf-\udec2\udece-\udedb\udee0-\udee8]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g);

/***/ }),

/***/ "./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AudioOrigin: () => (/* binding */ AudioOrigin),
/* harmony export */   ChatCreationProgress: () => (/* binding */ ChatCreationProgress),
/* harmony export */   FocusDirection: () => (/* binding */ FocusDirection),
/* harmony export */   GlobalSearchContent: () => (/* binding */ GlobalSearchContent),
/* harmony export */   LeftColumnContent: () => (/* binding */ LeftColumnContent),
/* harmony export */   LoadMoreDirection: () => (/* binding */ LoadMoreDirection),
/* harmony export */   ManagementProgress: () => (/* binding */ ManagementProgress),
/* harmony export */   ManagementScreens: () => (/* binding */ ManagementScreens),
/* harmony export */   MediaViewerOrigin: () => (/* binding */ MediaViewerOrigin),
/* harmony export */   NewChatMembersProgress: () => (/* binding */ NewChatMembersProgress),
/* harmony export */   PaymentStep: () => (/* binding */ PaymentStep),
/* harmony export */   ProfileEditProgress: () => (/* binding */ ProfileEditProgress),
/* harmony export */   ProfileState: () => (/* binding */ ProfileState),
/* harmony export */   RightColumnContent: () => (/* binding */ RightColumnContent),
/* harmony export */   SettingsScreens: () => (/* binding */ SettingsScreens),
/* harmony export */   StoryViewerOrigin: () => (/* binding */ StoryViewerOrigin),
/* harmony export */   UPLOADING_WALLPAPER_SLUG: () => (/* binding */ UPLOADING_WALLPAPER_SLUG)
/* harmony export */ });
let LoadMoreDirection = /*#__PURE__*/function (LoadMoreDirection) {
  LoadMoreDirection[LoadMoreDirection["Backwards"] = 0] = "Backwards";
  LoadMoreDirection[LoadMoreDirection["Forwards"] = 1] = "Forwards";
  LoadMoreDirection[LoadMoreDirection["Around"] = 2] = "Around";
  return LoadMoreDirection;
}({});
let FocusDirection = /*#__PURE__*/function (FocusDirection) {
  FocusDirection[FocusDirection["Up"] = 0] = "Up";
  FocusDirection[FocusDirection["Down"] = 1] = "Down";
  FocusDirection[FocusDirection["Static"] = 2] = "Static";
  return FocusDirection;
}({});
let SettingsScreens = /*#__PURE__*/function (SettingsScreens) {
  SettingsScreens[SettingsScreens["Main"] = 0] = "Main";
  SettingsScreens[SettingsScreens["EditProfile"] = 1] = "EditProfile";
  SettingsScreens[SettingsScreens["Notifications"] = 2] = "Notifications";
  SettingsScreens[SettingsScreens["DataStorage"] = 3] = "DataStorage";
  SettingsScreens[SettingsScreens["Language"] = 4] = "Language";
  SettingsScreens[SettingsScreens["ActiveSessions"] = 5] = "ActiveSessions";
  SettingsScreens[SettingsScreens["General"] = 6] = "General";
  SettingsScreens[SettingsScreens["GeneralChatBackground"] = 7] = "GeneralChatBackground";
  SettingsScreens[SettingsScreens["GeneralChatBackgroundColor"] = 8] = "GeneralChatBackgroundColor";
  SettingsScreens[SettingsScreens["Privacy"] = 9] = "Privacy";
  SettingsScreens[SettingsScreens["PrivacyPhoneNumber"] = 10] = "PrivacyPhoneNumber";
  SettingsScreens[SettingsScreens["PrivacyAddByPhone"] = 11] = "PrivacyAddByPhone";
  SettingsScreens[SettingsScreens["PrivacyLastSeen"] = 12] = "PrivacyLastSeen";
  SettingsScreens[SettingsScreens["PrivacyProfilePhoto"] = 13] = "PrivacyProfilePhoto";
  SettingsScreens[SettingsScreens["PrivacyBio"] = 14] = "PrivacyBio";
  SettingsScreens[SettingsScreens["PrivacyBirthday"] = 15] = "PrivacyBirthday";
  SettingsScreens[SettingsScreens["PrivacyGifts"] = 16] = "PrivacyGifts";
  SettingsScreens[SettingsScreens["PrivacyPhoneCall"] = 17] = "PrivacyPhoneCall";
  SettingsScreens[SettingsScreens["PrivacyPhoneP2P"] = 18] = "PrivacyPhoneP2P";
  SettingsScreens[SettingsScreens["PrivacyForwarding"] = 19] = "PrivacyForwarding";
  SettingsScreens[SettingsScreens["PrivacyVoiceMessages"] = 20] = "PrivacyVoiceMessages";
  SettingsScreens[SettingsScreens["PrivacyMessages"] = 21] = "PrivacyMessages";
  SettingsScreens[SettingsScreens["PrivacyGroupChats"] = 22] = "PrivacyGroupChats";
  SettingsScreens[SettingsScreens["PrivacyPhoneNumberAllowedContacts"] = 23] = "PrivacyPhoneNumberAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyPhoneNumberDeniedContacts"] = 24] = "PrivacyPhoneNumberDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyLastSeenAllowedContacts"] = 25] = "PrivacyLastSeenAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyLastSeenDeniedContacts"] = 26] = "PrivacyLastSeenDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyProfilePhotoAllowedContacts"] = 27] = "PrivacyProfilePhotoAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyProfilePhotoDeniedContacts"] = 28] = "PrivacyProfilePhotoDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyBioAllowedContacts"] = 29] = "PrivacyBioAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyBioDeniedContacts"] = 30] = "PrivacyBioDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyBirthdayAllowedContacts"] = 31] = "PrivacyBirthdayAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyBirthdayDeniedContacts"] = 32] = "PrivacyBirthdayDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyGiftsAllowedContacts"] = 33] = "PrivacyGiftsAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyGiftsDeniedContacts"] = 34] = "PrivacyGiftsDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyPhoneCallAllowedContacts"] = 35] = "PrivacyPhoneCallAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyPhoneCallDeniedContacts"] = 36] = "PrivacyPhoneCallDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyPhoneP2PAllowedContacts"] = 37] = "PrivacyPhoneP2PAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyPhoneP2PDeniedContacts"] = 38] = "PrivacyPhoneP2PDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyForwardingAllowedContacts"] = 39] = "PrivacyForwardingAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyForwardingDeniedContacts"] = 40] = "PrivacyForwardingDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyVoiceMessagesAllowedContacts"] = 41] = "PrivacyVoiceMessagesAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyVoiceMessagesDeniedContacts"] = 42] = "PrivacyVoiceMessagesDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyGroupChatsAllowedContacts"] = 43] = "PrivacyGroupChatsAllowedContacts";
  SettingsScreens[SettingsScreens["PrivacyGroupChatsDeniedContacts"] = 44] = "PrivacyGroupChatsDeniedContacts";
  SettingsScreens[SettingsScreens["PrivacyBlockedUsers"] = 45] = "PrivacyBlockedUsers";
  SettingsScreens[SettingsScreens["Performance"] = 46] = "Performance";
  SettingsScreens[SettingsScreens["Folders"] = 47] = "Folders";
  SettingsScreens[SettingsScreens["FoldersCreateFolder"] = 48] = "FoldersCreateFolder";
  SettingsScreens[SettingsScreens["FoldersEditFolder"] = 49] = "FoldersEditFolder";
  SettingsScreens[SettingsScreens["FoldersEditFolderFromChatList"] = 50] = "FoldersEditFolderFromChatList";
  SettingsScreens[SettingsScreens["FoldersEditFolderInvites"] = 51] = "FoldersEditFolderInvites";
  SettingsScreens[SettingsScreens["FoldersIncludedChats"] = 52] = "FoldersIncludedChats";
  SettingsScreens[SettingsScreens["FoldersIncludedChatsFromChatList"] = 53] = "FoldersIncludedChatsFromChatList";
  SettingsScreens[SettingsScreens["FoldersExcludedChats"] = 54] = "FoldersExcludedChats";
  SettingsScreens[SettingsScreens["FoldersExcludedChatsFromChatList"] = 55] = "FoldersExcludedChatsFromChatList";
  SettingsScreens[SettingsScreens["TwoFaDisabled"] = 56] = "TwoFaDisabled";
  SettingsScreens[SettingsScreens["TwoFaNewPassword"] = 57] = "TwoFaNewPassword";
  SettingsScreens[SettingsScreens["TwoFaNewPasswordConfirm"] = 58] = "TwoFaNewPasswordConfirm";
  SettingsScreens[SettingsScreens["TwoFaNewPasswordHint"] = 59] = "TwoFaNewPasswordHint";
  SettingsScreens[SettingsScreens["TwoFaNewPasswordEmail"] = 60] = "TwoFaNewPasswordEmail";
  SettingsScreens[SettingsScreens["TwoFaNewPasswordEmailCode"] = 61] = "TwoFaNewPasswordEmailCode";
  SettingsScreens[SettingsScreens["TwoFaEnabled"] = 62] = "TwoFaEnabled";
  SettingsScreens[SettingsScreens["TwoFaChangePasswordCurrent"] = 63] = "TwoFaChangePasswordCurrent";
  SettingsScreens[SettingsScreens["TwoFaChangePasswordNew"] = 64] = "TwoFaChangePasswordNew";
  SettingsScreens[SettingsScreens["TwoFaChangePasswordConfirm"] = 65] = "TwoFaChangePasswordConfirm";
  SettingsScreens[SettingsScreens["TwoFaChangePasswordHint"] = 66] = "TwoFaChangePasswordHint";
  SettingsScreens[SettingsScreens["TwoFaTurnOff"] = 67] = "TwoFaTurnOff";
  SettingsScreens[SettingsScreens["TwoFaRecoveryEmailCurrentPassword"] = 68] = "TwoFaRecoveryEmailCurrentPassword";
  SettingsScreens[SettingsScreens["TwoFaRecoveryEmail"] = 69] = "TwoFaRecoveryEmail";
  SettingsScreens[SettingsScreens["TwoFaRecoveryEmailCode"] = 70] = "TwoFaRecoveryEmailCode";
  SettingsScreens[SettingsScreens["TwoFaCongratulations"] = 71] = "TwoFaCongratulations";
  SettingsScreens[SettingsScreens["ActiveWebsites"] = 72] = "ActiveWebsites";
  SettingsScreens[SettingsScreens["PasscodeDisabled"] = 73] = "PasscodeDisabled";
  SettingsScreens[SettingsScreens["PasscodeNewPasscode"] = 74] = "PasscodeNewPasscode";
  SettingsScreens[SettingsScreens["PasscodeNewPasscodeConfirm"] = 75] = "PasscodeNewPasscodeConfirm";
  SettingsScreens[SettingsScreens["PasscodeEnabled"] = 76] = "PasscodeEnabled";
  SettingsScreens[SettingsScreens["PasscodeChangePasscodeCurrent"] = 77] = "PasscodeChangePasscodeCurrent";
  SettingsScreens[SettingsScreens["PasscodeChangePasscodeNew"] = 78] = "PasscodeChangePasscodeNew";
  SettingsScreens[SettingsScreens["PasscodeChangePasscodeConfirm"] = 79] = "PasscodeChangePasscodeConfirm";
  SettingsScreens[SettingsScreens["PasscodeTurnOff"] = 80] = "PasscodeTurnOff";
  SettingsScreens[SettingsScreens["PasscodeCongratulations"] = 81] = "PasscodeCongratulations";
  SettingsScreens[SettingsScreens["Experimental"] = 82] = "Experimental";
  SettingsScreens[SettingsScreens["Stickers"] = 83] = "Stickers";
  SettingsScreens[SettingsScreens["QuickReaction"] = 84] = "QuickReaction";
  SettingsScreens[SettingsScreens["CustomEmoji"] = 85] = "CustomEmoji";
  SettingsScreens[SettingsScreens["DoNotTranslate"] = 86] = "DoNotTranslate";
  SettingsScreens[SettingsScreens["FoldersShare"] = 87] = "FoldersShare";
  return SettingsScreens;
}({});
let LeftColumnContent = /*#__PURE__*/function (LeftColumnContent) {
  LeftColumnContent[LeftColumnContent["ChatList"] = 0] = "ChatList";
  LeftColumnContent[LeftColumnContent["GlobalSearch"] = 1] = "GlobalSearch";
  LeftColumnContent[LeftColumnContent["Settings"] = 2] = "Settings";
  LeftColumnContent[LeftColumnContent["Contacts"] = 3] = "Contacts";
  LeftColumnContent[LeftColumnContent["Archived"] = 4] = "Archived";
  LeftColumnContent[LeftColumnContent["NewChannelStep1"] = 5] = "NewChannelStep1";
  LeftColumnContent[LeftColumnContent["NewChannelStep2"] = 6] = "NewChannelStep2";
  LeftColumnContent[LeftColumnContent["NewGroupStep1"] = 7] = "NewGroupStep1";
  LeftColumnContent[LeftColumnContent["NewGroupStep2"] = 8] = "NewGroupStep2";
  return LeftColumnContent;
}({});
let GlobalSearchContent = /*#__PURE__*/function (GlobalSearchContent) {
  GlobalSearchContent[GlobalSearchContent["ChatList"] = 0] = "ChatList";
  GlobalSearchContent[GlobalSearchContent["ChannelList"] = 1] = "ChannelList";
  GlobalSearchContent[GlobalSearchContent["BotApps"] = 2] = "BotApps";
  GlobalSearchContent[GlobalSearchContent["Media"] = 3] = "Media";
  GlobalSearchContent[GlobalSearchContent["Links"] = 4] = "Links";
  GlobalSearchContent[GlobalSearchContent["Files"] = 5] = "Files";
  GlobalSearchContent[GlobalSearchContent["Music"] = 6] = "Music";
  GlobalSearchContent[GlobalSearchContent["Voice"] = 7] = "Voice";
  return GlobalSearchContent;
}({});
let RightColumnContent = /*#__PURE__*/function (RightColumnContent) {
  RightColumnContent[RightColumnContent["ChatInfo"] = 0] = "ChatInfo";
  RightColumnContent[RightColumnContent["Management"] = 1] = "Management";
  RightColumnContent[RightColumnContent["Statistics"] = 2] = "Statistics";
  RightColumnContent[RightColumnContent["BoostStatistics"] = 3] = "BoostStatistics";
  RightColumnContent[RightColumnContent["MessageStatistics"] = 4] = "MessageStatistics";
  RightColumnContent[RightColumnContent["StoryStatistics"] = 5] = "StoryStatistics";
  RightColumnContent[RightColumnContent["StickerSearch"] = 6] = "StickerSearch";
  RightColumnContent[RightColumnContent["GifSearch"] = 7] = "GifSearch";
  RightColumnContent[RightColumnContent["PollResults"] = 8] = "PollResults";
  RightColumnContent[RightColumnContent["AddingMembers"] = 9] = "AddingMembers";
  RightColumnContent[RightColumnContent["CreateTopic"] = 10] = "CreateTopic";
  RightColumnContent[RightColumnContent["EditTopic"] = 11] = "EditTopic";
  RightColumnContent[RightColumnContent["MonetizationStatistics"] = 12] = "MonetizationStatistics";
  return RightColumnContent;
}({});
let MediaViewerOrigin = /*#__PURE__*/function (MediaViewerOrigin) {
  MediaViewerOrigin[MediaViewerOrigin["Inline"] = 0] = "Inline";
  MediaViewerOrigin[MediaViewerOrigin["ScheduledInline"] = 1] = "ScheduledInline";
  MediaViewerOrigin[MediaViewerOrigin["SharedMedia"] = 2] = "SharedMedia";
  MediaViewerOrigin[MediaViewerOrigin["ProfileAvatar"] = 3] = "ProfileAvatar";
  MediaViewerOrigin[MediaViewerOrigin["SettingsAvatar"] = 4] = "SettingsAvatar";
  MediaViewerOrigin[MediaViewerOrigin["MiddleHeaderAvatar"] = 5] = "MiddleHeaderAvatar";
  MediaViewerOrigin[MediaViewerOrigin["Album"] = 6] = "Album";
  MediaViewerOrigin[MediaViewerOrigin["ScheduledAlbum"] = 7] = "ScheduledAlbum";
  MediaViewerOrigin[MediaViewerOrigin["SearchResult"] = 8] = "SearchResult";
  MediaViewerOrigin[MediaViewerOrigin["SuggestedAvatar"] = 9] = "SuggestedAvatar";
  MediaViewerOrigin[MediaViewerOrigin["StarsTransaction"] = 10] = "StarsTransaction";
  MediaViewerOrigin[MediaViewerOrigin["PreviewMedia"] = 11] = "PreviewMedia";
  MediaViewerOrigin[MediaViewerOrigin["SponsoredMessage"] = 12] = "SponsoredMessage";
  return MediaViewerOrigin;
}({});
let StoryViewerOrigin = /*#__PURE__*/function (StoryViewerOrigin) {
  StoryViewerOrigin[StoryViewerOrigin["StoryRibbon"] = 0] = "StoryRibbon";
  StoryViewerOrigin[StoryViewerOrigin["MiddleHeaderAvatar"] = 1] = "MiddleHeaderAvatar";
  StoryViewerOrigin[StoryViewerOrigin["ChatList"] = 2] = "ChatList";
  StoryViewerOrigin[StoryViewerOrigin["SearchResult"] = 3] = "SearchResult";
  return StoryViewerOrigin;
}({});
let AudioOrigin = /*#__PURE__*/function (AudioOrigin) {
  AudioOrigin[AudioOrigin["Inline"] = 0] = "Inline";
  AudioOrigin[AudioOrigin["SharedMedia"] = 1] = "SharedMedia";
  AudioOrigin[AudioOrigin["Search"] = 2] = "Search";
  AudioOrigin[AudioOrigin["OneTimeModal"] = 3] = "OneTimeModal";
  return AudioOrigin;
}({});
let ChatCreationProgress = /*#__PURE__*/function (ChatCreationProgress) {
  ChatCreationProgress[ChatCreationProgress["Idle"] = 0] = "Idle";
  ChatCreationProgress[ChatCreationProgress["InProgress"] = 1] = "InProgress";
  ChatCreationProgress[ChatCreationProgress["Complete"] = 2] = "Complete";
  ChatCreationProgress[ChatCreationProgress["Error"] = 3] = "Error";
  return ChatCreationProgress;
}({});
let ProfileEditProgress = /*#__PURE__*/function (ProfileEditProgress) {
  ProfileEditProgress[ProfileEditProgress["Idle"] = 0] = "Idle";
  ProfileEditProgress[ProfileEditProgress["InProgress"] = 1] = "InProgress";
  ProfileEditProgress[ProfileEditProgress["Complete"] = 2] = "Complete";
  ProfileEditProgress[ProfileEditProgress["Error"] = 3] = "Error";
  return ProfileEditProgress;
}({});
let ManagementProgress = /*#__PURE__*/function (ManagementProgress) {
  ManagementProgress[ManagementProgress["Idle"] = 0] = "Idle";
  ManagementProgress[ManagementProgress["InProgress"] = 1] = "InProgress";
  ManagementProgress[ManagementProgress["Complete"] = 2] = "Complete";
  ManagementProgress[ManagementProgress["Error"] = 3] = "Error";
  return ManagementProgress;
}({});
let NewChatMembersProgress = /*#__PURE__*/function (NewChatMembersProgress) {
  NewChatMembersProgress[NewChatMembersProgress["Closed"] = 0] = "Closed";
  NewChatMembersProgress[NewChatMembersProgress["InProgress"] = 1] = "InProgress";
  NewChatMembersProgress[NewChatMembersProgress["Loading"] = 2] = "Loading";
  return NewChatMembersProgress;
}({});
let ProfileState = /*#__PURE__*/function (ProfileState) {
  ProfileState[ProfileState["Profile"] = 0] = "Profile";
  ProfileState[ProfileState["SharedMedia"] = 1] = "SharedMedia";
  ProfileState[ProfileState["MemberList"] = 2] = "MemberList";
  ProfileState[ProfileState["StoryList"] = 3] = "StoryList";
  ProfileState[ProfileState["SavedDialogs"] = 4] = "SavedDialogs";
  return ProfileState;
}({});
let PaymentStep = /*#__PURE__*/function (PaymentStep) {
  PaymentStep[PaymentStep["Checkout"] = 0] = "Checkout";
  PaymentStep[PaymentStep["SavedPayments"] = 1] = "SavedPayments";
  PaymentStep[PaymentStep["ConfirmPassword"] = 2] = "ConfirmPassword";
  PaymentStep[PaymentStep["PaymentInfo"] = 3] = "PaymentInfo";
  PaymentStep[PaymentStep["ShippingInfo"] = 4] = "ShippingInfo";
  PaymentStep[PaymentStep["Shipping"] = 5] = "Shipping";
  PaymentStep[PaymentStep["ConfirmPayment"] = 6] = "ConfirmPayment";
  return PaymentStep;
}({});
const UPLOADING_WALLPAPER_SLUG = 'UPLOADING_WALLPAPER_SLUG';
let ManagementScreens = /*#__PURE__*/function (ManagementScreens) {
  ManagementScreens[ManagementScreens["Initial"] = 0] = "Initial";
  ManagementScreens[ManagementScreens["ChatPrivacyType"] = 1] = "ChatPrivacyType";
  ManagementScreens[ManagementScreens["Discussion"] = 2] = "Discussion";
  ManagementScreens[ManagementScreens["ChannelSubscribers"] = 3] = "ChannelSubscribers";
  ManagementScreens[ManagementScreens["GroupType"] = 4] = "GroupType";
  ManagementScreens[ManagementScreens["GroupPermissions"] = 5] = "GroupPermissions";
  ManagementScreens[ManagementScreens["GroupRemovedUsers"] = 6] = "GroupRemovedUsers";
  ManagementScreens[ManagementScreens["ChannelRemovedUsers"] = 7] = "ChannelRemovedUsers";
  ManagementScreens[ManagementScreens["GroupUserPermissionsCreate"] = 8] = "GroupUserPermissionsCreate";
  ManagementScreens[ManagementScreens["GroupUserPermissions"] = 9] = "GroupUserPermissions";
  ManagementScreens[ManagementScreens["ChatAdministrators"] = 10] = "ChatAdministrators";
  ManagementScreens[ManagementScreens["GroupRecentActions"] = 11] = "GroupRecentActions";
  ManagementScreens[ManagementScreens["ChatAdminRights"] = 12] = "ChatAdminRights";
  ManagementScreens[ManagementScreens["ChatNewAdminRights"] = 13] = "ChatNewAdminRights";
  ManagementScreens[ManagementScreens["GroupMembers"] = 14] = "GroupMembers";
  ManagementScreens[ManagementScreens["GroupAddAdmins"] = 15] = "GroupAddAdmins";
  ManagementScreens[ManagementScreens["Invites"] = 16] = "Invites";
  ManagementScreens[ManagementScreens["EditInvite"] = 17] = "EditInvite";
  ManagementScreens[ManagementScreens["Reactions"] = 18] = "Reactions";
  ManagementScreens[ManagementScreens["InviteInfo"] = 19] = "InviteInfo";
  ManagementScreens[ManagementScreens["JoinRequests"] = 20] = "JoinRequests";
  return ManagementScreens;
}({});

/***/ }),

/***/ "./src/util/Deferred.ts":
/*!******************************!*\
  !*** ./src/util/Deferred.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Deferred)
/* harmony export */ });
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class Deferred {
  constructor() {
    _defineProperty(this, "promise", void 0);
    _defineProperty(this, "reject", void 0);
    _defineProperty(this, "resolve", void 0);
    this.promise = new Promise((resolve, reject) => {
      this.reject = reject;
      this.resolve = resolve;
    });
  }
  static resolved(value) {
    const deferred = new Deferred();
    deferred.resolve(value);
    return deferred;
  }
}

/***/ }),

/***/ "./src/util/activeTabMonitor.ts":
/*!**************************************!*\
  !*** ./src/util/activeTabMonitor.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addActiveTabChangeListener: () => (/* binding */ addActiveTabChangeListener)
/* harmony export */ });
const STORAGE_KEY = 'tt-active-tab';
const INTERVAL = 2000;
const tabKey = String(Date.now() + Math.random());
localStorage.setItem(STORAGE_KEY, tabKey);
let callback;
const interval = window.setInterval(() => {
  if (callback && localStorage.getItem(STORAGE_KEY) !== tabKey) {
    callback();
    clearInterval(interval);
  }
}, INTERVAL);
function addActiveTabChangeListener(_callback) {
  callback = _callback;
}

/***/ }),

/***/ "./src/util/animation.ts":
/*!*******************************!*\
  !*** ./src/util/animation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   animate: () => (/* binding */ animate),
/* harmony export */   animateInstantly: () => (/* binding */ animateInstantly),
/* harmony export */   animateNumber: () => (/* binding */ animateNumber),
/* harmony export */   animateSingle: () => (/* binding */ animateSingle),
/* harmony export */   applyStyles: () => (/* binding */ applyStyles),
/* harmony export */   cancelSingleAnimation: () => (/* binding */ cancelSingleAnimation),
/* harmony export */   timingFunctions: () => (/* binding */ timingFunctions)
/* harmony export */ });
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");

let currentInstance;
function animateSingle(tick, schedulerFn, instance) {
  if (!instance) {
    if (currentInstance && !currentInstance.isCancelled) {
      currentInstance.isCancelled = true;
    }
    instance = {
      isCancelled: false
    };
    currentInstance = instance;
  }
  if (!instance.isCancelled && tick()) {
    schedulerFn(() => {
      animateSingle(tick, schedulerFn, instance);
    });
  }
}
function cancelSingleAnimation() {
  const dumbScheduler = cb => cb;
  const dumbCb = () => undefined;
  animateSingle(dumbCb, dumbScheduler);
}
function animate(tick, schedulerFn) {
  schedulerFn(() => {
    if (tick()) {
      animate(tick, schedulerFn);
    }
  });
}
function animateInstantly(tick, schedulerFn) {
  if (tick()) {
    schedulerFn(() => {
      animateInstantly(tick, schedulerFn);
    });
  }
}
const timingFunctions = {
  linear: t => t,
  easeIn: t => t ** 1.675,
  easeOut: t => -1 * t ** 1.675,
  easeInOut: t => 0.5 * (Math.sin((t - 0.5) * Math.PI) + 1),
  easeInQuad: t => t * t,
  easeOutQuad: t => t * (2 - t),
  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,
  easeInCubic: t => t ** 3,
  easeOutCubic: t => --t * t * t + 1,
  easeInOutCubic: t => t < 0.5 ? 4 * t ** 3 : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,
  easeInQuart: t => t ** 4,
  easeOutQuart: t => 1 - --t * t ** 3,
  easeInOutQuart: t => t < 0.5 ? 8 * t ** 4 : 1 - 8 * --t * t ** 3,
  easeInQuint: t => t ** 5,
  easeOutQuint: t => 1 + --t * t ** 4,
  easeInOutQuint: t => t < 0.5 ? 16 * t ** 5 : 1 + 16 * --t * t ** 4
};
function animateNumber({
  timing = timingFunctions.linear,
  onUpdate,
  duration,
  onEnd,
  from,
  to
}) {
  const t0 = Date.now();
  let isCanceled = false;
  animateInstantly(() => {
    if (isCanceled) return false;
    const t1 = Date.now();
    const t = Math.min((t1 - t0) / duration, 1);
    const progress = timing(t);
    if (typeof from === 'number' && typeof to === 'number') {
      onUpdate(from + (to - from) * progress);
    } else if (Array.isArray(from) && Array.isArray(to)) {
      const result = from.map((f, i) => f + (to[i] - f) * progress);
      onUpdate(result);
    }
    if (t === 1) {
      onEnd?.();
    }
    return t < 1;
  }, _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMeasure);
  return () => {
    isCanceled = true;
    onEnd?.(true);
  };
}
function applyStyles(element, css) {
  Object.assign(element.style, css);
}

/***/ }),

/***/ "./src/util/appBadge.ts":
/*!******************************!*\
  !*** ./src/util/appBadge.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateAppBadge: () => (/* binding */ updateAppBadge)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");



function updateAppBadge(unreadCount) {
  if (!(0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)()).isMasterTab) return;
  if (typeof window.navigator.setAppBadge !== 'function') {
    return;
  }
  window.navigator.setAppBadge(unreadCount).catch(err => {
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
      // eslint-disable-next-line no-console
      console.error(err);
    }
  });
}

/***/ }),

/***/ "./src/util/areDeepEqual.ts":
/*!**********************************!*\
  !*** ./src/util/areDeepEqual.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   areDeepEqual: () => (/* binding */ areDeepEqual)
/* harmony export */ });
function areDeepEqual(value1, value2) {
  const type1 = typeof value1;
  const type2 = typeof value2;
  if (type1 !== type2) {
    return false;
  }

  // eslint-disable-next-line no-null/no-null
  if (type1 !== 'object' || value1 === null || value2 === null) {
    return value1 === value2;
  }
  const isArray1 = Array.isArray(value1);
  const isArray2 = Array.isArray(value2);
  if (isArray1 !== isArray2) {
    return false;
  }
  if (isArray1) {
    const array1 = value1;
    const array2 = value2;
    if (array1.length !== array2.length) {
      return false;
    }
    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));
  }
  const object1 = value1;
  const object2 = value2;
  const keys1 = Object.keys(object1);
  return keys1.length === Object.keys(object2).length && keys1.every(key1 => areDeepEqual(object1[key1], object2[key1]));
}

/***/ }),

/***/ "./src/util/arePropsShallowEqual.ts":
/*!******************************************!*\
  !*** ./src/util/arePropsShallowEqual.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ arePropsShallowEqual),
/* harmony export */   logUnequalProps: () => (/* binding */ logUnequalProps)
/* harmony export */ });
function arePropsShallowEqual(currentProps, newProps) {
  if (currentProps === newProps) {
    return true;
  }
  const currentKeys = Object.keys(currentProps);
  const currentKeysLength = currentKeys.length;
  const newKeysLength = Object.keys(newProps).length;
  if (currentKeysLength !== newKeysLength) {
    return false;
  }
  if (currentKeysLength === 0) {
    return true;
  }
  for (let i = 0; i < currentKeysLength; i++) {
    const prop = currentKeys[i];
    if (currentProps[prop] !== newProps[prop]) {
      return false;
    }
  }
  return true;
}
function logUnequalProps(currentProps, newProps, msg, debugKey = '') {
  const currentKeys = Object.keys(currentProps);
  const currentKeysLength = currentKeys.length;
  const newKeysLength = Object.keys(newProps).length;
  if (currentKeysLength !== newKeysLength) {
    // eslint-disable-next-line no-console
    console.log(`${msg} LENGTH`);
    return;
  }

  // eslint-disable-next-line no-console
  console.log(msg);
  currentKeys.forEach(prop => {
    if (currentProps[prop] !== newProps[prop]) {
      // eslint-disable-next-line no-console
      console.log(debugKey, prop, ':', currentProps[prop], '=>', newProps[prop]);
    }
  });
}

/***/ }),

/***/ "./src/util/betterView.ts":
/*!********************************!*\
  !*** ./src/util/betterView.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   betterView: () => (/* binding */ betterView)
/* harmony export */ });
/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation */ "./src/util/animation.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");



const TEST_INTERVAL = 5000; // 5 sec
const FRAMES_TO_TEST = 10;
const REDUCED_FPS = 35;
let isImproved = false;
function betterView() {
  if (!_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_IOS) return;
  let interval;
  let lastFocusAt = Date.now();
  function setupInterval() {
    if (interval || isImproved) return;
    interval = window.setInterval(testAndImprove, TEST_INTERVAL);
  }
  window.addEventListener('focus', () => {
    const now = Date.now();
    if (now - lastFocusAt < 100) return; // iOS triggers two `focus` events for some reason
    lastFocusAt = now;
    setupInterval();
    testAndImprove();
  });
  window.addEventListener('blur', () => {
    clearInterval(interval);
    interval = undefined;
  });
  if (document.hasFocus()) {
    setupInterval();
    testAndImprove();
  }
}
async function testAndImprove() {
  const fps = await testFps();
  if (fps <= REDUCED_FPS) {
    improveView();
  }
}
function testFps() {
  return new Promise(resolve => {
    const frames = [];
    let lastFrameAt = performance.now();
    (0,_animation__WEBPACK_IMPORTED_MODULE_0__.animate)(() => {
      const now = performance.now();
      frames.push(now - lastFrameAt);
      lastFrameAt = now;
      if (frames.length === FRAMES_TO_TEST) {
        const mean = frames.sort()[Math.floor(frames.length / 2)];
        resolve(Math.round(1000 / mean));
        return false;
      }
      return true;
    }, _schedulers__WEBPACK_IMPORTED_MODULE_1__.fastRaf);
  });
}
function improveView() {
  isImproved = true;
  const containerEl = document.createElement('div');
  containerEl.style.cssText = 'position: absolute; top: 0; left: 0; width: 0; height: 100%; overflow: hidden;';
  const boosterEl = document.createElement('div');
  const height = window.screen.height * 1.5;
  boosterEl.style.cssText = `width: 0; height: ${height}px; transform: translateX(100%); transition: transform 100ms;`;
  boosterEl.innerHTML = '&nbsp;';
  containerEl.appendChild(boosterEl);
  document.body.appendChild(containerEl);
  requestAnimationFrame(() => {
    boosterEl.addEventListener('transitionend', () => {
      containerEl.remove();
    });
    boosterEl.style.transform = '';
  });
}

/***/ }),

/***/ "./src/util/browser/idb.ts":
/*!*********************************!*\
  !*** ./src/util/browser/idb.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MAIN_IDB_STORE: () => (/* binding */ MAIN_IDB_STORE),
/* harmony export */   PASSCODE_IDB_STORE: () => (/* binding */ PASSCODE_IDB_STORE)
/* harmony export */ });
/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb-keyval */ "./node_modules/idb-keyval/dist/index.js");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

class IdbStore {
  constructor(name) {
    _defineProperty(this, "store", void 0);
    this.store = (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.createStore)(name, 'store');
  }
  set(key, value) {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.set)(key, value, this.store);
  }
  setMany(entries) {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.setMany)(entries, this.store);
  }
  get(key) {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.get)(key, this.store);
  }
  getMany(keys) {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.getMany)(keys, this.store);
  }
  clear() {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.clear)(this.store);
  }
  del(key) {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.del)(key, this.store);
  }
  delMany(keys) {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.delMany)(keys, this.store);
  }
  entries() {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.entries)(this.store);
  }
  keys() {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.keys)(this.store);
  }
  values() {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.values)(this.store);
  }
  update(key, updater) {
    return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_0__.update)(key, updater, this.store);
  }
}
const MAIN_IDB_STORE = new IdbStore('tt-data');
const PASSCODE_IDB_STORE = new IdbStore('tt-passcode');

/***/ }),

/***/ "./src/util/browser/intlListFormat.ts":
/*!********************************************!*\
  !*** ./src/util/browser/intlListFormat.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBasicListFormat: () => (/* binding */ getBasicListFormat)
/* harmony export */ });
function getBasicListFormat() {
  return {
    format: items => items.join(', ')
  };
}

/***/ }),

/***/ "./src/util/browser/unloadVideo.ts":
/*!*****************************************!*\
  !*** ./src/util/browser/unloadVideo.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ unloadVideo)
/* harmony export */ });
function unloadVideo(video) {
  video.pause();
  // https://github.com/shaka-project/shaka-player/commit/0e3d10e61cb08cc35750e48face4e58f24542fc8
  video.removeAttribute('src');
  while (video.firstChild) {
    video.removeChild(video.firstChild);
  }
  video.load();
}

/***/ }),

/***/ "./src/util/buildClassName.ts":
/*!************************************!*\
  !*** ./src/util/buildClassName.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createClassNameBuilder: () => (/* binding */ createClassNameBuilder),
/* harmony export */   "default": () => (/* binding */ buildClassName)
/* harmony export */ });
function buildClassName(...parts) {
  return parts.filter(Boolean).join(' ');
}
function createClassNameBuilder(componentName) {
  return (elementName, ...modifiers) => {
    const baseName = elementName === '&' ? componentName : `${componentName}__${elementName}`;
    return modifiers.reduce((acc, modifier) => {
      if (modifier) {
        // A bit hacky way to pass global class names
        if (Array.isArray(modifier)) {
          acc.push(...modifier);
        } else {
          acc.push(`${baseName}--${modifier}`);
        }
      }
      return acc;
    }, [baseName]).join(' ');
  };
}

/***/ }),

/***/ "./src/util/buildStyle.ts":
/*!********************************!*\
  !*** ./src/util/buildStyle.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildStyle)
/* harmony export */ });
function buildStyle(...parts) {
  return parts.filter(Boolean).join(';');
}

/***/ }),

/***/ "./src/util/cacheApi.ts":
/*!******************************!*\
  !*** ./src/util/cacheApi.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Type: () => (/* binding */ Type),
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   fetch: () => (/* binding */ fetch),
/* harmony export */   isCacheApiSupported: () => (/* binding */ isCacheApiSupported),
/* harmony export */   remove: () => (/* binding */ remove),
/* harmony export */   save: () => (/* binding */ save)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");


// eslint-disable-next-line no-restricted-globals
const cacheApi = self.caches;
let isSupported;
async function isCacheApiSupported() {
  if (!cacheApi) return false;
  isSupported = isSupported ?? (await cacheApi.has('test').then(() => true).catch(() => false));
  return isSupported;
}
let Type = /*#__PURE__*/function (Type) {
  Type[Type["Text"] = 0] = "Text";
  Type[Type["Blob"] = 1] = "Blob";
  Type[Type["Json"] = 2] = "Json";
  Type[Type["ArrayBuffer"] = 3] = "ArrayBuffer";
  return Type;
}({});
async function fetch(cacheName, key, type, isHtmlAllowed = false) {
  if (!cacheApi) {
    return undefined;
  }
  try {
    // To avoid the error "Request scheme 'webdocument' is unsupported"
    const request = _config__WEBPACK_IMPORTED_MODULE_0__.IS_PACKAGED_ELECTRON ? `${_config__WEBPACK_IMPORTED_MODULE_0__.ELECTRON_HOST_URL}/${key.replace(/:/g, '_')}` : new Request(key.replace(/:/g, '_'));
    const cache = await cacheApi.open(cacheName);
    const response = await cache.match(request);
    if (!response) {
      return undefined;
    }
    const contentType = response.headers.get('Content-Type');
    switch (type) {
      case Type.Text:
        return await response.text();
      case Type.Blob:
        {
          // Ignore deprecated data-uri avatars
          if (key.startsWith('avatar') && contentType && contentType.startsWith('text')) {
            return undefined;
          }
          const blob = await response.blob();
          const shouldRecreate = !blob.type || !isHtmlAllowed && blob.type.includes('html');
          // iOS Safari fails to preserve `type` in cache
          let resolvedType = blob.type || contentType;
          if (!(shouldRecreate && resolvedType)) {
            return blob;
          }

          // Prevent HTML-in-video attacks (for files that were cached before fix)
          if (!isHtmlAllowed) {
            resolvedType = resolvedType.replace(/html/gi, '');
          }
          return new Blob([blob], {
            type: resolvedType
          });
        }
      case Type.Json:
        return await response.json();
      case Type.ArrayBuffer:
        return await response.arrayBuffer();
      default:
        return undefined;
    }
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn(err);
    return undefined;
  }
}
async function save(cacheName, key, data) {
  if (!cacheApi) {
    return false;
  }
  try {
    const cacheData = typeof data === 'string' || data instanceof Blob || data instanceof ArrayBuffer ? data : JSON.stringify(data);
    // To avoid the error "Request scheme 'webdocument' is unsupported"
    const request = _config__WEBPACK_IMPORTED_MODULE_0__.IS_PACKAGED_ELECTRON ? `${_config__WEBPACK_IMPORTED_MODULE_0__.ELECTRON_HOST_URL}/${key.replace(/:/g, '_')}` : new Request(key.replace(/:/g, '_'));
    const response = new Response(cacheData);
    const cache = await cacheApi.open(cacheName);
    await cache.put(request, response);
    return true;
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn(err);
    return false;
  }
}
async function remove(cacheName, key) {
  try {
    if (!cacheApi) {
      return undefined;
    }
    const cache = await cacheApi.open(cacheName);
    return await cache.delete(key);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn(err);
    return undefined;
  }
}
async function clear(cacheName) {
  try {
    if (!cacheApi) {
      return undefined;
    }
    return await cacheApi.delete(cacheName);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn(err);
    return undefined;
  }
}

/***/ }),

/***/ "./src/util/callbacks.ts":
/*!*******************************!*\
  !*** ./src/util/callbacks.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCallbackManager: () => (/* binding */ createCallbackManager)
/* harmony export */ });
function createCallbackManager() {
  const callbacks = new Set();
  function addCallback(cb) {
    callbacks.add(cb);
    return () => {
      removeCallback(cb);
    };
  }
  function removeCallback(cb) {
    callbacks.delete(cb);
  }
  function runCallbacks(...args) {
    callbacks.forEach(callback => {
      callback(...args);
    });
  }
  function hasCallbacks() {
    return Boolean(callbacks.size);
  }
  return {
    runCallbacks,
    addCallback,
    removeCallback,
    hasCallbacks
  };
}

/***/ }),

/***/ "./src/util/captureEscKeyListener.ts":
/*!*******************************************!*\
  !*** ./src/util/captureEscKeyListener.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ captureEscKeyListener)
/* harmony export */ });
/* harmony import */ var _captureKeyboardListeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./captureKeyboardListeners */ "./src/util/captureKeyboardListeners.ts");

function captureEscKeyListener(handler) {
  return (0,_captureKeyboardListeners__WEBPACK_IMPORTED_MODULE_0__["default"])({
    onEsc: handler
  });
}

/***/ }),

/***/ "./src/util/captureEvents.ts":
/*!***********************************!*\
  !*** ./src/util/captureEvents.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IOS_SCREEN_EDGE_THRESHOLD: () => (/* binding */ IOS_SCREEN_EDGE_THRESHOLD),
/* harmony export */   SWIPE_DIRECTION_THRESHOLD: () => (/* binding */ SWIPE_DIRECTION_THRESHOLD),
/* harmony export */   SWIPE_DIRECTION_TOLERANCE: () => (/* binding */ SWIPE_DIRECTION_TOLERANCE),
/* harmony export */   SwipeDirection: () => (/* binding */ SwipeDirection),
/* harmony export */   captureEvents: () => (/* binding */ captureEvents)
/* harmony export */ });
/* harmony import */ var _lethargy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lethargy */ "./src/util/lethargy.ts");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ "./src/util/math.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _windowSize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./windowSize */ "./src/util/windowSize.ts");





let SwipeDirection = /*#__PURE__*/function (SwipeDirection) {
  SwipeDirection[SwipeDirection["Up"] = 0] = "Up";
  SwipeDirection[SwipeDirection["Down"] = 1] = "Down";
  SwipeDirection[SwipeDirection["Left"] = 2] = "Left";
  SwipeDirection[SwipeDirection["Right"] = 3] = "Right";
  return SwipeDirection;
}({});

// https://stackoverflow.com/questions/11287877/how-can-i-get-e-offsetx-on-mobile-ipad
// Android does not have this value, and iOS has it but as read-only

const IOS_SCREEN_EDGE_THRESHOLD = 20;
const SWIPE_DIRECTION_THRESHOLD = 10;
const SWIPE_DIRECTION_TOLERANCE = 1.5;
const MOVE_THRESHOLD = 15;
const SWIPE_THRESHOLD_DEFAULT = 20;
const RELEASE_WHEEL_ZOOM_DELAY = 150;
const RELEASE_WHEEL_DRAG_DELAY = 150;
function getDistance(a, b) {
  if (!b) return 0;
  return Math.hypot(b.pageX - a.pageX, b.pageY - a.pageY);
}
function getTouchCenter(a, b) {
  return {
    x: (a.pageX + b.pageX) / 2,
    y: (a.pageY + b.pageY) / 2
  };
}
let lastClickTime = 0;
const lethargy = new _lethargy__WEBPACK_IMPORTED_MODULE_0__.Lethargy({
  stability: 5,
  sensitivity: 25,
  tolerance: _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_WINDOWS ? 1 : 0.6,
  // Windows `scrollDelta` does not die down to 0
  delay: 150
});
function captureEvents(element, options) {
  let captureEvent;
  let hasMoved = false;
  let hasSwiped = false;
  let isZooming = false;
  let initialDistance = 0;
  let wheelZoom = options.initialZoom ?? 1;
  let initialDragOffset = {
    x: 0,
    y: 0
  };
  let isDragCanceled = {
    x: false,
    y: false
  };
  const currentWindowSize = _windowSize__WEBPACK_IMPORTED_MODULE_4__["default"].get();
  let initialTouchCenter = {
    x: currentWindowSize.width / 2,
    y: currentWindowSize.height / 2
  };
  let initialSwipeAxis;
  const minZoom = options.minZoom ?? 1;
  const maxZoom = options.maxZoom ?? 4;
  function onCapture(e) {
    const target = e.target;
    const {
      excludedClosestSelector,
      includedClosestSelector,
      withNativeDrag,
      withCursor,
      onDrag
    } = options;
    if (element !== target && !element.contains(target)) {
      return;
    }
    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
      return;
    }
    if (excludedClosestSelector && (target.matches(excludedClosestSelector) || target.closest(excludedClosestSelector)) || includedClosestSelector && !(target.matches(includedClosestSelector) || target.closest(includedClosestSelector))) {
      return;
    }
    captureEvent = e;
    if (e.type === 'mousedown') {
      if (!withNativeDrag && onDrag) {
        e.preventDefault();
      }
      document.addEventListener('mousemove', onMove);
      document.addEventListener('mouseup', onRelease);
    } else if (e.type === 'touchstart') {
      // We need to always listen on `touchstart` target:
      // https://stackoverflow.com/questions/33298828/touch-move-event-dont-fire-after-touch-start-target-is-removed
      target.addEventListener('touchmove', onMove, {
        passive: true
      });
      target.addEventListener('touchend', onRelease, {
        passive: true
      });
      target.addEventListener('touchcancel', onRelease, {
        passive: true
      });
      if ('touches' in e) {
        if (e.pageX === undefined) {
          e.pageX = e.touches[0].pageX;
        }
        if (e.pageY === undefined) {
          e.pageY = e.touches[0].pageY;
        }
        if (e.touches.length === 2) {
          initialDistance = getDistance(e.touches[0], e.touches[1]);
          initialTouchCenter = getTouchCenter(e.touches[0], e.touches[1]);
        }
      }
    }
    if (withCursor) {
      document.body.classList.add('cursor-grabbing');
    }
    options.onCapture?.(e);
  }
  function onRelease(e) {
    if (captureEvent) {
      if (options.withCursor) {
        document.body.classList.remove('cursor-grabbing');
      }
      document.removeEventListener('mouseup', onRelease);
      document.removeEventListener('mousemove', onMove);
      captureEvent.target.removeEventListener('touchcancel', onRelease);
      captureEvent.target.removeEventListener('touchend', onRelease);
      captureEvent.target.removeEventListener('touchmove', onMove);
      if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_IOS && options.selectorToPreventScroll) {
        Array.from(document.querySelectorAll(options.selectorToPreventScroll)).forEach(scrollable => {
          scrollable.style.overflow = '';
        });
      }
      if (e) {
        if (hasMoved) {
          if (options.onRelease) {
            options.onRelease(e);
          }
        } else if (e.type === 'mouseup') {
          if (options.onDoubleClick && Date.now() - lastClickTime < 300) {
            options.onDoubleClick(e, {
              centerX: captureEvent.pageX,
              centerY: captureEvent.pageY
            });
          } else if (options.onClick && (!('button' in e) || e.button === 0)) {
            options.onClick(e);
          }
          lastClickTime = Date.now();
        }
      }
    }
    hasMoved = false;
    hasSwiped = false;
    isZooming = false;
    initialDistance = 0;
    wheelZoom = (0,_math__WEBPACK_IMPORTED_MODULE_1__.clamp)(wheelZoom, minZoom, maxZoom);
    initialSwipeAxis = undefined;
    initialDragOffset = {
      x: 0,
      y: 0
    };
    isDragCanceled = {
      x: false,
      y: false
    };
    const newWindowSize = _windowSize__WEBPACK_IMPORTED_MODULE_4__["default"].get();
    initialTouchCenter = {
      x: newWindowSize.width / 2,
      y: newWindowSize.height / 2
    };
    captureEvent = undefined;
  }
  function onMove(e) {
    if (captureEvent) {
      if (e.type === 'touchmove' && 'touches' in e) {
        if (e.pageX === undefined) {
          e.pageX = e.touches[0].pageX;
        }
        if (e.pageY === undefined) {
          e.pageY = e.touches[0].pageY;
        }
        if (options.onZoom && initialDistance > 0 && e.touches.length === 2) {
          const endDistance = getDistance(e.touches[0], e.touches[1]);
          const touchCenter = getTouchCenter(e.touches[0], e.touches[1]);
          const dragOffsetX = touchCenter.x - initialTouchCenter.x;
          const dragOffsetY = touchCenter.y - initialTouchCenter.y;
          const zoomFactor = endDistance / initialDistance;
          options.onZoom(e, {
            zoomFactor,
            initialCenterX: initialTouchCenter.x,
            initialCenterY: initialTouchCenter.y,
            dragOffsetX,
            dragOffsetY,
            currentCenterX: touchCenter.x,
            currentCenterY: touchCenter.y
          });
          if (zoomFactor !== 1) hasMoved = true;
        }
      }
      const dragOffsetX = e.pageX - captureEvent.pageX;
      const dragOffsetY = e.pageY - captureEvent.pageY;
      if (Math.abs(dragOffsetX) >= MOVE_THRESHOLD || Math.abs(dragOffsetY) >= MOVE_THRESHOLD) {
        hasMoved = true;
      }
      let shouldPreventScroll = false;
      if (options.onDrag) {
        options.onDrag(e, captureEvent, {
          dragOffsetX,
          dragOffsetY
        });
        shouldPreventScroll = true;
      }
      if (options.onSwipe && !hasSwiped) {
        hasSwiped = onSwipe(e, dragOffsetX, dragOffsetY);
        shouldPreventScroll = hasSwiped;
      }
      if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_IOS && shouldPreventScroll && options.selectorToPreventScroll) {
        Array.from(document.querySelectorAll(options.selectorToPreventScroll)).forEach(scrollable => {
          scrollable.style.overflow = 'hidden';
        });
      }
    }
  }
  function onSwipe(e, dragOffsetX, dragOffsetY) {
    // Avoid conflicts with swipe-to-back gestures
    if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_IOS) {
      const x = e.touches[0].pageX;
      if (x <= IOS_SCREEN_EDGE_THRESHOLD || x >= _windowSize__WEBPACK_IMPORTED_MODULE_4__["default"].get().width - IOS_SCREEN_EDGE_THRESHOLD) {
        return false;
      }
    }
    const xAbs = Math.abs(dragOffsetX);
    const yAbs = Math.abs(dragOffsetY);
    const threshold = options.swipeThreshold ?? SWIPE_THRESHOLD_DEFAULT;
    let axis;
    if (xAbs > yAbs && xAbs >= threshold) {
      axis = 'x';
    } else if (yAbs > xAbs && yAbs >= threshold) {
      axis = 'y';
    }
    if (!axis) {
      return false;
    }
    if (!initialSwipeAxis) {
      initialSwipeAxis = axis;
    } else if (initialSwipeAxis !== axis) {
      // Prevent horizontal swipe after vertical to prioritize scroll
      return false;
    }
    return processSwipe(e, axis, dragOffsetX, dragOffsetY, options.onSwipe);
  }
  const releaseWheelDrag = (0,_schedulers__WEBPACK_IMPORTED_MODULE_2__.debounce)(onRelease, RELEASE_WHEEL_DRAG_DELAY, false);
  const releaseWheelZoom = (0,_schedulers__WEBPACK_IMPORTED_MODULE_2__.debounce)(onRelease, RELEASE_WHEEL_ZOOM_DELAY, false);
  function onWheelCapture(e) {
    if (hasMoved) return;
    onCapture(e);
    hasMoved = true;
    initialTouchCenter = {
      x: e.x,
      y: e.y
    };
  }
  function onWheelZoom(e) {
    if (!options.onZoom) return;
    onWheelCapture(e);
    const dragOffsetX = e.x - initialTouchCenter.x;
    const dragOffsetY = e.y - initialTouchCenter.y;
    const delta = (0,_math__WEBPACK_IMPORTED_MODULE_1__.clamp)(e.deltaY, -25, 25);
    wheelZoom -= delta * 0.01;
    wheelZoom = (0,_math__WEBPACK_IMPORTED_MODULE_1__.clamp)(wheelZoom, minZoom * 0.5, maxZoom * 3);
    isZooming = true;
    options.onZoom(e, {
      zoom: (0,_math__WEBPACK_IMPORTED_MODULE_1__.round)(wheelZoom, 2),
      initialCenterX: initialTouchCenter.x,
      initialCenterY: initialTouchCenter.y,
      dragOffsetX,
      dragOffsetY,
      currentCenterX: e.x,
      currentCenterY: e.y
    });
    releaseWheelZoom(e);
  }
  function onWheelDrag(e) {
    if (!options.onDrag) return;
    onWheelCapture(e);
    // Ignore wheel inertia if drag is canceled in this direction
    if (!isDragCanceled.x || Math.sign(initialDragOffset.x) === Math.sign(e.deltaX)) {
      initialDragOffset.x -= e.deltaX;
    }
    if (!isDragCanceled.y || Math.sign(initialDragOffset.y) === Math.sign(e.deltaY)) {
      initialDragOffset.y -= e.deltaY;
    }
    const {
      x,
      y
    } = initialDragOffset;
    options.onDrag(e, captureEvent, {
      dragOffsetX: x,
      dragOffsetY: y
    }, (dx, dy) => {
      isDragCanceled = {
        x: dx,
        y: dy
      };
    });
    releaseWheelDrag(e);
  }
  function onWheel(e) {
    if (!options.onZoom && !options.onDrag) return;
    if (options.excludedClosestSelector && (e.target.matches(options.excludedClosestSelector) || e.target.closest(options.excludedClosestSelector))) {
      return;
    }
    e.preventDefault();
    e.stopPropagation();
    const {
      doubleTapZoom = 3
    } = options;
    if (options.onDoubleClick && Object.is(e.deltaX, -0) && Object.is(e.deltaY, -0) && e.ctrlKey) {
      onWheelCapture(e);
      wheelZoom = wheelZoom > 1 ? 1 : doubleTapZoom;
      options.onDoubleClick(e, {
        centerX: e.pageX,
        centerY: e.pageY
      });
      hasMoved = false;
      return;
    }
    const metaKeyPressed = e.metaKey || e.ctrlKey || e.shiftKey;
    if (metaKeyPressed) {
      onWheelZoom(e);
    }
    if (!metaKeyPressed && !isZooming) {
      // Check if this event produced by user scroll and not by inertia
      const isUserEvent = lethargy.check(e);
      if (wheelZoom !== 1 || isUserEvent) {
        onWheelDrag(e);
      }
    }
  }
  if (options.withWheelDrag) {
    element.addEventListener('wheel', onWheel);
  }
  element.addEventListener('mousedown', onCapture);
  document.body.addEventListener('touchstart', onCapture, {
    passive: !options.isNotPassive
  });
  return () => {
    onRelease();
    document.body.removeEventListener('touchstart', onCapture);
    element.removeEventListener('mousedown', onCapture);
    element.removeEventListener('wheel', onWheel);
  };
}
function processSwipe(e, currentSwipeAxis, dragOffsetX, dragOffsetY, onSwipe) {
  const offsets = {
    dragOffsetX,
    dragOffsetY
  };
  if (currentSwipeAxis === 'x') {
    if (dragOffsetX < 0) {
      return onSwipe(e, SwipeDirection.Left, offsets);
    } else {
      return onSwipe(e, SwipeDirection.Right, offsets);
    }
  } else if (currentSwipeAxis === 'y') {
    if (dragOffsetY < 0) {
      return onSwipe(e, SwipeDirection.Up, offsets);
    } else {
      return onSwipe(e, SwipeDirection.Down, offsets);
    }
  }
  return false;
}

/***/ }),

/***/ "./src/util/captureKeyboardListeners.ts":
/*!**********************************************!*\
  !*** ./src/util/captureKeyboardListeners.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ captureKeyboardListeners)
/* harmony export */ });
const keyToHandlerName = {
  Enter: 'onEnter',
  Backspace: 'onBackspace',
  Delete: 'onDelete',
  Esc: 'onEsc',
  Escape: 'onEsc',
  ArrowUp: 'onUp',
  ArrowDown: 'onDown',
  ArrowLeft: 'onLeft',
  ArrowRight: 'onRight',
  Tab: 'onTab'
};
const handlers = {
  onEnter: [],
  onDelete: [],
  onBackspace: [],
  onEsc: [],
  onUp: [],
  onDown: [],
  onLeft: [],
  onRight: [],
  onTab: []
};
function captureKeyboardListeners(options) {
  if (!hasActiveHandlers()) {
    document.addEventListener('keydown', handleKeyDown, true);
  }
  Object.keys(options).forEach(handlerName => {
    const handler = options[handlerName];
    if (!handler) {
      return;
    }
    const currentEventHandlers = handlers[handlerName];
    if (currentEventHandlers) {
      currentEventHandlers.push(handler);
    }
  });
  return () => {
    releaseKeyboardListener(options);
  };
}
function hasActiveHandlers() {
  return Object.values(handlers).some(keyHandlers => Boolean(keyHandlers.length));
}
function handleKeyDown(e) {
  const handlerName = keyToHandlerName[e.key];
  if (!handlerName) {
    return;
  }
  const {
    length
  } = handlers[handlerName];
  if (!length) {
    return;
  }
  for (let i = length - 1; i >= 0; i--) {
    const handler = handlers[handlerName][i];
    if (handler(e) !== false) {
      e.stopPropagation();
      break;
    }
  }
}
function releaseKeyboardListener(options) {
  Object.keys(options).forEach(handlerName => {
    const handler = options[handlerName];
    const currentEventHandlers = handlers[handlerName];
    if (currentEventHandlers) {
      const index = currentEventHandlers.findIndex(cb => cb === handler);
      if (index !== -1) {
        currentEventHandlers.splice(index, 1);
      }
    }
  });
  if (!hasActiveHandlers()) {
    document.removeEventListener('keydown', handleKeyDown, false);
  }
}

/***/ }),

/***/ "./src/util/clipboard.ts":
/*!*******************************!*\
  !*** ./src/util/clipboard.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CLIPBOARD_ITEM_SUPPORTED: () => (/* binding */ CLIPBOARD_ITEM_SUPPORTED),
/* harmony export */   copyHtmlToClipboard: () => (/* binding */ copyHtmlToClipboard),
/* harmony export */   copyImageToClipboard: () => (/* binding */ copyImageToClipboard),
/* harmony export */   copyTextToClipboard: () => (/* binding */ copyTextToClipboard),
/* harmony export */   copyTextToClipboardFromPromise: () => (/* binding */ copyTextToClipboardFromPromise)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");

const CLIPBOARD_ITEM_SUPPORTED = window.navigator.clipboard && window.ClipboardItem;
const textCopyEl = document.createElement('textarea');
textCopyEl.setAttribute('readonly', '');
textCopyEl.tabIndex = -1;
textCopyEl.className = 'visually-hidden';
const copyTextToClipboard = str => {
  textCopyEl.value = str;
  document.body.appendChild(textCopyEl);
  const selection = document.getSelection();
  if (selection) {
    // Store previous selection
    const rangeToRestore = selection.rangeCount > 0 && selection.getRangeAt(0);
    textCopyEl.select();
    document.execCommand('copy');
    // Restore the original selection
    if (rangeToRestore) {
      selection.removeAllRanges();
      selection.addRange(rangeToRestore);
    }
  }
  document.body.removeChild(textCopyEl);
};
const copyHtmlToClipboard = (html, text) => {
  if (!window.navigator.clipboard?.write) {
    copyTextToClipboard(text);
    return;
  }
  window.navigator.clipboard.write([new ClipboardItem({
    'text/plain': new Blob([text], {
      type: 'text/plain'
    }),
    'text/html': new Blob([html], {
      type: 'text/html'
    })
  })]);
};
const copyImageToClipboard = imageUrl => {
  if (!imageUrl) return;
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const imageEl = new Image();
  imageEl.onload = e => {
    if (ctx && e.currentTarget) {
      const img = e.currentTarget;
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0, img.width, img.height);
      canvas.toBlob(copyBlobToClipboard, 'image/png', 1);
    }
  };
  imageEl.src = imageUrl;
};
const copyTextToClipboardFromPromise = async (getTextPromise, onSuccess, onFailure) => {
  const copyTextToClipboardFallback = async () => {
    try {
      const text = await getTextPromise;
      if (text) {
        copyTextToClipboard(text);
      } else {
        onFailure();
      }
      return Boolean(text);
    } catch {
      onFailure();
      return false;
    }
  };
  if (!CLIPBOARD_ITEM_SUPPORTED || !navigator.clipboard.write) {
    if (await copyTextToClipboardFallback()) onSuccess();
    return;
  }
  try {
    let hasGetDataError = false;
    const rejectGetDataError = () => Promise.reject(new Error('GET_DATA_ERROR'));
    const clipboardTextItem = new ClipboardItem({
      'text/plain': getTextPromise.then(text => text || rejectGetDataError()).catch(() => {
        hasGetDataError = true;
        return '';
      })
    });
    await navigator.clipboard.write([clipboardTextItem]);
    if (hasGetDataError) {
      onFailure();
      return;
    }
  } catch {
    // Promises in ClipboardItem aren't supported in older Chrome versions
    if (!(await copyTextToClipboardFallback())) return;
  }
  onSuccess();
};
async function copyBlobToClipboard(pngBlob) {
  if (!pngBlob || !CLIPBOARD_ITEM_SUPPORTED) {
    return;
  }
  try {
    await window.navigator.clipboard.write?.([new ClipboardItem({
      [pngBlob.type]: pngBlob
    })]);
  } catch (error) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      // eslint-disable-next-line no-console
      console.error(error);
    }
  }
}

/***/ }),

/***/ "./src/util/cssAnimationEndListeners.ts":
/*!**********************************************!*\
  !*** ./src/util/cssAnimationEndListeners.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   waitForAnimationEnd: () => (/* binding */ waitForAnimationEnd),
/* harmony export */   waitForTransitionEnd: () => (/* binding */ waitForTransitionEnd)
/* harmony export */ });
// Sometimes event is fired earlier than animation completes
const ANIMATION_END_DELAY = 50;
function waitForTransitionEnd(node, handler, propertyName, fallbackMs) {
  return waitForEndEvent('transitionend', node, handler, propertyName, fallbackMs);
}
function waitForAnimationEnd(node, handler, animationName, fallbackMs) {
  return waitForEndEvent('animationend', node, handler, animationName, fallbackMs);
}
function waitForEndEvent(eventType, node, handler, detailedName, fallbackMs) {
  let isHandled = false;
  function cleanup() {
    node.removeEventListener(eventType, handleAnimationEnd);
  }
  function handleAnimationEnd(e) {
    if (isHandled || e.target !== e.currentTarget) {
      return;
    }
    if (detailedName && (e instanceof TransitionEvent && e.propertyName === detailedName || e instanceof AnimationEvent && e.animationName === detailedName)) {
      return;
    }
    isHandled = true;
    cleanup();
    setTimeout(() => {
      handler();
    }, ANIMATION_END_DELAY);
  }
  node.addEventListener(eventType, handleAnimationEnd);
  if (fallbackMs) {
    setTimeout(() => {
      if (isHandled) return;
      cleanup();
      handler();
    }, fallbackMs);
  }
  return cleanup;
}

/***/ }),

/***/ "./src/util/data/readFallbackStrings.ts":
/*!**********************************************!*\
  !*** ./src/util/data/readFallbackStrings.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ readFallbackStrings)
/* harmony export */ });
/* harmony import */ var _readStrings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./readStrings */ "./src/util/data/readStrings.ts");

const FALLBACK_LANG_CODE = 'en';
const FALLBACK_VERSION = 0;
const FALLBACK_TRANSLATE_URL = 'https://translations.telegram.org/en/weba';
async function readFallbackStrings(forLocalScript) {
  let fileData;
  if (forLocalScript) {
    fileData = (await __webpack_require__.e(/*! import() */ "_d64f").then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ "?d64f", 23))).readFileSync('./src/assets/localization/fallback.strings', 'utf8');
  } else {
    const file = await __webpack_require__.e(/*! import() */ "src_assets_localization_fallback_strings").then(__webpack_require__.t.bind(__webpack_require__, /*! ../../assets/localization/fallback.strings */ "./src/assets/localization/fallback.strings", 17));
    fileData = file.default;
  }
  const rawStrings = (0,_readStrings__WEBPACK_IMPORTED_MODULE_0__["default"])(fileData);
  const strings = {};
  Object.entries(rawStrings).forEach(([key, value]) => {
    const [clearKey, pluralSuffix] = key.split('_');
    if (!pluralSuffix) {
      strings[clearKey] = value;
      return;
    }
    const knownValue = strings[clearKey] || {};
    knownValue[pluralSuffix] = value;
    strings[clearKey] = knownValue;
  });
  const langPack = {
    langCode: FALLBACK_LANG_CODE,
    version: FALLBACK_VERSION,
    strings
  };
  const stringsCount = Object.keys(strings).length;
  const language = {
    langCode: FALLBACK_LANG_CODE,
    name: 'English',
    nativeName: 'English',
    pluralCode: FALLBACK_LANG_CODE,
    stringsCount,
    translatedCount: stringsCount,
    translationsUrl: FALLBACK_TRANSLATE_URL
  };
  return {
    langPack,
    language
  };
}

/***/ }),

/***/ "./src/util/data/readStrings.ts":
/*!**************************************!*\
  !*** ./src/util/data/readStrings.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ readStrings)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");

function readStrings(data) {
  const lines = data.split(/;\r?\n?/);
  const result = {};
  for (const line of lines) {
    if (!line.startsWith('"')) continue;
    const [key, value] = parseLine(line) || [];
    if (!key || !value) {
      // eslint-disable-next-line no-console
      console.warn('Bad formatting in line:', line);
      continue;
    }
    result[key] = value;
  }
  return result;
}
function parseLine(line) {
  let isEscaped = false;
  let isInsideString = false;
  let separatorIndex;
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    if (char === '\\') {
      isEscaped = !isEscaped;
      continue;
    }
    if (char === '"' && !isEscaped) {
      isInsideString = !isInsideString;
      continue;
    }
    if (char === '=' && !isInsideString) {
      separatorIndex = i;
      break;
    }
    isEscaped = false;
  }
  if (separatorIndex === undefined || separatorIndex === line.length - 1) return undefined;
  try {
    const key = JSON.parse(line.slice(0, separatorIndex));
    const value = JSON.parse(line.slice(separatorIndex + 1));
    return [key, value];
  } catch (e) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      // eslint-disable-next-line no-console
      console.error('Error parsing line:', line, e);
    }
  }
  return undefined;
}

/***/ }),

/***/ "./src/util/dates/dateFormat.ts":
/*!**************************************!*\
  !*** ./src/util/dates/dateFormat.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MILLISECONDS_IN_DAY: () => (/* binding */ MILLISECONDS_IN_DAY),
/* harmony export */   formatCountdown: () => (/* binding */ formatCountdown),
/* harmony export */   formatCountdownShort: () => (/* binding */ formatCountdownShort),
/* harmony export */   formatDateAtTime: () => (/* binding */ formatDateAtTime),
/* harmony export */   formatDateTimeToString: () => (/* binding */ formatDateTimeToString),
/* harmony export */   formatDateToString: () => (/* binding */ formatDateToString),
/* harmony export */   formatFullDate: () => (/* binding */ formatFullDate),
/* harmony export */   formatHumanDate: () => (/* binding */ formatHumanDate),
/* harmony export */   formatLastUpdated: () => (/* binding */ formatLastUpdated),
/* harmony export */   formatMediaDateTime: () => (/* binding */ formatMediaDateTime),
/* harmony export */   formatMediaDuration: () => (/* binding */ formatMediaDuration),
/* harmony export */   formatMonthAndYear: () => (/* binding */ formatMonthAndYear),
/* harmony export */   formatPastTimeShort: () => (/* binding */ formatPastTimeShort),
/* harmony export */   formatRelativeTime: () => (/* binding */ formatRelativeTime),
/* harmony export */   formatShortDuration: () => (/* binding */ formatShortDuration),
/* harmony export */   formatTime: () => (/* binding */ formatTime),
/* harmony export */   formatTimeDuration: () => (/* binding */ formatTimeDuration),
/* harmony export */   formatVoiceRecordDuration: () => (/* binding */ formatVoiceRecordDuration),
/* harmony export */   formatWeekday: () => (/* binding */ formatWeekday),
/* harmony export */   getDayStart: () => (/* binding */ getDayStart),
/* harmony export */   getDayStartAt: () => (/* binding */ getDayStartAt),
/* harmony export */   isToday: () => (/* binding */ isToday),
/* harmony export */   parseDateString: () => (/* binding */ parseDateString),
/* harmony export */   timestampPlusDay: () => (/* binding */ timestampPlusDay),
/* harmony export */   toYearMonth: () => (/* binding */ toYearMonth)
/* harmony export */ });
/* harmony import */ var _withCache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../withCache */ "./src/util/withCache.ts");

const WEEKDAYS_FULL = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
const MONTHS_FULL = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
const MONTHS_FULL_LOWERCASE = MONTHS_FULL.map(month => month.toLowerCase());
const MIN_SEARCH_YEAR = 2015;
const MAX_DAY_IN_MONTH = 31;
const MAX_MONTH_IN_YEAR = 12;
const MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;
function isToday(date) {
  return getDayStartAt(new Date()) === getDayStartAt(date);
}
function getDayStart(datetime) {
  const date = new Date(datetime);
  date.setHours(0, 0, 0, 0);
  return date;
}
function getDayStartAt(datetime) {
  return getDayStart(datetime).getTime();
}
function toYearMonth(timestamp) {
  const date = new Date(timestamp * 1000);
  return `${date.getFullYear()}-${date.getMonth()}`;
}
function toIsoString(date) {
  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
}

// @optimization `toLocaleTimeString` is avoided because of bad performance
function formatTime(lang, datetime) {
  const date = typeof datetime === 'number' ? new Date(datetime) : datetime;
  const timeFormat = lang.timeFormat || '24h';
  let hours = date.getHours();
  let marker = '';
  if (timeFormat === '12h') {
    marker = hours >= 12 ? '\xa0PM' : '\xa0AM'; // NBSP
    hours = hours > 12 ? hours % 12 : hours;
  }
  return `${String(hours).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}${marker}`;
}
function formatPastTimeShort(lang, datetime, alwaysShowTime = false) {
  const date = typeof datetime === 'number' ? new Date(datetime) : datetime;
  const time = formatTime(lang, date);
  const today = getDayStart(new Date());
  if (date >= today) {
    return time;
  }
  const weekAgo = new Date(today);
  weekAgo.setDate(today.getDate() - 7);
  if (date >= weekAgo) {
    const weekday = lang(`Weekday.Short${WEEKDAYS_FULL[date.getDay()]}`);
    return alwaysShowTime ? lang('FullDateTimeFormat', [weekday, time]) : weekday;
  }
  const noYear = date.getFullYear() === today.getFullYear();
  const formattedDate = formatDateToString(date, lang.code, noYear);
  return alwaysShowTime ? lang('FullDateTimeFormat', [formattedDate, time]) : formattedDate;
}
function formatFullDate(lang, datetime) {
  return formatDateToString(datetime, lang.code, false, 'numeric');
}
function formatMonthAndYear(lang, date, isShort = false) {
  return formatDateToString(date, lang.code, false, isShort ? 'short' : 'long', true);
}
function formatCountdown(lang, msLeft) {
  const days = Math.floor(msLeft / MILLISECONDS_IN_DAY);
  if (msLeft < 0) {
    return 0;
  } else if (days < 1) {
    return formatMediaDuration(msLeft / 1000);
  } else if (days < 7) {
    return lang('Days', days);
  } else if (days < 30) {
    return lang('Weeks', Math.floor(days / 7));
  } else if (days < 365) {
    return lang('Months', Math.floor(days / 30));
  } else {
    return lang('Years', Math.floor(days / 365));
  }
}
function formatCountdownShort(lang, msLeft) {
  if (msLeft < 60 * 1000) {
    return Math.ceil(msLeft / 1000).toString();
  } else if (msLeft < 60 * 60 * 1000) {
    return Math.ceil(msLeft / (60 * 1000)).toString();
  } else if (msLeft < MILLISECONDS_IN_DAY) {
    return lang('MessageTimer.ShortHours', Math.ceil(msLeft / (60 * 60 * 1000)));
  } else {
    return lang('MessageTimer.ShortDays', Math.ceil(msLeft / MILLISECONDS_IN_DAY));
  }
}
function formatLastUpdated(lang, currentTime, lastUpdated = currentTime) {
  const seconds = currentTime - lastUpdated;
  if (seconds < 60) {
    return lang('LiveLocationUpdated.JustNow');
  } else if (seconds < 60 * 60) {
    return lang('LiveLocationUpdated.MinutesAgo', Math.floor(seconds / 60));
  } else {
    return lang('LiveLocationUpdated.TodayAt', formatTime(lang, lastUpdated));
  }
}
function formatRelativeTime(lang, currentTime, lastUpdated = currentTime) {
  const seconds = currentTime - lastUpdated;
  if (seconds < 60) {
    return lang('Time.JustNow');
  }

  // within an hour
  if (seconds < 60 * 60) {
    return lang('Time.MinutesAgo', Math.floor(seconds / 60));
  }
  const lastUpdatedDate = new Date(lastUpdated * 1000);
  const today = getDayStart(new Date());
  if (lastUpdatedDate >= today) {
    return lang('Time.TodayAt', formatTime(lang, lastUpdatedDate));
  }
  const yesterday = new Date(today);
  yesterday.setDate(today.getDate() - 1);
  if (lastUpdatedDate > yesterday) {
    return lang('Time.YesterdayAt', formatTime(lang, lastUpdatedDate));
  }
  return lang('Time.AtDate', formatFullDate(lang, lastUpdatedDate));
}
function formatTimeDuration(lang, duration, showLast = 2) {
  if (!duration) {
    return undefined;
  }
  const durationRecords = [];
  const labels = [{
    multiplier: 1,
    type: 'Seconds'
  }, {
    multiplier: 60,
    type: 'Minutes'
  }, {
    multiplier: 60,
    type: 'Hours'
  }, {
    multiplier: 24,
    type: 'Days'
  }, {
    multiplier: 7,
    type: 'Weeks'
  }];
  let t = 1;
  labels.forEach((label, idx) => {
    t *= label.multiplier;
    if (duration < t) {
      return;
    }
    const modulus = labels[idx === labels.length - 1 ? idx : idx + 1].multiplier;
    durationRecords.push({
      duration: Math.floor(duration / t % modulus),
      type: label.type
    });
  });
  const out = durationRecords.slice(-showLast).reverse();
  for (let i = out.length - 1; i >= 0; --i) {
    if (out[i].duration === 0) {
      out.splice(i, 1);
    }
  }

  // TODO In arabic we don't use "," as delimiter rather we use "and" each time
  return out.map(part => lang(part.type, part.duration, 'i')).join(', ');
}
function formatHumanDate(lang, datetime, isShort = false, noWeekdays = false, isUpperFirst) {
  const date = typeof datetime === 'number' ? new Date(datetime) : datetime;
  const today = getDayStart(new Date());
  if (!noWeekdays) {
    if (toIsoString(date) === toIsoString(today)) {
      return (isUpperFirst || !isShort ? upperFirst : lowerFirst)(lang('Weekday.Today'));
    }
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    if (toIsoString(date) === toIsoString(yesterday)) {
      return (isUpperFirst || !isShort ? upperFirst : lowerFirst)(lang('Weekday.Yesterday'));
    }
    const weekAgo = new Date(today);
    const weekAhead = new Date(today);
    weekAgo.setDate(today.getDate() - 7);
    weekAhead.setDate(today.getDate() + 7);
    if (date >= weekAgo && date <= weekAhead) {
      const weekDayString = formatWeekday(lang, date.getDay(), isShort);
      return (isUpperFirst || !isShort ? upperFirst : lowerFirst)(weekDayString);
    }
  }
  const noYear = date.getFullYear() === today.getFullYear();
  const formattedDate = formatDateToString(date, lang.code, noYear, isShort ? 'short' : 'long');
  return (isUpperFirst || !isShort ? upperFirst : lowerFirst)(formattedDate);
}

/**
 * Returns weekday name
 * @param day 0 - Sunday, 1 - Monday, ...
 */
function formatWeekday(lang, day, isShort = false) {
  const weekDay = WEEKDAYS_FULL[day];
  return isShort ? lang(`Weekday.Short${weekDay}`) : lang(`Weekday.${weekDay}`);
}
function formatMediaDateTime(lang, datetime, isUpperFirst) {
  const date = typeof datetime === 'number' ? new Date(datetime) : datetime;
  return `${formatHumanDate(lang, date, true, undefined, isUpperFirst)}, ${formatTime(lang, date)}`;
}
function formatMediaDuration(duration, maxValue) {
  const hours = Math.floor(duration / 3600);
  const minutes = Math.floor(duration % 3600 / 60);
  const seconds = Math.floor(duration % 3600 % 60);
  const maxHours = maxValue ? Math.floor(maxValue / 3600) : 0;
  const maxMinutes = maxValue ? Math.floor(maxValue % 3600 / 60) : 0;
  let string = '';
  if (hours > 0 || maxHours > 0) {
    string += `${String(hours).padStart(2, '0')}:`;
    string += `${String(minutes).padStart(2, '0')}:`;
  } else if (maxMinutes >= 10) {
    string += `${String(minutes).padStart(2, '0')}:`;
  } else {
    string += `${String(minutes)}:`;
  }
  string += String(seconds).padStart(2, '0');
  return string;
}
function formatVoiceRecordDuration(durationInMs) {
  const parts = [];
  let milliseconds = durationInMs % 1000;
  durationInMs -= milliseconds;
  milliseconds = Math.floor(milliseconds / 10);
  durationInMs = Math.floor(durationInMs / 1000);
  const seconds = durationInMs % 60;
  durationInMs -= seconds;
  durationInMs = Math.floor(durationInMs / 60);
  const minutes = durationInMs % 60;
  durationInMs -= minutes;
  durationInMs = Math.floor(durationInMs / 60);
  const hours = durationInMs % 60;
  if (hours > 0) {
    parts.push(String(hours).padStart(2, '0'));
  }
  parts.push(String(minutes).padStart(hours > 0 ? 2 : 1, '0'));
  parts.push(String(seconds).padStart(2, '0'));
  return `${parts.join(':')},${String(milliseconds).padStart(2, '0')}`;
}
const formatDayToStringWithCache = (0,_withCache__WEBPACK_IMPORTED_MODULE_0__["default"])((dayStartAt, locale, noYear, monthFormat = 'short', noDay) => {
  return new Date(dayStartAt).toLocaleString(locale, {
    year: noYear ? undefined : 'numeric',
    month: monthFormat,
    day: noDay ? undefined : 'numeric'
  });
});
function formatDateToString(datetime, locale = 'en-US', noYear = false, monthFormat = 'short', noDay = false) {
  const date = typeof datetime === 'number' ? new Date(datetime) : datetime;
  const dayStartAt = getDayStartAt(date);
  return formatDayToStringWithCache(dayStartAt, locale, noYear, monthFormat, noDay);
}
function formatDateTimeToString(datetime, locale = 'en-US', noSeconds, timeFormat) {
  const date = typeof datetime === 'number' ? new Date(datetime) : datetime;
  return date.toLocaleString(locale, {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    second: noSeconds ? undefined : 'numeric',
    hourCycle: timeFormat === '12h' ? 'h12' : 'h23'
  });
}
function formatDateAtTime(lang, datetime) {
  const date = typeof datetime === 'number' ? new Date(datetime) : datetime;
  const today = getDayStart(new Date());
  const time = formatTime(lang, date);
  if (toIsoString(date) === toIsoString(today)) {
    return lang('Time.TodayAt', time);
  }
  const yesterday = new Date(today);
  yesterday.setDate(today.getDate() - 1);
  if (toIsoString(date) === toIsoString(yesterday)) {
    return lang('Time.YesterdayAt', time);
  }
  const noYear = date.getFullYear() === today.getFullYear();
  const formattedDate = formatDateToString(date, lang.code, noYear);
  return lang('formatDateAtTime', [formattedDate, time]);
}
function formatShortDuration(lang, duration) {
  if (duration < 0) {
    return lang('RightNow');
  }
  if (duration < 60) {
    const count = Math.ceil(duration);
    return lang('Seconds', {
      count
    }, {
      pluralValue: duration
    });
  }
  if (duration < 60 * 60) {
    const count = Math.ceil(duration / 60);
    return lang('Minutes', {
      count
    }, {
      pluralValue: count
    });
  }
  if (duration < 60 * 60 * 24) {
    const count = Math.ceil(duration / (60 * 60));
    return lang('Hours', {
      count
    }, {
      pluralValue: count
    });
  }
  const count = Math.ceil(duration / (60 * 60 * 24));
  return lang('Days', {
    count
  }, {
    pluralValue: count
  });
}
function isValidDate(day, month, year = 2021) {
  if (month > MAX_MONTH_IN_YEAR - 1 || day > MAX_DAY_IN_MONTH) {
    return false;
  }
  const date = new Date(year, month, day);
  return !Number.isNaN(date.getTime()) && date.getDate() === day;
}
function parseDateString(query = '') {
  const matchStringDate = query.match(/\d{1,2}\s[a-zA-Z]{3,}/);
  const matchEuropeStringDate = query.match(/[a-zA-Z]{3,}\s\d{1,2}/);
  const matchNumberDate = query.match(/\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?/);
  if (!matchStringDate && !matchNumberDate && !matchEuropeStringDate) {
    return undefined;
  }
  if (matchNumberDate) {
    const [date, month, year] = query.split(/[./-]/).map(Number);
    return !(year && year < MIN_SEARCH_YEAR) && isValidDate(date, month - 1, year || undefined) ? `${year ? `${year}-` : ''}${String(month).padStart(2, '0')}-${String(date).padStart(2, '0')}` : undefined;
  }
  const dateParts = query.split(' ');
  const date = matchStringDate ? dateParts[0] : dateParts[1];
  const month = (matchStringDate ? dateParts[1] : dateParts[0]).toLowerCase();
  const monthIndex = MONTHS_FULL_LOWERCASE.findIndex(item => item.startsWith(month));
  return monthIndex !== -1 && isValidDate(Number(date), monthIndex) ? `${String(monthIndex + 1).padStart(2, '0')}-${String(date).padStart(2, '0')}` : undefined;
}
function timestampPlusDay(timestamp) {
  return timestamp + MILLISECONDS_IN_DAY / 1000;
}
function lowerFirst(str) {
  return `${str[0].toLowerCase()}${str.slice(1)}`;
}
function upperFirst(str) {
  return `${str[0].toUpperCase()}${str.slice(1)}`;
}

/***/ }),

/***/ "./src/util/dates/units.ts":
/*!*********************************!*\
  !*** ./src/util/dates/units.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DAY: () => (/* binding */ DAY),
/* harmony export */   HOUR: () => (/* binding */ HOUR),
/* harmony export */   MINUTE: () => (/* binding */ MINUTE),
/* harmony export */   getDays: () => (/* binding */ getDays),
/* harmony export */   getHours: () => (/* binding */ getHours),
/* harmony export */   getMinutes: () => (/* binding */ getMinutes)
/* harmony export */ });
/// In seconds
const MINUTE = 60;
const HOUR = 3600;
const DAY = 86400;
function getMinutes(seconds, roundDown) {
  const roundFunc = roundDown ? Math.floor : Math.ceil;
  return roundFunc(seconds / MINUTE);
}
function getHours(seconds, roundDown) {
  const roundFunc = roundDown ? Math.floor : Math.ceil;
  return roundFunc(seconds / HOUR);
}
function getDays(seconds, roundDown) {
  const roundFunc = roundDown ? Math.floor : Math.ceil;
  return roundFunc(seconds / DAY);
}

/***/ }),

/***/ "./src/util/debugConsole.ts":
/*!**********************************!*\
  !*** ./src/util/debugConsole.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEBUG_LEVELS: () => (/* binding */ DEBUG_LEVELS),
/* harmony export */   disableDebugConsole: () => (/* binding */ disableDebugConsole),
/* harmony export */   getDebugLogs: () => (/* binding */ getDebugLogs),
/* harmony export */   initDebugConsole: () => (/* binding */ initDebugConsole),
/* harmony export */   logDebugMessage: () => (/* binding */ logDebugMessage)
/* harmony export */ });
/* eslint-disable no-console */

const DEBUG_LEVELS = ['log', 'error', 'warn', 'info', 'debug'];
// @ts-ignore
const ORIGINAL_FUNCTIONS = DEBUG_LEVELS.reduce((acc, level) => {
  // @ts-ignore
  acc[level] = console[level];
  return acc;
}, {});
let DEBUG_LOGS = [];
function logDebugMessage(level, ...args) {
  DEBUG_LOGS.push({
    level,
    args,
    date: new Date()
  });
  ORIGINAL_FUNCTIONS[level](...args);
}
function initDebugConsole() {
  DEBUG_LOGS = [];
  DEBUG_LEVELS.forEach(level => {
    // @ts-ignore
    console[level] = (...args) => {
      logDebugMessage(level, ...args);
    };
  });
}
function disableDebugConsole() {
  DEBUG_LEVELS.forEach(level => {
    // @ts-ignore
    console[level] = ORIGINAL_FUNCTIONS[level];
  });
  DEBUG_LOGS = [];
}
function getDebugLogs() {
  return JSON.stringify(DEBUG_LOGS, (key, value) => typeof value === 'bigint' ? value.toString() : value);
}

/***/ }),

/***/ "./src/util/debugOverlay.ts":
/*!**********************************!*\
  !*** ./src/util/debugOverlay.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debugToOverlay: () => (/* binding */ debugToOverlay),
/* harmony export */   incrementOverlayCounter: () => (/* binding */ incrementOverlayCounter),
/* harmony export */   renderCounters: () => (/* binding */ renderCounters)
/* harmony export */ });
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");

const KEYS_TO_IGNORE = new Set(['TeactMemoWrapper renders', 'TeactNContainer renders', 'Button renders']);
const MIN_RENDERS_TO_SHOW = 5;
const MIN_DURATION_TO_SHOW = 2;
const BG_GREEN = ' style="background: lightgreen"';
let counters = {};
const renderCountersThrottled = (0,_schedulers__WEBPACK_IMPORTED_MODULE_0__.throttle)(renderCounters, 500, false);
let loggerEl;
function debugToOverlay(text) {
  if (!loggerEl) {
    setupOverlay();
  }
  const date = new Date();
  const dateFormatted = `${date.toLocaleTimeString()}.${date.getMilliseconds()}`;
  const wasAtBottom = loggerEl.scrollTop + 10 >= loggerEl.scrollHeight - loggerEl.offsetHeight;
  loggerEl.innerHTML += `${dateFormatted}: ${text}<br/>`;
  if (wasAtBottom) {
    loggerEl.scrollTop = loggerEl.scrollHeight;
  }
}
function incrementOverlayCounter(key, value = 1) {
  const now = Date.now();
  if (!counters[key]) {
    counters[key] = {
      value,
      lastUpdateAt: now
    };
  } else {
    counters[key].value += value;
    counters[key].lastUpdateAt = now;
  }
  renderCountersThrottled();
}
function renderCounters() {
  if (!loggerEl) {
    setupOverlay();
  }
  const halfSecondAgo = Date.now() - 500;
  const [maxRenders, maxDuration] = Object.entries(counters).reduce((acc, [key, {
    value
  }]) => {
    if (KEYS_TO_IGNORE.has(key)) {
      return acc;
    }
    if (key.includes('renders') && value > acc[0]) {
      acc[0] = value;
    }
    if (key.includes('duration') && value > acc[1]) {
      acc[1] = value;
    }
    return acc;
  }, [0, 0]);
  loggerEl.innerHTML = Object.entries(counters).filter(([key, {
    value
  }]) => !KEYS_TO_IGNORE.has(key) && (key.includes('renders') && value > MIN_RENDERS_TO_SHOW || key.includes('duration') && value > MIN_DURATION_TO_SHOW)).sort((a, b) => b[1].lastUpdateAt - a[1].lastUpdateAt).map(([key, {
    value,
    lastUpdateAt
  }]) => [`<div style="background: #ff0000${factorToHex(value / (key.includes('renders') ? maxRenders : maxDuration))}">`, `  <span${lastUpdateAt > halfSecondAgo ? BG_GREEN : ''}>${key}: ${Math.round(value)}</span>`, '</div>'].join('\n')).join('\n');
}
function setupOverlay() {
  loggerEl = document.createElement('div');
  loggerEl.style.cssText = 'position: absolute; left: 0; bottom: 25px; z-index: 9998; width: 260px; height: 200px;' + ' border: 1px solid #555; background: rgba(255, 255, 255, 0.9); overflow: auto; font-size: 10px;';
  document.body.appendChild(loggerEl);
  const clearEl = document.createElement('a');
  clearEl.style.cssText = 'position: absolute; left: 222px; bottom: 198px; z-index: 9999; font-size: 20px; ' + 'cursor: pointer;';
  clearEl.innerText = '🔄';
  clearEl.addEventListener('click', () => {
    counters = {};
    renderCountersThrottled();
  });
  document.body.appendChild(clearEl);
}
function factorToHex(factor) {
  return Math.round(255 * factor).toString(16).padStart(2, '0');
}

/***/ }),

/***/ "./src/util/deepDiff.ts":
/*!******************************!*\
  !*** ./src/util/deepDiff.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepDiff: () => (/* binding */ deepDiff)
/* harmony export */ });
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iteratees */ "./src/util/iteratees.ts");

const EQUAL = Symbol('EQUAL');
const DELETE = {
  __delete: true
};
const DELETE_ALL_CHILDREN = {
  __deleteAllChildren: true
};
function deepDiff(value1, value2) {
  if (value1 === value2) {
    return EQUAL;
  }
  const type1 = typeof value1;
  const type2 = typeof value2;
  if (type1 !== type2) {
    return value2;
  }
  if (Array.isArray(value1) && Array.isArray(value2) && areSortedArraysDeepEqual(value1, value2)) {
    return EQUAL;
  }
  if (!(0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.isLiteralObject)(value1) || !(0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.isLiteralObject)(value2)) {
    return value2;
  }
  const object1 = value1;
  const object2 = value2;
  const keys1 = Object.keys(object1);
  const keys2 = Object.keys(object2);
  if (!keys2.length) {
    return !keys1.length ? EQUAL : DELETE_ALL_CHILDREN;
  }
  const allKeys = (0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.unique)(keys1.concat(keys2));
  const diff = allKeys.reduce((acc, key) => {
    const subValue1 = object1[key];
    const subValue2 = object2[key];
    if (!object2.hasOwnProperty(key)) {
      acc[key] = DELETE;
      return acc;
    }
    if (!object1.hasOwnProperty(key)) {
      acc[key] = subValue2;
      return acc;
    }
    const subDiff = deepDiff(subValue1, subValue2);
    if (subDiff !== EQUAL) {
      acc[key] = subDiff;
    }
    return acc;
  }, {});
  if (Object.keys(diff).length === 0) {
    return EQUAL;
  }
  return diff;
}
function areSortedArraysDeepEqual(array1, array2) {
  if (array1.length !== array2.length) {
    return false;
  }
  return array1.every((item, i) => deepDiff(item, array2[i]) === EQUAL);
}

/***/ }),

/***/ "./src/util/deepLinkParser.ts":
/*!************************************!*\
  !*** ./src/util/deepLinkParser.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildChatBoostLink: () => (/* binding */ buildChatBoostLink),
/* harmony export */   isDeepLink: () => (/* binding */ isDeepLink),
/* harmony export */   tryParseDeepLink: () => (/* binding */ tryParseDeepLink)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _ensureProtocol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ensureProtocol */ "./src/util/ensureProtocol.ts");
/* harmony import */ var _username__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./username */ "./src/util/username.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");





const ELIGIBLE_HOSTNAMES = new Set(['t.me', 'telegram.me', 'telegram.dog']);
function isDeepLink(link) {
  return Boolean(link.match(_config__WEBPACK_IMPORTED_MODULE_0__.RE_TME_LINK) || link.match(_config__WEBPACK_IMPORTED_MODULE_0__.RE_TG_LINK));
}
function tryParseDeepLink(link) {
  if (!isDeepLink(link)) {
    return undefined;
  }
  try {
    return parseDeepLink(link);
  } catch (err) {
    return undefined;
  }
}
function parseDeepLink(url) {
  const correctUrl = (0,_ensureProtocol__WEBPACK_IMPORTED_MODULE_2__.ensureProtocol)(url);
  if (!correctUrl) {
    return undefined;
  }
  if (correctUrl.startsWith('https:') || correctUrl.startsWith('http:')) {
    const urlParsed = new URL(correctUrl);
    return parseHttpLink(urlParsed);
  }
  if (correctUrl.startsWith('tg:')) {
    const urlToParse = _windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_BAD_URL_PARSER ? correctUrl.replace(/^tg:\/\//, 'https://') : correctUrl;
    const urlParsed = new URL(urlToParse);
    return parseTgLink(urlParsed);
  }
  return undefined;
}
function parseTgLink(url) {
  const {
    hostname
  } = url;
  const queryParams = getQueryParams(url);
  const pathParams = getPathParams(url);
  const method = hostname;
  const deepLinkType = getTgDeepLinkType(queryParams, pathParams, method);
  switch (deepLinkType) {
    case 'publicMessageLink':
      {
        const {
          domain,
          post,
          single,
          thread,
          comment,
          t
        } = queryParams;
        return buildPublicMessageLink({
          username: domain,
          messageId: post,
          single,
          threadId: thread,
          commentId: comment,
          mediaTimestamp: t
        });
      }
    case 'privateMessageLink':
      {
        const {
          channel,
          post,
          single,
          thread,
          comment,
          t
        } = queryParams;
        return buildPrivateMessageLink({
          channelId: channel,
          messageId: post,
          single,
          threadId: thread,
          commentId: comment,
          mediaTimestamp: t
        });
      }
    case 'shareLink':
      return buildShareLink({
        text: queryParams.text,
        url: queryParams.url
      });
    case 'chatFolderLink':
      return buildChatFolderLink({
        slug: queryParams.slug
      });
    case 'loginCodeLink':
      return buildLoginCodeLink({
        code: queryParams.code
      });
    case 'telegramPassportLink':
      return buildTelegramPassportLink({
        botId: queryParams.bot_id,
        scope: queryParams.scope,
        publicKey: queryParams.public_key,
        nonce: queryParams.nonce,
        callbackUrl: queryParams.callback_url,
        payload: queryParams.payload
      });
    case 'publicUsernameOrBotLink':
      return buildPublicUsernameOrBotLink({
        username: queryParams.domain,
        start: queryParams.start,
        text: queryParams.text,
        appName: queryParams.appname,
        startApp: queryParams.startapp,
        mode: queryParams.mode,
        startAttach: queryParams.startattach,
        attach: queryParams.attach,
        choose: queryParams.choose,
        ref: queryParams.ref
      });
    case 'privateChannelLink':
      {
        return buildPrivateChannelLink({
          channelId: queryParams.channel
        });
      }
    case 'businessChatLink':
      return buildBusinessChatLink({
        slug: queryParams.slug
      });
    case 'premiumReferrerLink':
      return buildPremiumReferrerLink({
        referrer: queryParams.ref
      });
    case 'premiumMultigiftLink':
      return buildPremiumMultigiftLink({
        referrer: queryParams.ref
      });
    case 'chatBoostLink':
      return buildChatBoostLink({
        username: queryParams.domain,
        id: queryParams.channel
      });
    case 'giftUniqueLink':
      return buildGiftUniqueLink({
        slug: queryParams.slug
      });
    default:
      break;
  }
  return undefined;
}
function parseHttpLink(url) {
  if (!ELIGIBLE_HOSTNAMES.has(url.hostname)) {
    return undefined;
  }
  const queryParams = getQueryParams(url);
  const pathParams = getPathParams(url);
  const deepLinkType = getHttpDeepLinkType(queryParams, pathParams);
  switch (deepLinkType) {
    case 'publicMessageLink':
      {
        const {
          single,
          comment,
          t
        } = queryParams;
        const {
          username,
          thread,
          messageId
        } = pathParams.length === 2 ? {
          username: pathParams[0],
          thread: queryParams.thread,
          messageId: pathParams[1]
        } : {
          username: pathParams[0],
          thread: pathParams[1],
          messageId: pathParams[2]
        };
        return buildPublicMessageLink({
          username,
          messageId,
          single,
          threadId: thread,
          commentId: comment,
          mediaTimestamp: t
        });
      }
    case 'privateMessageLink':
      {
        const {
          single,
          comment,
          t
        } = queryParams;
        const {
          channelId,
          thread,
          messageId
        } = pathParams.length === 3 ? {
          channelId: pathParams[1],
          thread: queryParams.thread,
          messageId: pathParams[2]
        } : {
          channelId: pathParams[1],
          thread: pathParams[2],
          messageId: pathParams[3]
        };
        return buildPrivateMessageLink({
          channelId,
          messageId,
          single,
          threadId: thread,
          commentId: comment,
          mediaTimestamp: t
        });
      }
    case 'shareLink':
      {
        return buildShareLink({
          text: queryParams.text,
          url: queryParams.url
        });
      }
    case 'chatFolderLink':
      return buildChatFolderLink({
        slug: pathParams[1]
      });
    case 'loginCodeLink':
      return buildLoginCodeLink({
        code: pathParams[1]
      });
    case 'publicUsernameOrBotLink':
      return buildPublicUsernameOrBotLink({
        username: pathParams[0],
        start: queryParams.start,
        text: queryParams.text,
        startApp: queryParams.startapp,
        mode: queryParams.mode,
        appName: undefined,
        startAttach: queryParams.startattach,
        attach: queryParams.attach,
        choose: queryParams.choose,
        ref: queryParams.ref
      });
    case 'privateChannelLink':
      {
        return buildPrivateChannelLink({
          channelId: pathParams[1]
        });
      }
    case 'businessChatLink':
      return buildBusinessChatLink({
        slug: pathParams[1]
      });
    case 'chatBoostLink':
      {
        if (pathParams[0] === 'boost') {
          return buildChatBoostLink({
            username: pathParams[1],
            id: queryParams.c
          });
        }
        const isPrivateChannel = pathParams[0] === 'c';
        return buildChatBoostLink({
          username: !isPrivateChannel ? pathParams[0] : undefined,
          id: isPrivateChannel ? pathParams[1] : undefined
        });
      }
    case 'giftUniqueLink':
      {
        const slug = pathParams.slice(1).join('/');
        return buildGiftUniqueLink({
          slug
        });
      }
    default:
      break;
  }
  return undefined;
}
function getHttpDeepLinkType(queryParams, pathParams) {
  const len = pathParams.length;
  const method = pathParams[0];
  if (len === 1) {
    if (method === 'share') return 'shareLink';
    if (method === 'boost' || queryParams.boost !== undefined) return 'chatBoostLink';
    if ((0,_username__WEBPACK_IMPORTED_MODULE_3__.isUsernameValid)(method)) {
      return 'publicUsernameOrBotLink';
    }
  } else if (len === 2) {
    if (method === 'addlist') return 'chatFolderLink';
    if (method === 'login') return 'loginCodeLink';
    if (method === 'm') return 'businessChatLink';
    if (method === 'boost') return 'chatBoostLink';
    if (method === 'nft') return 'giftUniqueLink';
    if (method === 'c') {
      if (queryParams.boost !== undefined) return 'chatBoostLink';
      return 'privateChannelLink';
    }
    if ((0,_username__WEBPACK_IMPORTED_MODULE_3__.isUsernameValid)(pathParams[0]) && isNumber(pathParams[1])) {
      return 'publicMessageLink';
    }
  } else if (len === 3) {
    if (method === 'c' && pathParams.slice(1).every(isNumber)) {
      return 'privateMessageLink';
    }
    if ((0,_username__WEBPACK_IMPORTED_MODULE_3__.isUsernameValid)(pathParams[0]) && pathParams.slice(1).every(isNumber)) {
      return 'publicMessageLink';
    }
    if (method === 'nft') return 'giftUniqueLink';
  } else if (len === 4) {
    if (method === 'c' && pathParams.slice(1).every(isNumber)) {
      return 'privateMessageLink';
    }
  }
  return 'unknown';
}
function getTgDeepLinkType(queryParams, pathParams, method) {
  switch (method) {
    case 'resolve':
      {
        const {
          // eslint-disable-next-line @typescript-eslint/naming-convention
          domain,
          post,
          bot_id,
          scope,
          public_key,
          nonce
        } = queryParams;
        if (domain === 'telegrampassport' && bot_id && scope && public_key && nonce) {
          return 'telegramPassportLink';
        }
        if (domain && post) {
          return 'publicMessageLink';
        }
        if ((0,_username__WEBPACK_IMPORTED_MODULE_3__.isUsernameValid)(domain)) {
          return 'publicUsernameOrBotLink';
        }
        break;
      }
    case 'privatepost':
      {
        const {
          channel,
          post
        } = queryParams;
        if (channel) {
          if (post) return 'privateMessageLink';
          return 'privateChannelLink';
        }
        break;
      }
    case 'msg_url':
      return 'shareLink';
    case 'addlist':
      return 'chatFolderLink';
    case 'login':
      return 'loginCodeLink';
    case 'passport':
      return 'telegramPassportLink';
    case 'message':
      return 'businessChatLink';
    case 'premium_offer':
      return 'premiumReferrerLink';
    case 'premium_multigift':
      return 'premiumMultigiftLink';
    case 'boost':
      return 'chatBoostLink';
    case 'nft':
      return 'giftUniqueLink';
    default:
      break;
  }
  return 'unknown';
}
function buildShareLink(params) {
  const {
    url,
    text
  } = params;
  if (!url) {
    return undefined;
  }
  return {
    type: 'shareLink',
    url,
    text
  };
}
function buildPublicMessageLink(params) {
  const {
    messageId,
    threadId,
    commentId,
    username,
    single,
    mediaTimestamp
  } = params;
  if (!username || !(0,_username__WEBPACK_IMPORTED_MODULE_3__.isUsernameValid)(username)) {
    return undefined;
  }
  if (!messageId || !isNumber(messageId)) {
    return undefined;
  }
  if (threadId && !isNumber(threadId)) {
    return undefined;
  }
  if (commentId && !isNumber(commentId)) {
    return undefined;
  }
  return {
    type: 'publicMessageLink',
    username,
    messageId: Number(messageId),
    isSingle: single === '',
    threadId: threadId ? Number(threadId) : undefined,
    commentId: commentId ? Number(commentId) : undefined,
    mediaTimestamp
  };
}
function buildPrivateMessageLink(params) {
  const {
    messageId,
    threadId,
    commentId,
    channelId,
    single,
    mediaTimestamp
  } = params;
  if (!channelId || !isNumber(channelId)) {
    return undefined;
  }
  if (!messageId || !isNumber(messageId)) {
    return undefined;
  }
  if (threadId && !isNumber(threadId)) {
    return undefined;
  }
  if (commentId && !isNumber(commentId)) {
    return undefined;
  }
  return {
    type: 'privateMessageLink',
    channelId,
    messageId: Number(messageId),
    isSingle: single === '',
    threadId: threadId ? Number(threadId) : undefined,
    commentId: commentId ? Number(commentId) : undefined,
    mediaTimestamp
  };
}
function buildChatFolderLink(params) {
  const {
    slug
  } = params;
  if (!slug) {
    return undefined;
  }
  return {
    type: 'chatFolderLink',
    slug
  };
}
function buildLoginCodeLink(params) {
  const {
    code
  } = params;
  if (!code) {
    return undefined;
  }
  return {
    type: 'loginCodeLink',
    code
  };
}
function buildTelegramPassportLink(params) {
  const {
    botId,
    scope,
    publicKey,
    nonce,
    callbackUrl,
    payload
  } = params;
  if (!botId || !isNumber(botId) || !scope || !publicKey || !nonce) {
    return undefined;
  }
  return {
    type: 'telegramPassportLink',
    botId: Number(botId),
    scope,
    publicKey,
    nonce,
    callbackUrl,
    payload
  };
}
function buildPublicUsernameOrBotLink(params) {
  const {
    username,
    start,
    text,
    startApp,
    mode,
    startAttach,
    attach,
    appName,
    choose,
    ref
  } = params;
  if (!username) {
    return undefined;
  }
  if (!(0,_username__WEBPACK_IMPORTED_MODULE_3__.isUsernameValid)(username)) {
    return undefined;
  }
  return {
    type: 'publicUsernameOrBotLink',
    username,
    start,
    startApp,
    mode,
    appName,
    startAttach,
    attach,
    text,
    choose,
    ref
  };
}
function buildPrivateChannelLink(params) {
  const {
    channelId
  } = params;
  if (!channelId) {
    return undefined;
  }
  return {
    type: 'privateChannelLink',
    channelId: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.toChannelId)(channelId)
  };
}
function buildChatBoostLink(params) {
  const {
    username,
    id
  } = params;
  if (!username && !id) {
    return undefined;
  }
  return {
    type: 'chatBoostLink',
    username,
    id: id ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.toChannelId)(id) : undefined
  };
}
function buildBusinessChatLink(params) {
  const {
    slug
  } = params;
  if (!slug) {
    return undefined;
  }
  return {
    type: 'businessChatLink',
    slug
  };
}
function buildGiftUniqueLink(params) {
  const {
    slug
  } = params;
  if (!slug) {
    return undefined;
  }
  return {
    type: 'giftUniqueLink',
    slug
  };
}
function buildPremiumReferrerLink(params) {
  const {
    referrer
  } = params;
  if (!referrer) {
    return undefined;
  }
  return {
    type: 'premiumReferrerLink',
    referrer
  };
}
function buildPremiumMultigiftLink(params) {
  const {
    referrer
  } = params;
  if (!referrer) {
    return undefined;
  }
  return {
    type: 'premiumMultigiftLink',
    referrer
  };
}
function isNumber(s) {
  return /^-?\d+$/.test(s);
}
function getPathParams(url) {
  const parts = url.pathname.split('/').filter(Boolean);
  if (parts[0] === 's') {
    parts.shift();
  }
  return parts.map(decodeURI);
}
function getQueryParams(url) {
  return Object.fromEntries(url.searchParams);
}

/***/ }),

/***/ "./src/util/deepMerge.ts":
/*!*******************************!*\
  !*** ./src/util/deepMerge.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepMerge: () => (/* binding */ deepMerge)
/* harmony export */ });
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iteratees */ "./src/util/iteratees.ts");

function deepMerge(value1, value2) {
  if (value1 === value2) {
    return value2;
  }
  if (!(0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.isLiteralObject)(value2)) {
    return value2;
  }
  if (!(0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.isLiteralObject)(value1)) {
    return reduceDiff(value2);
  }

  // eslint-disable-next-line no-underscore-dangle
  if (value2.__deleteAllChildren) {
    return {};
  }
  const allKeys = (0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.unique)(Object.keys(value1).concat(Object.keys(value2)));
  return allKeys.reduce((acc, key) => {
    const oldValue = value1[key];
    if (!value2.hasOwnProperty(key)) {
      acc[key] = oldValue;
    } else {
      const newValue = value2[key];
      // eslint-disable-next-line no-underscore-dangle
      if (!newValue?.__delete) {
        acc[key] = deepMerge(oldValue, newValue);
      }
    }
    return acc;
  }, {});
}
function reduceDiff(diff) {
  // eslint-disable-next-line no-underscore-dangle
  if (diff.__deleteAllChildren) {
    return {};
  }
  return Object.entries(diff).reduce((acc, [key, value]) => {
    // eslint-disable-next-line no-underscore-dangle
    if (!value?.__delete) {
      // eslint-disable-next-line no-null/no-null
      acc[key] = (0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.isLiteralObject)(value) ? reduceDiff(value) : value;
    }
    return acc;
  }, {});
}

/***/ }),

/***/ "./src/util/deeplink.ts":
/*!******************************!*\
  !*** ./src/util/deeplink.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatShareText: () => (/* binding */ formatShareText),
/* harmony export */   processDeepLink: () => (/* binding */ processDeepLink)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _deepLinkParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deepLinkParser */ "./src/util/deepLinkParser.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");





const processDeepLink = url => {
  const actions = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)();
  const parsedLink = (0,_deepLinkParser__WEBPACK_IMPORTED_MODULE_3__.tryParseDeepLink)(url);
  if (parsedLink) {
    switch (parsedLink.type) {
      case 'privateMessageLink':
        handlePrivateMessageLink(parsedLink, actions);
        return true;
      case 'publicMessageLink':
        {
          actions.openChatByUsername({
            username: parsedLink.username,
            threadId: parsedLink.threadId,
            messageId: parsedLink.messageId,
            commentId: parsedLink.commentId
          });
          return true;
        }
      case 'publicUsernameOrBotLink':
        {
          const choose = parseChooseParameter(parsedLink.choose);
          actions.openChatByUsername({
            username: parsedLink.username,
            startParam: parsedLink.start,
            ref: parsedLink.ref,
            text: parsedLink.text,
            startApp: parsedLink.startApp,
            mode: parsedLink.mode,
            startAttach: parsedLink.startAttach,
            attach: parsedLink.attach,
            choose,
            originalParts: [parsedLink.username, parsedLink.appName]
          });
          return true;
        }
      case 'privateChannelLink':
        {
          actions.openPrivateChannel({
            id: parsedLink.channelId
          });
          return true;
        }
      case 'businessChatLink':
        actions.resolveBusinessChatLink({
          slug: parsedLink.slug
        });
        return true;
      case 'premiumReferrerLink':
        actions.openPremiumModal();
        return true;
      case 'premiumMultigiftLink':
        actions.openGiftRecipientPicker();
        return true;
      case 'chatBoostLink':
        actions.processBoostParameters({
          usernameOrId: parsedLink.username || parsedLink.id,
          isPrivate: Boolean(parsedLink.id)
        });
        return true;
      case 'giftUniqueLink':
        actions.openUniqueGiftBySlug({
          slug: parsedLink.slug
        });
        return true;
      default:
        break;
    }
  }
  if (!url.match(_config__WEBPACK_IMPORTED_MODULE_1__.RE_TG_LINK)) {
    return false;
  }
  const urlToParse = _windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_BAD_URL_PARSER ? url.replace(/^tg:\/\//, 'https://') : url;
  const {
    protocol,
    searchParams,
    hostname
  } = new URL(urlToParse);
  if (protocol !== 'tg:') return false;
  const method = hostname;
  const params = Object.fromEntries(searchParams);
  const {
    checkChatInvite,
    openChatByUsername,
    openChatByPhoneNumber,
    openStickerSet,
    joinVoiceChatByLink,
    openInvoice,
    openChatWithDraft,
    checkChatlistInvite,
    openStoryViewerByUsername,
    checkGiftCode,
    openStarsBalanceModal
  } = actions;
  switch (method) {
    case 'resolve':
      {
        const {
          domain,
          phone,
          post,
          comment,
          voicechat,
          livestream,
          start,
          startattach,
          attach,
          thread,
          topic,
          appname,
          startapp,
          mode,
          story,
          text
        } = params;
        const threadId = Number(thread) || Number(topic) || undefined;
        if (domain !== 'telegrampassport') {
          if (appname) {
            openChatByUsername({
              username: domain,
              startApp: startapp,
              mode,
              originalParts: [domain, appname],
              text
            });
          } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {
            joinVoiceChatByLink({
              username: domain,
              inviteHash: voicechat || livestream
            });
          } else if (phone) {
            openChatByPhoneNumber({
              phoneNumber: phone,
              startAttach: startattach,
              attach,
              text
            });
          } else if (story) {
            openStoryViewerByUsername({
              username: domain,
              storyId: Number(story)
            });
          } else {
            openChatByUsername({
              username: domain,
              messageId: post ? Number(post) : undefined,
              commentId: comment ? Number(comment) : undefined,
              startParam: start,
              mode,
              startAttach: startattach,
              attach,
              threadId
            });
          }
        }
        break;
      }
    case 'bg':
      {
        // const {
        //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,
        // } = params;
        break;
      }
    case 'join':
      {
        const {
          invite
        } = params;
        checkChatInvite({
          hash: invite
        });
        break;
      }
    case 'addemoji':
    case 'addstickers':
      {
        const {
          set
        } = params;
        openStickerSet({
          stickerSetInfo: {
            shortName: set
          }
        });
        break;
      }
    case 'share':
    case 'msg':
    case 'msg_url':
      {
        const {
          url: urlParam,
          text
        } = params;
        openChatWithDraft({
          text: formatShareText(urlParam, text)
        });
        break;
      }
    case 'addlist':
      {
        checkChatlistInvite({
          slug: params.slug
        });
        break;
      }
    case 'login':
      {
        // const { code, token } = params;
        break;
      }
    case 'invoice':
      {
        const {
          slug
        } = params;
        openInvoice({
          type: 'slug',
          slug
        });
        break;
      }
    case 'stars_topup':
      {
        const {
          balance,
          purpose
        } = params;
        const balanceNeeded = Number(balance);
        if (!balanceNeeded || balanceNeeded < 0) return true;
        openStarsBalanceModal({
          topup: {
            balanceNeeded,
            purpose
          }
        });
        break;
      }
    case 'giftcode':
      {
        const {
          slug
        } = params;
        checkGiftCode({
          slug
        });
        break;
      }
    default:
      // Unsupported deeplink
      return false;
  }
  return true;
};
function formatShareText(url, text, title) {
  return {
    text: [url, title, text].filter(Boolean).join('\n')
  };
}
function handlePrivateMessageLink(link, actions) {
  const {
    focusMessage
  } = actions;
  const {
    channelId,
    messageId,
    threadId
  } = link;
  focusMessage({
    chatId: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.toChannelId)(channelId),
    threadId,
    messageId
  });
}
function parseChooseParameter(choose) {
  if (!choose) return undefined;
  const types = choose.toLowerCase().split(' ');
  return types.filter(type => _config__WEBPACK_IMPORTED_MODULE_1__.API_CHAT_TYPES.includes(type));
}

/***/ }),

/***/ "./src/util/element/calcTextLineHeightAndCount.ts":
/*!********************************************************!*\
  !*** ./src/util/element/calcTextLineHeightAndCount.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ calcTextLineHeightAndCount)
/* harmony export */ });
function calcTextLineHeightAndCount(textContainer) {
  const lineHeight = parseInt(getComputedStyle(textContainer).lineHeight, 10);
  const totalLines = textContainer.scrollHeight / lineHeight;
  return {
    totalLines,
    lineHeight
  };
}

/***/ }),

/***/ "./src/util/element/jsxToHtml.ts":
/*!***************************************!*\
  !*** ./src/util/element/jsxToHtml.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ jsxToHtml)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");

function jsxToHtml(jsx) {
  const fragment = document.createElement('div');
  _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_0__["default"].render(jsx, fragment);
  const children = Array.from(fragment.children);
  _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_0__["default"].render(undefined, fragment);
  return children;
}

/***/ }),

/***/ "./src/util/emoji/customEmojiManager.ts":
/*!**********************************************!*\
  !*** ./src/util/emoji/customEmojiManager.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addCustomEmojiCallback: () => (/* binding */ addCustomEmojiCallback),
/* harmony export */   addCustomEmojiInputRenderCallback: () => (/* binding */ addCustomEmojiInputRenderCallback),
/* harmony export */   getCustomEmojiMediaDataForInput: () => (/* binding */ getCustomEmojiMediaDataForInput),
/* harmony export */   getInputCustomEmojiParams: () => (/* binding */ getInputCustomEmojiParams),
/* harmony export */   processMessageInputForCustomEmoji: () => (/* binding */ processMessageInputForCustomEmoji),
/* harmony export */   removeCustomEmojiCallback: () => (/* binding */ removeCustomEmojiCallback)
/* harmony export */ });
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _generateUniqueId__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../generateUniqueId */ "./src/util/generateUniqueId.ts");
/* harmony import */ var _mediaLoader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _assets_blank_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../assets/blank.png */ "./src/assets/blank.png");
/* harmony import */ var _assets_square_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../assets/square.svg */ "./src/assets/square.svg");













const DOM_PROCESS_THROTTLE = 500;
const INPUT_WAITING_CUSTOM_EMOJI_IDS = new Set();
const handlers = new Map();
const renderCallbacks = (0,_callbacks__WEBPACK_IMPORTED_MODULE_6__.createCallbackManager)();
let prevGlobal;
(0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_0__.addCallback)(global => {
  if (global.customEmojis.byId !== prevGlobal?.customEmojis.byId || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectCanPlayAnimatedEmojis)(global) !== (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectCanPlayAnimatedEmojis)(prevGlobal)) {
    for (const entry of handlers) {
      const [handler, id] = entry;
      if (global.customEmojis.byId[id]) {
        handler(global.customEmojis);
      }
    }
    checkInputCustomEmojiLoad(global.customEmojis);
  }
  prevGlobal = global;
});
function addCustomEmojiCallback(handler, emojiId) {
  handlers.set(handler, emojiId);
}
function removeCustomEmojiCallback(handler) {
  handlers.delete(handler);
}
const addCustomEmojiInputRenderCallback = renderCallbacks.addCallback;
const callInputRenderHandlers = (0,_schedulers__WEBPACK_IMPORTED_MODULE_9__.throttle)(renderCallbacks.runCallbacks, DOM_PROCESS_THROTTLE);
function processDomForCustomEmoji() {
  const emojis = document.querySelectorAll('.custom-emoji.placeholder');
  emojis.forEach(emoji => {
    const customEmoji = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().customEmojis.byId[emoji.dataset.documentId];
    if (!customEmoji) {
      INPUT_WAITING_CUSTOM_EMOJI_IDS.add(emoji.dataset.documentId);
      return;
    }
    const [isPlaceholder, src, uniqueId] = getInputCustomEmojiParams(customEmoji);
    if (customEmoji.shouldUseTextColor && !emoji.classList.contains('colorable')) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
        emoji.classList.add('colorable');
      });
    }
    if (!isPlaceholder) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
        emoji.src = src;
        emoji.classList.remove('placeholder');
        if (uniqueId) emoji.dataset.uniqueId = uniqueId;
        callInputRenderHandlers(customEmoji.id);
      });
    }
  });
}
const processMessageInputForCustomEmoji = (0,_schedulers__WEBPACK_IMPORTED_MODULE_9__.throttle)(processDomForCustomEmoji, DOM_PROCESS_THROTTLE);
function checkInputCustomEmojiLoad(customEmojis) {
  const loaded = Array.from(INPUT_WAITING_CUSTOM_EMOJI_IDS).filter(id => Boolean(customEmojis.byId[id]));
  if (loaded.length) {
    loaded.forEach(id => INPUT_WAITING_CUSTOM_EMOJI_IDS.delete(id));
    processMessageInputForCustomEmoji();
  }
}
function getCustomEmojiMediaDataForInput(emojiId, isPreview) {
  const mediaHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getStickerHashById)(emojiId, isPreview);
  const data = _mediaLoader__WEBPACK_IMPORTED_MODULE_8__.getFromMemory(mediaHash);
  if (data) {
    return data;
  }
  fetchAndProcess(mediaHash);
  return undefined;
}
function fetchAndProcess(mediaHash) {
  return _mediaLoader__WEBPACK_IMPORTED_MODULE_8__.fetch(mediaHash, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl).then(() => {
    processMessageInputForCustomEmoji();
  });
}
function getInputCustomEmojiParams(customEmoji) {
  if (!customEmoji) return [true, _assets_square_svg__WEBPACK_IMPORTED_MODULE_12__, undefined];
  const shouldUseStaticFallback = !_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_WEBM_SUPPORTED && customEmoji.isVideo;
  const isUsingSharedCanvas = customEmoji.isLottie || customEmoji.isVideo && !shouldUseStaticFallback;
  if (isUsingSharedCanvas) {
    fetchAndProcess(`sticker${customEmoji.id}`);
    return [false, _assets_blank_png__WEBPACK_IMPORTED_MODULE_11__, (0,_generateUniqueId__WEBPACK_IMPORTED_MODULE_7__["default"])()];
  }
  const mediaData = getCustomEmojiMediaDataForInput(customEmoji.id, shouldUseStaticFallback);
  return [!mediaData, mediaData || _assets_square_svg__WEBPACK_IMPORTED_MODULE_12__, undefined];
}

/***/ }),

/***/ "./src/util/emoji/emoji.ts":
/*!*********************************!*\
  !*** ./src/util/emoji/emoji.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LOADED_EMOJIS: () => (/* binding */ LOADED_EMOJIS),
/* harmony export */   handleEmojiLoad: () => (/* binding */ handleEmojiLoad),
/* harmony export */   isoToEmoji: () => (/* binding */ isoToEmoji),
/* harmony export */   nativeToUnified: () => (/* binding */ nativeToUnified),
/* harmony export */   nativeToUnifiedExtendedWithCache: () => (/* binding */ nativeToUnifiedExtendedWithCache),
/* harmony export */   uncompressEmoji: () => (/* binding */ uncompressEmoji)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/twemojiRegex */ "./src/lib/twemojiRegex.js");
/* harmony import */ var _withCache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../withCache */ "./src/util/withCache.ts");





// Due to the fact that emoji from Apple do not contain some characters, it is necessary to remove them from emoji-data
// https://github.com/iamcal/emoji-data/issues/136
const EXCLUDE_EMOJIS = ['female_sign', 'male_sign', 'medical_symbol'];
const ISO_FLAGS_OFFSET = 127397;
function unifiedToNative(unified) {
  const unicodes = unified.split('-');
  const codePoints = unicodes.map(i => parseInt(i, 16));
  return String.fromCodePoint(...codePoints);
}
const LOADED_EMOJIS = new Set();
function handleEmojiLoad(event) {
  const emoji = event.currentTarget;
  LOADED_EMOJIS.add(event.currentTarget.dataset.path);
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
    (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_0__.addExtraClass)(emoji, 'open');
  });
}
function nativeToUnified(emoji) {
  let code;
  if (emoji.length === 1) {
    code = emoji.charCodeAt(0).toString(16).padStart(4, '0');
  } else {
    const pairs = [];
    for (let i = 0; i < emoji.length; i++) {
      if (emoji.charCodeAt(i) >= 0xd800 && emoji.charCodeAt(i) <= 0xdbff) {
        if (emoji.charCodeAt(i + 1) >= 0xdc00 && emoji.charCodeAt(i + 1) <= 0xdfff) {
          pairs.push((emoji.charCodeAt(i) - 0xd800) * 0x400 + (emoji.charCodeAt(i + 1) - 0xdc00) + 0x10000);
        }
      } else if (emoji.charCodeAt(i) < 0xd800 || emoji.charCodeAt(i) > 0xdfff) {
        pairs.push(emoji.charCodeAt(i));
      }
    }
    code = pairs.map(x => x.toString(16).padStart(4, '0')).join('-');
  }
  return code;
}
function nativeToUnifiedExtended(emoji) {
  return nativeToUnified((0,_lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_2__.removeVS16s)(emoji));
}
const nativeToUnifiedExtendedWithCache = (0,_withCache__WEBPACK_IMPORTED_MODULE_3__["default"])(nativeToUnifiedExtended);
function uncompressEmoji(data) {
  const emojiData = {
    categories: [],
    emojis: {}
  };
  for (let i = 0; i < data.length; i += 2) {
    const category = {
      id: data[i][0],
      name: data[i][1],
      emojis: []
    };
    for (let j = 0; j < data[i + 1].length; j++) {
      const emojiRaw = data[i + 1][j];
      if (!EXCLUDE_EMOJIS.includes(emojiRaw[1][0])) {
        category.emojis.push(emojiRaw[1][0]);
        emojiData.emojis[emojiRaw[1][0]] = {
          id: emojiRaw[1][0],
          names: emojiRaw[1],
          native: unifiedToNative(emojiRaw[0]),
          image: emojiRaw[0].toLowerCase()
        };
      }
    }
    emojiData.categories.push(category);
  }
  return emojiData;
}
function isoToEmoji(iso) {
  // Special case for Fragment numbers
  if (iso === 'FT') {
    return '\uD83C\uDFF4\u200D\u2620\uFE0F';
  }
  const code = iso.toUpperCase();
  if (!/^[A-Z]{2}$/.test(code)) return iso;
  const codePoints = [...code].map(c => c.codePointAt(0) + ISO_FLAGS_OFFSET);
  return String.fromCodePoint(...codePoints);
}

/***/ }),

/***/ "./src/util/emoji/fixNonStandardEmoji.ts":
/*!***********************************************!*\
  !*** ./src/util/emoji/fixNonStandardEmoji.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ fixNonStandardEmoji)
/* harmony export */ });
/* harmony import */ var _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/twemojiRegex */ "./src/lib/twemojiRegex.js");


// Non-standard variations of emojis, used on some devices
const EMOJI_EXCEPTIONS = [[/\u{1f3f3}\u200d\u{1f308}/gu, '\u{1f3f3}\ufe0f\u200d\u{1f308}'],
// 🏳‍🌈
[/\u{1f3f3}\u200d\u26a7\ufe0f?/gu, '\u{1f3f3}\ufe0f\u200d\u26a7\ufe0f'],
// 🏳️‍⚧️
[/\u26d3\u200d\u{1f4a5}/gu, '\u26d3\ufe0f\u200d\u{1f4a5}'],
// ⛓‍💥
[/\u200d([\u2640\u2642])(?!\ufe0f)/gu, '\u200d$1\ufe0f'] // Gender variation without 0xFE0F
];
function fixNonStandardEmoji(text) {
  // Non-standard sequences typically parsed as separate emojis, so no need to fix text without any
  if (!text.match(_lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_0__["default"])) return text;
  // eslint-disable-next-line no-restricted-syntax
  for (const [regex, replacement] of EMOJI_EXCEPTIONS) {
    text = text.replace(regex, replacement);
  }
  return text;
}

/***/ }),

/***/ "./src/util/emoji/parseEmojiOnlyString.ts":
/*!************************************************!*\
  !*** ./src/util/emoji/parseEmojiOnlyString.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parseEmojiOnlyString)
/* harmony export */ });
/* harmony import */ var _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/twemojiRegex */ "./src/lib/twemojiRegex.js");
/* harmony import */ var _fixNonStandardEmoji__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fixNonStandardEmoji */ "./src/util/emoji/fixNonStandardEmoji.ts");


const DETECT_UP_TO = 100;
const MAX_LENGTH = DETECT_UP_TO * 8; // Maximum 8 code points per one emoji.

function parseEmojiOnlyString(text) {
  const standardizedText = (0,_fixNonStandardEmoji__WEBPACK_IMPORTED_MODULE_1__["default"])(text);
  const lines = standardizedText.split('\n');
  const textWithoutNewlines = lines.join('');
  if (textWithoutNewlines.length > MAX_LENGTH) {
    return false;
  }
  const totalCount = countIfEmojiOnly(textWithoutNewlines);
  if (!totalCount || totalCount > DETECT_UP_TO) {
    return false;
  }

  // Calculate max emoji count per column or line. Used in UI to determine the size of the emoji.
  let max = lines.length;
  for (const line of lines) {
    const count = countIfEmojiOnly(line);
    if (count === false) {
      return false;
    }
    if (count > max) {
      max = count;
    }
  }
  return max;
}
function countIfEmojiOnly(line) {
  const iterator = line.matchAll(_lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_0__["default"]);
  let count = 0;
  let currentIndex = 0;
  for (const match of iterator) {
    if (match.index !== currentIndex) {
      return false;
    }
    count++;
    currentIndex = match.index + match[0].length;
  }
  if (currentIndex !== line.length) {
    return false;
  }
  return count;
}

/***/ }),

/***/ "./src/util/ensureProtocol.ts":
/*!************************************!*\
  !*** ./src/util/ensureProtocol.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ensureProtocol: () => (/* binding */ ensureProtocol)
/* harmony export */ });
const PROTOCOL_WHITELIST = new Set(['http:', 'https:', 'tg:', 'ton:', 'mailto:', 'tel:']);
const FALLBACK_PREFIX = 'https://';
function ensureProtocol(url) {
  if (!url) {
    return undefined;
  }
  try {
    const parsedUrl = new URL(url);
    // eslint-disable-next-line no-script-url
    if (!PROTOCOL_WHITELIST.has(parsedUrl.protocol)) {
      return `${FALLBACK_PREFIX}${url}`;
    }
    return url;
  } catch (err) {
    return `${FALLBACK_PREFIX}${url}`;
  }
}

/***/ }),

/***/ "./src/util/establishMultitabRole.ts":
/*!*******************************************!*\
  !*** ./src/util/establishMultitabRole.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   establishMultitabRole: () => (/* binding */ establishMultitabRole),
/* harmony export */   getAllMultitabTokens: () => (/* binding */ getAllMultitabTokens),
/* harmony export */   getCurrentTabId: () => (/* binding */ getCurrentTabId),
/* harmony export */   initialEstablishmentPromise: () => (/* binding */ initialEstablishmentPromise),
/* harmony export */   isCurrentTabMaster: () => (/* binding */ isCurrentTabMaster),
/* harmony export */   reestablishMasterToSelf: () => (/* binding */ reestablishMasterToSelf),
/* harmony export */   signalPasscodeHash: () => (/* binding */ signalPasscodeHash),
/* harmony export */   signalTokenDead: () => (/* binding */ signalTokenDead),
/* harmony export */   subscribeToMasterChange: () => (/* binding */ subscribeToMasterChange),
/* harmony export */   subscribeToTokenDied: () => (/* binding */ subscribeToTokenDied)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _passcode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passcode */ "./src/util/passcode.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _Deferred__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Deferred */ "./src/util/Deferred.ts");





const ESTABLISH_TIMEOUT = 100;
const {
  addCallback,
  runCallbacks
} = (0,_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
const {
  addCallback: addCallbackTokenDied,
  runCallbacks: runCallbacksTokenDied
} = (0,_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
const token = Number(Math.random().toString().substring(2));
const collectedTokens = new Set([token]);
let channel = _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_MULTITAB_SUPPORTED ? new BroadcastChannel(_config__WEBPACK_IMPORTED_MODULE_0__.ESTABLISH_BROADCAST_CHANNEL_NAME) : undefined;
let isEstablished = false;
const initialEstablishment = new _Deferred__WEBPACK_IMPORTED_MODULE_4__["default"]();
let masterToken;
let isWaitingForMaster = false;
let reestablishToken;
const handleMessage = ({
  data
}) => {
  if (!channel || !data) return;
  if (data.currentPasscodeHash) {
    (0,_passcode__WEBPACK_IMPORTED_MODULE_2__.setPasscodeHash)(data.currentPasscodeHash);
  }
  if (data.hasGaveUpMaster && isWaitingForMaster) {
    masterToken = token;
    isWaitingForMaster = false;
    initialEstablishment.resolve();
    runCallbacks(true);
    return;
  }
  if (data.shouldGiveUpMaster) {
    if (masterToken === token) {
      runCallbacks(false);
      channel.postMessage({
        currentPasscodeHash: (0,_passcode__WEBPACK_IMPORTED_MODULE_2__.getPasscodeHash)(),
        hasGaveUpMaster: true
      });
    }
    masterToken = data.masterToken;
    return;
  }
  if (data.tokenDied) {
    runCallbacksTokenDied(data.tokenDied);
    collectedTokens.delete(data.tokenDied);
    if (data.tokenDied === masterToken) {
      collectedTokens.delete(data.tokenDied);
      masterToken = undefined;
      isEstablished = false;
      reestablishToken = data.tokenDied;
      channel.postMessage({
        collectedTokens,
        masterToken,
        reestablishToken
      });
      if (collectedTokens.size === 1) {
        isEstablished = true;
        masterToken = token;
        reestablishToken = undefined;
        initialEstablishment.resolve();
        runCallbacks(true);
      }
    }
  }
  if (data.collectedTokens) {
    if (!data.reestablishToken && reestablishToken) {
      return;
    }
    if (data.reestablishToken && reestablishToken !== data.reestablishToken) {
      data.collectedTokens.delete(data.reestablishToken);
      reestablishToken = data.reestablishToken;
    }
    const prevLength = collectedTokens.size;
    data.collectedTokens.forEach(l => collectedTokens.add(l));
    if (reestablishToken) data.collectedTokens.delete(reestablishToken);
    if (!isEstablished) {
      if (data.masterToken) {
        reestablishToken = undefined;
        masterToken = data.masterToken;
        runCallbacks(masterToken === token);
        if (!isEstablished) {
          channel.postMessage({
            collectedTokens,
            masterToken,
            reestablishToken
          });
        }
        initialEstablishment.resolve();
        isEstablished = true;
      } else if (prevLength !== collectedTokens.size) {
        channel.postMessage({
          collectedTokens,
          masterToken,
          reestablishToken
        });
      } else {
        reestablishToken = undefined;
        masterToken = Math.max(...Array.from(collectedTokens));
        runCallbacks(masterToken === token);
        if (!isEstablished) {
          channel.postMessage({
            collectedTokens,
            masterToken,
            reestablishToken
          });
        }
        initialEstablishment.resolve();
        isEstablished = true;
      }
    } else if (!data.masterToken) {
      channel.postMessage({
        collectedTokens,
        masterToken,
        reestablishToken
      });
    }
  }
};
function establishMultitabRole(shouldReestablishMasterToSelf) {
  if (!channel) return;
  channel.addEventListener('message', handleMessage);
  channel.postMessage({
    collectedTokens
  });

  // To make the connection faster, we can ignore the waiting and connect right away,
  // and then if we realize we're not master, drop the connection
  setTimeout(() => {
    if (masterToken === undefined) {
      masterToken = token;
      initialEstablishment.resolve();
      runCallbacks(true);
    } else if (shouldReestablishMasterToSelf) {
      reestablishMasterToSelf();
    }
  }, ESTABLISH_TIMEOUT);
  window.addEventListener('beforeunload', signalTokenDead);
}
function signalTokenDead() {
  if (!channel) return;
  runCallbacksTokenDied(token);
  channel.removeEventListener('message', handleMessage);
  channel.postMessage({
    tokenDied: token,
    currentPasscodeHash: (0,_passcode__WEBPACK_IMPORTED_MODULE_2__.getPasscodeHash)()
  });
  channel.close();
  channel = undefined;
}
function signalPasscodeHash() {
  if (!channel) return;
  channel.postMessage({
    currentPasscodeHash: (0,_passcode__WEBPACK_IMPORTED_MODULE_2__.getPasscodeHash)()
  });
}
function getCurrentTabId() {
  return token;
}
function getAllMultitabTokens() {
  return Array.from(collectedTokens);
}
function reestablishMasterToSelf() {
  if (!channel) return;
  isWaitingForMaster = true;
  channel.postMessage({
    collectedTokens,
    masterToken: token,
    shouldGiveUpMaster: true
  });
}
const subscribeToTokenDied = addCallbackTokenDied;
const subscribeToMasterChange = addCallback;
const initialEstablishmentPromise = initialEstablishment.promise;
function isCurrentTabMaster() {
  return masterToken === token;
}

/***/ }),

/***/ "./src/util/files.ts":
/*!***************************!*\
  !*** ./src/util/files.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   blobToDataUri: () => (/* binding */ blobToDataUri),
/* harmony export */   blobToFile: () => (/* binding */ blobToFile),
/* harmony export */   createPosterForVideo: () => (/* binding */ createPosterForVideo),
/* harmony export */   fetchBlob: () => (/* binding */ fetchBlob),
/* harmony export */   fetchFile: () => (/* binding */ fetchFile),
/* harmony export */   hasPreview: () => (/* binding */ hasPreview),
/* harmony export */   imgToCanvas: () => (/* binding */ imgToCanvas),
/* harmony export */   preloadImage: () => (/* binding */ preloadImage),
/* harmony export */   preloadVideo: () => (/* binding */ preloadVideo),
/* harmony export */   validateFiles: () => (/* binding */ validateFiles)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }



// Polyfill for Safari: `File` is not available in web worker
if (typeof File === 'undefined') {
  // eslint-disable-next-line no-global-assign, no-restricted-globals, func-names
  self.File = class extends Blob {
    constructor(fileBits, fileName, options) {
      if (options) {
        const {
          type,
          ...rest
        } = options;
        super(fileBits, {
          type
        });
        _defineProperty(this, "name", void 0);
        Object.assign(this, rest);
      } else {
        super(fileBits);
        _defineProperty(this, "name", void 0);
      }
      this.name = fileName;
    }
  };
}
function blobToDataUri(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = e => {
      const {
        result
      } = e.target || {};
      if (typeof result === 'string') {
        resolve(result);
      }
      reject(new Error('Failed to read blob'));
    };
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
}
function blobToFile(blob, fileName) {
  return new File([blob], fileName, {
    lastModified: Date.now(),
    type: blob.type
  });
}
function preloadImage(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = url;
  });
}
function preloadVideo(url) {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    video.volume = 0;
    video.onloadedmetadata = () => resolve(video);
    video.onerror = reject;
    video.src = url;
  });
}
async function createPosterForVideo(url) {
  try {
    const video = await preloadVideo(url);
    return await Promise.race([(0,_schedulers__WEBPACK_IMPORTED_MODULE_1__.pause)(2000), new Promise((resolve, reject) => {
      video.onseeked = () => {
        if (!video.videoWidth || !video.videoHeight) {
          resolve(undefined);
        }
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0);
        canvas.toBlob(blob => {
          resolve(blob ? URL.createObjectURL(blob) : undefined);
        });
      };
      video.onerror = reject;
      video.currentTime = Math.min(video.duration, 1);
    })]);
  } catch (e) {
    return undefined;
  }
}
async function fetchBlob(blobUrl) {
  const response = await fetch(blobUrl);
  return response.blob();
}
async function fetchFile(blobUrl, fileName) {
  const blob = await fetchBlob(blobUrl);
  return blobToFile(blob, fileName);
}
function imgToCanvas(img) {
  const canvas = document.createElement('canvas');
  canvas.width = img.width;
  canvas.height = img.height;
  const ctx = canvas.getContext('2d');
  ctx.drawImage(img, 0, 0);
  return canvas;
}
function hasPreview(file) {
  return _config__WEBPACK_IMPORTED_MODULE_0__.CONTENT_TYPES_WITH_PREVIEW.has(file.type);
}
function validateFiles(files) {
  if (!files?.length) {
    return undefined;
  }
  return Array.from(files).map(fixMovMime).filter(file => file.size);
}

// .mov MIME type not reported sometimes https://developer.mozilla.org/en-US/docs/Web/API/File/type#sect1
function fixMovMime(file) {
  const ext = file.name.split('.').pop();
  if (!file.type && ext.toLowerCase() === 'mov') {
    return new File([file], file.name, {
      type: 'video/quicktime'
    });
  }
  return file;
}

/***/ }),

/***/ "./src/util/folderManager.ts":
/*!***********************************!*\
  !*** ./src/util/folderManager.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addChatsCountCallback: () => (/* binding */ addChatsCountCallback),
/* harmony export */   addOrderedIdsCallback: () => (/* binding */ addOrderedIdsCallback),
/* harmony export */   addUnreadCountersCallback: () => (/* binding */ addUnreadCountersCallback),
/* harmony export */   getAllNotificationsCount: () => (/* binding */ getAllNotificationsCount),
/* harmony export */   getChatsCount: () => (/* binding */ getChatsCount),
/* harmony export */   getOrderKey: () => (/* binding */ getOrderKey),
/* harmony export */   getOrderedIds: () => (/* binding */ getOrderedIds),
/* harmony export */   getPinnedChatsCount: () => (/* binding */ getPinnedChatsCount),
/* harmony export */   getUnreadCounters: () => (/* binding */ getUnreadCounters),
/* harmony export */   init: () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./arePropsShallowEqual */ "./src/util/arePropsShallowEqual.ts");
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");










const UPDATE_THROTTLE = 500;
const DEBUG_DURATION_LIMIT = 6;
const initials = buildInitials();
let prevGlobal = initials.prevGlobal;
let prepared = initials.prepared;
let results = initials.results;
let callbacks = initials.callbacks;
if (_config__WEBPACK_IMPORTED_MODULE_3__.DEBUG) {
  window.DEBUG_getFolderManager = () => ({
    prepared,
    results
  });
}
const updateFolderManagerThrottled = (0,_schedulers__WEBPACK_IMPORTED_MODULE_9__.throttle)(() => {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.onFullyIdle)(() => {
    updateFolderManager((0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)());
  });
}, UPDATE_THROTTLE);
let inited = false;

/* Getters */

function init() {
  inited = true;
  (0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_1__.addCallback)(updateFolderManagerThrottled);
  (0,_global__WEBPACK_IMPORTED_MODULE_2__.addActionHandler)('reset', reset);
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
  if (!(0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTabState)(global).isMasterTab) {
    updateFolders(global, true, true, true, true);
  }
  updateFolderManager(global);
}
function getOrderedIds(folderId) {
  if (!inited) init();
  return results.orderedIdsByFolderId[folderId];
}
function getPinnedChatsCount(folderId) {
  if (!inited) init();
  return results.pinnedCountByFolderId[folderId] || 0;
}
function getChatsCount() {
  if (!inited) init();
  return results.chatsCountByFolderId;
}
function getUnreadCounters() {
  if (!inited) init();
  return results.unreadCountersByFolderId;
}
function getAllNotificationsCount() {
  return getUnreadCounters()[_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID]?.notificationsCount || 0;
}
function getOrderKey(chatId, isForSaved) {
  const summary = prepared.chatSummariesById.get(chatId);
  return isForSaved ? summary.orderInSaved : summary.orderInAll;
}

/* Callback managers */

function addOrderedIdsCallback(folderId, callback) {
  if (!callbacks.orderedIdsByFolderId[folderId]) {
    callbacks.orderedIdsByFolderId[folderId] = (0,_callbacks__WEBPACK_IMPORTED_MODULE_7__.createCallbackManager)();
  }
  return callbacks.orderedIdsByFolderId[folderId].addCallback(callback);
}
function addChatsCountCallback(callback) {
  return callbacks.chatsCountByFolderId.addCallback(callback);
}
function addUnreadCountersCallback(callback) {
  return callbacks.unreadCountersByFolderId.addCallback(callback);
}

/* Global update handlers */

function updateFolderManager(global) {
  // eslint-disable-next-line @typescript-eslint/naming-convention
  let DEBUG_startedAt;
  if (_config__WEBPACK_IMPORTED_MODULE_3__.DEBUG) {
    DEBUG_startedAt = performance.now();
  }
  const isAllFolderChanged = Boolean(global.chats.listIds.active && isMainFolderChanged(_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID, global.chats.listIds.active, global.chats.orderedPinnedIds.active));
  const isArchivedFolderChanged = Boolean(global.chats.listIds.archived && isMainFolderChanged(_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID, global.chats.listIds.archived, global.chats.orderedPinnedIds.archived));
  const isSavedFolderChanged = Boolean(global.chats.listIds.saved && isMainFolderChanged(_config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID, global.chats.listIds.saved, global.chats.orderedPinnedIds.saved));
  const isAllFullyLoadedChanged = global.chats.isFullyLoaded.active !== prevGlobal.isAllFolderFullyLoaded;
  const isArchivedFullyLoadedChanged = global.chats.isFullyLoaded.archived !== prevGlobal.isArchivedFolderFullyLoaded;
  const isSavedFolderFullyLoadedChanged = global.chats.isFullyLoaded.saved !== prevGlobal.isSavedFolderFullyLoaded;
  const areFoldersChanged = global.chatFolders.byId !== prevGlobal.foldersById;
  const areChatsChanged = global.chats.byId !== prevGlobal.chatsById;
  const areSavedLastMessageIdsChanged = global.chats.lastMessageIds.saved !== prevGlobal.lastSavedMessageIds;
  const areAllLastMessageIdsChanged = global.chats.lastMessageIds.all !== prevGlobal.lastAllMessageIds;
  const areTopicsChanged = global.chats.topicsInfoById !== prevGlobal.topicsInfoById;
  const areUsersChanged = global.users.byId !== prevGlobal.usersById;
  const areNotifySettingsChanged = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectNotifySettings)(global) !== prevGlobal.notifySettings;
  const areNotifyExceptionsChanged = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectNotifyExceptions)(global) !== prevGlobal.notifyExceptions;
  let affectedFolderIds = [];
  if (isAllFullyLoadedChanged || isArchivedFullyLoadedChanged || isSavedFolderFullyLoadedChanged) {
    affectedFolderIds = affectedFolderIds.concat(updateFullyLoaded(global, isArchivedFullyLoadedChanged, isSavedFolderFullyLoadedChanged));
  }
  if (!(isAllFolderChanged || isArchivedFolderChanged || isSavedFolderChanged || areFoldersChanged || areChatsChanged || areUsersChanged || areTopicsChanged || areNotifySettingsChanged || areNotifyExceptionsChanged || areSavedLastMessageIdsChanged || areAllLastMessageIdsChanged)) {
    if (affectedFolderIds.length) {
      updateResults(affectedFolderIds);
    }
    return;
  }
  const prevAllFolderListIds = prevGlobal.allFolderListIds;
  const prevArchivedFolderListIds = prevGlobal.archivedFolderListIds;
  const prevSavedFolderListIds = prevGlobal.savedFolderListIds;
  updateFolders(global, isAllFolderChanged, isArchivedFolderChanged, isSavedFolderChanged, areFoldersChanged);
  affectedFolderIds = affectedFolderIds.concat(updateChats(global, areFoldersChanged || isAllFolderChanged || isArchivedFolderChanged || isSavedFolderChanged, areNotifySettingsChanged, areNotifyExceptionsChanged, prevAllFolderListIds, prevArchivedFolderListIds, prevSavedFolderListIds));
  updateResults((0,_iteratees__WEBPACK_IMPORTED_MODULE_8__.unique)(affectedFolderIds));
  if (_config__WEBPACK_IMPORTED_MODULE_3__.DEBUG) {
    const duration = performance.now() - DEBUG_startedAt;
    if (duration > DEBUG_DURATION_LIMIT) {
      // eslint-disable-next-line no-console
      console.warn(`Slow \`updateFolderManager\`: ${Math.round(duration)} ms`);
    }
  }
}
function isMainFolderChanged(folderId, newListIds, newPinnedIds) {
  const currentListIds = folderId === _config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID ? prevGlobal.allFolderListIds : folderId === _config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID ? prevGlobal.savedFolderListIds : prevGlobal.archivedFolderListIds;
  const currentPinnedIds = folderId === _config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID ? prevGlobal.allFolderPinnedIds : folderId === _config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID ? prevGlobal.savedFolderPinnedIds : prevGlobal.archivedFolderPinnedIds;
  return currentListIds !== newListIds || currentPinnedIds !== newPinnedIds;
}
function updateFullyLoaded(global, isArchivedFullyLoadedChanged = false, isSavedFolderFullyLoadedChanged = false) {
  let affectedFolderIds = [];
  if (isArchivedFullyLoadedChanged) {
    affectedFolderIds.push(_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID);
  }
  if (isSavedFolderFullyLoadedChanged) {
    affectedFolderIds.push(_config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID);
  }
  const isAllFolderFullyLoaded = global.chats.isFullyLoaded.active;
  const isArchivedFolderFullyLoaded = global.chats.isFullyLoaded.archived;
  const isSavedFolderFullyLoaded = global.chats.isFullyLoaded.saved;
  if (isAllFolderFullyLoaded && isArchivedFolderFullyLoaded) {
    const emptyFolderIds = Object.keys(prepared.folderSummariesById).filter(folderId => !results.orderedIdsByFolderId[folderId]).map(Number);
    affectedFolderIds = affectedFolderIds.concat(emptyFolderIds);
  }
  prevGlobal.isAllFolderFullyLoaded = isAllFolderFullyLoaded;
  prevGlobal.isArchivedFolderFullyLoaded = isArchivedFolderFullyLoaded;
  prevGlobal.isSavedFolderFullyLoaded = isSavedFolderFullyLoaded;
  return affectedFolderIds;
}
function updateFolders(global, isAllFolderChanged, isArchivedFolderChanged, isSavedFolderChanged, areFoldersChanged) {
  const changedFolders = [];
  if (isAllFolderChanged) {
    const newListIds = global.chats.listIds.active;
    const newPinnedIds = global.chats.orderedPinnedIds.active;
    prepared.folderSummariesById[_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID] = buildFolderSummaryFromMainList(_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID, newListIds, newPinnedIds);
    prevGlobal.allFolderListIds = newListIds;
    prevGlobal.allFolderPinnedIds = newPinnedIds;
    changedFolders.push(_config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID);
  }
  if (isArchivedFolderChanged) {
    const newListIds = global.chats.listIds.archived;
    const newPinnedIds = global.chats.orderedPinnedIds.archived;
    prepared.folderSummariesById[_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID] = buildFolderSummaryFromMainList(_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID, newListIds, newPinnedIds);
    prevGlobal.archivedFolderListIds = newListIds;
    prevGlobal.archivedFolderPinnedIds = newPinnedIds;
    changedFolders.push(_config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID);
  }
  if (isSavedFolderChanged) {
    const newListIds = global.chats.listIds.saved;
    const newPinnedIds = global.chats.orderedPinnedIds.saved;
    prepared.folderSummariesById[_config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID] = buildFolderSummaryFromMainList(_config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID, newListIds, newPinnedIds);
    prevGlobal.savedFolderListIds = newListIds;
    prevGlobal.savedFolderPinnedIds = newPinnedIds;
    changedFolders.push(_config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID);
  }
  if (areFoldersChanged) {
    const newFoldersById = global.chatFolders.byId;
    Object.values(newFoldersById).forEach(folder => {
      if (folder === prevGlobal.foldersById[folder.id]) {
        return;
      }
      prepared.folderSummariesById[folder.id] = buildFolderSummary(folder);
      changedFolders.push(folder.id);
    });
    prevGlobal.foldersById = newFoldersById;
  }
  return changedFolders;
}
function buildFolderSummaryFromMainList(folderId, listIds, orderedPinnedIds) {
  return {
    id: folderId,
    listIds: new Set(listIds),
    orderedPinnedIds,
    pinnedChatIds: new Set(orderedPinnedIds)
  };
}
function buildFolderSummary(folder) {
  return {
    ...folder,
    orderedPinnedIds: folder.pinnedChatIds,
    excludedChatIds: folder.excludedChatIds ? new Set(folder.excludedChatIds) : undefined,
    includedChatIds: folder.excludedChatIds ? new Set(folder.includedChatIds) : undefined,
    pinnedChatIds: folder.excludedChatIds ? new Set(folder.pinnedChatIds) : undefined
  };
}
function updateChats(global, areFoldersChanged, areNotifySettingsChanged, areNotifyExceptionsChanged, prevAllFolderListIds, prevArchivedFolderListIds, prevSavedFolderListIds) {
  const newChatsById = global.chats.byId;
  const newUsersById = global.users.byId;
  const newAllLastMessageIds = global.chats.lastMessageIds.all;
  const newSavedLastMessageIds = global.chats.lastMessageIds.saved;
  const newNotifySettings = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectNotifySettings)(global);
  const newNotifyExceptions = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectNotifyExceptions)(global);
  const folderSummaries = Object.values(prepared.folderSummariesById);
  const affectedFolderIds = new Set();
  const newAllFolderListIds = global.chats.listIds.active;
  const newArchivedFolderListIds = global.chats.listIds.archived;
  const newSavedFolderListIds = global.chats.listIds.saved;
  const newGeneralIds = [...(newAllFolderListIds || []), ...(newArchivedFolderListIds || [])];
  const newAllIds = [...newGeneralIds, ...(newSavedFolderListIds || [])];
  let allIds = newAllIds;
  if (newAllFolderListIds !== prevAllFolderListIds || newArchivedFolderListIds !== prevArchivedFolderListIds || newSavedFolderListIds !== prevSavedFolderListIds) {
    allIds = (0,_iteratees__WEBPACK_IMPORTED_MODULE_8__.unique)(allIds.concat(prevAllFolderListIds || [], prevArchivedFolderListIds || [], prevSavedFolderListIds || []));
  }
  allIds.forEach(chatId => {
    const chat = newChatsById[chatId];
    if (!areFoldersChanged && !areNotifySettingsChanged && !areNotifyExceptionsChanged && chat === prevGlobal.chatsById[chatId] && newUsersById[chatId] === prevGlobal.usersById[chatId] && newAllLastMessageIds?.[chatId] === prevGlobal.lastAllMessageIds?.[chatId] && newSavedLastMessageIds?.[chatId] === prevGlobal.lastSavedMessageIds?.[chatId]) {
      return;
    }
    let newFolderIds;
    if (chat) {
      const currentSummary = prepared.chatSummariesById.get(chatId);
      const isRemovedFromAll = !newGeneralIds.includes(chatId);
      const isRemovedFromSaved = !newSavedFolderListIds?.includes(chatId);
      const newSummary = buildChatSummary(global, chat, newNotifySettings, newNotifyExceptions, newUsersById[chatId], isRemovedFromAll, isRemovedFromSaved);
      if (!areFoldersChanged && currentSummary && (0,_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_6__["default"])(newSummary, currentSummary)) {
        return;
      }
      prepared.chatSummariesById.set(chatId, newSummary);
      newFolderIds = buildChatFolderIds(newSummary, folderSummaries);
      newFolderIds.forEach(folderId => {
        affectedFolderIds.add(folderId);
      });
    } else {
      prepared.chatSummariesById.delete(chatId);
      newFolderIds = [];
    }
    const currentFolderIds = prepared.folderIdsByChatId[chatId] || [];
    if ((0,_iteratees__WEBPACK_IMPORTED_MODULE_8__.areSortedArraysEqual)(newFolderIds, currentFolderIds)) {
      return;
    }
    const deletedFolderIds = updateListsForChat(chatId, currentFolderIds, newFolderIds);
    deletedFolderIds.forEach(folderId => {
      affectedFolderIds.add(folderId);
    });
  });
  prevGlobal.chatsById = newChatsById;
  prevGlobal.usersById = newUsersById;
  prevGlobal.lastAllMessageIds = newAllLastMessageIds;
  prevGlobal.lastSavedMessageIds = newSavedLastMessageIds;
  prevGlobal.notifySettings = newNotifySettings;
  prevGlobal.notifyExceptions = newNotifyExceptions;
  return Array.from(affectedFolderIds);
}
function buildChatSummary(global, chat, notifySettings, notifyExceptions, user, isRemovedFromAll, isRemovedFromSaved) {
  const {
    id,
    type,
    isRestricted,
    isNotJoined,
    migratedTo,
    folderId,
    unreadCount: chatUnreadCount,
    unreadMentionsCount: chatUnreadMentionsCount,
    hasUnreadMark,
    isForum
  } = chat;
  const topics = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTopics)(global, chat.id);
  const {
    unreadCount,
    unreadMentionsCount
  } = isForum ? Object.values(topics || {}).reduce((acc, topic) => {
    acc.unreadCount += topic.unreadCount;
    acc.unreadMentionsCount += topic.unreadMentionsCount;
    return acc;
  }, {
    unreadCount: 0,
    unreadMentionsCount: 0
  }) : {
    unreadCount: chatUnreadCount,
    unreadMentionsCount: chatUnreadMentionsCount
  };
  const userInfo = type === 'chatTypePrivate' && user;
  const lastMessage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatLastMessage)(global, chat.id);
  const shouldHideServiceChat = chat.id === _config__WEBPACK_IMPORTED_MODULE_3__.SERVICE_NOTIFICATIONS_USER_ID && (!lastMessage || lastMessage.content.action?.type === 'historyClear');
  const orderInAll = Math.max(chat.creationDate || 0, chat.draftDate || 0, lastMessage?.date || 0);
  const lastMessageInSaved = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatLastMessage)(global, chat.id, 'saved');
  const orderInSaved = lastMessageInSaved?.date || 0;
  return {
    id,
    type,
    isListedInAll: Boolean(!isRestricted && !isNotJoined && !migratedTo && !shouldHideServiceChat && !isRemovedFromAll),
    isListedInSaved: !isRemovedFromSaved,
    isArchived: folderId === _config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID,
    isMuted: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.selectIsChatMuted)(chat, notifySettings, notifyExceptions),
    isUnread: Boolean(unreadCount || unreadMentionsCount || hasUnreadMark),
    unreadCount,
    unreadMentionsCount,
    isUserBot: userInfo ? userInfo.type === 'userTypeBot' : undefined,
    isUserContact: userInfo ? userInfo.isContact : undefined,
    orderInAll,
    orderInSaved
  };
}
function buildChatFolderIds(chatSummary, folderSummaries) {
  return folderSummaries.reduce((acc, folderSummary) => {
    if (isChatInFolder(chatSummary, folderSummary)) {
      acc.push(folderSummary.id);
    }
    return acc;
  }, []).sort();
}
function isChatInFolder(chatSummary, folderSummary) {
  const isListed = folderSummary.id === _config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID ? chatSummary.isListedInSaved : chatSummary.isListedInAll;
  if (!isListed) {
    return false;
  }
  const {
    id: chatId,
    type
  } = chatSummary;
  if (folderSummary.listIds) {
    if (chatSummary.isArchived && folderSummary.id === _config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID || !chatSummary.isArchived && folderSummary.id === _config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID) {
      return false;
    }
    return folderSummary.listIds.has(chatId);
  }
  if (folderSummary.excludedChatIds?.has(chatId)) {
    return false;
  }
  if (folderSummary.includedChatIds?.has(chatId)) {
    return true;
  }
  if (folderSummary.pinnedChatIds?.has(chatId)) {
    return true;
  }
  if (folderSummary.excludeArchived && chatSummary.isArchived) {
    return false;
  }
  if (folderSummary.excludeRead && !chatSummary.isUnread) {
    return false;
  }
  if (folderSummary.excludeMuted && chatSummary.isMuted && !chatSummary.unreadMentionsCount) {
    return false;
  }
  if (type === 'chatTypePrivate') {
    if (chatSummary.isUserBot) {
      if (folderSummary.bots) {
        return true;
      }
    } else {
      if (folderSummary.contacts && chatSummary.isUserContact) {
        return true;
      }
      if (folderSummary.nonContacts && !chatSummary.isUserContact) {
        return true;
      }
    }
  } else if (type === 'chatTypeChannel') {
    return Boolean(folderSummary.channels);
  } else if (type === 'chatTypeBasicGroup' || type === 'chatTypeSuperGroup') {
    return Boolean(folderSummary.groups);
  }
  return false;
}
function updateListsForChat(chatId, currentFolderIds, newFolderIds) {
  const currentFolderIdsSet = new Set(currentFolderIds);
  const newFolderIdsSet = new Set(newFolderIds);
  const deletedFolderIds = [];
  (0,_iteratees__WEBPACK_IMPORTED_MODULE_8__.unique)([...currentFolderIds, ...newFolderIds]).forEach(folderId => {
    let currentFolderOrderedIds = results.orderedIdsByFolderId[folderId];
    if (currentFolderIdsSet.has(folderId) && !newFolderIdsSet.has(folderId)) {
      prepared.chatIdsByFolderId[folderId].delete(chatId);
      deletedFolderIds.push(folderId);
      if (currentFolderOrderedIds) {
        currentFolderOrderedIds = currentFolderOrderedIds.filter(id => id !== chatId);
        prepared.isOrderedListJustPatched[folderId] = true;
      }
    } else if (!currentFolderIdsSet.has(folderId) && newFolderIdsSet.has(folderId)) {
      if (!prepared.chatIdsByFolderId[folderId]) {
        prepared.chatIdsByFolderId[folderId] = new Set();
      }
      prepared.chatIdsByFolderId[folderId].add(chatId);
      if (currentFolderOrderedIds) {
        currentFolderOrderedIds.push(chatId);
        prepared.isOrderedListJustPatched[folderId] = true;
      }
    }
    results.orderedIdsByFolderId[folderId] = currentFolderOrderedIds;
  });
  prepared.folderIdsByChatId[chatId] = newFolderIds;
  return deletedFolderIds;
}
function updateResults(affectedFolderIds) {
  let wasUnreadCountersChanged = false;
  let wasChatsCountChanged = false;
  Array.from(affectedFolderIds).forEach(folderId => {
    const {
      pinnedCount: newPinnedCount,
      orderedIds: newOrderedIds
    } = buildFolderOrderedIds(folderId);
    // When signed out
    if (!newOrderedIds) {
      return;
    }
    const currentOrderedIds = results.orderedIdsByFolderId[folderId];
    const currentPinnedCount = results.pinnedCountByFolderId[folderId];
    const areOrderedIdsChanged = !currentOrderedIds || currentPinnedCount === undefined || currentPinnedCount !== newPinnedCount || prepared.isOrderedListJustPatched[folderId] || !(0,_iteratees__WEBPACK_IMPORTED_MODULE_8__.areSortedArraysEqual)(newOrderedIds, currentOrderedIds);
    if (areOrderedIdsChanged) {
      prepared.isOrderedListJustPatched[folderId] = false;
      results.orderedIdsByFolderId[folderId] = newOrderedIds;
      results.pinnedCountByFolderId[folderId] = newPinnedCount;
      callbacks.orderedIdsByFolderId[folderId]?.runCallbacks(newOrderedIds);
    }
    const currentChatsCount = results.chatsCountByFolderId[folderId];
    const newChatsCount = newOrderedIds.length;
    if (!wasChatsCountChanged) {
      wasChatsCountChanged = currentChatsCount !== newChatsCount;
    }
    results.chatsCountByFolderId[folderId] = newChatsCount;
    const currentUnreadCounters = results.unreadCountersByFolderId[folderId];
    const newUnreadCounters = buildFolderUnreadCounters(folderId);
    if (!wasUnreadCountersChanged) {
      wasUnreadCountersChanged = !currentUnreadCounters || !(0,_arePropsShallowEqual__WEBPACK_IMPORTED_MODULE_6__["default"])(newUnreadCounters, currentUnreadCounters);
    }
    results.unreadCountersByFolderId[folderId] = newUnreadCounters;
  });
  if (wasChatsCountChanged) {
    // We need to update the entire object as it will be returned from a hook
    const newValue = {
      ...results.chatsCountByFolderId
    };
    results.chatsCountByFolderId = newValue;
    callbacks.chatsCountByFolderId.runCallbacks(newValue);
  }
  if (wasUnreadCountersChanged) {
    // We need to update the entire object as it will be returned from a hook
    const newValue = {
      ...results.unreadCountersByFolderId
    };
    results.unreadCountersByFolderId = newValue;
    callbacks.unreadCountersByFolderId.runCallbacks(newValue);
  }
}
function buildFolderOrderedIds(folderId) {
  const folderSummary = prepared.folderSummariesById[folderId];
  if (!folderSummary) {
    return {};
  }
  const {
    orderedPinnedIds,
    pinnedChatIds
  } = folderSummary;
  const {
    chatIdsByFolderId: {
      [folderId]: chatIds
    }
  } = prepared;
  const {
    orderedIdsByFolderId: {
      [folderId]: prevOrderedIds
    }
  } = results;
  const isSavedFolder = folderId === _config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID;
  const sortedPinnedIds = chatIds ? orderedPinnedIds?.filter(id => chatIds.has(id)) : orderedPinnedIds;
  const allListIds = prevOrderedIds || chatIds && Array.from(chatIds) || [];
  const notPinnedIds = pinnedChatIds ? allListIds.filter(id => !pinnedChatIds.has(id)) : allListIds;
  const sortedNotPinnedIds = notPinnedIds.sort((chatId1, chatId2) => {
    return getOrderKey(chatId2, isSavedFolder) - getOrderKey(chatId1, isSavedFolder);
  });
  return {
    pinnedCount: sortedPinnedIds?.length || 0,
    orderedIds: [...(sortedPinnedIds || []), ...sortedNotPinnedIds]
  };
}
function buildFolderUnreadCounters(folderId) {
  const {
    chatSummariesById
  } = prepared;
  const {
    orderedIdsByFolderId: {
      [folderId]: orderedIds
    }
  } = results;
  return orderedIds.reduce((newUnreadCounters, chatId) => {
    const chatSummary = chatSummariesById.get(chatId);
    if (!chatSummary) {
      return newUnreadCounters;
    }
    if (chatSummary.isUnread) {
      newUnreadCounters.chatsCount++;
      if (chatSummary.unreadMentionsCount) {
        newUnreadCounters.notificationsCount += chatSummary.unreadMentionsCount;
      }
      if (!chatSummary.isMuted) {
        if (chatSummary.unreadCount) {
          newUnreadCounters.notificationsCount += chatSummary.unreadCount;
        } else if (!chatSummary.unreadMentionsCount) {
          newUnreadCounters.notificationsCount += 1; // Manually marked unread
        }
      }
    }
    return newUnreadCounters;
  }, {
    chatsCount: 0,
    notificationsCount: 0
  });
}
function buildInitials() {
  return {
    prevGlobal: {
      foldersById: {},
      chatsById: {},
      usersById: {},
      topicsInfoById: {},
      notifySettings: {},
      notifyExceptions: {}
    },
    prepared: {
      folderSummariesById: {},
      chatSummariesById: new Map(),
      folderIdsByChatId: {},
      chatIdsByFolderId: {},
      isOrderedListJustPatched: {}
    },
    results: {
      orderedIdsByFolderId: {},
      pinnedCountByFolderId: {},
      chatsCountByFolderId: {},
      unreadCountersByFolderId: {}
    },
    callbacks: {
      orderedIdsByFolderId: {},
      chatsCountByFolderId: (0,_callbacks__WEBPACK_IMPORTED_MODULE_7__.createCallbackManager)(),
      unreadCountersByFolderId: (0,_callbacks__WEBPACK_IMPORTED_MODULE_7__.createCallbackManager)()
    }
  };
}
function reset() {
  const newInitials = buildInitials();
  prevGlobal = newInitials.prevGlobal;
  prepared = newInitials.prepared;
  results = newInitials.results;
  callbacks = newInitials.callbacks;
}

/***/ }),

/***/ "./src/util/fonts.ts":
/*!***************************!*\
  !*** ./src/util/fonts.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ preloadFonts)
/* harmony export */ });
const SITE_FONTS = ['400 1em Roboto', '500 1em Roboto', "500 1em 'Numbers Rounded'"];
function preloadFonts() {
  if ('fonts' in document) {
    return Promise.all(SITE_FONTS.map(font => document.fonts.load(font)));
  }
  return undefined;
}

/***/ }),

/***/ "./src/util/forceReflow.ts":
/*!*********************************!*\
  !*** ./src/util/forceReflow.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ forceReflow)
/* harmony export */ });
// Used before applying CSS transition
function forceReflow(element) {
  // eslint-disable-next-line @typescript-eslint/no-unused-expressions
  element.offsetWidth;
}

/***/ }),

/***/ "./src/util/formatCurrency.tsx":
/*!*************************************!*\
  !*** ./src/util/formatCurrency.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),
/* harmony export */   formatCurrencyAsString: () => (/* binding */ formatCurrencyAsString)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _components_common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/common/icons/StarIcon */ "./src/components/common/icons/StarIcon.tsx");



function formatCurrency(totalPrice, currency, locale = 'en', options) {
  const price = totalPrice / 10 ** getCurrencyExp(currency);
  if (currency === _config__WEBPACK_IMPORTED_MODULE_1__.STARS_CURRENCY_CODE) {
    return [/*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_components_common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_2__["default"], {
      className: options?.iconClassName,
      type: "gold",
      size: "adaptive"
    }), price];
  }
  return formatCurrencyAsString(totalPrice, currency, locale, options);
}
function formatCurrencyAsString(totalPrice, currency, locale = 'en', options) {
  const price = totalPrice / 10 ** getCurrencyExp(currency);
  if ((options?.shouldOmitFractions || currency === _config__WEBPACK_IMPORTED_MODULE_1__.STARS_CURRENCY_CODE) && Number.isInteger(price)) {
    return new Intl.NumberFormat(locale, {
      style: 'currency',
      currency,
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(price);
  }
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency
  }).format(price);
}
function getCurrencyExp(currency) {
  if (currency === 'TON') {
    return 9;
  }
  if (currency === 'CLF') {
    return 4;
  }
  if (['BHD', 'IQD', 'JOD', 'KWD', 'LYD', 'OMR', 'TND'].includes(currency)) {
    return 3;
  }
  if (['BIF', 'BYR', 'CLP', 'CVE', 'DJF', 'GNF', 'ISK', 'JPY', 'KMF', 'KRW', 'MGA', 'PYG', 'RWF', 'UGX', 'UYI', 'VND', 'VUV', 'XAF', 'XOF', 'XPF', _config__WEBPACK_IMPORTED_MODULE_1__.STARS_CURRENCY_CODE].includes(currency)) {
    return 0;
  }
  if (currency === 'MRO') {
    return 1;
  }
  return 2;
}

/***/ }),

/***/ "./src/util/forumColors.ts":
/*!*********************************!*\
  !*** ./src/util/forumColors.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTopicColorCssVariable: () => (/* binding */ getTopicColorCssVariable),
/* harmony export */   getTopicColors: () => (/* binding */ getTopicColors),
/* harmony export */   getTopicDefaultIcon: () => (/* binding */ getTopicDefaultIcon)
/* harmony export */ });
/* harmony import */ var _assets_icons_forumTopic_blue_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assets/icons/forumTopic/blue.svg */ "./src/assets/icons/forumTopic/blue.svg");
/* harmony import */ var _assets_icons_forumTopic_green_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assets/icons/forumTopic/green.svg */ "./src/assets/icons/forumTopic/green.svg");
/* harmony import */ var _assets_icons_forumTopic_grey_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../assets/icons/forumTopic/grey.svg */ "./src/assets/icons/forumTopic/grey.svg");
/* harmony import */ var _assets_icons_forumTopic_red_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../assets/icons/forumTopic/red.svg */ "./src/assets/icons/forumTopic/red.svg");
/* harmony import */ var _assets_icons_forumTopic_rose_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../assets/icons/forumTopic/rose.svg */ "./src/assets/icons/forumTopic/rose.svg");
/* harmony import */ var _assets_icons_forumTopic_violet_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assets/icons/forumTopic/violet.svg */ "./src/assets/icons/forumTopic/violet.svg");
/* harmony import */ var _assets_icons_forumTopic_yellow_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../assets/icons/forumTopic/yellow.svg */ "./src/assets/icons/forumTopic/yellow.svg");








// eslint-disable-next-line max-len
// https://github.com/telegramdesktop/tdesktop/blob/1aece79a471d99a8b63d826b1bce1f36a04d7293/Telegram/SourceFiles/data/data_forum_topic.cpp#L50
const TOPIC_MAPPING = {
  0x6FB9F0: [_assets_icons_forumTopic_blue_svg__WEBPACK_IMPORTED_MODULE_0__, 'blue'],
  0xFFD67E: [_assets_icons_forumTopic_yellow_svg__WEBPACK_IMPORTED_MODULE_6__, 'yellow'],
  0xCB86DB: [_assets_icons_forumTopic_violet_svg__WEBPACK_IMPORTED_MODULE_5__, 'violet'],
  0x8EEE98: [_assets_icons_forumTopic_green_svg__WEBPACK_IMPORTED_MODULE_1__, 'green'],
  0xFF93B2: [_assets_icons_forumTopic_rose_svg__WEBPACK_IMPORTED_MODULE_4__, 'rose'],
  0xFB6F5F: [_assets_icons_forumTopic_red_svg__WEBPACK_IMPORTED_MODULE_3__, 'red']
};
function getTopicColors() {
  return Object.keys(TOPIC_MAPPING).map(key => parseInt(key, 10));
}
function getTopicDefaultIcon(iconColor) {
  return iconColor && TOPIC_MAPPING[iconColor][0] || _assets_icons_forumTopic_grey_svg__WEBPACK_IMPORTED_MODULE_2__;
}
function getTopicColorCssVariable(iconColor) {
  const color = iconColor && TOPIC_MAPPING[iconColor][1] || 'grey';
  return `--color-topic-${color}`;
}

/***/ }),

/***/ "./src/util/generateUniqueId.ts":
/*!**************************************!*\
  !*** ./src/util/generateUniqueId.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ generateUniqueId)
/* harmony export */ });
function generateUniqueId() {
  return Date.now().toString(36) + Math.random().toString(36).slice(2);
}

/***/ }),

/***/ "./src/util/getReadableErrorText.ts":
/*!******************************************!*\
  !*** ./src/util/getReadableErrorText.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SHIPPING_ERRORS: () => (/* binding */ SHIPPING_ERRORS),
/* harmony export */   "default": () => (/* binding */ getReadableErrorText),
/* harmony export */   getShippingError: () => (/* binding */ getShippingError),
/* harmony export */   shouldClosePaymentModal: () => (/* binding */ shouldClosePaymentModal)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");

const READABLE_ERROR_MESSAGES = {
  CHAT_RESTRICTED: 'You can\'t send messages in this chat, you were restricted',
  CHAT_SEND_POLL_FORBIDDEN: 'You can\'t create polls in this chat',
  CHAT_SEND_STICKERS_FORBIDDEN: 'You can\'t send stickers in this chat',
  CHAT_SEND_GIFS_FORBIDDEN: 'You can\'t send gifs in this chat',
  CHAT_SEND_MEDIA_FORBIDDEN: 'You can\'t send media in this chat',
  CHAT_LINK_EXISTS: 'The chat is public, you can\'t hide the history to new users',
  // eslint-disable-next-line max-len
  SLOWMODE_WAIT_X: 'Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.',
  USER_BANNED_IN_CHANNEL: 'You\'re banned from sending messages in supergroups / channels',
  USER_IS_BLOCKED: 'You were blocked by this user',
  YOU_BLOCKED_USER: 'You blocked this user',
  IMAGE_PROCESS_FAILED: 'Failure while processing image',
  MEDIA_EMPTY: 'The provided media object is invalid',
  MEDIA_GROUPED_INVALID: 'Failed to replace album media',
  MEDIA_NEW_INVALID: 'Failed to replace new media',
  MESSAGE_NOT_MODIFIED: 'Message not modified. The new content is identical to the current one.',
  MEDIA_INVALID: 'Media invalid',
  PASSWORD_HASH_INVALID: 'Incorrect password',
  PHOTO_EXT_INVALID: 'The extension of the photo is invalid',
  PHOTO_INVALID_DIMENSIONS: 'The photo dimensions are invalid',
  PHOTO_SAVE_FILE_INVALID: 'Internal issues, try again later',
  // eslint-disable-next-line max-len
  MESSAGE_DELETE_FORBIDDEN: 'You can\'t delete one of the messages you tried to delete, most likely because it is a service message.',
  MESSAGE_POLL_CLOSED: 'Poll closed',
  MESSAGE_EDIT_TIME_EXPIRED: 'You can\'t edit this message anymore.',
  PINNED_DIALOGS_TOO_MUCH: 'Sorry, you can only pin 5 chats to the top',
  CHANNEL_PRIVATE: 'This channel is private',
  MEDIA_CAPTION_TOO_LONG: 'The provided caption is too long',
  ADDRESS_STREET_LINE1_INVALID: 'The address you provided is not valid',
  ADDRESS_STREET_LINE2_INVALID: 'The address you provided is not valid',
  ADDRESS_CITY_INVALID: 'The city you provided is not valid',
  ADDRESS_COUNTRY_INVALID: 'The country you provided is not valid',
  ADDRESS_POSTCODE_INVALID: 'The postcode you provided is not valid',
  ADDRESS_STATE_INVALID: 'The state you provided is not valid',
  REQ_INFO_NAME_INVALID: 'The name you provided is not valid',
  REQ_INFO_PHONE_INVALID: 'The phone you provided is not valid',
  REQ_INFO_EMAIL_INVALID: 'The email you provided is not valid',
  // TODO Bring back after fixing the weird bug
  // CHANNEL_INVALID: 'An error occurred. Please try again later',
  LINK_NOT_MODIFIED: 'This discussion is already linked to the channel',
  MESSAGE_TOO_LONG: 'Message is too long',
  // Non-API errors
  // eslint-disable-next-line max-len
  SERVICE_WORKER_DISABLED: 'Service Worker is disabled. Streaming media may not be supported. Try reloading the page without holding <Shift> key',
  // eslint-disable-next-line max-len
  MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS: 'The provided message is too long. Please remove {EXTRA_CHARS_COUNT} character{PLURAL_S}.',
  // eslint-disable-next-line max-len
  FRESH_RESET_AUTHORISATION_FORBIDDEN: 'You can’t logout other sessions if less than 24 hours have passed since you logged on the current session',
  BOTS_TOO_MUCH: 'There are too many bots in this chat/channel',
  BOT_GROUPS_BLOCKED: 'This bot can\'t be added to groups',
  USERS_TOO_MUCH: 'The maximum number of users has been exceeded',
  USER_CHANNELS_TOO_MUCH: 'One of the users you tried to add is already in too many channels/supergroups',
  USER_KICKED: 'This user was kicked from this supergroup/channel',
  USER_NOT_MUTUAL_CONTACT: 'The provided user is not a mutual contact',
  USER_PRIVACY_RESTRICTED: 'The user\'s privacy settings do not allow you to do this',
  INVITE_HASH_EMPTY: 'The invite hash is empty',
  INVITE_HASH_EXPIRED: 'The invite link has expired',
  INVITE_HASH_INVALID: 'The invite hash is invalid',
  CHANNELS_TOO_MUCH: 'You have joined too many channels/supergroups',
  USER_ALREADY_PARTICIPANT: 'You already in the group',
  SCHEDULE_DATE_INVALID: 'Invalid schedule date provided',
  WALLPAPER_DIMENSIONS_INVALID: 'The wallpaper dimensions are invalid, please select another file',
  ADMINS_TOO_MUCH: 'There are too many admins',
  ADMIN_RANK_EMOJI_NOT_ALLOWED: 'An admin rank cannot contain emojis',
  ADMIN_RANK_INVALID: 'The specified admin rank is invalid',
  FRESH_CHANGE_ADMINS_FORBIDDEN: 'You were just elected admin, you can\'t add or modify other admins yet',
  INPUT_USER_DEACTIVATED: 'Can\'t do this action to a deleted account',
  BOT_PRECHECKOUT_TIMEOUT: 'The request for payment has expired',
  PROVIDER_ACCOUNT_TIMEOUT: 'Request to the payment provider has expired',
  STARGIFT_CONVERT_TOO_OLD: 'This gift no longer can be converted to Stars',
  SUBSCRIPTION_ALREADY_ACTIVE: 'You are already subscribed',
  PEERS_LIST_EMPTY: 'No chats are added to the list',
  PAID_MEDIA_FORBIDDEN: 'You can\'t send paid media in this chat'
};
if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
  READABLE_ERROR_MESSAGES.CHAT_WRITE_FORBIDDEN = 'You can\'t write in this chat';
  READABLE_ERROR_MESSAGES.CHAT_ADMIN_REQUIRED = 'You must be an admin in this chat to do this';
}
const SHIPPING_ERRORS = {
  ADDRESS_STREET_LINE1_INVALID: {
    field: 'streetLine1',
    message: 'Incorrect street address'
  },
  ADDRESS_STREET_LINE2_INVALID: {
    field: 'streetLine2',
    message: 'Incorrect street address'
  },
  ADDRESS_CITY_INVALID: {
    field: 'city',
    message: 'Incorrect city'
  },
  ADDRESS_COUNTRY_INVALID: {
    field: 'countryIso2',
    message: 'Incorrect country'
  },
  ADDRESS_POSTCODE_INVALID: {
    field: 'postCode',
    message: 'Incorrect post code'
  },
  ADDRESS_STATE_INVALID: {
    field: 'state',
    message: 'Incorrect state'
  },
  REQ_INFO_NAME_INVALID: {
    field: 'fullName',
    message: 'Incorrect name'
  },
  REQ_INFO_PHONE_INVALID: {
    field: 'phone',
    message: 'Incorrect phone'
  },
  REQ_INFO_EMAIL_INVALID: {
    field: 'email',
    message: 'Incorrect email'
  }
};
const FINAL_PAYMENT_ERRORS = new Set(['BOT_PRECHECKOUT_FAILED', 'PAYMENT_FAILED']);
function getReadableErrorText(error) {
  const {
    message,
    isSlowMode,
    textParams
  } = error;
  // Currently, Telegram API doesn't return `SLOWMODE_WAIT_X` error as described in the docs
  if (isSlowMode) {
    const extraPartIndex = message.indexOf(' (caused by');
    return extraPartIndex > 0 ? message.substring(0, extraPartIndex) : message;
  }
  let errorMessage = READABLE_ERROR_MESSAGES[message];
  if (errorMessage && textParams) {
    errorMessage = Object.keys(textParams).reduce((acc, current) => {
      return acc.replace(current, textParams[current]);
    }, errorMessage);
  }
  return errorMessage;
}
function getShippingError(error) {
  return SHIPPING_ERRORS[error.message];
}
function shouldClosePaymentModal(error) {
  return FINAL_PAYMENT_ERRORS.has(error.message);
}

/***/ }),

/***/ "./src/util/handleError.ts":
/*!*********************************!*\
  !*** ./src/util/handleError.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handleError: () => (/* binding */ handleError)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");



let showError = true;
let error;
window.addEventListener('error', handleErrorEvent);
window.addEventListener('unhandledrejection', handleErrorEvent);
if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
  window.addEventListener('focus', () => {
    if (!(0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.isCurrentTabMaster)()) {
      return;
    }
    showError = true;
    if (error) {
      // eslint-disable-next-line no-alert
      window.alert(getErrorMessage(error));
      error = undefined;
    }
  });
  window.addEventListener('blur', () => {
    if (!(0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_1__.isCurrentTabMaster)()) {
      return;
    }
    showError = false;
  });
}
const throttleError = (0,_schedulers__WEBPACK_IMPORTED_MODULE_2__.throttle)(err => {
  if (showError) {
    // eslint-disable-next-line no-alert
    window.alert(getErrorMessage(err));
  } else {
    error = err;
  }
}, 1500);
function handleError(err) {
  // eslint-disable-next-line no-console
  console.error(err);
  if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
    throttleError(err);
  }
}
function handleErrorEvent(e) {
  // https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded
  if (e instanceof ErrorEvent && e.message === 'ResizeObserver loop limit exceeded') {
    return;
  }
  e.preventDefault();
  handleError(e instanceof ErrorEvent ? e.error || e.message : e.reason);
}
function getErrorMessage(err) {
  return `${_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG_ALERT_MSG}\n\n${err?.message || err}\n${err?.stack}`;
}

/***/ }),

/***/ "./src/util/init.ts":
/*!**************************!*\
  !*** ./src/util/init.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initGlobal: () => (/* binding */ initGlobal)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global/cache */ "./src/global/cache.ts");
/* harmony import */ var _global_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/index */ "./src/global/index.ts");
/* harmony import */ var _global_initialState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/initialState */ "./src/global/initialState.ts");
/* harmony import */ var _global_reducers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../global/reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _sessions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sessions */ "./src/util/sessions.ts");







async function initGlobal(force = false, prevGlobal) {
  prevGlobal = prevGlobal || (0,_global_index__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
  if (!force && 'byTabId' in prevGlobal) {
    return;
  }
  const initial = (0,_iteratees__WEBPACK_IMPORTED_MODULE_5__.cloneDeep)(_global_initialState__WEBPACK_IMPORTED_MODULE_3__.INITIAL_GLOBAL_STATE);
  let global = (await (0,_global_cache__WEBPACK_IMPORTED_MODULE_1__.loadCache)(initial)) || initial;
  if (_config__WEBPACK_IMPORTED_MODULE_0__.IS_MOCKED_CLIENT) global.authState = 'authorizationStateReady';
  const {
    hasPasscode,
    isScreenLocked
  } = global.passcode;
  if (hasPasscode && !isScreenLocked) {
    global = (0,_global_reducers__WEBPACK_IMPORTED_MODULE_4__.updatePasscodeSettings)(global, {
      isScreenLocked: true
    });
    (0,_sessions__WEBPACK_IMPORTED_MODULE_6__.clearStoredSession)();
  }
  if (force) {
    global.byTabId = prevGlobal.byTabId;

    // Keep the theme if it was set before
    global.settings.byKey.theme = prevGlobal.settings.byKey.theme;
  }
  (0,_global_index__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
}

/***/ }),

/***/ "./src/util/installPrompt.ts":
/*!***********************************!*\
  !*** ./src/util/installPrompt.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getPromptInstall: () => (/* binding */ getPromptInstall),
/* harmony export */   setupBeforeInstallPrompt: () => (/* binding */ setupBeforeInstallPrompt)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");

let promptInstall;
function setupBeforeInstallPrompt() {
  window.addEventListener('beforeinstallprompt', e => {
    promptInstall = async () => {
      e.prompt();
      const userChoice = await e.userChoice;
      const isInstalled = userChoice.outcome === 'accepted';
      if (!isInstalled) return;
      (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().setInstallPrompt({
        canInstall: false
      });
    };
    (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().setInstallPrompt({
      canInstall: true
    });
  });
}
function getPromptInstall() {
  return promptInstall;
}

/***/ }),

/***/ "./src/util/iteratees.ts":
/*!*******************************!*\
  !*** ./src/util/iteratees.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   areSortedArraysEqual: () => (/* binding */ areSortedArraysEqual),
/* harmony export */   areSortedArraysIntersecting: () => (/* binding */ areSortedArraysIntersecting),
/* harmony export */   buildCollectionByCallback: () => (/* binding */ buildCollectionByCallback),
/* harmony export */   buildCollectionByKey: () => (/* binding */ buildCollectionByKey),
/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep),
/* harmony export */   compact: () => (/* binding */ compact),
/* harmony export */   compareFields: () => (/* binding */ compareFields),
/* harmony export */   excludeSortedArray: () => (/* binding */ excludeSortedArray),
/* harmony export */   findIntersectionWithSet: () => (/* binding */ findIntersectionWithSet),
/* harmony export */   findLast: () => (/* binding */ findLast),
/* harmony export */   isInsideSortedArrayRange: () => (/* binding */ isInsideSortedArrayRange),
/* harmony export */   isLiteralObject: () => (/* binding */ isLiteralObject),
/* harmony export */   mapValues: () => (/* binding */ mapValues),
/* harmony export */   omit: () => (/* binding */ omit),
/* harmony export */   omitUndefined: () => (/* binding */ omitUndefined),
/* harmony export */   orderBy: () => (/* binding */ orderBy),
/* harmony export */   partition: () => (/* binding */ partition),
/* harmony export */   pick: () => (/* binding */ pick),
/* harmony export */   pickTruthy: () => (/* binding */ pickTruthy),
/* harmony export */   split: () => (/* binding */ split),
/* harmony export */   unique: () => (/* binding */ unique),
/* harmony export */   uniqueByField: () => (/* binding */ uniqueByField)
/* harmony export */ });
function buildCollectionByKey(collection, key) {
  return collection.reduce((byKey, member) => {
    byKey[member[key]] = member;
    return byKey;
  }, {});
}
function buildCollectionByCallback(collection, callback) {
  return collection.reduce((byKey, member) => {
    const [key, value] = callback(member);
    byKey[key] = value;
    return byKey;
  }, {});
}
function mapValues(byKey, callback) {
  return Object.keys(byKey).reduce((newByKey, key, index) => {
    newByKey[key] = callback(byKey[key], key, index, byKey);
    return newByKey;
  }, {});
}
function pick(object, keys) {
  return keys.reduce((result, key) => {
    result[key] = object[key];
    return result;
  }, {});
}
function pickTruthy(object, keys) {
  return keys.reduce((result, key) => {
    if (object[key]) {
      result[key] = object[key];
    }
    return result;
  }, {});
}
function omit(object, keys) {
  const stringKeys = new Set(keys.map(String));
  const savedKeys = Object.keys(object).filter(key => !stringKeys.has(key));
  return pick(object, savedKeys);
}
function omitUndefined(object) {
  return Object.keys(object).reduce((result, stringKey) => {
    const key = stringKey;
    if (object[key] !== undefined) {
      result[key] = object[key];
    }
    return result;
  }, {});
}
function orderBy(collection, orderRule, mode = 'asc') {
  function compareValues(a, b, currentOrderRule, isAsc) {
    const aValue = (typeof currentOrderRule === 'function' ? currentOrderRule(a) : a[currentOrderRule]) || 0;
    const bValue = (typeof currentOrderRule === 'function' ? currentOrderRule(b) : b[currentOrderRule]) || 0;
    return isAsc ? aValue - bValue : bValue - aValue;
  }
  if (Array.isArray(orderRule)) {
    const [mode1, mode2] = Array.isArray(mode) ? mode : [mode, mode];
    const [orderRule1, orderRule2] = orderRule;
    const isAsc1 = mode1 === 'asc';
    const isAsc2 = mode2 === 'asc';
    return collection.sort((a, b) => {
      return compareValues(a, b, orderRule1, isAsc1) || compareValues(a, b, orderRule2, isAsc2);
    });
  }
  const isAsc = mode === 'asc';
  return collection.sort((a, b) => {
    return compareValues(a, b, orderRule, isAsc);
  });
}
function unique(array) {
  return Array.from(new Set(array));
}
function uniqueByField(array, field) {
  return [...new Map(array.map(item => [item[field], item])).values()];
}
function compact(array) {
  return array.filter(Boolean);
}
function areSortedArraysEqual(array1, array2) {
  if (array1.length !== array2.length) {
    return false;
  }
  return array1.every((item, i) => item === array2[i]);
}
function areSortedArraysIntersecting(array1, array2) {
  return array1[0] <= array2[array2.length - 1] && array1[array1.length - 1] >= array2[0];
}
function isInsideSortedArrayRange(value, array) {
  return array[0] <= value && value <= array[array.length - 1];
}
function findIntersectionWithSet(array, set) {
  return array.filter(a => set.has(a));
}
/**
 * Exlude elements from base array. Both arrays should be sorted in same order
 * @param base
 * @param toExclude
 * @returns New array without excluded elements
 */
function excludeSortedArray(base, toExclude) {
  if (!base?.length) return base;
  const result = [];
  let excludeIndex = 0;
  for (let i = 0; i < base.length; i++) {
    if (toExclude[excludeIndex] === base[i]) {
      excludeIndex += 1;
    } else {
      result.push(base[i]);
    }
  }
  return result;
}
function split(array, chunkSize) {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function partition(array, filter) {
  const pass = [];
  const fail = [];
  array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));
  return [pass, fail];
}
function cloneDeep(value) {
  if (!isObject(value)) {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(cloneDeep);
  }
  return Object.keys(value).reduce((acc, key) => {
    acc[key] = cloneDeep(value[key]);
    return acc;
  }, {});
}
function isLiteralObject(value) {
  return isObject(value) && !Array.isArray(value);
}
function isObject(value) {
  // eslint-disable-next-line no-null/no-null
  return typeof value === 'object' && value !== null;
}
function findLast(array, predicate) {
  let cursor = array.length;
  while (cursor--) {
    if (predicate(array[cursor], cursor, array)) {
      return array[cursor];
    }
  }
  return undefined;
}
function compareFields(a, b) {
  return Number(b) - Number(a);
}

/***/ }),

/***/ "./src/util/keys/messageKey.ts":
/*!*************************************!*\
  !*** ./src/util/keys/messageKey.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildMessageKey: () => (/* binding */ buildMessageKey),
/* harmony export */   getMessageKey: () => (/* binding */ getMessageKey),
/* harmony export */   getMessageServerKey: () => (/* binding */ getMessageServerKey),
/* harmony export */   isLocalMessageId: () => (/* binding */ isLocalMessageId),
/* harmony export */   parseMessageKey: () => (/* binding */ parseMessageKey)
/* harmony export */ });
function getMessageKey(message) {
  const {
    chatId
  } = message;
  if ('randomId' in message) {
    return buildMessageKey(chatId, Number(message.randomId));
  }
  return buildMessageKey(chatId, message.previousLocalId || message.id);
}
function getMessageServerKey(message) {
  if (isLocalMessageId(message.id)) {
    return undefined;
  }
  const {
    chatId,
    id
  } = message;
  return buildMessageKey(chatId, id);
}
function buildMessageKey(chatId, msgId) {
  return `msg${chatId}-${msgId}`;
}
function parseMessageKey(key) {
  const match = key.match(/^msg(-?\d+)-(\d+)/);
  return {
    chatId: match[1],
    messageId: Number(match[2])
  };
}
function isLocalMessageId(id) {
  return !Number.isInteger(id);
}

/***/ }),

/***/ "./src/util/keys/searchResultKey.ts":
/*!******************************************!*\
  !*** ./src/util/keys/searchResultKey.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSearchResultKey: () => (/* binding */ getSearchResultKey),
/* harmony export */   parseSearchResultKey: () => (/* binding */ parseSearchResultKey)
/* harmony export */ });
function getSearchResultKey(message) {
  const {
    chatId,
    id
  } = message;
  return `${chatId}_${id}`;
}
function parseSearchResultKey(key) {
  const [chatId, messageId] = key.split('_');
  return [chatId, Number(messageId)];
}

/***/ }),

/***/ "./src/util/lethargy.ts":
/*!******************************!*\
  !*** ./src/util/lethargy.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Lethargy: () => (/* binding */ Lethargy)
/* harmony export */ });
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Lethargy help distinguish between scroll events initiated by the user, and those by inertial scrolling.
 * Lethargy does not have external dependencies.
 *
 * @param stability - Specifies the length of the rolling average.
 * In effect, the larger the value, the smoother the curve will be.
 * This attempts to prevent anomalies from firing 'real' events. Valid values are all positive integers,
 * but in most cases, you would need to stay between 5 and around 30.
 *
 * @param sensitivity - Specifies the minimum value for wheelDelta for it to register as a valid scroll event.
 * Because the tail of the curve have low wheelDelta values,
 * this will stop them from registering as valid scroll events.
 * The unofficial standard wheelDelta is 120, so valid values are positive integers below 120.
 *
 * @param tolerance - Prevent small fluctuations from affecting results.
 * Valid values are decimals from 0, but should ideally be between 0.05 and 0.3.
 *
 * Based on https://github.com/d4nyll/lethargy
 */

class Lethargy {
  constructor({
    stability = 8,
    sensitivity = 100,
    tolerance = 1.1,
    delay = 150
  } = {}) {
    _defineProperty(this, "stability", void 0);
    _defineProperty(this, "sensitivity", void 0);
    _defineProperty(this, "tolerance", void 0);
    _defineProperty(this, "delay", void 0);
    _defineProperty(this, "lastUpDeltas", void 0);
    _defineProperty(this, "lastDownDeltas", void 0);
    _defineProperty(this, "deltasTimestamp", void 0);
    this.stability = stability;
    this.sensitivity = sensitivity;
    this.tolerance = tolerance;
    this.delay = delay;
    this.lastUpDeltas = new Array(this.stability * 2).fill(0);
    this.lastDownDeltas = new Array(this.stability * 2).fill(0);
    this.deltasTimestamp = new Array(this.stability * 2).fill(0);
  }
  check(e) {
    let lastDelta;
    e = e.originalEvent || e;
    if (e.wheelDelta !== undefined) {
      lastDelta = e.wheelDelta;
    } else if (e.deltaY !== undefined) {
      lastDelta = e.deltaY * -40;
    } else if (e.detail !== undefined || e.detail === 0) {
      lastDelta = e.detail * -40;
    }
    this.deltasTimestamp.push(Date.now());
    this.deltasTimestamp.shift();
    if (lastDelta > 0) {
      this.lastUpDeltas.push(lastDelta);
      this.lastUpDeltas.shift();
      return this.isInertia(1);
    } else {
      this.lastDownDeltas.push(lastDelta);
      this.lastDownDeltas.shift();
      return this.isInertia(-1);
    }
  }
  isInertia(direction) {
    const lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;
    if (lastDeltas[0] === undefined) return direction;
    if (this.deltasTimestamp[this.stability * 2 - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[this.stability * 2 - 1]) {
      return false;
    }
    const lastDeltasOld = lastDeltas.slice(0, this.stability);
    const lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);
    const oldSum = lastDeltasOld.reduce((t, s) => t + s);
    const newSum = lastDeltasNew.reduce((t, s) => t + s);
    const oldAverage = oldSum / lastDeltasOld.length;
    const newAverage = newSum / lastDeltasNew.length;
    return Math.abs(oldAverage) <= Math.abs(newAverage * this.tolerance) && this.sensitivity < Math.abs(newAverage);
  }
}

/***/ }),

/***/ "./src/util/localization/index.ts":
/*!****************************************!*\
  !*** ./src/util/localization/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addLocalizationCallback: () => (/* binding */ addCallback),
/* harmony export */   applyLangPackDifference: () => (/* binding */ applyLangPackDifference),
/* harmony export */   changeLanguage: () => (/* binding */ changeLanguage),
/* harmony export */   getTranslationFn: () => (/* binding */ getTranslationFn),
/* harmony export */   initLocalization: () => (/* binding */ initLocalization),
/* harmony export */   loadAndChangeLanguage: () => (/* binding */ loadAndChangeLanguage),
/* harmony export */   localizationReadyPromise: () => (/* binding */ localizationReadyPromise),
/* harmony export */   refreshFromCache: () => (/* binding */ refreshFromCache),
/* harmony export */   removeLocalizationCallback: () => (/* binding */ removeCallback),
/* harmony export */   requestLangPackDifference: () => (/* binding */ requestLangPackDifference)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./src/util/localization/types.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _components_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _browser_idb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../browser/idb */ "./src/util/browser/idb.ts");
/* harmony import */ var _browser_intlListFormat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../browser/intlListFormat */ "./src/util/browser/intlListFormat.ts");
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _data_readFallbackStrings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/readFallbackStrings */ "./src/util/data/readFallbackStrings.ts");
/* harmony import */ var _establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _multitab__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../multitab */ "./src/util/multitab.ts");
/* harmony import */ var _replaceWithTeact__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../replaceWithTeact */ "./src/util/replaceWithTeact.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _Deferred__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../Deferred */ "./src/util/Deferred.ts");
/* harmony import */ var _primitives_LimitedMap__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../primitives/LimitedMap */ "./src/util/primitives/LimitedMap.ts");
/* harmony import */ var _assets_localization_initialStrings__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../assets/localization/initialStrings */ "./src/assets/localization/initialStrings.ts");

















const LANGPACK_STORE_PREFIX = 'langpack-';
const FORMATTERS_FALLBACK_LANG = 'en';
const STRING_CACHE_LIMIT = 400;
const TRANSLATION_CACHE = new _primitives_LimitedMap__WEBPACK_IMPORTED_MODULE_15__["default"](STRING_CACHE_LIMIT);
let language;
let formatters;
let langPack;
let fallbackLangPack;
let translationFn = createTranslationFn();
const {
  addCallback,
  removeCallback,
  runCallbacks
} = (0,_callbacks__WEBPACK_IMPORTED_MODULE_6__.createCallbackManager)();
let areCallbacksScheduled = false;
function scheduleCallbacks() {
  if (areCallbacksScheduled) return;
  areCallbacksScheduled = true;
  (0,_schedulers__WEBPACK_IMPORTED_MODULE_12__.fastRaf)(() => {
    runCallbacks();
    areCallbacksScheduled = false;
  });
}
const localizationReady = new _Deferred__WEBPACK_IMPORTED_MODULE_14__["default"]();
function loadCachedLangData(langCode) {
  return _browser_idb__WEBPACK_IMPORTED_MODULE_4__.MAIN_IDB_STORE.get(`${LANGPACK_STORE_PREFIX}${langCode}`);
}
function cacheLangData(data) {
  (0,_multitab__WEBPACK_IMPORTED_MODULE_10__.notifyLangpackUpdate)(data.language.langCode);
  return _browser_idb__WEBPACK_IMPORTED_MODULE_4__.MAIN_IDB_STORE.set(`${LANGPACK_STORE_PREFIX}${data.language.langCode}`, data);
}
let fallbackLoadPromise;
async function loadFallbackPack() {
  if (fallbackLangPack || fallbackLoadPromise) return;
  fallbackLoadPromise = (0,_data_readFallbackStrings__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const fallbackData = await fallbackLoadPromise;
  fallbackLangPack = fallbackData.langPack;
  TRANSLATION_CACHE.clear();
  if (!language) {
    updateLanguage(fallbackData.language);
  } else {
    translationFn = createTranslationFn();
    scheduleCallbacks();
  }
}
async function fetchDifference() {
  if (!langPack || !language) {
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[Localization] Trying to fetch difference without loaded data');
    }
    return;
  }
  if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_13__.IS_MULTITAB_SUPPORTED) {
    await _establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.initialEstablishmentPromise;
    if (!(0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.isCurrentTabMaster)()) return;
  }
  const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchLangDifference', {
    langPack: _config__WEBPACK_IMPORTED_MODULE_1__.LANG_PACK,
    langCode: langPack.langCode,
    fromVersion: langPack.version
  });
  if (!result) return;
  applyLangPackDifference(result.version, result.strings, result.keysToRemove);
}
function applyLangPackDifference(version, strings, keysToRemove) {
  if (!langPack || !language || version === langPack.version) return;
  const newLangPack = {
    ...langPack,
    version,
    strings: {
      ...(0,_iteratees__WEBPACK_IMPORTED_MODULE_9__.omit)(langPack.strings, keysToRemove),
      ...strings
    }
  };
  updateLangPack(newLangPack);
  cacheLangData({
    langPack: newLangPack,
    language
  });
  scheduleCallbacks();
}
function updateLanguage(newLang) {
  language = newLang;
  createFormatters();
  translationFn = createTranslationFn();
  scheduleCallbacks();
}
function createFormatters() {
  if (!language) return;
  const langCode = language.pluralCode;
  const listFormatFallback = (0,_browser_intlListFormat__WEBPACK_IMPORTED_MODULE_5__.getBasicListFormat)();
  function createListFormat(lang, type) {
    return _windowEnvironment__WEBPACK_IMPORTED_MODULE_13__.IS_INTL_LIST_FORMAT_SUPPORTED ? new Intl.ListFormat(lang, {
      type
    }) : listFormatFallback;
  }
  try {
    formatters = {
      pluralRules: new Intl.PluralRules(langCode),
      region: new Intl.DisplayNames(langCode, {
        type: 'region'
      }),
      conjunction: createListFormat(langCode, 'conjunction'),
      disjunction: createListFormat(langCode, 'disjunction'),
      number: new Intl.NumberFormat(langCode)
    };
  } catch (e) {
    // eslint-disable-next-line no-console
    console.warn('Failed to create formatters:', e);
    formatters = {
      pluralRules: new Intl.PluralRules(FORMATTERS_FALLBACK_LANG),
      region: new Intl.DisplayNames(FORMATTERS_FALLBACK_LANG, {
        type: 'region'
      }),
      conjunction: createListFormat(FORMATTERS_FALLBACK_LANG, 'conjunction'),
      disjunction: createListFormat(FORMATTERS_FALLBACK_LANG, 'disjunction'),
      number: new Intl.NumberFormat(FORMATTERS_FALLBACK_LANG)
    };
  }
}
function updateLangPack(newLangPack) {
  langPack = newLangPack;
  TRANSLATION_CACHE.clear();
  scheduleCallbacks();
}
async function initLocalization(langCode, canLoadFromServer) {
  if (language) return;
  const cachedData = await loadCachedLangData(langCode);
  if (cachedData) {
    langPack = cachedData.langPack;
    language = cachedData.language;
    createFormatters();
    fetchDifference();
  } else if (canLoadFromServer) {
    await loadAndChangeLanguage(langCode);
  } else {
    loadFallbackPack();
  }
  translationFn = createTranslationFn();
  scheduleCallbacks();
  localizationReady.resolve();
}
async function refreshFromCache(langCode) {
  if ((0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.isCurrentTabMaster)()) return;
  const cachedData = await loadCachedLangData(langCode);
  if (cachedData) {
    updateLangPack(cachedData.langPack);
    updateLanguage(cachedData.language);
  }
}
async function loadAndChangeLanguage(langCode, shouldCheckCache) {
  if (shouldCheckCache) {
    // Can be removed when old lang provider is phased out. Cache is checked in `initLocalization`.
    const cachedData = await loadCachedLangData(langCode);
    if (cachedData) {
      return changeLanguage(cachedData.language);
    }
  }
  if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_13__.IS_MULTITAB_SUPPORTED) {
    await _establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.initialEstablishmentPromise;
    if (!(0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.isCurrentTabMaster)()) return undefined;
  }
  const remoteLanguage = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchLanguage', {
    langPack: _config__WEBPACK_IMPORTED_MODULE_1__.LANG_PACK,
    langCode
  });
  if (!remoteLanguage) {
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('Failed to fetch language', langCode);
    }
    return undefined;
  }
  return changeLanguage(remoteLanguage);
}
function requestLangPackDifference(langCode) {
  if (language?.langCode !== langCode) return;
  fetchDifference();
}
async function changeLanguage(newLanguage) {
  if (langPack && language?.langCode === newLanguage.langCode) return;
  const cachedData = await loadCachedLangData(newLanguage.langCode);
  if (cachedData) {
    updateLangPack(cachedData.langPack);
    updateLanguage(cachedData.language);
    fetchDifference();
  } else {
    if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_13__.IS_MULTITAB_SUPPORTED) {
      await _establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.initialEstablishmentPromise;
      if (!(0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.isCurrentTabMaster)()) return;
    }
    const remoteLangPack = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('fetchLangPack', {
      langPack: _config__WEBPACK_IMPORTED_MODULE_1__.LANG_PACK,
      langCode: newLanguage.langCode
    });
    if (!remoteLangPack) {
      // eslint-disable-next-line no-console
      console.warn('Failed to fetch lang pack');
      return;
    }
    updateLangPack({
      langCode: newLanguage.langCode,
      version: remoteLangPack.version,
      strings: remoteLangPack.strings
    });
    updateLanguage(newLanguage);
    cacheLangData({
      langPack: langPack,
      language: newLanguage
    });
  }
  document.documentElement.lang = newLanguage.baseLangCode || newLanguage.langCode;
  scheduleCallbacks();
}
function createTranslationFn() {
  const fn = (key, variables, options) => {
    if (options && (0,_types__WEBPACK_IMPORTED_MODULE_0__.areAdvancedLangFnOptions)(options)) {
      return processTranslationAdvanced(key, variables, options);
    }
    return processTranslation(key, variables, options);
  };
  fn.code = language?.langCode || FORMATTERS_FALLBACK_LANG;
  fn.isRtl = language?.isRtl;
  fn.pluralCode = language?.pluralCode || FORMATTERS_FALLBACK_LANG;
  fn.with = ({
    key,
    variables,
    options
  }) => {
    if (options && (0,_types__WEBPACK_IMPORTED_MODULE_0__.areAdvancedLangFnOptions)(options)) {
      return processTranslationAdvanced(key, variables, options);
    }
    return processTranslation(key, variables, options);
  };
  fn.withRegular = ({
    key,
    variables,
    options
  }) => {
    return processTranslation(key, variables, options);
  };
  fn.withAdvanced = ({
    key,
    variables,
    options
  }) => {
    return processTranslationAdvanced(key, variables, options);
  };
  fn.region = code => formatters?.region.of(code);
  fn.conjunction = list => formatters?.conjunction.format(list) || list.join(', ');
  fn.disjunction = list => formatters?.disjunction.format(list) || list.join(', ');
  fn.number = value => formatters?.number.format(value) || String(value);
  fn.languageInfo = language;
  return fn;
}
function getTranslationFn() {
  return translationFn;
}
function getString(langKey, count) {
  let langPackStringValue = langPack?.strings[langKey];
  if (!langPackStringValue && !fallbackLangPack) {
    loadFallbackPack();
  }
  langPackStringValue || (langPackStringValue = fallbackLangPack?.strings[langKey]);
  langPackStringValue || (langPackStringValue = _assets_localization_initialStrings__WEBPACK_IMPORTED_MODULE_16__["default"][langKey]);
  if (!langPackStringValue || (0,_types__WEBPACK_IMPORTED_MODULE_0__.isDeletedLangString)(langPackStringValue)) return undefined;
  const pluralSuffix = formatters?.pluralRules.select(count) || 'other';
  const string = (0,_types__WEBPACK_IMPORTED_MODULE_0__.isPluralLangString)(langPackStringValue) ? langPackStringValue[pluralSuffix] || langPackStringValue.other : langPackStringValue;
  return string;
}
function processTranslation(langKey, variables, options) {
  const cacheKey = `${langKey}-${JSON.stringify(variables)}-${JSON.stringify(options)}`;
  if (TRANSLATION_CACHE.has(cacheKey)) {
    return TRANSLATION_CACHE.get(cacheKey);
  }
  const pluralValue = options && 'pluralValue' in options ? Number(options.pluralValue) : 0;
  const string = getString(langKey, pluralValue);
  if (!string) return langKey;
  const variableEntries = variables ? Object.entries(variables) : [];
  const finalString = variableEntries.reduce((result, [key, value]) => {
    if (value === undefined) return result;
    if (typeof value === 'object') {
      // Allow recursive variables in basic `lang.with`
      value = processTranslation(value.key, value.variables, value.options);
    }
    const valueAsString = Number.isFinite(value) ? formatters.number.format(value) : String(value);
    return result.replace(`{${key}}`, valueAsString);
  }, string);
  TRANSLATION_CACHE.set(cacheKey, finalString);
  return finalString;
}
function processTranslationAdvanced(langKey, variables, options) {
  const pluralValue = options && 'pluralValue' in options ? Number(options.pluralValue) : 0;
  const string = getString(langKey, pluralValue);
  if (!string) return langKey;
  const variableEntries = variables ? Object.entries(variables) : [];
  let tempResult = [string];
  if (options?.specialReplacement) {
    const specialReplacements = Object.entries(options.specialReplacement);
    tempResult = specialReplacements.reduce((acc, [key, value]) => {
      return (0,_replaceWithTeact__WEBPACK_IMPORTED_MODULE_11__.replaceInStringsWithTeact)(acc, key, value);
    }, tempResult);
  }
  const withRenderText = options?.withMarkdown || options?.renderTextFilters;
  if (withRenderText) {
    const filters = options?.withMarkdown ? (0,_iteratees__WEBPACK_IMPORTED_MODULE_9__.unique)((options.renderTextFilters || []).concat(['simple_markdown', 'emoji'])) : options.renderTextFilters;
    return tempResult.flatMap(curr => {
      if (typeof curr !== 'string') {
        return curr;
      }
      return (0,_components_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_3__["default"])(curr, filters, {
        markdownPostProcessor: part => {
          return variableEntries.reduce((result, [key, value]) => {
            if (value === undefined) return result;
            const preparedValue = Number.isFinite(value) ? formatters.number.format(value) : value;
            return (0,_replaceWithTeact__WEBPACK_IMPORTED_MODULE_11__.replaceInStringsWithTeact)(result, `{${key}}`, preparedValue);
          }, [part]);
        }
      });
    });
  }
  return variableEntries.reduce((result, [key, value]) => {
    if (value === undefined) return result;
    const preparedValue = Number.isFinite(value) ? formatters.number.format(value) : value;
    return (0,_replaceWithTeact__WEBPACK_IMPORTED_MODULE_11__.replaceInStringsWithTeact)(result, `{${key}}`, preparedValue);
  }, tempResult);
}
const localizationReadyPromise = localizationReady.promise;


/***/ }),

/***/ "./src/util/localization/types.ts":
/*!****************************************!*\
  !*** ./src/util/localization/types.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   areAdvancedLangFnOptions: () => (/* binding */ areAdvancedLangFnOptions),
/* harmony export */   isDeletedLangString: () => (/* binding */ isDeletedLangString),
/* harmony export */   isLangFnParam: () => (/* binding */ isLangFnParam),
/* harmony export */   isPluralLangString: () => (/* binding */ isPluralLangString),
/* harmony export */   isRegularLangString: () => (/* binding */ isRegularLangString)
/* harmony export */ });
/* GUARDS */

function isDeletedLangString(string) {
  return typeof string === 'object' && 'isDeleted' in string;
}
function isRegularLangString(string) {
  return typeof string === 'string';
}
function isPluralLangString(string) {
  return !isRegularLangString(string) && !isDeletedLangString(string);
}
function isLangFnParam(object) {
  return Boolean(object) && typeof object === 'object' && 'key' in object && !('type' in object);
}
function areAdvancedLangFnOptions(params) {
  return 'withNodes' in params && Boolean(params.withNodes);
}

/***/ }),

/***/ "./src/util/math.ts":
/*!**************************!*\
  !*** ./src/util/math.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   isBetween: () => (/* binding */ isBetween),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   roundToNearestEven: () => (/* binding */ roundToNearestEven)
/* harmony export */ });
const clamp = (num, min, max) => Math.min(max, Math.max(min, num));
const isBetween = (num, min, max) => num >= min && num <= max;
const round = (num, decimals = 0) => Math.round(num * 10 ** decimals) / 10 ** decimals;
const lerp = (start, end, interpolationRatio) => {
  return (1 - interpolationRatio) * start + interpolationRatio * end;
};

// Fractional values cause blurry text & canvas. Round to even to keep whole numbers while centering
function roundToNearestEven(value) {
  return Math.round(value / 2) * 2;
}

/***/ }),

/***/ "./src/util/mediaLoader.ts":
/*!*********************************!*\
  !*** ./src/util/mediaLoader.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cancelProgress: () => (/* binding */ cancelProgress),
/* harmony export */   fetch: () => (/* binding */ fetch),
/* harmony export */   getFromMemory: () => (/* binding */ getFromMemory),
/* harmony export */   getProgressiveUrl: () => (/* binding */ getProgressiveUrl),
/* harmony export */   removeCallback: () => (/* binding */ removeCallback)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _cacheApi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cacheApi */ "./src/util/cacheApi.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./files */ "./src/util/files.ts");
/* harmony import */ var _oggToWav__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./oggToWav */ "./src/util/oggToWav.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");







const asCacheApiType = {
  [_api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl]: _cacheApi__WEBPACK_IMPORTED_MODULE_3__.Type.Blob,
  [_api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.Text]: _cacheApi__WEBPACK_IMPORTED_MODULE_3__.Type.Text,
  [_api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.DownloadUrl]: undefined,
  [_api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.Progressive]: undefined
};
const PROGRESSIVE_URL_PREFIX = `${_config__WEBPACK_IMPORTED_MODULE_1__.IS_PACKAGED_ELECTRON ? _config__WEBPACK_IMPORTED_MODULE_1__.ELECTRON_HOST_URL : '.'}/progressive/`;
const URL_DOWNLOAD_PREFIX = './download/';
const MAX_MEDIA_RETRIES = 5;
const memoryCache = new Map();
const fetchPromises = new Map();
const progressCallbacks = new Map();
const cancellableCallbacks = new Map();
function fetch(url, mediaFormat, isHtmlAllowed = false, onProgress, callbackUniqueId) {
  if (mediaFormat === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.Progressive) {
    return _windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_PROGRESSIVE_SUPPORTED ? getProgressive(url) : fetch(url, _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl, isHtmlAllowed, onProgress, callbackUniqueId);
  }
  if (mediaFormat === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.DownloadUrl) {
    return _windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_PROGRESSIVE_SUPPORTED ? getDownloadUrl(url) : fetch(url, _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.BlobUrl, isHtmlAllowed, onProgress, callbackUniqueId);
  }
  if (!fetchPromises.has(url)) {
    const promise = fetchFromCacheOrRemote(url, mediaFormat, isHtmlAllowed).catch(err => {
      if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
        // eslint-disable-next-line no-console
        console.warn(err);
      }
      return undefined;
    }).finally(() => {
      fetchPromises.delete(url);
      progressCallbacks.delete(url);
      cancellableCallbacks.delete(url);
    });
    fetchPromises.set(url, promise);
  }
  if (onProgress && callbackUniqueId) {
    let activeCallbacks = progressCallbacks.get(url);
    if (!activeCallbacks) {
      activeCallbacks = new Map();
      progressCallbacks.set(url, activeCallbacks);
    }
    activeCallbacks.set(callbackUniqueId, onProgress);
  }
  return fetchPromises.get(url);
}
function getFromMemory(url) {
  return memoryCache.get(url);
}
function cancelProgress(progressCallback) {
  progressCallbacks.forEach((map, url) => {
    map.forEach(callback => {
      if (callback === progressCallback) {
        const parentCallback = cancellableCallbacks.get(url);
        if (!parentCallback) return;
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.cancelApiProgress)(parentCallback);
        cancellableCallbacks.delete(url);
        progressCallbacks.delete(url);
      }
    });
  });
}
function removeCallback(url, callbackUniqueId) {
  const callbacks = progressCallbacks.get(url);
  if (!callbacks) return;
  callbacks.delete(callbackUniqueId);
}
function getProgressiveUrl(url) {
  return `${PROGRESSIVE_URL_PREFIX}${url}`;
}
function getProgressive(url) {
  const progressiveUrl = `${PROGRESSIVE_URL_PREFIX}${url}`;
  memoryCache.set(url, progressiveUrl);
  return Promise.resolve(progressiveUrl);
}
function getDownloadUrl(url) {
  return Promise.resolve(`${URL_DOWNLOAD_PREFIX}${url}`);
}
async function fetchFromCacheOrRemote(url, mediaFormat, isHtmlAllowed, retryNumber = 0) {
  if (!_config__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CACHE_DISABLED) {
    const cacheName = url.startsWith('avatar') ? _config__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CACHE_NAME_AVATARS : _config__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CACHE_NAME;
    const cached = await _cacheApi__WEBPACK_IMPORTED_MODULE_3__.fetch(cacheName, url, asCacheApiType[mediaFormat], isHtmlAllowed);
    if (cached) {
      let media = cached;
      if (cached.type === 'audio/ogg' && !_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_OPUS_SUPPORTED) {
        media = await (0,_oggToWav__WEBPACK_IMPORTED_MODULE_5__.oggToWav)(media);
      }
      const prepared = prepareMedia(media);
      memoryCache.set(url, prepared);
      return prepared;
    }
  }
  const onProgress = makeOnProgress(url);
  cancellableCallbacks.set(url, onProgress);
  const remote = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('downloadMedia', {
    url,
    mediaFormat,
    isHtmlAllowed
  }, onProgress);
  if (!remote) {
    if (retryNumber >= MAX_MEDIA_RETRIES) {
      throw new Error(`Failed to fetch media ${url}`);
    }
    await new Promise(resolve => {
      setTimeout(resolve, getRetryTimeout(retryNumber));
    });
    // eslint-disable-next-line no-console
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) console.debug(`Retrying to fetch media ${url}`);
    return fetchFromCacheOrRemote(url, mediaFormat, isHtmlAllowed, retryNumber + 1);
  }
  let {
    mimeType
  } = remote;
  let prepared = prepareMedia(remote.dataBlob);
  if (mimeType === 'audio/ogg' && !_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_OPUS_SUPPORTED) {
    const blob = await (0,_files__WEBPACK_IMPORTED_MODULE_4__.fetchBlob)(prepared);
    URL.revokeObjectURL(prepared);
    const media = await (0,_oggToWav__WEBPACK_IMPORTED_MODULE_5__.oggToWav)(blob);
    prepared = prepareMedia(media);
    mimeType = media.type;
  }
  memoryCache.set(url, prepared);
  return prepared;
}
function makeOnProgress(url) {
  const onProgress = progress => {
    progressCallbacks.get(url)?.forEach(callback => {
      callback(progress);
      if (callback.isCanceled) onProgress.isCanceled = true;
    });
  };
  return onProgress;
}
function prepareMedia(mediaData) {
  if (mediaData instanceof Blob) {
    return URL.createObjectURL(mediaData);
  }
  return mediaData;
}
if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_PROGRESSIVE_SUPPORTED) {
  navigator.serviceWorker.addEventListener('message', async e => {
    const {
      type,
      messageId,
      params
    } = e.data;
    if (type !== 'requestPart') {
      return;
    }
    const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('downloadMedia', {
      mediaFormat: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.Progressive,
      ...params
    });
    if (!result) {
      return;
    }
    const {
      arrayBuffer,
      mimeType,
      fullSize
    } = result;
    navigator.serviceWorker.controller.postMessage({
      type: 'partResponse',
      messageId,
      result: {
        arrayBuffer,
        mimeType,
        fullSize
      }
    }, [arrayBuffer]);
  });
}
function getRetryTimeout(retryNumber) {
  // 250ms, 500ms, 1s, 2s, 4s
  return 250 * 2 ** retryNumber;
}

/***/ }),

/***/ "./src/util/memo.ts":
/*!**************************!*\
  !*** ./src/util/memo.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MEMO_EMPTY_ARRAY: () => (/* binding */ MEMO_EMPTY_ARRAY)
/* harmony export */ });
const MEMO_EMPTY_ARRAY = [];

/***/ }),

/***/ "./src/util/moduleLoader.ts":
/*!**********************************!*\
  !*** ./src/util/moduleLoader.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Bundles: () => (/* binding */ Bundles),
/* harmony export */   addLoadListener: () => (/* binding */ addLoadListener),
/* harmony export */   getModuleFromMemory: () => (/* binding */ getModuleFromMemory),
/* harmony export */   loadBundle: () => (/* binding */ loadBundle),
/* harmony export */   loadModule: () => (/* binding */ loadModule)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callbacks */ "./src/util/callbacks.ts");


let Bundles = /*#__PURE__*/function (Bundles) {
  Bundles[Bundles["Auth"] = 0] = "Auth";
  Bundles[Bundles["Main"] = 1] = "Main";
  Bundles[Bundles["Extra"] = 2] = "Extra";
  Bundles[Bundles["Calls"] = 3] = "Calls";
  Bundles[Bundles["Stars"] = 4] = "Stars";
  return Bundles;
}({});
const LOAD_PROMISES = {};
const MEMORY_CACHE = {};
const {
  addCallback,
  runCallbacks
} = (0,_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
async function loadBundle(bundleName) {
  if (!LOAD_PROMISES[bundleName]) {
    switch (bundleName) {
      case Bundles.Auth:
        LOAD_PROMISES[Bundles.Auth] = Promise.all(/*! import() | BundleAuth */[__webpack_require__.e("shared-components"), __webpack_require__.e("BundleAuth")]).then(__webpack_require__.bind(__webpack_require__, /*! ../bundles/auth */ "./src/bundles/auth.ts"));
        break;
      case Bundles.Main:
        if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
          // eslint-disable-next-line no-console
          console.log('>>> START LOAD MAIN BUNDLE');
        }
        LOAD_PROMISES[Bundles.Main] = Promise.all(/*! import() | BundleMain */[__webpack_require__.e("shared-components"), __webpack_require__.e("src_components_common_Avatar_tsx-src_components_common_FullNameTitle_tsx-src_hooks_schedulers-ac620f"), __webpack_require__.e("src_components_common_MediaSpoiler_tsx-src_components_common_PasswordForm_tsx-src_components_-3662f6"), __webpack_require__.e("src_components_right_DeleteMemberModal_tsx-src_global_selectors_calls_ts-src_global_selectors-18144d"), __webpack_require__.e("src_components_common_Composer_tsx-src_components_common_LinkField_tsx-src_components_common_-cced95"), __webpack_require__.e("src_global_actions_ui_calls_ts"), __webpack_require__.e("BundleMain")]).then(__webpack_require__.bind(__webpack_require__, /*! ../bundles/main */ "./src/bundles/main.ts"));
        break;
      case Bundles.Extra:
        LOAD_PROMISES[Bundles.Extra] = Promise.all(/*! import() | BundleExtra */[__webpack_require__.e("shared-components"), __webpack_require__.e("src_components_common_Avatar_tsx-src_components_common_FullNameTitle_tsx-src_hooks_schedulers-ac620f"), __webpack_require__.e("src_components_common_MediaSpoiler_tsx-src_components_common_PasswordForm_tsx-src_components_-3662f6"), __webpack_require__.e("src_components_right_DeleteMemberModal_tsx-src_global_selectors_calls_ts-src_global_selectors-18144d"), __webpack_require__.e("src_components_common_Composer_tsx-src_components_common_LinkField_tsx-src_components_common_-cced95"), __webpack_require__.e("src_components_common_PeerBadge_tsx-src_components_common_pickers_PickerModal_tsx-src_compone-326c9b"), __webpack_require__.e("BundleExtra")]).then(__webpack_require__.bind(__webpack_require__, /*! ../bundles/extra */ "./src/bundles/extra.ts"));
        break;
      case Bundles.Calls:
        LOAD_PROMISES[Bundles.Calls] = Promise.all(/*! import() | BundleCalls */[__webpack_require__.e("shared-components"), __webpack_require__.e("src_components_common_Avatar_tsx-src_components_common_FullNameTitle_tsx-src_hooks_schedulers-ac620f"), __webpack_require__.e("src_components_right_DeleteMemberModal_tsx-src_global_selectors_calls_ts-src_global_selectors-18144d"), __webpack_require__.e("src_global_actions_ui_calls_ts"), __webpack_require__.e("BundleCalls")]).then(__webpack_require__.bind(__webpack_require__, /*! ../bundles/calls */ "./src/bundles/calls.ts"));
        break;
      case Bundles.Stars:
        LOAD_PROMISES[Bundles.Stars] = Promise.all(/*! import() | BundleStars */[__webpack_require__.e("shared-components"), __webpack_require__.e("src_components_common_Avatar_tsx-src_components_common_FullNameTitle_tsx-src_hooks_schedulers-ac620f"), __webpack_require__.e("src_components_common_MediaSpoiler_tsx-src_components_common_PasswordForm_tsx-src_components_-3662f6"), __webpack_require__.e("src_components_common_PeerBadge_tsx-src_components_common_pickers_PickerModal_tsx-src_compone-326c9b"), __webpack_require__.e("BundleStars")]).then(__webpack_require__.bind(__webpack_require__, /*! ../bundles/stars */ "./src/bundles/stars.ts"));
        break;
    }
    LOAD_PROMISES[bundleName].then(runCallbacks);
  }
  const bundle = await LOAD_PROMISES[bundleName];
  if (!MEMORY_CACHE[bundleName]) {
    MEMORY_CACHE[bundleName] = bundle;
  }
  return bundle;
}
async function loadModule(bundleName) {
  await loadBundle(bundleName);
}
function getModuleFromMemory(bundleName, moduleName) {
  const bundle = MEMORY_CACHE[bundleName];
  if (!bundle) {
    return undefined;
  }
  return bundle[moduleName];
}
const addLoadListener = addCallback;

/***/ }),

/***/ "./src/util/multitab.ts":
/*!******************************!*\
  !*** ./src/util/multitab.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handleMessage: () => (/* binding */ handleMessage),
/* harmony export */   notifyLangpackUpdate: () => (/* binding */ notifyLangpackUpdate),
/* harmony export */   requestGlobal: () => (/* binding */ requestGlobal),
/* harmony export */   subscribeToMultitabBroadcastChannel: () => (/* binding */ subscribeToMultitabBroadcastChannel),
/* harmony export */   unsubcribeFromMultitabBroadcastChannel: () => (/* binding */ unsubcribeFromMultitabBroadcastChannel)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teactn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/teact/teactn */ "./src/lib/teact/teactn.tsx");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _deepDiff__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deepDiff */ "./src/util/deepDiff.ts");
/* harmony import */ var _deepMerge__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./deepMerge */ "./src/util/deepMerge.ts");
/* harmony import */ var _establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");
/* eslint-disable eslint-multitab-tt/set-global-only-variable */











const MULTITAB_ESTABLISH_TIMEOUT = 800;
let resolveGlobalPromise;
let isFirstGlobalResolved = false;
let currentGlobal;
let isDisabled = false;
const channel = _windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_MULTITAB_SUPPORTED ? new BroadcastChannel(_config__WEBPACK_IMPORTED_MODULE_3__.DATA_BROADCAST_CHANNEL_NAME) : undefined;
let isBroadcastDiffScheduled = false;
let lastBroadcastDiffGlobal;
function broadcastDiffOnIdle() {
  if (isBroadcastDiffScheduled) return;
  isBroadcastDiffScheduled = true;
  lastBroadcastDiffGlobal = currentGlobal;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.onFullyIdle)(() => {
    if (!channel) return;
    const diff = (0,_deepDiff__WEBPACK_IMPORTED_MODULE_6__.deepDiff)(lastBroadcastDiffGlobal, currentGlobal);
    if (typeof diff !== 'symbol') {
      channel.postMessage({
        type: 'globalDiffUpdate',
        diff
      });
    }
    isBroadcastDiffScheduled = false;
  });
}
function unsubcribeFromMultitabBroadcastChannel() {
  if (channel) {
    channel.removeEventListener('message', handleMessage);
    isDisabled = true;
  }
}
function subscribeToMultitabBroadcastChannel() {
  if (!channel) return;
  (0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.subscribeToTokenDied)(token => {
    if (token === (0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.getCurrentTabId)()) {
      unsubcribeFromMultitabBroadcastChannel();
      const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
      const newGlobal = {
        ...global,
        byTabId: (0,_iteratees__WEBPACK_IMPORTED_MODULE_9__.omit)(global.byTabId, [token])
      };
      const diff = (0,_deepDiff__WEBPACK_IMPORTED_MODULE_6__.deepDiff)(global, newGlobal);
      if (typeof diff !== 'symbol') {
        channel.postMessage({
          type: 'globalDiffUpdate',
          diff
        });
      }
      return;
    }
    let global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
    global = {
      ...global,
      byTabId: (0,_iteratees__WEBPACK_IMPORTED_MODULE_9__.omit)(global.byTabId, [token])
    };
    (0,_global__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
  });
  (0,_lib_teact_teactn__WEBPACK_IMPORTED_MODULE_1__.addCallback)(global => {
    if (!isFirstGlobalResolved || isDisabled) {
      currentGlobal = global;
      return;
    }
    if (currentGlobal === global) {
      return;
    }
    if (!currentGlobal) {
      currentGlobal = global;
      channel.postMessage({
        type: 'globalUpdate',
        global
      });
      return;
    }
    broadcastDiffOnIdle();
    currentGlobal = global;
  });
  channel.addEventListener('message', handleMessage);
}
function handleMessage({
  data
}) {
  if (!data || !channel) return;
  switch (data.type) {
    case 'initApi':
      {
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if (!(0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        const {
          initialArgs
        } = data;
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.initApi)((0,_global__WEBPACK_IMPORTED_MODULE_2__.getActions)().apiUpdate, initialArgs);
        break;
      }
    case 'globalDiffUpdate':
      {
        if (!isFirstGlobalResolved) return;
        const {
          diff
        } = data;
        const oldGlobal = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        const global = (0,_deepMerge__WEBPACK_IMPORTED_MODULE_7__.deepMerge)(oldGlobal, diff);

        // @ts-ignore
        global.DEBUG_randomId = oldGlobal.DEBUG_randomId;
        currentGlobal = global;
        (0,_global__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(global);
        break;
      }
    case 'globalUpdate':
      {
        if (isFirstGlobalResolved) return;
        const oldGlobal = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        // @ts-ignore
        data.global.DEBUG_randomId = oldGlobal.DEBUG_randomId;
        currentGlobal = data.global;
        (0,_global__WEBPACK_IMPORTED_MODULE_2__.setGlobal)(data.global);
        if (resolveGlobalPromise) {
          resolveGlobalPromise();
          resolveGlobalPromise = undefined;
          isFirstGlobalResolved = true;
        }
        break;
      }
    case 'requestGlobal':
      {
        const {
          appVersion
        } = data;
        if (appVersion !== "10.9.39") {
          // If app version on the other tab was updated, reload the current page immediately and don't respond
          // to the other tab's request because our current global might be incompatible with the new version
          window.location.reload();
          return;
        }
        if (!isFirstGlobalResolved) return;
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if (!(0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        channel.postMessage({
          type: 'globalUpdate',
          global
        });
        (0,_establishMultitabRole__WEBPACK_IMPORTED_MODULE_8__.signalPasscodeHash)();
        break;
      }
    case 'messageCallback':
      {
        if (!isFirstGlobalResolved) return;
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if ((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.handleMethodCallback)(data);
        break;
      }
    case 'localDbUpdate':
      {
        if (!isFirstGlobalResolved) return;
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if ((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        const {
          batchedUpdates
        } = data;
        batchedUpdates.forEach(({
          name,
          prop,
          value
        }) => {
          (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.updateLocalDb)(name, prop, value);
        });
        break;
      }
    case 'localDbUpdateFull':
      {
        if (!isFirstGlobalResolved) return;
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if ((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        const {
          localDb
        } = data;
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.updateFullLocalDb)(localDb);
        break;
      }
    case 'messageResponse':
      {
        if (!isFirstGlobalResolved) return;
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if ((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.handleMethodResponse)(data);
        break;
      }
    case 'cancelApiProgress':
      {
        if (!isFirstGlobalResolved) return;
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if (!(0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        const {
          messageId
        } = data;
        (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.cancelApiProgressMaster)(messageId);
        break;
      }
    case 'callApi':
      {
        if (!isFirstGlobalResolved) return;
        const global = (0,_global__WEBPACK_IMPORTED_MODULE_2__.getGlobal)();
        if (!(0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).isMasterTab) return;
        const {
          name,
          messageId,
          token,
          args,
          withCallback
        } = data;
        const argsWithCallback = withCallback ? [...args, (...callbackArgs) => {
          channel.postMessage({
            type: 'messageCallback',
            token,
            messageId,
            callbackArgs
          });
        }] : args;
        (async () => {
          const result = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_5__.callApiLocal)(name, ...argsWithCallback);
          channel.postMessage({
            type: 'messageResponse',
            token,
            messageId,
            response: result
          });
        })();
        break;
      }
    case 'langpackRefresh':
      {
        (0,_global__WEBPACK_IMPORTED_MODULE_2__.getActions)().refreshLangPackFromCache({
          langCode: data.langCode
        });
        break;
      }
  }
}
function requestGlobal(appVersion) {
  if (channel) {
    channel.postMessage({
      type: 'requestGlobal',
      appVersion
    });
  }
  const resolveWithoutGlobal = () => {
    if (resolveGlobalPromise) {
      resolveGlobalPromise();
      resolveGlobalPromise = undefined;
    }
    isFirstGlobalResolved = true;
  };
  if (localStorage.getItem(_config__WEBPACK_IMPORTED_MODULE_3__.MULTITAB_LOCALSTORAGE_KEY)) {
    setTimeout(resolveWithoutGlobal, MULTITAB_ESTABLISH_TIMEOUT);
  } else {
    resolveWithoutGlobal();
    return Promise.resolve();
  }
  return new Promise(resolve => {
    resolveGlobalPromise = resolve;
  });
}
function notifyLangpackUpdate(langCode) {
  if (!channel) return;
  channel.postMessage({
    type: 'langpackRefresh',
    langCode
  });
}

/***/ }),

/***/ "./src/util/notifications.ts":
/*!***********************************!*\
  !*** ./src/util/notifications.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkIfNotificationsSupported: () => (/* binding */ checkIfNotificationsSupported),
/* harmony export */   checkIfOfflinePushFailed: () => (/* binding */ checkIfOfflinePushFailed),
/* harmony export */   closeMessageNotifications: () => (/* binding */ closeMessageNotifications),
/* harmony export */   notifyAboutCall: () => (/* binding */ notifyAboutCall),
/* harmony export */   notifyAboutMessage: () => (/* binding */ notifyAboutMessage),
/* harmony export */   notifyClientReady: () => (/* binding */ notifyClientReady),
/* harmony export */   playNotifySound: () => (/* binding */ playNotifySound),
/* harmony export */   playNotifySoundDebounced: () => (/* binding */ playNotifySoundDebounced),
/* harmony export */   requestPermission: () => (/* binding */ requestPermission),
/* harmony export */   subscribe: () => (/* binding */ subscribe),
/* harmony export */   unsubscribe: () => (/* binding */ unsubscribe)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../global/helpers/messageSummary */ "./src/global/helpers/messageSummary.ts");
/* harmony import */ var _global_helpers_replies__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global/helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _global_reducers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../global/reducers */ "./src/global/reducers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _components_common_helpers_renderActionMessageText__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/common/helpers/renderActionMessageText */ "./src/components/common/helpers/renderActionMessageText.tsx");
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _mediaLoader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _oldLangProvider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./oldLangProvider */ "./src/util/oldLangProvider.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");















function getDeviceToken(subscription) {
  const data = subscription.toJSON();
  return JSON.stringify({
    endpoint: data.endpoint,
    keys: data.keys
  });
}
function checkIfPushSupported() {
  if (!_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_SERVICE_WORKER_SUPPORTED || _windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_ELECTRON) return false;
  if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
    if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[PUSH] Push notifications aren\'t supported.');
    }
    return false;
  }

  // If permission is denied, it is blocked until the user manually changes their settings
  if (Notification.permission === 'denied') {
    if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[PUSH] The user has blocked push notifications.');
    }
    return false;
  }

  // Check if push messaging is supported
  if (!('PushManager' in window)) {
    if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[PUSH] Push messaging isn\'t supported.');
    }
    return false;
  }
  return true;
}
function checkIfNotificationsSupported() {
  // Let's check if the browser supports notifications
  if (!('Notification' in window)) {
    if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[PUSH] This browser does not support desktop notification');
    }
    return false;
  }
  if (Notification.permission === 'denied') {
    if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[PUSH] The user has blocked push notifications.');
    }
    return false;
  }
  return true;
}
const expirationTime = 12 * 60 * 60 * 1000; // 12 hours
// Notification id is removed from soundPlayed cache after 3 seconds
const soundPlayedDelay = 3 * 1000;
const soundPlayedIds = new Set();
const notificationSound = new Audio('./notification.mp3');
notificationSound.setAttribute('mozaudiochannel', 'notification');
async function playNotifySound(id, volume) {
  if (id !== undefined && soundPlayedIds.has(id)) return;
  const {
    notificationSoundVolume
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifySettings)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)());
  const currentVolume = volume ? volume / 10 : notificationSoundVolume / 10;
  if (currentVolume === 0) return;
  notificationSound.volume = currentVolume;
  if (id !== undefined) {
    notificationSound.addEventListener('ended', () => {
      soundPlayedIds.add(id);
    }, {
      once: true
    });
    setTimeout(() => {
      soundPlayedIds.delete(id);
    }, soundPlayedDelay);
  }
  try {
    await notificationSound.play();
  } catch (error) {
    if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[PUSH] Unable to play notification sound');
    }
  }
}
const playNotifySoundDebounced = (0,_schedulers__WEBPACK_IMPORTED_MODULE_13__.debounce)(playNotifySound, 1000, true, false);
function checkIfShouldResubscribe(subscription) {
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  if (!global.push || !subscription) return true;
  if (getDeviceToken(subscription) !== global.push.deviceToken) return true;
  return Date.now() - global.push.subscribedAt > expirationTime;
}
async function requestPermission() {
  if (!('Notification' in window)) {
    return false;
  }
  let permission = Notification.permission;
  if (!['granted', 'denied'].includes(permission)) {
    permission = await Notification.requestPermission();
  }
  return permission === 'granted';
}
async function unsubscribeFromPush(subscription) {
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  const {
    deleteDeviceToken
  } = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)();
  if (subscription) {
    try {
      const deviceToken = getDeviceToken(subscription);
      await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('unregisterDevice', deviceToken);
      await subscription.unsubscribe();
      deleteDeviceToken();
      return;
    } catch (error) {
      if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
        // eslint-disable-next-line no-console
        console.log('[PUSH] Unable to unsubscribe from push.', error);
      }
    }
  }
  if (global.push) {
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('unregisterDevice', global.push.deviceToken);
    deleteDeviceToken();
  }
}
async function unsubscribe() {
  if (!checkIfPushSupported()) return;
  const serviceWorkerRegistration = await navigator.serviceWorker.ready;
  const subscription = await serviceWorkerRegistration.pushManager.getSubscription();
  await unsubscribeFromPush(subscription);
}

// Indicates if notification settings are loaded from the api
let areSettingsLoaded = false;

// Load notification settings from the api
async function loadNotificationSettings() {
  if (areSettingsLoaded) return (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifySettings)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)());
  const [resultSettings, resultExceptions] = await Promise.all([(0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchNotificationSettings'), (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchNotificationExceptions')]);
  if (!resultSettings) return (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifySettings)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)());
  let global = (0,_global_reducers__WEBPACK_IMPORTED_MODULE_6__.replaceSettings)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)(), resultSettings);
  if (resultExceptions) {
    global = (0,_global_reducers__WEBPACK_IMPORTED_MODULE_6__.addNotifyExceptions)(global, resultExceptions);
  }
  (0,_global__WEBPACK_IMPORTED_MODULE_0__.setGlobal)(global);
  areSettingsLoaded = true;
  return (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifySettings)(global);
}

// Load custom emoji from the api if it's not cached already
async function loadCustomEmoji(id) {
  let global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  if (global.customEmojis.byId[id]) return;
  const customEmoji = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('fetchCustomEmoji', {
    documentId: [id]
  });
  if (!customEmoji) return;
  global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  global = {
    ...global,
    customEmojis: {
      ...global.customEmojis,
      byId: {
        ...global.customEmojis.byId,
        ...(0,_iteratees__WEBPACK_IMPORTED_MODULE_10__.buildCollectionByKey)(customEmoji, 'id')
      }
    }
  };
  (0,_global__WEBPACK_IMPORTED_MODULE_0__.setGlobal)(global);
}
let isSubscriptionFailed = false;
function checkIfOfflinePushFailed() {
  return isSubscriptionFailed;
}
async function subscribe() {
  const {
    setDeviceToken,
    updateWebNotificationSettings
  } = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)();
  let hasWebNotifications = false;
  let hasPushNotifications = false;
  if (!checkIfPushSupported()) {
    // Ask for notification permissions only if service worker notifications are not supported
    // As pushManager.subscribe automatically triggers permission popup
    hasWebNotifications = await requestPermission();
    updateWebNotificationSettings({
      hasWebNotifications,
      hasPushNotifications
    });
    return;
  }
  const serviceWorkerRegistration = await navigator.serviceWorker.ready;
  let subscription = await serviceWorkerRegistration.pushManager.getSubscription();
  if (!checkIfShouldResubscribe(subscription)) return;
  await unsubscribeFromPush(subscription);
  try {
    subscription = await serviceWorkerRegistration.pushManager.subscribe({
      userVisibleOnly: true
    });
    const deviceToken = getDeviceToken(subscription);
    if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
      // eslint-disable-next-line no-console
      console.log('[PUSH] Received push subscription: ', deviceToken);
    }
    await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_8__.callApi)('registerDevice', deviceToken);
    setDeviceToken(deviceToken);
    hasPushNotifications = true;
    hasWebNotifications = true;
  } catch (error) {
    if (Notification.permission === 'denied') {
      // The user denied the notification permission which
      // means we failed to subscribe and the user will need
      // to manually change the notification permission to
      // subscribe to push messages
      if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
        // eslint-disable-next-line no-console
        console.warn('[PUSH] The user has blocked push notifications.');
      }
    } else {
      // A problem occurred with the subscription, this can
      // often be down to an issue or lack of the gcm_sender_id
      // and / or gcm_user_visible_only
      if (_config__WEBPACK_IMPORTED_MODULE_2__.DEBUG) {
        // eslint-disable-next-line no-console
        console.log('[PUSH] Unable to subscribe to push.', error);
      }
      // Request permissions and fall back to local notifications
      // if pushManager.subscribe was aborted due to invalid VAPID key.
      if ([DOMException.ABORT_ERR, DOMException.NOT_SUPPORTED_ERR].includes(error.code)) {
        isSubscriptionFailed = true;
        hasWebNotifications = await requestPermission();
      }
    }
  }
  updateWebNotificationSettings({
    hasWebNotifications,
    hasPushNotifications
  });
}
function checkIfShouldNotify(chat, message) {
  if (!areSettingsLoaded) return false;
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  const isMuted = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.selectIsChatMuted)(chat, (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifySettings)(global), (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifyExceptions)(global));
  const shouldNotifyAboutMessage = !message.content?.action?.phoneCall;
  if (isMuted || !shouldNotifyAboutMessage || chat.isNotJoined || !chat.isListed || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectIsChatWithSelf)(global, chat.id)) {
    return false;
  }
  // On touch devices show notifications when chat is not active
  if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_TOUCH_ENV) {
    const {
      chatId,
      type
    } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectCurrentMessageList)(global) || {};
    return !(chatId === chat.id && type === 'thread');
  }
  // On desktop show notifications when window is not focused
  return !document.hasFocus();
}
function getNotificationContent(chat, message, reaction) {
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  let {
    senderId
  } = message;
  const hasReaction = Boolean(reaction);
  if (hasReaction) senderId = reaction.peerId;
  const {
    isScreenLocked
  } = global.passcode;
  const messageSenderChat = senderId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChat)(global, senderId) : undefined;
  const messageSenderUser = senderId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, senderId) : undefined;
  const messageAction = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageAction)(message);
  const replyInfo = (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_5__.getMessageReplyInfo)(message);
  const actionTargetMessage = messageAction && replyInfo?.replyToMsgId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectChatMessage)(global, replyInfo?.replyFrom?.fromChatId || chat.id, replyInfo.replyToMsgId) : undefined;
  const {
    targetUserIds: actionTargetUserIds,
    targetChatId: actionTargetChatId
  } = messageAction || {};
  const actionTargetUsers = actionTargetUserIds ? actionTargetUserIds.map(userId => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectUser)(global, userId)).filter(Boolean) : undefined;
  const privateChatUserId = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getPrivateChatUserId)(chat);
  const isSelf = privateChatUserId === global.currentUserId;
  const topic = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectTopicFromMessage)(global, message);
  let body;
  if (!isScreenLocked && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.selectShouldShowMessagePreview)(chat, (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifySettings)(global), (0,_global_selectors__WEBPACK_IMPORTED_MODULE_7__.selectNotifyExceptions)(global))) {
    const isChat = chat && ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat) || message.senderId === message.chatId);
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isActionMessage)(message)) {
      body = (0,_components_common_helpers_renderActionMessageText__WEBPACK_IMPORTED_MODULE_9__.renderActionMessageText)(_oldLangProvider__WEBPACK_IMPORTED_MODULE_12__.oldTranslate, message, messageSenderUser, chat, actionTargetUsers, actionTargetMessage, actionTargetChatId, topic, {
        asPlainText: true
      });
    } else {
      // TODO[forums] Support ApiChat
      const senderName = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageSenderName)(_oldLangProvider__WEBPACK_IMPORTED_MODULE_12__.oldTranslate, chat.id, isChat ? messageSenderChat : messageSenderUser);
      const statefulContent = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageStatefulContent)(global, message);
      let summary = (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_4__.getMessageSummaryText)(_oldLangProvider__WEBPACK_IMPORTED_MODULE_12__.oldTranslate, message, statefulContent, hasReaction, 60);
      if (hasReaction) {
        const emoji = getReactionEmoji(reaction);
        summary = (0,_oldLangProvider__WEBPACK_IMPORTED_MODULE_12__.oldTranslate)('PushReactText', [emoji, summary]);
      }
      body = senderName ? `${senderName}: ${summary}` : summary;
    }
  } else {
    body = 'New message';
  }
  let title = isScreenLocked ? _config__WEBPACK_IMPORTED_MODULE_2__.APP_NAME : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getChatTitle)(_oldLangProvider__WEBPACK_IMPORTED_MODULE_12__.oldTranslate, chat, isSelf);
  if (message.isSilent) {
    title += ' 🔕';
  }
  return {
    title,
    body
  };
}
async function getAvatar(chat) {
  const imageHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getChatAvatarHash)(chat);
  if (!imageHash) return undefined;
  let mediaData = _mediaLoader__WEBPACK_IMPORTED_MODULE_11__.getFromMemory(imageHash);
  if (!mediaData) {
    await _mediaLoader__WEBPACK_IMPORTED_MODULE_11__.fetch(imageHash, _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMediaFormat.BlobUrl);
    mediaData = _mediaLoader__WEBPACK_IMPORTED_MODULE_11__.getFromMemory(imageHash);
  }
  return mediaData;
}
function getReactionEmoji(reaction) {
  let emoji;
  if (reaction.reaction.type === 'emoji') {
    emoji = reaction.reaction.emoticon;
  }
  if (reaction.reaction.type === 'custom') {
    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global
    emoji = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)().customEmojis.byId[reaction.reaction.documentId]?.emoji;
  }
  return emoji || '❤️';
}
async function notifyAboutCall({
  call,
  user
}) {
  const {
    hasWebNotifications
  } = await loadNotificationSettings();
  if (document.hasFocus() || !hasWebNotifications) return;
  const areNotificationsSupported = checkIfNotificationsSupported();
  if (!areNotificationsSupported) return;
  const icon = await getAvatar(user);
  const options = {
    body: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getUserFullName)(user),
    icon,
    badge: icon,
    tag: `call_${call.id}`
  };
  if ('vibrate' in navigator) {
    // @ts-ignore
    options.vibrate = [200, 100, 200];
  }
  const notification = new Notification((0,_oldLangProvider__WEBPACK_IMPORTED_MODULE_12__.oldTranslate)('VoipIncoming'), options);
  notification.onclick = () => {
    notification.close();
    if (window.focus) {
      window.focus();
    }
  };
}
async function notifyAboutMessage({
  chat,
  message,
  isReaction = false
}) {
  const {
    hasWebNotifications
  } = await loadNotificationSettings();
  if (!checkIfShouldNotify(chat, message)) return;
  const areNotificationsSupported = checkIfNotificationsSupported();
  if (!hasWebNotifications || !areNotificationsSupported) {
    if (!message.isSilent && !isReaction && !_windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_ELECTRON) {
      // Only play sound if web notifications are disabled
      playNotifySoundDebounced(String(message.id) || chat.id);
    }
    return;
  }
  if (!areNotificationsSupported) return;
  if (!message.id) return;
  const activeReaction = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageRecentReaction)(message);
  // Do not notify about reactions on messages that are not outgoing
  if (isReaction && !activeReaction) return;

  // If this is a custom emoji reaction we need to make sure it is loaded
  if (isReaction && activeReaction && activeReaction.reaction.type === 'custom') {
    await loadCustomEmoji(activeReaction.reaction.documentId);
  }
  const icon = await getAvatar(chat);
  const {
    title,
    body
  } = getNotificationContent(chat, message, activeReaction);
  if (checkIfPushSupported()) {
    if (navigator.serviceWorker?.controller) {
      // notify service worker about new message notification
      navigator.serviceWorker.controller.postMessage({
        type: 'showMessageNotification',
        payload: {
          title,
          body,
          icon,
          chatId: chat.id,
          messageId: message.id,
          shouldReplaceHistory: true,
          isSilent: message.isSilent,
          reaction: activeReaction?.reaction
        }
      });
    }
  } else {
    const dispatch = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)();
    const options = {
      body,
      icon,
      badge: icon,
      tag: String(message.id)
    };
    if ('vibrate' in navigator) {
      // @ts-ignore
      options.vibrate = [200, 100, 200];
    }
    const notification = new Notification(title, options);
    notification.onclick = () => {
      notification.close();
      dispatch.focusMessage({
        chatId: chat.id,
        messageId: message.id,
        shouldReplaceHistory: true
      });
      if (window.focus) {
        window.focus();
      }
    };

    // Play sound when notification is displayed
    notification.onshow = () => {
      // TODO Update when reaction badges are implemented
      if (isReaction || message.isSilent || _windowEnvironment__WEBPACK_IMPORTED_MODULE_14__.IS_ELECTRON) return;
      playNotifySoundDebounced(String(message.id) || chat.id);
    };
  }
}
function closeMessageNotifications(payload) {
  if (_config__WEBPACK_IMPORTED_MODULE_2__.IS_TEST || !navigator.serviceWorker?.controller) return;
  navigator.serviceWorker.controller.postMessage({
    type: 'closeMessageNotifications',
    payload
  });
}

// Notify service worker that client is fully loaded
function notifyClientReady() {
  if (!navigator.serviceWorker?.controller) return;
  navigator.serviceWorker.controller.postMessage({
    type: 'clientReady'
  });
}

/***/ }),

/***/ "./src/util/oggToWav.ts":
/*!******************************!*\
  !*** ./src/util/oggToWav.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   oggToWav: () => (/* binding */ oggToWav)
/* harmony export */ });
const SAMPLE_RATE = 48000;
const BIT_DEPTH = 16;
async function oggToWav(opusData) {
  const arrayBuffer = await new Response(opusData).arrayBuffer();
  return new Promise(resolve => {
    const typedArray = new Uint8Array(arrayBuffer);
    let decoderWorker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("_a587"), __webpack_require__.b));
    let wavWorker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("node_modules_opus-recorder_dist_waveWorker_min_js"), __webpack_require__.b));
    decoderWorker.onmessage = e => {
      // eslint-disable-next-line no-null/no-null
      if (e.data === null) {
        // `null` means decoder is finished
        wavWorker.postMessage({
          command: 'done'
        });
      } else {
        // `e.data` contains decoded buffers as float32 values
        wavWorker.postMessage({
          command: 'encode',
          buffers: e.data
        }, e.data.map(({
          buffer
        }) => buffer));
      }
    };
    wavWorker.onmessage = e => {
      if (e.data.message === 'page') {
        resolve(new Blob([e.data.page], {
          type: 'audio/wav'
        }));
        decoderWorker.terminate();
        decoderWorker = undefined;
        wavWorker.terminate();
        wavWorker = undefined;
      }
    };
    wavWorker.postMessage({
      command: 'init',
      wavBitDepth: BIT_DEPTH,
      wavSampleRate: SAMPLE_RATE
    });
    decoderWorker.postMessage({
      command: 'init',
      decoderSampleRate: SAMPLE_RATE,
      outputBufferSampleRate: SAMPLE_RATE
    });
    decoderWorker.postMessage({
      command: 'decode',
      pages: typedArray
    }, [typedArray.buffer]);
  });
}

/***/ }),

/***/ "./src/util/oldLangProvider.ts":
/*!*************************************!*\
  !*** ./src/util/oldLangProvider.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addCallback: () => (/* binding */ addCallback),
/* harmony export */   getTranslationFn: () => (/* binding */ getTranslationFn),
/* harmony export */   oldSetLanguage: () => (/* binding */ oldSetLanguage),
/* harmony export */   oldTranslate: () => (/* binding */ oldTranslate),
/* harmony export */   removeCallback: () => (/* binding */ removeCallback),
/* harmony export */   setTimeFormat: () => (/* binding */ setTimeFormat)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/gramjs */ "./src/api/gramjs/index.ts");
/* harmony import */ var _cacheApi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cacheApi */ "./src/util/cacheApi.ts");
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _localization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./localization */ "./src/util/localization/index.ts");
/* harmony import */ var _textFormat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./textFormat */ "./src/util/textFormat.ts");







const SUBSTITUTION_REGEX = /%\d?\$?[sdf@]/g;
const PLURAL_OPTIONS = ['value', 'zeroValue', 'oneValue', 'twoValue', 'fewValue', 'manyValue', 'otherValue'];
// Some rules edited from https://github.com/eemeli/make-plural/blob/master/packages/plurals/cardinals.js
const PLURAL_RULES = {
  /* eslint-disable max-len */
  en: n => n !== 1 ? 6 : 2,
  ar: n => n === 0 ? 1 : n === 1 ? 2 : n === 2 ? 3 : n % 100 >= 3 && n % 100 <= 10 ? 4 : n % 100 >= 11 ? 5 : 6,
  be: n => {
    const s = String(n).split('.');
    const t0 = Number(s[0]) === n;
    const n10 = t0 ? Number(s[0].slice(-1)) : 0;
    const n100 = t0 ? Number(s[0].slice(-2)) : 0;
    return n10 === 1 && n100 !== 11 ? 2 : n10 >= 2 && n10 <= 4 && (n100 < 12 || n100 > 14) ? 4 : t0 && n10 === 0 || n10 >= 5 && n10 <= 9 || n100 >= 11 && n100 <= 14 ? 5 : 6;
  },
  ca: n => n !== 1 ? 6 : 2,
  cs: n => {
    const s = String(n).split('.');
    const i = Number(s[0]);
    const v0 = !s[1];
    return n === 1 && v0 ? 2 : i >= 2 && i <= 4 && v0 ? 4 : !v0 ? 5 : 6;
  },
  de: n => n !== 1 ? 6 : 2,
  es: n => n !== 1 ? 6 : 2,
  fa: n => n > 1 ? 6 : 2,
  fi: n => n !== 1 ? 6 : 2,
  fr: n => n > 1 ? 6 : 2,
  id: () => 0,
  it: n => n !== 1 ? 6 : 2,
  hr: n => {
    const s = String(n).split('.');
    const i = s[0];
    const f = s[1] || '';
    const v0 = !s[1];
    const i10 = Number(i.slice(-1));
    const i100 = Number(i.slice(-2));
    const f10 = Number(f.slice(-1));
    const f100 = Number(f.slice(-2));
    return v0 && i10 === 1 && i100 !== 11 || f10 === 1 && f100 !== 11 ? 2 : v0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14) || f10 >= 2 && f10 <= 4 && (f100 < 12 || f100 > 14) ? 4 : 6;
  },
  hu: n => n > 1 ? 6 : 2,
  ko: () => 0,
  ms: () => 0,
  nb: n => n > 1 ? 6 : 2,
  nl: n => n !== 1 ? 6 : 2,
  pl: n => n === 1 ? 2 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 4 : 5,
  'pt-br': n => n > 1 ? 6 : 2,
  ru: n => n % 10 === 1 && n % 100 !== 11 ? 2 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 4 : 5,
  sk: n => {
    const s = String(n).split('.');
    const i = Number(s[0]);
    const v0 = !s[1];
    return n === 1 && v0 ? 2 : i >= 2 && i <= 4 && v0 ? 4 : !v0 ? 5 : 6;
  },
  sr: n => {
    const s = String(n).split('.');
    const i = s[0];
    const f = s[1] || '';
    const v0 = !s[1];
    const i10 = Number(i.slice(-1));
    const i100 = Number(i.slice(-2));
    const f10 = Number(f.slice(-1));
    const f100 = Number(f.slice(-2));
    return v0 && i10 === 1 && i100 !== 11 || f10 === 1 && f100 !== 11 ? 2 : v0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14) || f10 >= 2 && f10 <= 4 && (f100 < 12 || f100 > 14) ? 4 : 6;
  },
  tr: n => n > 1 ? 6 : 2,
  uk: n => n % 10 === 1 && n % 100 !== 11 ? 2 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 4 : 5,
  uz: n => n > 1 ? 6 : 2
  /* eslint-enable max-len */
};
const cache = new Map();
let langPack;
let fallbackLangPack;
const {
  addCallback,
  removeCallback,
  runCallbacks
} = (0,_callbacks__WEBPACK_IMPORTED_MODULE_4__.createCallbackManager)();

let currentLangCode;
let currentTimeFormat;
function createLangFn() {
  return (key, value, format, pluralValue) => {
    if (value !== undefined) {
      const cacheValue = Array.isArray(value) ? JSON.stringify(value) : value;
      const cached = cache.get(`${key}_${cacheValue}_${format}${pluralValue ? `_${pluralValue}` : ''}`);
      if (cached) {
        return cached;
      }
    }
    if (!fallbackLangPack) {
      void importFallbackLangPack();
    }
    const langString = langPack?.[key] || fallbackLangPack?.[key];
    if (!langString) {
      return key;
    }
    return processTranslation(langString, key, value, format, pluralValue);
  };
}
let translationFn = createLangFn();

/**
 * @deprecated Do not translate inside non-reactive contexts. Pass parameters to the component instead
 */
function oldTranslate(...args) {
  return translationFn(...args);
}
function getTranslationFn() {
  return translationFn;
}

/**
 * @deprecated Migrate to `changeLanguage` in `util/localization.ts` instead
 */
async function oldSetLanguage(langCode, callback, withFallback = false) {
  (0,_localization__WEBPACK_IMPORTED_MODULE_5__.loadAndChangeLanguage)(langCode, true);
  if (langPack && langCode === currentLangCode) {
    if (callback) {
      callback();
    }
    return;
  }
  let newLangPack = await _cacheApi__WEBPACK_IMPORTED_MODULE_3__.fetch(_config__WEBPACK_IMPORTED_MODULE_1__.LANG_CACHE_NAME, langCode, _cacheApi__WEBPACK_IMPORTED_MODULE_3__.Type.Json);
  if (!newLangPack) {
    if (withFallback) {
      await importFallbackLangPack();
    }
    newLangPack = await fetchRemote(langCode);
    if (!newLangPack) {
      return;
    }
  }
  cache.clear();
  currentLangCode = langCode;
  langPack = newLangPack;
  document.documentElement.lang = langCode;
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  const {
    languages,
    byKey
  } = global.settings;
  const timeFormat = byKey?.timeFormat;
  const langInfo = languages?.find(lang => lang.langCode === langCode);
  translationFn = createLangFn();
  translationFn.isRtl = Boolean(langInfo?.isRtl);
  translationFn.code = langCode.replace('-raw', '');
  translationFn.langName = langInfo?.nativeName;
  translationFn.timeFormat = timeFormat;
  if (callback) {
    callback();
  }
  runCallbacks();
}
function setTimeFormat(timeFormat) {
  if (timeFormat && timeFormat === currentTimeFormat) {
    return;
  }
  currentTimeFormat = timeFormat;
  translationFn.timeFormat = timeFormat;
  runCallbacks();
}
async function importFallbackLangPack() {
  if (fallbackLangPack) {
    return;
  }
  fallbackLangPack = (await __webpack_require__.e(/*! import() */ "src_util_fallbackLangPack_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./fallbackLangPack */ "./src/util/fallbackLangPack.ts"))).default;
  runCallbacks();
}
async function fetchRemote(langCode) {
  const remote = await (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_2__.callApi)('oldFetchLangPack', {
    sourceLangPacks: _config__WEBPACK_IMPORTED_MODULE_1__.LANG_PACKS,
    langCode
  });
  if (remote) {
    await _cacheApi__WEBPACK_IMPORTED_MODULE_3__.save(_config__WEBPACK_IMPORTED_MODULE_1__.LANG_CACHE_NAME, langCode, remote.langPack);
    return remote.langPack;
  }
  return undefined;
}
function getPluralOption(amount) {
  const langCode = currentLangCode || 'en';
  const optionIndex = PLURAL_RULES[langCode] ? PLURAL_RULES[langCode](amount) : 0;
  return PLURAL_OPTIONS[optionIndex];
}
function processTemplate(template, value) {
  value = Array.isArray(value) ? value : [value];
  const translationSlices = template.split(SUBSTITUTION_REGEX);
  const initialValue = translationSlices.shift();
  return translationSlices.reduce((result, str, index) => {
    return `${result}${String(value[index] ?? '')}${str}`;
  }, initialValue || '');
}
function processTranslation(langString, key, value, format, pluralValue) {
  const preferredPluralOption = typeof value === 'number' || pluralValue !== undefined ? getPluralOption(pluralValue ?? value) : 'value';
  const template = typeof langString === 'string' ? langString : preferredPluralOption === 'value'
  // Support cached older `langString` interface
  ? typeof langString === 'object' ? langString.value : langString : typeof langString === 'object' ? langString[preferredPluralOption] || langString.otherValue : undefined;
  if (!template?.trim()) {
    const parts = key.split('.');
    return parts[parts.length - 1];
  }
  if (value !== undefined) {
    const formattedValue = format === 'i' ? (0,_textFormat__WEBPACK_IMPORTED_MODULE_6__.formatInteger)(value) : value;
    const result = processTemplate(template, formattedValue);
    const cacheValue = Array.isArray(value) ? JSON.stringify(value) : value;
    cache.set(`${key}_${cacheValue}_${format}${pluralValue ? `_${pluralValue}` : ''}`, result);
    return result;
  }
  return template;
}

/***/ }),

/***/ "./src/util/passcode.ts":
/*!******************************!*\
  !*** ./src/util/passcode.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UnrecoverablePasscodeError: () => (/* binding */ UnrecoverablePasscodeError),
/* harmony export */   clearEncryptedSession: () => (/* binding */ clearEncryptedSession),
/* harmony export */   decryptSession: () => (/* binding */ decryptSession),
/* harmony export */   decryptSessionByCurrentHash: () => (/* binding */ decryptSessionByCurrentHash),
/* harmony export */   encryptSession: () => (/* binding */ encryptSession),
/* harmony export */   forgetPasscode: () => (/* binding */ forgetPasscode),
/* harmony export */   getPasscodeHash: () => (/* binding */ getPasscodeHash),
/* harmony export */   setPasscodeHash: () => (/* binding */ setPasscodeHash),
/* harmony export */   setupPasscode: () => (/* binding */ setupPasscode)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _browser_idb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./browser/idb */ "./src/util/browser/idb.ts");
/* harmony import */ var _cacheApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cacheApi */ "./src/util/cacheApi.ts");



const IV_LENGTH = 12;
const SALT = 'harder better faster stronger';
let currentPasscodeHash;
class UnrecoverablePasscodeError extends Error {}
function getPasscodeHash() {
  return currentPasscodeHash;
}
function setPasscodeHash(passcodeHash) {
  currentPasscodeHash = passcodeHash;
}
async function setupPasscode(passcode) {
  currentPasscodeHash = await sha256(passcode);
}
async function encryptSession(sessionJson, globalJson) {
  if (!currentPasscodeHash) {
    // eslint-disable-next-line no-console
    console.error('[api/passcode] Missing current passcode');
    throw new Error('[api/passcode] Missing current passcode');
  }
  await Promise.all([(async () => {
    if (!sessionJson) return;
    const sessionEncrypted = await aesEncrypt(sessionJson, currentPasscodeHash);
    await store('sessionEncrypted', sessionEncrypted);
  })(), (async () => {
    if (!globalJson) return;
    const globalEncrypted = await aesEncrypt(globalJson, currentPasscodeHash);
    await store('globalEncrypted', globalEncrypted);
  })()]);
}
async function decryptSessionByCurrentHash() {
  if (!currentPasscodeHash) {
    // eslint-disable-next-line no-console
    console.error('[api/passcode] Missing current passcode');
    throw new Error('[api/passcode] Missing current passcode');
  }
  const [sessionEncrypted, globalEncrypted] = await Promise.all([load('sessionEncrypted'), load('globalEncrypted')]);
  if (!sessionEncrypted || !globalEncrypted) {
    // eslint-disable-next-line no-console
    console.error('[api/passcode] Missing required stored fields');
    throw new Error('[api/passcode] Missing required stored fields');
  }
  try {
    const [sessionJson, globalJson] = await Promise.all([aesDecrypt(sessionEncrypted, currentPasscodeHash), aesDecrypt(globalEncrypted, currentPasscodeHash)]);
    return {
      sessionJson,
      globalJson
    };
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error('[api/passcode] Error decrypting session', err);
    throw err;
  }
}
async function decryptSession(passcode) {
  const passcodeHash = await sha256(passcode);
  const [sessionEncrypted, globalEncrypted] = await Promise.all([load('sessionEncrypted'), load('globalEncrypted')]);
  if (!sessionEncrypted || !globalEncrypted) {
    // eslint-disable-next-line no-console
    console.error('[api/passcode] Missing required stored fields');
    throw new UnrecoverablePasscodeError('[api/passcode] Missing required stored fields');
  }
  try {
    const [sessionJson, globalJson] = await Promise.all([aesDecrypt(sessionEncrypted, passcodeHash), aesDecrypt(globalEncrypted, passcodeHash)]);
    currentPasscodeHash = passcodeHash;
    return {
      sessionJson,
      globalJson
    };
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error('[api/passcode] Error decrypting session', err);
    throw err;
  }
}
function forgetPasscode() {
  currentPasscodeHash = undefined;
}
function clearEncryptedSession() {
  forgetPasscode();
  _browser_idb__WEBPACK_IMPORTED_MODULE_1__.PASSCODE_IDB_STORE.clear();
  return _cacheApi__WEBPACK_IMPORTED_MODULE_2__.clear(_config__WEBPACK_IMPORTED_MODULE_0__.LEGACY_PASSCODE_CACHE_NAME);
}
function sha256(plaintext) {
  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(`${plaintext}${SALT}`));
}
function store(key, value) {
  const asArray = Array.from(new Uint8Array(value));
  _browser_idb__WEBPACK_IMPORTED_MODULE_1__.PASSCODE_IDB_STORE.set(key, asArray);
}
async function load(key) {
  const cached = await _browser_idb__WEBPACK_IMPORTED_MODULE_1__.PASSCODE_IDB_STORE.get(key);
  if (cached) {
    const asArrayBuffer = new Uint8Array(cached).buffer;
    return asArrayBuffer;
  }
  // Fallback for old data
  return _cacheApi__WEBPACK_IMPORTED_MODULE_2__.fetch(_config__WEBPACK_IMPORTED_MODULE_0__.LEGACY_PASSCODE_CACHE_NAME, key, _cacheApi__WEBPACK_IMPORTED_MODULE_2__.Type.ArrayBuffer);
}
async function aesEncrypt(plaintext, pwHash) {
  const iv = crypto.getRandomValues(new Uint8Array(IV_LENGTH));
  const alg = {
    name: 'AES-GCM',
    iv
  };
  const key = await crypto.subtle.importKey('raw', pwHash, alg, false, ['encrypt']);
  const ptUint8 = new TextEncoder().encode(plaintext);
  const ctBuffer = await crypto.subtle.encrypt(alg, key, ptUint8);
  const ct = new Uint8Array(ctBuffer);
  const result = new Uint8Array(IV_LENGTH + ct.length);
  result.set(iv, 0);
  result.set(ct, IV_LENGTH);
  return result.buffer;
}
async function aesDecrypt(data, pwHash) {
  const dataArray = new Uint8Array(data);
  const iv = dataArray.slice(0, IV_LENGTH);
  const alg = {
    name: 'AES-GCM',
    iv
  };
  const key = await crypto.subtle.importKey('raw', pwHash, alg, false, ['decrypt']);
  const ct = dataArray.slice(IV_LENGTH);
  const plainBuffer = await crypto.subtle.decrypt(alg, key, ct);
  return new TextDecoder().decode(plainBuffer);
}

/***/ }),

/***/ "./src/util/patchSafariProgressiveAudio.ts":
/*!*************************************************!*\
  !*** ./src/util/patchSafariProgressiveAudio.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isSafariPatchInProgress: () => (/* binding */ isSafariPatchInProgress),
/* harmony export */   patchSafariProgressiveAudio: () => (/* binding */ patchSafariProgressiveAudio)
/* harmony export */ });
/*
 * Thanks to Ace Monkey for this mind-blowing patch.
 */

function patchSafariProgressiveAudio(audioEl) {
  if (audioEl.dataset.patchedForSafari) {
    return;
  }
  audioEl.addEventListener('play', () => {
    const t = audioEl.currentTime;
    audioEl.dataset.patchForSafariInProgress = 'true';
    function onProgress() {
      if (!audioEl.buffered.length) {
        return;
      }
      audioEl.currentTime = audioEl.duration - 1;
      audioEl.addEventListener('progress', () => {
        delete audioEl.dataset.patchForSafariInProgress;
        audioEl.currentTime = t;
        if (audioEl.paused && !audioEl.dataset.preventPlayAfterPatch) {
          audioEl.play();
        }
      }, {
        once: true
      });
      audioEl.removeEventListener('progress', onProgress);
    }
    audioEl.addEventListener('progress', onProgress);
  }, {
    once: true
  });
  audioEl.dataset.patchedForSafari = 'true';
}
function isSafariPatchInProgress(audioEl) {
  return Boolean(audioEl.dataset.patchForSafariInProgress);
}

/***/ }),

/***/ "./src/util/perfomanceSettings.ts":
/*!****************************************!*\
  !*** ./src/util/perfomanceSettings.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applyPerformanceSettings: () => (/* binding */ applyPerformanceSettings)
/* harmony export */ });
function applyPerformanceSettings(performanceType) {
  const {
    pageTransitions,
    messageSendingAnimations,
    mediaViewerAnimations,
    messageComposerAnimations,
    contextMenuAnimations,
    contextMenuBlur,
    rightColumnAnimations
  } = performanceType;
  const root = document.body;
  root.classList.toggle('no-page-transitions', !pageTransitions);
  root.classList.toggle('no-message-sending-animations', !messageSendingAnimations);
  root.classList.toggle('no-media-viewer-animations', !mediaViewerAnimations);
  root.classList.toggle('no-message-composer-animations', !messageComposerAnimations);
  root.classList.toggle('no-context-menu-animations', !contextMenuAnimations);
  root.classList.toggle('no-menu-blur', !contextMenuBlur);
  root.classList.toggle('no-right-column-animations', !rightColumnAnimations);
}

/***/ }),

/***/ "./src/util/permanentWebVersion.ts":
/*!*****************************************!*\
  !*** ./src/util/permanentWebVersion.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkAndAssignPermanentWebVersion: () => (/* binding */ checkAndAssignPermanentWebVersion),
/* harmony export */   getPermanentWebVersion: () => (/* binding */ getPermanentWebVersion),
/* harmony export */   switchPermanentWebVersion: () => (/* binding */ switchPermanentWebVersion)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _websync__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websync */ "./src/util/websync.ts");



const SEARCH_ENGINE_REGEX = /(^|\.)(google|bing|duckduckgo|ya|yandex)\./i;
// Handled by the legacy version. Cannot be updated
const PERMANENT_VERSION_KEY = 'kz_version';
const AVAILABLE_VERSIONS = ['Z', 'K'];
const CLIENT_VERSION = 'Z';
function setPermanentWebVersion(version) {
  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));
}
function getPermanentWebVersion() {
  const version = localStorage.getItem(PERMANENT_VERSION_KEY);
  if (version) {
    return JSON.parse(version);
  }
  return undefined;
}
function switchPermanentWebVersion(version) {
  setPermanentWebVersion(version);
  (0,_websync__WEBPACK_IMPORTED_MODULE_2__.clearWebsync)();
  (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().skipLockOnUnload();
  window.location.assign(`${_config__WEBPACK_IMPORTED_MODULE_1__.WEB_VERSION_BASE}${version.toLowerCase()}`);
}
function checkAndAssignPermanentWebVersion() {
  if (window.location.hostname !== _config__WEBPACK_IMPORTED_MODULE_1__.PRODUCTION_HOSTNAME) return;
  const referrer = document.referrer.toLowerCase();
  if (!referrer) return;
  try {
    const isSearchEngine = new URL(referrer).host.match(SEARCH_ENGINE_REGEX);
    if (!isSearchEngine) return;
    const currentVersion = getPermanentWebVersion();
    if (currentVersion) {
      if (currentVersion !== CLIENT_VERSION) {
        switchPermanentWebVersion(currentVersion);
      }
      return;
    }
    const urlParams = new URLSearchParams(window.location.search);
    const hasTest = (urlParams.get('test') ?? undefined) !== undefined;
    const shouldRedirect = Math.random() < 0.5;
    if (hasTest || !shouldRedirect) {
      setPermanentWebVersion('Z');
      return;
    }
    switchPermanentWebVersion('K');
  } catch (e) {
    // Ignore
  }
}

/***/ }),

/***/ "./src/util/phoneNumber.ts":
/*!*********************************!*\
  !*** ./src/util/phoneNumber.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatPhoneNumber: () => (/* binding */ formatPhoneNumber),
/* harmony export */   formatPhoneNumberWithCode: () => (/* binding */ formatPhoneNumberWithCode),
/* harmony export */   getCountryCodesByIso: () => (/* binding */ getCountryCodesByIso),
/* harmony export */   getCountryFromPhoneNumber: () => (/* binding */ getCountryFromPhoneNumber)
/* harmony export */ });
const PATTERN_PLACEHOLDER = 'X';
const DEFAULT_PATTERN = 'XXX XXX XXX XXX';
function getCountryCodesByIso(phoneCodeList, iso) {
  return phoneCodeList.filter(country => country.iso2 === iso);
}
function getCountryFromPhoneNumber(phoneCodeList, input = '') {
  let phoneNumber = input.replace(/[^\d+]+/g, '');
  if (phoneNumber.startsWith('+')) {
    phoneNumber = phoneNumber.substr(1);
  }
  const possibleCountries = phoneCodeList.filter(country => phoneNumber.startsWith(country.countryCode));
  const codesWithPrefix = possibleCountries.map(country => (country.prefixes || ['']).map(prefix => {
    return {
      code: `${country.countryCode}${prefix}`,
      country
    };
  })).flat();
  const bestMatches = codesWithPrefix.filter(({
    code
  }) => phoneNumber.startsWith(code)).sort((a, b) => a.code.length - b.code.length);
  return bestMatches[bestMatches.length - 1]?.country;
}
function formatPhoneNumber(input, country) {
  if (!input) {
    return '';
  }
  let phoneNumber = input.replace(/[^\d]+/g, '');
  if (country) {
    phoneNumber = phoneNumber.substr(country.countryCode.length);
  } else if (input.startsWith('+')) {
    return input;
  }
  const pattern = getBestPattern(phoneNumber, country?.patterns);
  const result = []; // Result character array
  let j = 0; // Position inside pattern
  for (let i = 0; i < phoneNumber.length; i++) {
    while (pattern[j] !== PATTERN_PLACEHOLDER && j < pattern.length) {
      result.push(pattern[j]);
      if (pattern[j] === phoneNumber[i]) {
        // If pattern contains digits, move input position too
        i++;
        if (i === phoneNumber.length) break; // But don't overdo it, or it will insert full pattern unexpectedly
      }
      j++;
    }
    result.push(phoneNumber[i]); // For placeholder characters, setting current input digit
    j++;
  }
  return result.join('');
}
function getBestPattern(numberWithoutCode, patterns) {
  if (!patterns || patterns.length === 0) return DEFAULT_PATTERN;
  if (patterns.length === 1) return patterns[0];
  const defaultPattern = patterns.find(pattern => pattern.startsWith(PATTERN_PLACEHOLDER)) || DEFAULT_PATTERN;
  const bestMatches = patterns.filter(pattern => {
    const stripped = pattern.replace(/[^\dX]+/g, '');
    if (stripped.startsWith(PATTERN_PLACEHOLDER)) return false; // Don't consider default number format here
    for (let i = 0; i < numberWithoutCode.length; i++) {
      if (i > stripped.length - 1 || stripped[i] !== PATTERN_PLACEHOLDER && stripped[i] !== numberWithoutCode[i]) {
        return false;
      }
    }
    return true;
  });

  // Playing it safe: if not sure, use default for that region
  return bestMatches.length === 1 ? bestMatches[0] : defaultPattern;
}
function formatPhoneNumberWithCode(phoneCodeList, phoneNumber) {
  if (!phoneNumber) {
    return '';
  }
  const numberWithPlus = phoneNumber.startsWith('+') ? phoneNumber : `+${phoneNumber}`;
  const country = getCountryFromPhoneNumber(phoneCodeList, numberWithPlus);
  if (!country) {
    return numberWithPlus;
  }
  return `+${country.countryCode} ${formatPhoneNumber(numberWithPlus, country)}`;
}

/***/ }),

/***/ "./src/util/prettyCodeLanguageNames.ts":
/*!*********************************************!*\
  !*** ./src/util/prettyCodeLanguageNames.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getPrettyCodeLanguageName: () => (/* binding */ getPrettyCodeLanguageName)
/* harmony export */ });
const PRETTY_BY_ALIAS = {
  js: 'JavaScript',
  javascript: 'JavaScript',
  ts: 'TypeScript',
  typescript: 'TypeScript',
  python: 'Python',
  py: 'Python',
  go: 'Go',
  rust: 'Rust',
  func: 'FunC',
  c: 'C',
  'c++': 'C++',
  cpp: 'C++',
  fortran: 'Fortran',
  f90: 'Fortran',
  f: 'Fortran',
  java: 'Java',
  sql: 'SQL',
  swift: 'Swift',
  'objective-c': 'Objective-C',
  kotlin: 'Kotlin',
  ruby: 'Ruby',
  rb: 'Ruby',
  php: 'PHP',
  perl: 'Perl',
  bash: 'Bash',
  sh: 'Shell',
  markdown: 'Markdown',
  'c#': 'C#',
  cs: 'C#',
  json: 'JSON',
  yaml: 'YAML',
  yml: 'YAML',
  solidity: 'Solidity',
  sol: 'Solidity',
  tl: 'TL'
};
function getPrettyCodeLanguageName(codeLanguage) {
  const prettyLangName = PRETTY_BY_ALIAS[codeLanguage.toLowerCase()];
  return prettyLangName ?? codeLanguage;
}

/***/ }),

/***/ "./src/util/primitives/LimitedMap.ts":
/*!*******************************************!*\
  !*** ./src/util/primitives/LimitedMap.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LimitedMap)
/* harmony export */ });
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * A Map that has a limited size. When the limit is reached, the oldest entry is removed.
 * Ignores last access time, only cares about insertion order.
 */
class LimitedMap {
  constructor(limit) {
    this.limit = limit;
    _defineProperty(this, "map", void 0);
    _defineProperty(this, "insertionQueue", void 0);
    this.map = new Map();
    this.insertionQueue = new Set();
  }
  get(key) {
    return this.map.get(key);
  }
  set(key, value) {
    if (this.map.size === this.limit) {
      const keyToRemove = Array.from(this.insertionQueue).shift();
      if (keyToRemove) {
        this.map.delete(keyToRemove);
        this.insertionQueue.delete(keyToRemove);
      }
    }
    this.map.set(key, value);
    this.insertionQueue.add(key);
    return this;
  }
  has(key) {
    return this.map.has(key);
  }
  delete(key) {
    const result = this.map.delete(key);
    if (result) {
      this.insertionQueue.delete(key);
    }
    return result;
  }
  clear() {
    this.map.clear();
    this.insertionQueue.clear();
  }
  forEach(callbackfn, thisArg) {
    this.map.forEach(callbackfn, thisArg);
  }
  get size() {
    return this.map.size;
  }
  get [Symbol.toStringTag]() {
    return this.map[Symbol.toStringTag];
  }
  [Symbol.iterator]() {
    return this.map[Symbol.iterator]();
  }
  entries() {
    return this.map.entries();
  }
  keys() {
    return this.map.keys();
  }
  values() {
    return this.map.values();
  }
}

/***/ }),

/***/ "./src/util/replaceWithTeact.ts":
/*!**************************************!*\
  !*** ./src/util/replaceWithTeact.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   replaceInStringsWithTeact: () => (/* binding */ replaceInStringsWithTeact),
/* harmony export */   replaceWithTeact: () => (/* binding */ replaceWithTeact)
/* harmony export */ });
function replaceWithTeact(input, searchValue, replaceValue) {
  const parts = input.split(searchValue);
  const [firstElement, ...rest] = parts;
  return rest.reduce((acc, curr) => acc.concat(replaceValue, curr), [firstElement]).filter(Boolean);
}
function replaceInStringsWithTeact(input, searchValue, replaceValue) {
  return input.flatMap(curr => {
    if (typeof curr === 'string') return replaceWithTeact(curr, searchValue, replaceValue);
    return curr;
  }, []);
}

/***/ }),

/***/ "./src/util/requestActionTimeout.ts":
/*!******************************************!*\
  !*** ./src/util/requestActionTimeout.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ requestActionTimeout)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");

const callbacks = new Map();

// TODO Pass callbacks to the master tab. Sync them on master change
function requestActionTimeout(action, timeout) {
  const name = action.action;
  clearTimeout(callbacks.get(name));
  const timerId = window.setTimeout(() => {
    // @ts-ignore
    (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)()[name](action.payload);
  }, timeout);
  callbacks.set(name, timerId);
}

/***/ }),

/***/ "./src/util/routing.ts":
/*!*****************************!*\
  !*** ./src/util/routing.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clearWebTokenAuth: () => (/* binding */ clearWebTokenAuth),
/* harmony export */   createLocationHash: () => (/* binding */ createLocationHash),
/* harmony export */   createMessageHashUrl: () => (/* binding */ createMessageHashUrl),
/* harmony export */   parseInitialLocationHash: () => (/* binding */ parseInitialLocationHash),
/* harmony export */   parseLocationHash: () => (/* binding */ parseLocationHash),
/* harmony export */   resetInitialLocationHash: () => (/* binding */ resetInitialLocationHash),
/* harmony export */   resetLocationHash: () => (/* binding */ resetLocationHash)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");


let parsedInitialLocationHash;
let messageHash;
let isAlreadyParsed = false;
let initialLocationHash = window.location.hash;
function resetInitialLocationHash() {
  isAlreadyParsed = false;
  messageHash = undefined;
  parsedInitialLocationHash = undefined;
  initialLocationHash = '';
}
function resetLocationHash() {
  window.location.hash = '';
}
const createLocationHash = (chatId, type, threadId) => {
  const displayType = type === 'thread' ? undefined : type;
  const parts = threadId === _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID ? [chatId, displayType] : [chatId, threadId, displayType];
  return parts.filter(Boolean).join('_');
};
function parseLocationHash(currentUserId) {
  parseInitialLocationHash();
  if (!messageHash) return undefined;
  const parts = messageHash.split('_');
  let chatId;
  let type;
  let threadId;
  if (parts.length === 1) {
    chatId = parts[0];
  } else if (parts.length === 2) {
    const isType = ['thread', 'pinned', 'scheduled'].includes(parts[1]);
    chatId = parts[0];
    type = isType ? parts[1] : 'thread';
    threadId = !isType ? parts[1] : undefined;
  } else if (parts.length >= 3) {
    [chatId, threadId, type] = parts;
  }
  if (!chatId?.match(/^-?\d+$/)) return undefined;
  const isType = ['thread', 'pinned', 'scheduled'].includes(type);
  const castedThreadId = (chatId === currentUserId ? threadId : Number(threadId)) || _api_types__WEBPACK_IMPORTED_MODULE_0__.MAIN_THREAD_ID;
  return {
    chatId,
    type: type && isType ? type : 'thread',
    threadId: castedThreadId
  };
}
const createMessageHashUrl = (chatId, type, threadId) => {
  const url = new URL(window.location.href);
  url.hash = createLocationHash(chatId, type, threadId);
  return url.href;
};
function parseInitialLocationHash() {
  if (parsedInitialLocationHash) return parsedInitialLocationHash;
  if (isAlreadyParsed) return undefined;
  const locationHash = getInitialLocationHash();
  if (!locationHash) return undefined;
  let parsedHash = locationHash.replace(/^#/, '');
  if (parsedHash.includes('?')) {
    [messageHash, parsedHash] = parsedHash.split('?');
    if (!_config__WEBPACK_IMPORTED_MODULE_1__.IS_MOCKED_CLIENT) {
      window.location.hash = messageHash;
    }
  } else if (parsedHash.includes('=')) {
    if (!_config__WEBPACK_IMPORTED_MODULE_1__.IS_MOCKED_CLIENT) {
      window.location.hash = '';
    }
  }
  parsedInitialLocationHash = parsedHash.includes('=') ? parsedHash.split('&').reduce((acc, cur) => {
    const [key, value] = cur.split('=');
    acc[key] = value;
    return acc;
  }, {}) : undefined;
  isAlreadyParsed = true;
  if (!parsedInitialLocationHash) {
    messageHash = parsedHash;
  }
  return parsedInitialLocationHash;
}
function clearWebTokenAuth() {
  if (!parsedInitialLocationHash) return;
  delete parsedInitialLocationHash.tgWebAuthToken;
}
function getInitialLocationHash() {
  return initialLocationHash;
}

/***/ }),

/***/ "./src/util/safeExec.ts":
/*!******************************!*\
  !*** ./src/util/safeExec.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ safeExec)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _handleError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./handleError */ "./src/util/handleError.ts");


const SAFE_EXEC_ENABLED = !_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG_MORE;
function safeExec(cb, rescue, always) {
  if (!SAFE_EXEC_ENABLED) {
    return cb();
  }
  try {
    return cb();
  } catch (err) {
    rescue?.(err);
    (0,_handleError__WEBPACK_IMPORTED_MODULE_1__.handleError)(err);
    return undefined;
  } finally {
    always?.();
  }
}

/***/ }),

/***/ "./src/util/safePlay.ts":
/*!******************************!*\
  !*** ./src/util/safePlay.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getIsVideoPlaying: () => (/* binding */ getIsVideoPlaying)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");

const safePlay = mediaEl => {
  mediaEl.play().catch(err => {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn(err, mediaEl);
    }
  });
};
const getIsVideoPlaying = video => {
  return video.currentTime > 0 && !video.paused && !video.ended && video.readyState > 2;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (safePlay);

/***/ }),

/***/ "./src/util/schedulers.ts":
/*!********************************!*\
  !*** ./src/util/schedulers.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debounce: () => (/* binding */ debounce),
/* harmony export */   fastRaf: () => (/* binding */ fastRaf),
/* harmony export */   onBeforeUnload: () => (/* binding */ onBeforeUnload),
/* harmony export */   onIdle: () => (/* binding */ onIdle),
/* harmony export */   onTickEnd: () => (/* binding */ onTickEnd),
/* harmony export */   pause: () => (/* binding */ pause),
/* harmony export */   rafPromise: () => (/* binding */ rafPromise),
/* harmony export */   throttle: () => (/* binding */ throttle),
/* harmony export */   throttleWith: () => (/* binding */ throttleWith),
/* harmony export */   throttleWithTickEnd: () => (/* binding */ throttleWithTickEnd)
/* harmony export */ });
function debounce(fn, ms, shouldRunFirst = true, shouldRunLast = true) {
  let waitingTimeout;
  return (...args) => {
    if (waitingTimeout) {
      clearTimeout(waitingTimeout);
      waitingTimeout = undefined;
    } else if (shouldRunFirst) {
      fn(...args);
    }

    // eslint-disable-next-line no-restricted-globals
    waitingTimeout = self.setTimeout(() => {
      if (shouldRunLast) {
        fn(...args);
      }
      waitingTimeout = undefined;
    }, ms);
  };
}
function throttle(fn, ms, shouldRunFirst = true) {
  let interval;
  let isPending;
  let args;
  return (..._args) => {
    isPending = true;
    args = _args;
    if (!interval) {
      if (shouldRunFirst) {
        isPending = false;
        fn(...args);
      }

      // eslint-disable-next-line no-restricted-globals
      interval = self.setInterval(() => {
        if (!isPending) {
          // eslint-disable-next-line no-restricted-globals
          self.clearInterval(interval);
          interval = undefined;
          return;
        }
        isPending = false;
        fn(...args);
      }, ms);
    }
  };
}
function throttleWithTickEnd(fn) {
  return throttleWith(onTickEnd, fn);
}
function throttleWith(schedulerFn, fn) {
  let waiting = false;
  let args;
  return (..._args) => {
    args = _args;
    if (!waiting) {
      waiting = true;
      schedulerFn(() => {
        waiting = false;
        fn(...args);
      });
    }
  };
}
const pause = ms => new Promise(resolve => {
  setTimeout(() => resolve(), ms);
});
function rafPromise() {
  return new Promise(resolve => {
    fastRaf(resolve);
  });
}
const FAST_RAF_TIMEOUT_FALLBACK_MS = 35; // < 30 FPS

let fastRafCallbacks;
let fastRafFallbackCallbacks;
let fastRafFallbackTimeout;

// May result in an immediate execution if called from another RAF callback which was scheduled
// (and therefore is executed) earlier than RAF callback scheduled by `fastRaf`
function fastRaf(callback, withTimeoutFallback = false) {
  if (!fastRafCallbacks) {
    fastRafCallbacks = new Set([callback]);
    requestAnimationFrame(() => {
      const currentCallbacks = fastRafCallbacks;
      fastRafCallbacks = undefined;
      fastRafFallbackCallbacks = undefined;
      if (fastRafFallbackTimeout) {
        clearTimeout(fastRafFallbackTimeout);
        fastRafFallbackTimeout = undefined;
      }
      currentCallbacks.forEach(cb => cb());
    });
  } else {
    fastRafCallbacks.add(callback);
  }
  if (withTimeoutFallback) {
    if (!fastRafFallbackCallbacks) {
      fastRafFallbackCallbacks = new Set([callback]);
    } else {
      fastRafFallbackCallbacks.add(callback);
    }
    if (!fastRafFallbackTimeout) {
      fastRafFallbackTimeout = window.setTimeout(() => {
        const currentTimeoutCallbacks = fastRafFallbackCallbacks;
        if (fastRafCallbacks) {
          currentTimeoutCallbacks.forEach(fastRafCallbacks.delete, fastRafCallbacks);
        }
        fastRafFallbackCallbacks = undefined;
        if (fastRafFallbackTimeout) {
          clearTimeout(fastRafFallbackTimeout);
          fastRafFallbackTimeout = undefined;
        }
        currentTimeoutCallbacks.forEach(cb => cb());
      }, FAST_RAF_TIMEOUT_FALLBACK_MS);
    }
  }
}
let onTickEndCallbacks;
function onTickEnd(callback) {
  if (!onTickEndCallbacks) {
    onTickEndCallbacks = [callback];
    Promise.resolve().then(() => {
      const currentCallbacks = onTickEndCallbacks;
      onTickEndCallbacks = undefined;
      currentCallbacks.forEach(cb => cb());
    });
  } else {
    onTickEndCallbacks.push(callback);
  }
}
const IDLE_TIMEOUT = 500;
let onIdleCallbacks;
function onIdle(callback) {
  // eslint-disable-next-line no-restricted-globals
  if (!self.requestIdleCallback) {
    onTickEnd(callback);
    return;
  }
  if (!onIdleCallbacks) {
    onIdleCallbacks = [callback];
    requestIdleCallback(deadline => {
      const currentCallbacks = onIdleCallbacks;
      onIdleCallbacks = undefined;
      while (currentCallbacks.length) {
        const cb = currentCallbacks.shift();
        cb();
        if (!deadline.timeRemaining()) break;
      }
      if (currentCallbacks.length) {
        if (onIdleCallbacks) {
          // Prepend the remaining callbacks if the next pass is already planned
          onIdleCallbacks = currentCallbacks.concat(onIdleCallbacks);
        } else {
          currentCallbacks.forEach(onIdle);
        }
      }
    }, {
      timeout: IDLE_TIMEOUT
    });
  } else {
    onIdleCallbacks.push(callback);
  }
}
let beforeUnloadCallbacks;
function onBeforeUnload(callback, isLast = false) {
  if (!beforeUnloadCallbacks) {
    beforeUnloadCallbacks = [];
    // eslint-disable-next-line no-restricted-globals
    self.addEventListener('beforeunload', () => {
      beforeUnloadCallbacks.forEach(cb => cb());
    });
  }
  if (isLast) {
    beforeUnloadCallbacks.push(callback);
  } else {
    beforeUnloadCallbacks.unshift(callback);
  }
  return () => {
    beforeUnloadCallbacks = beforeUnloadCallbacks.filter(cb => cb !== callback);
  };
}

/***/ }),

/***/ "./src/util/searchWords.ts":
/*!*********************************!*\
  !*** ./src/util/searchWords.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ searchWords),
/* harmony export */   prepareSearchWordsForNeedle: () => (/* binding */ prepareSearchWordsForNeedle)
/* harmony export */ });
let RE_NOT_LETTER;
try {
  RE_NOT_LETTER = /[^\p{L}\p{M}]+/ui;
} catch (e) {
  // Support for older versions of firefox
  RE_NOT_LETTER = /[^\wа-яёґєії]+/i;
}
function searchWords(haystack, needle) {
  if (!haystack || !needle) {
    return false;
  }
  const needleWords = typeof needle === 'string' ? needle.toLowerCase().split(RE_NOT_LETTER) : needle;
  const haystackLower = haystack.toLowerCase();

  // @optimization
  if (needleWords.length === 1 && !haystackLower.includes(needleWords[0])) {
    return false;
  }
  let haystackWords;
  return needleWords.every(needleWord => {
    if (!haystackLower.includes(needleWord)) {
      return false;
    }
    if (!haystackWords) {
      haystackWords = haystackLower.split(RE_NOT_LETTER);
    }
    return haystackWords.some(haystackWord => haystackWord.startsWith(needleWord));
  });
}
function prepareSearchWordsForNeedle(needle) {
  const needleWords = needle.toLowerCase().split(RE_NOT_LETTER);
  return haystack => searchWords(haystack, needleWords);
}

/***/ }),

/***/ "./src/util/serverTime.ts":
/*!********************************!*\
  !*** ./src/util/serverTime.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getServerTime: () => (/* binding */ getServerTime),
/* harmony export */   getServerTimeOffset: () => (/* binding */ getServerTimeOffset),
/* harmony export */   setServerTimeOffset: () => (/* binding */ setServerTimeOffset)
/* harmony export */ });
let serverTimeOffset = 0;
function setServerTimeOffset(_serverTimeOffset) {
  serverTimeOffset = _serverTimeOffset;
}
function getServerTimeOffset() {
  return serverTimeOffset;
}
function getServerTime() {
  return Math.floor(Date.now() / 1000) + serverTimeOffset;
}

/***/ }),

/***/ "./src/util/sessions.ts":
/*!******************************!*\
  !*** ./src/util/sessions.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clearStoredSession: () => (/* binding */ clearStoredSession),
/* harmony export */   hasStoredSession: () => (/* binding */ hasStoredSession),
/* harmony export */   importTestSession: () => (/* binding */ importTestSession),
/* harmony export */   loadStoredSession: () => (/* binding */ loadStoredSession),
/* harmony export */   storeSession: () => (/* binding */ storeSession)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");

const DC_IDS = [1, 2, 3, 4, 5];
function hasStoredSession() {
  if (checkSessionLocked()) {
    return true;
  }
  const userAuthJson = localStorage.getItem(_config__WEBPACK_IMPORTED_MODULE_0__.SESSION_USER_KEY);
  if (!userAuthJson) {
    return false;
  }
  try {
    const userAuth = JSON.parse(userAuthJson);
    return Boolean(userAuth && userAuth.id && userAuth.dcID);
  } catch (err) {
    // Do nothing.
    return false;
  }
}
function storeSession(sessionData, currentUserId) {
  const {
    mainDcId,
    keys,
    hashes,
    isTest
  } = sessionData;
  localStorage.setItem(_config__WEBPACK_IMPORTED_MODULE_0__.SESSION_USER_KEY, JSON.stringify({
    dcID: mainDcId,
    id: currentUserId,
    test: isTest
  }));
  localStorage.setItem('dc', String(mainDcId));
  Object.keys(keys).map(Number).forEach(dcId => {
    localStorage.setItem(`dc${dcId}_auth_key`, JSON.stringify(keys[dcId]));
  });
  if (hashes) {
    Object.keys(hashes).map(Number).forEach(dcId => {
      localStorage.setItem(`dc${dcId}_hash`, JSON.stringify(hashes[dcId]));
    });
  }
}
function clearStoredSession() {
  [_config__WEBPACK_IMPORTED_MODULE_0__.SESSION_USER_KEY, 'dc', ...DC_IDS.map(dcId => `dc${dcId}_auth_key`), ...DC_IDS.map(dcId => `dc${dcId}_hash`), ...DC_IDS.map(dcId => `dc${dcId}_server_salt`)].forEach(key => {
    localStorage.removeItem(key);
  });
}
function loadStoredSession() {
  if (!hasStoredSession()) {
    return undefined;
  }
  const userAuth = JSON.parse(localStorage.getItem(_config__WEBPACK_IMPORTED_MODULE_0__.SESSION_USER_KEY));
  if (!userAuth) {
    return undefined;
  }
  const mainDcId = Number(userAuth.dcID);
  const isTest = userAuth.test;
  const keys = {};
  const hashes = {};
  DC_IDS.forEach(dcId => {
    try {
      const key = localStorage.getItem(`dc${dcId}_auth_key`);
      if (key) {
        keys[dcId] = JSON.parse(key);
      }
      const hash = localStorage.getItem(`dc${dcId}_hash`);
      if (hash) {
        hashes[dcId] = JSON.parse(hash);
      }
    } catch (err) {
      if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
        // eslint-disable-next-line no-console
        console.warn('Failed to load stored session', err);
      }
      // Do nothing.
    }
  });
  if (!Object.keys(keys).length) return undefined;
  return {
    mainDcId,
    keys,
    hashes,
    isTest
  };
}
function importTestSession() {
  const sessionJson = null;
  try {
    const sessionData = JSON.parse(sessionJson);
    storeSession(sessionData, sessionData.userId);
  } catch (err) {
    if (_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('Failed to load test session', err);
    }
  }
}
function checkSessionLocked() {
  return localStorage.getItem(_config__WEBPACK_IMPORTED_MODULE_0__.IS_SCREEN_LOCKED_CACHE_KEY) === 'true';
}

/***/ }),

/***/ "./src/util/setupServiceWorker.ts":
/*!****************************************!*\
  !*** ./src/util/setupServiceWorker.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _deeplink__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./deeplink */ "./src/util/deeplink.ts");
/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./files */ "./src/util/files.ts");
/* harmony import */ var _notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifications */ "./src/util/notifications.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");






const IGNORE_WORKER_PATH = '/k/';
function handleWorkerMessage(e) {
  const action = e.data;
  if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG_MORE) {
    // eslint-disable-next-line no-console
    console.log('[SW] Message from worker', action);
  }
  if (!action.type) return;
  const dispatch = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)();
  const payload = action.payload;
  switch (action.type) {
    case 'focusMessage':
      dispatch.focusMessage?.(payload);
      break;
    case 'playNotificationSound':
      (0,_notifications__WEBPACK_IMPORTED_MODULE_4__.playNotifySoundDebounced)(action.payload.id);
      break;
    case 'share':
      dispatch.openChatWithDraft({
        text: (0,_deeplink__WEBPACK_IMPORTED_MODULE_2__.formatShareText)(payload.url, payload.text, payload.title),
        files: (0,_files__WEBPACK_IMPORTED_MODULE_3__.validateFiles)(payload.files)
      });
      break;
  }
}
function subscribeToWorker() {
  navigator.serviceWorker.removeEventListener('message', handleWorkerMessage);
  navigator.serviceWorker.addEventListener('message', handleWorkerMessage);
  // Notify web worker that client is ready to receive messages
  (0,_notifications__WEBPACK_IMPORTED_MODULE_4__.notifyClientReady)();
}
if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_SERVICE_WORKER_SUPPORTED) {
  window.addEventListener('load', async () => {
    try {
      const controller = navigator.serviceWorker.controller;
      if (!controller || controller.scriptURL.includes(IGNORE_WORKER_PATH)) {
        const registrations = await navigator.serviceWorker.getRegistrations();
        const ourRegistrations = registrations.filter(r => !r.scope.includes(IGNORE_WORKER_PATH));
        if (ourRegistrations.length) {
          if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
            // eslint-disable-next-line no-console
            console.log('[SW] Hard reload detected, re-enabling Service Worker');
          }
          await Promise.all(ourRegistrations.map(r => r.unregister()));
        }
      }
      await navigator.serviceWorker.register(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("src_serviceWorker_index_ts"), __webpack_require__.b));
      if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
        // eslint-disable-next-line no-console
        console.log('[SW] ServiceWorker registered');
      }
      await navigator.serviceWorker.ready;

      // Wait for registration to be available
      await navigator.serviceWorker.getRegistration();
      if (navigator.serviceWorker.controller) {
        if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
          // eslint-disable-next-line no-console
          console.log('[SW] ServiceWorker ready');
        }
        subscribeToWorker();
      } else {
        if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
          // eslint-disable-next-line no-console
          console.error('[SW] ServiceWorker not available');
        }
        if (!_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_IOS && !_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_ANDROID && !_config__WEBPACK_IMPORTED_MODULE_1__.IS_TEST) {
          (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().showDialog?.({
            data: {
              message: 'SERVICE_WORKER_DISABLED',
              hasErrorKey: true
            }
          });
        }
      }
    } catch (err) {
      if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
        // eslint-disable-next-line no-console
        console.error('[SW] ServiceWorker registration failed: ', err);
      }
    }
  });
  window.addEventListener('focus', async () => {
    await navigator.serviceWorker.ready;
    subscribeToWorker();
  });
}

/***/ }),

/***/ "./src/util/signals.ts":
/*!*****************************!*\
  !*** ./src/util/signals.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cleanupEffect: () => (/* binding */ cleanupEffect),
/* harmony export */   createSignal: () => (/* binding */ createSignal),
/* harmony export */   isSignal: () => (/* binding */ isSignal)
/* harmony export */ });
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callbacks */ "./src/util/callbacks.ts");

const SIGNAL_MARK = Symbol('SIGNAL_MARK');
function isSignal(obj) {
  return typeof obj === 'function' && SIGNAL_MARK in obj;
}

// A shorthand to unsubscribe effect from all signals
const unsubscribesByEffect = new Map();
let currentEffect;
function createSignal(defaultValue) {
  const state = {
    value: defaultValue,
    effects: (0,_callbacks__WEBPACK_IMPORTED_MODULE_0__.createCallbackManager)()
  };
  function subscribe(effect) {
    const unsubscribe = state.effects.addCallback(effect);
    if (!unsubscribesByEffect.has(effect)) {
      unsubscribesByEffect.set(effect, new Set([unsubscribe]));
    } else {
      unsubscribesByEffect.get(effect).add(unsubscribe);
    }
    return () => {
      unsubscribe();
      const unsubscribes = unsubscribesByEffect.get(effect);
      unsubscribes.delete(unsubscribe);
      if (!unsubscribes.size) {
        unsubscribesByEffect.delete(effect);
      }
    };
  }
  function once(effect) {
    const unsub = subscribe(() => {
      unsub();
      effect();
    });
    return unsub;
  }
  function getter() {
    if (currentEffect) {
      subscribe(currentEffect);
    }
    return state.value;
  }
  function setter(newValue) {
    if (state.value === newValue) {
      return;
    }
    state.value = newValue;
    state.effects.runCallbacks();
  }
  const signal = Object.assign(getter, {
    [SIGNAL_MARK]: SIGNAL_MARK,
    subscribe,
    once
  });
  return [signal, setter];
}
function cleanupEffect(effect) {
  unsubscribesByEffect.get(effect)?.forEach(unsubscribe => {
    unsubscribe();
  });
  unsubscribesByEffect.delete(effect);
}

/***/ }),

/***/ "./src/util/stopEvent.ts":
/*!*******************************!*\
  !*** ./src/util/stopEvent.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const stopEvent = e => {
  e.stopPropagation();
  e.preventDefault();
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stopEvent);

/***/ }),

/***/ "./src/util/svgController.ts":
/*!***********************************!*\
  !*** ./src/util/svgController.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSvgDefinition: () => (/* binding */ addSvgDefinition),
/* harmony export */   removeSvgDefinition: () => (/* binding */ removeSvgDefinition)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _element_jsxToHtml__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element/jsxToHtml */ "./src/util/element/jsxToHtml.ts");
/* harmony import */ var _generateUniqueId__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./generateUniqueId */ "./src/util/generateUniqueId.ts");




const DEFINITION_MAP = new Map();
let defs;
function init() {
  if (defs) return;
  const container = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_0__.SVG_NAMESPACE, 'svg');
  container.setAttribute('width', '0');
  container.setAttribute('height', '0');
  container.setAttribute('viewBox', '0 0 1 1');
  container.classList.add('svg-definitions');
  document.body.appendChild(container);
  defs = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_0__.SVG_NAMESPACE, 'defs');
  container.appendChild(defs);
}
function appendElement(element) {
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
    if (!defs) init();
    defs.appendChild(element);
  });
}
function addSvgDefinition(element, id) {
  id ?? (id = (0,_generateUniqueId__WEBPACK_IMPORTED_MODULE_3__["default"])());
  element.props.id = id;
  const htmlElement = (0,_element_jsxToHtml__WEBPACK_IMPORTED_MODULE_2__["default"])(element)[0];
  DEFINITION_MAP.set(element.props.id, htmlElement);
  appendElement(htmlElement);
  return id;
}
function removeSvgDefinition(id) {
  const element = DEFINITION_MAP.get(id);
  if (element) {
    element.remove();
    DEFINITION_MAP.delete(id);
  }
}

/***/ }),

/***/ "./src/util/swipeController.ts":
/*!*************************************!*\
  !*** ./src/util/swipeController.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   allowSwipeControlForTransition: () => (/* binding */ allowSwipeControlForTransition),
/* harmony export */   captureControlledSwipe: () => (/* binding */ captureControlledSwipe)
/* harmony export */ });
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./animation */ "./src/util/animation.ts");
/* harmony import */ var _captureEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./captureEvents */ "./src/util/captureEvents.ts");
/* harmony import */ var _cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cssAnimationEndListeners */ "./src/util/cssAnimationEndListeners.ts");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./math */ "./src/util/math.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");






const INERTIA_DURATION = 300;
const INERTIA_EASING = _animation__WEBPACK_IMPORTED_MODULE_1__.timingFunctions.easeOutCubic;
let isSwipeActive = false;
let swipeOffsets;
let onDrag;
let onRelease;
let cancelCurrentReleaseAnimation;
function captureControlledSwipe(element, options) {
  return (0,_captureEvents__WEBPACK_IMPORTED_MODULE_2__.captureEvents)(element, {
    excludedClosestSelector: options.excludedClosestSelector,
    selectorToPreventScroll: options.selectorToPreventScroll,
    swipeThreshold: 10,
    onSwipe(e, direction, offsets) {
      if (direction === _captureEvents__WEBPACK_IMPORTED_MODULE_2__.SwipeDirection.Left) {
        options.onSwipeLeftStart?.();
      } else if (direction === _captureEvents__WEBPACK_IMPORTED_MODULE_2__.SwipeDirection.Right) {
        options.onSwipeRightStart?.();
      } else {
        return false;
      }
      if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_IOS) {
        isSwipeActive = true;
        swipeOffsets = offsets;
      }
      return true;
    },
    onDrag(e, captureEvent, offsets) {
      if (!isSwipeActive) return;
      onDrag?.(offsets);
    },
    onRelease() {
      if (!isSwipeActive) return;
      isSwipeActive = false;
      onRelease?.(options.onCancel);
      onDrag = undefined;
      onRelease = undefined;
    }
  });
}
function allowSwipeControlForTransition(currentSlide, nextSlide, onCancelForTransition) {
  cancelCurrentReleaseAnimation?.();
  if (!isSwipeActive) return;
  const targetPosition = extractAnimationEndPosition(currentSlide);
  if (!targetPosition) return;
  currentSlide.getAnimations().forEach(a => a.pause());
  nextSlide.getAnimations().forEach(a => a.pause());
  currentSlide.style.animationTimingFunction = 'linear';
  nextSlide.style.animationTimingFunction = 'linear';
  let currentDirection;
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMeasure)(() => {
    const computedStyle = getComputedStyle(currentSlide);
    const initialPositionPx = extractPositionFromMatrix(computedStyle.transform, targetPosition.axis);
    const targetPositionPx = targetPosition.units === 'px' ? targetPosition.value : targetPosition.value / 100 * (targetPosition.axis === 'X' ? currentSlide.offsetWidth : currentSlide.offsetHeight);
    const distance = targetPositionPx - initialPositionPx;
    let progress = 0;
    onDrag = ({
      dragOffsetX,
      dragOffsetY
    }) => {
      const dragOffset = targetPosition.axis === 'X' ? dragOffsetX - swipeOffsets.dragOffsetX : dragOffsetY - swipeOffsets.dragOffsetY;
      const newProgress = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(dragOffset / distance, 0, 1);
      currentDirection = newProgress > progress ? 1 : -1;
      progress = newProgress;
      updateAnimationProgress([currentSlide, nextSlide], progress);
    };
    onRelease = onCancelForClient => {
      const isRevertSwipe = currentDirection === -1;
      function cleanup() {
        currentSlide.getAnimations().forEach(a => a.cancel());
        nextSlide.getAnimations().forEach(a => a.cancel());
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
          currentSlide.style.animationTimingFunction = '';
          nextSlide.style.animationTimingFunction = '';
        });
      }
      if (!isRevertSwipe) {
        // For some reason animations are not cleared when CSS class is removed
        (0,_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_3__.waitForAnimationEnd)(currentSlide, cleanup);
      }
      cancelCurrentReleaseAnimation = (0,_animation__WEBPACK_IMPORTED_MODULE_1__.animateNumber)({
        from: progress,
        to: isRevertSwipe ? 0 : 1,
        duration: INERTIA_DURATION,
        timing: INERTIA_EASING,
        onUpdate(releaseProgress) {
          updateAnimationProgress([currentSlide, nextSlide], releaseProgress);
        },
        onEnd(isCanceled = false) {
          cancelCurrentReleaseAnimation = undefined;
          if (isCanceled || isRevertSwipe) {
            cleanup();
            onCancelForTransition();
            onCancelForClient();
          }
        }
      });
    };
  });
}
function updateAnimationProgress(elements, progress) {
  elements.map(e => e.getAnimations()).flat().forEach(animation => {
    animation.currentTime = animation.effect.getTiming().duration * progress;
  });
}
function extractAnimationEndPosition(element) {
  for (const animation of element.getAnimations()) {
    if (!(animation.effect instanceof KeyframeEffect)) continue;
    for (const keyframe of animation.effect.getKeyframes()) {
      if (keyframe.offset !== 1 || !keyframe.transform) continue;
      const position = extractPositionFromTransform(keyframe.transform);
      if (position) {
        return position;
      }
    }
  }
  return undefined;
}
function extractPositionFromTransform(transformRule) {
  const match = transformRule.match(/([XY])\((-?\d+)(%|px)\)/);
  if (!match) return undefined;
  return {
    axis: match[1],
    value: Number(match[2]),
    units: match[3]
  };
}
function extractPositionFromMatrix(transform, axis) {
  const matrix = transform.slice(7, -1).split(',').map(Number);
  return matrix[axis === 'X' ? 4 : 5];
}

/***/ }),

/***/ "./src/util/switchTheme.ts":
/*!*********************************!*\
  !*** ./src/util/switchTheme.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),
/* harmony export */   lerpRgb: () => (/* binding */ lerpRgb)
/* harmony export */ });
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _styles_themes_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/themes.json */ "./src/styles/themes.json");
/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./animation */ "./src/util/animation.ts");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./math */ "./src/util/math.ts");




let isInitialized = false;
const DECIMAL_PLACES = 3;
const HEX_COLOR_REGEX = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
const DURATION_MS = 200;
const ENABLE_ANIMATION_DELAY_MS = 500;
const RGB_VARIABLES = new Set(['--color-text', '--color-primary-shade', '--color-text-secondary', '--color-accent-own']);
const DISABLE_ANIMATION_CSS = `
.no-animations #root *,
.no-animations #root *::before,
.no-animations #root *::after {
  transition: none !important;
}`;
const colors = Object.keys(_styles_themes_json__WEBPACK_IMPORTED_MODULE_1__).map(property => ({
  property,
  colors: [hexToRgb(_styles_themes_json__WEBPACK_IMPORTED_MODULE_1__[property][0]), hexToRgb(_styles_themes_json__WEBPACK_IMPORTED_MODULE_1__[property][1])]
}));
const injectCss = css => {
  const style = document.createElement('style');
  style.textContent = css;
  document.head.appendChild(style);
  return () => {
    document.head.removeChild(style);
  };
};
const switchTheme = (theme, withAnimation) => {
  const themeClassName = `theme-${theme}`;
  if (document.documentElement.classList.contains(themeClassName)) {
    return;
  }
  const isDarkTheme = theme === 'dark';
  const shouldAnimate = isInitialized && withAnimation;
  const startIndex = isDarkTheme ? 0 : 1;
  const endIndex = isDarkTheme ? 1 : 0;
  const startAt = Date.now();
  const themeColorTag = document.querySelector('meta[name="theme-color"]');
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
    document.documentElement.classList.remove(`theme-${isDarkTheme ? 'light' : 'dark'}`);
    let uninjectCss;
    if (isInitialized) {
      uninjectCss = injectCss(DISABLE_ANIMATION_CSS);
      document.documentElement.classList.add('no-animations');
    }
    document.documentElement.classList.add(themeClassName);
    if (themeColorTag) {
      themeColorTag.setAttribute('content', isDarkTheme ? '#212121' : '#fff');
    }
    setTimeout(() => {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
        uninjectCss?.();
        document.documentElement.classList.remove('no-animations');
      });
    }, ENABLE_ANIMATION_DELAY_MS);
    isInitialized = true;
    if (shouldAnimate) {
      (0,_animation__WEBPACK_IMPORTED_MODULE_2__.animate)(() => {
        const t = Math.min((Date.now() - startAt) / DURATION_MS, 1);
        applyColorAnimationStep(startIndex, endIndex, transition(t));
        return t < 1;
      }, _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation);
    } else {
      applyColorAnimationStep(startIndex, endIndex);
    }
  });
};
function transition(t) {
  return 1 - (1 - t) ** 3.5;
}
function hexToRgb(hex) {
  const result = HEX_COLOR_REGEX.exec(hex);
  return {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16),
    a: result[4] !== undefined ? parseInt(result[4], 16) : undefined
  };
}
function lerpRgb(start, end, interpolationRatio) {
  const r = Math.round((0,_math__WEBPACK_IMPORTED_MODULE_3__.lerp)(start.r, end.r, interpolationRatio));
  const g = Math.round((0,_math__WEBPACK_IMPORTED_MODULE_3__.lerp)(start.g, end.g, interpolationRatio));
  const b = Math.round((0,_math__WEBPACK_IMPORTED_MODULE_3__.lerp)(start.b, end.b, interpolationRatio));
  const a = start.a !== undefined ? Math.round((0,_math__WEBPACK_IMPORTED_MODULE_3__.lerp)(start.a, end.a, interpolationRatio)) : undefined;
  return {
    r,
    g,
    b,
    a
  };
}
function applyColorAnimationStep(startIndex, endIndex, interpolationRatio = 1) {
  colors.forEach(({
    property,
    colors: propertyColors
  }) => {
    const {
      r,
      g,
      b,
      a
    } = lerpRgb(propertyColors[startIndex], propertyColors[endIndex], interpolationRatio);
    const roundedA = a !== undefined ? Math.round(a / 255 * 10 ** DECIMAL_PLACES) / 10 ** DECIMAL_PLACES : undefined;
    document.documentElement.style.setProperty(property, `rgb(${r},${g},${b}${roundedA ? `,${roundedA}` : ''})`);
    if (RGB_VARIABLES.has(property)) {
      document.documentElement.style.setProperty(`${property}-rgb`, `${r},${g},${b}`);
    }
  });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (switchTheme);

/***/ }),

/***/ "./src/util/systemTheme.ts":
/*!*********************************!*\
  !*** ./src/util/systemTheme.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSystemTheme: () => (/* binding */ getSystemTheme),
/* harmony export */   setSystemThemeChangeCallback: () => (/* binding */ setSystemThemeChangeCallback)
/* harmony export */ });
let systemThemeCache = window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
let themeChangeCallback;
function getSystemTheme() {
  return systemThemeCache;
}
function handleSystemThemeChange(e) {
  systemThemeCache = e.matches ? 'dark' : 'light';
  themeChangeCallback?.(systemThemeCache);
}
function setSystemThemeChangeCallback(callback) {
  themeChangeCallback = callback;
}
window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', handleSystemThemeChange);

/***/ }),

/***/ "./src/util/textFormat.ts":
/*!********************************!*\
  !*** ./src/util/textFormat.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatFileSize: () => (/* binding */ formatFileSize),
/* harmony export */   formatInteger: () => (/* binding */ formatInteger),
/* harmony export */   formatIntegerCompact: () => (/* binding */ formatIntegerCompact),
/* harmony export */   formatPercent: () => (/* binding */ formatPercent),
/* harmony export */   getFirstLetters: () => (/* binding */ getFirstLetters)
/* harmony export */ });
/* harmony import */ var _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/twemojiRegex */ "./src/lib/twemojiRegex.js");
/* harmony import */ var _emoji_fixNonStandardEmoji__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./emoji/fixNonStandardEmoji */ "./src/util/emoji/fixNonStandardEmoji.ts");
/* harmony import */ var _withCache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./withCache */ "./src/util/withCache.ts");



function formatInteger(value) {
  return String(value).replace(/\d(?=(\d{3})+$)/g, '$& ');
}
function formatFixedNumber(number) {
  const fixed = String(number.toFixed(1));
  if (fixed.substr(-2) === '.0') {
    return Math.floor(number);
  }
  return number.toFixed(1).replace('.', ',');
}
function formatIntegerCompact(views) {
  if (views < 1e3) {
    return views.toString();
  }
  if (views < 1e6) {
    return `${formatFixedNumber(views / 1e3)}K`;
  }
  return `${formatFixedNumber(views / 1e6)}M`;
}
function formatPercent(value, fractionDigits = 1) {
  return `${Number.isInteger(value) ? value : value.toFixed(fractionDigits)}%`;
}
const getFirstLetters = (0,_withCache__WEBPACK_IMPORTED_MODULE_2__["default"])((phrase, count = 2) => {
  return phrase.replace(/[.,!@#$%^&*()_+=\-`~[\]/\\{}:"|<>?]+/gi, '').trim().split(/\s+/).slice(0, count).map(word => {
    if (!word.length) return '';
    word = (0,_emoji_fixNonStandardEmoji__WEBPACK_IMPORTED_MODULE_1__["default"])(word);
    const emojis = word.match(_lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_0__["default"]);
    if (emojis && word.startsWith(emojis[0])) {
      return emojis[0];
    }
    return word.match(/./u)[0].toUpperCase();
  }).join('');
});
const FILE_SIZE_UNITS = ['B', 'KB', 'MB', 'GB'];
function formatFileSize(lang, bytes, decimals = 1) {
  if (bytes === 0) {
    return lang('FileSize.B', 0);
  }
  const k = 1024;
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  const value = (bytes / k ** i).toFixed(Math.max(decimals, 0));
  return lang(`FileSize.${FILE_SIZE_UNITS[i]}`, value);
}

/***/ }),

/***/ "./src/util/theme.ts":
/*!***************************!*\
  !*** ./src/util/theme.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setVariable: () => (/* binding */ setVariable),
/* harmony export */   updatePeerColors: () => (/* binding */ updatePeerColors)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");


const GENERAL_VARIABLES = new Map();
const LIGHT_VARIABLES = new Map();
const DARK_VARIABLES = new Map();
const style = document.createElement('style');
document.head.appendChild(style);
function setVariable(name, lightValueOrGeneral, darkValue) {
  if (!darkValue) {
    GENERAL_VARIABLES.set(name, lightValueOrGeneral);
    LIGHT_VARIABLES.delete(name);
    DARK_VARIABLES.delete(name);
  } else {
    GENERAL_VARIABLES.delete(name);
    LIGHT_VARIABLES.set(name, lightValueOrGeneral);
    DARK_VARIABLES.set(name, darkValue);
  }
  scheduleVariableUpdate();
}
let isUpdateScheduled = false;
function scheduleVariableUpdate() {
  if (isUpdateScheduled) return;
  isUpdateScheduled = true;
  (0,_schedulers__WEBPACK_IMPORTED_MODULE_1__.fastRaf)(updateVariables);
}
function updateVariables() {
  const generalVariables = buildVariables(GENERAL_VARIABLES);
  const lightVariables = buildVariables(LIGHT_VARIABLES);
  const darkVariables = buildVariables(DARK_VARIABLES);
  style.textContent = `
    html {
      ${generalVariables}
    }

    html.theme-light {
      ${lightVariables}
    }

    html.theme-dark {
      ${darkVariables}
    }
  `;
}
function buildVariables(map) {
  return Array.from(map.entries()).map(([name, value]) => `--${name}: ${value};`).join(' ');
}
function updatePeerColors(peerColors) {
  setPeerColor('0', ['#D45246']);
  setPeerColor('1', ['#F68136']);
  setPeerColor('2', ['#6C61DF']);
  setPeerColor('3', ['#46BA43']);
  setPeerColor('4', ['#5CAFFA']);
  setPeerColor('5', ['#408ACF']);
  setPeerColor('6', ['#D95574']);
  Object.entries(peerColors).forEach(([key, value]) => {
    if (!value.colors) return;
    setPeerColor(key, value.colors, value.darkColors);
  });
}
function setPeerColor(n, colors, darkColors) {
  const mainLightColor = colors[0];
  const mainDarkColor = darkColors?.[0];
  if (!mainLightColor) return;
  const lightBgColor = `${mainLightColor}${_config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_BG_OPACITY}`;
  const darkBgColor = mainDarkColor ? `${mainDarkColor}${_config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_BG_OPACITY}` : undefined;
  const lightBgActiveColor = `${mainLightColor}${_config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_BG_ACTIVE_OPACITY}`;
  const darkBgActiveColor = mainDarkColor ? `${mainDarkColor}${_config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_BG_ACTIVE_OPACITY}` : undefined;
  setVariable(`color-peer-${n}`, mainLightColor, mainDarkColor);
  setVariable(`color-peer-bg-${n}`, lightBgColor, darkBgColor);
  setVariable(`color-peer-bg-active-${n}`, lightBgActiveColor, darkBgActiveColor);
  if (colors.length > 1) {
    const lightGradientColors = colors.map((color, i) => `${color} ${i * _config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_GRADIENT_STEP}px, ${color} ${(i + 1) * _config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_GRADIENT_STEP}px`);
    const darkGradientColors = darkColors?.map((color, i) => `${color} ${i * _config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_GRADIENT_STEP}px, ${color} ${(i + 1) * _config__WEBPACK_IMPORTED_MODULE_0__.PEER_COLOR_GRADIENT_STEP}px`);
    const lightGradient = `repeating-linear-gradient(-45deg, ${lightGradientColors.join(', ')})`;
    const darkGradient = darkGradientColors ? `repeating-linear-gradient(-45deg, ${darkGradientColors.join(', ')})` : undefined;
    setVariable(`color-peer-gradient-${n}`, lightGradient, darkGradient);
  }
}

/***/ }),

/***/ "./src/util/themeStyle.ts":
/*!********************************!*\
  !*** ./src/util/themeStyle.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extractCurrentThemeParams: () => (/* binding */ extractCurrentThemeParams),
/* harmony export */   getPropertyHexColor: () => (/* binding */ getPropertyHexColor),
/* harmony export */   validateHexColor: () => (/* binding */ validateHexColor)
/* harmony export */ });
function extractCurrentThemeParams() {
  const style = getComputedStyle(document.documentElement);
  const backgroundColor = getPropertyHexColor(style, '--color-background');
  const secondaryTextColor = getPropertyHexColor(style, '--color-text-secondary');
  const bgColor = backgroundColor;
  const textColor = getPropertyHexColor(style, '--color-text');
  const buttonColor = getPropertyHexColor(style, '--color-primary');
  const buttonTextColor = getPropertyHexColor(style, '--color-white');
  const linkColor = getPropertyHexColor(style, '--color-links');
  const hintColor = secondaryTextColor;
  const secondaryBgColor = getPropertyHexColor(style, '--color-background-secondary');
  const sectionSeparatorColor = getPropertyHexColor(style, '--color-divider');
  const headerBgColor = backgroundColor;
  const accentTextColor = getPropertyHexColor(style, '--color-primary');
  const sectionBgColor = backgroundColor;
  const sectionHeaderTextColor = secondaryTextColor;
  const subtitleTextColor = hintColor;
  const destructiveTextColor = getPropertyHexColor(style, '--color-error');
  return {
    bg_color: bgColor,
    text_color: textColor,
    hint_color: hintColor,
    link_color: linkColor,
    button_color: buttonColor,
    button_text_color: buttonTextColor,
    secondary_bg_color: secondaryBgColor,
    header_bg_color: headerBgColor,
    accent_text_color: accentTextColor,
    section_bg_color: sectionBgColor,
    section_header_text_color: sectionHeaderTextColor,
    subtitle_text_color: subtitleTextColor,
    destructive_text_color: destructiveTextColor,
    section_separator_color: sectionSeparatorColor
  };
}
function validateHexColor(color) {
  return /^#[0-9A-F]{6}$/i.test(color);
}
function getPropertyHexColor(style, property) {
  const value = style.getPropertyValue(property);
  if (!value) return undefined;
  return prepareHexColor(value.trim());
}
function prepareHexColor(color) {
  if (validateHexColor(color)) return color;
  return `#${color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+\.{0,1}\d*))?\)$/).slice(1).map((n, i) => (i === 3 ? Math.round(parseFloat(n) * 255) : parseFloat(n)).toString(16).padStart(2, '0').replace('NaN', '')).join('')}`;
}

/***/ }),

/***/ "./src/util/trimText.ts":
/*!******************************!*\
  !*** ./src/util/trimText.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ trimText)
/* harmony export */ });
function trimText(text, length) {
  if (!text || !length || text.length <= length) {
    return text;
  }
  return `${text.substring(0, length)}...`;
}

/***/ }),

/***/ "./src/util/updateWebmanifest.ts":
/*!***************************************!*\
  !*** ./src/util/updateWebmanifest.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ updateWebmanifest)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");
// Original idea was found here
// https://medium.com/@alshakero/how-to-setup-your-web-app-manifest-dynamically-using-javascript-f7fbee899a61



function updateWebmanifest() {
  if (!_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_MAC_OS) {
    return;
  }
  const manifest = document.getElementById('the-manifest-placeholder');
  if (!manifest) {
    return;
  }
  const url = `site_apple${_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG ? '_dev' : ''}.webmanifest`;
  manifest.setAttribute('href', url);
}

/***/ }),

/***/ "./src/util/username.ts":
/*!******************************!*\
  !*** ./src/util/username.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MAX_USERNAME_LENGTH: () => (/* binding */ MAX_USERNAME_LENGTH),
/* harmony export */   MIN_UPDATE_USERNAME_LENGTH: () => (/* binding */ MIN_UPDATE_USERNAME_LENGTH),
/* harmony export */   MIN_USERNAME_LENGTH: () => (/* binding */ MIN_USERNAME_LENGTH),
/* harmony export */   USERNAME_REGEX: () => (/* binding */ USERNAME_REGEX),
/* harmony export */   isUsernameValid: () => (/* binding */ isUsernameValid)
/* harmony export */ });
const MIN_USERNAME_LENGTH = 3; // Some bots have 3-letter usernames
const MIN_UPDATE_USERNAME_LENGTH = 5; // 4 letter usernames are only available on Fragment
const MAX_USERNAME_LENGTH = 32;
const USERNAME_REGEX = /^[a-zA-Z]\w+$/;
function isUsernameValid(username, isUpdating) {
  const minUsernameLength = isUpdating ? MIN_UPDATE_USERNAME_LENGTH : MIN_USERNAME_LENGTH;
  return username.length >= minUsernameLength && username.length <= MAX_USERNAME_LENGTH && USERNAME_REGEX.test(username);
}

/***/ }),

/***/ "./src/util/websync.ts":
/*!*****************************!*\
  !*** ./src/util/websync.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clearWebsync: () => (/* binding */ clearWebsync),
/* harmony export */   forceWebsync: () => (/* binding */ forceWebsync),
/* harmony export */   startWebsync: () => (/* binding */ startWebsync),
/* harmony export */   stopWebsync: () => (/* binding */ stopWebsync)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _sessions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sessions */ "./src/util/sessions.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");




const WEBSYNC_URLS = ['t.me', 'telegram.me'].map(domain => `https://${domain}/_websync_?`);
const WEBSYNC_VERSION = `${"10.9.39"} ${_config__WEBPACK_IMPORTED_MODULE_1__.APP_CODE_NAME}`;
const WEBSYNC_KEY = 'tgme_sync';
const WEBSYNC_TIMEOUT = 86400;
const getTs = () => {
  return Math.floor(Number(new Date()) / 1000);
};
const saveSync = authed => {
  const ts = getTs();
  localStorage.setItem(WEBSYNC_KEY, JSON.stringify({
    canRedirect: authed,
    ts
  }));
};
let lastTimeout;
const forceWebsync = authed => {
  if (_config__WEBPACK_IMPORTED_MODULE_1__.IS_MOCKED_CLIENT || _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_ELECTRON) return undefined;
  const currentTs = getTs();
  const {
    canRedirect,
    ts
  } = JSON.parse(localStorage.getItem(WEBSYNC_KEY) || '{}');
  if (canRedirect !== authed || ts + WEBSYNC_TIMEOUT <= currentTs) {
    return Promise.all(WEBSYNC_URLS.map(url => {
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        const removeElement = () => Boolean(document.body.removeChild(script));
        script.src = url + new URLSearchParams({
          authed: Number(authed).toString(),
          version: WEBSYNC_VERSION
        });
        document.body.appendChild(script);
        script.onload = () => {
          saveSync(authed);
          removeElement();
          if (lastTimeout) {
            clearTimeout(lastTimeout);
            lastTimeout = undefined;
          }
          startWebsync();
          resolve();
        };
        script.onerror = () => {
          removeElement();
          reject();
        };
      });
    }));
  } else {
    return Promise.resolve();
  }
};
function stopWebsync() {
  if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG || _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_ELECTRON) return;
  if (lastTimeout) clearTimeout(lastTimeout);
}
function startWebsync() {
  if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG || _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_ELECTRON) {
    return;
  }
  if (lastTimeout !== undefined) return;
  const currentTs = getTs();
  const {
    ts
  } = JSON.parse(localStorage.getItem(WEBSYNC_KEY) || '{}');
  const timeout = WEBSYNC_TIMEOUT - (currentTs - ts);
  lastTimeout = setTimeout(() => {
    const {
      authState
    } = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
    const authed = authState === 'authorizationStateReady' || (0,_sessions__WEBPACK_IMPORTED_MODULE_2__.hasStoredSession)();
    forceWebsync(authed);
  }, Math.max(0, timeout * 1000));
}
function clearWebsync() {
  localStorage.removeItem(WEBSYNC_KEY);
}

/***/ }),

/***/ "./src/util/windowEnvironment.ts":
/*!***************************************!*\
  !*** ./src/util/windowEnvironment.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ARE_CALLS_SUPPORTED: () => (/* binding */ ARE_CALLS_SUPPORTED),
/* harmony export */   ARE_WEBCODECS_SUPPORTED: () => (/* binding */ ARE_WEBCODECS_SUPPORTED),
/* harmony export */   IS_ANDROID: () => (/* binding */ IS_ANDROID),
/* harmony export */   IS_APP: () => (/* binding */ IS_APP),
/* harmony export */   IS_BACKDROP_BLUR_SUPPORTED: () => (/* binding */ IS_BACKDROP_BLUR_SUPPORTED),
/* harmony export */   IS_BAD_URL_PARSER: () => (/* binding */ IS_BAD_URL_PARSER),
/* harmony export */   IS_CANVAS_FILTER_SUPPORTED: () => (/* binding */ IS_CANVAS_FILTER_SUPPORTED),
/* harmony export */   IS_ELECTRON: () => (/* binding */ IS_ELECTRON),
/* harmony export */   IS_EMOJI_SUPPORTED: () => (/* binding */ IS_EMOJI_SUPPORTED),
/* harmony export */   IS_FIREFOX: () => (/* binding */ IS_FIREFOX),
/* harmony export */   IS_GEOLOCATION_SUPPORTED: () => (/* binding */ IS_GEOLOCATION_SUPPORTED),
/* harmony export */   IS_INSTALL_PROMPT_SUPPORTED: () => (/* binding */ IS_INSTALL_PROMPT_SUPPORTED),
/* harmony export */   IS_INTL_LIST_FORMAT_SUPPORTED: () => (/* binding */ IS_INTL_LIST_FORMAT_SUPPORTED),
/* harmony export */   IS_IOS: () => (/* binding */ IS_IOS),
/* harmony export */   IS_LINUX: () => (/* binding */ IS_LINUX),
/* harmony export */   IS_MAC_OS: () => (/* binding */ IS_MAC_OS),
/* harmony export */   IS_MOBILE: () => (/* binding */ IS_MOBILE),
/* harmony export */   IS_MULTITAB_SUPPORTED: () => (/* binding */ IS_MULTITAB_SUPPORTED),
/* harmony export */   IS_OFFSET_PATH_SUPPORTED: () => (/* binding */ IS_OFFSET_PATH_SUPPORTED),
/* harmony export */   IS_OPEN_IN_NEW_TAB_SUPPORTED: () => (/* binding */ IS_OPEN_IN_NEW_TAB_SUPPORTED),
/* harmony export */   IS_OPFS_SUPPORTED: () => (/* binding */ IS_OPFS_SUPPORTED),
/* harmony export */   IS_OPUS_SUPPORTED: () => (/* binding */ IS_OPUS_SUPPORTED),
/* harmony export */   IS_PRODUCTION_HOST: () => (/* binding */ IS_PRODUCTION_HOST),
/* harmony export */   IS_PROGRESSIVE_SUPPORTED: () => (/* binding */ IS_PROGRESSIVE_SUPPORTED),
/* harmony export */   IS_PWA: () => (/* binding */ IS_PWA),
/* harmony export */   IS_REQUEST_FULLSCREEN_SUPPORTED: () => (/* binding */ IS_REQUEST_FULLSCREEN_SUPPORTED),
/* harmony export */   IS_SAFARI: () => (/* binding */ IS_SAFARI),
/* harmony export */   IS_SERVICE_WORKER_SUPPORTED: () => (/* binding */ IS_SERVICE_WORKER_SUPPORTED),
/* harmony export */   IS_SNAP_EFFECT_SUPPORTED: () => (/* binding */ IS_SNAP_EFFECT_SUPPORTED),
/* harmony export */   IS_TOUCH_ENV: () => (/* binding */ IS_TOUCH_ENV),
/* harmony export */   IS_TRANSLATION_SUPPORTED: () => (/* binding */ IS_TRANSLATION_SUPPORTED),
/* harmony export */   IS_VOICE_RECORDING_SUPPORTED: () => (/* binding */ IS_VOICE_RECORDING_SUPPORTED),
/* harmony export */   IS_WAVE_TRANSFORM_SUPPORTED: () => (/* binding */ IS_WAVE_TRANSFORM_SUPPORTED),
/* harmony export */   IS_WEBM_SUPPORTED: () => (/* binding */ IS_WEBM_SUPPORTED),
/* harmony export */   IS_WINDOWS: () => (/* binding */ IS_WINDOWS),
/* harmony export */   IS_YA_BROWSER: () => (/* binding */ IS_YA_BROWSER),
/* harmony export */   LAYERS_ANIMATION_NAME: () => (/* binding */ LAYERS_ANIMATION_NAME),
/* harmony export */   MASK_IMAGE_DISABLED: () => (/* binding */ MASK_IMAGE_DISABLED),
/* harmony export */   MAX_BUFFER_SIZE: () => (/* binding */ MAX_BUFFER_SIZE),
/* harmony export */   MESSAGE_LIST_SENSITIVE_AREA: () => (/* binding */ MESSAGE_LIST_SENSITIVE_AREA),
/* harmony export */   MouseButton: () => (/* binding */ MouseButton),
/* harmony export */   PLATFORM_ENV: () => (/* binding */ PLATFORM_ENV),
/* harmony export */   SCROLLBAR_WIDTH: () => (/* binding */ SCROLLBAR_WIDTH),
/* harmony export */   getGeolocationStatus: () => (/* binding */ getGeolocationStatus),
/* harmony export */   getPlatform: () => (/* binding */ getPlatform)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");

function getPlatform() {
  const {
    userAgent,
    platform
  } = window.navigator;
  const iosPlatforms = ['iPhone', 'iPad', 'iPod'];
  if (iosPlatforms.indexOf(platform) !== -1
  // For new IPads with M1 chip and IPadOS platform returns "MacIntel"
  || platform === 'MacIntel' && 'maxTouchPoints' in navigator && navigator.maxTouchPoints > 2) return 'iOS';
  const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];
  if (macosPlatforms.indexOf(platform) !== -1) return 'macOS';
  const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];
  if (windowsPlatforms.indexOf(platform) !== -1) return 'Windows';
  if (/Android/.test(userAgent)) return 'Android';
  if (/Linux/.test(platform)) return 'Linux';
  return undefined;
}
const IS_PRODUCTION_HOST = window.location.host === _config__WEBPACK_IMPORTED_MODULE_0__.PRODUCTION_HOSTNAME;
const PLATFORM_ENV = getPlatform();
const IS_MAC_OS = PLATFORM_ENV === 'macOS';
const IS_WINDOWS = PLATFORM_ENV === 'Windows';
const IS_LINUX = PLATFORM_ENV === 'Linux';
const IS_IOS = PLATFORM_ENV === 'iOS';
const IS_ANDROID = PLATFORM_ENV === 'Android';
const IS_MOBILE = IS_IOS || IS_ANDROID;
const IS_SAFARI = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
const IS_YA_BROWSER = navigator.userAgent.includes('YaBrowser');
const IS_FIREFOX = navigator.userAgent.toLowerCase().includes('firefox') || navigator.userAgent.toLowerCase().includes('iceweasel') || navigator.userAgent.toLowerCase().includes('icecat');
const IS_ELECTRON = Boolean(window.electron);
let MouseButton = /*#__PURE__*/function (MouseButton) {
  MouseButton[MouseButton["Main"] = 0] = "Main";
  MouseButton[MouseButton["Auxiliary"] = 1] = "Auxiliary";
  MouseButton[MouseButton["Secondary"] = 2] = "Secondary";
  MouseButton[MouseButton["Fourth"] = 3] = "Fourth";
  MouseButton[MouseButton["Fifth"] = 4] = "Fifth";
  return MouseButton;
}({});
const IS_PWA = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone || document.referrer.includes('android-app://');
const IS_APP = IS_PWA || IS_ELECTRON;
const IS_TOUCH_ENV = window.matchMedia('(pointer: coarse)').matches;
const IS_VOICE_RECORDING_SUPPORTED = Boolean(window.navigator.mediaDevices && 'getUserMedia' in window.navigator.mediaDevices && (window.AudioContext || window.webkitAudioContext));
const IS_EMOJI_SUPPORTED = PLATFORM_ENV && (IS_MAC_OS || IS_IOS) && isLastEmojiVersionSupported();
const IS_SERVICE_WORKER_SUPPORTED = ('serviceWorker' in navigator);

// Remove in mid-late 2025 when Chromium 132 is no longer a problem
// https://issues.chromium.org/issues/390581541
const chromeVersion = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./)?.[2];
const hasBrokenServiceWorkerStreaming = chromeVersion && Number(chromeVersion) === 132;
// TODO Consider failed service worker
const IS_PROGRESSIVE_SUPPORTED = IS_SERVICE_WORKER_SUPPORTED && !hasBrokenServiceWorkerStreaming;
const IS_OPUS_SUPPORTED = Boolean(new Audio().canPlayType('audio/ogg; codecs=opus'));
const IS_CANVAS_FILTER_SUPPORTED = !_config__WEBPACK_IMPORTED_MODULE_0__.IS_TEST && 'filter' in (document.createElement('canvas').getContext('2d') || {});
const IS_REQUEST_FULLSCREEN_SUPPORTED = ('requestFullscreen' in document.createElement('div'));
const ARE_CALLS_SUPPORTED = !IS_FIREFOX; // https://bugzilla.mozilla.org/show_bug.cgi?id=1923416
const LAYERS_ANIMATION_NAME = IS_ANDROID ? 'slideFade' : IS_IOS ? 'slideLayers' : 'pushSlide';
const IS_WAVE_TRANSFORM_SUPPORTED = !IS_MOBILE && !IS_FIREFOX // https://bugzilla.mozilla.org/show_bug.cgi?id=1808785
&& !IS_SAFARI; // https://bugs.webkit.org/show_bug.cgi?id=245510
const IS_SNAP_EFFECT_SUPPORTED = !IS_MOBILE && !IS_FIREFOX // https://bugzilla.mozilla.org/show_bug.cgi?id=1896504
&& !IS_SAFARI;
const TEST_VIDEO = document.createElement('video');
const IS_WEBM_SUPPORTED = Boolean(TEST_VIDEO.canPlayType('video/webm; codecs="vp9"').replace('no', ''));
const ARE_WEBCODECS_SUPPORTED = ('VideoDecoder' in window);
const MASK_IMAGE_DISABLED = true;
const IS_OPFS_SUPPORTED = Boolean(navigator.storage?.getDirectory);
if (IS_OPFS_SUPPORTED) {
  // Clear old contents
  (async () => {
    try {
      const directory = await navigator.storage.getDirectory();
      await directory.removeEntry('downloads', {
        recursive: true
      });
    } catch {
      // Ignore
    }
  })();
}
const IS_OFFSET_PATH_SUPPORTED = CSS.supports('offset-rotate: 0deg');
const IS_BACKDROP_BLUR_SUPPORTED = CSS.supports('backdrop-filter: blur()') || CSS.supports('-webkit-backdrop-filter: blur()');
const IS_INSTALL_PROMPT_SUPPORTED = ('onbeforeinstallprompt' in window);
const IS_MULTITAB_SUPPORTED = ('BroadcastChannel' in window);
const IS_OPEN_IN_NEW_TAB_SUPPORTED = IS_MULTITAB_SUPPORTED && !(IS_PWA && IS_MOBILE);
const IS_TRANSLATION_SUPPORTED = !_config__WEBPACK_IMPORTED_MODULE_0__.IS_TEST;
const IS_INTL_LIST_FORMAT_SUPPORTED = ('ListFormat' in Intl);
const IS_BAD_URL_PARSER = new URL('tg://host').host !== 'host';
const MESSAGE_LIST_SENSITIVE_AREA = 750;
const SCROLLBAR_WIDTH = (() => {
  const el = document.createElement('div');
  el.style.cssText = 'overflow:scroll; visibility:hidden; position:absolute;';
  el.classList.add('custom-scroll');
  document.body.appendChild(el);
  const width = el.offsetWidth - el.clientWidth;
  el.remove();
  document.documentElement.style.setProperty('--scrollbar-width', `${width}px`);
  return width;
})();
const MAX_BUFFER_SIZE = (IS_MOBILE ? 512 : 2000) * 1024 ** 2; // 512 OR 2000 MB

function isLastEmojiVersionSupported() {
  const ALLOWABLE_CALCULATION_ERROR_SIZE = 5;
  const inlineEl = document.createElement('span');
  inlineEl.classList.add('emoji-test-element');
  document.body.appendChild(inlineEl);
  inlineEl.innerText = '🐦‍🔥'; // Emoji from 15.1 version
  const newEmojiWidth = inlineEl.offsetWidth;
  inlineEl.innerText = '❤️'; // Emoji from 1.0 version
  const legacyEmojiWidth = inlineEl.offsetWidth;
  document.body.removeChild(inlineEl);
  return Math.abs(newEmojiWidth - legacyEmojiWidth) < ALLOWABLE_CALCULATION_ERROR_SIZE;
}
const IS_GEOLOCATION_SUPPORTED = ('geolocation' in navigator);
const getGeolocationStatus = async () => {
  try {
    const permissionStatus = await navigator.permissions.query({
      name: 'geolocation'
    });
    if (permissionStatus.state === 'granted' || permissionStatus.state === 'prompt') {
      const geolocation = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(position => resolve(position.coords), error => reject(error));
      });
      return {
        accessRequested: true,
        accessGranted: true,
        geolocation
      };
    }
    if (permissionStatus.state === 'denied') {
      return {
        accessRequested: true,
        accessGranted: false
      };
    }
  } catch (error) {
    return {
      accessRequested: false,
      accessGranted: false
    };
  }
  return {
    accessRequested: false,
    accessGranted: false
  };
};

/***/ }),

/***/ "./src/util/windowSize.ts":
/*!********************************!*\
  !*** ./src/util/windowSize.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   updateSizes: () => (/* binding */ updateSizes)
/* harmony export */ });
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");



const WINDOW_ORIENTATION_CHANGE_THROTTLE_MS = 100;
const WINDOW_RESIZE_THROTTLE_MS = 250;
let initialHeight = window.innerHeight;
let currentWindowSize = updateSizes();
const handleResize = (0,_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttle)(() => {
  currentWindowSize = updateSizes();
}, WINDOW_RESIZE_THROTTLE_MS, true);
const handleOrientationChange = (0,_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttle)(() => {
  initialHeight = window.innerHeight;
  handleResize();
}, WINDOW_ORIENTATION_CHANGE_THROTTLE_MS, false);
window.addEventListener('orientationchange', handleOrientationChange);
if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_IOS) {
  window.visualViewport.addEventListener('resize', handleResize);
} else {
  window.addEventListener('resize', handleResize);
}
function updateSizes() {
  let height;
  if (_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_IOS) {
    height = window.visualViewport.height + window.visualViewport.pageTop;
  } else {
    height = window.innerHeight;
  }
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
    const vh = height * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
  });
  return {
    width: window.innerWidth,
    height: window.innerHeight
  };
}
const windowSize = {
  get: () => currentWindowSize,
  getIsKeyboardVisible: () => initialHeight > currentWindowSize.height
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (windowSize);

/***/ }),

/***/ "./src/util/withCache.ts":
/*!*******************************!*\
  !*** ./src/util/withCache.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ withCache)
/* harmony export */ });
const cache = new WeakMap();
function withCache(fn) {
  return (...args) => {
    let fnCache = cache.get(fn);
    const cacheKey = args.map(String).join('_');
    if (fnCache) {
      const cached = fnCache.get(cacheKey);
      if (cached) {
        return cached;
      }
    } else {
      fnCache = new Map();
      cache.set(fn, fnCache);
    }
    const newValue = fn(...args);
    fnCache.set(cacheKey, newValue);
    return newValue;
  };
}

/***/ }),

/***/ "./src/assets/fonts/roboto.css":
/*!*************************************!*\
  !*** ./src/assets/fonts/roboto.css ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/App.module.scss":
/*!****************************************!*\
  !*** ./src/components/App.module.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"bg":"App-module__bg"});

/***/ }),

/***/ "./src/components/auth/Auth.scss":
/*!***************************************!*\
  !*** ./src/components/auth/Auth.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/auth/CountryCodeInput.scss":
/*!***************************************************!*\
  !*** ./src/components/auth/CountryCodeInput.scss ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/Avatar.scss":
/*!*******************************************!*\
  !*** ./src/components/common/Avatar.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/Blockquote.module.scss":
/*!******************************************************!*\
  !*** ./src/components/common/Blockquote.module.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"Blockquote-module__root","collapsed":"Blockquote-module__collapsed","blockquote":"Blockquote-module__blockquote","gradientContainer":"Blockquote-module__gradientContainer","collapseIcon":"Blockquote-module__collapseIcon","clickable":"Blockquote-module__clickable"});

/***/ }),

/***/ "./src/components/common/CustomEmoji.module.scss":
/*!*******************************************************!*\
  !*** ./src/components/common/CustomEmoji.module.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"CustomEmoji-module__root","placeholder":"CustomEmoji-module__placeholder","thumb":"CustomEmoji-module__thumb","media":"CustomEmoji-module__media","highlight-catch":"CustomEmoji-module__highlight-catch","highlightCatch":"CustomEmoji-module__highlight-catch"});

/***/ }),

/***/ "./src/components/common/Sparkles.module.scss":
/*!****************************************************!*\
  !*** ./src/components/common/Sparkles.module.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"Sparkles-module__root","progress":"Sparkles-module__progress","button":"Sparkles-module__button","symbol":"Sparkles-module__symbol","sparkle":"Sparkles-module__sparkle"});

/***/ }),

/***/ "./src/components/common/StickerView.module.scss":
/*!*******************************************************!*\
  !*** ./src/components/common/StickerView.module.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"thumb":"StickerView-module__thumb","thumb-opaque":"StickerView-module__thumb-opaque","thumbOpaque":"StickerView-module__thumb-opaque","no-transition":"StickerView-module__no-transition","noTransition":"StickerView-module__no-transition","media":"StickerView-module__media"});

/***/ }),

/***/ "./src/components/common/TopicDefaultIcon.module.scss":
/*!************************************************************!*\
  !*** ./src/components/common/TopicDefaultIcon.module.scss ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"TopicDefaultIcon-module__root","icon":"TopicDefaultIcon-module__icon","title":"TopicDefaultIcon-module__title"});

/***/ }),

/***/ "./src/components/common/UiLoader.module.scss":
/*!****************************************************!*\
  !*** ./src/components/common/UiLoader.module.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"mask":"UiLoader-module__mask","main":"UiLoader-module__main","left":"UiLoader-module__left","middle":"UiLoader-module__middle","right":"UiLoader-module__right","blank":"UiLoader-module__blank"});

/***/ }),

/***/ "./src/components/common/code/CodeBlock.scss":
/*!***************************************************!*\
  !*** ./src/components/common/code/CodeBlock.scss ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/code/CodeOverlay.module.scss":
/*!************************************************************!*\
  !*** ./src/components/common/code/CodeOverlay.module.scss ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"overlay":"CodeOverlay-module__overlay","copy":"CodeOverlay-module__copy","wrap":"CodeOverlay-module__wrap","wrapOn":"CodeOverlay-module__wrapOn","content":"CodeOverlay-module__content","hidden":"CodeOverlay-module__hidden"});

/***/ }),

/***/ "./src/components/common/icons/StarIcon.module.scss":
/*!**********************************************************!*\
  !*** ./src/components/common/icons/StarIcon.module.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"StarIcon-module__root","middle":"StarIcon-module__middle","big":"StarIcon-module__big","adaptive":"StarIcon-module__adaptive","svg":"StarIcon-module__svg","clickable":"StarIcon-module__clickable"});

/***/ }),

/***/ "./src/components/common/spoiler/Spoiler.scss":
/*!****************************************************!*\
  !*** ./src/components/common/spoiler/Spoiler.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/main/AppInactive.scss":
/*!**********************************************!*\
  !*** ./src/components/main/AppInactive.scss ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/Button.scss":
/*!***************************************!*\
  !*** ./src/components/ui/Button.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/Checkbox.scss":
/*!*****************************************!*\
  !*** ./src/components/ui/Checkbox.scss ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/DropdownMenu.scss":
/*!*********************************************!*\
  !*** ./src/components/ui/DropdownMenu.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/Link.module.scss":
/*!********************************************!*\
  !*** ./src/components/ui/Link.module.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"link":"Link-module__link","isPrimary":"Link-module__isPrimary"});

/***/ }),

/***/ "./src/components/ui/Loading.scss":
/*!****************************************!*\
  !*** ./src/components/ui/Loading.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/Menu.scss":
/*!*************************************!*\
  !*** ./src/components/ui/Menu.scss ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/MenuItem.scss":
/*!*****************************************!*\
  !*** ./src/components/ui/MenuItem.scss ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/Modal.scss":
/*!**************************************!*\
  !*** ./src/components/ui/Modal.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/RippleEffect.scss":
/*!*********************************************!*\
  !*** ./src/components/ui/RippleEffect.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/Spinner.scss":
/*!****************************************!*\
  !*** ./src/components/ui/Spinner.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/ui/Transition.scss":
/*!*******************************************!*\
  !*** ./src/components/ui/Transition.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/styles/index.scss":
/*!*******************************!*\
  !*** ./src/styles/index.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/assets/app-inactive.png":
/*!*************************************!*\
  !*** ./src/assets/app-inactive.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "app-inactive.da3925145f0a7111c0f1.png";

/***/ }),

/***/ "./src/assets/blank.png":
/*!******************************!*\
  !*** ./src/assets/blank.png ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "blank.8dd283bceccca95a48d8.png";

/***/ }),

/***/ "./src/assets/icons/forumTopic/blue.svg":
/*!**********************************************!*\
  !*** ./src/assets/icons/forumTopic/blue.svg ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "blue.7addb55a171bbda244ac.svg";

/***/ }),

/***/ "./src/assets/icons/forumTopic/green.svg":
/*!***********************************************!*\
  !*** ./src/assets/icons/forumTopic/green.svg ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "green.19008e11c98b08550285.svg";

/***/ }),

/***/ "./src/assets/icons/forumTopic/grey.svg":
/*!**********************************************!*\
  !*** ./src/assets/icons/forumTopic/grey.svg ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "grey.45da821d56a68ea86203.svg";

/***/ }),

/***/ "./src/assets/icons/forumTopic/red.svg":
/*!*********************************************!*\
  !*** ./src/assets/icons/forumTopic/red.svg ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "red.1ab26ec752237fc45355.svg";

/***/ }),

/***/ "./src/assets/icons/forumTopic/rose.svg":
/*!**********************************************!*\
  !*** ./src/assets/icons/forumTopic/rose.svg ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "rose.6dd2db47d5e1fb9bdb9d.svg";

/***/ }),

/***/ "./src/assets/icons/forumTopic/violet.svg":
/*!************************************************!*\
  !*** ./src/assets/icons/forumTopic/violet.svg ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "violet.7c7f825ebb51cf3084e3.svg";

/***/ }),

/***/ "./src/assets/icons/forumTopic/yellow.svg":
/*!************************************************!*\
  !*** ./src/assets/icons/forumTopic/yellow.svg ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "yellow.40f6b4865f20f3e6a1ab.svg";

/***/ }),

/***/ "./src/assets/lock.png":
/*!*****************************!*\
  !*** ./src/assets/lock.png ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "lock.f11661905df47960fa3e.png";

/***/ }),

/***/ "./src/assets/monkey.svg":
/*!*******************************!*\
  !*** ./src/assets/monkey.svg ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "monkey.a3d5fcdc50b18dc55695.svg";

/***/ }),

/***/ "./src/assets/spoilers/mask.svg":
/*!**************************************!*\
  !*** ./src/assets/spoilers/mask.svg ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "mask.c474db1e76529489b940.svg";

/***/ }),

/***/ "./src/assets/square.svg":
/*!*******************************!*\
  !*** ./src/assets/square.svg ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "square.370a4828a4f2afc14ada.svg";

/***/ }),

/***/ "./src/assets/telegram-logo.svg":
/*!**************************************!*\
  !*** ./src/assets/telegram-logo.svg ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "telegram-logo.1b2bb5b107f046ea9325.svg";

/***/ }),

/***/ "./src/assets/tgs/LastSeen.tgs":
/*!*************************************!*\
  !*** ./src/assets/tgs/LastSeen.tgs ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "LastSeen.b16ff3c97561138c2406.tgs";

/***/ }),

/***/ "./src/assets/tgs/ReadTime.tgs":
/*!*************************************!*\
  !*** ./src/assets/tgs/ReadTime.tgs ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "ReadTime.015d6e6f73f768f1e9fe.tgs";

/***/ }),

/***/ "./src/assets/tgs/Report.tgs":
/*!***********************************!*\
  !*** ./src/assets/tgs/Report.tgs ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Report.4a5dda0227ea86f6fa5e.tgs";

/***/ }),

/***/ "./src/assets/tgs/Unlock.tgs":
/*!***********************************!*\
  !*** ./src/assets/tgs/Unlock.tgs ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Unlock.15931385f7a95ab1a000.tgs";

/***/ }),

/***/ "./src/assets/tgs/auth/QrPlane.tgs":
/*!*****************************************!*\
  !*** ./src/assets/tgs/auth/QrPlane.tgs ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "QrPlane.a921709f266564f65b7e.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/CameraFlip.tgs":
/*!*********************************************!*\
  !*** ./src/assets/tgs/calls/CameraFlip.tgs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "CameraFlip.1a9fe44cf01fcb22347d.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/HandFilled.tgs":
/*!*********************************************!*\
  !*** ./src/assets/tgs/calls/HandFilled.tgs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "HandFilled.f87939d160f1dc288586.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/HandOutline.tgs":
/*!**********************************************!*\
  !*** ./src/assets/tgs/calls/HandOutline.tgs ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "HandOutline.f9831751ba60df30c484.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/Speaker.tgs":
/*!******************************************!*\
  !*** ./src/assets/tgs/calls/Speaker.tgs ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Speaker.04bb3743412b41ff83c5.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/VoiceAllowTalk.tgs":
/*!*************************************************!*\
  !*** ./src/assets/tgs/calls/VoiceAllowTalk.tgs ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "VoiceAllowTalk.a9cc7c39ec438973ddc9.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/VoiceMini.tgs":
/*!********************************************!*\
  !*** ./src/assets/tgs/calls/VoiceMini.tgs ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "VoiceMini.bf00ffdf69625c579569.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/VoiceMuted.tgs":
/*!*********************************************!*\
  !*** ./src/assets/tgs/calls/VoiceMuted.tgs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "VoiceMuted.a4b4ec6bfd7c6c5fb275.tgs";

/***/ }),

/***/ "./src/assets/tgs/calls/VoiceOutlined.tgs":
/*!************************************************!*\
  !*** ./src/assets/tgs/calls/VoiceOutlined.tgs ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "VoiceOutlined.91b394ab3562cdfad6bc.tgs";

/***/ }),

/***/ "./src/assets/tgs/general/Flame.tgs":
/*!******************************************!*\
  !*** ./src/assets/tgs/general/Flame.tgs ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Flame.d1a2dae178cb492c75ea.tgs";

/***/ }),

/***/ "./src/assets/tgs/general/Fragment.tgs":
/*!*********************************************!*\
  !*** ./src/assets/tgs/general/Fragment.tgs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Fragment.b1bf3a076c00ef525901.tgs";

/***/ }),

/***/ "./src/assets/tgs/general/Mention.tgs":
/*!********************************************!*\
  !*** ./src/assets/tgs/general/Mention.tgs ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Mention.810d50783976689ed870.tgs";

/***/ }),

/***/ "./src/assets/tgs/general/PartyPopper.tgs":
/*!************************************************!*\
  !*** ./src/assets/tgs/general/PartyPopper.tgs ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "PartyPopper.287e4290662b3d2b269c.tgs";

/***/ }),

/***/ "./src/assets/tgs/invites/Invite.tgs":
/*!*******************************************!*\
  !*** ./src/assets/tgs/invites/Invite.tgs ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Invite.4502ec3aa4249d6e6723.tgs";

/***/ }),

/***/ "./src/assets/tgs/invites/Requests.tgs":
/*!*********************************************!*\
  !*** ./src/assets/tgs/invites/Requests.tgs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Requests.af9f19772695a8898810.tgs";

/***/ }),

/***/ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyClose.tgs":
/*!**************************************************************!*\
  !*** ./src/assets/tgs/monkeys/TwoFactorSetupMonkeyClose.tgs ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3e.tgs";

/***/ }),

/***/ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyIdle.tgs":
/*!*************************************************************!*\
  !*** ./src/assets/tgs/monkeys/TwoFactorSetupMonkeyIdle.tgs ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab.tgs";

/***/ }),

/***/ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyPeek.tgs":
/*!*************************************************************!*\
  !*** ./src/assets/tgs/monkeys/TwoFactorSetupMonkeyPeek.tgs ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "TwoFactorSetupMonkeyPeek.1905436b042520363d7e.tgs";

/***/ }),

/***/ "./src/assets/tgs/monkeys/TwoFactorSetupMonkeyTracking.tgs":
/*!*****************************************************************!*\
  !*** ./src/assets/tgs/monkeys/TwoFactorSetupMonkeyTracking.tgs ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12.tgs";

/***/ }),

/***/ "./src/assets/tgs/settings/Congratulations.tgs":
/*!*****************************************************!*\
  !*** ./src/assets/tgs/settings/Congratulations.tgs ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Congratulations.b6623b8efc6fedec9d33.tgs";

/***/ }),

/***/ "./src/assets/tgs/settings/DiscussionGroupsDucks.tgs":
/*!***********************************************************!*\
  !*** ./src/assets/tgs/settings/DiscussionGroupsDucks.tgs ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "DiscussionGroupsDucks.9ea453d1be9d1b0ee77a.tgs";

/***/ }),

/***/ "./src/assets/tgs/settings/Experimental.tgs":
/*!**************************************************!*\
  !*** ./src/assets/tgs/settings/Experimental.tgs ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Experimental.43d62096368bf5a00ae3.tgs";

/***/ }),

/***/ "./src/assets/tgs/settings/FoldersAll.tgs":
/*!************************************************!*\
  !*** ./src/assets/tgs/settings/FoldersAll.tgs ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "FoldersAll.3f9f9e243d19f0fbf9aa.tgs";

/***/ }),

/***/ "./src/assets/tgs/settings/FoldersNew.tgs":
/*!************************************************!*\
  !*** ./src/assets/tgs/settings/FoldersNew.tgs ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "FoldersNew.9a40d71c0c8be70f5bd1.tgs";

/***/ }),

/***/ "./src/assets/tgs/settings/FoldersShare.tgs":
/*!**************************************************!*\
  !*** ./src/assets/tgs/settings/FoldersShare.tgs ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "FoldersShare.3356f97ced75bf97121c.tgs";

/***/ }),

/***/ "./src/assets/tgs/settings/Lock.tgs":
/*!******************************************!*\
  !*** ./src/assets/tgs/settings/Lock.tgs ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "Lock.12547a0228d4fa544e53.tgs";

/***/ }),

/***/ "./src/assets/tgs/stars/StarReaction.tgs":
/*!***********************************************!*\
  !*** ./src/assets/tgs/stars/StarReaction.tgs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "StarReaction.9079111e9821148b6055.tgs";

/***/ }),

/***/ "./src/assets/tgs/stars/StarReactionEffect.tgs":
/*!*****************************************************!*\
  !*** ./src/assets/tgs/stars/StarReactionEffect.tgs ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "StarReactionEffect.8718d0946883c6f031f8.tgs";

/***/ }),

/***/ "./node_modules/idb-keyval/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/idb-keyval/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   createStore: () => (/* binding */ createStore),
/* harmony export */   del: () => (/* binding */ del),
/* harmony export */   delMany: () => (/* binding */ delMany),
/* harmony export */   entries: () => (/* binding */ entries),
/* harmony export */   get: () => (/* binding */ get),
/* harmony export */   getMany: () => (/* binding */ getMany),
/* harmony export */   keys: () => (/* binding */ keys),
/* harmony export */   promisifyRequest: () => (/* binding */ promisifyRequest),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   setMany: () => (/* binding */ setMany),
/* harmony export */   update: () => (/* binding */ update),
/* harmony export */   values: () => (/* binding */ values)
/* harmony export */ });
function promisifyRequest(request) {
    return new Promise((resolve, reject) => {
        // @ts-ignore - file size hacks
        request.oncomplete = request.onsuccess = () => resolve(request.result);
        // @ts-ignore - file size hacks
        request.onabort = request.onerror = () => reject(request.error);
    });
}
function createStore(dbName, storeName) {
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    const dbp = promisifyRequest(request);
    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
let defaultGetStoreFunc;
function defaultGetStore() {
    if (!defaultGetStoreFunc) {
        defaultGetStoreFunc = createStore('keyval-store', 'keyval');
    }
    return defaultGetStoreFunc;
}
/**
 * Get a value by its key.
 *
 * @param key
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function get(key, customStore = defaultGetStore()) {
    return customStore('readonly', (store) => promisifyRequest(store.get(key)));
}
/**
 * Set a value with a key.
 *
 * @param key
 * @param value
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function set(key, value, customStore = defaultGetStore()) {
    return customStore('readwrite', (store) => {
        store.put(value, key);
        return promisifyRequest(store.transaction);
    });
}
/**
 * Set multiple values at once. This is faster than calling set() multiple times.
 * It's also atomic – if one of the pairs can't be added, none will be added.
 *
 * @param entries Array of entries, where each entry is an array of `[key, value]`.
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function setMany(entries, customStore = defaultGetStore()) {
    return customStore('readwrite', (store) => {
        entries.forEach((entry) => store.put(entry[1], entry[0]));
        return promisifyRequest(store.transaction);
    });
}
/**
 * Get multiple values by their keys
 *
 * @param keys
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function getMany(keys, customStore = defaultGetStore()) {
    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));
}
/**
 * Update a value. This lets you see the old value and update it as an atomic operation.
 *
 * @param key
 * @param updater A callback that takes the old value and returns a new value.
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function update(key, updater, customStore = defaultGetStore()) {
    return customStore('readwrite', (store) => 
    // Need to create the promise manually.
    // If I try to chain promises, the transaction closes in browsers
    // that use a promise polyfill (IE10/11).
    new Promise((resolve, reject) => {
        store.get(key).onsuccess = function () {
            try {
                store.put(updater(this.result), key);
                resolve(promisifyRequest(store.transaction));
            }
            catch (err) {
                reject(err);
            }
        };
    }));
}
/**
 * Delete a particular key from the store.
 *
 * @param key
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function del(key, customStore = defaultGetStore()) {
    return customStore('readwrite', (store) => {
        store.delete(key);
        return promisifyRequest(store.transaction);
    });
}
/**
 * Delete multiple keys at once.
 *
 * @param keys List of keys to delete.
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function delMany(keys, customStore = defaultGetStore()) {
    return customStore('readwrite', (store) => {
        keys.forEach((key) => store.delete(key));
        return promisifyRequest(store.transaction);
    });
}
/**
 * Clear all values in the store.
 *
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function clear(customStore = defaultGetStore()) {
    return customStore('readwrite', (store) => {
        store.clear();
        return promisifyRequest(store.transaction);
    });
}
function eachCursor(store, callback) {
    store.openCursor().onsuccess = function () {
        if (!this.result)
            return;
        callback(this.result);
        this.result.continue();
    };
    return promisifyRequest(store.transaction);
}
/**
 * Get all keys in the store.
 *
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function keys(customStore = defaultGetStore()) {
    return customStore('readonly', (store) => {
        // Fast path for modern browsers
        if (store.getAllKeys) {
            return promisifyRequest(store.getAllKeys());
        }
        const items = [];
        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
    });
}
/**
 * Get all values in the store.
 *
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function values(customStore = defaultGetStore()) {
    return customStore('readonly', (store) => {
        // Fast path for modern browsers
        if (store.getAll) {
            return promisifyRequest(store.getAll());
        }
        const items = [];
        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);
    });
}
/**
 * Get all entries in the store. Each entry is an array of `[key, value]`.
 *
 * @param customStore Method to get a custom store. Use with caution (see the docs).
 */
function entries(customStore = defaultGetStore()) {
    return customStore('readonly', (store) => {
        // Fast path for modern browsers
        // (although, hopefully we'll get a simpler path some day)
        if (store.getAll && store.getAllKeys) {
            return Promise.all([
                promisifyRequest(store.getAllKeys()),
                promisifyRequest(store.getAll()),
            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));
        }
        const items = [];
        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));
    });
}




/***/ }),

/***/ "./src/styles/themes.json":
/*!********************************!*\
  !*** ./src/styles/themes.json ***!
  \********************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"--color-primary":["#3390EC","#8774E1"],"--color-primary-opacity":["#50A2E91E","#8378DB1E"],"--color-primary-opacity-hover":["#50A2E940","#8378DB40"],"--color-primary-tint":["#3390ec1a","#8774e11a"],"--color-primary-shade":["#4a95d6","#7b71c6"],"--color-background":["#FFFFFF","#212121"],"--color-background-compact-menu":["#FFFFFFBB","#212121DD"],"--color-web-app-browser":["#FFFFFFBB","#0303038F"],"--color-background-compact-menu-reactions":["#FFFFFFEB","#212121DD"],"--color-background-compact-menu-hover":["#00000011","#00000066"],"--color-background-secondary":["#f4f4f5","#0F0F0F"],"--color-background-secondary-accent":["#E4E4E5","#191919"],"--color-background-own":["#EEFFDE","#766AC8"],"--color-background-own-apple":["#DCF8C5","#766AC8"],"--color-background-selected":["#F4F4F5","#2C2C2C"],"--color-background-own-selected":["#d0ffac","#6549d4"],"--color-chat-hover":["#F4F4F5","#2C2C2C"],"--color-chat-active":["#3390EC","#766AC8"],"--color-chat-active-greyed":["#60a7f0","#9288d3"],"--color-item-hover":["#f4f4f5","#2c2c2c"],"--color-item-active":["#ededed","#292929"],"--color-text":["#000000","#FFFFFF"],"--color-text-secondary":["#707579","#AAAAAA"],"--color-icon-secondary":["#707579","#AAAAAA"],"--color-text-secondary-apple":["#8E8E92","#AAAAAA"],"--color-borders":["#DADCE0","#303030"],"--color-borders-input":["#DADCE0","#5B5B5A"],"--color-dividers":["#C8C6CC","#3B3B3D"],"--color-dividers-android":["#E7E7E7","#0F0F0F"],"--color-links":["#3390EC","#8774E1"],"--color-gray":["#C4C9CC","#717579"],"--color-list-icon":["#ABAFB1","#A2A2A2"],"--color-default-shadow":["#72727240","#1010109c"],"--color-light-shadow":["#7272722B","#00000040"],"--color-green":["#00C73E","#8774E1"],"--color-green-darker":["#00a734","#7b71c6"],"--color-success":["#00C73E","#00C73E"],"--color-text-meta-colored":["#4DCD5E","#8378DB"],"--color-reply-hover":["#F4F4F4","#272727"],"--color-reply-active":["#E8E9E9","#2E2F2F"],"--color-reply-own-hover":["#D9F5CE","#8775DA"],"--color-reply-own-hover-apple":["#cbefb7","#8775DA"],"--color-reply-own-active":["#C5ECBE","#917DEA"],"--color-reply-own-active-apple":["#bae6a8","#917DEA"],"--color-accent-own":["#45AF54","#FFFFFF"],"--color-message-meta-own":["#4FAE4EFF","#FFFFFF88"],"--color-own-links":["#3390EC","#FFFFFF"],"--color-code":["#4a729a","#8774E1"],"--color-code-own":["#3c7940","#FFFFFF"],"--color-code-bg":["#70757914","#00000080"],"--color-code-own-bg":["#70757914","#00000050"],"--color-composer-button":["#707579CC","#AAAAAACC"],"--color-message-reaction":["#ebf3fd","#2b2a35"],"--color-message-reaction-hover":["#c5def9","#343147"],"--color-message-reaction-own":["#c6eab2","#675CAF"],"--color-message-reaction-hover-own":["#b5e0a4","#5B529B"],"--color-message-reaction-chosen-hover":["#1a82ea","#7864dd"],"--color-message-reaction-chosen-hover-own":["#3f9d4b","#f5f5f5"],"--color-voice-transcribe-button":["#e8f3ff","#2a2a3c"],"--color-voice-transcribe-button-own":["#cceebf","#8373d3"],"--color-topic-blue":["#2F7772","#6ff9f0"],"--color-topic-yellow":["#7F693B","#ffd67e"],"--color-topic-violet":["#8B5A96","#cb86db"],"--color-topic-green":["#44774A","#8eee98"],"--color-topic-rose":["#9B576B","#ff93b2"],"--color-topic-red":["#EB6858","#fb6f5f"],"--color-topic-grey":["#6C6C6C","#999999"],"--color-forum-unread-topic-hover":["#e9e9e9","#363636"],"--color-forum-hover-unread-topic-hover":["#e2e2e2","#3f3f3f"],"--color-chat-username":["#3C7EB0","#E9EEF4"],"--color-borders-read-story":["#C4C9CC","#737373"],"--color-background-menu-separator":["#0000001a","#ffffff1a"],"--color-hover-overlay":["#00000006","#ffffff06"]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + {"src_util_fallbackLangPack_ts":"3c231c424336c163fe0e","_d64f":"99d93aca0a3966edc709","src_assets_localization_fallback_strings":"bbd6ae66da30854a2d03","vendors-node_modules_lowlight_lib_core_js":"354598e5a1e98881d6d0","src_util_highlightCode_ts":"4f45285a0943d5570c6a","src_lib_rlottie_RLottie_ts":"01bde66acd44695e0b2d","shared-components":"199536d82414f55cac67","BundleAuth":"cfc08968618e4ad54e98","src_components_common_Avatar_tsx-src_components_common_FullNameTitle_tsx-src_hooks_schedulers-ac620f":"8729e32addc9a1c9b16a","src_components_common_MediaSpoiler_tsx-src_components_common_PasswordForm_tsx-src_components_-3662f6":"a061931b7804c44d851c","src_components_right_DeleteMemberModal_tsx-src_global_selectors_calls_ts-src_global_selectors-18144d":"528302fa1cb3c75f754e","src_components_common_Composer_tsx-src_components_common_LinkField_tsx-src_components_common_-cced95":"ada1c55d404554c2c33d","src_global_actions_ui_calls_ts":"3c496812dbb2a7fefe85","BundleMain":"4d36d110dcffa9133246","src_components_common_PeerBadge_tsx-src_components_common_pickers_PickerModal_tsx-src_compone-326c9b":"abb4cec7e533d414160b","BundleExtra":"584c84cb32dc2dac8087","BundleCalls":"9f5dc9e08c06e61be8ea","BundleStars":"a512ff66f804b63e2518","vendors-node_modules_qr-code-styling_lib_qr-code-styling_js":"756dd536589c8fdb7d94","src_lib_hljs-tl_typelanguage_js":"52984fbf95c0faa1a859","Highlight for 1c":"b59ac21a7866e75258bf","Highlight for abnf":"5ed63c281737c482ff3b","Highlight for accesslog":"74c23e20aa13d4d75b09","Highlight for actionscript":"b27cdba6c507de6fe75c","Highlight for ada":"e4055afdcc7707530bc1","Highlight for angelscript":"32a77a71fb67d012f500","Highlight for apache":"c334321425d2a859202f","Highlight for applescript":"0d4f84dd8e780e9a10d9","Highlight for arcade":"0b588836594f21e0f3e0","Highlight for arduino":"5fbcd7f41180f6f4bad5","Highlight for armasm":"c26534984c4e86f93b21","Highlight for asciidoc":"13a3824b5c76d7f67f62","Highlight for aspectj":"9d3a3931a4a2e5b3dd49","Highlight for autohotkey":"c1ae3ec57b87b71f0780","Highlight for autoit":"808d5c44fcaa002e43a2","Highlight for avrasm":"59a8cfc5358109021490","Highlight for awk":"094e6d617d7c37a488de","Highlight for axapta":"b102584aa6bb7be1d2e5","Highlight for bash":"58f4ebc8a6778150151c","Highlight for basic":"08c0f260a9dceddaa169","Highlight for bnf":"bac7377c74eaa93abaae","Highlight for brainfuck":"e6a62d0a945aa307fb09","Highlight for c":"97286bcb1f5cf1891ec1","Highlight for cal":"c1a0ad62d4e267bb2af6","Highlight for capnproto":"e94cf89bdb6f5db66915","Highlight for ceylon":"fce6b7b9b20355004cae","Highlight for clean":"faeb5e520b61a5299305","Highlight for clojure":"19d7289d027dda0732af","Highlight for clojure-repl":"86abd7d4d1ab8461ed04","Highlight for cmake":"d676dda688ce96451b25","Highlight for coffeescript":"0bbaa9572bc65eb7b8f6","Highlight for coq":"251ba909fa1284c20d7a","Highlight for cos":"4d470aaead3cb720f7b9","Highlight for cpp":"7000de43c77809b00a62","Highlight for crmsh":"ebccb7024d6ee4cee647","Highlight for crystal":"641538ec6d05532fb7df","Highlight for csharp":"414415f24d637abab7d9","Highlight for csp":"08aa2a09365d5ba3aa9e","Highlight for css":"6bda2c0ca83a4a263c48","Highlight for d":"0bf5e5a1b68ef62e7289","Highlight for dart":"90e0d903b2f83b7003c3","Highlight for delphi":"26b43e28f4f93783c2f3","Highlight for diff":"fabec05680e4338c1aa8","Highlight for django":"dc967e0db1205ccfb0b5","Highlight for dns":"6c6cbfc7e517443d4456","Highlight for dockerfile":"d6d1cc51364bff948aa3","Highlight for dos":"bacfa050e9cd220cd313","Highlight for dsconfig":"080cdc36a577c20f8517","Highlight for dts":"f89d83461a9d7f78ed0a","Highlight for dust":"f580411929c2da361b29","Highlight for ebnf":"8eb41637374746889fe4","Highlight for elixir":"52bf59f399396a81c25f","Highlight for elm":"c93d07dbb4aada40a81e","Highlight for erb":"29b5512c2a00d47e5e8a","Highlight for erlang":"30799505dfeb3a25a780","Highlight for erlang-repl":"788f979b8ca5fd0b23bf","Highlight for excel":"eaf66edb11fa9938a9f2","Highlight for fix":"bc7e3765bb42b4dceae5","Highlight for flix":"cd5ab53e35aa2cc63a12","Highlight for fortran":"333e046e2a54fb356f77","Highlight for fsharp":"a1c1dcf949478d4b70c3","Highlight for gams":"e267792695ad4cb19e36","Highlight for gauss":"a8524cd9a5703d5c1649","Highlight for gcode":"4edebb653db00bdb509b","Highlight for gherkin":"4fe9a13ac8237477eaea","Highlight for glsl":"d7bc176ae12483889846","Highlight for gml":"306cd0631f4166aa882b","Highlight for go":"9f1e78d3ca53ea1b3b5c","Highlight for golo":"0a5230142532de1480c2","Highlight for gradle":"98c91f62f27c7af9f40e","Highlight for graphql":"b5303c40da9b12f10bb9","Highlight for groovy":"fae370b3e1d2d4e9c19d","Highlight for haml":"7cab4371e1537facdafe","Highlight for handlebars":"0eea4e34dba7d3033e3d","Highlight for haskell":"7d546f5165fcbad68dc5","Highlight for haxe":"bf71dc0ad6aef47463cc","Highlight for hsp":"07b0ce4d34824428425a","Highlight for http":"7bc7a2f19de0563498ef","Highlight for hy":"827d87d566da275e3d82","Highlight for inform7":"ad637a4b62fcaeded1e2","Highlight for ini":"6e237425ce73490579ae","Highlight for irpf90":"b48333e78158bbcad860","Highlight for isbl":"0be4ed8dd1c3dd440731","Highlight for java":"19292445c7031938bd74","Highlight for javascript":"cf8bf546d784204e2d33","Highlight for jboss-cli":"52756f4a0b8e2e90cd1c","Highlight for json":"bc1ddaa4c98540e4c7b4","Highlight for julia":"17bae0319de19eed5f1f","Highlight for julia-repl":"428ec19c77f191848bdf","Highlight for kotlin":"f29cd54d0343406d73a8","Highlight for lasso":"ed6b0edc132db0caff47","Highlight for latex":"375a71c69fd0737d7806","Highlight for ldif":"7aec27761d6d18ff88ad","Highlight for leaf":"9d93c4cf0f19ddceff7c","Highlight for less":"c9af8cb510c4eab315b6","Highlight for lisp":"841b8f52fdb4a095606f","Highlight for livecodeserver":"961cbf298ca505db5c14","Highlight for livescript":"b1639292841f6010c1aa","Highlight for llvm":"f41cfaa869a7a620d800","Highlight for lsl":"4fa844ffe719b60b3fba","Highlight for lua":"de036fba62c9fe02e01c","Highlight for makefile":"f3a061d28a864ebaca4c","Highlight for markdown":"16103c91e8c5d048b4f0","Highlight for mathematica":"eb81f8bffb17b17984d9","Highlight for matlab":"0fb307677768faa375b7","Highlight for maxima":"e6bd81bae78f4194d354","Highlight for mel":"2ec2ac3a861e0dc5917c","Highlight for mercury":"6d7e0c4fc04d9932c638","Highlight for mipsasm":"e9e634a7e28ce6908555","Highlight for mizar":"f797620fcf18380c3e24","Highlight for mojolicious":"f1d320ce86fb5e4451ae","Highlight for monkey":"3f0600399be9ec7c47d2","Highlight for moonscript":"17ef05a03eb23368d1d7","Highlight for n1ql":"96d8de332a0290a2cd0e","Highlight for nestedtext":"a9b79b872468fd82f532","Highlight for nginx":"aad280a2122a4f921384","Highlight for nim":"2256f5f425cf957e85e1","Highlight for nix":"3b102c39a807a1cec779","Highlight for node-repl":"cf284c794a34e4b819d8","Highlight for nsis":"f48b2031fb6a4530adb4","Highlight for objectivec":"3f0e5519b9f551a206b2","Highlight for ocaml":"8d2b4987869832baff35","Highlight for openscad":"9f9e6c9fb0a886e12128","Highlight for oxygene":"449e6f4d6a11e2ab2227","Highlight for parser3":"cba7305d0b573645cb96","Highlight for perl":"d63d40c53ef9e21076f5","Highlight for pf":"4b6cf0db4c3359d4c690","Highlight for pgsql":"0e3ca3905da58dfd87e6","Highlight for php":"f0104e39a40d85242964","Highlight for php-template":"cdac06099ff8aa7d26f8","Highlight for plaintext":"b02b5f2d2464d767b408","Highlight for pony":"0a3f03369161539b2043","Highlight for powershell":"70563cc28e6c474441e1","Highlight for processing":"4d87e3446f720777c37a","Highlight for profile":"1a16917db353963dcf6f","Highlight for prolog":"0b5837dca8eea9ce9ec3","Highlight for properties":"a32c6119c223cbfcd2f0","Highlight for protobuf":"c9e3c5aedca3a24930e5","Highlight for puppet":"2b7ab07e5a39177638e3","Highlight for purebasic":"6ca9e3dfe1f22fda0d10","Highlight for python":"57c3fae587f0ee205e0d","Highlight for python-repl":"f6b9e9d66941dea4f18e","Highlight for q":"5bb1fc7a92441a3b2c70","Highlight for qml":"28f66d6ab372eeec3841","Highlight for r":"32816409b0e9cc00fc35","Highlight for reasonml":"047cc559cd12d12dabf2","Highlight for rib":"dc6490a02b858c270b63","Highlight for roboconf":"8e87992397b50bc6f442","Highlight for routeros":"033b89df13c82dec7f58","Highlight for rsl":"76cf41b691998bf1e6ac","Highlight for ruby":"eed17ce89306e27f9389","Highlight for ruleslanguage":"6fd11b43389f5d96036f","Highlight for rust":"371ab0613189a0fc70a6","Highlight for sas":"07d7fdcdf6596ad170eb","Highlight for scala":"1b1a4569e82c8fefad27","Highlight for scheme":"77f3438de8ad34613b91","Highlight for scilab":"dede30f7dfea3e0fad52","Highlight for scss":"cfc8913c0ea130b799bf","Highlight for shell":"f17588e20986e1c628e1","Highlight for smali":"f119904fc6beb3f1353c","Highlight for smalltalk":"605883911ed85dfa47e0","Highlight for sml":"a7fb1265917177564131","Highlight for sqf":"892f14be963df4e8ba24","Highlight for sql":"9918e9814aab9c59c998","Highlight for stan":"37eb16183e0fd2dd8df1","Highlight for stata":"7406eb9f3b61a51da664","Highlight for step21":"f64f0c54d86d8889dcac","Highlight for stylus":"03eabf435611c8db7ed8","Highlight for subunit":"4ead59f9806d135da7d7","Highlight for swift":"ff42c71c967b328563bc","Highlight for taggerscript":"e26d2db55a73fb74f5f1","Highlight for tap":"fa94ef36725444a4173d","Highlight for tcl":"630deea15f84590e33de","Highlight for thrift":"85291d10c23fbd08c75d","Highlight for tp":"9eebcd23a2fbe02b68ea","Highlight for twig":"803cd154e6b8d22129e4","Highlight for typescript":"ac2f5401b551aa62ec7f","Highlight for vala":"7e82af687c5ed7bbee75","Highlight for vbnet":"181eeefa30cddbfb480f","Highlight for vbscript":"55bd225e0365bee8e987","Highlight for vbscript-html":"216231cf8cc78919044a","Highlight for verilog":"f6cad3a6a24035f9f8f4","Highlight for vhdl":"016f001968561cf9190d","Highlight for vim":"a0d2c821c957af234b1d","Highlight for wasm":"f4bae77d039f1a6950d9","Highlight for wren":"1c00f4ba812640122cf6","Highlight for x86asm":"c565fe03bee16cec5f10","Highlight for xl":"8a5af9bb7c1d96ab1df3","Highlight for xml":"368c99c7718ca6a54d6a","Highlight for xquery":"67a2dc87693cb3f3629a","Highlight for yaml":"e48be411b629bf9abed5","Highlight for zephir":"945c09ed5e082ec8d1a3","vendors-node_modules_croppie_croppie_js-node_modules_croppie_croppie_css":"cb883e19d3bcef0c3f44","src_lib_croppie_ts-node_modules_croppie_croppie_css":"505d36cdeb01f3c766e7","src_lib_music-metadata-browser_index_js":"314a3328974687478140","vendors-node_modules_emoji-data-ios_emoji-data_json":"267424332c69e4f6e907","node_modules_opus-recorder_dist_recorder_min_js":"0ec14efb74b98eb5fa43","src_lib_lovely-chart_LovelyChart_js":"cd62ac30808e64513e4c","src_serviceWorker_index_ts":"3c48e9e67c9fa7ce7ccf","src_api_gramjs_worker_worker_ts":"bf65bc4179a09cc2177f","_a587":"56eb02d9f64d3170f9b4","node_modules_opus-recorder_dist_waveWorker_min_js":"ae52251d81d628ffd01f","src_lib_mediaWorker_index_worker_ts":"07314b8d52115cc25ab8","src_lib_fasttextweb_fasttext_worker_ts":"27dda7dc486bf7f49595"}[chunkId] + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + {"shared-components":"199536d82414f55cac67","BundleAuth":"cfc08968618e4ad54e98","src_components_common_MediaSpoiler_tsx-src_components_common_PasswordForm_tsx-src_components_-3662f6":"a061931b7804c44d851c","src_components_common_Composer_tsx-src_components_common_LinkField_tsx-src_components_common_-cced95":"ada1c55d404554c2c33d","BundleMain":"4d36d110dcffa9133246","BundleExtra":"584c84cb32dc2dac8087","BundleCalls":"9f5dc9e08c06e61be8ea","BundleStars":"a512ff66f804b63e2518","src_lib_croppie_ts-node_modules_croppie_croppie_css":"505d36cdeb01f3c766e7","src_lib_lovely-chart_LovelyChart_js":"cd62ac30808e64513e4c"}[chunkId] + ".css";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "telegram-t:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/css loading */
/******/ 	(() => {
/******/ 		if (typeof document === "undefined") return;
/******/ 		var createStylesheet = (chunkId, fullhref, oldTag, resolve, reject) => {
/******/ 			var linkTag = document.createElement("link");
/******/ 		
/******/ 			linkTag.rel = "stylesheet";
/******/ 			linkTag.type = "text/css";
/******/ 			if (__webpack_require__.nc) {
/******/ 				linkTag.nonce = __webpack_require__.nc;
/******/ 			}
/******/ 			var onLinkComplete = (event) => {
/******/ 				// avoid mem leaks.
/******/ 				linkTag.onerror = linkTag.onload = null;
/******/ 				if (event.type === 'load') {
/******/ 					resolve();
/******/ 				} else {
/******/ 					var errorType = event && event.type;
/******/ 					var realHref = event && event.target && event.target.href || fullhref;
/******/ 					var err = new Error("Loading CSS chunk " + chunkId + " failed.\n(" + errorType + ": " + realHref + ")");
/******/ 					err.name = "ChunkLoadError";
/******/ 					err.code = "CSS_CHUNK_LOAD_FAILED";
/******/ 					err.type = errorType;
/******/ 					err.request = realHref;
/******/ 					if (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)
/******/ 					reject(err);
/******/ 				}
/******/ 			}
/******/ 			linkTag.onerror = linkTag.onload = onLinkComplete;
/******/ 			linkTag.href = fullhref;
/******/ 		
/******/ 		
/******/ 			if (oldTag) {
/******/ 				oldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);
/******/ 			} else {
/******/ 				document.head.appendChild(linkTag);
/******/ 			}
/******/ 			return linkTag;
/******/ 		};
/******/ 		var findStylesheet = (href, fullhref) => {
/******/ 			var existingLinkTags = document.getElementsByTagName("link");
/******/ 			for(var i = 0; i < existingLinkTags.length; i++) {
/******/ 				var tag = existingLinkTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href") || tag.getAttribute("href");
/******/ 				if(tag.rel === "stylesheet" && (dataHref === href || dataHref === fullhref)) return tag;
/******/ 			}
/******/ 			var existingStyleTags = document.getElementsByTagName("style");
/******/ 			for(var i = 0; i < existingStyleTags.length; i++) {
/******/ 				var tag = existingStyleTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href");
/******/ 				if(dataHref === href || dataHref === fullhref) return tag;
/******/ 			}
/******/ 		};
/******/ 		var loadStylesheet = (chunkId) => {
/******/ 			return new Promise((resolve, reject) => {
/******/ 				var href = __webpack_require__.miniCssF(chunkId);
/******/ 				var fullhref = __webpack_require__.p + href;
/******/ 				if(findStylesheet(href, fullhref)) return resolve();
/******/ 				createStylesheet(chunkId, fullhref, null, resolve, reject);
/******/ 			});
/******/ 		}
/******/ 		// object to store loaded CSS chunks
/******/ 		var installedCssChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.miniCss = (chunkId, promises) => {
/******/ 			var cssChunks = {"shared-components":1,"BundleAuth":1,"src_components_common_MediaSpoiler_tsx-src_components_common_PasswordForm_tsx-src_components_-3662f6":1,"src_components_common_Composer_tsx-src_components_common_LinkField_tsx-src_components_common_-cced95":1,"BundleMain":1,"BundleExtra":1,"BundleCalls":1,"BundleStars":1,"src_lib_croppie_ts-node_modules_croppie_croppie_css":1,"src_lib_lovely-chart_LovelyChart_js":1};
/******/ 			if(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);
/******/ 			else if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {
/******/ 				promises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {
/******/ 					installedCssChunks[chunkId] = 0;
/******/ 				}, (e) => {
/******/ 					delete installedCssChunks[chunkId];
/******/ 					throw e;
/******/ 				}));
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no hmr
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunktelegram_t"] = self["webpackChunktelegram_t"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/index.tsx ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_handleError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/handleError */ "./src/util/handleError.ts");
/* harmony import */ var _util_setupServiceWorker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/setupServiceWorker */ "./src/util/setupServiceWorker.ts");
/* harmony import */ var _global_init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global/init */ "./src/global/init.ts");
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_betterView__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util/betterView */ "./src/util/betterView.ts");
/* harmony import */ var _util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util/establishMultitabRole */ "./src/util/establishMultitabRole.ts");
/* harmony import */ var _util_init__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util/init */ "./src/util/init.ts");
/* harmony import */ var _util_localization__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./util/localization */ "./src/util/localization/index.ts");
/* harmony import */ var _util_multitab__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./util/multitab */ "./src/util/multitab.ts");
/* harmony import */ var _util_permanentWebVersion__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./util/permanentWebVersion */ "./src/util/permanentWebVersion.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_updateWebmanifest__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./util/updateWebmanifest */ "./src/util/updateWebmanifest.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _components_App__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/App */ "./src/components/App.tsx");
/* harmony import */ var _assets_fonts_roboto_css__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./assets/fonts/roboto.css */ "./src/assets/fonts/roboto.css");
/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./styles/index.scss */ "./src/styles/index.scss");





















if (_config__WEBPACK_IMPORTED_MODULE_6__.STRICTERDOM_ENABLED) {
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_7__.enableStrict)();
}
init();
async function init() {
  if (_config__WEBPACK_IMPORTED_MODULE_6__.DEBUG) {
    // eslint-disable-next-line no-console
    console.log('>>> INIT');
  }
  if (!window.isCompatTestPassed) return;
  (0,_util_permanentWebVersion__WEBPACK_IMPORTED_MODULE_14__.checkAndAssignPermanentWebVersion)();
  await window.electron?.restoreLocalStorage();
  if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_17__.IS_MULTITAB_SUPPORTED) {
    (0,_util_multitab__WEBPACK_IMPORTED_MODULE_13__.subscribeToMultitabBroadcastChannel)();
    await (0,_util_multitab__WEBPACK_IMPORTED_MODULE_13__.requestGlobal)("10.9.39");
    localStorage.setItem(_config__WEBPACK_IMPORTED_MODULE_6__.MULTITAB_LOCALSTORAGE_KEY, '1');
    (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_15__.onBeforeUnload)(() => {
      const global = (0,_global__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
      if (Object.keys(global.byTabId).length === 1) {
        localStorage.removeItem(_config__WEBPACK_IMPORTED_MODULE_6__.MULTITAB_LOCALSTORAGE_KEY);
      }
    });
  }
  await (0,_util_init__WEBPACK_IMPORTED_MODULE_11__.initGlobal)();
  (0,_global__WEBPACK_IMPORTED_MODULE_5__.getActions)().init();
  (0,_global__WEBPACK_IMPORTED_MODULE_5__.getActions)().updateShouldEnableDebugLog();
  (0,_global__WEBPACK_IMPORTED_MODULE_5__.getActions)().updateShouldDebugExportedSenders();
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_5__.getGlobal)();
  (0,_util_localization__WEBPACK_IMPORTED_MODULE_12__.initLocalization)(global.settings.byKey.language, true);
  if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_17__.IS_MULTITAB_SUPPORTED) {
    (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_10__.subscribeToMasterChange)(isMasterTab => {
      (0,_global__WEBPACK_IMPORTED_MODULE_5__.getActions)().switchMultitabRole({
        isMasterTab
      }, {
        forceSyncOnIOs: true
      });
    });
    const shouldReestablishMasterToSelf = (0,_global__WEBPACK_IMPORTED_MODULE_5__.getGlobal)().authState !== 'authorizationStateReady';
    (0,_util_establishMultitabRole__WEBPACK_IMPORTED_MODULE_10__.establishMultitabRole)(shouldReestablishMasterToSelf);
  }
  if (_config__WEBPACK_IMPORTED_MODULE_6__.DEBUG) {
    // eslint-disable-next-line no-console
    console.log('>>> START INITIAL RENDER');
  }
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_7__.requestMutation)(() => {
    (0,_util_updateWebmanifest__WEBPACK_IMPORTED_MODULE_16__["default"])();
    _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_4__["default"].render( /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_3__["default"].createElement(_components_App__WEBPACK_IMPORTED_MODULE_18__["default"], null), document.getElementById('root'));
    (0,_util_betterView__WEBPACK_IMPORTED_MODULE_9__.betterView)();
  });
  if (_config__WEBPACK_IMPORTED_MODULE_6__.DEBUG) {
    // eslint-disable-next-line no-console
    console.log('>>> FINISH INITIAL RENDER');
  }
  if (_config__WEBPACK_IMPORTED_MODULE_6__.DEBUG) {
    document.addEventListener('dblclick', () => {
      // eslint-disable-next-line no-console
      console.warn('TAB STATE', (0,_global_selectors__WEBPACK_IMPORTED_MODULE_8__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_5__.getGlobal)()));
      // eslint-disable-next-line no-console
      console.warn('GLOBAL STATE', (0,_global__WEBPACK_IMPORTED_MODULE_5__.getGlobal)());
    });
  }
}
(0,_util_schedulers__WEBPACK_IMPORTED_MODULE_15__.onBeforeUnload)(() => {
  const actions = (0,_global__WEBPACK_IMPORTED_MODULE_5__.getActions)();
  actions.leaveGroupCall?.({
    isPageUnload: true
  });
  actions.hangUp?.({
    isPageUnload: true
  });
});
})();

/******/ })()
;
//# sourceMappingURL=main.25fbf2dbae259e524ec4.js.map