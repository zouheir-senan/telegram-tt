"use strict";
(self["webpackChunktelegram_t"] = self["webpackChunktelegram_t"] || []).push([["src_components_common_Composer_tsx-src_components_common_LinkField_tsx-src_components_common_-cced95"],{

/***/ "./src/components/calls/group/GroupCallTopPane.tsx":
/*!*********************************************************!*\
  !*** ./src/components/calls/group/GroupCallTopPane.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _global_selectors_calls__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors/calls */ "./src/global/selectors/calls.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _middle_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../middle/hooks/useHeaderPane */ "./src/components/middle/hooks/useHeaderPane.tsx");
/* harmony import */ var _common_AvatarList__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/AvatarList */ "./src/components/common/AvatarList.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _GroupCallTopPane_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./GroupCallTopPane.scss */ "./src/components/calls/group/GroupCallTopPane.scss");











const PREVIEW_AVATARS_COUNT = 3;
const GroupCallTopPane = ({
  chatId,
  isActive,
  className,
  groupCall,
  onPaneStateChange
}) => {
  const {
    requestMasterAndJoinGroupCall,
    subscribeToGroupCallUpdates
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const handleJoinGroupCall = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    requestMasterAndJoinGroupCall({
      chatId
    });
  }, [requestMasterAndJoinGroupCall, chatId]);
  const participants = groupCall?.participants;
  const fetchedParticipants = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!participants) {
      return [];
    }

    // No need for expensive global updates on users and chats, so we avoid them
    const usersById = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().users.byId;
    const chatsById = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().chats.byId;
    return Object.values(participants).slice(0, PREVIEW_AVATARS_COUNT).map(({
      id
    }) => usersById[id] || chatsById[id]).filter(Boolean);
  }, [participants]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!groupCall?.id) return undefined;
    if (!isActive && groupCall.isLoaded) return undefined;
    subscribeToGroupCallUpdates({
      id: groupCall.id,
      subscribed: true
    });
    return () => {
      subscribeToGroupCallUpdates({
        id: groupCall.id,
        subscribed: false
      });
    };
  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);
  const renderingParticipantCount = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_5__["default"])(groupCall?.participantsCount, true);
  const renderingFetchedParticipants = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_5__["default"])(fetchedParticipants, true);
  const isRendering = Boolean(groupCall && isActive);
  const {
    ref,
    shouldRender
  } = (0,_middle_hooks_useHeaderPane__WEBPACK_IMPORTED_MODULE_7__["default"])({
    isOpen: isRendering,
    onStateChange: onPaneStateChange
  });
  if (!shouldRender) return undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('GroupCallTopPane', className),
    onClick: handleJoinGroupCall
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "info"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "title"
  }, lang('VoipGroupVoiceChat')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "participants"
  }, lang('Participants', renderingParticipantCount ?? 0, 'i'))), Boolean(renderingFetchedParticipants?.length) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AvatarList__WEBPACK_IMPORTED_MODULE_8__["default"], {
    size: "small",
    peers: renderingFetchedParticipants,
    className: "avatars"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_9__["default"], {
    round: true,
    className: "join"
  }, lang('VoipChatJoin')));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectChat)(global, chatId);
  const groupCall = (0,_global_selectors_calls__WEBPACK_IMPORTED_MODULE_3__.selectChatGroupCall)(global, chatId);
  const activeGroupCallId = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectTabState)(global).isMasterTab ? global.groupCalls.activeGroupCallId : undefined;
  return {
    groupCall,
    isActive: activeGroupCallId !== groupCall?.id && Boolean(groupCall ? groupCall.participantsCount > 0 && groupCall.isLoaded : chat && chat.isCallNotEmpty && chat.isCallActive)
  };
})(GroupCallTopPane)));

/***/ }),

/***/ "./src/components/common/Audio.tsx":
/*!*****************************************!*\
  !*** ./src/components/common/Audio.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TINY_SCREEN_WIDTH_MQL: () => (/* binding */ TINY_SCREEN_WIDTH_MQL),
/* harmony export */   WITH_AVATAR_TINY_SCREEN_WIDTH_MQL: () => (/* binding */ WITH_AVATAR_TINY_SCREEN_WIDTH_MQL),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_audioPlayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/audioPlayer */ "./src/util/audioPlayer.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/captureEvents */ "./src/util/captureEvents.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_waveform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/waveform */ "./src/util/waveform.ts");
/* harmony import */ var _helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers/animatedAssets */ "./src/components/common/helpers/animatedAssets.ts");
/* harmony import */ var _helpers_documentInfo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers/documentInfo */ "./src/components/common/helpers/documentInfo.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _helpers_waveform__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./helpers/waveform */ "./src/components/common/helpers/waveform.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useAudioPlayer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../hooks/useAudioPlayer */ "./src/hooks/useAudioPlayer.ts");
/* harmony import */ var _hooks_useBuffering__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../hooks/useBuffering */ "./src/hooks/useBuffering.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../hooks/useMediaWithLoadProgress */ "./src/hooks/useMediaWithLoadProgress.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");
/* harmony import */ var _ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../ui/ProgressSpinner */ "./src/components/ui/ProgressSpinner.tsx");
/* harmony import */ var _AnimatedIcon__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./AnimatedIcon */ "./src/components/common/AnimatedIcon.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _Audio_scss__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Audio.scss */ "./src/components/common/Audio.scss");




























const TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 375px)');
const WITH_AVATAR_TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 410px)');
const AVG_VOICE_DURATION = 10;
// This is needed for browsers requiring user interaction before playing.
const PRELOAD = true;
const Audio = ({
  theme,
  message,
  senderTitle,
  uploadProgress,
  origin,
  date,
  noAvatars,
  className,
  isSelectable,
  isSelected,
  isDownloading,
  isTranscribing,
  isTranscriptionHidden,
  isTranscribed,
  isTranscriptionError,
  canDownload,
  canTranscribe,
  autoPlay,
  onHideTranscription,
  onPlay,
  onPause,
  onReadMedia,
  onCancelUpload,
  onDateClick
}) => {
  const {
    cancelMediaDownload,
    downloadMedia,
    transcribeAudio,
    openOneTimeMediaModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    content: {
      audio: contentAudio,
      voice,
      video
    },
    isMediaUnread
  } = message;
  const audio = contentAudio || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageWebPageAudio)(message);
  const media = voice || video || audio;
  const mediaSource = voice || video;
  const isVoice = Boolean(voice || video);
  const isSeeking = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  // eslint-disable-next-line no-null/no-null
  const seekerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_20__["default"])();
  const {
    isRtl
  } = lang;
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const [isActivated, setIsActivated] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const shouldLoad = isActivated || PRELOAD;
  const coverHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMediaHash)(media, 'pictogram');
  const coverBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_18__["default"])(coverHash, false, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl);
  const hasTtl = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.hasMessageTtl)(message);
  const isInOneTimeModal = origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.OneTimeModal;
  const trackType = isVoice ? hasTtl ? 'oneTimeVoice' : 'voice' : 'audio';
  const mediaData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_18__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMediaHash)(media, 'inline'), !shouldLoad, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMediaFormat)(media, 'inline'));
  const {
    loadProgress: downloadProgress
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_19__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMediaHash)(media, 'download'), !isDownloading, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMediaFormat)(media, 'download'));
  const handleForcePlay = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    setIsActivated(true);
    onPlay?.(message.id, message.chatId);
  });
  const handleTrackChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    setIsActivated(false);
  });
  const {
    isBuffered,
    bufferedRanges,
    bufferingHandlers,
    checkBuffering
  } = (0,_hooks_useBuffering__WEBPACK_IMPORTED_MODULE_16__["default"])();
  const noReset = isInOneTimeModal;
  const {
    isPlaying,
    playProgress,
    playPause,
    setCurrentTime,
    duration
  } = (0,_hooks_useAudioPlayer__WEBPACK_IMPORTED_MODULE_15__["default"])((0,_util_audioPlayer__WEBPACK_IMPORTED_MODULE_5__.makeTrackId)(message), (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMediaDuration)(message), trackType, mediaData, bufferingHandlers, undefined, checkBuffering, Boolean(isActivated || autoPlay), handleForcePlay, handleTrackChange, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isMessageLocal)(message) || hasTtl, undefined, onPause, noReset, hasTtl && !isInOneTimeModal);
  const reversePlayProgress = 1 - playProgress;
  const isOwn = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isOwnMessage)(message);
  const isReverse = hasTtl && isInOneTimeModal;
  const waveformCanvasRef = useWaveformCanvas(theme, mediaSource, isMediaUnread && !isOwn && !isReverse ? 1 : playProgress, isOwn, !noAvatars, isMobile, isReverse);
  const withSeekline = isPlaying || playProgress > 0 && playProgress < 1;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setIsActivated(isPlaying);
  }, [isPlaying]);
  const isLoadingForPlaying = isActivated && !isBuffered;
  const {
    isUploading,
    isTransferring,
    transferProgress
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMediaTransferState)(uploadProgress || downloadProgress, isLoadingForPlaying || isDownloading, uploadProgress !== undefined);
  const {
    shouldRender: shouldRenderSpinner,
    transitionClassNames: spinnerClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_21__["default"])(isTransferring);
  const shouldRenderCross = shouldRenderSpinner && (isLoadingForPlaying || isUploading);
  const handleButtonClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    if (isUploading) {
      onCancelUpload?.();
      return;
    }
    if (hasTtl) {
      openOneTimeMediaModal({
        message
      });
      onReadMedia?.();
      return;
    }
    if (!isPlaying) {
      onPlay?.(message.id, message.chatId);
    }
    (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().setAudioPlayerOrigin({
      origin
    });
    setIsActivated(!isActivated);
    playPause();
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (onReadMedia && isMediaUnread && (isPlaying || isDownloading)) {
      onReadMedia();
    }
  }, [isPlaying, isMediaUnread, onReadMedia, isDownloading]);
  const handleDownloadClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    if (isDownloading) {
      cancelMediaDownload({
        media
      });
    } else {
      downloadMedia({
        media,
        originMessage: message
      });
    }
  });
  const handleSeek = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(e => {
    if (isSeeking.current && seekerRef.current) {
      const {
        width,
        left
      } = seekerRef.current.getBoundingClientRect();
      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;
      e.stopPropagation(); // Prevent Slide-to-Reply activation
      // Prevent track skipping while seeking near end
      setCurrentTime(Math.max(Math.min(duration * ((clientX - left) / width), duration - 0.1), 0.001));
    }
  });
  const handleStartSeek = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(e => {
    if (e instanceof MouseEvent && e.button === 2) return;
    isSeeking.current = true;
    handleSeek(e);
  });
  const handleStopSeek = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    isSeeking.current = false;
  });
  const handleDateClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    onDateClick(message);
  });
  const handleTranscribe = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    transcribeAudio({
      chatId: message.chatId,
      messageId: message.id
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!seekerRef.current || !withSeekline || isInOneTimeModal) return undefined;
    return (0,_util_captureEvents__WEBPACK_IMPORTED_MODULE_7__.captureEvents)(seekerRef.current, {
      onCapture: handleStartSeek,
      onRelease: handleStopSeek,
      onClick: handleStopSeek,
      onDrag: handleSeek
    });
  }, [withSeekline, handleStartSeek, handleSeek, handleStopSeek, isInOneTimeModal]);
  function renderFirstLine() {
    if (isVoice) {
      return senderTitle || 'Voice';
    }
    const {
      title,
      fileName
    } = audio;
    return title || fileName;
  }
  function renderSecondLine() {
    if (isVoice) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "meta",
        dir: isRtl ? 'rtl' : undefined
      }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDuration)((voice || video).duration));
    }
    const {
      performer
    } = audio;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "meta",
      dir: isRtl ? 'rtl' : undefined
    }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDuration)(duration), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "bullet"
    }, "\u2022"), performer && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "performer",
      title: performer
    }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__["default"])(performer)), performer && senderTitle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "bullet"
    }, "\u2022"), senderTitle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      title: senderTitle
    }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__["default"])(senderTitle)));
  }
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('Audio', className, isInOneTimeModal && 'non-interactive', origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.Inline && 'inline', isOwn && origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.Inline && 'own', (origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.Search || origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.SharedMedia) && 'bigger', isSelected && 'audio-is-selected');
  const buttonClassNames = ['toogle-play-wrapper'];
  if (shouldRenderCross) {
    buttonClassNames.push('loading');
  } else {
    buttonClassNames.push(isPlaying ? 'pause' : 'play');
  }
  const contentClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('content', withSeekline && 'with-seekline');
  function renderWithTitle() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: contentClassName
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "content-row"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: "title",
      dir: "auto",
      title: renderFirstLine()
    }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__["default"])(renderFirstLine())), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "message-date"
    }, Boolean(date) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_23__["default"], {
      className: "date",
      onClick: handleDateClick
    }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatPastTimeShort)(lang, date * 1000)))), withSeekline && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "meta search-result",
      dir: isRtl ? 'rtl' : undefined
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "duration with-seekline",
      dir: "auto"
    }, playProgress < 1 && `${(0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDuration)(duration * playProgress, duration)}`), renderSeekline(playProgress, bufferedRanges, seekerRef)), !withSeekline && renderSecondLine());
  }
  function renderTooglePlayWrapper() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])(...buttonClassNames)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_22__["default"], {
      round: true,
      ripple: !isMobile,
      size: "smaller",
      className: "toggle-play",
      color: coverBlobUrl ? 'translucent-white' : 'primary',
      ariaLabel: isPlaying ? 'Pause audio' : 'Play audio',
      onClick: handleButtonClick,
      isRtl: lang.isRtl,
      backgroundImage: coverBlobUrl,
      nonInteractive: isInOneTimeModal
    }, !isInOneTimeModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_26__["default"], {
      name: "play"
    }), !isInOneTimeModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_26__["default"], {
      name: "pause"
    }), isInOneTimeModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AnimatedIcon__WEBPACK_IMPORTED_MODULE_25__["default"], {
      className: "flame",
      tgsUrl: _helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_10__.LOCAL_TGS_URLS.Flame,
      nonInteractive: true,
      noLoop: false,
      size: 40
    })), hasTtl && !isInOneTimeModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_26__["default"], {
      name: "view-once"
    }));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: fullClassName,
    dir: lang.isRtl ? 'rtl' : 'ltr'
  }, isSelectable && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-select-control"
  }, isSelected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_26__["default"], {
    name: "select"
  })), renderTooglePlayWrapper(), shouldRenderSpinner && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('media-loading', spinnerClassNames, shouldRenderCross && 'interactive')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_24__["default"], {
    progress: transferProgress,
    transparent: true,
    withColor: true,
    size: "m",
    onClick: shouldRenderCross ? handleButtonClick : undefined,
    noCross: !shouldRenderCross
  })), isInOneTimeModal && !shouldRenderSpinner && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('media-loading')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_24__["default"], {
    progress: playProgress,
    transparent: true,
    size: "m",
    noCross: true,
    rotationOffset: 3 / 4
  })), audio && canDownload && !isUploading && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_22__["default"], {
    round: true,
    size: "tiny",
    className: "download-button",
    ariaLabel: isDownloading ? 'Cancel download' : 'Download',
    onClick: handleDownloadClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_26__["default"], {
    name: isDownloading ? 'close' : 'arrow-down'
  })), origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.Search && renderWithTitle(), origin !== _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.Search && audio && renderAudio(lang, audio, duration, isPlaying, playProgress, bufferedRanges, seekerRef, isDownloading || isUploading, date, transferProgress, onDateClick ? handleDateClick : undefined), origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.SharedMedia && mediaSource && renderWithTitle(), (origin === _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.Inline || isInOneTimeModal || isTranscribed) && mediaSource && renderVoice(mediaSource, seekerRef, waveformCanvasRef, hasTtl ? reversePlayProgress : playProgress, isMediaUnread, isTranscribing, isTranscriptionHidden, isTranscribed, isTranscriptionError, canTranscribe ? handleTranscribe : undefined, onHideTranscription, origin));
};
function getSeeklineSpikeAmounts(isMobile, withAvatar) {
  return {
    MIN_SPIKES: isMobile ? TINY_SCREEN_WIDTH_MQL.matches ? 16 : 20 : 25,
    MAX_SPIKES: isMobile ? TINY_SCREEN_WIDTH_MQL.matches ? 35 : withAvatar && WITH_AVATAR_TINY_SCREEN_WIDTH_MQL.matches ? 40 : 45 : 75
  };
}
function renderAudio(lang, audio, duration, isPlaying, playProgress, bufferedRanges, seekerRef, showProgress, date, progress, handleDateClick) {
  const {
    title,
    performer,
    fileName
  } = audio;
  const showSeekline = isPlaying || playProgress > 0 && playProgress < 1;
  const {
    isRtl
  } = lang;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "content"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "title",
    dir: "auto",
    title: title
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__["default"])(title || fileName)), showSeekline && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "meta",
    dir: isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "duration with-seekline",
    dir: "auto"
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDuration)(duration * playProgress, duration)), renderSeekline(playProgress, bufferedRanges, seekerRef)), !showSeekline && showProgress && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "meta",
    dir: isRtl ? 'rtl' : undefined
  }, progress ? `${(0,_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_11__.getFileSizeString)(audio.size * progress)} / ` : undefined, (0,_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_11__.getFileSizeString)(audio.size)), !showSeekline && !showProgress && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "meta",
    dir: isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "duration",
    dir: "auto"
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDuration)(duration)), performer && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "bullet"
  }, "\u2022"), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "performer",
    dir: "auto",
    title: performer
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__["default"])(performer))), Boolean(date) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "bullet"
  }, "\u2022"), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_23__["default"], {
    className: "date",
    onClick: handleDateClick
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDateTime)(lang, date * 1000, true)))));
}
function renderVoice(media, seekerRef, waveformCanvasRef, playProgress, isMediaUnread, isTranscribing, isTranscriptionHidden, isTranscribed, isTranscriptionError, onClickTranscribe, onHideTranscription, origin) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "content"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "waveform-wrapper"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "waveform",
    draggable: false,
    ref: seekerRef
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: waveformCanvasRef
  })), onClickTranscribe &&
  /*#__PURE__*/
  // eslint-disable-next-line react/jsx-no-bind
  _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_22__["default"], {
    onClick: () => {
      if ((isTranscribed || isTranscriptionError) && onHideTranscription) {
        onHideTranscription(!isTranscriptionHidden);
      } else if (!isTranscribing) {
        onClickTranscribe();
      }
    }
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_26__["default"], {
    name: isTranscribed || isTranscriptionError ? 'down' : 'transcribe',
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('transcribe-icon', (isTranscribed || isTranscriptionError) && !isTranscriptionHidden && 'transcribe-shown')
  }), isTranscribing && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    viewBox: "0 0 32 24",
    className: "loading-svg"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("rect", {
    className: "loading-rect",
    fill: "transparent",
    width: "32",
    height: "24",
    "stroke-width": "3",
    "stroke-linejoin": "round",
    rx: "6",
    ry: "6",
    stroke: "white",
    "stroke-dashoffset": "1",
    "stroke-dasharray": "32,68"
  })))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])('voice-duration', origin !== _types__WEBPACK_IMPORTED_MODULE_3__.AudioOrigin.OneTimeModal && isMediaUnread && 'unread'),
    dir: "auto"
  }, playProgress === 0 || playProgress === 1 ? (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDuration)(media.duration) : (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_8__.formatMediaDuration)(media.duration * playProgress)));
}
function useWaveformCanvas(theme, media, playProgress = 0, isOwn = false, withAvatar = false, isMobile = false, isReverse = false) {
  // eslint-disable-next-line no-null/no-null
  const canvasRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    data: spikes,
    peak
  } = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!media) {
      return undefined;
    }
    const {
      waveform,
      duration
    } = media;
    if (!waveform) {
      return {
        data: new Array(Math.min(duration, _helpers_waveform__WEBPACK_IMPORTED_MODULE_13__.MAX_EMPTY_WAVEFORM_POINTS)).fill(0),
        peak: 0
      };
    }
    const {
      MIN_SPIKES,
      MAX_SPIKES
    } = getSeeklineSpikeAmounts(isMobile, withAvatar);
    const durationFactor = Math.min(duration / AVG_VOICE_DURATION, 1);
    const spikesCount = Math.round(MIN_SPIKES + (MAX_SPIKES - MIN_SPIKES) * durationFactor);
    const decodedWaveform = (0,_util_waveform__WEBPACK_IMPORTED_MODULE_9__.decodeWaveform)(new Uint8Array(waveform));
    return (0,_util_waveform__WEBPACK_IMPORTED_MODULE_9__.interpolateArray)(decodedWaveform, spikesCount);
  }, [isMobile, media, withAvatar]) || {};
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const canvas = canvasRef.current;
    if (!canvas || !spikes || peak === undefined) {
      return;
    }
    const fillColor = theme === 'dark' ? '#494A78' : '#ADD3F7';
    const fillOwnColor = theme === 'dark' ? '#B7ABED' : '#AEDFA4';
    const progressFillColor = theme === 'dark' ? '#8774E1' : '#3390EC';
    const progressFillOwnColor = theme === 'dark' ? '#FFFFFF' : '#4FAE4E';
    const fillStyle = isOwn ? fillOwnColor : fillColor;
    const progressFillStyle = isOwn ? progressFillOwnColor : progressFillColor;
    (0,_helpers_waveform__WEBPACK_IMPORTED_MODULE_13__.renderWaveform)(canvas, spikes, isReverse ? 1 - playProgress : playProgress, {
      peak,
      fillStyle,
      progressFillStyle
    });
  }, [isOwn, peak, playProgress, spikes, theme, isReverse]);
  return canvasRef;
}
function renderSeekline(playProgress, bufferedRanges, seekerRef) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "seekline",
    ref: seekerRef
  }, bufferedRanges.map(({
    start,
    end
  }) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "seekline-buffered-progress",
    style: `left: ${start * 100}%; right: ${100 - end * 100}%`
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "seekline-play-progress"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("i", {
    className: "seekline-play-progress-inner",
    style: `transform: translateX(${playProgress * 100}%)`
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "seekline-thumb"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("i", {
    className: "seekline-thumb-inner",
    style: `transform: translateX(${playProgress * 100}%)`
  })));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Audio));

/***/ }),

/***/ "./src/components/common/CalendarModal.async.tsx":
/*!*******************************************************!*\
  !*** ./src/components/common/CalendarModal.async.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const CalendarModalAsync = props => {
  const {
    isOpen
  } = props;
  const CalendarModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'CalendarModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return CalendarModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(CalendarModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CalendarModalAsync);

/***/ }),

/***/ "./src/components/common/ChatForumLastMessage.tsx":
/*!********************************************************!*\
  !*** ./src/components/common/ChatForumLastMessage.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useFastClick__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useFastClick */ "./src/hooks/useFastClick.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _TopicIcon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TopicIcon */ "./src/components/common/TopicIcon.tsx");
/* harmony import */ var _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ChatForumLastMessage.module.scss */ "./src/components/common/ChatForumLastMessage.module.scss");











const NO_CORNER_THRESHOLD = Number(_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.REM);
const MAX_TOPICS = 3;
const ChatForumLastMessage = ({
  chat,
  topics,
  renderLastMessage,
  observeIntersection
}) => {
  const {
    openThread
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const lastMessageRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const mainColumnRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const [lastActiveTopic, ...otherTopics] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!topics) {
      return [];
    }
    return (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getOrderedTopics)(Object.values(topics), undefined, true).slice(0, MAX_TOPICS);
  }, [topics]);
  const [isReversedCorner, setIsReversedCorner] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [overwrittenWidth, setOverwrittenWidth] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const {
    handleClick: handleOpenTopicClick,
    handleMouseDown: handleOpenTopicMouseDown
  } = (0,_hooks_useFastClick__WEBPACK_IMPORTED_MODULE_7__.useFastClick)(e => {
    if (lastActiveTopic.unreadCount === 0 || chat.isForumAsMessages) return;
    e.stopPropagation();
    e.preventDefault();
    openThread({
      chatId: chat.id,
      threadId: lastActiveTopic.id,
      shouldReplaceHistory: true,
      noForumTopicPanel: (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__.getIsMobile)()
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const lastMessageElement = lastMessageRef.current;
    const mainColumnElement = mainColumnRef.current;
    if (!lastMessageElement || !mainColumnElement) return;
    const lastMessageWidth = lastMessageElement.offsetWidth;
    const mainColumnWidth = mainColumnElement.offsetWidth;
    if (Math.abs(lastMessageWidth - mainColumnWidth) < NO_CORNER_THRESHOLD) {
      setOverwrittenWidth(Math.max(lastMessageWidth, mainColumnWidth));
    } else {
      setOverwrittenWidth(undefined);
    }
    setIsReversedCorner(lastMessageWidth > mainColumnWidth);
  }, [lastActiveTopic, renderLastMessage]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].root, isReversedCorner && _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].reverseCorner, overwrittenWidth && _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].overwrittenWidth),
    dir: lang.isRtl ? 'rtl' : undefined,
    style: overwrittenWidth ? `--overwritten-width: ${overwrittenWidth}px` : undefined
  }, lastActiveTopic && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].titleRow
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].mainColumn, lastActiveTopic.unreadCount && _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].unread),
    ref: mainColumnRef,
    onClick: handleOpenTopicClick,
    onMouseDown: handleOpenTopicMouseDown
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TopicIcon__WEBPACK_IMPORTED_MODULE_9__["default"], {
    topic: lastActiveTopic,
    observeIntersection: observeIntersection
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].title
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__["default"])(lastActiveTopic.title)), !overwrittenWidth && isReversedCorner && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].afterWrapper
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].after
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].otherColumns
  }, otherTopics.map(topic => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].otherColumn, topic.unreadCount && _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].unread),
    key: topic.id
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TopicIcon__WEBPACK_IMPORTED_MODULE_9__["default"], {
    topic: topic,
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].otherColumnIcon,
    observeIntersection: observeIntersection
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].otherColumnTitle
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_5__["default"])(topic.title))))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].ellipsis
  })), !lastActiveTopic && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].titleRow, _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].loading)
  }, lang('Loading')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].lastMessage, lastActiveTopic?.unreadCount && _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].unread),
    ref: lastMessageRef,
    onClick: handleOpenTopicClick,
    onMouseDown: handleOpenTopicMouseDown
  }, renderLastMessage(), !overwrittenWidth && !isReversedCorner && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].afterWrapper
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatForumLastMessage_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].after
  }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ChatForumLastMessage));

/***/ }),

/***/ "./src/components/common/Composer.tsx":
/*!********************************************!*\
  !*** ./src/components/common/Composer.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _global_selectors_limits__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../global/selectors/limits */ "./src/global/selectors/limits.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_deeplink__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/deeplink */ "./src/util/deeplink.ts");
/* harmony import */ var _util_deepLinkParser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/deepLinkParser */ "./src/util/deepLinkParser.ts");
/* harmony import */ var _util_deleteLastCharacterOutsideSelection__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/deleteLastCharacterOutsideSelection */ "./src/util/deleteLastCharacterOutsideSelection.ts");
/* harmony import */ var _util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../util/emoji/customEmojiManager */ "./src/util/emoji/customEmojiManager.ts");
/* harmony import */ var _util_focusEditableElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../util/focusEditableElement */ "./src/util/focusEditableElement.ts");
/* harmony import */ var _util_memo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../util/memo */ "./src/util/memo.ts");
/* harmony import */ var _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../util/parseHtmlAsFormattedText */ "./src/util/parseHtmlAsFormattedText.ts");
/* harmony import */ var _util_selection__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../util/selection */ "./src/util/selection.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _util_windowSize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../util/windowSize */ "./src/util/windowSize.ts");
/* harmony import */ var _middle_composer_helpers_applyIosAutoCapitalizationFix__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../middle/composer/helpers/applyIosAutoCapitalizationFix */ "./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts");
/* harmony import */ var _middle_composer_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../middle/composer/helpers/buildAttachment */ "./src/components/middle/composer/helpers/buildAttachment.ts");
/* harmony import */ var _middle_composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../middle/composer/helpers/customEmoji */ "./src/components/middle/composer/helpers/customEmoji.ts");
/* harmony import */ var _middle_composer_helpers_selection__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../middle/composer/helpers/selection */ "./src/components/middle/composer/helpers/selection.ts");
/* harmony import */ var _helpers_peerColor__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../hooks/schedulers/useInterval */ "./src/hooks/schedulers/useInterval.ts");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useGetSelectionRange__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../../hooks/useGetSelectionRange */ "./src/hooks/useGetSelectionRange.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useSchedule__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../hooks/useSchedule */ "./src/hooks/useSchedule.tsx");
/* harmony import */ var _hooks_useSendMessageAction__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../../hooks/useSendMessageAction */ "./src/hooks/useSendMessageAction.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _hooks_useStateRef__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../../hooks/useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _middle_composer_hooks_useAttachmentModal__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../middle/composer/hooks/useAttachmentModal */ "./src/components/middle/composer/hooks/useAttachmentModal.ts");
/* harmony import */ var _middle_composer_hooks_useChatCommandTooltip__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../middle/composer/hooks/useChatCommandTooltip */ "./src/components/middle/composer/hooks/useChatCommandTooltip.ts");
/* harmony import */ var _middle_composer_hooks_useClipboardPaste__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../middle/composer/hooks/useClipboardPaste */ "./src/components/middle/composer/hooks/useClipboardPaste.ts");
/* harmony import */ var _middle_composer_hooks_useCustomEmojiTooltip__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../middle/composer/hooks/useCustomEmojiTooltip */ "./src/components/middle/composer/hooks/useCustomEmojiTooltip.ts");
/* harmony import */ var _middle_composer_hooks_useDraft__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../middle/composer/hooks/useDraft */ "./src/components/middle/composer/hooks/useDraft.ts");
/* harmony import */ var _middle_composer_hooks_useEditing__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../middle/composer/hooks/useEditing */ "./src/components/middle/composer/hooks/useEditing.ts");
/* harmony import */ var _middle_composer_hooks_useEmojiTooltip__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../middle/composer/hooks/useEmojiTooltip */ "./src/components/middle/composer/hooks/useEmojiTooltip.ts");
/* harmony import */ var _middle_composer_hooks_useInlineBotTooltip__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../middle/composer/hooks/useInlineBotTooltip */ "./src/components/middle/composer/hooks/useInlineBotTooltip.ts");
/* harmony import */ var _middle_composer_hooks_useMentionTooltip__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../middle/composer/hooks/useMentionTooltip */ "./src/components/middle/composer/hooks/useMentionTooltip.ts");
/* harmony import */ var _middle_composer_hooks_useStickerTooltip__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../middle/composer/hooks/useStickerTooltip */ "./src/components/middle/composer/hooks/useStickerTooltip.ts");
/* harmony import */ var _middle_composer_hooks_useVoiceRecording__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../middle/composer/hooks/useVoiceRecording */ "./src/components/middle/composer/hooks/useVoiceRecording.ts");
/* harmony import */ var _middle_composer_AttachmentModal_async__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../middle/composer/AttachmentModal.async */ "./src/components/middle/composer/AttachmentModal.async.tsx");
/* harmony import */ var _middle_composer_AttachMenu__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../middle/composer/AttachMenu */ "./src/components/middle/composer/AttachMenu.tsx");
/* harmony import */ var _middle_composer_BotCommandMenu_async__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../middle/composer/BotCommandMenu.async */ "./src/components/middle/composer/BotCommandMenu.async.tsx");
/* harmony import */ var _middle_composer_BotKeyboardMenu__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../middle/composer/BotKeyboardMenu */ "./src/components/middle/composer/BotKeyboardMenu.tsx");
/* harmony import */ var _middle_composer_BotMenuButton__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../middle/composer/BotMenuButton */ "./src/components/middle/composer/BotMenuButton.tsx");
/* harmony import */ var _middle_composer_ChatCommandTooltip_async__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../middle/composer/ChatCommandTooltip.async */ "./src/components/middle/composer/ChatCommandTooltip.async.tsx");
/* harmony import */ var _middle_composer_ComposerEmbeddedMessage__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../middle/composer/ComposerEmbeddedMessage */ "./src/components/middle/composer/ComposerEmbeddedMessage.tsx");
/* harmony import */ var _middle_composer_CustomEmojiTooltip_async__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../middle/composer/CustomEmojiTooltip.async */ "./src/components/middle/composer/CustomEmojiTooltip.async.tsx");
/* harmony import */ var _middle_composer_CustomSendMenu_async__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../middle/composer/CustomSendMenu.async */ "./src/components/middle/composer/CustomSendMenu.async.tsx");
/* harmony import */ var _middle_composer_DropArea_async__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../middle/composer/DropArea.async */ "./src/components/middle/composer/DropArea.async.tsx");
/* harmony import */ var _middle_composer_EmojiTooltip_async__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../middle/composer/EmojiTooltip.async */ "./src/components/middle/composer/EmojiTooltip.async.tsx");
/* harmony import */ var _middle_composer_InlineBotTooltip_async__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../middle/composer/InlineBotTooltip.async */ "./src/components/middle/composer/InlineBotTooltip.async.tsx");
/* harmony import */ var _middle_composer_MentionTooltip_async__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../middle/composer/MentionTooltip.async */ "./src/components/middle/composer/MentionTooltip.async.tsx");
/* harmony import */ var _middle_composer_MessageInput__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../middle/composer/MessageInput */ "./src/components/middle/composer/MessageInput.tsx");
/* harmony import */ var _middle_composer_PollModal_async__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../middle/composer/PollModal.async */ "./src/components/middle/composer/PollModal.async.tsx");
/* harmony import */ var _middle_composer_SendAsMenu_async__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ../middle/composer/SendAsMenu.async */ "./src/components/middle/composer/SendAsMenu.async.tsx");
/* harmony import */ var _middle_composer_StickerTooltip_async__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ../middle/composer/StickerTooltip.async */ "./src/components/middle/composer/StickerTooltip.async.tsx");
/* harmony import */ var _middle_composer_SymbolMenuButton__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ../middle/composer/SymbolMenuButton */ "./src/components/middle/composer/SymbolMenuButton.tsx");
/* harmony import */ var _middle_composer_WebPagePreview__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ../middle/composer/WebPagePreview */ "./src/components/middle/composer/WebPagePreview.tsx");
/* harmony import */ var _middle_message_MessageEffect__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ../middle/message/MessageEffect */ "./src/components/middle/message/MessageEffect.tsx");
/* harmony import */ var _middle_message_reactions_ReactionSelector__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ../middle/message/reactions/ReactionSelector */ "./src/components/middle/message/reactions/ReactionSelector.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ../ui/ResponsiveHoverButton */ "./src/components/ui/ResponsiveHoverButton.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _Avatar__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _reactions_ReactionAnimatedEmoji__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./reactions/ReactionAnimatedEmoji */ "./src/components/common/reactions/ReactionAnimatedEmoji.tsx");
/* harmony import */ var _Composer_scss__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./Composer.scss */ "./src/components/common/Composer.scss");


















































































var MainButtonState = /*#__PURE__*/function (MainButtonState) {
  MainButtonState["Send"] = "send";
  MainButtonState["Record"] = "record";
  MainButtonState["Edit"] = "edit";
  MainButtonState["Schedule"] = "schedule";
  MainButtonState["Forward"] = "forward";
  MainButtonState["SendOneTime"] = "sendOneTime";
  return MainButtonState;
}(MainButtonState || {});
const VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';
// When voice recording is active, composer placeholder will hide to prevent overlapping
const SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px

const MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;
const SELECT_MODE_TRANSITION_MS = 200;
const SENDING_ANIMATION_DURATION = 350;
const MOUNT_ANIMATION_DURATION = 430;
const Composer = ({
  type,
  isOnActiveTab,
  dropAreaState,
  isInScheduledList,
  canScheduleUntilOnline,
  isReady,
  isMobile,
  onDropHide,
  onFocus,
  onBlur,
  editingMessage,
  chatId,
  threadId,
  storyId,
  currentMessageList,
  messageListType,
  draft,
  chat,
  chatFullInfo,
  replyToTopic,
  isForCurrentMessageList,
  isCurrentUserPremium,
  canSendVoiceByPrivacy,
  isChatWithBot,
  isChatWithSelf,
  isChannel,
  fileSizeLimit,
  isRightColumnShown,
  isSelectModeActive,
  isReactionPickerOpen,
  isForwarding,
  pollModal,
  botKeyboardMessageId,
  botKeyboardPlaceholder,
  inputPlaceholder,
  withScheduledButton,
  stickersForEmoji,
  customEmojiForEmoji,
  topInlineBotIds,
  currentUserId,
  currentUser,
  captionLimit,
  contentToBeScheduled,
  shouldSuggestStickers,
  shouldSuggestCustomEmoji,
  baseEmojiKeywords,
  emojiKeywords,
  recentEmojis,
  inlineBots,
  isInlineBotLoading,
  botCommands,
  sendAsUser,
  sendAsChat,
  sendAsId,
  editingDraft,
  requestedDraft,
  requestedDraftFiles,
  botMenuButton,
  attachBots,
  attachMenuPeerType,
  attachmentSettings,
  theme,
  slowMode,
  shouldUpdateStickerSetOrder,
  editableInputCssSelector,
  editableInputId,
  inputId,
  className,
  availableReactions,
  topReactions,
  canBuyPremium,
  canPlayAnimatedEmojis,
  shouldCollectDebugLogs,
  sentStoryReaction,
  stealthMode,
  canSendOneTimeMedia,
  quickReplyMessages,
  quickReplies,
  canSendQuickReplies,
  onForward,
  webPagePreview,
  noWebPage,
  isContactRequirePremium,
  effect,
  effectReactions,
  areEffectsSupported,
  canPlayEffect,
  shouldPlayEffect,
  maxMessageLength
}) => {
  const {
    sendMessage,
    clearDraft,
    showDialog,
    forwardMessages,
    openPollModal,
    closePollModal,
    loadScheduledHistory,
    openThread,
    addRecentEmoji,
    sendInlineBotResult,
    loadSendAs,
    resetOpenChatWithDraft,
    callAttachBot,
    addRecentCustomEmoji,
    showNotification,
    showAllowedMessageTypesNotification,
    openStoryReactionPicker,
    closeReactionPicker,
    sendStoryReaction,
    editMessage,
    updateAttachmentSettings,
    saveEffectInDraft,
    setReactionEffect,
    hideEffectInComposer
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_36__["default"])();

  // eslint-disable-next-line no-null/no-null
  const inputRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);

  // eslint-disable-next-line no-null/no-null
  const storyReactionRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [getHtml, setHtml] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)('');
  const [isMounted, setIsMounted] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const getSelectionRange = (0,_hooks_useGetSelectionRange__WEBPACK_IMPORTED_MODULE_34__["default"])(editableInputCssSelector);
  const lastMessageSendTimeSeconds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const prevDropAreaState = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_37__["default"])(dropAreaState);
  const {
    width: windowWidth
  } = _util_windowSize__WEBPACK_IMPORTED_MODULE_20__["default"].get();
  const isInMessageList = type === 'messageList';
  const isInStoryViewer = type === 'story';
  const sendAsPeerIds = isInMessageList ? chat?.sendAsPeerIds : undefined;
  const canShowSendAs = sendAsPeerIds && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some(peer => peer.id === currentUserId));
  // Prevent Symbol Menu from closing when calendar is open
  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const sendMessageAction = (0,_hooks_useSendMessageAction__WEBPACK_IMPORTED_MODULE_39__["default"])(chatId, threadId);
  const [isInputHasFocus, markInputHasFocus, unmarkInputHasFocus] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const [isAttachMenuOpen, onAttachMenuOpen, onAttachMenuClose] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const canMediaBeReplaced = editingMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.canEditMedia)(editingMessage);
  const {
    emojiSet,
    members: groupChatMembers,
    botCommands: chatBotCommands
  } = chatFullInfo || {};
  const chatEmojiSetId = emojiSet?.id;
  const isSentStoryReactionHeart = sentStoryReaction && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isSameReaction)(sentStoryReaction, _config__WEBPACK_IMPORTED_MODULE_3__.HEART_REACTION);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_13__.processMessageInputForCustomEmoji, [getHtml]);
  const customEmojiNotificationNumber = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  const [requestCalendar, calendar] = (0,_hooks_useSchedule__WEBPACK_IMPORTED_MODULE_38__["default"])(isInMessageList && canScheduleUntilOnline, cancelForceShowSymbolMenu);
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_29__["default"])(() => {
    setIsMounted(true);
  }, MOUNT_ANIMATION_DURATION);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isInMessageList) return;
    closeReactionPicker();
  }, [isInMessageList, storyId]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    lastMessageSendTimeSeconds.current = undefined;
  }, [chatId]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (chatId && isReady && !isInStoryViewer) {
      loadScheduledHistory({
        chatId
      });
    }
  }, [isReady, chatId, threadId, isInStoryViewer]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const isChannelWithProfiles = isChannel && chat?.areProfilesShown;
    if (chatId && chat && !sendAsPeerIds && isReady && ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatSuperGroup)(chat) || isChannelWithProfiles)) {
      loadSendAs({
        chatId
      });
    }
  }, [chat, chatId, isChannel, isReady, loadSendAs, sendAsPeerIds]);
  const shouldAnimateSendAsButtonRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_42__["default"])(([prevChatId, prevSendAsPeerIds]) => {
    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat
    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);
  }, [chatId, sendAsPeerIds]);
  const [attachments, setAttachments] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const hasAttachments = Boolean(attachments.length);
  const [nextText, setNextText] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const {
    canSendStickers,
    canSendGifs,
    canAttachMedia,
    canAttachPolls,
    canAttachEmbedLinks,
    canSendVoices,
    canSendPlainText,
    canSendAudios,
    canSendVideos,
    canSendPhotos,
    canSendDocuments
  } = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getAllowedAttachmentOptions)(chat, chatFullInfo, isChatWithBot, isInStoryViewer), [chat, chatFullInfo, isChatWithBot, isInStoryViewer]);
  const isNeedPremium = isContactRequirePremium && isInStoryViewer;
  const isSendTextBlocked = isNeedPremium || !canSendPlainText;
  const hasWebPagePreview = !hasAttachments && canAttachEmbedLinks && !noWebPage && Boolean(webPagePreview);
  const isComposerBlocked = isSendTextBlocked && !editingMessage;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!hasWebPagePreview) {
      updateAttachmentSettings({
        isInvertedMedia: undefined
      });
    }
  }, [hasWebPagePreview]);
  const insertHtmlAndUpdateCursor = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((newHtml, inInputId = editableInputId) => {
    if (inInputId === editableInputId && isComposerBlocked) return;
    const selection = window.getSelection();
    let messageInput;
    if (inInputId === editableInputId) {
      messageInput = document.querySelector(editableInputCssSelector);
    } else {
      messageInput = document.getElementById(inInputId);
    }
    if (selection.rangeCount) {
      const selectionRange = selection.getRangeAt(0);
      if ((0,_middle_composer_helpers_selection__WEBPACK_IMPORTED_MODULE_24__.isSelectionInsideInput)(selectionRange, inInputId)) {
        (0,_util_selection__WEBPACK_IMPORTED_MODULE_17__.insertHtmlInSelection)(newHtml);
        messageInput.dispatchEvent(new Event('input', {
          bubbles: true
        }));
        return;
      }
    }
    setHtml(`${getHtml()}${newHtml}`);

    // If selection is outside of input, set cursor at the end of input
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestNextMutation)(() => {
      (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_14__["default"])(messageInput);
    });
  });
  const insertTextAndUpdateCursor = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((text, inInputId = editableInputId) => {
    const newHtml = (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_26__["default"])(text, ['escape_html', 'emoji_html', 'br_html']).join('').replace(/\u200b+/g, '\u200b');
    insertHtmlAndUpdateCursor(newHtml, inInputId);
  });
  const insertFormattedTextAndUpdateCursor = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((text, inInputId = editableInputId) => {
    const newHtml = (0,_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_27__.getTextWithEntitiesAsHtml)(text);
    insertHtmlAndUpdateCursor(newHtml, inInputId);
  });
  const insertCustomEmojiAndUpdateCursor = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((emoji, inInputId = editableInputId) => {
    insertHtmlAndUpdateCursor((0,_middle_composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_23__.buildCustomEmojiHtml)(emoji), inInputId);
  });
  const insertNextText = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    if (!nextText) return;
    insertFormattedTextAndUpdateCursor(nextText, editableInputId);
    setNextText(undefined);
  });
  const {
    shouldSuggestCompression,
    shouldForceCompression,
    shouldForceAsFile,
    handleAppendFiles,
    handleFileSelect,
    onCaptionUpdate,
    handleClearAttachments,
    handleSetAttachments
  } = (0,_middle_composer_hooks_useAttachmentModal__WEBPACK_IMPORTED_MODULE_43__["default"])({
    attachments,
    setHtml,
    setAttachments,
    fileSizeLimit,
    chatId,
    canSendAudios,
    canSendVideos,
    canSendPhotos,
    canSendDocuments,
    insertNextText,
    editedMessage: editingMessage
  });
  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const [isHoverDisabled, disableHover, enableHover] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_33__["default"])();
  const {
    startRecordingVoice,
    stopRecordingVoice,
    pauseRecordingVoice,
    activeVoiceRecording,
    currentRecordTime,
    recordButtonRef: mainButtonRef,
    startRecordTimeRef,
    isViewOnceEnabled,
    setIsViewOnceEnabled,
    toogleViewOnceEnabled
  } = (0,_middle_composer_hooks_useVoiceRecording__WEBPACK_IMPORTED_MODULE_53__["default"])();
  const shouldSendRecordingStatus = isForCurrentMessageList && !isInStoryViewer;
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_28__["default"])(() => {
    sendMessageAction({
      type: 'recordAudio'
    });
  }, shouldSendRecordingStatus ? activeVoiceRecording && _config__WEBPACK_IMPORTED_MODULE_3__.SEND_MESSAGE_ACTION_INTERVAL : undefined);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isForCurrentMessageList || isInStoryViewer) return;
    if (!activeVoiceRecording) {
      sendMessageAction({
        type: 'cancel'
      });
    }
  }, [activeVoiceRecording, isForCurrentMessageList, isInStoryViewer, sendMessageAction]);
  const isEditingRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_41__.useStateRef)(Boolean(editingMessage));
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isForCurrentMessageList || isInStoryViewer) return;
    if (getHtml() && !isEditingRef.current) {
      sendMessageAction({
        type: 'typing'
      });
    }
  }, [getHtml, isEditingRef, isForCurrentMessageList, isInStoryViewer, sendMessageAction]);
  const isAdmin = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatAdmin)(chat);
  const {
    isEmojiTooltipOpen,
    closeEmojiTooltip,
    filteredEmojis,
    filteredCustomEmojis,
    insertEmoji
  } = (0,_middle_composer_hooks_useEmojiTooltip__WEBPACK_IMPORTED_MODULE_49__["default"])(Boolean(isReady && isOnActiveTab && (isInStoryViewer || isForCurrentMessageList) && shouldSuggestStickers && !hasAttachments), getHtml, setHtml, undefined, recentEmojis, baseEmojiKeywords, emojiKeywords);
  const {
    isCustomEmojiTooltipOpen,
    closeCustomEmojiTooltip,
    insertCustomEmoji
  } = (0,_middle_composer_hooks_useCustomEmojiTooltip__WEBPACK_IMPORTED_MODULE_46__["default"])(Boolean(isReady && isOnActiveTab && (isInStoryViewer || isForCurrentMessageList) && shouldSuggestCustomEmoji && !hasAttachments), getHtml, setHtml, getSelectionRange, inputRef, customEmojiForEmoji);
  const {
    isStickerTooltipOpen,
    closeStickerTooltip
  } = (0,_middle_composer_hooks_useStickerTooltip__WEBPACK_IMPORTED_MODULE_52__["default"])(Boolean(isReady && isOnActiveTab && (isInStoryViewer || isForCurrentMessageList) && shouldSuggestStickers && canSendStickers && !hasAttachments), getHtml, stickersForEmoji);
  const {
    isMentionTooltipOpen,
    closeMentionTooltip,
    insertMention,
    mentionFilteredUsers
  } = (0,_middle_composer_hooks_useMentionTooltip__WEBPACK_IMPORTED_MODULE_51__["default"])(Boolean(isInMessageList && isReady && isForCurrentMessageList && !hasAttachments), getHtml, setHtml, getSelectionRange, inputRef, groupChatMembers, topInlineBotIds, currentUserId);
  const {
    isOpen: isInlineBotTooltipOpen,
    botId: inlineBotId,
    isGallery: isInlineBotTooltipGallery,
    switchPm: inlineBotSwitchPm,
    switchWebview: inlineBotSwitchWebview,
    results: inlineBotResults,
    closeTooltip: closeInlineBotTooltip,
    help: inlineBotHelp,
    loadMore: loadMoreForInlineBot
  } = (0,_middle_composer_hooks_useInlineBotTooltip__WEBPACK_IMPORTED_MODULE_50__["default"])(Boolean(isInMessageList && isReady && isForCurrentMessageList && !hasAttachments), chatId, getHtml, inlineBots);
  const hasQuickReplies = Boolean(quickReplies && Object.keys(quickReplies).length);
  const {
    isOpen: isChatCommandTooltipOpen,
    close: closeChatCommandTooltip,
    filteredBotCommands: botTooltipCommands,
    filteredQuickReplies: quickReplyCommands
  } = (0,_middle_composer_hooks_useChatCommandTooltip__WEBPACK_IMPORTED_MODULE_44__["default"])(Boolean(isInMessageList && isReady && isForCurrentMessageList && (botCommands && botCommands?.length || chatBotCommands?.length || hasQuickReplies && canSendQuickReplies)), getHtml, botCommands, chatBotCommands, canSendQuickReplies ? quickReplies : undefined);
  (0,_middle_composer_hooks_useDraft__WEBPACK_IMPORTED_MODULE_47__["default"])({
    draft,
    chatId,
    threadId,
    getHtml,
    setHtml,
    editedMessage: editingMessage,
    isDisabled: isInStoryViewer || Boolean(requestedDraft)
  });
  const resetComposer = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((shouldPreserveInput = false) => {
    if (!shouldPreserveInput) {
      setHtml('');
    }
    setAttachments(_util_memo__WEBPACK_IMPORTED_MODULE_15__.MEMO_EMPTY_ARRAY);
    setNextText(undefined);
    closeEmojiTooltip();
    closeCustomEmojiTooltip();
    closeStickerTooltip();
    closeMentionTooltip();
    if (isMobile) {
      // @optimization
      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);
    } else {
      closeSymbolMenu();
    }
  });
  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = (0,_middle_composer_hooks_useEditing__WEBPACK_IMPORTED_MODULE_48__["default"])(getHtml, setHtml, editingMessage, resetComposer, chatId, threadId, messageListType, draft, editingDraft);

  // Handle chat change (should be placed after `useDraft` and `useEditing`)
  const resetComposerRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_41__.useStateRef)(resetComposer);
  const stopRecordingVoiceRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_41__.useStateRef)(stopRecordingVoice);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return () => {
      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
      stopRecordingVoiceRef.current();
      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
      resetComposerRef.current();
    };
  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);
  const showCustomEmojiPremiumNotification = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    const notificationNumber = customEmojiNotificationNumber.current;
    if (!notificationNumber) {
      showNotification({
        message: lang('UnlockPremiumEmojiHint'),
        action: {
          action: 'openPremiumModal',
          payload: {
            initialSection: 'animated_emoji'
          }
        },
        actionText: lang('PremiumMore')
      });
    } else {
      showNotification({
        message: lang('UnlockPremiumEmojiHint2'),
        action: {
          action: 'openChat',
          payload: {
            id: currentUserId,
            shouldReplaceHistory: true
          }
        },
        actionText: lang('Open')
      });
    }
    customEmojiNotificationNumber.current = Number(!notificationNumber);
  });
  const mainButtonState = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_31__["default"])(() => {
    if (!isInputHasFocus && onForward && !(getHtml() && !hasAttachments)) {
      return MainButtonState.Forward;
    }
    if (editingMessage && shouldForceShowEditing) {
      return MainButtonState.Edit;
    }
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_19__.IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {
      return MainButtonState.Record;
    }
    if (isInScheduledList) {
      return MainButtonState.Schedule;
    }
    return MainButtonState.Send;
  }, [activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, isInputHasFocus, onForward, shouldForceShowEditing, isInScheduledList]);
  const canShowCustomSendMenu = !isInScheduledList;
  const {
    isContextMenuOpen: isCustomSendMenuOpen,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_30__["default"])(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));
  const {
    contextMenuAnchor: storyReactionPickerAnchor,
    handleContextMenu: handleStoryPickerContextMenu,
    handleBeforeContextMenu: handleBeforeStoryPickerContextMenu,
    handleContextMenuHide: handleStoryPickerContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_30__["default"])(storyReactionRef, !isInStoryViewer);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isReactionPickerOpen) return;
    if (storyReactionPickerAnchor) {
      openStoryReactionPicker({
        peerId: chatId,
        storyId: storyId,
        position: storyReactionPickerAnchor
      });
      handleStoryPickerContextMenuHide();
    }
  }, [chatId, handleStoryPickerContextMenuHide, isReactionPickerOpen, storyId, storyReactionPickerAnchor]);
  (0,_middle_composer_hooks_useClipboardPaste__WEBPACK_IMPORTED_MODULE_45__["default"])(isForCurrentMessageList || isInStoryViewer, insertFormattedTextAndUpdateCursor, handleSetAttachments, setNextText, editingMessage, !isCurrentUserPremium && !isChatWithSelf, showCustomEmojiPremiumNotification);
  const handleEmbeddedClear = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    if (editingMessage) {
      handleEditCancel();
    }
  });
  const validateTextLength = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((text, isAttachmentModal) => {
    const maxLength = isAttachmentModal ? captionLimit : maxMessageLength;
    if (text?.length > maxLength) {
      const extraLength = text.length - maxLength;
      showDialog({
        data: {
          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',
          textParams: {
            '{EXTRA_CHARS_COUNT}': extraLength.toString(),
            '{PLURAL_S}': extraLength > 1 ? 's' : ''
          },
          hasErrorKey: true
        }
      });
      return false;
    }
    return true;
  });
  const checkSlowMode = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    if (slowMode && !isAdmin) {
      const messageInput = document.querySelector(editableInputCssSelector);
      const nowSeconds = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_18__.getServerTime)();
      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);
      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;
      if (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds || nextSendDateNotReached) {
        const secondsRemaining = nextSendDateNotReached ? slowMode.nextSendDate - nowSeconds : slowMode.seconds - secondsSinceLastMessage;
        showDialog({
          data: {
            message: lang('SlowModeHint', (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_9__.formatMediaDuration)(secondsRemaining)),
            isSlowMode: true,
            hasErrorKey: false
          }
        });
        messageInput?.blur();
        return false;
      }
    }
    return true;
  });
  const sendAttachments = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(({
    attachments: attachmentsToSend,
    sendCompressed = attachmentSettings.shouldCompress,
    sendGrouped = attachmentSettings.shouldSendGrouped,
    isSilent,
    scheduledAt,
    isInvertedMedia
  }) => {
    if (!currentMessageList && !storyId) {
      return;
    }
    const {
      text,
      entities
    } = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_16__["default"])(getHtml());
    if (!text && !attachmentsToSend.length) {
      return;
    }
    if (!validateTextLength(text, true)) return;
    if (!checkSlowMode()) return;
    isInvertedMedia = text && sendCompressed && sendGrouped ? isInvertedMedia : undefined;
    if (editingMessage) {
      editMessage({
        messageList: currentMessageList,
        text,
        entities,
        attachments: (0,_middle_composer_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_22__.prepareAttachmentsToSend)(attachmentsToSend, sendCompressed)
      });
    } else {
      sendMessage({
        messageList: currentMessageList,
        text,
        entities,
        scheduledAt,
        isSilent,
        shouldUpdateStickerSetOrder,
        attachments: (0,_middle_composer_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_22__.prepareAttachmentsToSend)(attachmentsToSend, sendCompressed),
        shouldGroupMessages: sendGrouped,
        isInvertedMedia
      });
    }
    lastMessageSendTimeSeconds.current = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_18__.getServerTime)();
    clearDraft({
      chatId,
      isLocalOnly: true
    });

    // Wait until message animation starts
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
      resetComposer();
    });
  });
  const handleSendAttachmentsFromModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((sendCompressed, sendGrouped, isInvertedMedia) => {
    sendAttachments({
      attachments,
      sendCompressed,
      sendGrouped,
      isInvertedMedia
    });
  });
  const handleSendAttachments = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((sendCompressed, sendGrouped, isSilent, scheduledAt, isInvertedMedia) => {
    sendAttachments({
      attachments,
      sendCompressed,
      sendGrouped,
      isSilent,
      scheduledAt,
      isInvertedMedia
    });
  });
  const handleSend = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(async (isSilent = false, scheduledAt) => {
    if (!currentMessageList && !storyId) {
      return;
    }
    let currentAttachments = attachments;
    if (activeVoiceRecording) {
      const record = await stopRecordingVoice();
      const ttlSeconds = isViewOnceEnabled ? _config__WEBPACK_IMPORTED_MODULE_3__.ONE_TIME_MEDIA_TTL_SECONDS : undefined;
      if (record) {
        const {
          blob,
          duration,
          waveform
        } = record;
        currentAttachments = [await (0,_middle_composer_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_22__["default"])(VOICE_RECORDING_FILENAME, blob, {
          voice: {
            duration,
            waveform
          },
          ttlSeconds
        })];
      }
    }
    const {
      text,
      entities
    } = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_16__["default"])(getHtml());
    if (currentAttachments.length) {
      sendAttachments({
        attachments: currentAttachments,
        scheduledAt,
        isSilent
      });
      return;
    }
    if (!text && !isForwarding) {
      return;
    }
    if (!validateTextLength(text)) return;
    const messageInput = document.querySelector(editableInputCssSelector);
    const effectId = effect?.id;
    if (text) {
      if (!checkSlowMode()) return;
      const isInvertedMedia = hasWebPagePreview ? attachmentSettings.isInvertedMedia : undefined;
      if (areEffectsSupported) saveEffectInDraft({
        chatId,
        threadId,
        effectId: undefined
      });
      sendMessage({
        messageList: currentMessageList,
        text,
        entities,
        scheduledAt,
        isSilent,
        shouldUpdateStickerSetOrder,
        isInvertedMedia,
        effectId,
        webPageMediaSize: attachmentSettings.webPageMediaSize,
        webPageUrl: hasWebPagePreview ? webPagePreview.url : undefined
      });
    }
    if (isForwarding) {
      forwardMessages({
        scheduledAt,
        isSilent
      });
    }
    lastMessageSendTimeSeconds.current = (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_18__.getServerTime)();
    clearDraft({
      chatId,
      threadId,
      isLocalOnly: true,
      shouldKeepReply: isForwarding
    });
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_19__.IS_IOS && messageInput && messageInput === document.activeElement) {
      (0,_middle_composer_helpers_applyIosAutoCapitalizationFix__WEBPACK_IMPORTED_MODULE_21__["default"])(messageInput);
    }

    // Wait until message animation starts
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
      resetComposer();
    });
  });
  const handleClickBotMenu = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    if (botMenuButton?.type !== 'webApp') {
      return;
    }
    const parsedLink = (0,_util_deepLinkParser__WEBPACK_IMPORTED_MODULE_11__.tryParseDeepLink)(botMenuButton.url);
    if (parsedLink?.type === 'publicUsernameOrBotLink' && parsedLink.appName) {
      (0,_util_deeplink__WEBPACK_IMPORTED_MODULE_10__.processDeepLink)(botMenuButton.url);
    } else {
      callAttachBot({
        chatId,
        url: botMenuButton.url,
        threadId
      });
    }
  });
  const handleActivateBotCommandMenu = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    closeSymbolMenu();
    openBotCommandMenu();
  });
  const handleMessageSchedule = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((args, scheduledAt, messageList, effectId) => {
    if (args && 'queryId' in args) {
      const {
        id,
        queryId,
        isSilent
      } = args;
      sendInlineBotResult({
        id,
        queryId,
        scheduledAt,
        isSilent,
        messageList
      });
      return;
    }
    const {
      isSilent,
      ...restArgs
    } = args || {};
    if (!args || Object.keys(restArgs).length === 0) {
      void handleSend(Boolean(isSilent), scheduledAt);
    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {
      const {
        sendCompressed = false,
        sendGrouped = false,
        isInvertedMedia
      } = args;
      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt, isInvertedMedia);
    } else {
      sendMessage({
        ...args,
        messageList,
        scheduledAt,
        effectId
      });
    }
  });
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_32__["default"])(([prevContentToBeScheduled]) => {
    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {
      requestCalendar(scheduledAt => {
        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);
      });
    }
  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (requestedDraft) {
      insertFormattedTextAndUpdateCursor(requestedDraft);
      resetOpenChatWithDraft();
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestNextMutation)(() => {
        const messageInput = document.getElementById(editableInputId);
        (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_14__["default"])(messageInput, true);
      });
    }
  }, [editableInputId, requestedDraft, resetOpenChatWithDraft, setHtml]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (requestedDraftFiles?.length) {
      void handleFileSelect(requestedDraftFiles);
      resetOpenChatWithDraft();
    }
  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);
  const handleCustomEmojiSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((emoji, inInputId) => {
    const emojiSetId = 'id' in emoji.stickerSetInfo && emoji.stickerSetInfo.id;
    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf && emojiSetId !== chatEmojiSetId) {
      showCustomEmojiPremiumNotification();
      return;
    }
    insertCustomEmojiAndUpdateCursor(emoji, inInputId);
  });
  const handleCustomEmojiSelectAttachmentModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(emoji => {
    handleCustomEmojiSelect(emoji, _config__WEBPACK_IMPORTED_MODULE_3__.EDITABLE_INPUT_MODAL_ID);
  });
  const handleGifSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((gif, isSilent, isScheduleRequested) => {
    if (!currentMessageList && !storyId) {
      return;
    }
    if (isInScheduledList || isScheduleRequested) {
      forceShowSymbolMenu();
      requestCalendar(scheduledAt => {
        cancelForceShowSymbolMenu();
        handleMessageSchedule({
          gif,
          isSilent
        }, scheduledAt, currentMessageList);
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
          resetComposer(true);
        });
      });
    } else {
      sendMessage({
        messageList: currentMessageList,
        gif,
        isSilent
      });
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
        resetComposer(true);
      });
    }
  });
  const handleStickerSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((sticker, isSilent, isScheduleRequested, shouldPreserveInput = false, canUpdateStickerSetsOrder) => {
    if (!currentMessageList && !storyId) {
      return;
    }
    sticker = {
      ...sticker,
      isPreloadedGlobally: true
    };
    if (isInScheduledList || isScheduleRequested) {
      forceShowSymbolMenu();
      requestCalendar(scheduledAt => {
        cancelForceShowSymbolMenu();
        handleMessageSchedule({
          sticker,
          isSilent
        }, scheduledAt, currentMessageList);
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
          resetComposer(shouldPreserveInput);
        });
      });
    } else {
      sendMessage({
        messageList: currentMessageList,
        sticker,
        isSilent,
        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder
      });
      clearDraft({
        chatId,
        threadId,
        isLocalOnly: true
      });
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
        resetComposer(shouldPreserveInput);
      });
    }
  });
  const handleInlineBotSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((inlineResult, isSilent, isScheduleRequested) => {
    if (!currentMessageList && !storyId) {
      return;
    }
    if (isInScheduledList || isScheduleRequested) {
      requestCalendar(scheduledAt => {
        handleMessageSchedule({
          id: inlineResult.id,
          queryId: inlineResult.queryId,
          isSilent
        }, scheduledAt, currentMessageList);
      });
    } else {
      sendInlineBotResult({
        id: inlineResult.id,
        queryId: inlineResult.queryId,
        isSilent,
        messageList: currentMessageList
      });
    }
    const messageInput = document.querySelector(editableInputCssSelector);
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_19__.IS_IOS && messageInput && messageInput === document.activeElement) {
      (0,_middle_composer_helpers_applyIosAutoCapitalizationFix__WEBPACK_IMPORTED_MODULE_21__["default"])(messageInput);
    }
    clearDraft({
      chatId,
      isLocalOnly: true
    });
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
      resetComposer();
    });
  });
  const handleBotCommandSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    clearDraft({
      chatId,
      isLocalOnly: true
    });
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
      resetComposer();
    });
  });
  const handlePollSend = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(poll => {
    if (!currentMessageList) {
      return;
    }
    if (isInScheduledList) {
      requestCalendar(scheduledAt => {
        handleMessageSchedule({
          poll
        }, scheduledAt, currentMessageList);
      });
      closePollModal();
    } else {
      sendMessage({
        messageList: currentMessageList,
        poll
      });
      closePollModal();
    }
  });
  const sendSilent = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(additionalArgs => {
    if (isInScheduledList) {
      requestCalendar(scheduledAt => {
        handleMessageSchedule({
          ...additionalArgs,
          isSilent: true
        }, scheduledAt, currentMessageList);
      });
    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {
      const {
        sendCompressed = false,
        sendGrouped = false,
        isInvertedMedia
      } = additionalArgs;
      void handleSendAttachments(sendCompressed, sendGrouped, true, undefined, isInvertedMedia);
    } else {
      void handleSend(true);
    }
  });
  const handleSendAsMenuOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    const messageInput = document.querySelector(editableInputCssSelector);
    if (!isMobile || messageInput !== document.activeElement) {
      closeBotCommandMenu();
      closeSymbolMenu();
      openSendAsMenu();
      return;
    }
    messageInput?.blur();
    setTimeout(() => {
      closeBotCommandMenu();
      closeSymbolMenu();
      openSendAsMenu();
    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isComposerBlocked) return;
    setHtml('');
  }, [isComposerBlocked, setHtml, attachments]);
  const insertTextAndUpdateCursorAttachmentModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(text => {
    insertTextAndUpdateCursor(text, _config__WEBPACK_IMPORTED_MODULE_3__.EDITABLE_INPUT_MODAL_ID);
  });
  const removeSymbol = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((inInputId = editableInputId) => {
    const selection = window.getSelection();
    if (selection.rangeCount) {
      const selectionRange = selection.getRangeAt(0);
      if ((0,_middle_composer_helpers_selection__WEBPACK_IMPORTED_MODULE_24__.isSelectionInsideInput)(selectionRange, inInputId)) {
        document.execCommand('delete', false);
        return;
      }
    }
    setHtml((0,_util_deleteLastCharacterOutsideSelection__WEBPACK_IMPORTED_MODULE_12__["default"])(getHtml()));
  });
  const removeSymbolAttachmentModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    removeSymbol(_config__WEBPACK_IMPORTED_MODULE_3__.EDITABLE_INPUT_MODAL_ID);
  });
  const handleAllScheduledClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    openThread({
      chatId,
      threadId,
      type: 'scheduled',
      noForumTopicPanel: true
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isRightColumnShown && isMobile) {
      closeSymbolMenu();
    }
  }, [isRightColumnShown, closeSymbolMenu, isMobile]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isReady) return;
    if (isSelectModeActive) {
      disableHover();
    } else {
      setTimeout(() => {
        enableHover();
      }, SELECT_MODE_TRANSITION_MS);
    }
  }, [isSelectModeActive, enableHover, disableHover, isReady]);
  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;
  const isBotMenuButtonOpen = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_31__["default"])(() => {
    return withBotMenuButton && !getHtml() && !activeVoiceRecording;
  }, [withBotMenuButton, getHtml, activeVoiceRecording]);
  const [timedPlaceholderLangKey, timedPlaceholderDate] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (slowMode?.nextSendDate) {
      return ['SlowModeWait', slowMode.nextSendDate];
    }
    if (stealthMode?.activeUntil && isInStoryViewer) {
      return ['StealthModeActiveHint', stealthMode.activeUntil];
    }
    return [];
  }, [isInStoryViewer, slowMode?.nextSendDate, stealthMode?.activeUntil]);
  const isComposerHasFocus = isBotKeyboardOpen || isSymbolMenuOpen || isEmojiTooltipOpen || isSendAsMenuOpen || isMentionTooltipOpen || isInlineBotTooltipOpen || isBotCommandMenuOpen || isAttachMenuOpen || isStickerTooltipOpen || isChatCommandTooltipOpen || isCustomEmojiTooltipOpen || isBotMenuButtonOpen || isCustomSendMenuOpen || Boolean(activeVoiceRecording) || attachments.length > 0 || isInputHasFocus;
  const isReactionSelectorOpen = isComposerHasFocus && !isReactionPickerOpen && isInStoryViewer && !isAttachMenuOpen && !isSymbolMenuOpen;
  const placeholderForForumAsMessages = chat?.isForum && chat?.isForumAsMessages && threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID ? replyToTopic ? lang('Chat.InputPlaceholderReplyInTopic', replyToTopic.title) : lang('Message.Placeholder.MessageInGeneral') : undefined;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isComposerHasFocus) {
      onFocus?.();
    } else {
      onBlur?.();
    }
  }, [isComposerHasFocus, onBlur, onFocus]);
  const {
    shouldRender: shouldRenderReactionSelector,
    transitionClassNames: reactionSelectorTransitonClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_40__["default"])(isReactionSelectorOpen);
  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);
  const mainButtonHandler = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    switch (mainButtonState) {
      case MainButtonState.Forward:
        onForward?.();
        break;
      case MainButtonState.Send:
        void handleSend();
        break;
      case MainButtonState.Record:
        {
          if (areVoiceMessagesNotAllowed) {
            if (!canSendVoiceByPrivacy) {
              showNotification({
                message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title)
              });
            } else if (!canSendVoices) {
              showAllowedMessageTypesNotification({
                chatId
              });
            }
          } else {
            setIsViewOnceEnabled(false);
            void startRecordingVoice();
          }
          break;
        }
      case MainButtonState.Edit:
        handleEditComplete();
        break;
      case MainButtonState.Schedule:
        if (activeVoiceRecording) {
          pauseRecordingVoice();
        }
        if (!currentMessageList) {
          return;
        }
        requestCalendar(scheduledAt => {
          handleMessageSchedule({}, scheduledAt, currentMessageList, effect?.id);
        });
        break;
      default:
        break;
    }
  });
  const scheduledDefaultDate = new Date();
  scheduledDefaultDate.setSeconds(0);
  scheduledDefaultDate.setMilliseconds(0);
  const scheduledMaxDate = new Date();
  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);
  let sendButtonAriaLabel = 'SendMessage';
  switch (mainButtonState) {
    case MainButtonState.Forward:
      sendButtonAriaLabel = 'Forward';
      break;
    case MainButtonState.Edit:
      sendButtonAriaLabel = 'Save edited message';
      break;
    case MainButtonState.Record:
      sendButtonAriaLabel = !canAttachMedia ? 'Conversation.DefaultRestrictedMedia' : 'AccDescrVoiceMessage';
  }
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('Composer', !isSelectModeActive && 'shown', isHoverDisabled && 'hover-disabled', isMounted && 'mounted', className);
  const handleToggleReaction = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(reaction => {
    let text;
    let entities;
    if (reaction.type === 'emoji') {
      text = reaction.emoticon;
    }
    if (reaction.type === 'custom') {
      const sticker = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().customEmojis.byId[reaction.documentId];
      if (!sticker) {
        return;
      }
      if (!sticker.isFree && !isCurrentUserPremium && !isChatWithSelf) {
        showCustomEmojiPremiumNotification();
        return;
      }
      const customEmojiMessage = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_16__["default"])((0,_middle_composer_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_23__.buildCustomEmojiHtml)(sticker));
      text = customEmojiMessage.text;
      entities = customEmojiMessage.entities;
    }
    sendMessage({
      text,
      entities,
      isReaction: true
    });
    closeReactionPicker();
  });
  const handleToggleEffectReaction = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(reaction => {
    setReactionEffect({
      chatId,
      threadId,
      reaction
    });
    closeReactionPicker();
  });
  const handleReactionPickerOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(position => {
    openStoryReactionPicker({
      peerId: chatId,
      storyId: storyId,
      position,
      sendAsMessage: true
    });
  });
  const handleLikeStory = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    const reaction = sentStoryReaction ? undefined : _config__WEBPACK_IMPORTED_MODULE_3__.HEART_REACTION;
    sendStoryReaction({
      peerId: chatId,
      storyId: storyId,
      containerId: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getStoryKey)(chatId, storyId),
      reaction
    });
  });
  const handleSendScheduled = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    requestCalendar(scheduledAt => {
      handleMessageSchedule({}, scheduledAt, currentMessageList);
    });
  });
  const handleSendSilent = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    sendSilent();
  });
  const handleSendWhenOnline = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    handleMessageSchedule({}, _config__WEBPACK_IMPORTED_MODULE_3__.SCHEDULED_WHEN_ONLINE, currentMessageList, effect?.id);
  });
  const handleSendScheduledAttachments = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((sendCompressed, sendGrouped, isInvertedMedia) => {
    requestCalendar(scheduledAt => {
      handleMessageSchedule({
        sendCompressed,
        sendGrouped,
        isInvertedMedia
      }, scheduledAt, currentMessageList);
    });
  });
  const handleSendSilentAttachments = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])((sendCompressed, sendGrouped, isInvertedMedia) => {
    sendSilent({
      sendCompressed,
      sendGrouped,
      isInvertedMedia
    });
  });
  const handleRemoveEffect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    saveEffectInDraft({
      chatId,
      threadId,
      effectId: undefined
    });
  });
  const handleStopEffect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_35__["default"])(() => {
    hideEffectInComposer({});
  });
  const onSend = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    switch (mainButtonState) {
      case MainButtonState.Edit:
        return handleEditComplete;
      case MainButtonState.Schedule:
        return handleSendScheduled;
      default:
        return handleSend;
    }
  }, [mainButtonState, handleEditComplete]);
  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage && botCommands !== false && !activeVoiceRecording;
  const effectEmoji = areEffectsSupported && effect?.emoticon;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: fullClassName
  }, isInMessageList && canAttachMedia && isReady && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_DropArea_async__WEBPACK_IMPORTED_MODULE_63__["default"], {
    isOpen: dropAreaState !== _middle_composer_DropArea_async__WEBPACK_IMPORTED_MODULE_63__.DropAreaState.None,
    withQuick: dropAreaState === _middle_composer_DropArea_async__WEBPACK_IMPORTED_MODULE_63__.DropAreaState.QuickFile || prevDropAreaState === _middle_composer_DropArea_async__WEBPACK_IMPORTED_MODULE_63__.DropAreaState.QuickFile,
    onHide: onDropHide,
    onFileSelect: handleFileSelect,
    editingMessage: editingMessage
  }), shouldRenderReactionSelector && !isNeedPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_message_reactions_ReactionSelector__WEBPACK_IMPORTED_MODULE_74__["default"], {
    topReactions: topReactions,
    allAvailableReactions: availableReactions,
    onToggleReaction: handleToggleReaction,
    isPrivate: true,
    isReady: isReady,
    canBuyPremium: canBuyPremium,
    isCurrentUserPremium: isCurrentUserPremium,
    isInSavedMessages: isChatWithSelf,
    isInStoryViewer: isInStoryViewer,
    canPlayAnimatedEmojis: canPlayAnimatedEmojis,
    onShowMore: handleReactionPickerOpen,
    className: reactionSelectorTransitonClassNames
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_AttachmentModal_async__WEBPACK_IMPORTED_MODULE_54__["default"], {
    chatId: chatId,
    threadId: threadId,
    canShowCustomSendMenu: canShowCustomSendMenu,
    attachments: attachments,
    getHtml: getHtml,
    isReady: isReady,
    shouldSuggestCompression: shouldSuggestCompression,
    shouldForceCompression: shouldForceCompression,
    shouldForceAsFile: shouldForceAsFile,
    isForCurrentMessageList: isForCurrentMessageList,
    isForMessage: isInMessageList,
    shouldSchedule: isInScheduledList,
    forceDarkTheme: isInStoryViewer,
    onCaptionUpdate: onCaptionUpdate,
    onSendSilent: handleSendSilentAttachments,
    onSend: handleSendAttachmentsFromModal,
    onSendScheduled: handleSendScheduledAttachments,
    onFileAppend: handleAppendFiles,
    onClear: handleClearAttachments,
    onAttachmentsUpdate: handleSetAttachments,
    onCustomEmojiSelect: handleCustomEmojiSelectAttachmentModal,
    onRemoveSymbol: removeSymbolAttachmentModal,
    onEmojiSelect: insertTextAndUpdateCursorAttachmentModal,
    editingMessage: editingMessage,
    onSendWhenOnline: handleSendWhenOnline,
    canScheduleUntilOnline: canScheduleUntilOnline && !isViewOnceEnabled
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_PollModal_async__WEBPACK_IMPORTED_MODULE_68__["default"], {
    isOpen: pollModal.isOpen,
    isQuiz: pollModal.isQuiz,
    shouldBeAnonymous: isChannel,
    onClear: closePollModal,
    onSend: handlePollSend
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_SendAsMenu_async__WEBPACK_IMPORTED_MODULE_69__["default"], {
    isOpen: isSendAsMenuOpen,
    onClose: closeSendAsMenu,
    chatId: chatId,
    selectedSendAsId: sendAsId,
    sendAsPeerIds: sendAsPeerIds,
    isCurrentUserPremium: isCurrentUserPremium
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_MentionTooltip_async__WEBPACK_IMPORTED_MODULE_66__["default"], {
    isOpen: isMentionTooltipOpen,
    filteredUsers: mentionFilteredUsers,
    onInsertUserName: insertMention,
    onClose: closeMentionTooltip
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_ChatCommandTooltip_async__WEBPACK_IMPORTED_MODULE_59__["default"], {
    isOpen: isChatCommandTooltipOpen,
    chatId: chatId,
    withUsername: Boolean(chatBotCommands),
    botCommands: botTooltipCommands,
    quickReplies: quickReplyCommands,
    getHtml: getHtml,
    self: currentUser,
    quickReplyMessages: quickReplyMessages,
    onClick: handleBotCommandSelect,
    onClose: closeChatCommandTooltip
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('composer-wrapper', isInStoryViewer && 'with-story-tweaks', isNeedPremium && 'is-need-premium')
  }, !isNeedPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: "svg-appendix",
    width: "9",
    height: "20"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("defs", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("filter", {
    x: "-50%",
    y: "-14.7%",
    width: "200%",
    height: "141.2%",
    filterUnits: "objectBoundingBox",
    id: "composerAppendix"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feOffset", {
    dy: "1",
    in: "SourceAlpha",
    result: "shadowOffsetOuter1"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feGaussianBlur", {
    stdDeviation: "1",
    in: "shadowOffsetOuter1",
    result: "shadowBlurOuter1"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feColorMatrix", {
    values: "0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0",
    in: "shadowBlurOuter1"
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("g", {
    fill: "none",
    "fill-rule": "evenodd"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z",
    fill: "#000",
    filter: "url(#composerAppendix)"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("path", {
    d: "M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z",
    fill: "#FFF",
    className: "corner"
  }))), isInMessageList && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_InlineBotTooltip_async__WEBPACK_IMPORTED_MODULE_65__["default"], {
    isOpen: isInlineBotTooltipOpen,
    botId: inlineBotId,
    isGallery: isInlineBotTooltipGallery,
    inlineBotResults: inlineBotResults,
    switchPm: inlineBotSwitchPm,
    switchWebview: inlineBotSwitchWebview,
    loadMore: loadMoreForInlineBot,
    isSavedMessages: isChatWithSelf,
    canSendGifs: canSendGifs,
    isCurrentUserPremium: isCurrentUserPremium,
    onSelectResult: handleInlineBotSelect,
    onClose: closeInlineBotTooltip
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_ComposerEmbeddedMessage__WEBPACK_IMPORTED_MODULE_60__["default"], {
    onClear: handleEmbeddedClear,
    shouldForceShowEditing: Boolean(shouldForceShowEditing && editingMessage),
    chatId: chatId,
    threadId: threadId,
    messageListType: messageListType
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_WebPagePreview__WEBPACK_IMPORTED_MODULE_72__["default"], {
    chatId: chatId,
    threadId: threadId,
    getHtml: getHtml,
    isDisabled: !canAttachEmbedLinks || hasAttachments,
    isEditing: Boolean(editingMessage)
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('message-input-wrapper', (0,_helpers_peerColor__WEBPACK_IMPORTED_MODULE_25__.getPeerColorClass)(currentUser))
  }, isInMessageList && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, withBotMenuButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_BotMenuButton__WEBPACK_IMPORTED_MODULE_58__["default"], {
    isOpen: isBotMenuButtonOpen,
    text: botMenuButton.text,
    isDisabled: Boolean(activeVoiceRecording),
    onClick: handleClickBotMenu
  }), withBotCommands && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_76__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('bot-commands', isBotCommandMenuOpen && 'activated'),
    round: true,
    disabled: botCommands === undefined,
    color: "translucent",
    onActivate: handleActivateBotCommandMenu,
    ariaLabel: "Open bot command keyboard"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "bot-commands-filled"
  })), canShowSendAs && (sendAsUser || sendAsChat) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_75__["default"], {
    round: true,
    color: "translucent",
    onClick: isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen,
    ariaLabel: lang('SendMessageAsTitle'),
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_78__["default"], {
    peer: sendAsUser || sendAsChat,
    size: "tiny"
  }))), (!isComposerBlocked || canSendGifs || canSendStickers) && !isNeedPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_SymbolMenuButton__WEBPACK_IMPORTED_MODULE_71__["default"], {
    chatId: chatId,
    threadId: threadId,
    isMobile: isMobile,
    isReady: isReady,
    isSymbolMenuOpen: isSymbolMenuOpen,
    openSymbolMenu: openSymbolMenu,
    closeSymbolMenu: closeSymbolMenu,
    canSendStickers: canSendStickers,
    canSendGifs: canSendGifs,
    isMessageComposer: isInMessageList,
    onGifSelect: handleGifSelect,
    onStickerSelect: handleStickerSelect,
    onCustomEmojiSelect: handleCustomEmojiSelect,
    onRemoveSymbol: removeSymbol,
    onEmojiSelect: insertTextAndUpdateCursor,
    closeBotCommandMenu: closeBotCommandMenu,
    closeSendAsMenu: closeSendAsMenu,
    isSymbolMenuForced: isSymbolMenuForced,
    canSendPlainText: !isComposerBlocked,
    inputCssSelector: editableInputCssSelector,
    idPrefix: type,
    forceDarkTheme: isInStoryViewer
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_MessageInput__WEBPACK_IMPORTED_MODULE_67__["default"], {
    ref: inputRef,
    id: inputId,
    editableInputId: editableInputId,
    customEmojiPrefix: type,
    isStoryInput: isInStoryViewer,
    chatId: chatId,
    canSendPlainText: !isComposerBlocked,
    threadId: threadId,
    isReady: isReady,
    isActive: !hasAttachments,
    getHtml: getHtml,
    placeholder: activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : !isComposerBlocked ? botKeyboardPlaceholder || inputPlaceholder || lang(placeholderForForumAsMessages || 'Message') : isInStoryViewer ? lang('StoryRepliesLocked') : lang('Chat.PlaceholderTextNotAllowed'),
    timedPlaceholderDate: timedPlaceholderDate,
    timedPlaceholderLangKey: timedPlaceholderLangKey,
    forcedPlaceholder: inlineBotHelp,
    canAutoFocus: isReady && isForCurrentMessageList && !hasAttachments && isInMessageList,
    noFocusInterception: hasAttachments,
    shouldSuppressFocus: isMobile && isSymbolMenuOpen,
    shouldSuppressTextFormatter: isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen,
    onUpdate: setHtml,
    onSend: onSend,
    onSuppressedFocus: closeSymbolMenu,
    onFocus: markInputHasFocus,
    onBlur: unmarkInputHasFocus,
    isNeedPremium: isNeedPremium
  }), isInMessageList && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, isInlineBotLoading && Boolean(inlineBotId) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_77__["default"], {
    color: "gray"
  }), withScheduledButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_75__["default"], {
    round: true,
    faded: true,
    className: "scheduled-button",
    color: "translucent",
    onClick: handleAllScheduledClick,
    ariaLabel: "Open scheduled messages"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "schedule"
  })), Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_76__["default"], {
    className: isBotKeyboardOpen ? 'activated' : '',
    round: true,
    color: "translucent",
    onActivate: openBotKeyboard,
    ariaLabel: "Open bot command keyboard"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "bot-command"
  }))), activeVoiceRecording && Boolean(currentRecordTime) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "recording-state"
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_9__.formatVoiceRecordDuration)(currentRecordTime - startRecordTimeRef.current)), !isNeedPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_AttachMenu__WEBPACK_IMPORTED_MODULE_55__["default"], {
    chatId: chatId,
    threadId: threadId,
    editingMessage: editingMessage,
    canEditMedia: canMediaBeReplaced,
    isButtonVisible: !activeVoiceRecording,
    canAttachMedia: canAttachMedia,
    canAttachPolls: canAttachPolls,
    canSendPhotos: canSendPhotos,
    canSendVideos: canSendVideos,
    canSendDocuments: canSendDocuments,
    canSendAudios: canSendAudios,
    onFileSelect: handleFileSelect,
    onPollCreate: openPollModal,
    isScheduled: isInScheduledList,
    attachBots: isInMessageList ? attachBots : undefined,
    peerType: attachMenuPeerType,
    shouldCollectDebugLogs: shouldCollectDebugLogs,
    theme: theme,
    onMenuOpen: onAttachMenuOpen,
    onMenuClose: onAttachMenuClose
  }), isInMessageList && Boolean(botKeyboardMessageId) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_BotKeyboardMenu__WEBPACK_IMPORTED_MODULE_57__["default"], {
    messageId: botKeyboardMessageId,
    isOpen: isBotKeyboardOpen,
    onClose: closeBotKeyboard
  }), isInMessageList && botCommands && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_BotCommandMenu_async__WEBPACK_IMPORTED_MODULE_56__["default"], {
    isOpen: isBotCommandMenuOpen,
    botCommands: botCommands,
    onClose: closeBotCommandMenu
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_CustomEmojiTooltip_async__WEBPACK_IMPORTED_MODULE_61__["default"], {
    key: `custom-emoji-tooltip-${editableInputId}`,
    chatId: chatId,
    isOpen: isCustomEmojiTooltipOpen,
    onCustomEmojiSelect: insertCustomEmoji,
    addRecentCustomEmoji: addRecentCustomEmoji,
    onClose: closeCustomEmojiTooltip
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_StickerTooltip_async__WEBPACK_IMPORTED_MODULE_70__["default"], {
    key: `sticker-tooltip-${editableInputId}`,
    chatId: chatId,
    threadId: threadId,
    isOpen: isStickerTooltipOpen,
    onStickerSelect: handleStickerSelect,
    onClose: closeStickerTooltip
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_EmojiTooltip_async__WEBPACK_IMPORTED_MODULE_64__["default"], {
    key: `emoji-tooltip-${editableInputId}`,
    isOpen: isEmojiTooltipOpen,
    emojis: filteredEmojis,
    customEmojis: filteredCustomEmojis,
    addRecentEmoji: addRecentEmoji,
    addRecentCustomEmoji: addRecentCustomEmoji,
    onEmojiSelect: insertEmoji,
    onCustomEmojiSelect: insertEmoji,
    onClose: closeEmojiTooltip
  }))), canSendOneTimeMedia && activeVoiceRecording && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_75__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])('view-once', isViewOnceEnabled && 'active'),
    round: true,
    color: "secondary",
    ariaLabel: lang('Chat.PlayOnceVoiceMessageTooltip'),
    onClick: toogleViewOnceEnabled
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "view-once"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "one-filled"
  })), activeVoiceRecording && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_75__["default"], {
    round: true,
    color: "danger",
    className: "cancel",
    onClick: stopRecordingVoice,
    ariaLabel: "Cancel voice recording"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "delete"
  })), isInStoryViewer && !activeVoiceRecording && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_75__["default"], {
    round: true,
    className: "story-reaction-button",
    color: "secondary",
    onClick: handleLikeStory,
    onContextMenu: handleStoryPickerContextMenu,
    onMouseDown: handleBeforeStoryPickerContextMenu,
    ariaLabel: lang('AccDescrLike'),
    ref: storyReactionRef
  }, sentStoryReaction && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_reactions_ReactionAnimatedEmoji__WEBPACK_IMPORTED_MODULE_80__["default"], {
    key: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getReactionKey)(sentStoryReaction),
    containerId: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getStoryKey)(chatId, storyId),
    reaction: sentStoryReaction,
    withEffectOnly: isSentStoryReactionHeart
  }), (!sentStoryReaction || isSentStoryReactionHeart) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "heart",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])(isSentStoryReactionHeart && 'story-reaction-heart')
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_75__["default"], {
    ref: mainButtonRef,
    round: true,
    color: "secondary",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_8__["default"])(mainButtonState, 'main-button', !isReady && 'not-ready', activeVoiceRecording && 'recording'),
    disabled: areVoiceMessagesNotAllowed,
    allowDisabledClick: true,
    noFastClick: true,
    ariaLabel: lang(sendButtonAriaLabel),
    onClick: mainButtonHandler,
    onContextMenu: mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "send"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "microphone-alt"
  }), onForward && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "forward"
  }), isInMessageList && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "schedule"
  }), isInMessageList && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_79__["default"], {
    name: "check"
  })), effectEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "effect-icon",
    onClick: handleRemoveEffect
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_26__["default"])(effectEmoji)), effect && canPlayEffect && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_message_MessageEffect__WEBPACK_IMPORTED_MODULE_73__["default"], {
    shouldPlay: shouldPlayEffect,
    effect: effect,
    onStop: handleStopEffect
  }), canShowCustomSendMenu && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_composer_CustomSendMenu_async__WEBPACK_IMPORTED_MODULE_62__["default"], {
    isOpen: isCustomSendMenuOpen,
    canSchedule: isInMessageList && !isViewOnceEnabled,
    canScheduleUntilOnline: canScheduleUntilOnline && !isViewOnceEnabled,
    onSendSilent: !isChatWithSelf ? handleSendSilent : undefined,
    onSendSchedule: !isInScheduledList ? handleSendScheduled : undefined,
    onSendWhenOnline: handleSendWhenOnline,
    onRemoveEffect: handleRemoveEffect,
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide,
    isSavedMessages: isChatWithSelf,
    chatId: chatId,
    withEffects: areEffectsSupported,
    hasCurrentEffect: Boolean(effect),
    effectReactions: effectReactions,
    allAvailableReactions: availableReactions,
    onToggleReaction: handleToggleEffectReaction,
    isCurrentUserPremium: isCurrentUserPremium,
    isInSavedMessages: isChatWithSelf,
    isInStoryViewer: isInStoryViewer,
    canPlayAnimatedEmojis: canPlayAnimatedEmojis
  }), calendar);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId,
  storyId,
  messageListType,
  isMobile,
  type
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId);
  const chatBot = !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isSystemBot)(chatId) ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectBot)(global, chatId) : undefined;
  const isChatWithBot = Boolean(chatBot);
  const isChatWithSelf = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsChatWithSelf)(global, chatId);
  const isChatWithUser = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chatId);
  const userFullInfo = isChatWithUser ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUserFullInfo)(global, chatId) : undefined;
  const chatFullInfo = !isChatWithUser ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatFullInfo)(global, chatId) : undefined;
  const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser) && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectNewestMessageWithBotKeyboardButtons)(global, chatId, threadId);
  const {
    language,
    shouldSuggestStickers,
    shouldSuggestCustomEmoji,
    shouldUpdateStickerSetOrder
  } = global.settings.byKey;
  const baseEmojiKeywords = global.emojiKeywords[_config__WEBPACK_IMPORTED_MODULE_3__.BASE_EMOJI_KEYWORD_LANG];
  const emojiKeywords = language !== _config__WEBPACK_IMPORTED_MODULE_3__.BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;
  const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;
  const keyboardMessage = botKeyboardMessageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, chatId, botKeyboardMessageId) : undefined;
  const {
    currentUserId
  } = global;
  const currentUser = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUser)(global, currentUserId);
  const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;
  const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (chat.sendAsPeerIds.some(peer => peer.id === defaultSendAsId) ? defaultSendAsId : chat?.adminRights?.anonymous ? chat?.id : undefined);
  const sendAsUser = sendAsId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUser)(global, sendAsId) : undefined;
  const sendAsChat = !sendAsUser && sendAsId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, sendAsId) : undefined;
  const requestedDraft = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectRequestedDraft)(global, chatId);
  const requestedDraftFiles = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectRequestedDraftFiles)(global, chatId);
  const tabState = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global);
  const isStoryViewerOpen = Boolean(tabState.storyViewer.storyId);
  const currentMessageList = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentMessageList)(global);
  const isForCurrentMessageList = chatId === currentMessageList?.chatId && threadId === currentMessageList?.threadId && messageListType === currentMessageList?.type && !isStoryViewerOpen;
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUser)(global, chatId);
  const canSendVoiceByPrivacy = (user && !userFullInfo?.noVoiceMessages) ?? true;
  const slowMode = chatFullInfo?.slowMode;
  const isCurrentUserPremium = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsCurrentUserPremium)(global);
  const editingDraft = messageListType === 'scheduled' ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectEditingScheduledDraft)(global, chatId) : (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectEditingDraft)(global, chatId, threadId);
  const story = storyId && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPeerStory)(global, chatId, storyId);
  const sentStoryReaction = story && 'sentReaction' in story ? story.sentReaction : undefined;
  const draft = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectDraft)(global, chatId, threadId);
  const replyToMessage = draft?.replyInfo ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, chatId, draft.replyInfo.replyToMsgId) : undefined;
  const replyToTopic = chat?.isForum && chat.isForumAsMessages && threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID && replyToMessage ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopicFromMessage)(global, replyToMessage) : undefined;
  const isInScheduledList = messageListType === 'scheduled';
  const canSendQuickReplies = isChatWithUser && !isChatWithBot && !isInScheduledList && !isChatWithSelf;
  const noWebPage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectNoWebPage)(global, chatId, threadId);
  const areEffectsSupported = isChatWithUser && !isChatWithBot && !isInScheduledList && !isChatWithSelf && type !== 'story' && chatId !== _config__WEBPACK_IMPORTED_MODULE_3__.SERVICE_NOTIFICATIONS_USER_ID;
  const canPlayEffect = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPerformanceSettingsValue)(global, 'stickerEffects');
  const shouldPlayEffect = tabState.shouldPlayEffectInComposer;
  const effectId = areEffectsSupported && draft?.effectId;
  const effect = effectId ? global.availableEffectById[effectId] : undefined;
  const effectReactions = global.reactions.effectReactions;
  const maxMessageLength = global.config?.maxMessageLength || _config__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_MAX_MESSAGE_LENGTH;
  return {
    availableReactions: global.reactions.availableReactions,
    topReactions: type === 'story' ? global.reactions.topReactions : undefined,
    isOnActiveTab: !tabState.isBlurred,
    editingMessage: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectEditingMessage)(global, chatId, threadId, messageListType),
    draft,
    chat,
    isChatWithBot,
    isChatWithSelf,
    isForCurrentMessageList,
    canScheduleUntilOnline: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanScheduleUntilOnline)(global, chatId),
    isChannel: chat ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatChannel)(chat) : undefined,
    isRightColumnShown: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsRightColumnShown)(global, isMobile),
    isSelectModeActive: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsInSelectMode)(global),
    withScheduledButton: messageListType === 'thread' && (userFullInfo || chatFullInfo)?.hasScheduledMessages,
    isInScheduledList,
    botKeyboardMessageId,
    botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,
    isForwarding: chatId === tabState.forwardMessages.toChatId,
    pollModal: tabState.pollModal,
    stickersForEmoji: global.stickers.forEmoji.stickers,
    customEmojiForEmoji: global.customEmojis.forEmoji.stickers,
    chatFullInfo,
    topInlineBotIds: global.topInlineBots?.userIds,
    currentUserId,
    currentUser,
    contentToBeScheduled: tabState.contentToBeScheduled,
    shouldSuggestStickers,
    shouldSuggestCustomEmoji,
    shouldUpdateStickerSetOrder,
    recentEmojis: global.recentEmojis,
    baseEmojiKeywords: baseEmojiKeywords?.keywords,
    emojiKeywords: emojiKeywords?.keywords,
    inlineBots: tabState.inlineBots.byUsername,
    isInlineBotLoading: tabState.inlineBots.isLoading,
    botCommands: userFullInfo ? userFullInfo.botInfo?.commands || false : undefined,
    botMenuButton: userFullInfo?.botInfo?.menuButton,
    sendAsUser,
    sendAsChat,
    sendAsId,
    editingDraft,
    requestedDraft,
    requestedDraftFiles,
    attachBots: global.attachMenu.bots,
    attachMenuPeerType: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatType)(global, chatId),
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTheme)(global),
    fileSizeLimit: (0,_global_selectors_limits__WEBPACK_IMPORTED_MODULE_7__.selectCurrentLimit)(global, 'uploadMaxFileparts') * _config__WEBPACK_IMPORTED_MODULE_3__.MAX_UPLOAD_FILEPART_SIZE,
    captionLimit: (0,_global_selectors_limits__WEBPACK_IMPORTED_MODULE_7__.selectCurrentLimit)(global, 'captionLength'),
    isCurrentUserPremium,
    canSendVoiceByPrivacy,
    attachmentSettings: global.attachmentSettings,
    slowMode,
    currentMessageList,
    isReactionPickerOpen: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsReactionPickerOpen)(global),
    canBuyPremium: !isCurrentUserPremium && !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsPremiumPurchaseBlocked)(global),
    canPlayAnimatedEmojis: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanPlayAnimatedEmojis)(global),
    canSendOneTimeMedia: !isChatWithSelf && isChatWithUser && !isChatWithBot && !isInScheduledList,
    shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,
    sentStoryReaction,
    stealthMode: global.stories.stealthMode,
    replyToTopic,
    quickReplyMessages: global.quickReplies.messagesById,
    quickReplies: global.quickReplies.byId,
    canSendQuickReplies,
    noWebPage,
    webPagePreview: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global).webPagePreview,
    isContactRequirePremium: userFullInfo?.isContactRequirePremium,
    effect,
    effectReactions,
    areEffectsSupported,
    canPlayEffect,
    shouldPlayEffect,
    maxMessageLength
  };
})(Composer)));

/***/ }),

/***/ "./src/components/common/DeleteChatModal.tsx":
/*!***************************************************!*\
  !*** ./src/components/common/DeleteChatModal.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Modal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ui/Modal */ "./src/components/ui/Modal.tsx");
/* harmony import */ var _Avatar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _DeleteChatModal_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DeleteChatModal.scss */ "./src/components/common/DeleteChatModal.scss");










const DeleteChatModal = ({
  isOpen,
  chat,
  isSavedDialog,
  isChannel,
  isPrivateChat,
  isChatWithSelf,
  isBot,
  isBasicGroup,
  isSuperGroup,
  currentUserId,
  canDeleteForAll,
  contactName,
  onClose,
  onCloseAnimationEnd
}) => {
  const {
    leaveChannel,
    deleteHistory,
    deleteSavedHistory,
    deleteChannel,
    deleteChatUser,
    blockUser
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const chatTitle = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getChatTitle)(lang, chat);
  const handleDeleteForAll = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    deleteHistory({
      chatId: chat.id,
      shouldDeleteForAll: true
    });
    onClose();
  }, [chat.id, onClose]);
  const handleDeleteAndStop = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    deleteHistory({
      chatId: chat.id,
      shouldDeleteForAll: true
    });
    blockUser({
      userId: chat.id
    });
    onClose();
  }, [chat.id, onClose]);
  const handleDeleteChat = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (isSavedDialog) {
      deleteSavedHistory({
        chatId: chat.id
      });
    } else if (isPrivateChat) {
      deleteHistory({
        chatId: chat.id,
        shouldDeleteForAll: false
      });
    } else if (isBasicGroup) {
      deleteChatUser({
        chatId: chat.id,
        userId: currentUserId
      });
      deleteHistory({
        chatId: chat.id,
        shouldDeleteForAll: false
      });
    } else if ((isChannel || isSuperGroup) && !chat.isCreator) {
      leaveChannel({
        chatId: chat.id
      });
    } else if ((isChannel || isSuperGroup) && chat.isCreator) {
      deleteChannel({
        chatId: chat.id
      });
    }
    onClose();
  }, [isPrivateChat, isBasicGroup, isChannel, isSuperGroup, currentUserId, chat.isCreator, chat.id, isSavedDialog, onClose]);
  const handleLeaveChat = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (isChannel || isSuperGroup) {
      leaveChannel({
        chatId: chat.id
      });
      onClose();
    } else {
      handleDeleteChat();
    }
  }, [chat.id, handleDeleteChat, isChannel, isSuperGroup, leaveChannel, onClose]);
  function renderHeader() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "modal-header",
      dir: lang.isRtl ? 'rtl' : undefined
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_8__["default"], {
      size: "tiny",
      peer: chat,
      isSavedMessages: isChatWithSelf
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
      className: "modal-title"
    }, lang(renderTitle())));
  }
  function renderTitle() {
    if (isSavedDialog) {
      return isChatWithSelf ? 'ClearHistoryMyNotesTitle' : 'ClearHistoryTitleSingle2';
    }
    if (isChannel && !chat.isCreator) {
      return 'LeaveChannel';
    }
    if (isChannel && chat.isCreator) {
      return 'ChannelDelete';
    }
    if (isBasicGroup || isSuperGroup) {
      return 'Group.LeaveGroup';
    }
    return 'DeleteChatUser';
  }
  function renderContent() {
    if (isSavedDialog) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(isChatWithSelf ? lang('ClearHistoryMyNotesMessage') : lang('ClearHistoryMessageSingle', chatTitle), ['simple_markdown', 'emoji']));
    }
    if (isChannel && chat.isCreator) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(lang('ChatList.DeleteAndLeaveGroupConfirmation', chatTitle), ['simple_markdown', 'emoji']));
    }
    if (isChannel && !chat.isCreator || isBasicGroup || isSuperGroup) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(lang('ChannelLeaveAlertWithName', chatTitle), ['simple_markdown', 'emoji']));
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", null, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(lang('ChatList.DeleteChatConfirmation', contactName), ['simple_markdown', 'emoji']));
  }
  function renderActionText() {
    if (isSavedDialog) {
      return 'Delete';
    }
    if (isChannel && !chat.isCreator) {
      return 'LeaveChannel';
    }
    if (isChannel && chat.isCreator) {
      return 'Chat.Input.Delete';
    }
    if (isBasicGroup || isSuperGroup) {
      return 'Group.LeaveGroup';
    }
    return canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete';
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Modal__WEBPACK_IMPORTED_MODULE_7__["default"], {
    isOpen: isOpen,
    className: "DeleteChatModal",
    header: renderHeader(),
    onClose: onClose,
    onCloseAnimationEnd: onCloseAnimationEnd
  }, renderContent(), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "dialog-buttons-column"
  }, isBot && !isSavedDialog && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_6__["default"], {
    color: "danger",
    className: "confirm-dialog-button",
    isText: true,
    onClick: handleDeleteAndStop
  }, lang('DeleteAndStop')), canDeleteForAll && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_6__["default"], {
    color: "danger",
    className: "confirm-dialog-button",
    isText: true,
    onClick: handleDeleteForAll
  }, contactName ? (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(lang('ChatList.DeleteForEveryone', contactName)) : lang('DeleteForAll')), !isPrivateChat && chat.isCreator && !isSavedDialog && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_6__["default"], {
    color: "danger",
    className: "confirm-dialog-button",
    isText: true,
    onClick: handleDeleteChat
  }, lang('DeleteForAll')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_6__["default"], {
    color: "danger",
    className: "confirm-dialog-button",
    isText: true,
    onClick: isPrivateChat || isSavedDialog ? handleDeleteChat : handleLeaveChat
  }, lang(renderActionText())), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_6__["default"], {
    className: "confirm-dialog-button",
    isText: true,
    onClick: onClose
  }, lang('Cancel'))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chat,
  isSavedDialog
}) => {
  const isPrivateChat = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isUserId)(chat.id);
  const isChatWithSelf = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsChatWithSelf)(global, chat.id);
  const user = isPrivateChat && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPrivateChatUserId)(chat));
  const isBot = user && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isUserBot)(user) && !chat.isSupport;
  const canDeleteForAll = isPrivateChat && !isChatWithSelf && !isBot && !isSavedDialog;
  const contactName = isPrivateChat ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFirstOrLastName)((0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPrivateChatUserId)(chat))) : undefined;
  return {
    isPrivateChat,
    isChatWithSelf,
    isBot,
    isChannel: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatChannel)(chat),
    isBasicGroup: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatBasicGroup)(chat),
    isSuperGroup: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatSuperGroup)(chat),
    currentUserId: global.currentUserId,
    canDeleteForAll,
    contactName
  };
})(DeleteChatModal)));

/***/ }),

/***/ "./src/components/common/Document.tsx":
/*!********************************************!*\
  !*** ./src/components/common/Document.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _helpers_documentInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/documentInfo */ "./src/components/common/helpers/documentInfo.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useMediaWithLoadProgress */ "./src/hooks/useMediaWithLoadProgress.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Checkbox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/Checkbox */ "./src/components/ui/Checkbox.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _File__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./File */ "./src/components/common/File.tsx");













const BYTES_PER_MB = 1024 * 1024;
const SVG_EXTENSIONS = new Set(['svg', 'svgz']);
const Document = ({
  document,
  observeIntersection,
  smaller,
  canAutoLoad,
  autoLoadFileMaxSizeMb,
  uploadProgress,
  withDate,
  datetime,
  className,
  sender,
  isSelected,
  isSelectable,
  shouldWarnAboutSvg,
  isDownloading,
  message,
  onCancelUpload,
  onMediaClick,
  onDateClick
}) => {
  const {
    cancelMediaDownload,
    downloadMedia,
    setSettingOption
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const {
    fileName,
    size,
    timestamp
  } = document;
  const extension = (0,_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_3__.getDocumentExtension)(document) || '';
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_5__.useIsIntersecting)(ref, observeIntersection);
  const [wasIntersected, markIntersected] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isIntersecting) {
      markIntersected();
    }
  }, [isIntersecting, markIntersected]);

  // Auto-loading does not use global download manager because requires additional click to save files locally
  const [isLoadAllowed, setIsLoadAllowed] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(canAutoLoad && (!autoLoadFileMaxSizeMb || size <= autoLoadFileMaxSizeMb * BYTES_PER_MB));
  const shouldDownload = Boolean(isDownloading || isLoadAllowed && wasIntersected);
  const documentHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getDocumentMediaHash)(document, 'download');
  const {
    loadProgress: downloadProgress,
    mediaData
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_8__["default"])(documentHash, !shouldDownload, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMediaFormat)(document, 'download'), undefined, true);
  const isLoaded = Boolean(mediaData);
  const {
    isUploading,
    isTransferring,
    transferProgress
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMediaTransferState)(uploadProgress || downloadProgress, shouldDownload && !isLoaded, uploadProgress !== undefined);
  const hasPreview = (0,_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_3__.getDocumentHasPreview)(document);
  const thumbDataUri = hasPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMediaThumbUri)(document) : undefined;
  const localBlobUrl = hasPreview ? document.previewBlobUrl : undefined;
  const previewData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getDocumentMediaHash)(document, 'pictogram'), !isIntersecting);
  const withMediaViewer = onMediaClick && document.innerMediaType;
  const handleDownload = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    downloadMedia({
      media: document,
      originMessage: message
    });
  });
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    if (isUploading) {
      if (onCancelUpload) {
        onCancelUpload();
      }
      return;
    }
    if (isDownloading) {
      cancelMediaDownload({
        media: document
      });
      return;
    }
    if (isTransferring) {
      setIsLoadAllowed(false);
      return;
    }
    if (withMediaViewer) {
      onMediaClick();
      return;
    }
    if (SVG_EXTENSIONS.has(extension) && shouldWarnAboutSvg) {
      openSvgDialog();
      return;
    }
    handleDownload();
  });
  const handleSvgConfirm = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    setSettingOption({
      shouldWarnAboutSvg: !shouldNotWarnAboutSvg
    });
    closeSvgDialog();
    handleDownload();
  });
  const handleDateClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    onDateClick?.(message);
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_File__WEBPACK_IMPORTED_MODULE_12__["default"], {
    ref: ref,
    name: fileName,
    extension: extension,
    size: size,
    timestamp: withDate ? datetime || timestamp : undefined,
    thumbnailDataUri: thumbDataUri,
    previewData: localBlobUrl || previewData,
    smaller: smaller,
    isTransferring: isTransferring,
    isUploading: isUploading,
    transferProgress: transferProgress,
    className: className,
    sender: sender,
    isSelectable: isSelectable,
    isSelected: isSelected,
    actionIcon: withMediaViewer ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isDocumentVideo)(document) ? 'play' : 'eye' : 'download',
    onClick: handleClick,
    onDateClick: onDateClick ? handleDateClick : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_11__["default"], {
    isOpen: isSvgDialogOpen,
    onClose: closeSvgDialog,
    confirmHandler: handleSvgConfirm
  }, lang('lng_launch_svg_warning'), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Checkbox__WEBPACK_IMPORTED_MODULE_10__["default"], {
    className: "dialog-checkbox",
    checked: shouldNotWarnAboutSvg,
    label: lang('lng_launch_exe_dont_ask'),
    onCheck: setShouldNotWarnAboutSvg
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Document));

/***/ }),

/***/ "./src/components/common/DotAnimation.tsx":
/*!************************************************!*\
  !*** ./src/components/common/DotAnimation.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _DotAnimation_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DotAnimation.scss */ "./src/components/common/DotAnimation.scss");





const DotAnimation = ({
  content,
  className
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__["default"])();
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('DotAnimation', className),
    dir: lang.isRtl ? 'rtl' : 'auto'
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__["default"])(content), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "ellipsis"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DotAnimation);

/***/ }),

/***/ "./src/components/common/File.tsx":
/*!****************************************!*\
  !*** ./src/components/common/File.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_documentInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/documentInfo */ "./src/components/common/helpers/documentInfo.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useCanvasBlur__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useCanvasBlur */ "./src/hooks/useCanvasBlur.ts");
/* harmony import */ var _hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useMediaTransitionDeprecated */ "./src/hooks/useMediaTransitionDeprecated.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");
/* harmony import */ var _ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/ProgressSpinner */ "./src/components/ui/ProgressSpinner.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _File_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./File.scss */ "./src/components/common/File.scss");
















const File = ({
  ref,
  name,
  size,
  extension = '',
  timestamp,
  sender,
  thumbnailDataUri,
  previewData,
  className,
  smaller,
  isTransferring,
  isUploading,
  isSelectable,
  isSelected,
  transferProgress,
  actionIcon,
  onClick,
  onDateClick
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__["default"])();
  // eslint-disable-next-line no-null/no-null
  let elementRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  if (ref) {
    elementRef = ref;
  }
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const [withThumb] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!previewData);
  const noThumb = Boolean(previewData);
  const thumbRef = (0,_hooks_useCanvasBlur__WEBPACK_IMPORTED_MODULE_8__["default"])(thumbnailDataUri, noThumb, isMobile && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_CANVAS_FILTER_SUPPORTED);
  const thumbClassNames = (0,_hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_9__["default"])(!noThumb);
  const {
    shouldRender: shouldSpinnerRender,
    transitionClassNames: spinnerClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_11__["default"])(isTransferring, undefined, true);
  const color = (0,_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_4__.getColorFromExtension)(extension);
  const sizeString = (0,_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_4__.getFileSizeString)(size);
  const subtitle = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!isTransferring || !transferProgress) return sizeString;
    return `${(0,_helpers_documentInfo__WEBPACK_IMPORTED_MODULE_4__.getFileSizeString)(size * transferProgress)} / ${sizeString}`;
  }, [isTransferring, size, sizeString, transferProgress]);
  const {
    width,
    height
  } = (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.getDocumentThumbnailDimensions)(smaller);
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('File', className, smaller && 'smaller', onClick && !isUploading && 'interactive', isSelected && 'file-is-selected');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: elementRef,
    className: fullClassName,
    dir: lang.isRtl ? 'rtl' : undefined
  }, isSelectable && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-select-control"
  }, isSelected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    name: "select"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "file-icon-container",
    onClick: isUploading ? undefined : onClick
  }, thumbnailDataUri || previewData ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "file-preview media-inner"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: previewData,
    className: "full-media",
    width: width,
    height: height,
    draggable: false,
    alt: ""
  }), withThumb && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: thumbRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('thumbnail', thumbClassNames)
  })) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: `file-icon ${color}`
  }, extension.length <= 4 && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "file-ext",
    dir: "auto"
  }, extension)), shouldSpinnerRender && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('file-progress', color, spinnerClassNames)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_13__["default"], {
    progress: transferProgress,
    size: smaller ? 's' : 'm',
    onClick: isUploading ? onClick : undefined
  })), onClick && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    name: actionIcon || 'download',
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('action-icon', shouldSpinnerRender && 'hidden')
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "file-info"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "file-title",
    dir: "auto",
    title: name
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(name)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "file-subtitle",
    dir: "auto"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, subtitle), sender && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "file-sender"
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(sender)), !sender && Boolean(timestamp) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "bullet"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: onDateClick
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.formatMediaDateTime)(lang, timestamp * 1000, true))))), sender && Boolean(timestamp) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: onDateClick
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.formatPastTimeShort)(lang, timestamp * 1000)));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(File));

/***/ }),

/***/ "./src/components/common/GroupChatInfo.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/GroupChatInfo.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _Avatar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _DotAnimation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DotAnimation */ "./src/components/common/DotAnimation.tsx");
/* harmony import */ var _FullNameTitle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./FullNameTitle */ "./src/components/common/FullNameTitle.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _TopicIcon__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./TopicIcon */ "./src/components/common/TopicIcon.tsx");
/* harmony import */ var _TypingStatus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./TypingStatus */ "./src/components/common/TypingStatus.tsx");

















const TOPIC_ICON_SIZE = 2.5 * _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__.REM;
const GroupChatInfo = ({
  typingStatus,
  className,
  statusIcon,
  avatarSize = 'medium',
  noAvatar,
  status,
  withDots,
  withMediaViewer,
  withUsername,
  withFullInfo,
  withUpdatingStatus,
  withChatType,
  threadInfo,
  noRtl,
  chat,
  onlineCount,
  areMessagesLoaded,
  topic,
  messagesCount,
  noStatusOrTyping,
  withStory,
  storyViewerOrigin,
  noEmojiStatus,
  emojiStatusSize,
  isSavedDialog,
  self,
  onClick,
  onEmojiStatusClick
}) => {
  const {
    loadFullChat,
    openMediaViewer,
    loadMoreProfilePhotos
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const isSuperGroup = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatSuperGroup)(chat);
  const isTopic = Boolean(chat?.isForum && threadInfo && topic);
  const {
    id: chatId,
    isMin,
    isRestricted
  } = chat || {};
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (chatId && !isMin) {
      if (withFullInfo) loadFullChat({
        chatId
      });
      if (withMediaViewer) loadMoreProfilePhotos({
        peerId: chatId,
        isPreload: true
      });
    }
  }, [chatId, isMin, withFullInfo, isSuperGroup, withMediaViewer]);
  const handleAvatarViewerOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])((e, hasMedia) => {
    if (chat && hasMedia) {
      e.stopPropagation();
      openMediaViewer({
        isAvatarView: true,
        chatId: chat.id,
        mediaIndex: 0,
        origin: avatarSize === 'jumbo' ? _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.ProfileAvatar : _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.MiddleHeaderAvatar
      });
    }
  });
  const mainUsername = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => chat && withUsername && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMainUsername)(chat), [chat, withUsername]);
  if (!chat) {
    return undefined;
  }
  function renderStatusOrTyping() {
    if (status) {
      return withDots ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DotAnimation__WEBPACK_IMPORTED_MODULE_12__["default"], {
        className: "status",
        content: status
      }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "status",
        dir: "auto"
      }, statusIcon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
        className: "status-icon",
        name: statusIcon
      }), (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(status));
    }
    if (withUpdatingStatus && !areMessagesLoaded && !isRestricted) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DotAnimation__WEBPACK_IMPORTED_MODULE_12__["default"], {
        className: "status",
        content: lang('Updating')
      });
    }
    if (!chat) {
      return undefined;
    }
    if (typingStatus) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TypingStatus__WEBPACK_IMPORTED_MODULE_16__["default"], {
        typingStatus: typingStatus
      });
    }
    if (isTopic) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "status",
        dir: "auto"
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_10__["default"], {
        name: "fade",
        shouldRestoreHeight: true,
        activeKey: messagesCount !== undefined ? 1 : 2,
        className: "message-count-transition"
      }, messagesCount !== undefined && lang('messages', messagesCount, 'i')));
    }
    if (withChatType) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "status",
        dir: "auto"
      }, lang((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getChatTypeString)(chat)));
    }
    const groupStatus = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getGroupStatus)(lang, chat);
    const onlineStatus = onlineCount ? `, ${lang('OnlineCount', onlineCount, 'i')}` : undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "status"
    }, mainUsername && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "handle withStatus"
    }, mainUsername), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "group-status"
    }, groupStatus), onlineStatus && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "online-status"
    }, onlineStatus));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('ChatInfo', className),
    dir: !noRtl && lang.isRtl ? 'rtl' : undefined,
    onClick: onClick
  }, !noAvatar && !isTopic && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, isSavedDialog && self && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_11__["default"], {
    key: "saved-messages",
    size: avatarSize,
    peer: self,
    isSavedMessages: true,
    className: "saved-dialog-avatar"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_11__["default"], {
    key: chat.id,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(isSavedDialog && 'overlay-avatar'),
    size: avatarSize,
    peer: chat,
    withStory: withStory,
    storyViewerOrigin: storyViewerOrigin,
    storyViewerMode: "single-peer",
    isSavedDialog: isSavedDialog,
    onClick: withMediaViewer ? handleAvatarViewerOpen : undefined
  })), isTopic && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TopicIcon__WEBPACK_IMPORTED_MODULE_15__["default"], {
    topic: topic,
    className: "topic-header-icon",
    size: TOPIC_ICON_SIZE
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "info"
  }, topic ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    dir: "auto",
    className: "fullName"
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(topic.title)) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_FullNameTitle__WEBPACK_IMPORTED_MODULE_13__["default"], {
    peer: chat,
    emojiStatusSize: emojiStatusSize,
    withEmojiStatus: !noEmojiStatus,
    isSavedDialog: isSavedDialog,
    onEmojiStatusClick: onEmojiStatusClick
  }), !noStatusOrTyping && renderStatusOrTyping()));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId);
  const threadInfo = threadId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectThreadInfo)(global, chatId, threadId) : undefined;
  const onlineCount = chat ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatOnlineCount)(global, chat) : undefined;
  const areMessagesLoaded = Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessages)(global, chatId));
  const topic = threadId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTopic)(global, chatId, threadId) : undefined;
  const messagesCount = topic && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectThreadMessagesCount)(global, chatId, threadId);
  const self = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectUser)(global, global.currentUserId);
  return {
    chat,
    threadInfo,
    onlineCount,
    topic,
    areMessagesLoaded,
    messagesCount,
    self
  };
})(GroupChatInfo)));

/***/ }),

/***/ "./src/components/common/LastMessageMeta.tsx":
/*!***************************************************!*\
  !*** ./src/components/common/LastMessageMeta.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _MessageOutgoingStatus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MessageOutgoingStatus */ "./src/components/common/MessageOutgoingStatus.tsx");
/* harmony import */ var _LastMessageMeta_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LastMessageMeta.scss */ "./src/components/common/LastMessageMeta.scss");






const LastMessageMeta = ({
  className,
  message,
  outgoingStatus,
  draftDate
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const shouldUseDraft = draftDate && draftDate > message.date;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('LastMessageMeta', className)
  }, outgoingStatus && !shouldUseDraft && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageOutgoingStatus__WEBPACK_IMPORTED_MODULE_4__["default"], {
    status: outgoingStatus
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "time"
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.formatPastTimeShort)(lang, (shouldUseDraft ? draftDate : message.date) * 1000)));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(LastMessageMeta));

/***/ }),

/***/ "./src/components/common/LinkField.tsx":
/*!*********************************************!*\
  !*** ./src/components/common/LinkField.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ui/DropdownMenu */ "./src/components/ui/DropdownMenu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _LinkField_module_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./LinkField.module.scss */ "./src/components/common/LinkField.module.scss");












const InviteLink = ({
  title,
  link,
  isDisabled,
  className,
  withShare,
  onRevoke
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const {
    showNotification,
    openChatWithDraft
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const isOnlyCopy = !onRevoke;
  const copyLink = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_3__.copyTextToClipboard)(link);
    showNotification({
      message: {
        key: 'LinkCopied'
      }
    });
  });
  const handleCopyClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (isDisabled) return;
    copyLink();
  });
  const handleShare = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    openChatWithDraft({
      text: {
        text: link
      }
    });
  });
  const PrimaryLinkMenuButton = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return ({
      onTrigger,
      isOpen
    }) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_7__["default"], {
      round: true,
      ripple: !isMobile,
      size: "smaller",
      color: "translucent",
      className: isOpen ? 'active' : '',
      onClick: onTrigger,
      ariaLabel: lang('AccDescrOpenMenu2')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
      name: "more"
    }));
  }, [isMobile, lang]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: className
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: _LinkField_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].title
  }, lang(title || 'InviteLink.InviteLink')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _LinkField_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].primaryLink
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("input", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('form-control', _LinkField_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].input),
    value: link,
    readOnly: true,
    onClick: handleCopyClick
  }), isOnlyCopy ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_7__["default"], {
    color: "translucent",
    className: _LinkField_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].copy,
    size: "smaller",
    round: true,
    disabled: isDisabled,
    onClick: handleCopyClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
    name: "copy"
  })) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_8__["default"], {
    className: _LinkField_module_scss__WEBPACK_IMPORTED_MODULE_11__["default"].moreMenu,
    trigger: PrimaryLinkMenuButton,
    positionX: "right"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_9__["default"], {
    icon: "copy",
    onClick: handleCopyClick,
    disabled: isDisabled
  }, lang('Copy')), onRevoke && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_9__["default"], {
    icon: "delete",
    onClick: onRevoke,
    destructive: true
  }, lang('RevokeButton')))), withShare && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_7__["default"], {
    size: "smaller",
    disabled: isDisabled,
    onClick: handleShare
  }, lang('FolderLinkScreen.LinkActionShare')));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(InviteLink));

/***/ }),

/***/ "./src/components/common/Media.tsx":
/*!*****************************************!*\
  !*** ./src/components/common/Media.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useMediaTransitionDeprecated */ "./src/hooks/useMediaTransitionDeprecated.ts");
/* harmony import */ var _MediaSpoiler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./MediaSpoiler */ "./src/components/common/MediaSpoiler.tsx");
/* harmony import */ var _Media_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Media.scss */ "./src/components/common/Media.scss");












const Media = ({
  message,
  idPrefix = 'shared-media',
  isProtected,
  observeIntersection,
  onClick
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_6__.useIsIntersecting)(ref, observeIntersection);
  const thumbDataUri = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageMediaThumbDataUri)(message);
  const mediaBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_8__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageMediaHash)(message, 'pictogram'), !isIntersecting);
  const transitionClassNames = (0,_hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_9__["default"])(mediaBlobUrl);
  const video = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageVideo)(message);
  const hasSpoiler = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageIsSpoiler)(message);
  const [isSpoilerShown,, hideSpoiler] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__["default"])(hasSpoiler);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    hideSpoiler();
    onClick(message.id, message.chatId);
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    id: `${idPrefix}${(0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageHtmlId)(message.id)}`,
    className: "Media scroll-item",
    onClick: onClick ? handleClick : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: thumbDataUri,
    className: "media-miniature",
    alt: "",
    draggable: !isProtected,
    decoding: "async",
    onContextMenu: isProtected ? _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__["default"] : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: mediaBlobUrl,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('full-media', 'media-miniature', transitionClassNames),
    alt: "",
    draggable: !isProtected,
    decoding: "async",
    onContextMenu: isProtected ? _util_stopEvent__WEBPACK_IMPORTED_MODULE_4__["default"] : undefined
  }), hasSpoiler && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MediaSpoiler__WEBPACK_IMPORTED_MODULE_10__["default"], {
    thumbDataUri: mediaBlobUrl || thumbDataUri,
    isVisible: isSpoilerShown,
    className: "media-spoiler"
  }), video && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "video-duration"
  }, video.isGif ? 'GIF' : (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatMediaDuration)(video.duration)), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Media));

/***/ }),

/***/ "./src/components/common/MessageOutgoingStatus.tsx":
/*!*********************************************************!*\
  !*** ./src/components/common/MessageOutgoingStatus.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _MessageOutgoingStatus_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MessageOutgoingStatus.scss */ "./src/components/common/MessageOutgoingStatus.scss");




var Keys = /*#__PURE__*/function (Keys) {
  Keys[Keys["failed"] = 0] = "failed";
  Keys[Keys["pending"] = 1] = "pending";
  Keys[Keys["succeeded"] = 2] = "succeeded";
  Keys[Keys["read"] = 3] = "read";
  return Keys;
}(Keys || {});
const MessageOutgoingStatus = ({
  status
}) => {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "MessageOutgoingStatus"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_1__["default"], {
    name: "reveal",
    activeKey: Keys[status]
  }, status === 'failed' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "MessageOutgoingStatus--failed"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_2__["default"], {
    name: "message-failed"
  })) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_2__["default"], {
    name: `message-${status}`
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageOutgoingStatus));

/***/ }),

/***/ "./src/components/common/NothingFound.tsx":
/*!************************************************!*\
  !*** ./src/components/common/NothingFound.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _NothingFound_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./NothingFound.scss */ "./src/components/common/NothingFound.scss");






const DEFAULT_TEXT = 'Nothing found.';
const NothingFound = ({
  text = DEFAULT_TEXT,
  description
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const {
    transitionClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_4__["default"])(true);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('NothingFound', transitionClassNames, description && 'with-description')
  }, text, description && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "description"
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__["default"])(lang(description), ['br'])));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(NothingFound));

/***/ }),

/***/ "./src/components/common/PeerColorWrapper.tsx":
/*!****************************************************!*\
  !*** ./src/components/common/PeerColorWrapper.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_peerColor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _embedded_EmojiIconBackground__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./embedded/EmojiIconBackground */ "./src/components/common/embedded/EmojiIconBackground.tsx");
/* harmony import */ var _PeerColorWrapper_module_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PeerColorWrapper.module.scss */ "./src/components/common/PeerColorWrapper.module.scss");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }





function PeerColorWrapper({
  peer,
  peerColor,
  noUserColors,
  shoudReset,
  className,
  emojiIconClassName,
  children,
  ...otherProps
}) {
  const color = peerColor || peer?.color;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", _extends({
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_PeerColorWrapper_module_scss__WEBPACK_IMPORTED_MODULE_4__["default"].root, peer && (0,_helpers_peerColor__WEBPACK_IMPORTED_MODULE_2__.getPeerColorClass)(peer, noUserColors, shoudReset), peerColor && (0,_helpers_peerColor__WEBPACK_IMPORTED_MODULE_2__.getApiPeerColorClass)(peerColor), className)
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, otherProps), color?.backgroundEmojiId && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_embedded_EmojiIconBackground__WEBPACK_IMPORTED_MODULE_3__["default"], {
    className: emojiIconClassName,
    emojiDocumentId: color.backgroundEmojiId
  }), children);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(PeerColorWrapper));

/***/ }),

/***/ "./src/components/common/PrivateChatInfo.tsx":
/*!***************************************************!*\
  !*** ./src/components/common/PrivateChatInfo.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_schedulers_useIntervalForceUpdate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/schedulers/useIntervalForceUpdate */ "./src/hooks/schedulers/useIntervalForceUpdate.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_RippleEffect__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/RippleEffect */ "./src/components/ui/RippleEffect.tsx");
/* harmony import */ var _Avatar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _DotAnimation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DotAnimation */ "./src/components/common/DotAnimation.tsx");
/* harmony import */ var _FullNameTitle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./FullNameTitle */ "./src/components/common/FullNameTitle.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _TypingStatus__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./TypingStatus */ "./src/components/common/TypingStatus.tsx");
















const UPDATE_INTERVAL = 1000 * 60; // 1 min

const PrivateChatInfo = ({
  customPeer,
  typingStatus,
  avatarSize = 'medium',
  status,
  statusIcon,
  withDots,
  withMediaViewer,
  withUsername,
  withStory,
  withFullInfo,
  withUpdatingStatus,
  emojiStatusSize,
  noStatusOrTyping,
  noEmojiStatus,
  noFake,
  noVerified,
  noRtl,
  user,
  userStatus,
  self,
  isSavedMessages,
  isSavedDialog,
  areMessagesLoaded,
  adminMember,
  ripple,
  className,
  storyViewerOrigin,
  isSynced,
  onEmojiStatusClick,
  iconElement,
  rightElement
}) => {
  const {
    loadFullUser,
    openMediaViewer,
    loadMoreProfilePhotos
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const {
    id: userId
  } = user || {};
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (userId) {
      if (withFullInfo && isSynced) loadFullUser({
        userId
      });
      if (withMediaViewer) loadMoreProfilePhotos({
        peerId: userId,
        isPreload: true
      });
    }
  }, [userId, withFullInfo, withMediaViewer, isSynced]);
  (0,_hooks_schedulers_useIntervalForceUpdate__WEBPACK_IMPORTED_MODULE_7__["default"])(UPDATE_INTERVAL);
  const handleAvatarViewerOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])((e, hasMedia) => {
    if (user && hasMedia) {
      e.stopPropagation();
      openMediaViewer({
        isAvatarView: true,
        chatId: user.id,
        mediaIndex: 0,
        origin: avatarSize === 'jumbo' ? _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.ProfileAvatar : _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.MiddleHeaderAvatar
      });
    }
  });
  const mainUsername = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => user && withUsername && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMainUsername)(user), [user, withUsername]);
  if (!user && !customPeer) {
    return undefined;
  }
  function renderStatusOrTyping() {
    if (status) {
      return withDots ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DotAnimation__WEBPACK_IMPORTED_MODULE_12__["default"], {
        className: "status",
        content: status
      }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "status",
        dir: "auto"
      }, statusIcon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
        className: "status-icon",
        name: statusIcon
      }), (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(status));
    }
    if (withUpdatingStatus && !areMessagesLoaded) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DotAnimation__WEBPACK_IMPORTED_MODULE_12__["default"], {
        className: "status",
        content: lang('Updating')
      });
    }
    if (customPeer?.subtitleKey) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "status",
        dir: "auto"
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "user-status",
        dir: "auto"
      }, lang(customPeer.subtitleKey)));
    }
    if (!user) {
      return undefined;
    }
    if (typingStatus) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TypingStatus__WEBPACK_IMPORTED_MODULE_15__["default"], {
        typingStatus: typingStatus
      });
    }
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isSystemBot)(user.id)) {
      return undefined;
    }
    const translatedStatus = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getUserStatus)(lang, user, userStatus);
    const mainUserNameClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('handle', translatedStatus && 'withStatus');
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('status', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserOnline)(user, userStatus, true) && 'online')
    }, mainUsername && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: mainUserNameClassName
    }, mainUsername), translatedStatus && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "user-status",
      dir: "auto"
    }, translatedStatus));
  }
  const customTitle = adminMember ? adminMember.customTitle || lang(adminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin') : undefined;
  function renderNameTitle() {
    if (customTitle) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: "info-name-title"
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_FullNameTitle__WEBPACK_IMPORTED_MODULE_13__["default"], {
        peer: user,
        withEmojiStatus: !noEmojiStatus,
        emojiStatusSize: emojiStatusSize,
        isSavedMessages: isSavedMessages,
        isSavedDialog: isSavedDialog,
        onEmojiStatusClick: onEmojiStatusClick
      }), customTitle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "custom-title"
      }, customTitle));
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_FullNameTitle__WEBPACK_IMPORTED_MODULE_13__["default"], {
      peer: customPeer || user,
      noFake: noFake,
      noVerified: noVerified,
      withEmojiStatus: !noEmojiStatus,
      emojiStatusSize: emojiStatusSize,
      isSavedMessages: isSavedMessages,
      isSavedDialog: isSavedDialog,
      onEmojiStatusClick: onEmojiStatusClick,
      iconElement: iconElement
    });
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('ChatInfo', className),
    dir: !noRtl && lang.isRtl ? 'rtl' : undefined
  }, isSavedDialog && self && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_11__["default"], {
    key: "saved-messages",
    size: avatarSize,
    peer: self,
    isSavedMessages: true,
    className: "saved-dialog-avatar"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_11__["default"], {
    key: user?.id,
    size: avatarSize,
    peer: customPeer || user,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(isSavedDialog && 'overlay-avatar'),
    isSavedMessages: isSavedMessages,
    isSavedDialog: isSavedDialog,
    withStory: withStory,
    storyViewerOrigin: storyViewerOrigin,
    storyViewerMode: "single-peer",
    onClick: withMediaViewer ? handleAvatarViewerOpen : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "info"
  }, renderNameTitle(), (status || !isSavedMessages && !noStatusOrTyping) && renderStatusOrTyping()), ripple && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_RippleEffect__WEBPACK_IMPORTED_MODULE_10__["default"], null), rightElement);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  userId,
  forceShowSelf
}) => {
  const {
    isSynced
  } = global;
  const user = userId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectUser)(global, userId) : undefined;
  const userStatus = userId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectUserStatus)(global, userId) : undefined;
  const isSavedMessages = !forceShowSelf && user && user.isSelf;
  const self = isSavedMessages ? user : (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectUser)(global, global.currentUserId);
  const areMessagesLoaded = Boolean(userId && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessages)(global, userId));
  return {
    user,
    userStatus,
    isSavedMessages,
    areMessagesLoaded,
    self,
    isSynced
  };
})(PrivateChatInfo)));

/***/ }),

/***/ "./src/components/common/ProfileInfo.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/ProfileInfo.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEvents__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/captureEvents */ "./src/util/captureEvents.ts");
/* harmony import */ var _util_memo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/memo */ "./src/util/memo.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_schedulers_useIntervalForceUpdate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/schedulers/useIntervalForceUpdate */ "./src/hooks/schedulers/useIntervalForceUpdate.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_usePhotosPreload__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hooks/usePhotosPreload */ "./src/components/common/hooks/usePhotosPreload.ts");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _Avatar__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _FullNameTitle__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./FullNameTitle */ "./src/components/common/FullNameTitle.tsx");
/* harmony import */ var _ProfilePhoto__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ProfilePhoto */ "./src/components/common/ProfilePhoto.tsx");
/* harmony import */ var _TopicIcon__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./TopicIcon */ "./src/components/common/TopicIcon.tsx");
/* harmony import */ var _ProfileInfo_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ProfileInfo.scss */ "./src/components/common/ProfileInfo.scss");
/* harmony import */ var _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ProfileInfo.module.scss */ "./src/components/common/ProfileInfo.module.scss");






















const EMOJI_STATUS_SIZE = 24;
const EMOJI_TOPIC_SIZE = 120;
const LOAD_MORE_THRESHOLD = 3;
const MAX_PHOTO_DASH_COUNT = 30;
const STATUS_UPDATE_INTERVAL = 1000 * 60; // 1 min

const ProfileInfo = ({
  forceShowSelf,
  canPlayVideo,
  user,
  userStatus,
  chat,
  mediaIndex,
  avatarOwnerId,
  topic,
  messagesCount,
  emojiStatusSticker,
  profilePhotos,
  peerId
}) => {
  const {
    openMediaViewer,
    openPremiumModal,
    openStickerSet,
    openPrivacySettingsNoticeModal,
    loadMoreProfilePhotos
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__["default"])();
  (0,_hooks_schedulers_useIntervalForceUpdate__WEBPACK_IMPORTED_MODULE_10__["default"])(user ? STATUS_UPDATE_INTERVAL : undefined);
  const photos = profilePhotos?.photos || _util_memo__WEBPACK_IMPORTED_MODULE_7__.MEMO_EMPTY_ARRAY;
  const prevMediaIndex = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_13__["default"])(mediaIndex);
  const prevAvatarOwnerId = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_13__["default"])(avatarOwnerId);
  const [hasSlideAnimation, setHasSlideAnimation] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  // slideOptimized doesn't work well when animation is dynamically disabled
  const slideAnimation = hasSlideAnimation ? lang.isRtl ? 'slideRtl' : 'slide' : 'none';
  const [currentPhotoIndex, setCurrentPhotoIndex] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const isFirst = photos.length <= 1 || currentPhotoIndex === 0;
  const isLast = photos.length <= 1 || currentPhotoIndex === photos.length - 1;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (photos.length - currentPhotoIndex <= LOAD_MORE_THRESHOLD) {
      loadMoreProfilePhotos({
        peerId
      });
    }
  }, [currentPhotoIndex, peerId, photos.length]);

  // Set the current avatar photo to the last selected photo in Media Viewer after it is closed
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (prevAvatarOwnerId && prevMediaIndex !== undefined && mediaIndex === undefined) {
      setHasSlideAnimation(false);
      setCurrentPhotoIndex(prevMediaIndex);
    }
  }, [mediaIndex, prevMediaIndex, prevAvatarOwnerId]);

  // Deleting the last profile photo may result in an error
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (currentPhotoIndex > photos.length) {
      setHasSlideAnimation(false);
      setCurrentPhotoIndex(Math.max(0, photos.length - 1));
    }
  }, [currentPhotoIndex, photos.length]);
  (0,_hooks_usePhotosPreload__WEBPACK_IMPORTED_MODULE_14__["default"])(photos, currentPhotoIndex);
  const handleProfilePhotoClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    openMediaViewer({
      isAvatarView: true,
      chatId: peerId,
      mediaIndex: currentPhotoIndex,
      origin: forceShowSelf ? _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.SettingsAvatar : _types__WEBPACK_IMPORTED_MODULE_2__.MediaViewerOrigin.ProfileAvatar
    });
  });
  const handleStatusClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    if (!peerId) {
      openStickerSet({
        stickerSetInfo: emojiStatusSticker.stickerSetInfo
      });
      return;
    }
    openPremiumModal({
      fromUserId: peerId
    });
  });
  const selectPreviousMedia = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    if (isFirst) {
      return;
    }
    setHasSlideAnimation(true);
    setCurrentPhotoIndex(currentPhotoIndex - 1);
  });
  const selectNextMedia = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    if (isLast) {
      return;
    }
    setHasSlideAnimation(true);
    setCurrentPhotoIndex(currentPhotoIndex + 1);
  });
  const handleOpenGetReadDateModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    openPrivacySettingsNoticeModal({
      chatId: chat.id,
      isReadDate: false
    });
  });
  function handleSelectFallbackPhoto() {
    if (!isFirst) return;
    setHasSlideAnimation(true);
    setCurrentPhotoIndex(photos.length - 1);
  }

  // Swipe gestures
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const element = document.querySelector(`.${_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].photoWrapper}`);
    if (!element) {
      return undefined;
    }
    return (0,_util_captureEvents__WEBPACK_IMPORTED_MODULE_6__.captureEvents)(element, {
      selectorToPreventScroll: '.Profile, .settings-content',
      onSwipe: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_8__.IS_TOUCH_ENV ? (e, direction) => {
        if (direction === _util_captureEvents__WEBPACK_IMPORTED_MODULE_6__.SwipeDirection.Right) {
          selectPreviousMedia();
          return true;
        } else if (direction === _util_captureEvents__WEBPACK_IMPORTED_MODULE_6__.SwipeDirection.Left) {
          selectNextMedia();
          return true;
        }
        return false;
      } : undefined
    });
  }, [selectNextMedia, selectPreviousMedia]);
  if (!user && !chat) {
    return undefined;
  }
  function renderTopic() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].topicContainer
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TopicIcon__WEBPACK_IMPORTED_MODULE_19__["default"], {
      topic: topic,
      size: EMOJI_TOPIC_SIZE,
      className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].topicIcon,
      letterClassName: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].topicIconTitle,
      noLoopLimit: true
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
      className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].topicTitle,
      dir: lang.isRtl ? 'rtl' : undefined
    }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_9__["default"])(topic.title)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].topicMessagesCounter
    }, messagesCount ? lang('Chat.Title.Topic', messagesCount, 'i') : lang('lng_forum_no_messages')));
  }
  function renderPhotoTabs() {
    const totalPhotosLength = Math.max(photos.length, profilePhotos?.count || 0);
    if (!photos || totalPhotosLength <= 1) {
      return undefined;
    }
    const enumerator = Array.from({
      length: Math.min(totalPhotosLength, MAX_PHOTO_DASH_COUNT)
    });
    const activeDashIndex = currentPhotoIndex >= MAX_PHOTO_DASH_COUNT ? MAX_PHOTO_DASH_COUNT - 1 : currentPhotoIndex;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].photoDashes
    }, enumerator.map((_, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].photoDash, i === activeDashIndex && _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].photoDash_current)
    })));
  }
  function renderPhoto(isActive) {
    const photo = photos.length > 0 ? photos[currentPhotoIndex] : undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ProfilePhoto__WEBPACK_IMPORTED_MODULE_18__["default"], {
      key: currentPhotoIndex,
      user: user,
      chat: chat,
      photo: photo,
      canPlayVideo: Boolean(isActive && canPlayVideo),
      onClick: handleProfilePhotoClick
    });
  }
  function renderStatus() {
    const isAnonymousForwards = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isAnonymousForwardsChat)(peerId);
    const isSystemBotChat = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isSystemBot)(peerId);
    if (isAnonymousForwards || isSystemBotChat) return undefined;
    if (user) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
        className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].status, 'status', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserOnline)(user, userStatus) && 'online')
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].userStatus,
        dir: "auto"
      }, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getUserStatus)(lang, user, userStatus)), userStatus?.isReadDateRestrictedByMe && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].getStatus,
        onClick: handleOpenGetReadDateModal
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, lang('StatusHiddenShow'))));
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].status, 'status'),
      dir: "auto"
    }, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat) ? lang('Subscribers', chat.membersCount ?? 0, 'i') : lang('Members', chat.membersCount ?? 0, 'i'));
  }
  if (topic) {
    return renderTopic();
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('ProfileInfo'),
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].photoWrapper
  }, renderPhotoTabs(), !forceShowSelf && profilePhotos?.personalPhoto && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].fallbackPhoto, isFirst && _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].fallbackPhotoVisible)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].fallbackPhotoContents
  }, lang(profilePhotos.personalPhoto.isVideo ? 'UserInfo.CustomVideo' : 'UserInfo.CustomPhoto'))), forceShowSelf && profilePhotos?.fallbackPhoto && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].fallbackPhoto, (isFirst || isLast) && _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].fallbackPhotoVisible)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].fallbackPhotoContents,
    onClick: handleSelectFallbackPhoto
  }, !isLast && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Avatar__WEBPACK_IMPORTED_MODULE_16__["default"], {
    photo: profilePhotos.fallbackPhoto,
    className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].fallbackPhotoAvatar,
    size: "mini"
  }), lang(profilePhotos.fallbackPhoto.isVideo ? 'UserInfo.PublicVideo' : 'UserInfo.PublicPhoto'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_15__["default"], {
    activeKey: currentPhotoIndex,
    name: slideAnimation
  }, renderPhoto), !isFirst && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("button", {
    type: "button",
    dir: lang.isRtl ? 'rtl' : undefined,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].navigation, _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].navigation_prev),
    "aria-label": lang('AccDescrPrevious'),
    onClick: selectPreviousMedia
  }), !isLast && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("button", {
    type: "button",
    dir: lang.isRtl ? 'rtl' : undefined,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].navigation, _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].navigation_next),
    "aria-label": lang('Next'),
    onClick: selectNextMedia
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ProfileInfo_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].info,
    dir: lang.isRtl ? 'rtl' : 'auto'
  }, (user || chat) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_FullNameTitle__WEBPACK_IMPORTED_MODULE_17__["default"], {
    peer: user || chat,
    withEmojiStatus: true,
    emojiStatusSize: EMOJI_STATUS_SIZE,
    onEmojiStatusClick: handleStatusClick,
    noLoopLimit: true,
    canCopyTitle: true
  }), renderStatus()));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  peerId
}) => {
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectUser)(global, peerId);
  const userStatus = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectUserStatus)(global, peerId);
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, peerId);
  const profilePhotos = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerPhotos)(global, peerId);
  const {
    mediaIndex,
    chatId: avatarOwnerId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).mediaViewer;
  const isForum = chat?.isForum;
  const {
    threadId: currentTopicId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global) || {};
  const topic = isForum && currentTopicId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTopic)(global, peerId, currentTopicId) : undefined;
  const emojiStatus = (user || chat)?.emojiStatus;
  const emojiStatusSticker = emojiStatus ? global.customEmojis.byId[emojiStatus.documentId] : undefined;
  return {
    user,
    userStatus,
    chat,
    mediaIndex,
    avatarOwnerId,
    emojiStatusSticker,
    profilePhotos,
    ...(topic && {
      topic,
      messagesCount: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectThreadMessagesCount)(global, peerId, currentTopicId)
    })
  };
})(ProfileInfo)));

/***/ }),

/***/ "./src/components/common/ProfilePhoto.tsx":
/*!************************************************!*\
  !*** ./src/components/common/ProfilePhoto.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_peerColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useCanvasBlur__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useCanvasBlur */ "./src/hooks/useCanvasBlur.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../hooks/useMediaTransitionDeprecated */ "./src/hooks/useMediaTransitionDeprecated.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/OptimizedVideo */ "./src/components/ui/OptimizedVideo.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ProfilePhoto_scss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ProfilePhoto.scss */ "./src/components/common/ProfilePhoto.scss");

















const ProfilePhoto = ({
  chat,
  user,
  photo,
  isSavedMessages,
  isSavedDialog,
  canPlayVideo,
  onClick
}) => {
  // eslint-disable-next-line no-null/no-null
  const videoRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const isDeleted = user && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.isDeletedUser)(user);
  const isRepliesChat = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.isChatWithRepliesBot)(chat.id);
  const isAnonymousForwards = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.isAnonymousForwardsChat)(chat.id);
  const peer = user || chat;
  const canHaveMedia = peer && !isSavedMessages && !isDeleted && !isRepliesChat && !isAnonymousForwards;
  const {
    isVideo
  } = photo || {};
  const avatarHash = (!photo || photo.id === peer.avatarPhotoId) && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getChatAvatarHash)(peer, 'normal');
  const previewHash = canHaveMedia && photo && !avatarHash && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getPhotoMediaHash)(photo, 'pictogram');
  const previewBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__["default"])(previewHash || avatarHash);
  const photoHash = canHaveMedia && photo && !isVideo && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getProfilePhotoMediaHash)(photo);
  const photoBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__["default"])(photoHash);
  const videoHash = canHaveMedia && photo && isVideo && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getVideoProfilePhotoMediaHash)(photo);
  const videoBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__["default"])(videoHash);
  const fullMediaData = videoBlobUrl || photoBlobUrl;
  const [isVideoReady, markVideoReady] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const isFullMediaReady = Boolean(fullMediaData && (!isVideo || isVideoReady));
  const transitionClassNames = (0,_hooks_useMediaTransitionDeprecated__WEBPACK_IMPORTED_MODULE_11__["default"])(isFullMediaReady);
  const isBlurredThumb = canHaveMedia && !isFullMediaReady && !previewBlobUrl && photo?.thumbnail?.dataUri;
  const blurredThumbCanvasRef = (0,_hooks_useCanvasBlur__WEBPACK_IMPORTED_MODULE_8__["default"])(photo?.thumbnail?.dataUri, !isBlurredThumb, isMobile && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_CANVAS_FILTER_SUPPORTED);
  const hasMedia = photo || previewBlobUrl || isBlurredThumb;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (videoRef.current && !canPlayVideo) {
      videoRef.current.currentTime = 0;
    }
  }, [canPlayVideo]);
  const specialIcon = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (isSavedMessages) {
      return isSavedDialog ? 'my-notes' : 'avatar-saved-messages';
    }
    if (isDeleted) {
      return 'avatar-deleted-account';
    }
    if (isRepliesChat) {
      return 'reply-filled';
    }
    if (isAnonymousForwards) {
      return 'author-hidden';
    }
    return undefined;
  }, [isAnonymousForwards, isDeleted, isSavedDialog, isRepliesChat, isSavedMessages]);
  let content;
  if (specialIcon) {
    content = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
      name: specialIcon,
      role: "img"
    });
  } else if (hasMedia) {
    content = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, isBlurredThumb ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
      ref: blurredThumbCanvasRef,
      className: "thumb"
    }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
      src: previewBlobUrl,
      draggable: false,
      className: "thumb",
      alt: ""
    }), photo && (isVideo ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_13__["default"], {
      canPlay: canPlayVideo,
      ref: videoRef,
      src: fullMediaData,
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('avatar-media', transitionClassNames),
      muted: true,
      disablePictureInPicture: true,
      loop: true,
      playsInline: true,
      onReady: markVideoReady
    }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
      src: fullMediaData,
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('avatar-media', transitionClassNames),
      alt: ""
    })));
  } else if (user) {
    const userFullName = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getUserFullName)(user);
    content = userFullName ? (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.getFirstLetters)(userFullName, 2) : undefined;
  } else if (chat) {
    const title = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getChatTitle)(lang, chat);
    content = title && (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.getFirstLetters)(title, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.isUserId)(chat.id) ? 2 : 1);
  } else {
    content = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "spinner-wrapper"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_14__["default"], {
      color: "white"
    }));
  }
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('ProfilePhoto', (0,_helpers_peerColor__WEBPACK_IMPORTED_MODULE_5__.getPeerColorClass)(peer), isSavedMessages && 'saved-messages', isAnonymousForwards && 'anonymous-forwards', isDeleted && 'deleted-account', isRepliesChat && 'replies-bot-account', !isSavedMessages && !hasMedia && 'no-photo');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: fullClassName,
    onClick: hasMedia ? onClick : undefined
  }, typeof content === 'string' ? (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(content, ['hq_emoji']) : content);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ProfilePhoto));

/***/ }),

/***/ "./src/components/common/TopicIcon.tsx":
/*!*********************************************!*\
  !*** ./src/components/common/TopicIcon.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _CustomEmoji__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _TopicDefaultIcon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TopicDefaultIcon */ "./src/components/common/TopicDefaultIcon.tsx");



const LOOP_LIMIT = 2;
const DEFAULT_ICON_ID = '0';
const TopicIcon = ({
  topic,
  className,
  letterClassName,
  size,
  noLoopLimit,
  observeIntersection,
  onClick
}) => {
  if (topic.iconEmojiId && topic.iconEmojiId !== DEFAULT_ICON_ID) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CustomEmoji__WEBPACK_IMPORTED_MODULE_1__["default"], {
      documentId: topic.iconEmojiId,
      className: className,
      size: size,
      observeIntersectionForPlaying: observeIntersection,
      loopLimit: !noLoopLimit ? LOOP_LIMIT : undefined,
      onClick: onClick
    });
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TopicDefaultIcon__WEBPACK_IMPORTED_MODULE_2__["default"], {
    iconColor: topic.iconColor,
    title: topic.title,
    topicId: topic.id,
    className: className,
    letterClassName: letterClassName,
    onClick: onClick
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(TopicIcon));

/***/ }),

/***/ "./src/components/common/TypingStatus.tsx":
/*!************************************************!*\
  !*** ./src/components/common/TypingStatus.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _DotAnimation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DotAnimation */ "./src/components/common/DotAnimation.tsx");
/* harmony import */ var _TypingStatus_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TypingStatus.scss */ "./src/components/common/TypingStatus.scss");








const TypingStatus = ({
  typingStatus,
  typingUser
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const typingUserName = typingUser && !typingUser.isSelf && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getUserFirstOrLastName)(typingUser);
  const content = lang(typingStatus.action)
  // Fix for translation "{user} is typing"
  .replace('{user}', '').replace('{emoji}', typingStatus.emoji || '').trim();
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "typing-status",
    dir: lang.isRtl ? 'rtl' : 'auto'
  }, typingUserName && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "sender-name",
    dir: "auto"
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_4__["default"])(typingUserName)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DotAnimation__WEBPACK_IMPORTED_MODULE_6__["default"], {
    content: content
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  typingStatus
}) => {
  if (!typingStatus.userId) {
    return {};
  }
  const typingUser = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUser)(global, typingStatus.userId);
  return {
    typingUser
  };
})(TypingStatus)));

/***/ }),

/***/ "./src/components/common/WebLink.tsx":
/*!*******************************************!*\
  !*** ./src/components/common/WebLink.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_trimText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/trimText */ "./src/util/trimText.ts");
/* harmony import */ var _helpers_renderMessageText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/renderMessageText */ "./src/components/common/helpers/renderMessageText.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ui/Link */ "./src/components/ui/Link.tsx");
/* harmony import */ var _Media__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Media */ "./src/components/common/Media.tsx");
/* harmony import */ var _SafeLink__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SafeLink */ "./src/components/common/SafeLink.tsx");
/* harmony import */ var _WebLink_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./WebLink.scss */ "./src/components/common/WebLink.scss");













const MAX_TEXT_LENGTH = 170; // symbols

const WebLink = ({
  message,
  senderTitle,
  isProtected,
  observeIntersection,
  onMessageClick
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  let linkData = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageWebPage)(message);
  if (!linkData) {
    const link = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getFirstLinkInMessage)(message);
    if (link) {
      const {
        url,
        domain
      } = link;
      linkData = {
        siteName: domain.replace(/^www./, ''),
        url: url.includes('://') ? url : url.includes('@') ? `mailto:${url}` : `http://${url}`,
        formattedDescription: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_1__.getMessageText)(message) !== url ? (0,_helpers_renderMessageText__WEBPACK_IMPORTED_MODULE_5__.renderMessageSummary)(lang, message, undefined, undefined, MAX_TEXT_LENGTH) : undefined
      };
    }
  }
  const handleMessageClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    onMessageClick(message);
  });
  if (!linkData) {
    return undefined;
  }
  const {
    siteName,
    url,
    displayUrl,
    title,
    description,
    formattedDescription,
    photo,
    video
  } = linkData;
  const truncatedDescription = !senderTitle && description && (0,_util_trimText__WEBPACK_IMPORTED_MODULE_4__["default"])(description, MAX_TEXT_LENGTH);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('WebLink scroll-item', !photo && !video && 'without-media');
  const safeLinkContent = url.replace('mailto:', '') || displayUrl;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: className,
    "data-initial": (siteName || displayUrl)[0],
    dir: lang.isRtl ? 'rtl' : undefined
  }, photo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Media__WEBPACK_IMPORTED_MODULE_10__["default"], {
    message: message,
    isProtected: isProtected,
    observeIntersection: observeIntersection
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "content"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_9__["default"], {
    isRtl: lang.isRtl,
    className: "site-title",
    onClick: handleMessageClick
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(title || siteName || displayUrl)), (truncatedDescription || formattedDescription) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_9__["default"], {
    isRtl: lang.isRtl,
    className: "site-description",
    onClick: handleMessageClick
  }, formattedDescription || truncatedDescription && (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(truncatedDescription)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_SafeLink__WEBPACK_IMPORTED_MODULE_11__["default"], {
    url: url,
    className: "site-name",
    text: safeLinkContent,
    isRtl: lang.isRtl
  }), senderTitle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "sender-name"
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(senderTitle))), senderTitle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-date"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_9__["default"], {
    className: "date",
    onClick: handleMessageClick,
    isRtl: lang.isRtl
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatPastTimeShort)(lang, message.date * 1000))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(WebLink));

/***/ }),

/***/ "./src/components/common/embedded/EmbeddedMessage.tsx":
/*!************************************************************!*\
  !*** ./src/components/common/embedded/EmbeddedMessage.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClosableEmbeddedMessage: () => (/* binding */ ClosableEmbeddedMessage),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers/messageSummary */ "./src/global/helpers/messageSummary.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_hoc_freezeWhenClosed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/hoc/freezeWhenClosed */ "./src/util/hoc/freezeWhenClosed.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_peerColor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_useFastClick__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useFastClick */ "./src/hooks/useFastClick.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useThumbnail__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useThumbnail */ "./src/hooks/useThumbnail.ts");
/* harmony import */ var _middle_message_hooks_useMessageTranslation__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../middle/message/hooks/useMessageTranslation */ "./src/components/middle/message/hooks/useMessageTranslation.ts");
/* harmony import */ var _middle_ActionMessage__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../middle/ActionMessage */ "./src/components/middle/ActionMessage.tsx");
/* harmony import */ var _ui_RippleEffect__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/RippleEffect */ "./src/components/ui/RippleEffect.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _MediaSpoiler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../MediaSpoiler */ "./src/components/common/MediaSpoiler.tsx");
/* harmony import */ var _MessageSummary__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../MessageSummary */ "./src/components/common/MessageSummary.tsx");
/* harmony import */ var _EmojiIconBackground__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./EmojiIconBackground */ "./src/components/common/embedded/EmojiIconBackground.tsx");
/* harmony import */ var _EmbeddedMessage_scss__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./EmbeddedMessage.scss */ "./src/components/common/embedded/EmbeddedMessage.scss");























const NBSP = '\u00A0';
const EMOJI_SIZE = 17;
const EmbeddedMessage = ({
  className,
  message,
  replyInfo,
  sender,
  senderChat,
  forwardSender,
  title,
  customText,
  isProtected,
  isInComposer,
  noUserColors,
  chatTranslations,
  requestedChatTranslationLanguage,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  onClick
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_11__.useIsIntersecting)(ref, observeIntersectionForLoading);
  const containedMedia = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const media = replyInfo?.type === 'message' && replyInfo.replyMedia || message?.content;
    if (!media) {
      return undefined;
    }
    return {
      content: media
    };
  }, [message, replyInfo]);
  const gif = containedMedia?.content?.video?.isGif ? containedMedia.content.video : undefined;
  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);
  const mediaHash = containedMedia && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageMediaHash)(containedMedia, isVideoThumbnail ? 'full' : 'pictogram');
  const mediaBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_12__["default"])(mediaHash, !isIntersecting);
  const mediaThumbnail = (0,_hooks_useThumbnail__WEBPACK_IMPORTED_MODULE_14__["default"])(containedMedia);
  const isRoundVideo = Boolean(containedMedia && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageRoundVideo)(containedMedia));
  const isSpoiler = Boolean(containedMedia && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageIsSpoiler)(containedMedia));
  const isQuote = Boolean(replyInfo?.type === 'message' && replyInfo.isQuote);
  const replyForwardInfo = replyInfo?.type === 'message' ? replyInfo.replyFrom : undefined;
  const shouldTranslate = message && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isMessageTranslatable)(message);
  const {
    translatedText
  } = (0,_middle_message_hooks_useMessageTranslation__WEBPACK_IMPORTED_MODULE_15__["default"])(chatTranslations, message?.chatId, shouldTranslate ? message?.id : undefined, requestedChatTranslationLanguage);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const senderTitle = sender ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPeerTitle)(lang, sender) : replyForwardInfo?.hiddenUserName || message?.forwardInfo?.hiddenUserName;
  const senderChatTitle = senderChat ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPeerTitle)(lang, senderChat) : undefined;
  const forwardSenderTitle = forwardSender ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getPeerTitle)(lang, forwardSender) : message?.forwardInfo?.hiddenUserName;
  const areSendersSame = sender && sender.id === forwardSender?.id;
  const {
    handleClick,
    handleMouseDown
  } = (0,_hooks_useFastClick__WEBPACK_IMPORTED_MODULE_10__.useFastClick)(onClick);
  function renderTextContent() {
    if (replyInfo?.type === 'message' && replyInfo.quoteText) {
      return (0,_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_9__.renderTextWithEntities)({
        text: replyInfo.quoteText.text,
        entities: replyInfo.quoteText.entities,
        noLineBreaks: isInComposer,
        emojiSize: EMOJI_SIZE
      });
    }
    if (!message) {
      return customText || renderMediaContentType(containedMedia) || NBSP;
    }
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isActionMessage)(message)) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_ActionMessage__WEBPACK_IMPORTED_MODULE_16__["default"], {
        message: message,
        isEmbedded: true,
        observeIntersectionForLoading: observeIntersectionForLoading,
        observeIntersectionForPlaying: observeIntersectionForPlaying
      });
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MessageSummary__WEBPACK_IMPORTED_MODULE_20__["default"], {
      message: message,
      noEmoji: Boolean(mediaThumbnail),
      translatedText: translatedText,
      observeIntersectionForLoading: observeIntersectionForLoading,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      emojiSize: EMOJI_SIZE
    });
  }
  function renderMediaContentType(media) {
    if (!media || media.content.text) return NBSP;
    const description = (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__.getMediaContentTypeDescription)(lang, media.content, {});
    if (!description || description === _config__WEBPACK_IMPORTED_MODULE_1__.CONTENT_NOT_SUPPORTED) return NBSP;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(description));
  }
  function checkShouldRenderSenderTitle() {
    if (!senderChat) return true;
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isUserId)(senderChat?.id)) return true;
    if (senderChat.id === sender?.id) return false;
    return true;
  }
  function renderSender() {
    if (title) {
      return (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(title);
    }
    if (!senderTitle) {
      return NBSP;
    }
    let icon;
    if (senderChat) {
      if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatChannel)(senderChat)) {
        icon = 'channel-filled';
      }
      if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatGroup)(senderChat)) {
        icon = 'group-filled';
      }
    }
    const isReplyToQuote = isInComposer && Boolean(replyInfo && 'quoteText' in replyInfo && replyInfo?.quoteText);
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, checkShouldRenderSenderTitle() && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "embedded-sender"
    }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(isReplyToQuote ? lang('ReplyToQuote', senderTitle) : senderTitle)), icon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
      name: icon,
      className: "embedded-chat-icon"
    }), icon && senderChatTitle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "embedded-sender-chat"
    }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(senderChatTitle)));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('EmbeddedMessage', className, (0,_helpers_peerColor__WEBPACK_IMPORTED_MODULE_7__.getPeerColorClass)(sender, noUserColors, true), isQuote && 'is-quote', mediaThumbnail && 'with-thumb'),
    dir: lang.isRtl ? 'rtl' : undefined,
    onClick: handleClick,
    onMouseDown: handleMouseDown
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "hover-effect"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_RippleEffect__WEBPACK_IMPORTED_MODULE_17__["default"], null), mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isVideoThumbnail, isRoundVideo, isProtected, isSpoiler), sender?.color?.backgroundEmojiId && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_EmojiIconBackground__WEBPACK_IMPORTED_MODULE_21__["default"], {
    emojiDocumentId: sender.color.backgroundEmojiId,
    className: "EmbeddedMessage--background-icons"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-text"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('embedded-text-wrapper', isQuote && 'multiline')
  }, renderTextContent()), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-title"
  }, renderSender(), forwardSenderTitle && !areSendersSame && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
    name: forwardSender ? 'share-filled' : 'forward',
    className: "embedded-origin-icon"
  }), (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(forwardSenderTitle)))));
};
function renderPictogram(thumbDataUri, blobUrl, isFullVideo, isRoundVideo, isProtected, isSpoiler) {
  const {
    width,
    height
  } = (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__.getPictogramDimensions)();
  const srcUrl = blobUrl || thumbDataUri;
  const shouldRenderVideo = isFullVideo && blobUrl;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('embedded-thumb', isRoundVideo && 'round')
  }, !isSpoiler && !shouldRenderVideo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: srcUrl,
    width: width,
    height: height,
    alt: "",
    className: "pictogram",
    draggable: false
  }), !isSpoiler && shouldRenderVideo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("video", {
    src: blobUrl,
    width: width,
    height: height,
    playsInline: true,
    disablePictureInPicture: true,
    className: "pictogram"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MediaSpoiler__WEBPACK_IMPORTED_MODULE_19__["default"], {
    thumbDataUri: shouldRenderVideo ? thumbDataUri : srcUrl,
    isVisible: Boolean(isSpoiler),
    width: width,
    height: height
  }), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  }));
}
const ClosableEmbeddedMessage = (0,_util_hoc_freezeWhenClosed__WEBPACK_IMPORTED_MODULE_5__["default"])(EmbeddedMessage);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmbeddedMessage);

/***/ }),

/***/ "./src/components/common/embedded/EmojiIconBackground.tsx":
/*!****************************************************************!*\
  !*** ./src/components/common/embedded/EmojiIconBackground.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/files */ "./src/util/files.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/stickers/useDynamicColorListener */ "./src/hooks/stickers/useDynamicColorListener.ts");
/* harmony import */ var _hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useHeavyAnimation */ "./src/hooks/useHeavyAnimation.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/window/useDevicePixelRatio */ "./src/hooks/window/useDevicePixelRatio.ts");
/* harmony import */ var _hooks_useCustomEmoji__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../hooks/useCustomEmoji */ "./src/components/common/hooks/useCustomEmoji.ts");
/* harmony import */ var _EmojiIconBackground_module_scss__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./EmojiIconBackground.module.scss */ "./src/components/common/embedded/EmojiIconBackground.module.scss");















const ICON_POSITIONS = [{
  inline: 22,
  block: 38,
  opacity: 0.35,
  scale: 0.75
}, {
  inline: 32,
  block: 12,
  opacity: 0.3,
  scale: 1
}, {
  inline: 60,
  block: 22,
  opacity: 0.25,
  scale: 0.75
}, {
  inline: 75,
  block: 44,
  opacity: 0.25,
  scale: 1
}, {
  inline: 75,
  block: 2,
  opacity: 0.2,
  scale: 0.625
}, {
  inline: 95,
  block: 18,
  opacity: 0.2,
  scale: 1
}, {
  inline: 115,
  block: 38,
  opacity: 0.2,
  scale: 0.625
}, {
  inline: 125,
  block: 12,
  opacity: 0.1,
  scale: 0.75
}];
const EMOJI_SIZE = _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.REM;
const LOTTIE_TINT_OPACITY = 'ff';
const NON_LOTTIE_TINT_OPACITY = 'bb';
const EmojiIconBackground = ({
  emojiDocumentId,
  className
}) => {
  // eslint-disable-next-line no-null/no-null
  const canvasRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [emojiImage, setEmojiImage] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const dpr = (0,_hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_12__["default"])();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const {
    customEmoji
  } = (0,_hooks_useCustomEmoji__WEBPACK_IMPORTED_MODULE_13__["default"])(emojiDocumentId);
  const previewMediaHash = customEmoji ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getStickerMediaHash)(customEmoji, 'preview') : undefined;
  const previewUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_9__["default"])(previewMediaHash);
  const customColor = (0,_hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_6__["default"])(containerRef);
  const preloadAfterHeavyAnimation = (0,_hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_7__.useThrottleForHeavyAnimation)(() => {
    if (!previewUrl) return;
    (0,_util_files__WEBPACK_IMPORTED_MODULE_4__.preloadImage)(previewUrl).then(setEmojiImage);
  }, [previewUrl]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    preloadAfterHeavyAnimation();
  }, [preloadAfterHeavyAnimation]);
  const updateCanvas = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    const canvas = canvasRef.current;
    if (!canvas || !emojiImage || !customColor) return;
    const context = canvas.getContext('2d');
    const {
      width,
      height
    } = canvas;
    context.clearRect(0, 0, width, height);
    ICON_POSITIONS.forEach(({
      inline,
      block,
      opacity,
      scale
    }) => {
      const x = (lang.isRtl ? inline : width / dpr - inline) * dpr;
      const y = block * dpr;
      const emojiSize = EMOJI_SIZE * dpr;
      context.save();
      context.globalAlpha = opacity;
      context.translate(x, y);
      context.scale(scale, scale);
      context.drawImage(emojiImage, -emojiSize / 2, -emojiSize / 2, emojiSize, emojiSize);
      context.restore();
    });
    const tintColor = `${customColor}${customEmoji.isLottie ? LOTTIE_TINT_OPACITY : NON_LOTTIE_TINT_OPACITY}`;
    context.save();
    context.fillStyle = tintColor;
    context.globalCompositeOperation = 'source-atop';
    context.fillRect(0, 0, width, height);
    context.restore();
  });
  const updateCanvasAfterHeavyAnimation = (0,_hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_7__.useThrottleForHeavyAnimation)(updateCanvas, [updateCanvas]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    updateCanvasAfterHeavyAnimation();
  }, [emojiImage, lang.isRtl, customColor, updateCanvasAfterHeavyAnimation]);
  const updateCanvasSize = (0,_hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_7__.useThrottleForHeavyAnimation)((parentWidth, parentHeight) => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      const canvas = canvasRef.current;
      if (!canvas) return;
      canvas.width = parentWidth * dpr;
      canvas.height = parentHeight * dpr;
      canvas.style.width = `${parentWidth}px`;
      canvas.style.height = `${parentHeight}px`;
      updateCanvas();
    });
  }, [dpr]);
  const handleResize = (0,_hooks_useHeavyAnimation__WEBPACK_IMPORTED_MODULE_7__.useThrottleForHeavyAnimation)(entry => {
    const {
      width,
      height
    } = entry.contentRect;
    updateCanvasSize(width, height);
  }, [updateCanvasSize]);
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_11__["default"])(containerRef, handleResize);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const container = containerRef.current;
    if (!container) return;
    const {
      width,
      height
    } = container.getBoundingClientRect();
    updateCanvasSize(width, height);
  }, [updateCanvasSize]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_EmojiIconBackground_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].root, className),
    ref: containerRef
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: canvasRef
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(EmojiIconBackground));

/***/ }),

/***/ "./src/components/common/helpers/boostInfo.ts":
/*!****************************************************!*\
  !*** ./src/components/common/helpers/boostInfo.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBoostProgressInfo: () => (/* binding */ getBoostProgressInfo)
/* harmony export */ });
function getBoostProgressInfo(boostInfo, freezeOnLevelUp) {
  const {
    level,
    boosts,
    currentLevelBoosts,
    nextLevelBoosts,
    hasMyBoost,
    prepaidGiveaways
  } = boostInfo;
  const isJustUpgraded = freezeOnLevelUp && boosts === currentLevelBoosts && hasMyBoost;
  const currentLevel = isJustUpgraded ? level - 1 : level;
  const hasNextLevel = Boolean(nextLevelBoosts);
  const levelProgress = !nextLevelBoosts || isJustUpgraded ? 1 : (boosts - currentLevelBoosts) / (nextLevelBoosts - currentLevelBoosts);
  const remainingBoosts = nextLevelBoosts ? nextLevelBoosts - boosts : 0;
  const isMaxLevel = nextLevelBoosts === undefined;
  return {
    currentLevel,
    hasNextLevel,
    boosts,
    levelProgress,
    remainingBoosts,
    isMaxLevel,
    prepaidGiveaways
  };
}

/***/ }),

/***/ "./src/components/common/helpers/formatUsername.ts":
/*!*********************************************************!*\
  !*** ./src/components/common/helpers/formatUsername.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ formatUsername)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");

function formatUsername(username, asAbsoluteLink) {
  return asAbsoluteLink ? `${_config__WEBPACK_IMPORTED_MODULE_0__.TME_LINK_PREFIX}${username}` : `@${username}`;
}

/***/ }),

/***/ "./src/components/common/helpers/renderMessageText.ts":
/*!************************************************************!*\
  !*** ./src/components/common/helpers/renderMessageText.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderMessageSummary: () => (/* binding */ renderMessageSummary),
/* harmony export */   renderMessageText: () => (/* binding */ renderMessageText)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers/messageSummary */ "./src/global/helpers/messageSummary.ts");
/* harmony import */ var _util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _util_trimText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/trimText */ "./src/util/trimText.ts");
/* harmony import */ var _renderText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _renderTextWithEntities__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");








function renderMessageText({
  message,
  highlight,
  emojiSize,
  isSimple,
  truncateLength,
  isProtected,
  forcePlayback,
  shouldRenderAsHtml,
  isForMediaViewer
}) {
  const {
    text,
    entities
  } = message.content.text || {};
  if (!text) {
    const contentNotSupportedText = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageText)(message);
    return contentNotSupportedText ? [(0,_util_trimText__WEBPACK_IMPORTED_MODULE_5__["default"])(contentNotSupportedText, truncateLength)] : undefined;
  }
  const messageKey = (0,_util_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageKey)(message);
  return (0,_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_7__.renderTextWithEntities)({
    text: (0,_util_trimText__WEBPACK_IMPORTED_MODULE_5__["default"])(text, truncateLength),
    entities,
    highlight,
    emojiSize,
    shouldRenderAsHtml,
    containerId: `${isForMediaViewer ? 'mv-' : ''}${messageKey}`,
    isSimple,
    isProtected,
    forcePlayback
  });
}

// TODO Use Message Summary component instead
function renderMessageSummary(lang, message, noEmoji = false, highlight, truncateLength = _global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__.TRUNCATED_SUMMARY_LENGTH) {
  const {
    entities
  } = message.content.text || {};
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  const statefulContent = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageStatefulContent)(global, message);
  const hasSpoilers = entities?.some(e => e.type === _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.Spoiler);
  const hasCustomEmoji = entities?.some(e => e.type === _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMessageEntityTypes.CustomEmoji);
  if (!hasSpoilers && !hasCustomEmoji) {
    const text = (0,_util_trimText__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__.getMessageSummaryText)(lang, message, statefulContent, noEmoji), truncateLength);
    if (highlight) {
      return (0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(text, ['emoji', 'highlight'], {
        highlight
      });
    } else {
      return (0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(text);
    }
  }
  const emoji = !noEmoji && (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__.getMessageSummaryEmoji)(message);
  const emojiWithSpace = emoji ? `${emoji} ` : '';
  const text = renderMessageText({
    message,
    highlight,
    isSimple: true,
    truncateLength
  });
  const description = (0,_global_helpers_messageSummary__WEBPACK_IMPORTED_MODULE_3__.getMessageSummaryDescription)(lang, message, statefulContent, text);
  return [...(0,_renderText__WEBPACK_IMPORTED_MODULE_6__["default"])(emojiWithSpace), ...(Array.isArray(description) ? description : [description])].filter(Boolean);
}

/***/ }),

/***/ "./src/components/common/helpers/waveform.ts":
/*!***************************************************!*\
  !*** ./src/components/common/helpers/waveform.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MAX_EMPTY_WAVEFORM_POINTS: () => (/* binding */ MAX_EMPTY_WAVEFORM_POINTS),
/* harmony export */   renderWaveform: () => (/* binding */ renderWaveform)
/* harmony export */ });
const MAX_EMPTY_WAVEFORM_POINTS = 30;
const SPIKE_WIDTH = 2;
const SPIKE_STEP = 4;
const SPIKE_RADIUS = 1;
const HEIGHT = 23;
function renderWaveform(canvas, spikes, progress, {
  peak,
  fillStyle,
  progressFillStyle
}) {
  const width = spikes.length * SPIKE_STEP;
  const height = HEIGHT;
  canvas.width = width * 2;
  canvas.height = height * 2;
  canvas.style.width = `${width}px`;
  canvas.style.height = `${height}px`;
  const ctx = canvas.getContext('2d');
  ctx.scale(2, 2);
  spikes.forEach((item, i) => {
    ctx.globalAlpha = i / spikes.length >= progress ? 0.5 : 1;
    ctx.fillStyle = progress > i / spikes.length ? progressFillStyle : fillStyle;
    const spikeHeight = Math.max(2, HEIGHT * (item / Math.max(1, peak)));
    roundedRectangle(ctx, i * SPIKE_STEP, (height + spikeHeight) / 2, SPIKE_WIDTH, spikeHeight, SPIKE_RADIUS);
    ctx.fill();
  });
}
function roundedRectangle(ctx, x, y, width, height, radius) {
  if (width < 2 * radius) {
    radius = width / 2;
  }
  if (height < 2 * radius) {
    radius = height / 2;
  }
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.arcTo(x + width, y, x + width, y - height, radius);
  ctx.arcTo(x + width, y - height, x, y - height, radius);
  ctx.arcTo(x, y - height, x, y, radius);
  ctx.arcTo(x, y, x + width, y, radius);
  ctx.closePath();
}

/***/ }),

/***/ "./src/components/common/hooks/usePhotosPreload.ts":
/*!*********************************************************!*\
  !*** ./src/components/common/hooks/usePhotosPreload.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ usePhotosPreload)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/mediaLoader */ "./src/util/mediaLoader.ts");




const PHOTOS_TO_PRELOAD = 4;
function usePhotosPreload(photos, currentIndex) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach(photo => {
      const mediaHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getProfilePhotoMediaHash)(photo);
      const mediaData = _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.getFromMemory(mediaHash);
      if (!mediaData) {
        _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.fetch(mediaHash, _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMediaFormat.BlobUrl);
      }
    });
  }, [currentIndex, photos]);
}

/***/ }),

/***/ "./src/components/common/profile/BusinessHours.tsx":
/*!*********************************************************!*\
  !*** ./src/components/common/profile/BusinessHours.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_dates_workHours__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/dates/workHours */ "./src/util/dates/workHours.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_data_useSelectorSignal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/data/useSelectorSignal */ "./src/hooks/data/useSelectorSignal.ts");
/* harmony import */ var _hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/schedulers/useInterval */ "./src/hooks/schedulers/useInterval.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _ui_Transition__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../ui/Transition */ "./src/components/ui/Transition.tsx");
/* harmony import */ var _icons_Icon__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./BusinessHours.module.scss */ "./src/components/common/profile/BusinessHours.module.scss");

















const DAYS = Array.from({
  length: 7
}, (_, i) => i);
const BusinessHours = ({
  businessHours
}) => {
  // eslint-disable-next-line no-null/no-null
  const transitionRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [isExpanded, expand, collapse] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])(false);
  const [isMyTime, showInMyTime, showInLocalTime] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])(false);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_12__["default"])();
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_10__["default"])();
  (0,_hooks_schedulers_useInterval__WEBPACK_IMPORTED_MODULE_7__["default"])(forceUpdate, 60 * 1000);
  const timezoneSignal = (0,_hooks_data_useSelectorSignal__WEBPACK_IMPORTED_MODULE_6__["default"])(global => global.timezones?.byId);
  const timezones = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_8__["default"])(timezoneSignal, [timezoneSignal]);
  const timezoneMinuteDifference = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!timezones) return 0;
    const timezone = timezones[businessHours.timezoneId];
    const myOffset = (0,_util_dates_workHours__WEBPACK_IMPORTED_MODULE_4__.getUtcOffset)();
    return (myOffset - timezone.utcOffset) / 60;
  }, [businessHours.timezoneId, timezones]);
  const workHours = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const weekStart = (0,_util_dates_workHours__WEBPACK_IMPORTED_MODULE_4__.getWeekStart)();
    const shiftedHours = (0,_util_dates_workHours__WEBPACK_IMPORTED_MODULE_4__.shiftTimeRanges)(businessHours.workHours, isMyTime ? timezoneMinuteDifference : 0);
    const days = (0,_util_dates_workHours__WEBPACK_IMPORTED_MODULE_4__.splitDays)(shiftedHours);
    const result = {};
    DAYS.forEach(day => {
      const segments = days[day];
      if (!segments) {
        result[day] = [lang('BusinessHoursDayClosed')];
        return;
      }
      result[day] = segments.map(({
        startMinute,
        endMinute
      }) => {
        if (endMinute - startMinute === 24 * 60) return lang('BusinessHoursDayFullOpened');
        const start = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatTime)(lang, weekStart + startMinute * 60 * 1000);
        const end = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatTime)(lang, weekStart + endMinute * 60 * 1000);
        return `${start} – ${end}`;
      });
    });
    return result;
  }, [businessHours.workHours, isMyTime, lang, timezoneMinuteDifference]);
  const isBusinessOpen = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const localTimeHours = (0,_util_dates_workHours__WEBPACK_IMPORTED_MODULE_4__.shiftTimeRanges)(businessHours.workHours, timezoneMinuteDifference);
    const weekStart = (0,_util_dates_workHours__WEBPACK_IMPORTED_MODULE_4__.getWeekStart)();
    const now = new Date().getTime();
    const minutesSinceWeekStart = (now - weekStart) / 1000 / 60;
    return localTimeHours.some(({
      startMinute,
      endMinute
    }) => startMinute <= minutesSinceWeekStart && minutesSinceWeekStart <= endMinute);
  }, [businessHours.workHours, timezoneMinuteDifference]);
  const currentDay = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const now = new Date(Date.now() - (isMyTime ? 0 : timezoneMinuteDifference * 60 * 1000));
    return (now.getDay() + 6) % 7;
  }, [isMyTime, timezoneMinuteDifference]);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    if (isExpanded) {
      collapse();
    } else {
      expand();
    }
  });
  const handleTriggerOffset = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(e => {
    e.stopPropagation();
    if (isMyTime) {
      showInLocalTime();
    } else {
      showInMyTime();
    }
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isExpanded) return;
    const slide = document.querySelector(`.${_ui_Transition__WEBPACK_IMPORTED_MODULE_14__.ACTIVE_SLIDE_CLASS_NAME} > .${_BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].timetable}`);
    if (!slide) return;
    const height = slide.offsetHeight;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      transitionRef.current.style.height = `${height}px`;
    });
  }, [isExpanded]);
  const handleAnimationStart = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    const slide = document.querySelector(`.${_ui_Transition__WEBPACK_IMPORTED_MODULE_14__.TO_SLIDE_CLASS_NAME} > .${_BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].timetable}`);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMeasure)(() => {
      const height = slide.offsetHeight;
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
        transitionRef.current.style.height = `${height}px`;
      });
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "clock",
    iconClassName: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].icon,
    multiline: true,
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].root,
    isStatic: isExpanded,
    ripple: true,
    narrow: true,
    withColorTransition: true,
    onClick: handleClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].top
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].left
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, lang('BusinessHoursProfile')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].status, isBusinessOpen && _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].statusOpen)
  }, isBusinessOpen ? lang('BusinessHoursProfileNowOpen') : lang('BusinessHoursProfileNowClosed'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_icons_Icon__WEBPACK_IMPORTED_MODULE_15__["default"], {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].arrow,
    name: isExpanded ? 'up' : 'down'
  })), isExpanded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].bottom
  }, Boolean(timezoneMinuteDifference) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].offsetTrigger,
    role: "button",
    tabIndex: 0,
    onMouseDown: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV ? handleTriggerOffset : undefined,
    onClick: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_TOUCH_ENV ? handleTriggerOffset : undefined
  }, lang(isMyTime ? 'BusinessHoursProfileSwitchMy' : 'BusinessHoursProfileSwitchLocal')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Transition__WEBPACK_IMPORTED_MODULE_14__["default"], {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].transition,
    ref: transitionRef,
    name: "fade",
    activeKey: Number(isMyTime),
    onStart: handleAnimationStart
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("dl", {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].timetable
  }, DAYS.map(day => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("dt", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].weekday, day === currentDay && _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].currentDay)
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_3__.formatWeekday)(lang, day === 6 ? 0 : day + 1)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("dd", {
    className: _BusinessHours_module_scss__WEBPACK_IMPORTED_MODULE_16__["default"].schedule
  }, workHours[day].map(segment => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, segment)))))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(BusinessHours));

/***/ }),

/***/ "./src/components/common/profile/ChatExtra.tsx":
/*!*****************************************************!*\
  !*** ./src/components/common/profile/ChatExtra.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_clipboard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/clipboard */ "./src/util/clipboard.ts");
/* harmony import */ var _util_phoneNumber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/phoneNumber */ "./src/util/phoneNumber.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _util_themeStyle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/themeStyle */ "./src/util/themeStyle.ts");
/* harmony import */ var _left_main_hooks__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../left/main/hooks */ "./src/components/left/main/hooks/index.ts");
/* harmony import */ var _helpers_formatUsername__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../helpers/formatUsername */ "./src/components/common/helpers/formatUsername.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../hooks/window/useDevicePixelRatio */ "./src/hooks/window/useDevicePixelRatio.ts");
/* harmony import */ var _left_main_Chat__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../left/main/Chat */ "./src/components/left/main/Chat.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../ui/placeholder/Skeleton */ "./src/components/ui/placeholder/Skeleton.tsx");
/* harmony import */ var _ui_Switcher__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../ui/Switcher */ "./src/components/ui/Switcher.tsx");
/* harmony import */ var _CustomEmoji__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _SafeLink__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../SafeLink */ "./src/components/common/SafeLink.tsx");
/* harmony import */ var _BusinessHours__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./BusinessHours */ "./src/components/common/profile/BusinessHours.tsx");
/* harmony import */ var _UserBirthday__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./UserBirthday */ "./src/components/common/profile/UserBirthday.tsx");
/* harmony import */ var _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./ChatExtra.module.scss */ "./src/components/common/profile/ChatExtra.module.scss");





























const DEFAULT_MAP_CONFIG = {
  width: 64,
  height: 64,
  zoom: 15
};
const BOT_VERIFICATION_ICON_SIZE = 16;
const ChatExtra = ({
  chatOrUserId,
  user,
  chat,
  userFullInfo,
  isInSettings,
  canInviteUsers,
  isMuted,
  phoneCodeList,
  topicId,
  description,
  chatInviteLink,
  topicLink,
  hasSavedMessages,
  personalChannel,
  hasMainMiniApp,
  isBotCanManageEmojiStatus,
  botAppPermissions,
  botVerification
}) => {
  const {
    showNotification,
    updateChatMutedState,
    updateTopicMutedState,
    loadPeerStories,
    openSavedDialog,
    openMapModal,
    requestCollectibleInfo,
    requestMainWebView,
    toggleUserEmojiStatusPermission,
    toggleUserLocationPermission
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    id: userId,
    usernames,
    phoneNumber,
    isSelf
  } = user || {};
  const {
    id: chatId,
    usernames: chatUsernames
  } = chat || {};
  const peerId = userId || chatId;
  const {
    businessLocation,
    businessWorkHours,
    personalChannelMessageId,
    birthday
  } = userFullInfo || {};
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_14__["default"])();
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_13__["default"])(([prevPeerId]) => {
    if (!peerId || prevPeerId === peerId) return;
    if (user || chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isChatChannel)(chat)) {
      loadPeerStories({
        peerId
      });
    }
  }, [peerId, chat, user]);
  const {
    width,
    height,
    zoom
  } = DEFAULT_MAP_CONFIG;
  const dpr = (0,_hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_18__["default"])();
  const locationMediaHash = businessLocation?.geo && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.buildStaticMapHash)(businessLocation.geo, width, height, zoom, dpr);
  const locationBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_16__["default"])(locationMediaHash);
  const locationRightComponent = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!businessLocation?.geo) return undefined;
    if (locationBlobUrl) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
        src: locationBlobUrl,
        alt: "",
        className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].businessLocation
      });
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_placeholder_Skeleton__WEBPACK_IMPORTED_MODULE_22__["default"], {
      className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].businessLocation
    });
  }, [businessLocation, locationBlobUrl]);
  const isTopicInfo = Boolean(topicId && topicId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID);
  const shouldRenderAllLinks = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isChatChannel)(chat) || user?.isPremium;
  const activeUsernames = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const result = usernames?.filter(u => u.isActive);
    return result?.length ? result : undefined;
  }, [usernames]);
  const activeChatUsernames = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const result = !user ? chatUsernames?.filter(u => u.isActive) : undefined;
    return result?.length ? result : undefined;
  }, [chatUsernames, user]);
  const link = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!chat) {
      return undefined;
    }
    return isTopicInfo ? topicLink : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getChatLink)(chat) || chatInviteLink;
  }, [chat, isTopicInfo, topicLink, chatInviteLink]);
  const handleClickLocation = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    const {
      address,
      geo
    } = businessLocation;
    if (!geo) {
      (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_6__.copyTextToClipboard)(address);
      showNotification({
        message: oldLang('BusinessLocationCopied')
      });
      return;
    }
    openMapModal({
      geoPoint: geo,
      zoom
    });
  });
  const handleNotificationChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (isTopicInfo) {
      updateTopicMutedState({
        chatId: chatId,
        topicId: topicId,
        isMuted: !isMuted
      });
    } else {
      updateChatMutedState({
        chatId: chatId,
        isMuted: !isMuted
      });
    }
  });
  const manageEmojiStatusChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (!user) return;
    toggleUserEmojiStatusPermission({
      botId: user.id,
      isEnabled: !isBotCanManageEmojiStatus
    });
  });
  const handleLocationPermissionChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (!user) return;
    toggleUserLocationPermission({
      botId: user.id,
      isAccessGranted: !botAppPermissions?.geolocation
    });
  });
  const handleOpenSavedDialog = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    openSavedDialog({
      chatId: chatOrUserId
    });
  });
  function copy(text, entity) {
    (0,_util_clipboard__WEBPACK_IMPORTED_MODULE_6__.copyTextToClipboard)(text);
    showNotification({
      message: `${entity} was copied`
    });
  }
  const formattedNumber = phoneNumber && (0,_util_phoneNumber__WEBPACK_IMPORTED_MODULE_7__.formatPhoneNumberWithCode)(phoneCodeList, phoneNumber);
  const handlePhoneClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (phoneNumber?.length === _config__WEBPACK_IMPORTED_MODULE_3__.FRAGMENT_PHONE_LENGTH && phoneNumber.startsWith(_config__WEBPACK_IMPORTED_MODULE_3__.FRAGMENT_PHONE_CODE)) {
      requestCollectibleInfo({
        collectible: phoneNumber,
        peerId: peerId,
        type: 'phone'
      });
      return;
    }
    copy(formattedNumber, oldLang('Phone'));
  });
  const handleUsernameClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])((username, isChat) => {
    if (!username.isEditable) {
      requestCollectibleInfo({
        collectible: username.username,
        peerId: peerId,
        type: 'username'
      });
      return;
    }
    copy((0,_helpers_formatUsername__WEBPACK_IMPORTED_MODULE_11__["default"])(username.username, isChat), oldLang(isChat ? 'Link' : 'Username'));
  });
  const handleOpenApp = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (!chat) {
      return;
    }
    const botId = user?.id;
    if (!botId) {
      return;
    }
    const theme = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_9__.extractCurrentThemeParams)();
    requestMainWebView({
      botId,
      peerId: botId,
      theme,
      shouldMarkBotTrusted: true
    });
  });
  const appTermsInfo = lang('ProfileOpenAppAbout', {
    terms: /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_SafeLink__WEBPACK_IMPORTED_MODULE_25__["default"], {
      text: lang('ProfileOpenAppTerms'),
      url: lang('ProfileBotOpenAppInfoLink')
    })
  }, {
    withNodes: true
  });
  if (!chat || chat.isRestricted || isSelf && !isInSettings) {
    return undefined;
  }
  function renderUsernames(usernameList, isChat) {
    const [mainUsername, ...otherUsernames] = usernameList;
    const usernameLinks = otherUsernames.length ? oldLang('UsernameAlso', '%USERNAMES%').split('%').map(s => {
      return s === 'USERNAMES' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, otherUsernames.map((username, idx) => {
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, idx > 0 ? ', ' : '', /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("a", {
          key: username.username,
          href: (0,_helpers_formatUsername__WEBPACK_IMPORTED_MODULE_11__["default"])(username.username, true),
          onMouseDown: _util_stopEvent__WEBPACK_IMPORTED_MODULE_8__["default"],
          onClick: e => {
            (0,_util_stopEvent__WEBPACK_IMPORTED_MODULE_8__["default"])(e);
            handleUsernameClick(username, isChat);
          },
          className: "text-entity-link username-link"
        }, (0,_helpers_formatUsername__WEBPACK_IMPORTED_MODULE_11__["default"])(username.username)));
      })) : s;
    }) : undefined;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
      icon: isChat ? 'link' : 'mention',
      multiline: true,
      narrow: true,
      ripple: true
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => {
        handleUsernameClick(mainUsername, isChat);
      }
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "title",
      dir: lang.isRtl ? 'rtl' : undefined
    }, (0,_helpers_formatUsername__WEBPACK_IMPORTED_MODULE_11__["default"])(mainUsername.username, isChat)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "subtitle"
    }, usernameLinks && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "other-usernames"
    }, usernameLinks), oldLang(isChat ? 'Link' : 'Username')));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "ChatExtra"
  }, personalChannel && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].personalChannel
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].personalChannelTitle
  }, oldLang('ProfileChannel')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].personalChannelSubscribers
  }, oldLang('Subscribers', personalChannel.membersCount, 'i')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_left_main_Chat__WEBPACK_IMPORTED_MODULE_19__["default"], {
    chatId: personalChannel.id,
    orderDiff: 0,
    animationType: _left_main_hooks__WEBPACK_IMPORTED_MODULE_10__.ChatAnimationTypes.None,
    isPreview: true,
    previewMessageId: personalChannelMessageId,
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].personalChannelItem
  })), Boolean(formattedNumber?.length) &&
  /*#__PURE__*/
  // eslint-disable-next-line react/jsx-no-bind
  _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "phone",
    multiline: true,
    narrow: true,
    ripple: true,
    onClick: handlePhoneClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "title",
    dir: lang.isRtl ? 'rtl' : undefined
  }, formattedNumber), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "subtitle"
  }, oldLang('Phone'))), activeUsernames && renderUsernames(activeUsernames), description && Boolean(description.length) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "info",
    multiline: true,
    narrow: true,
    isStatic: true,
    allowSelection: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "title word-break allow-selection",
    dir: lang.isRtl ? 'rtl' : undefined
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__["default"])(description, ['br', shouldRenderAllLinks ? 'links' : 'tg_links', 'emoji'])), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "subtitle"
  }, oldLang(userId ? 'UserBio' : 'Info'))), activeChatUsernames && !isTopicInfo && renderUsernames(activeChatUsernames, true), (!activeChatUsernames && canInviteUsers || isTopicInfo) && link && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "link",
    multiline: true,
    narrow: true,
    ripple: true
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => copy(link, oldLang('SetUrlPlaceholder'))
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "title"
  }, link), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "subtitle"
  }, oldLang('SetUrlPlaceholder'))), birthday && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_UserBirthday__WEBPACK_IMPORTED_MODULE_27__["default"], {
    key: peerId,
    birthday: birthday,
    user: user,
    isInSettings: isInSettings
  }), hasMainMiniApp && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    multiline: true,
    isStatic: true,
    narrow: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_20__["default"], {
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].openAppButton,
    size: "smaller",
    onClick: handleOpenApp
  }, oldLang('ProfileBotOpenApp')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].sectionInfo
  }, appTermsInfo)), !isInSettings && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "unmute",
    narrow: true,
    ripple: true,
    onClick: handleNotificationChange
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, oldLang('Notifications')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Switcher__WEBPACK_IMPORTED_MODULE_23__["default"], {
    id: "group-notifications",
    label: userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications',
    checked: isMuted,
    inactive: true
  })), businessWorkHours && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_BusinessHours__WEBPACK_IMPORTED_MODULE_26__["default"], {
    businessHours: businessWorkHours
  }), businessLocation && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "location",
    ripple: true,
    multiline: true,
    narrow: true,
    rightElement: locationRightComponent,
    onClick: handleClickLocation
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "title"
  }, businessLocation.address), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "subtitle"
  }, oldLang('BusinessProfileLocation'))), hasSavedMessages && !isInSettings && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "saved-messages",
    narrow: true,
    ripple: true,
    onClick: handleOpenSavedDialog
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, oldLang('SavedMessagesTab'))), userFullInfo && 'isBotAccessEmojiGranted' in userFullInfo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "user",
    narrow: true,
    ripple: true,
    onClick: manageEmojiStatusChange
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, oldLang('BotProfilePermissionEmojiStatus')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Switcher__WEBPACK_IMPORTED_MODULE_23__["default"], {
    label: oldLang('BotProfilePermissionEmojiStatus'),
    checked: isBotCanManageEmojiStatus,
    inactive: true
  })), botAppPermissions?.geolocation !== undefined && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_21__["default"], {
    icon: "location",
    narrow: true,
    ripple: true,
    onClick: handleLocationPermissionChange
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, oldLang('BotProfilePermissionLocation')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Switcher__WEBPACK_IMPORTED_MODULE_23__["default"], {
    label: oldLang('BotProfilePermissionLocation'),
    checked: botAppPermissions?.geolocation,
    inactive: true
  })), botVerification && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].botVerificationSection
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_CustomEmoji__WEBPACK_IMPORTED_MODULE_24__["default"], {
    className: _ChatExtra_module_scss__WEBPACK_IMPORTED_MODULE_28__["default"].botVerificationIcon,
    documentId: botVerification.iconId,
    size: BOT_VERIFICATION_ICON_SIZE
  }), botVerification.description));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatOrUserId,
  isSavedDialog
}) => {
  const {
    countryList: {
      phoneCodes: phoneCodeList
    }
  } = global;
  const chat = chatOrUserId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChat)(global, chatOrUserId) : undefined;
  const user = chatOrUserId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectUser)(global, chatOrUserId) : undefined;
  const botAppPermissions = chatOrUserId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectBotAppPermissions)(global, chatOrUserId) : undefined;
  const isForum = chat?.isForum;
  const isMuted = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.selectIsChatMuted)(chat, (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectNotifySettings)(global), (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectNotifyExceptions)(global));
  const {
    threadId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectCurrentMessageList)(global) || {};
  const topicId = isForum && threadId ? Number(threadId) : undefined;
  const chatFullInfo = chat && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChatFullInfo)(global, chat.id);
  const userFullInfo = user && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectUserFullInfo)(global, user.id);
  const botVerification = userFullInfo?.botVerification || chatFullInfo?.botVerification;
  const chatInviteLink = chatFullInfo?.inviteLink;
  const description = userFullInfo?.bio || chatFullInfo?.about;
  const canInviteUsers = chat && !user && (!(0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isChatChannel)(chat) && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isUserRightBanned)(chat, 'inviteUsers') || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getHasAdminRight)(chat, 'inviteUsers'));
  const topicLink = topicId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectTopicLink)(global, chatOrUserId, topicId) : undefined;
  const hasSavedMessages = !isSavedDialog && global.chats.listIds.saved?.includes(chatOrUserId);
  const personalChannel = userFullInfo?.personalChannelId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectChat)(global, userFullInfo.personalChannelId) : undefined;
  const hasMainMiniApp = user?.hasMainMiniApp;
  return {
    phoneCodeList,
    chat,
    user,
    userFullInfo,
    canInviteUsers,
    botAppPermissions,
    isMuted,
    topicId,
    chatInviteLink,
    description,
    topicLink,
    hasSavedMessages,
    personalChannel,
    hasMainMiniApp,
    isBotCanManageEmojiStatus: userFullInfo?.isBotCanManageEmojiStatus,
    botVerification
  };
})(ChatExtra)));

/***/ }),

/***/ "./src/components/common/profile/UserBirthday.tsx":
/*!********************************************************!*\
  !*** ./src/components/common/profile/UserBirthday.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_renderText__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _StickerView__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../StickerView */ "./src/components/common/StickerView.tsx");
/* harmony import */ var _UserBirthday_module_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./UserBirthday.module.scss */ "./src/components/common/profile/UserBirthday.module.scss");



















const NUMBER_EMOJI_SUFFIX = '\uFE0F\u20E3';
const NUMBER_STICKER_SIZE = 128;
const EFFECT_EMOJIS = ['🎉', '🎆', '🎈'];
const EFFECT_SIZE = 288;
const ANIMATION_DURATION = 3000;
const UserBirthday = ({
  user,
  birthday,
  isPremiumPurchaseBlocked,
  birthdayNumbers,
  animatedEmojiEffects,
  isInSettings
}) => {
  const {
    openGiftModal,
    requestConfetti
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const animationPlayedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const [isPlayingAnimation, playAnimation, stopAnimation] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_15__["default"])();
  const {
    formattedDate,
    isToday,
    age
  } = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const today = new Date();
    const date = new Date();
    if (birthday.year) {
      date.setFullYear(birthday.year);
    }
    date.setMonth(birthday.month - 1);
    date.setDate(birthday.day);
    date.setHours(0, 0, 0, 0);
    const formatted = (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_7__.formatDateToString)(date, lang.code, true, 'long');
    const isBirthdayToday = date.getDate() === today.getDate() && date.getMonth() === today.getMonth();
    return {
      formattedDate: formatted,
      isToday: isBirthdayToday,
      age: birthday.year && getAge(date)
    };
  }, [birthday, lang]);
  const numbersForAge = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!age || !isToday) return undefined;
    const numbers = birthdayNumbers?.stickers?.filter(({
      emoji
    }) => emoji?.endsWith(NUMBER_EMOJI_SUFFIX));
    if (!numbers) return undefined;
    const byEmoji = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_8__.buildCollectionByKey)(numbers, 'emoji');
    const ageDigits = age.toString().split('');
    return ageDigits.map(digit => byEmoji[digit + NUMBER_EMOJI_SUFFIX]);
  }, [age, birthdayNumbers?.stickers, isToday]);
  const effectSticker = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!isToday) return undefined;
    const randomEffect = EFFECT_EMOJIS[Math.floor(Math.random() * EFFECT_EMOJIS.length)];
    return animatedEmojiEffects?.stickers?.find(({
      emoji
    }) => emoji === randomEffect);
  }, [animatedEmojiEffects?.stickers, isToday]);

  // Preload stickers
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isToday || !numbersForAge) return;
    numbersForAge.forEach(sticker => {
      const hash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getStickerMediaHash)(sticker, 'preview');
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_9__.fetch(hash, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl);
    });
    if (effectSticker) {
      const effectHash = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getStickerMediaHash)(effectSticker, 'preview');
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_9__.fetch(effectHash, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl);
    }
  }, [effectSticker, isToday, numbersForAge]);
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_12__["default"])(stopAnimation, isPlayingAnimation ? ANIMATION_DURATION : undefined);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isPlayingAnimation) {
      animationPlayedRef.current = true;
      const column = document.getElementById(isInSettings ? 'LeftColumn' : 'RightColumn');
      if (!column) return;
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMeasure)(() => {
        const {
          top,
          left,
          width,
          height
        } = column.getBoundingClientRect();
        requestConfetti({
          top,
          left,
          width,
          height,
          style: 'top-down'
        });
      });
    }
  }, [isInSettings, isPlayingAnimation]);
  const valueKey = `ProfileBirthday${isToday ? 'Today' : ''}Value${age ? 'Year' : ''}`;
  const canGiftPremium = isToday && !user.isPremium && !user.isSelf && !isPremiumPurchaseBlocked;
  const handleOpenGiftModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_14__["default"])(() => {
    openGiftModal({
      forUserId: user.id
    });
  });
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_14__["default"])(() => {
    if (!isToday) return;
    if (canGiftPremium && animationPlayedRef.current) {
      handleOpenGiftModal();
      return;
    }
    playAnimation();
  });
  const isStatic = !isToday && !canGiftPremium;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UserBirthday_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_16__["default"], {
    icon: "calendar",
    secondaryIcon: canGiftPremium ? 'gift' : undefined,
    secondaryIconClassName: _UserBirthday_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].giftIcon,
    multiline: true,
    narrow: true,
    ref: ref,
    ripple: !isStatic,
    onClick: handleClick,
    isStatic: isStatic,
    onSecondaryIconClick: handleOpenGiftModal
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "title",
    dir: lang.isRtl ? 'rtl' : undefined
  }, (0,_helpers_renderText__WEBPACK_IMPORTED_MODULE_11__["default"])(lang(valueKey, [formattedDate, age], undefined, age))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "subtitle"
  }, lang(isToday ? 'ProfileBirthdayToday' : 'ProfileBirthday'))), isPlayingAnimation && _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_10__.IS_OFFSET_PATH_SUPPORTED && numbersForAge?.map((sticker, index) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_6__["default"])(_UserBirthday_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].number, index > 0 && _UserBirthday_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].shiftOrigin),
    style: `--digit-offset: ${index}`
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StickerView__WEBPACK_IMPORTED_MODULE_17__["default"], {
    containerRef: ref,
    sticker: sticker,
    size: NUMBER_STICKER_SIZE,
    forceAlways: true
  }))), isPlayingAnimation && effectSticker && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UserBirthday_module_scss__WEBPACK_IMPORTED_MODULE_18__["default"].effect
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StickerView__WEBPACK_IMPORTED_MODULE_17__["default"], {
    containerRef: ref,
    sticker: effectSticker,
    size: EFFECT_SIZE,
    shouldLoop: true,
    forceAlways: true
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const {
    birthdayNumbers,
    animatedEmojiEffects
  } = global;
  return {
    birthdayNumbers,
    animatedEmojiEffects,
    isPremiumPurchaseBlocked: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_5__.selectIsPremiumPurchaseBlocked)(global)
  };
})(UserBirthday)));

// https://stackoverflow.com/a/7091965
function getAge(birthdate) {
  const today = new Date();
  let age = today.getFullYear() - birthdate.getFullYear();
  const m = today.getMonth() - birthdate.getMonth();
  if (m < 0 || m === 0 && today.getDate() < birthdate.getDate()) {
    age--;
  }
  return age;
}

/***/ }),

/***/ "./src/components/left/ChatFolderModal.async.tsx":
/*!*******************************************************!*\
  !*** ./src/components/left/ChatFolderModal.async.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ChatFolderModalAsync = props => {
  const {
    isOpen
  } = props;
  const ChatFolderModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ChatFolderModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ChatFolderModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ChatFolderModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatFolderModalAsync);

/***/ }),

/***/ "./src/components/left/MuteChatModal.async.tsx":
/*!*****************************************************!*\
  !*** ./src/components/left/MuteChatModal.async.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const MuteChatModalAsync = props => {
  const {
    isOpen
  } = props;
  const MuteChatModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'MuteChatModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return MuteChatModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MuteChatModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MuteChatModalAsync);

/***/ }),

/***/ "./src/components/left/main/Archive.tsx":
/*!**********************************************!*\
  !*** ./src/components/left/main/Archive.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useFolderManager */ "./src/hooks/useFolderManager.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Badge__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/Badge */ "./src/components/ui/Badge.tsx");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Archive.module.scss */ "./src/components/left/main/Archive.module.scss");















const PREVIEW_SLICE = 5;
const ARCHIVE_CUSTOM_PEER = {
  isCustomPeer: true,
  title: 'Archived Chats',
  avatarIcon: 'archive-filled',
  customPeerAvatarColor: '#9EAAB5'
};
const Archive = ({
  archiveSettings,
  onDragEnter,
  onClick
}) => {
  const {
    updateArchiveSettings
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const orderedChatIds = (0,_hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_8__.useFolderManagerForOrderedIds)(_config__WEBPACK_IMPORTED_MODULE_2__.ARCHIVED_FOLDER_ID);
  const unreadCounters = (0,_hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_8__.useFolderManagerForUnreadCounters)();
  const archiveUnreadCount = unreadCounters[_config__WEBPACK_IMPORTED_MODULE_2__.ARCHIVED_FOLDER_ID]?.chatsCount;
  const previewItems = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!orderedChatIds?.length) return lang('Loading');
    const chatsById = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().chats.byId;
    return orderedChatIds.slice(0, PREVIEW_SLICE).map((chatId, i, arr) => {
      const isLast = i === arr.length - 1;
      const chat = chatsById[chatId];
      if (!chat) {
        return undefined;
      }
      const title = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getChatTitle)(lang, chat);
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].chat, archiveUnreadCount && chat.unreadCount && _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].unread)
      }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_7__["default"])(title)), isLast ? '' : ', ');
    });
  }, [orderedChatIds, lang, archiveUnreadCount]);
  const contextActions = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const actionMinimize = !archiveSettings.isMinimized && {
      title: lang('lng_context_archive_collapse'),
      icon: 'collapse',
      handler: () => {
        updateArchiveSettings({
          isMinimized: true
        });
      }
    };
    const actionExpand = archiveSettings.isMinimized && {
      title: lang('lng_context_archive_expand'),
      icon: 'expand',
      handler: () => {
        updateArchiveSettings({
          isMinimized: false
        });
      }
    };
    const actionHide = {
      title: lang('lng_context_archive_to_menu'),
      icon: 'archive-to-main',
      handler: () => {
        updateArchiveSettings({
          isHidden: true
        });
      }
    };
    return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_5__.compact)([actionMinimize, actionExpand, actionHide]);
  }, [archiveSettings.isMinimized, lang, updateArchiveSettings]);
  const handleDragEnter = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    e.preventDefault();
    onDragEnter?.();
  }, [onDragEnter]);
  function renderCollapsed() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].info, 'info')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "info-row"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('title', _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].title)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
      dir: "auto",
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].name, 'fullName')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
      name: "archive-filled",
      className: _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].icon
    }), lang('ArchivedChats'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Badge__WEBPACK_IMPORTED_MODULE_12__["default"], {
      className: _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].unreadCount,
      text: archiveUnreadCount ? (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_6__.formatIntegerCompact)(archiveUnreadCount) : undefined
    })));
  }
  function renderRegular() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('status', _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].avatarWrapper)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_10__["default"], {
      peer: ARCHIVE_CUSTOM_PEER
    })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].info, 'info')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "info-row"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('title', _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].title)
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
      dir: "auto",
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].name, 'fullName')
    }, lang('ArchivedChats')))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "subtitle"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('status', _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].chatsPreview)
    }, previewItems), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Badge__WEBPACK_IMPORTED_MODULE_12__["default"], {
      className: _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].unreadCount,
      text: archiveUnreadCount ? (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_6__.formatIntegerCompact)(archiveUnreadCount) : undefined
    }))));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    onClick: onClick,
    onDragEnter: handleDragEnter,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].root, archiveSettings.isMinimized && _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].minimized, 'chat-item-clickable', 'chat-item-archive'),
    buttonClassName: _Archive_module_scss__WEBPACK_IMPORTED_MODULE_14__["default"].button,
    contextActions: contextActions,
    withPortalForMenu: true
  }, archiveSettings.isMinimized ? renderCollapsed() : renderRegular());
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(Archive));

/***/ }),

/***/ "./src/components/left/main/Chat.tsx":
/*!*******************************************!*\
  !*** ./src/components/left/main/Chat.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_replies__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_data_useSelectorSignal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/data/useSelectorSignal */ "./src/hooks/data/useSelectorSignal.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useChatContextActions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useChatContextActions */ "./src/hooks/useChatContextActions.ts");
/* harmony import */ var _hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useEnsureMessage */ "./src/hooks/useEnsureMessage.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _hooks_useChatListEntry__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./hooks/useChatListEntry */ "./src/components/left/main/hooks/useChatListEntry.tsx");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _common_DeleteChatModal__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/DeleteChatModal */ "./src/components/common/DeleteChatModal.tsx");
/* harmony import */ var _common_FullNameTitle__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../common/FullNameTitle */ "./src/components/common/FullNameTitle.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../common/icons/StarIcon */ "./src/components/common/icons/StarIcon.tsx");
/* harmony import */ var _common_LastMessageMeta__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../common/LastMessageMeta */ "./src/components/common/LastMessageMeta.tsx");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _ChatFolderModal_async__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../ChatFolderModal.async */ "./src/components/left/ChatFolderModal.async.tsx");
/* harmony import */ var _MuteChatModal_async__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../MuteChatModal.async */ "./src/components/left/MuteChatModal.async.tsx");
/* harmony import */ var _ChatBadge__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./ChatBadge */ "./src/components/left/main/ChatBadge.tsx");
/* harmony import */ var _ChatCallStatus__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./ChatCallStatus */ "./src/components/left/main/ChatCallStatus.tsx");
/* harmony import */ var _Chat_scss__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./Chat.scss */ "./src/components/left/main/Chat.scss");































const Chat = ({
  chatId,
  folderId,
  orderDiff,
  animationType,
  isPinned,
  listedTopicIds,
  topics,
  observeIntersection,
  chat,
  lastMessageStory,
  isMuted,
  user,
  userStatus,
  actionTargetUserIds,
  lastMessageSender,
  lastMessageOutgoingStatus,
  actionTargetMessage,
  actionTargetChatId,
  offsetTop,
  draft,
  withInterfaceAnimations,
  isSelected,
  isSelectedForum,
  isForumPanelOpen,
  canScrollDown,
  canChangeFolder,
  lastMessageTopic,
  typingStatus,
  lastMessageId,
  lastMessage,
  isSavedDialog,
  currentUserId,
  isPreview,
  previewMessageId,
  className,
  isSynced,
  onDragEnter
}) => {
  const {
    openChat,
    openSavedDialog,
    toggleChatInfo,
    focusLastMessage,
    focusMessage,
    loadTopics,
    openForumPanel,
    closeForumPanel,
    setShouldCloseRightColumn,
    reportMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const [isMuteModalOpen, openMuteModal, closeMuteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const [shouldRenderDeleteModal, markRenderDeleteModal, unmarkRenderDeleteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const {
    isForum,
    isForumAsMessages
  } = chat || {};
  (0,_hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_13__["default"])(isSavedDialog ? currentUserId : chatId, lastMessageId, lastMessage);
  const {
    renderSubtitle,
    ref
  } = (0,_hooks_useChatListEntry__WEBPACK_IMPORTED_MODULE_18__["default"])({
    chat,
    chatId,
    lastMessage,
    typingStatus,
    draft,
    statefulMediaContent: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.groupStatetefulContent)({
      story: lastMessageStory
    }),
    actionTargetMessage,
    actionTargetUserIds,
    actionTargetChatId,
    lastMessageTopic,
    lastMessageSender,
    observeIntersection,
    animationType,
    withInterfaceAnimations,
    orderDiff,
    isSavedDialog,
    isPreview,
    topics
  });
  const getIsForumPanelClosed = (0,_hooks_data_useSelectorSignal__WEBPACK_IMPORTED_MODULE_10__["default"])(_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsForumPanelClosed);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    const noForumTopicPanel = isMobile && isForumAsMessages;
    if (isMobile) {
      setShouldCloseRightColumn({
        value: true
      });
    }
    if (isPreview) {
      focusMessage({
        chatId,
        messageId: previewMessageId
      });
      return;
    }
    if (isSavedDialog) {
      openSavedDialog({
        chatId,
        noForumTopicPanel: true
      }, {
        forceOnHeavyAnimation: true
      });
      if (isMobile) {
        toggleChatInfo({
          force: false
        });
      }
      return;
    }
    if (isForum) {
      if (isForumPanelOpen) {
        closeForumPanel(undefined, {
          forceOnHeavyAnimation: true
        });
        return;
      } else {
        if (!noForumTopicPanel) {
          openForumPanel({
            chatId
          }, {
            forceOnHeavyAnimation: true
          });
        }
        if (!isForumAsMessages) return;
      }
    }
    openChat({
      id: chatId,
      noForumTopicPanel,
      shouldReplaceHistory: true
    }, {
      forceOnHeavyAnimation: true
    });
    if (isSelected && canScrollDown) {
      focusLastMessage();
    }
  });
  const handleDragEnter = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(e => {
    e.preventDefault();
    onDragEnter?.(chatId);
  });
  const handleDelete = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    markRenderDeleteModal();
    openDeleteModal();
  });
  const handleMute = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    markRenderMuteModal();
    openMuteModal();
  });
  const handleChatFolderChange = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    markRenderChatFolderModal();
    openChatFolderModal();
  });
  const handleReport = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    if (!chat) return;
    reportMessages({
      chatId: chat.id,
      messageIds: []
    });
  });
  const contextActions = (0,_hooks_useChatContextActions__WEBPACK_IMPORTED_MODULE_12__["default"])({
    chat,
    user,
    handleDelete,
    handleMute,
    handleChatFolderChange,
    handleReport,
    folderId,
    isPinned,
    isMuted,
    canChangeFolder,
    isSavedDialog,
    currentUserId,
    isPreview
  });
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_15__.useIsIntersecting)(ref, chat ? observeIntersection : undefined);

  // Load the forum topics to display unread count badge
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isIntersecting && isForum && isSynced && listedTopicIds === undefined) {
      loadTopics({
        chatId
      });
    }
  }, [chatId, listedTopicIds, isSynced, isForum, isIntersecting]);
  const isOnline = user && userStatus && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isUserOnline)(user, userStatus);
  const {
    hasShownClass: isAvatarOnlineShown
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_17__["default"])(isOnline);
  const href = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_9__.IS_OPEN_IN_NEW_TAB_SUPPORTED) return undefined;
    if (isSavedDialog) {
      return `#${(0,_util_routing__WEBPACK_IMPORTED_MODULE_8__.createLocationHash)(currentUserId, 'thread', chatId)}`;
    }
    return `#${(0,_util_routing__WEBPACK_IMPORTED_MODULE_8__.createLocationHash)(chatId, 'thread', _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID)}`;
  }, [chatId, currentUserId, isSavedDialog]);
  if (!chat) {
    return undefined;
  }
  const peer = user || chat;
  const chatClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('Chat chat-item-clickable', (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isUserId)(chatId) ? 'private' : 'group', isForum && 'forum', isSelected && 'selected', isSelectedForum && 'selected-forum', isPreview && 'standalone', className);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_25__["default"], {
    ref: ref,
    className: chatClassName,
    href: href,
    style: `top: ${offsetTop}px`,
    ripple: !isForum && !isMobile,
    contextActions: contextActions,
    onClick: handleClick,
    onDragEnter: handleDragEnter,
    withPortalForMenu: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('status', 'status-clickable')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_19__["default"], {
    peer: peer,
    isSavedMessages: user?.isSelf,
    isSavedDialog: isSavedDialog,
    size: isPreview ? 'medium' : 'large',
    withStory: !user?.isSelf,
    withStoryGap: isAvatarOnlineShown || Boolean(chat.subscriptionUntil),
    storyViewerOrigin: _types__WEBPACK_IMPORTED_MODULE_3__.StoryViewerOrigin.ChatList,
    storyViewerMode: "single-peer"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "avatar-badge-wrapper"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('avatar-online', 'avatar-badge', isAvatarOnlineShown && 'avatar-online-shown')
  }), !isAvatarOnlineShown && Boolean(chat.subscriptionUntil) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_StarIcon__WEBPACK_IMPORTED_MODULE_23__["default"], {
    type: "gold",
    className: "avatar-badge avatar-subscription",
    size: "adaptive"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatBadge__WEBPACK_IMPORTED_MODULE_28__["default"], {
    chat: chat,
    isMuted: isMuted,
    shouldShowOnlyMostImportant: true,
    forceHidden: getIsForumPanelClosed,
    topics: topics,
    isSelected: isSelected
  })), chat.isCallActive && chat.isCallNotEmpty && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatCallStatus__WEBPACK_IMPORTED_MODULE_29__["default"], {
    isMobile: isMobile,
    isSelected: isSelected,
    isActive: withInterfaceAnimations
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "info"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "info-row"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_FullNameTitle__WEBPACK_IMPORTED_MODULE_21__["default"], {
    peer: peer,
    withEmojiStatus: true,
    isSavedMessages: chatId === user?.id && user?.isSelf,
    isSavedDialog: isSavedDialog,
    observeIntersection: observeIntersection
  }), isMuted && !isSavedDialog && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_22__["default"], {
    name: "muted"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "separator"
  }), lastMessage && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_LastMessageMeta__WEBPACK_IMPORTED_MODULE_24__["default"], {
    message: lastMessage,
    outgoingStatus: !isSavedDialog ? lastMessageOutgoingStatus : undefined,
    draftDate: draft?.date
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "subtitle"
  }, renderSubtitle(), !isPreview && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatBadge__WEBPACK_IMPORTED_MODULE_28__["default"], {
    chat: chat,
    isPinned: isPinned,
    isMuted: isMuted,
    isSavedDialog: isSavedDialog,
    hasMiniApp: user?.hasMainMiniApp,
    topics: topics,
    isSelected: isSelected
  }))), shouldRenderDeleteModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_DeleteChatModal__WEBPACK_IMPORTED_MODULE_20__["default"], {
    isOpen: isDeleteModalOpen,
    onClose: closeDeleteModal,
    onCloseAnimationEnd: unmarkRenderDeleteModal,
    chat: chat,
    isSavedDialog: isSavedDialog
  }), shouldRenderMuteModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MuteChatModal_async__WEBPACK_IMPORTED_MODULE_27__["default"], {
    isOpen: isMuteModalOpen,
    onClose: closeMuteModal,
    onCloseAnimationEnd: unmarkRenderMuteModal,
    chatId: chatId
  }), shouldRenderChatFolderModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatFolderModal_async__WEBPACK_IMPORTED_MODULE_26__["default"], {
    isOpen: isChatFolderModalOpen,
    onClose: closeChatFolderModal,
    onCloseAnimationEnd: unmarkRenderChatFolderModal,
    chatId: chatId
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  isSavedDialog,
  isPreview,
  previewMessageId
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId);
  const user = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUser)(global, chatId);
  if (!chat) {
    return {
      currentUserId: global.currentUserId
    };
  }
  const lastMessageId = previewMessageId || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatLastMessageId)(global, chatId, isSavedDialog ? 'saved' : 'all');
  const lastMessage = previewMessageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, chatId, previewMessageId) : (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatLastMessage)(global, chatId, isSavedDialog ? 'saved' : 'all');
  const {
    isOutgoing,
    forwardInfo
  } = lastMessage || {};
  const savedDialogSender = isSavedDialog && forwardInfo?.fromId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPeer)(global, forwardInfo.fromId) : undefined;
  const messageSender = lastMessage ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectSender)(global, lastMessage) : undefined;
  const lastMessageSender = savedDialogSender || messageSender;
  const replyToMessageId = lastMessage && (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_5__.getMessageReplyInfo)(lastMessage)?.replyToMsgId;
  const lastMessageAction = lastMessage ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageAction)(lastMessage) : undefined;
  const actionTargetMessage = lastMessageAction && replyToMessageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatMessage)(global, chat.id, replyToMessageId) : undefined;
  const {
    targetUserIds: actionTargetUserIds,
    targetChatId: actionTargetChatId
  } = lastMessageAction || {};
  const {
    chatId: currentChatId,
    threadId: currentThreadId,
    type: messageListType
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentMessageList)(global) || {};
  const isSelected = !isPreview && chatId === currentChatId && (isSavedDialog ? chatId === currentThreadId : currentThreadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID);
  const isSelectedForum = chat.isForum && chatId === currentChatId || chatId === (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global).forumPanelChatId;
  const userStatus = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUserStatus)(global, chatId);
  const lastMessageTopic = lastMessage && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopicFromMessage)(global, lastMessage);
  const typingStatus = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectThreadParam)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID, 'typingStatus');
  const topicsInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopicsInfo)(global, chatId);
  const storyData = lastMessage?.content.storyData;
  const lastMessageStory = storyData && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectPeerStory)(global, storyData.peerId, storyData.id);
  return {
    chat,
    isMuted: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.selectIsChatMuted)(chat, (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectNotifySettings)(global), (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectNotifyExceptions)(global)),
    lastMessageSender,
    actionTargetUserIds,
    actionTargetChatId,
    actionTargetMessage,
    draft: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectDraft)(global, chatId, _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID),
    isSelected,
    isSelectedForum,
    isForumPanelOpen: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsForumPanelOpen)(global),
    canScrollDown: isSelected && messageListType === 'thread',
    canChangeFolder: (global.chatFolders.orderedIds?.length || 0) > 1,
    ...(isOutgoing && lastMessage && {
      lastMessageOutgoingStatus: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectOutgoingStatus)(global, lastMessage)
    }),
    user,
    userStatus,
    lastMessageTopic,
    typingStatus,
    withInterfaceAnimations: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanAnimateInterface)(global),
    lastMessage,
    lastMessageId,
    currentUserId: global.currentUserId,
    listedTopicIds: topicsInfo?.listedTopicIds,
    topics: topicsInfo?.topicsById,
    isSynced: global.isSynced,
    lastMessageStory
  };
})(Chat)));

/***/ }),

/***/ "./src/components/left/main/ChatBadge.tsx":
/*!************************************************!*\
  !*** ./src/components/left/main/ChatBadge.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_signals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/signals */ "./src/util/signals.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _util_themeStyle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/themeStyle */ "./src/util/themeStyle.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/AnimatedCounter */ "./src/components/common/AnimatedCounter.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ShowTransition__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/ShowTransition */ "./src/components/ui/ShowTransition.tsx");
/* harmony import */ var _ChatBadge_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ChatBadge.scss */ "./src/components/left/main/ChatBadge.scss");














const ChatBadge = ({
  topic,
  topics,
  chat,
  isPinned,
  isMuted,
  shouldShowOnlyMostImportant,
  wasTopicOpened,
  forceHidden,
  isSavedDialog,
  hasMiniApp,
  isSelected
}) => {
  const {
    requestMainWebView
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const {
    unreadMentionsCount = 0,
    unreadReactionsCount = 0
  } = !chat.isForum ? chat : {}; // TODO[forums] Unread mentions and reactions temporarily disabled for forums

  const isTopicUnopened = !isPinned && topic && !wasTopicOpened;
  const isForum = chat.isForum && !topic;
  const topicsWithUnread = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => isForum && topics ? Object.values(topics).filter(({
    unreadCount
  }) => unreadCount) : undefined, [topics, isForum]);
  const unreadCount = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => isForum
  // If we have unmuted topics, display the count of those. Otherwise, display the count of all topics.
  ? isMuted && topicsWithUnread?.filter(acc => acc.isMuted === false).length || topicsWithUnread?.length : (topic || chat).unreadCount, [chat, topic, topicsWithUnread, isForum, isMuted]);
  const shouldBeMuted = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const hasUnmutedUnreadTopics = topics && Object.values(topics).some(acc => !acc.isMuted && acc.unreadCount);
    return isMuted || topics && !hasUnmutedUnreadTopics;
  }, [topics, isMuted]);
  const hasUnreadMark = topic ? false : chat.hasUnreadMark;
  const resolvedForceHidden = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_6__["default"])(() => (0,_util_signals__WEBPACK_IMPORTED_MODULE_3__.isSignal)(forceHidden) ? forceHidden() : forceHidden, [forceHidden]);
  const isShown = !resolvedForceHidden && Boolean(unreadCount || unreadMentionsCount || hasUnreadMark || isPinned || unreadReactionsCount || isTopicUnopened || hasMiniApp);
  const isUnread = Boolean((unreadCount || hasUnreadMark) && !isSavedDialog);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('ChatBadge', shouldBeMuted && 'muted', !isUnread && isPinned && 'pinned', isUnread && 'unread');
  const handleOpenApp = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(e => {
    e.stopPropagation();
    const theme = (0,_util_themeStyle__WEBPACK_IMPORTED_MODULE_5__.extractCurrentThemeParams)();
    requestMainWebView({
      botId: chat.id,
      peerId: chat.id,
      theme,
      shouldMarkBotTrusted: true
    });
  });
  function renderContent() {
    const unreadReactionsElement = unreadReactionsCount && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('ChatBadge reaction', shouldBeMuted && 'muted')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
      name: "heart"
    }));
    const unreadMentionsElement = unreadMentionsCount && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "ChatBadge mention"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
      name: "mention"
    }));
    const unopenedTopicElement = isTopicUnopened && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])('ChatBadge unopened', shouldBeMuted && 'muted')
    });
    const unreadCountElement = hasUnreadMark || unreadCount ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: className
    }, !hasUnreadMark && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedCounter__WEBPACK_IMPORTED_MODULE_9__["default"], {
      text: (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_4__.formatIntegerCompact)(unreadCount)
    })) : undefined;
    const pinnedElement = isPinned && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: className
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_10__["default"], {
      name: "pinned-chat"
    }));
    const miniAppButton = hasMiniApp && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_11__["default"], {
      color: isSelected ? 'secondary' : 'primary',
      className: "ChatBadge miniapp",
      pill: true,
      size: "tiny",
      onClick: handleOpenApp
    }, oldLang('BotOpen'));
    const visiblePinnedElement = !unreadCountElement && !unreadMentionsElement && !unreadReactionsElement && pinnedElement;
    const elements = [unopenedTopicElement, unreadReactionsElement, unreadMentionsElement, unreadCountElement, visiblePinnedElement].filter(Boolean);
    if (isSavedDialog) return pinnedElement;

    // Show only if empty or have pinned icon
    if (hasMiniApp && (elements.length === 0 || visiblePinnedElement)) return miniAppButton;
    if (elements.length === 0) return undefined;
    if (elements.length === 1) return elements[0];
    if (shouldShowOnlyMostImportant) {
      const importanceOrderedElements = [unreadMentionsElement, unreadCountElement, unreadReactionsElement, pinnedElement].filter(Boolean);
      return importanceOrderedElements[0];
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "ChatBadge-wrapper"
    }, elements);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ShowTransition__WEBPACK_IMPORTED_MODULE_12__["default"], {
    isCustom: true,
    className: "ChatBadge-transition",
    isOpen: isShown
  }, renderContent());
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ChatBadge));

/***/ }),

/***/ "./src/components/left/main/ChatCallStatus.tsx":
/*!*****************************************************!*\
  !*** ./src/components/left/main/ChatCallStatus.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChatCallStatus.module.scss */ "./src/components/left/main/ChatCallStatus.module.scss");



const ChatCallStatus = ({
  isSelected,
  isActive,
  isMobile
}) => {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].root, isActive && _ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].active, isSelected && !isMobile && _ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].selected)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].indicator
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].indicatorInner
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].indicatorInner
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ChatCallStatus_module_scss__WEBPACK_IMPORTED_MODULE_2__["default"].indicatorInner
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ChatCallStatus));

/***/ }),

/***/ "./src/components/left/main/ChatList.tsx":
/*!***********************************************!*\
  !*** ./src/components/left/main/ChatList.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_folderManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/folderManager */ "./src/util/folderManager.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_polling_usePeerStoriesPolling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/polling/usePeerStoriesPolling */ "./src/hooks/polling/usePeerStoriesPolling.ts");
/* harmony import */ var _hooks_scroll_useTopOverscroll__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/scroll/useTopOverscroll */ "./src/hooks/scroll/useTopOverscroll.tsx");
/* harmony import */ var _hooks_useDebouncedCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useDebouncedCallback */ "./src/hooks/useDebouncedCallback.ts");
/* harmony import */ var _hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useFolderManager */ "./src/hooks/useFolderManager.ts");
/* harmony import */ var _hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useHotkeys */ "./src/hooks/useHotkeys.ts");
/* harmony import */ var _hooks_useInfiniteScroll__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useInfiniteScroll */ "./src/hooks/useInfiniteScroll.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOrderDiff__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./hooks/useOrderDiff */ "./src/components/left/main/hooks/useOrderDiff.ts");
/* harmony import */ var _ui_InfiniteScroll__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/InfiniteScroll */ "./src/components/ui/InfiniteScroll.tsx");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");
/* harmony import */ var _Archive__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Archive */ "./src/components/left/main/Archive.tsx");
/* harmony import */ var _Chat__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Chat */ "./src/components/left/main/Chat.tsx");
/* harmony import */ var _EmptyFolder__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./EmptyFolder */ "./src/components/left/main/EmptyFolder.tsx");
/* harmony import */ var _UnconfirmedSession__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./UnconfirmedSession */ "./src/components/left/main/UnconfirmedSession.tsx");























const INTERSECTION_THROTTLE = 200;
const DRAG_ENTER_DEBOUNCE = 500;
const RESERVED_HOTKEYS = new Set(['9', '0']);
const ChatList = ({
  className,
  folderType,
  folderId,
  isActive,
  isForumPanelOpen,
  canDisplayArchive,
  archiveSettings,
  sessions,
  foldersDispatch,
  onSettingsScreenSelect,
  onLeftColumnContentChange
}) => {
  const {
    openChat,
    openNextChat,
    closeForumPanel,
    toggleStoryRibbon
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const shouldIgnoreDragRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const [unconfirmedSessionHeight, setUnconfirmedSessionHeight] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const isArchived = folderType === 'archived';
  const isAllFolder = folderType === 'all';
  const isSaved = folderType === 'saved';
  const resolvedFolderId = isAllFolder ? _config__WEBPACK_IMPORTED_MODULE_3__.ALL_FOLDER_ID : isArchived ? _config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVED_FOLDER_ID : isSaved ? _config__WEBPACK_IMPORTED_MODULE_3__.SAVED_FOLDER_ID : folderId;
  const shouldDisplayArchive = isAllFolder && canDisplayArchive && archiveSettings;
  const orderedIds = (0,_hooks_useFolderManager__WEBPACK_IMPORTED_MODULE_11__.useFolderManagerForOrderedIds)(resolvedFolderId);
  (0,_hooks_polling_usePeerStoriesPolling__WEBPACK_IMPORTED_MODULE_8__["default"])(orderedIds);
  const chatsHeight = (orderedIds?.length || 0) * _config__WEBPACK_IMPORTED_MODULE_3__.CHAT_HEIGHT_PX;
  const archiveHeight = shouldDisplayArchive ? archiveSettings?.isMinimized ? _config__WEBPACK_IMPORTED_MODULE_3__.ARCHIVE_MINIMIZED_HEIGHT : _config__WEBPACK_IMPORTED_MODULE_3__.CHAT_HEIGHT_PX : 0;
  const {
    orderDiffById,
    getAnimationType
  } = (0,_hooks_useOrderDiff__WEBPACK_IMPORTED_MODULE_16__["default"])(orderedIds);
  const [viewportIds, getMore] = (0,_hooks_useInfiniteScroll__WEBPACK_IMPORTED_MODULE_13__["default"])(undefined, orderedIds, undefined, _config__WEBPACK_IMPORTED_MODULE_3__.CHAT_LIST_SLICE);
  const shouldShowUnconfirmedSessions = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const sessionsArray = Object.values(sessions || {});
    const current = sessionsArray.find(session => session.isCurrent);
    if (!current || (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_6__.getServerTime)() - current.dateCreated < _config__WEBPACK_IMPORTED_MODULE_3__.FRESH_AUTH_PERIOD) return false;
    return isAllFolder && sessionsArray.some(session => session.isUnconfirmed);
  }, [isAllFolder, sessions]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!shouldShowUnconfirmedSessions) setUnconfirmedSessionHeight(0);
  }, [shouldShowUnconfirmedSessions]);

  // Support <Alt>+<Up/Down> to navigate between chats
  (0,_hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_12__.useHotkeys)((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => isActive && orderedIds?.length ? {
    'Alt+ArrowUp': e => {
      e.preventDefault();
      openNextChat({
        targetIndexDelta: -1,
        orderedIds
      });
    },
    'Alt+ArrowDown': e => {
      e.preventDefault();
      openNextChat({
        targetIndexDelta: 1,
        orderedIds
      });
    }
  } : undefined, [isActive, orderedIds]));

  // Support <Cmd>+<Digit> to navigate between chats
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isActive || isSaved || !orderedIds || !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_APP) {
      return undefined;
    }
    function handleKeyDown(e) {
      if ((_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_MAC_OS && e.metaKey || !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_MAC_OS && e.ctrlKey) && e.code.startsWith('Digit')) {
        const [, digit] = e.code.match(/Digit(\d)/) || [];
        if (!digit || RESERVED_HOTKEYS.has(digit)) return;
        const isArchiveInList = shouldDisplayArchive && archiveSettings && !archiveSettings.isMinimized;
        const shift = isArchiveInList ? -1 : 0;
        const position = Number(digit) + shift - 1;
        if (isArchiveInList && position === -1) {
          onLeftColumnContentChange?.(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Archived);
          return;
        }
        if (position > orderedIds.length - 1) return;
        openChat({
          id: orderedIds[position],
          shouldReplaceHistory: true
        });
      }
    }
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [archiveSettings, isSaved, isActive, onLeftColumnContentChange, openChat, openNextChat, orderedIds, shouldDisplayArchive]);
  const {
    observe
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_14__.useIntersectionObserver)({
    rootRef: containerRef,
    throttleMs: INTERSECTION_THROTTLE
  });
  const handleArchivedClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    onLeftColumnContentChange(_types__WEBPACK_IMPORTED_MODULE_2__.LeftColumnContent.Archived);
    closeForumPanel();
  });
  const handleArchivedDragEnter = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (shouldIgnoreDragRef.current) {
      shouldIgnoreDragRef.current = false;
      return;
    }
    handleArchivedClick();
  });
  const handleDragEnter = (0,_hooks_useDebouncedCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(chatId => {
    if (shouldIgnoreDragRef.current) {
      shouldIgnoreDragRef.current = false;
      return;
    }
    openChat({
      id: chatId,
      shouldReplaceHistory: true
    });
  }, [openChat], DRAG_ENTER_DEBOUNCE, true);
  const handleDragLeave = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(e => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    if (x < rect.width || y < rect.y) return;
    shouldIgnoreDragRef.current = true;
  });
  const handleShowStoryRibbon = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    toggleStoryRibbon({
      isShown: true,
      isArchived
    });
  });
  const handleHideStoryRibbon = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    toggleStoryRibbon({
      isShown: false,
      isArchived
    });
  });
  const renderedOverflowTrigger = (0,_hooks_scroll_useTopOverscroll__WEBPACK_IMPORTED_MODULE_9__["default"])(containerRef, handleShowStoryRibbon, handleHideStoryRibbon, isSaved);
  function renderChats() {
    const viewportOffset = orderedIds.indexOf(viewportIds[0]);
    const pinnedCount = (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getPinnedChatsCount)(resolvedFolderId) || 0;
    return viewportIds.map((id, i) => {
      const isPinned = viewportOffset + i < pinnedCount;
      const offsetTop = unconfirmedSessionHeight + archiveHeight + (viewportOffset + i) * _config__WEBPACK_IMPORTED_MODULE_3__.CHAT_HEIGHT_PX;
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Chat__WEBPACK_IMPORTED_MODULE_20__["default"], {
        key: id,
        teactOrderKey: isPinned ? i : (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_5__.getOrderKey)(id, isSaved),
        chatId: id,
        isPinned: isPinned,
        folderId: folderId,
        isSavedDialog: isSaved,
        animationType: getAnimationType(id),
        orderDiff: orderDiffById[id],
        offsetTop: offsetTop,
        observeIntersection: observe,
        onDragEnter: handleDragEnter
      });
    });
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_InfiniteScroll__WEBPACK_IMPORTED_MODULE_17__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('chat-list custom-scroll', isForumPanelOpen && 'forum-panel-open', className),
    ref: containerRef,
    items: viewportIds,
    itemSelector: ".ListItem:not(.chat-item-archive)",
    preloadBackwards: _config__WEBPACK_IMPORTED_MODULE_3__.CHAT_LIST_SLICE,
    withAbsolutePositioning: true,
    beforeChildren: renderedOverflowTrigger,
    maxHeight: chatsHeight + archiveHeight + unconfirmedSessionHeight,
    onLoadMore: getMore,
    onDragLeave: handleDragLeave
  }, shouldShowUnconfirmedSessions && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_UnconfirmedSession__WEBPACK_IMPORTED_MODULE_22__["default"], {
    key: "unconfirmed",
    sessions: sessions,
    onHeightChange: setUnconfirmedSessionHeight
  }), shouldDisplayArchive && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Archive__WEBPACK_IMPORTED_MODULE_19__["default"], {
    key: "archive",
    archiveSettings: archiveSettings,
    onClick: handleArchivedClick,
    onDragEnter: handleArchivedDragEnter
  }), viewportIds?.length ? renderChats() : viewportIds && !viewportIds.length && !isSaved ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_EmptyFolder__WEBPACK_IMPORTED_MODULE_21__["default"], {
    folderId: folderId,
    folderType: folderType,
    foldersDispatch: foldersDispatch,
    onSettingsScreenSelect: onSettingsScreenSelect
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_18__["default"], {
    key: "loading"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ChatList));

/***/ }),

/***/ "./src/components/left/main/EmptyFolder.tsx":
/*!**************************************************!*\
  !*** ./src/components/left/main/EmptyFolder.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/AnimatedIconFromSticker */ "./src/components/common/AnimatedIconFromSticker.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _EmptyFolder_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./EmptyFolder.module.scss */ "./src/components/left/main/EmptyFolder.module.scss");










const ICON_SIZE = 96;
const EmptyFolder = ({
  chatFolder,
  animatedEmoji,
  foldersDispatch,
  onSettingsScreenSelect
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const handleEditFolder = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    foldersDispatch({
      type: 'editFolder',
      payload: chatFolder
    });
    onSettingsScreenSelect(_types__WEBPACK_IMPORTED_MODULE_2__.SettingsScreens.FoldersEditFolderFromChatList);
  }, [chatFolder, foldersDispatch, onSettingsScreenSelect]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _EmptyFolder_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _EmptyFolder_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].sticker
  }, animatedEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_6__["default"], {
    sticker: animatedEmoji,
    size: ICON_SIZE
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    className: _EmptyFolder_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].title,
    dir: "auto"
  }, lang('FilterNoChatsToDisplay')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: _EmptyFolder_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].description,
    dir: "auto"
  }, lang(chatFolder ? 'ChatList.EmptyChatListFilterText' : 'Chat.EmptyChat')), chatFolder && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_8__["default"], {
    ripple: !isMobile,
    fluid: true,
    pill: true,
    onClick: handleEditFolder,
    size: "smaller",
    isRtl: lang.isRtl
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_7__["default"], {
    name: "settings"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _EmptyFolder_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].buttonText
  }, lang('ChatList.EmptyChatListEditFilter'))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  folderId,
  folderType
}) => {
  const chatFolder = folderId && folderType === 'folder' ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatFolder)(global, folderId) : undefined;
  return {
    chatFolder,
    animatedEmoji: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectAnimatedEmoji)(global, '📂')
  };
})(EmptyFolder)));

/***/ }),

/***/ "./src/components/left/main/EmptyForum.tsx":
/*!*************************************************!*\
  !*** ./src/components/left/main/EmptyForum.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/AnimatedIconFromSticker */ "./src/components/common/AnimatedIconFromSticker.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _EmptyForum_module_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./EmptyForum.module.scss */ "./src/components/left/main/EmptyForum.module.scss");











const ICON_SIZE = 7 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.REM;
const EmptyForum = ({
  chatId,
  animatedEmoji,
  canManageTopics
}) => {
  const {
    openCreateTopicPanel
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const handleCreateTopic = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    openCreateTopicPanel({
      chatId
    });
  }, [chatId, openCreateTopicPanel]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _EmptyForum_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].root
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _EmptyForum_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].sticker
  }, animatedEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIconFromSticker__WEBPACK_IMPORTED_MODULE_8__["default"], {
    sticker: animatedEmoji,
    size: ICON_SIZE
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    className: _EmptyForum_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].title,
    dir: "auto"
  }, lang('ChatList.EmptyTopicsTitle')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_EmptyForum_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].description, _EmptyForum_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].centered),
    dir: "auto"
  }, lang('ChatList.EmptyTopicsDescription')), canManageTopics && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_9__["default"], {
    ripple: !isMobile,
    fluid: true,
    onClick: handleCreateTopic,
    size: "smaller",
    isRtl: lang.isRtl
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _EmptyForum_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].buttonText
  }, lang('ChatList.EmptyTopicsCreate'))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChat)(global, chatId);
  const canManageTopics = chat && (chat.isCreator || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getHasAdminRight)(chat, 'manageTopics'));
  return {
    animatedEmoji: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectAnimatedEmoji)(global, '🐣'),
    canManageTopics
  };
})(EmptyForum)));

/***/ }),

/***/ "./src/components/left/main/ForumPanel.tsx":
/*!*************************************************!*\
  !*** ./src/components/left/main/ForumPanel.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _util_captureEvents__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/captureEvents */ "./src/util/captureEvents.ts");
/* harmony import */ var _util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/cssAnimationEndListeners */ "./src/util/cssAnimationEndListeners.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useHistoryBack */ "./src/hooks/useHistoryBack.ts");
/* harmony import */ var _hooks_useInfiniteScroll__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useInfiniteScroll */ "./src/hooks/useInfiniteScroll.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useOrderDiff__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./hooks/useOrderDiff */ "./src/components/left/main/hooks/useOrderDiff.ts");
/* harmony import */ var _calls_group_GroupCallTopPane__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../calls/group/GroupCallTopPane */ "./src/components/calls/group/GroupCallTopPane.tsx");
/* harmony import */ var _common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../common/GroupChatInfo */ "./src/components/common/GroupChatInfo.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _middle_HeaderActions__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../middle/HeaderActions */ "./src/components/middle/HeaderActions.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_InfiniteScroll__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../ui/InfiniteScroll */ "./src/components/ui/InfiniteScroll.tsx");
/* harmony import */ var _ui_Loading__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../ui/Loading */ "./src/components/ui/Loading.tsx");
/* harmony import */ var _EmptyForum__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./EmptyForum */ "./src/components/left/main/EmptyForum.tsx");
/* harmony import */ var _Topic__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./Topic */ "./src/components/left/main/Topic.tsx");
/* harmony import */ var _ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./ForumPanel.module.scss */ "./src/components/left/main/ForumPanel.module.scss");






























const INTERSECTION_THROTTLE = 200;
const ForumPanel = ({
  chat,
  currentTopicId,
  isOpen,
  isHidden,
  topicsInfo,
  onTopicSearch,
  onCloseAnimationEnd,
  onOpenAnimationStart,
  withInterfaceAnimations
}) => {
  const {
    closeForumPanel,
    openChatWithInfo,
    loadTopics
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);

  // eslint-disable-next-line no-null/no-null
  const containerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const scrollTopHandlerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_12__["default"])();
  const chatId = chat?.id;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (chatId && !topicsInfo) {
      loadTopics({
        chatId
      });
    }
  }, [topicsInfo, chatId]);
  const [isScrolled, setIsScrolled] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_17__["default"])();
  const handleClose = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    closeForumPanel();
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!withInterfaceAnimations && !isOpen) {
      onCloseAnimationEnd?.();
    }
  }, [withInterfaceAnimations, isOpen, onCloseAnimationEnd]);
  const handleToggleChatInfo = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(() => {
    if (!chat) return;
    openChatWithInfo({
      id: chat.id,
      shouldReplaceHistory: true
    });
  });
  const {
    observe
  } = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_15__.useIntersectionObserver)({
    rootRef: containerRef,
    throttleMs: INTERSECTION_THROTTLE
  });
  (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_15__.useOnIntersect)(scrollTopHandlerRef, observe, ({
    isIntersecting
  }) => {
    setIsScrolled(!isIntersecting);
  });
  const orderedIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return topicsInfo ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getOrderedTopics)(Object.values(topicsInfo.topicsById), topicsInfo.orderedPinnedTopicIds).map(({
      id
    }) => id) : [];
  }, [topicsInfo]);
  const {
    orderDiffById,
    getAnimationType
  } = (0,_hooks_useOrderDiff__WEBPACK_IMPORTED_MODULE_19__["default"])(orderedIds, chat?.id);
  const [viewportIds, getMore] = (0,_hooks_useInfiniteScroll__WEBPACK_IMPORTED_MODULE_14__["default"])(() => {
    if (!chat) return;
    loadTopics({
      chatId: chat.id
    });
  }, orderedIds, !topicsInfo?.totalCount || orderedIds.length >= topicsInfo.totalCount, _config__WEBPACK_IMPORTED_MODULE_3__.TOPICS_SLICE);
  const shouldRenderRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const isVisible = isOpen && !isHidden;
  const prevIsVisible = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_18__["default"])(isVisible);
  if (prevIsVisible !== isVisible) {
    shouldRenderRef.current = false;
  }
  (0,_hooks_useHistoryBack__WEBPACK_IMPORTED_MODULE_13__["default"])({
    isActive: isVisible,
    onBack: handleClose
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => isVisible ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_8__["default"])(handleClose) : undefined, [handleClose, isVisible]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (prevIsVisible !== isVisible) {
      // For performance reasons, we delay animation of the topic list panel to the next animation frame
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestNextMutation)(() => {
        if (!ref.current) return;
        const endHeavyAnimation = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.beginHeavyAnimation)();
        (0,_util_cssAnimationEndListeners__WEBPACK_IMPORTED_MODULE_10__.waitForTransitionEnd)(ref.current, endHeavyAnimation);
        onOpenAnimationStart?.();
        if (isVisible) {
          shouldRenderRef.current = true;
          ref.current.style.transform = 'none';
        } else {
          shouldRenderRef.current = false;
          ref.current.style.transform = '';
        }
      });
    }
  }, [isVisible, onOpenAnimationStart, prevIsVisible]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_TOUCH_ENV) {
      return undefined;
    }
    return (0,_util_captureEvents__WEBPACK_IMPORTED_MODULE_9__.captureEvents)(ref.current, {
      selectorToPreventScroll: '.chat-list',
      onSwipe: (e, direction) => {
        const closeDirection = lang.isRtl ? _util_captureEvents__WEBPACK_IMPORTED_MODULE_9__.SwipeDirection.Left : _util_captureEvents__WEBPACK_IMPORTED_MODULE_9__.SwipeDirection.Right;
        if (direction === closeDirection) {
          closeForumPanel();
          return true;
        }
        return false;
      }
    });
  }, [closeForumPanel, lang.isRtl]);
  function renderTopics() {
    const viewportOffset = orderedIds.indexOf(viewportIds[0]);
    return viewportIds?.map((id, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Topic__WEBPACK_IMPORTED_MODULE_28__["default"], {
      key: id,
      chatId: chat.id,
      topic: topicsInfo.topicsById[id],
      style: `top: ${(viewportOffset + i) * _config__WEBPACK_IMPORTED_MODULE_3__.TOPIC_HEIGHT_PX}px;`,
      isSelected: currentTopicId === id,
      observeIntersection: observe,
      animationType: getAnimationType(id),
      orderDiff: orderDiffById[id]
    }));
  }
  const isLoading = topicsInfo === undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])(_ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__["default"].root, isScrolled && _ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__["default"].scrolled, lang.isRtl && _ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__["default"].rtl, !withInterfaceAnimations && _ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__["default"].noAnimation),
    onTransitionEnd: !isOpen ? onCloseAnimationEnd : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: "TopicListHeader",
    className: "left-header"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_24__["default"], {
    round: true,
    size: "smaller",
    color: "translucent",
    onClick: handleClose,
    ariaLabel: lang('Close')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_22__["default"], {
    name: "close"
  })), chat && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_GroupChatInfo__WEBPACK_IMPORTED_MODULE_21__["default"], {
    noAvatar: true,
    className: _ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__["default"].info,
    chatId: chat.id,
    onClick: handleToggleChatInfo
  }), chat && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_middle_HeaderActions__WEBPACK_IMPORTED_MODULE_23__["default"], {
    chatId: chat.id,
    threadId: _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID,
    messageListType: "thread",
    canExpandActions: false,
    isForForum: true,
    isMobile: isMobile,
    onTopicSearch: onTopicSearch
  })), chat && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_calls_group_GroupCallTopPane__WEBPACK_IMPORTED_MODULE_20__["default"], {
    chatId: chat.id
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__["default"].notch
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_InfiniteScroll__WEBPACK_IMPORTED_MODULE_25__["default"], {
    className: "chat-list custom-scroll",
    ref: containerRef,
    items: viewportIds,
    preloadBackwards: _config__WEBPACK_IMPORTED_MODULE_3__.TOPICS_SLICE,
    withAbsolutePositioning: true,
    maxHeight: (orderedIds?.length || 0) * _config__WEBPACK_IMPORTED_MODULE_3__.TOPIC_HEIGHT_PX,
    onLoadMore: getMore,
    sensitiveArea: _config__WEBPACK_IMPORTED_MODULE_3__.TOPIC_LIST_SENSITIVE_AREA,
    beforeChildren: /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      ref: scrollTopHandlerRef,
      className: _ForumPanel_module_scss__WEBPACK_IMPORTED_MODULE_29__["default"].scrollTopHandler
    })
  }, Boolean(viewportIds?.length) && renderTopics(), isLoading && !viewportIds?.length && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Loading__WEBPACK_IMPORTED_MODULE_26__["default"], {
    key: "loading"
  })), !isLoading && viewportIds?.length === 1 && viewportIds[0] === _config__WEBPACK_IMPORTED_MODULE_3__.GENERAL_TOPIC_ID && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_EmptyForum__WEBPACK_IMPORTED_MODULE_27__["default"], {
    chatId: chatId
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  const chatId = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTabState)(global).forumPanelChatId;
  const chat = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId) : undefined;
  const {
    chatId: currentChatId,
    threadId: currentThreadId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCurrentMessageList)(global) || {};
  const topicsInfo = chatId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTopicsInfo)(global, chatId) : undefined;
  return {
    chat,
    currentTopicId: chatId === currentChatId ? Number(currentThreadId) : undefined,
    withInterfaceAnimations: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanAnimateInterface)(global),
    topicsInfo
  };
}, global => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsForumPanelOpen)(global))(ForumPanel)));

/***/ }),

/***/ "./src/components/left/main/Topic.tsx":
/*!********************************************!*\
  !*** ./src/components/left/main/Topic.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_replies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_routing__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/routing */ "./src/util/routing.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useChatListEntry__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./hooks/useChatListEntry */ "./src/components/left/main/hooks/useChatListEntry.tsx");
/* harmony import */ var _hooks_useTopicContextActions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./hooks/useTopicContextActions */ "./src/components/left/main/hooks/useTopicContextActions.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_LastMessageMeta__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../common/LastMessageMeta */ "./src/components/common/LastMessageMeta.tsx");
/* harmony import */ var _common_TopicIcon__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../common/TopicIcon */ "./src/components/common/TopicIcon.tsx");
/* harmony import */ var _ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/ConfirmDialog */ "./src/components/ui/ConfirmDialog.tsx");
/* harmony import */ var _ui_ListItem__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../ui/ListItem */ "./src/components/ui/ListItem.tsx");
/* harmony import */ var _MuteChatModal_async__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../MuteChatModal.async */ "./src/components/left/MuteChatModal.async.tsx");
/* harmony import */ var _ChatBadge__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ChatBadge */ "./src/components/left/main/ChatBadge.tsx");
/* harmony import */ var _Topic_module_scss__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Topic.module.scss */ "./src/components/left/main/Topic.module.scss");






















const Topic = ({
  topic,
  isSelected,
  chatId,
  chat,
  style,
  lastMessage,
  lastMessageStory,
  canScrollDown,
  lastMessageOutgoingStatus,
  observeIntersection,
  canDelete,
  actionTargetMessage,
  actionTargetUserIds,
  actionTargetChatId,
  lastMessageSender,
  animationType,
  withInterfaceAnimations,
  orderDiff,
  typingStatus,
  draft,
  wasTopicOpened,
  topics
}) => {
  const {
    openThread,
    deleteTopic,
    focusLastMessage,
    setViewForumAsMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [isMuteModalOpen, openMuteModal, closeMuteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [shouldRenderDeleteModal, markRenderDeleteModal, unmarkRenderDeleteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const {
    isPinned,
    isClosed
  } = topic;
  const isMuted = topic.isMuted || topic.isMuted === undefined && chat.isMuted;
  const handleOpenDeleteModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    markRenderDeleteModal();
    openDeleteModal();
  });
  const handleDelete = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    deleteTopic({
      chatId: chat.id,
      topicId: topic.id
    });
  });
  const handleMute = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    markRenderMuteModal();
    openMuteModal();
  });
  const {
    renderSubtitle,
    ref
  } = (0,_hooks_useChatListEntry__WEBPACK_IMPORTED_MODULE_12__["default"])({
    chat,
    chatId,
    lastMessage,
    draft,
    actionTargetMessage,
    actionTargetUserIds,
    actionTargetChatId,
    lastMessageSender,
    lastMessageTopic: topic,
    observeIntersection,
    isTopic: true,
    typingStatus,
    topics,
    statefulMediaContent: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.groupStatetefulContent)({
      story: lastMessageStory
    }),
    animationType,
    withInterfaceAnimations,
    orderDiff
  });
  const handleOpenTopic = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    openThread({
      chatId,
      threadId: topic.id,
      shouldReplaceHistory: true
    });
    setViewForumAsMessages({
      chatId,
      isEnabled: false
    });
    if (canScrollDown) {
      focusLastMessage();
    }
  });
  const contextActions = (0,_hooks_useTopicContextActions__WEBPACK_IMPORTED_MODULE_13__["default"])({
    topic,
    chat,
    wasOpened: wasTopicOpened,
    canDelete,
    handleDelete: handleOpenDeleteModal,
    handleMute
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ListItem__WEBPACK_IMPORTED_MODULE_18__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_Topic_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].root, 'Chat', isSelected && 'selected', 'chat-item-clickable'),
    onClick: handleOpenTopic,
    style: style,
    href: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_OPEN_IN_NEW_TAB_SUPPORTED ? `#${(0,_util_routing__WEBPACK_IMPORTED_MODULE_6__.createLocationHash)(chatId, 'thread', topic.id)}` : undefined,
    contextActions: contextActions,
    withPortalForMenu: true,
    ref: ref
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "info"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "info-row"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('title')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_TopicIcon__WEBPACK_IMPORTED_MODULE_16__["default"], {
    topic: topic,
    className: _Topic_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].topicIcon,
    observeIntersection: observeIntersection
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
    dir: "auto",
    className: "fullName"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(topic.title))), topic.isMuted && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    name: "muted"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "separator"
  }), isClosed && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    name: "lock-badge",
    className: _Topic_module_scss__WEBPACK_IMPORTED_MODULE_21__["default"].closedIcon
  }), lastMessage && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_LastMessageMeta__WEBPACK_IMPORTED_MODULE_15__["default"], {
    message: lastMessage,
    outgoingStatus: lastMessageOutgoingStatus
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "subtitle"
  }, renderSubtitle(), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ChatBadge__WEBPACK_IMPORTED_MODULE_20__["default"], {
    chat: chat,
    isPinned: isPinned,
    isMuted: isMuted,
    topic: topic,
    wasTopicOpened: wasTopicOpened,
    topics: topics
  }))), shouldRenderDeleteModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ConfirmDialog__WEBPACK_IMPORTED_MODULE_17__["default"], {
    isOpen: isDeleteModalOpen,
    onClose: closeDeleteModal,
    onCloseAnimationEnd: unmarkRenderDeleteModal,
    confirmIsDestructive: true,
    confirmHandler: handleDelete,
    text: lang('lng_forum_topic_delete_sure'),
    confirmLabel: lang('Delete')
  }), shouldRenderMuteModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MuteChatModal_async__WEBPACK_IMPORTED_MODULE_19__["default"], {
    isOpen: isMuteModalOpen,
    onClose: closeMuteModal,
    onCloseAnimationEnd: unmarkRenderMuteModal,
    chatId: chatId,
    topicId: topic.id
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  topic,
  isSelected
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChat)(global, chatId);
  const lastMessage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessage)(global, chatId, topic.lastMessageId);
  const {
    isOutgoing
  } = lastMessage || {};
  const replyToMessageId = lastMessage && (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_3__.getMessageReplyInfo)(lastMessage)?.replyToMsgId;
  const lastMessageSender = lastMessage && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectSender)(global, lastMessage);
  const lastMessageAction = lastMessage ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageAction)(lastMessage) : undefined;
  const actionTargetMessage = lastMessageAction && replyToMessageId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectChatMessage)(global, chatId, replyToMessageId) : undefined;
  const {
    targetUserIds: actionTargetUserIds,
    targetChatId: actionTargetChatId
  } = lastMessageAction || {};
  const typingStatus = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectThreadParam)(global, chatId, topic.id, 'typingStatus');
  const draft = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectDraft)(global, chatId, topic.id);
  const threadInfo = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectThreadInfo)(global, chatId, topic.id);
  const wasTopicOpened = Boolean(threadInfo?.lastReadInboxMessageId);
  const topics = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTopics)(global, chatId);
  const {
    chatId: currentChatId,
    threadId: currentThreadId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCurrentMessageList)(global) || {};
  const storyData = lastMessage?.content.storyData;
  const lastMessageStory = storyData && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStory)(global, storyData.peerId, storyData.id);
  return {
    chat,
    lastMessage,
    actionTargetUserIds,
    actionTargetChatId,
    actionTargetMessage,
    lastMessageSender,
    typingStatus,
    canDelete: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanDeleteTopic)(global, chatId, topic.id),
    withInterfaceAnimations: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanAnimateInterface)(global),
    draft,
    ...(isOutgoing && lastMessage && {
      lastMessageOutgoingStatus: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectOutgoingStatus)(global, lastMessage)
    }),
    canScrollDown: isSelected && chat?.id === currentChatId && currentThreadId === topic.id,
    wasTopicOpened,
    topics,
    lastMessageStory
  };
})(Topic)));

/***/ }),

/***/ "./src/components/left/main/UnconfirmedSession.tsx":
/*!*********************************************************!*\
  !*** ./src/components/left/main/UnconfirmedSession.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _UnconfirmedSession_module_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./UnconfirmedSession.module.scss */ "./src/components/left/main/UnconfirmedSession.module.scss");







const UnconfirmedSession = ({
  sessions,
  onHeightChange
}) => {
  const {
    changeSessionSettings,
    terminateAuthorization,
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_3__["default"])();
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_4__["default"])(ref, entry => {
    const height = entry.borderBoxSize?.[0]?.blockSize || entry.contentRect.height;
    onHeightChange(height);
  });
  const firstUnconfirmed = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return Object.values(sessions).sort((a, b) => b.dateCreated - a.dateCreated).find(session => session.isUnconfirmed);
  }, [sessions]);
  const locationString = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return [firstUnconfirmed.deviceModel, firstUnconfirmed.region, firstUnconfirmed.country].filter(Boolean).join(', ');
  }, [firstUnconfirmed]);
  const handleAccept = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    changeSessionSettings({
      hash: firstUnconfirmed.hash,
      isConfirmed: true
    });
  });
  const handleReject = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    terminateAuthorization({
      hash: firstUnconfirmed.hash
    });
    showNotification({
      title: lang('UnconfirmedAuthDeniedTitle', 1),
      message: lang('UnconfirmedAuthDeniedMessageSingle', locationString)
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UnconfirmedSession_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].root,
    ref: ref
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h2", {
    className: _UnconfirmedSession_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].title
  }, lang('UnconfirmedAuthTitle')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: _UnconfirmedSession_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].info
  }, lang('UnconfirmedAuthSingle', locationString)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _UnconfirmedSession_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].buttons
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_5__["default"], {
    fluid: true,
    isText: true,
    size: "smaller",
    className: _UnconfirmedSession_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].button,
    onClick: handleAccept
  }, lang('UnconfirmedAuthConfirm')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_5__["default"], {
    fluid: true,
    isText: true,
    size: "smaller",
    color: "danger",
    onClick: handleReject,
    className: _UnconfirmedSession_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].button
  }, lang('UnconfirmedAuthDeny'))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(UnconfirmedSession));

/***/ }),

/***/ "./src/components/left/main/hooks/index.ts":
/*!*************************************************!*\
  !*** ./src/components/left/main/hooks/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChatAnimationTypes: () => (/* reexport safe */ _useChatAnimationType__WEBPACK_IMPORTED_MODULE_0__.ChatAnimationTypes),
/* harmony export */   useChatAnimationType: () => (/* reexport safe */ _useChatAnimationType__WEBPACK_IMPORTED_MODULE_0__.useChatAnimationType)
/* harmony export */ });
/* harmony import */ var _useChatAnimationType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useChatAnimationType */ "./src/components/left/main/hooks/useChatAnimationType.ts");


/***/ }),

/***/ "./src/components/left/main/hooks/useChatAnimationType.ts":
/*!****************************************************************!*\
  !*** ./src/components/left/main/hooks/useChatAnimationType.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChatAnimationTypes: () => (/* binding */ ChatAnimationTypes),
/* harmony export */   useChatAnimationType: () => (/* binding */ useChatAnimationType)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");

let ChatAnimationTypes = /*#__PURE__*/function (ChatAnimationTypes) {
  ChatAnimationTypes[ChatAnimationTypes["Move"] = 0] = "Move";
  ChatAnimationTypes[ChatAnimationTypes["Opacity"] = 1] = "Opacity";
  ChatAnimationTypes[ChatAnimationTypes["None"] = 2] = "None";
  return ChatAnimationTypes;
}({});
function useChatAnimationType(orderDiffById) {
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const orderDiffs = Object.values(orderDiffById);
    const numberOfUp = orderDiffs.filter(diff => diff < 0).length;
    const numberOfDown = orderDiffs.filter(diff => diff > 0).length;
    return chatId => {
      const orderDiff = orderDiffById[chatId];
      if (orderDiff === 0) {
        return ChatAnimationTypes.None;
      }
      if (orderDiff === Infinity || orderDiff === -Infinity || numberOfUp <= numberOfDown && orderDiff < 0 || numberOfDown < numberOfUp && orderDiff > 0) {
        return ChatAnimationTypes.Opacity;
      }
      return ChatAnimationTypes.Move;
    };
  }, [orderDiffById]);
}

/***/ }),

/***/ "./src/components/left/main/hooks/useChatListEntry.tsx":
/*!*************************************************************!*\
  !*** ./src/components/left/main/hooks/useChatListEntry.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useChatListEntry)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_peers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../global/helpers/peers */ "./src/global/helpers/peers.ts");
/* harmony import */ var _global_helpers_replies__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../global/helpers/replies */ "./src/global/helpers/replies.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_renderActionMessageText__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../common/helpers/renderActionMessageText */ "./src/components/common/helpers/renderActionMessageText.tsx");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _useChatAnimationType__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./useChatAnimationType */ "./src/components/left/main/hooks/useChatAnimationType.ts");
/* harmony import */ var _hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../hooks/useEnsureMessage */ "./src/hooks/useEnsureMessage.ts");
/* harmony import */ var _hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../hooks/useEnsureStory */ "./src/hooks/useEnsureStory.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_ChatForumLastMessage__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../common/ChatForumLastMessage */ "./src/components/common/ChatForumLastMessage.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_MessageSummary__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../common/MessageSummary */ "./src/components/common/MessageSummary.tsx");
/* harmony import */ var _common_TypingStatus__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../common/TypingStatus */ "./src/components/common/TypingStatus.tsx");




















const ANIMATION_DURATION = 200;
function useChatListEntry({
  chat,
  topics,
  lastMessage,
  statefulMediaContent,
  chatId,
  typingStatus,
  draft,
  actionTargetMessage,
  actionTargetUserIds,
  lastMessageTopic,
  lastMessageSender,
  actionTargetChatId,
  observeIntersection,
  animationType,
  orderDiff,
  withInterfaceAnimations,
  isTopic,
  isSavedDialog,
  isPreview
}) {
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_15__["default"])();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isAction = lastMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isActionMessage)(lastMessage);
  const replyToMessageId = lastMessage && (0,_global_helpers_replies__WEBPACK_IMPORTED_MODULE_6__.getMessageReplyInfo)(lastMessage)?.replyToMsgId;
  (0,_hooks_useEnsureMessage__WEBPACK_IMPORTED_MODULE_12__["default"])(chatId, isAction ? replyToMessageId : undefined, actionTargetMessage);
  const storyData = lastMessage?.content.storyData;
  const shouldTryLoadingStory = statefulMediaContent && !statefulMediaContent.story;
  (0,_hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_13__["default"])(shouldTryLoadingStory ? storyData?.peerId : undefined, storyData?.id, statefulMediaContent?.story);
  const mediaContent = statefulMediaContent?.story || lastMessage;
  const mediaHasPreview = mediaContent && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageSticker)(mediaContent);
  const mediaThumbnail = mediaHasPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageMediaThumbDataUri)(mediaContent) : undefined;
  const mediaBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_14__["default"])(mediaHasPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageMediaHash)(mediaContent, 'micro') : undefined);
  const isRoundVideo = Boolean(lastMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageRoundVideo)(lastMessage));
  const actionTargetUsers = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!actionTargetUserIds) {
      return undefined;
    }

    // No need for expensive global updates on users, so we avoid them
    const usersById = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().users.byId;
    return actionTargetUserIds.map(userId => usersById[userId]).filter(Boolean);
  }, [actionTargetUserIds]);
  const renderLastMessageOrTyping = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (!isSavedDialog && !isPreview && typingStatus && lastMessage && typingStatus.timestamp > lastMessage.date * 1000) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_TypingStatus__WEBPACK_IMPORTED_MODULE_19__["default"], {
        typingStatus: typingStatus
      });
    }
    const isDraftReplyToTopic = draft && draft.replyInfo?.replyToMsgId === lastMessageTopic?.id;
    const isEmptyLocalReply = draft?.replyInfo && !draft.text && draft.isLocal;
    const canDisplayDraft = !chat?.isForum && !isSavedDialog && !isPreview && draft && !isEmptyLocalReply && (!isTopic || !isDraftReplyToTopic);
    if (canDisplayDraft) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
        className: "last-message",
        dir: oldLang.isRtl ? 'auto' : 'ltr'
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: "draft"
      }, oldLang('Draft')), (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_10__.renderTextWithEntities)({
        text: draft.text?.text || '',
        entities: draft.text?.entities,
        isSimple: true,
        withTranslucentThumbs: true
      }));
    }
    if (!lastMessage) {
      return undefined;
    }
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.isExpiredMessage)(lastMessage)) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
        className: "last-message shared-canvas-container",
        dir: oldLang.isRtl ? 'auto' : 'ltr'
      }, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getExpiredMessageDescription)(oldLang, lastMessage));
    }
    if (isAction) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
        className: "last-message shared-canvas-container",
        dir: oldLang.isRtl ? 'auto' : 'ltr'
      }, (0,_common_helpers_renderActionMessageText__WEBPACK_IMPORTED_MODULE_8__.renderActionMessageText)(oldLang, lastMessage, lastMessageSender && !(0,_global_helpers_peers__WEBPACK_IMPORTED_MODULE_5__.isApiPeerChat)(lastMessageSender) ? lastMessageSender : undefined, lastMessageSender && (0,_global_helpers_peers__WEBPACK_IMPORTED_MODULE_5__.isApiPeerChat)(lastMessageSender) ? lastMessageSender : chat, actionTargetUsers, actionTargetMessage, actionTargetChatId, lastMessageTopic, {
        isEmbedded: true
      }, undefined, undefined));
    }
    const senderName = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageSenderName)(oldLang, chatId, lastMessageSender);
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
      className: "last-message shared-canvas-container",
      dir: oldLang.isRtl ? 'auto' : 'ltr'
    }, senderName && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "sender-name"
    }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_9__["default"])(senderName)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: "colon"
    }, ":")), !isSavedDialog && lastMessage.forwardInfo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__["default"], {
      name: "share-filled",
      className: "chat-prefix-icon"
    }), lastMessage.replyInfo?.type === 'story' && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__["default"], {
      name: "story-reply",
      className: "chat-prefix-icon"
    }), renderSummary(lastMessage, observeIntersection, mediaBlobUrl || mediaThumbnail, isRoundVideo));
  }, [actionTargetChatId, actionTargetMessage, actionTargetUsers, chat, chatId, draft, isAction, isRoundVideo, isTopic, oldLang, lastMessage, lastMessageSender, lastMessageTopic, mediaBlobUrl, mediaThumbnail, observeIntersection, typingStatus, isSavedDialog, isPreview]);
  function renderSubtitle() {
    if (chat?.isForum && !isTopic) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_ChatForumLastMessage__WEBPACK_IMPORTED_MODULE_16__["default"], {
        chat: chat,
        renderLastMessage: renderLastMessageOrTyping,
        observeIntersection: observeIntersection,
        topics: topics
      });
    }
    return renderLastMessageOrTyping();
  }

  // Sets animation excess values when `orderDiff` changes and then resets excess values to animate
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const element = ref.current;
    if (!withInterfaceAnimations || !element) {
      return;
    }

    // TODO Refactor animation: create `useListAnimation` that owns `orderDiff` and `animationType`
    if (animationType === _useChatAnimationType__WEBPACK_IMPORTED_MODULE_11__.ChatAnimationTypes.Opacity) {
      element.style.opacity = '0';
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
        element.classList.add('animate-opacity');
        element.style.opacity = '1';
      });
    } else if (animationType === _useChatAnimationType__WEBPACK_IMPORTED_MODULE_11__.ChatAnimationTypes.Move) {
      element.style.transform = `translate3d(0, ${-orderDiff * _config__WEBPACK_IMPORTED_MODULE_2__.CHAT_HEIGHT_PX}px, 0)`;
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
        element.classList.add('animate-transform');
        element.style.transform = '';
      });
    } else {
      return;
    }
    setTimeout(() => {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
        element.classList.remove('animate-opacity', 'animate-transform');
        element.style.opacity = '';
        element.style.transform = '';
      });
    }, ANIMATION_DURATION + _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_END_DELAY);
  }, [withInterfaceAnimations, orderDiff, animationType]);
  return {
    renderSubtitle,
    ref
  };
}
function renderSummary(message, observeIntersection, blobUrl, isRoundVideo) {
  const messageSummary = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MessageSummary__WEBPACK_IMPORTED_MODULE_18__["default"], {
    message: message,
    noEmoji: Boolean(blobUrl),
    observeIntersectionForLoading: observeIntersection,
    inChatList: true
  });
  if (!blobUrl) {
    return messageSummary;
  }
  const isSpoiler = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageIsSpoiler)(message);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "media-preview"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: blobUrl,
    alt: "",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_7__["default"])('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler'),
    draggable: false
  }), (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMessageVideo)(message) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__["default"], {
    name: "play"
  }), messageSummary);
}

/***/ }),

/***/ "./src/components/left/main/hooks/useLeftHeaderButtonRtlForumTransition.ts":
/*!*********************************************************************************!*\
  !*** ./src/components/left/main/hooks/useLeftHeaderButtonRtlForumTransition.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useLeftHeaderButtonRtlForumTransition)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");



function useLeftHeaderButtonRtlForumTransition(shouldHideSearch) {
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__["default"])();
  const shouldDisableDropdownMenuTransitionRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(shouldHideSearch);
  const prevShouldHideSearch = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_2__["default"])(shouldHideSearch);
  function handleDropdownMenuTransitionEnd() {
    shouldDisableDropdownMenuTransitionRef.current = Boolean(shouldHideSearch);
    forceUpdate();
  }
  if (shouldHideSearch === false && prevShouldHideSearch !== shouldHideSearch) {
    shouldDisableDropdownMenuTransitionRef.current = false;
  }
  return {
    shouldDisableDropdownMenuTransitionRef,
    handleDropdownMenuTransitionEnd
  };
}

/***/ }),

/***/ "./src/components/left/main/hooks/useOrderDiff.ts":
/*!********************************************************!*\
  !*** ./src/components/left/main/hooks/useOrderDiff.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useOrderDiff)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _useChatAnimationType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useChatAnimationType */ "./src/components/left/main/hooks/useChatAnimationType.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");




function useOrderDiff(orderedIds, key) {
  const orderById = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!orderedIds) {
      return undefined;
    }
    return orderedIds.reduce((acc, id, i) => {
      acc[id] = i;
      return acc;
    }, {});
  }, [orderedIds]);
  const prevOrderById = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_3__["default"])(orderById);
  const prevChatId = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_3__["default"])(key);
  const orderDiffById = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!orderById || !prevOrderById || key !== prevChatId) {
      return {};
    }
    return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_1__.mapValues)(orderById, (order, id) => {
      return prevOrderById[id] !== undefined ? order - prevOrderById[id] : -Infinity;
    });
  }, [key, orderById, prevChatId, prevOrderById]);
  const getAnimationType = (0,_useChatAnimationType__WEBPACK_IMPORTED_MODULE_2__.useChatAnimationType)(orderDiffById);
  return {
    orderDiffById,
    getAnimationType
  };
}

/***/ }),

/***/ "./src/components/left/main/hooks/useTopicContextActions.ts":
/*!******************************************************************!*\
  !*** ./src/components/left/main/hooks/useTopicContextActions.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useTopicContextActions)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");






function useTopicContextActions({
  topic,
  chat,
  wasOpened,
  canDelete,
  handleDelete,
  handleMute
}) {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const {
      isPinned,
      isMuted,
      isClosed,
      id: topicId
    } = topic;
    const chatId = chat.id;
    const {
      editTopic,
      toggleTopicPinned,
      markTopicRead,
      updateTopicMutedState,
      openChatInNewTab
    } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
    const canToggleClosed = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getCanManageTopic)(chat, topic);
    const canTogglePinned = chat.isCreator || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getHasAdminRight)(chat, 'manageTopics');
    const actionOpenInNewTab = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_OPEN_IN_NEW_TAB_SUPPORTED && {
      title: 'Open in new tab',
      icon: 'open-in-new-tab',
      handler: () => {
        openChatInNewTab({
          chatId: chat.id,
          threadId: topicId
        });
      }
    };
    const actionUnreadMark = topic.unreadCount || !wasOpened ? {
      title: lang('MarkAsRead'),
      icon: 'readchats',
      handler: () => {
        markTopicRead({
          chatId,
          topicId
        });
      }
    } : undefined;
    const actionPin = canTogglePinned ? isPinned ? {
      title: lang('UnpinFromTop'),
      icon: 'unpin',
      handler: () => toggleTopicPinned({
        chatId,
        topicId,
        isPinned: false
      })
    } : {
      title: lang('PinToTop'),
      icon: 'pin',
      handler: () => toggleTopicPinned({
        chatId,
        topicId,
        isPinned: true
      })
    } : undefined;
    const actionMute = chat.isMuted && isMuted !== false || isMuted === true ? {
      title: lang('ChatList.Unmute'),
      icon: 'unmute',
      handler: () => updateTopicMutedState({
        chatId,
        topicId,
        isMuted: false
      })
    } : {
      title: `${lang('ChatList.Mute')}...`,
      icon: 'mute',
      handler: handleMute
    };
    const actionCloseTopic = canToggleClosed ? isClosed ? {
      title: lang('lng_forum_topic_reopen'),
      icon: 'reopen-topic',
      handler: () => editTopic({
        chatId,
        topicId,
        isClosed: false
      })
    } : {
      title: lang('lng_forum_topic_close'),
      icon: 'close-topic',
      handler: () => editTopic({
        chatId,
        topicId,
        isClosed: true
      })
    } : undefined;
    const actionDelete = canDelete ? {
      title: lang('lng_forum_topic_delete'),
      icon: 'delete',
      destructive: true,
      handler: handleDelete
    } : undefined;
    return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_3__.compact)([actionOpenInNewTab, actionPin, actionUnreadMark, actionMute, actionCloseTopic, actionDelete]);
  }, [topic, chat, wasOpened, lang, canDelete, handleDelete, handleMute]);
}

/***/ }),

/***/ "./src/components/left/search/helpers/getSenderName.ts":
/*!*************************************************************!*\
  !*** ./src/components/left/search/helpers/getSenderName.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSenderName: () => (/* binding */ getSenderName)
/* harmony export */ });
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");

function getSenderName(lang, message, chatsById, usersById) {
  const {
    senderId
  } = message;
  if (!senderId) {
    return undefined;
  }
  const sender = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.isUserId)(senderId) ? usersById[senderId] : chatsById[senderId];
  let senderName = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.getPeerTitle)(lang, sender);
  const chat = chatsById[message.chatId];
  if (chat) {
    if ('isSelf' in sender && sender.isSelf) {
      senderName = `${lang('FromYou')} → ${(0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.getChatTitle)(lang, chat)}`;
    } else if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.isChatGroup)(chat)) {
      senderName += ` → ${(0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.getChatTitle)(lang, chat)}`;
    }
  }
  return senderName;
}

/***/ }),

/***/ "./src/components/main/visualEffects/SnapEffectContainer.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/main/visualEffects/SnapEffectContainer.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   animateSnap: () => (/* binding */ animateSnap),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_element_jsxToHtml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/element/jsxToHtml */ "./src/util/element/jsxToHtml.ts");
/* harmony import */ var _util_generateUniqueId__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/generateUniqueId */ "./src/util/generateUniqueId.ts");
/* harmony import */ var _SnapEffectContainer_module_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SnapEffectContainer.module.scss */ "./src/components/main/visualEffects/SnapEffectContainer.module.scss");







const VISIBLITY_MARGIN = 50;
const DURATION = 1000;
const SnapEffectContainer = () => {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _SnapEffectContainer_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].root,
    id: _config__WEBPACK_IMPORTED_MODULE_2__.SNAP_EFFECT_CONTAINER_ID
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(SnapEffectContainer));
function animateSnap(element) {
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
  const canPlayEffect = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCanAnimateSnapEffect)(global);
  if (!canPlayEffect) return false;
  // Get element current fixed position on screen
  const rect = element.getBoundingClientRect();
  const x = rect.left + window.scrollX;
  const y = rect.top + window.scrollY;
  const width = rect.width;
  const height = rect.height;

  // Check for visibility
  if (x + width + VISIBLITY_MARGIN < 0 || x - VISIBLITY_MARGIN > window.innerWidth || y + height + VISIBLITY_MARGIN < 0 || y - VISIBLITY_MARGIN > window.innerHeight) {
    return false;
  }
  const seed = Math.floor(Date.now() / 1000);
  const filterId = `${_config__WEBPACK_IMPORTED_MODULE_2__.SNAP_EFFECT_ID}-${(0,_util_generateUniqueId__WEBPACK_IMPORTED_MODULE_5__["default"])()}`;
  const component = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: _SnapEffectContainer_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghost,
    width: width,
    height: height,
    style: `left: ${x}px; top: ${y}px;`,
    viewBox: `0 0 ${width} ${height}`
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("defs", null, createFilter(filterId, Math.min(width, height), seed)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("g", {
    filter: `url(#${filterId})`
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("foreignObject", {
    className: _SnapEffectContainer_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].elementContainer,
    width: width,
    height: height
  })));
  const svg = (0,_util_element_jsxToHtml__WEBPACK_IMPORTED_MODULE_4__["default"])(component)[0];
  const foreignObject = svg.querySelector('foreignObject');
  const computedStyle = window.getComputedStyle(element);
  const clone = element.cloneNode(true);
  Array.from(computedStyle).forEach(key => clone.style.setProperty(key, computedStyle.getPropertyValue(key), 'important'));
  foreignObject.appendChild(clone);
  const snapContainer = document.getElementById(_config__WEBPACK_IMPORTED_MODULE_2__.SNAP_EFFECT_CONTAINER_ID);
  snapContainer.appendChild(svg);
  svg.addEventListener('animationend', () => {
    snapContainer.removeChild(svg);
  }, {
    once: true
  });
  return true;
}
function createFilter(id, smallestSide, baseSeed = 42) {
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("filter", {
    xmlns: _config__WEBPACK_IMPORTED_MODULE_2__.SVG_NAMESPACE,
    id: id,
    x: "-150%",
    y: "-150%",
    width: "400%",
    height: "400%",
    "color-interpolation-filters": "sRGB"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feTurbulence", {
    type: "fractalNoise",
    baseFrequency: "0.5",
    numOctaves: "1",
    result: "dustNoise",
    seed: baseSeed
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feComponentTransfer", {
    in: "dustNoise",
    result: "dustNoiseMask"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feFuncA", {
    type: "linear",
    slope: "5",
    intercept: "0"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("animate", {
    attributeName: "slope",
    values: "5; 2; 1; 0",
    dur: `${DURATION}ms`,
    fill: "freeze"
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feComposite", {
    in: "SourceGraphic",
    in2: "dustNoiseMask",
    operator: "in",
    result: "dustySource"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feTurbulence", {
    type: "fractalNoise",
    baseFrequency: "0.015",
    numOctaves: "1",
    result: "displacementNoise1",
    seed: baseSeed + 1
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feTurbulence", {
    type: "fractalNoise",
    baseFrequency: "1",
    numOctaves: "2",
    result: "displacementNoise2",
    seed: baseSeed + 2
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feMerge", {
    result: "combinedNoise"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feMergeNode", {
    in: "displacementNoise1"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feMergeNode", {
    in: "displacementNoise2"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("feDisplacementMap", {
    in: "dustySource",
    in2: "combinedNoise",
    scale: "0",
    xChannelSelector: "R",
    yChannelSelector: "G"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("animate", {
    attributeName: "scale",
    values: `0; ${smallestSide * 3}`,
    dur: `${DURATION}ms`,
    fill: "freeze"
  })));
}

/***/ }),

/***/ "./src/components/middle/HeaderActions.tsx":
/*!*************************************************!*\
  !*** ./src/components/middle/HeaderActions.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useHotkeys */ "./src/hooks/useHotkeys.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/DropdownMenu */ "./src/components/ui/DropdownMenu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ui_MenuSeparator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ui/MenuSeparator */ "./src/components/ui/MenuSeparator.tsx");
/* harmony import */ var _HeaderMenuContainer_async__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./HeaderMenuContainer.async */ "./src/components/middle/HeaderMenuContainer.async.tsx");

















// Chrome breaks layout when focusing input during transition
const SEARCH_FOCUS_DELAY_MS = 320;
const HeaderActions = ({
  chatId,
  threadId,
  noMenu,
  isMobile,
  isChannel,
  canStartBot,
  canRestartBot,
  canUnblock,
  canSubscribe,
  canSearch,
  canCall,
  canMute,
  canViewStatistics,
  canViewMonetization,
  canViewBoosts,
  canShowBoostModal,
  canLeave,
  canEnterVoiceChat,
  canCreateVoiceChat,
  pendingJoinRequests,
  isRightColumnShown,
  isForForum,
  canExpandActions,
  shouldJoinToSend,
  shouldSendJoinRequest,
  noAnimation,
  canTranslate,
  isTranslating,
  translationLanguage,
  language,
  detectedChatLanguage,
  doNotTranslate,
  onTopicSearch
}) => {
  const {
    joinChannel,
    sendBotCommand,
    openMiddleSearch,
    restartBot,
    requestMasterAndRequestCall,
    requestNextManagementScreen,
    showNotification,
    openChat,
    requestChatTranslation,
    togglePeerTranslations,
    openChatLanguageModal,
    setSettingOption,
    unblockUser,
    setViewForumAsMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const menuButtonRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const [isMenuOpen, setIsMenuOpen] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [menuAnchor, setMenuAnchor] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const handleHeaderMenuOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    setIsMenuOpen(true);
    const rect = menuButtonRef.current.getBoundingClientRect();
    setMenuAnchor({
      x: rect.right,
      y: rect.bottom
    });
  });
  const handleHeaderMenuClose = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    setIsMenuOpen(false);
  });
  const handleHeaderMenuHide = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    setMenuAnchor(undefined);
  });
  const handleSubscribeClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    joinChannel({
      chatId
    });
    if (shouldSendJoinRequest) {
      showNotification({
        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription')
      });
    }
  });
  const handleStartBot = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    sendBotCommand({
      command: '/start'
    });
  });
  const handleRestartBot = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    restartBot({
      chatId
    });
  });
  const handleUnblock = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    unblockUser({
      userId: chatId
    });
  });
  const handleTranslateClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    if (isTranslating) {
      requestChatTranslation({
        chatId,
        toLanguageCode: undefined
      });
      return;
    }
    requestChatTranslation({
      chatId,
      toLanguageCode: translationLanguage
    });
  });
  const handleJoinRequestsClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    requestNextManagementScreen({
      screen: _types__WEBPACK_IMPORTED_MODULE_3__.ManagementScreens.JoinRequests
    });
  });
  const handleSearchClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    if (isForForum) {
      onTopicSearch?.();
      return;
    }
    openMiddleSearch();
    if (isMobile) {
      // iOS requires synchronous focus on user event.
      setFocusInSearchInput();
    } else if (noAnimation) {
      // The second RAF is necessary because Teact must update the state and render the async component
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestNextMutation)(setFocusInSearchInput);
      });
    } else {
      setTimeout(setFocusInSearchInput, SEARCH_FOCUS_DELAY_MS);
    }
  });
  const handleAsMessagesClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    openChat({
      id: chatId
    });
    setViewForumAsMessages({
      chatId,
      isEnabled: true
    });
  });
  const handleRequestCall = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    requestMasterAndRequestCall({
      userId: chatId
    });
  });
  const handleHotkeySearchClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(e => {
    if (!canSearch || !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_APP || e.shiftKey) {
      return;
    }
    e.preventDefault();
    handleSearchClick();
  });
  const getTextWithLanguage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])((langKey, langCode) => {
    const simplified = langCode.split('-')[0];
    const translationKey = `TranslateLanguage${simplified.toUpperCase()}`;
    const name = lang(translationKey);
    if (name !== translationKey) {
      return lang(langKey, name);
    }
    const translatedNames = new Intl.DisplayNames([language], {
      type: 'language'
    });
    const translatedName = translatedNames.of(langCode);
    return lang(`${langKey}Other`, translatedName);
  });
  const buttonText = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (isTranslating) return lang('ShowOriginalButton');
    return getTextWithLanguage('TranslateToButton', translationLanguage);
  }, [translationLanguage, getTextWithLanguage, isTranslating, lang]);
  const doNotTranslateText = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!detectedChatLanguage) return undefined;
    return getTextWithLanguage('DoNotTranslateLanguage', detectedChatLanguage);
  }, [getTextWithLanguage, detectedChatLanguage]);
  const handleHide = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    togglePeerTranslations({
      chatId,
      isEnabled: false
    });
    requestChatTranslation({
      chatId,
      toLanguageCode: undefined
    });
  });
  const handleChangeLanguage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    openChatLanguageModal({
      chatId
    });
  });
  const handleDoNotTranslate = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    if (!detectedChatLanguage) return;
    setSettingOption({
      doNotTranslate: [...doNotTranslate, detectedChatLanguage]
    });
    requestChatTranslation({
      chatId,
      toLanguageCode: undefined
    });
    showNotification({
      message: getTextWithLanguage('AddedToDoNotTranslate', detectedChatLanguage)
    });
  });
  (0,_hooks_useHotkeys__WEBPACK_IMPORTED_MODULE_8__.useHotkeys)((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    'Mod+F': handleHotkeySearchClick
  }), []));
  const MoreMenuButton = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return ({
      onTrigger,
      isOpen
    }) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
      round: true,
      ripple: isRightColumnShown,
      color: "translucent",
      size: "smaller",
      className: isOpen ? 'active' : '',
      onClick: onTrigger,
      ariaLabel: lang('TranslateMessage')
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
      name: "language"
    }));
  }, [isRightColumnShown, lang]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "HeaderActions"
  }, !isForForum && canTranslate && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_DropdownMenu__WEBPACK_IMPORTED_MODULE_13__["default"], {
    className: "stickers-more-menu with-menu-transitions",
    trigger: MoreMenuButton,
    positionX: "right"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "language",
    onClick: handleTranslateClick
  }, buttonText), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "replace",
    onClick: handleChangeLanguage
  }, lang('Chat.Translate.Menu.To')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuSeparator__WEBPACK_IMPORTED_MODULE_15__["default"], null), detectedChatLanguage && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "hand-stop",
    onClick: handleDoNotTranslate
  }, doNotTranslateText), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_14__["default"], {
    icon: "close-circle",
    onClick: handleHide
  }, lang('Hide'))), !isMobile && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    size: "tiny",
    ripple: true,
    fluid: true,
    onClick: handleSubscribeClick
  }, lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')), canExpandActions && shouldSendJoinRequest && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    size: "tiny",
    ripple: true,
    fluid: true,
    onClick: handleSubscribeClick
  }, lang('ChannelJoinRequest')), canExpandActions && canStartBot && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    size: "tiny",
    ripple: true,
    fluid: true,
    onClick: handleStartBot
  }, lang('BotStart')), canExpandActions && canRestartBot && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    size: "tiny",
    ripple: true,
    fluid: true,
    onClick: handleRestartBot
  }, lang('BotRestart')), canExpandActions && canUnblock && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    size: "tiny",
    ripple: true,
    fluid: true,
    onClick: handleUnblock
  }, lang('Unblock')), canSearch && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    round: true,
    ripple: isRightColumnShown,
    color: "translucent",
    size: "smaller",
    onClick: handleSearchClick,
    ariaLabel: lang('Conversation.SearchPlaceholder')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "search"
  })), canCall && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    round: true,
    color: "translucent",
    size: "smaller",
    onClick: handleRequestCall,
    ariaLabel: "Call"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "phone"
  }))), !isForForum && Boolean(pendingJoinRequests) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    round: true,
    className: "badge-button",
    ripple: isRightColumnShown,
    color: "translucent",
    size: "smaller",
    onClick: handleJoinRequestsClick,
    ariaLabel: isChannel ? lang('SubscribeRequests') : lang('MemberRequests')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "user"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "badge"
  }, pendingJoinRequests)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_12__["default"], {
    ref: menuButtonRef,
    className: isMenuOpen ? 'active' : '',
    round: true,
    ripple: !isMobile,
    size: "smaller",
    color: "translucent",
    disabled: noMenu,
    ariaLabel: "More actions",
    onClick: handleHeaderMenuOpen
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "more"
  })), menuAnchor && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_HeaderMenuContainer_async__WEBPACK_IMPORTED_MODULE_16__["default"], {
    chatId: chatId,
    threadId: threadId,
    isOpen: isMenuOpen,
    anchor: menuAnchor,
    withExtraActions: isMobile || !canExpandActions,
    isChannel: isChannel,
    canStartBot: canStartBot,
    canSubscribe: canSubscribe,
    canSearch: canSearch,
    canCall: canCall,
    canMute: canMute,
    canViewStatistics: canViewStatistics,
    canViewBoosts: canViewBoosts,
    canViewMonetization: canViewMonetization,
    canShowBoostModal: canShowBoostModal,
    canLeave: canLeave,
    canEnterVoiceChat: canEnterVoiceChat,
    canCreateVoiceChat: canCreateVoiceChat,
    pendingJoinRequests: pendingJoinRequests,
    onJoinRequestsClick: handleJoinRequestsClick,
    withForumActions: isForForum,
    onSubscribeChannel: handleSubscribeClick,
    onSearchClick: handleSearchClick,
    onAsMessagesClick: handleAsMessagesClick,
    onClose: handleHeaderMenuClose,
    onCloseAnimationEnd: handleHeaderMenuHide
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId,
  messageListType,
  isMobile
}) => {
  const chat = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChat)(global, chatId);
  const isChannel = Boolean(chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatChannel)(chat));
  const isSuperGroup = Boolean(chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatSuperGroup)(chat));
  const language = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectLanguageCode)(global);
  const translationLanguage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectTranslationLanguage)(global);
  const isPrivate = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chatId);
  const {
    doNotTranslate
  } = global.settings.byKey;
  if (!chat || chat.isRestricted || (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsInSelectMode)(global)) {
    return {
      noMenu: true,
      language,
      translationLanguage,
      doNotTranslate
    };
  }
  const bot = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectBot)(global, chatId);
  const chatFullInfo = !isPrivate ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectChatFullInfo)(global, chatId) : undefined;
  const userFullInfo = isPrivate ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectUserFullInfo)(global, chatId) : undefined;
  const fullInfo = chatFullInfo || userFullInfo;
  const isChatWithSelf = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsChatWithSelf)(global, chatId);
  const isMainThread = messageListType === 'thread' && threadId === _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID;
  const isDiscussionThread = messageListType === 'thread' && threadId !== _api_types__WEBPACK_IMPORTED_MODULE_2__.MAIN_THREAD_ID;
  const isRightColumnShown = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsRightColumnShown)(global, isMobile);
  const isSavedDialog = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getIsSavedDialog)(chatId, threadId, global.currentUserId);
  const isUserBlocked = isPrivate ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsUserBlocked)(global, chatId) : false;
  const canRestartBot = Boolean(bot && isUserBlocked);
  const canStartBot = !canRestartBot && Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectIsChatBotNotStarted)(global, chatId));
  const canUnblock = isUserBlocked && !bot;
  const canSubscribe = Boolean((isMainThread || chat.isForum) && (isChannel || isSuperGroup) && chat.isNotJoined);
  const canSearch = isMainThread || isDiscussionThread;
  const canCall = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.ARE_CALLS_SUPPORTED && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isUserId)(chat.id) && !isChatWithSelf && !bot && !chat.isSupport && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isAnonymousForwardsChat)(chat.id);
  const canMute = isMainThread && !isChatWithSelf && !canSubscribe;
  const canLeave = isSavedDialog || isMainThread && !canSubscribe;
  const canEnterVoiceChat = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.ARE_CALLS_SUPPORTED && isMainThread && chat.isCallActive;
  const canCreateVoiceChat = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.ARE_CALLS_SUPPORTED && isMainThread && !chat.isCallActive && (chat.adminRights?.manageCall || chat.isCreator && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.isChatBasicGroup)(chat));
  const canViewStatistics = isMainThread && chatFullInfo?.canViewStatistics;
  const canViewMonetization = isMainThread && chatFullInfo?.canViewMonetization;
  const canViewBoosts = isMainThread && (isSuperGroup || isChannel) && (canViewStatistics || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.getHasAdminRight)(chat, 'postStories'));
  const canShowBoostModal = !canViewBoosts && (isSuperGroup || isChannel);
  const pendingJoinRequests = isMainThread ? chatFullInfo?.requestsPending : undefined;
  const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);
  const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);
  const noAnimation = !(0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanAnimateInterface)(global);
  const isTranslating = Boolean((0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectRequestedChatTranslationLanguage)(global, chatId));
  const canTranslate = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_6__.selectCanTranslateChat)(global, chatId) && !fullInfo?.isTranslationDisabled;
  return {
    noMenu: false,
    isChannel,
    isRightColumnShown,
    canStartBot,
    canRestartBot,
    canSubscribe,
    canSearch,
    canCall,
    canMute,
    canViewStatistics,
    canViewMonetization,
    canViewBoosts,
    canShowBoostModal,
    canLeave,
    canEnterVoiceChat,
    canCreateVoiceChat,
    pendingJoinRequests,
    shouldJoinToSend,
    shouldSendJoinRequest,
    noAnimation,
    canTranslate,
    isTranslating,
    translationLanguage,
    language,
    doNotTranslate,
    detectedChatLanguage: chat.detectedLanguage,
    canUnblock
  };
})(HeaderActions)));
function setFocusInSearchInput() {
  const searchInput = document.querySelector('#MiddleSearch input');
  searchInput?.focus();
}

/***/ }),

/***/ "./src/components/middle/HeaderMenuContainer.async.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/HeaderMenuContainer.async.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const HeaderMenuContainerAsync = props => {
  const {
    isOpen
  } = props;
  const HeaderMenuContainer = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'HeaderMenuContainer', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return HeaderMenuContainer ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(HeaderMenuContainer, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HeaderMenuContainerAsync);

/***/ }),

/***/ "./src/components/middle/composer/AttachBotIcon.tsx":
/*!**********************************************************!*\
  !*** ./src/components/middle/composer/AttachBotIcon.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _AttachBotIcon_module_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AttachBotIcon.module.scss */ "./src/components/middle/composer/AttachBotIcon.module.scss");







const ADDITIONAL_STROKE_WIDTH = '0.5px';
const DARK_THEME_COLOR = 'rgb(170, 170, 170)';
const LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';
const COLOR_REPLACE_PATTERN = /#fff/gi;
const AttachBotIcon = ({
  icon,
  theme
}) => {
  const {
    isTouchScreen
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const mediaData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getDocumentMediaHash)(icon, 'full'), false, _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMediaFormat.Text);
  const iconSvg = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!mediaData) return '';
    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;
    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);
    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');
    doc.querySelectorAll('path').forEach(path => {
      path.style.stroke = color;
      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;
    });
    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;
  }, [mediaData, theme]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("i", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_AttachBotIcon_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].root, 'icon', !isTouchScreen && _AttachBotIcon_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].compact)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: iconSvg,
    alt: "",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_AttachBotIcon_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].image, !isTouchScreen && _AttachBotIcon_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].compact),
    draggable: false
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(AttachBotIcon));

/***/ }),

/***/ "./src/components/middle/composer/AttachBotItem.tsx":
/*!**********************************************************!*\
  !*** ./src/components/middle/composer/AttachBotItem.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _AttachBotIcon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AttachBotIcon */ "./src/components/middle/composer/AttachBotIcon.tsx");








const AttachBotItem = ({
  bot,
  theme,
  chatId,
  threadId,
  isInSideMenu,
  canShowNew,
  onMenuOpened,
  onMenuClosed
}) => {
  const {
    callAttachBot,
    toggleAttachBot
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const icon = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return bot.icons.find(({
      name
    }) => name === 'default_static')?.document;
  }, [bot.icons]);
  const [isMenuOpen, openMenu, closeMenu] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const [menuPosition, setMenuPosition] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const handleContextMenu = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(e => {
    e.preventDefault();
    const rect = e.currentTarget.getBoundingClientRect();
    setMenuPosition({
      x: rect.right,
      y: rect.bottom
    });
    onMenuOpened();
    openMenu();
  });
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    if (isInSideMenu) {
      callAttachBot({
        bot,
        isFromSideMenu: true
      });
    } else {
      callAttachBot({
        bot,
        chatId: chatId,
        threadId
      });
    }
  });
  const handleCloseMenu = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    closeMenu();
    onMenuClosed();
  });
  const handleCloseAnimationEnd = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    setMenuPosition(undefined);
  });
  const handleRemoveBot = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    toggleAttachBot({
      botId: bot.id,
      isEnabled: false
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_6__["default"], {
    key: bot.id,
    customIcon: icon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AttachBotIcon__WEBPACK_IMPORTED_MODULE_7__["default"], {
      icon: icon,
      theme: theme
    }),
    icon: !icon ? 'bots' : undefined,
    onClick: handleClick,
    onContextMenu: handleContextMenu
  }, bot.shortName, canShowNew && bot.isDisclaimerNeeded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "menu-item-badge"
  }, lang('New')), menuPosition && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_5__["default"], {
    isOpen: isMenuOpen,
    positionX: "right",
    style: `left: ${menuPosition.x}px;top: ${menuPosition.y}px;`,
    className: "bot-attach-context-menu",
    autoClose: true,
    withPortal: true,
    onClose: handleCloseMenu,
    onCloseAnimationEnd: handleCloseAnimationEnd
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_6__["default"], {
    icon: "stop",
    destructive: true,
    onClick: handleRemoveBot
  }, lang('WebApp.RemoveBot'))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(AttachBotItem));

/***/ }),

/***/ "./src/components/middle/composer/AttachMenu.tsx":
/*!*******************************************************!*\
  !*** ./src/components/middle/composer/AttachMenu.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_debugConsole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/debugConsole */ "./src/util/debugConsole.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/files */ "./src/util/files.ts");
/* harmony import */ var _util_systemFilesDialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/systemFilesDialog */ "./src/util/systemFilesDialog.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMouseInside__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useMouseInside */ "./src/hooks/useMouseInside.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../ui/ResponsiveHoverButton */ "./src/components/ui/ResponsiveHoverButton.tsx");
/* harmony import */ var _AttachBotItem__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./AttachBotItem */ "./src/components/middle/composer/AttachBotItem.tsx");
/* harmony import */ var _AttachMenu_scss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./AttachMenu.scss */ "./src/components/middle/composer/AttachMenu.scss");

















const AttachMenu = ({
  chatId,
  threadId,
  isButtonVisible,
  canAttachMedia,
  canAttachPolls,
  canSendPhotos,
  canSendVideos,
  canSendDocuments,
  canSendAudios,
  attachBots,
  peerType,
  isScheduled,
  theme,
  shouldCollectDebugLogs,
  onFileSelect,
  onMenuOpen,
  onMenuClose,
  onPollCreate,
  canEditMedia,
  editingMessage
}) => {
  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const [handleMouseEnter, handleMouseLeave, markMouseInside] = (0,_hooks_useMouseInside__WEBPACK_IMPORTED_MODULE_9__["default"])(isAttachMenuOpen, closeAttachMenu);
  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;
  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;
  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const isMenuOpen = isAttachMenuOpen || isAttachmentBotMenuOpen;
  const isPhotoOrVideo = editingMessage && editingMessage?.groupedId && Boolean((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessagePhoto)(editingMessage) || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageWebPagePhoto)(editingMessage) || Boolean((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageVideo)(editingMessage) || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageWebPageVideo)(editingMessage)));
  const isFile = editingMessage && editingMessage?.groupedId && Boolean((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageAudio)(editingMessage) || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageVoice)(editingMessage) || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMessageDocument)(editingMessage));
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isAttachMenuOpen) {
      markMouseInside();
    }
  }, [isAttachMenuOpen, markMouseInside]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isMenuOpen) {
      onMenuOpen();
    } else {
      onMenuClose();
    }
  }, [isMenuOpen, onMenuClose, onMenuOpen]);
  const handleToggleAttachMenu = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    if (isAttachMenuOpen) {
      closeAttachMenu();
    } else {
      openAttachMenu();
    }
  });
  const handleFileSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])((e, shouldSuggestCompression) => {
    const {
      files
    } = e.target;
    const validatedFiles = (0,_util_files__WEBPACK_IMPORTED_MODULE_4__.validateFiles)(files);
    if (validatedFiles?.length) {
      onFileSelect(validatedFiles, shouldSuggestCompression);
    }
  });
  const handleQuickSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    (0,_util_systemFilesDialog__WEBPACK_IMPORTED_MODULE_5__.openSystemFilesDialog)(Array.from(canSendVideoAndPhoto ? _config__WEBPACK_IMPORTED_MODULE_1__.CONTENT_TYPES_WITH_PREVIEW : canSendPhotos ? _config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_PHOTO_CONTENT_TYPES : _config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_VIDEO_CONTENT_TYPES).join(','), e => handleFileSelect(e, true));
  });
  const handleDocumentSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    (0,_util_systemFilesDialog__WEBPACK_IMPORTED_MODULE_5__.openSystemFilesDialog)(!canSendDocuments && canSendAudios ? Array.from(_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : '*', e => handleFileSelect(e, false));
  });
  const handleSendLogs = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    const file = new File([(0,_util_debugConsole__WEBPACK_IMPORTED_MODULE_3__.getDebugLogs)()], _config__WEBPACK_IMPORTED_MODULE_1__.DEBUG_LOG_FILENAME, {
      type: 'text/plain'
    });
    onFileSelect([file]);
  });
  const bots = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return attachBots ? Object.values(attachBots).filter(bot => {
      if (!peerType || !bot.isForAttachMenu) return false;
      if (peerType === 'bots' && bot.id === chatId && bot.attachMenuPeerTypes.includes('self')) {
        return true;
      }
      return bot.attachMenuPeerTypes.includes(peerType);
    }) : undefined;
  }, [attachBots, chatId, peerType]);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_10__["default"])();
  if (!isButtonVisible) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "AttachMenu"
  }, editingMessage && canEditMedia ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_14__["default"], {
    id: "replace-menu-button",
    className: isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button',
    round: true,
    color: "translucent",
    onActivate: handleToggleAttachMenu,
    ariaLabel: "Replace an attachment",
    ariaControls: "replace-menu-controls",
    hasPopup: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "replace"
  })) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_14__["default"], {
    id: "attach-menu-button",
    disabled: Boolean(editingMessage),
    className: isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button',
    round: true,
    color: "translucent",
    onActivate: handleToggleAttachMenu,
    ariaLabel: "Add an attachment",
    ariaControls: "attach-menu-controls",
    hasPopup: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_11__["default"], {
    name: "attach"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_12__["default"], {
    id: "attach-menu-controls",
    isOpen: isMenuOpen,
    autoClose: true,
    positionX: "right",
    positionY: "bottom",
    onClose: closeAttachMenu,
    className: "AttachMenu--menu fluid",
    onCloseAnimationEnd: closeAttachMenu,
    onMouseEnter: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_TOUCH_ENV ? handleMouseEnter : undefined,
    onMouseLeave: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_TOUCH_ENV ? handleMouseLeave : undefined,
    noCloseOnBackdrop: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_TOUCH_ENV,
    ariaLabelledBy: "attach-menu-button"
  }, !canAttachMedia && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    className: "media-disabled",
    disabled: true
  }, "Posting media content is not allowed in this group."), canAttachMedia && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, canSendVideoOrPhoto && !isFile && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "photo",
    onClick: handleQuickSelect
  }, lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo' : canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video')), (canSendDocuments || canSendAudios) && !isPhotoOrVideo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "document",
    onClick: handleDocumentSelect
  }, lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')), canSendDocuments && shouldCollectDebugLogs && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "bug",
    onClick: handleSendLogs
  }, lang('DebugSendLogs'))), canAttachPolls && !editingMessage && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_13__["default"], {
    icon: "poll",
    onClick: onPollCreate
  }, lang('Poll')), !editingMessage && !canEditMedia && !isScheduled && bots?.map(bot => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_AttachBotItem__WEBPACK_IMPORTED_MODULE_15__["default"], {
    bot: bot,
    chatId: chatId,
    threadId: threadId,
    theme: theme,
    onMenuOpened: markAttachmentBotMenuOpen,
    onMenuClosed: unmarkAttachmentBotMenuOpen
  }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(AttachMenu));

/***/ }),

/***/ "./src/components/middle/composer/AttachmentModal.async.tsx":
/*!******************************************************************!*\
  !*** ./src/components/middle/composer/AttachmentModal.async.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const AttachmentModalAsync = props => {
  const {
    attachments
  } = props;
  const AttachmentModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'AttachmentModal', !attachments.length);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return AttachmentModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(AttachmentModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AttachmentModalAsync);

/***/ }),

/***/ "./src/components/middle/composer/BotCommandMenu.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/middle/composer/BotCommandMenu.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const BotCommandMenuAsync = props => {
  const {
    isOpen
  } = props;
  const BotCommandMenu = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'BotCommandMenu', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return BotCommandMenu ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(BotCommandMenu, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BotCommandMenuAsync);

/***/ }),

/***/ "./src/components/middle/composer/BotKeyboardMenu.tsx":
/*!************************************************************!*\
  !*** ./src/components/middle/composer/BotKeyboardMenu.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_renderKeyboardButtonText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/renderKeyboardButtonText */ "./src/components/middle/composer/helpers/renderKeyboardButtonText.tsx");
/* harmony import */ var _hooks_useMouseInside__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useMouseInside */ "./src/hooks/useMouseInside.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _BotKeyboardMenu_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./BotKeyboardMenu.scss */ "./src/components/middle/composer/BotKeyboardMenu.scss");










const BotKeyboardMenu = ({
  isOpen,
  message,
  onClose
}) => {
  const {
    clickBotInlineButton
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const [handleMouseEnter, handleMouseLeave] = (0,_hooks_useMouseInside__WEBPACK_IMPORTED_MODULE_5__["default"])(isOpen, onClose);
  const {
    isKeyboardSingleUse
  } = message || {};
  const buttonTexts = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const texts = [];
    message?.keyboardButtons.forEach(row => {
      texts.push(row.map(button => (0,_helpers_renderKeyboardButtonText__WEBPACK_IMPORTED_MODULE_4__["default"])(lang, button)));
    });
    return texts;
  }, [lang, message?.keyboardButtons]);
  if (!message || !message.keyboardButtons) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_8__["default"], {
    isOpen: isOpen,
    autoClose: isKeyboardSingleUse,
    positionX: "right",
    positionY: "bottom",
    onClose: onClose,
    className: "BotKeyboardMenu",
    onCloseAnimationEnd: onClose,
    onMouseEnter: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_TOUCH_ENV ? handleMouseEnter : undefined,
    onMouseLeave: !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_TOUCH_ENV ? handleMouseLeave : undefined,
    noCompact: true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "content custom-scroll"
  }, message.keyboardButtons.map((row, i) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "row"
  }, row.map((button, j) => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_7__["default"], {
    ripple: true,
    disabled: button.type === 'unsupported'
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => clickBotInlineButton({
      chatId: message.chatId,
      messageId: message.id,
      button
    })
  }, buttonTexts?.[i][j]))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  messageId
}) => {
  const {
    chatId
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectCurrentMessageList)(global) || {};
  if (!chatId) {
    return {};
  }
  return {
    message: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectChatMessage)(global, chatId, messageId)
  };
})(BotKeyboardMenu)));

/***/ }),

/***/ "./src/components/middle/composer/BotMenuButton.tsx":
/*!**********************************************************!*\
  !*** ./src/components/middle/composer/BotMenuButton.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");





const BotMenuButton = ({
  isOpen,
  onClick,
  text,
  isDisabled
}) => {
  // eslint-disable-next-line no-null/no-null
  const textRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const textEl = textRef.current;
    if (!textEl) return;
    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases

    const composerEl = textEl.closest('.Composer');
    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);
  }, [isOpen, text]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const textEl = textRef.current;
    if (!textEl) return undefined;
    const composerEl = textEl.closest('.Composer');
    return () => {
      composerEl.style.removeProperty('--bot-menu-text-width');
    };
  }, []);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_4__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('bot-menu', isOpen && 'open'),
    round: true,
    color: "translucent",
    disabled: isDisabled,
    onClick: onClick,
    ariaLabel: "Open bot command keyboard"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_3__["default"], {
    name: "webapp",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('bot-menu-icon', isOpen && 'open')
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    ref: textRef,
    className: "bot-menu-text"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_2__["default"])(text)));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(BotMenuButton));

/***/ }),

/***/ "./src/components/middle/composer/ChatCommandTooltip.async.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/middle/composer/ChatCommandTooltip.async.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const ChatCommandTooltipAsync = props => {
  const {
    isOpen
  } = props;
  const ChatCommandTooltip = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'ChatCommandTooltip', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return ChatCommandTooltip ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(ChatCommandTooltip, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatCommandTooltipAsync);

/***/ }),

/***/ "./src/components/middle/composer/ComposerEmbeddedMessage.tsx":
/*!********************************************************************!*\
  !*** ./src/components/middle/composer/ComposerEmbeddedMessage.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _common_helpers_peerColor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/helpers/peerColor */ "./src/components/common/helpers/peerColor.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _common_embedded_EmbeddedMessage__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../common/embedded/EmbeddedMessage */ "./src/components/common/embedded/EmbeddedMessage.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ui_MenuSeparator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../ui/MenuSeparator */ "./src/components/ui/MenuSeparator.tsx");
/* harmony import */ var _ComposerEmbeddedMessage_scss__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ComposerEmbeddedMessage.scss */ "./src/components/middle/composer/ComposerEmbeddedMessage.scss");




















const CLOSE_DURATION = 350;
const ComposerEmbeddedMessage = ({
  replyInfo,
  editingId,
  message,
  sender,
  shouldAnimate,
  forwardedMessagesCount,
  noAuthors,
  noCaptions,
  forwardsHaveCaptions,
  shouldForceShowEditing,
  isCurrentUserPremium,
  isContextMenuDisabled,
  isReplyToDiscussion,
  onClear,
  isInChangingRecipientMode,
  shouldPreventComposerAnimation,
  senderChat,
  chatId,
  currentUserId,
  isSenderChannel
}) => {
  const {
    resetDraftReplyInfo,
    updateDraftReplyInfo,
    setEditingId,
    focusMessage,
    changeRecipient,
    openChatOrTopicWithReplyInDraft,
    setForwardNoAuthors,
    setForwardNoCaptions,
    exitForwardMode,
    setShouldPreventComposerAnimation
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const isReplyToTopicStart = message?.content.action?.type === 'topicCreate';
  const isShowingReply = replyInfo && !shouldForceShowEditing;
  const isReplyWithQuote = Boolean(replyInfo?.quoteText);
  const isForwarding = Boolean(forwardedMessagesCount);
  const isShown = (() => {
    if (isInChangingRecipientMode) return false;
    if (message && (replyInfo || editingId)) return true;
    if (sender && isForwarding) return true;
    return false;
  })();
  const {
    shouldRender,
    transitionClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_12__["default"])(isShown && !isReplyToTopicStart && !isReplyToDiscussion, undefined, !shouldAnimate, undefined, !shouldAnimate, CLOSE_DURATION, !shouldAnimate);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (shouldPreventComposerAnimation) {
      setShouldPreventComposerAnimation({
        shouldPreventComposerAnimation: false
      });
    }
  });
  const clearEmbedded = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    if (editingId) {
      setEditingId({
        messageId: undefined
      });
    } else if (forwardedMessagesCount) {
      exitForwardMode();
    } else if (replyInfo && !shouldForceShowEditing) {
      resetDraftReplyInfo();
    }
    onClear?.();
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => isShown ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_5__["default"])(clearEmbedded) : undefined, [isShown, clearEmbedded]);
  const {
    isContextMenuOpen,
    contextMenuAnchor,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_7__["default"])(ref);
  const focusMessageFromDraft = () => {
    focusMessage({
      chatId: message.chatId,
      messageId: message.id,
      noForumTopicPanel: true
    });
  };
  const handleMessageClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(e => {
    handleContextMenu(e);
  });
  const handleClearClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(e => {
    e.stopPropagation();
    clearEmbedded();
    handleContextMenuHide();
  });
  const buildAutoCloseMenuItemHandler = action => {
    return () => {
      handleContextMenuClose();
      action();
    };
  };
  const handleForwardToAnotherChatClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(buildAutoCloseMenuItemHandler(changeRecipient));
  const handleShowMessageClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(buildAutoCloseMenuItemHandler(focusMessageFromDraft));
  const handleRemoveQuoteClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(buildAutoCloseMenuItemHandler(() => updateDraftReplyInfo({
    quoteText: undefined
  })));
  const handleChangeReplyRecipientClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(buildAutoCloseMenuItemHandler(changeRecipient));
  const handleReplyInSenderChat = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    handleContextMenuClose();
    if (!sender) return;
    openChatOrTopicWithReplyInDraft({
      chatId: sender.id
    });
  });
  const handleDoNotReplyClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(buildAutoCloseMenuItemHandler(clearEmbedded));
  const getTriggerElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => ref.current);
  const getRootElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => ref.current);
  const getMenuElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(() => ref.current.querySelector('.forward-context-menu .bubble'));
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!shouldRender) {
      handleContextMenuClose();
      handleContextMenuHide();
    }
  }, [handleContextMenuClose, handleContextMenuHide, shouldRender]);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('ComposerEmbeddedMessage', transitionClassNames);
  const renderingSender = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_8__["default"])(sender, true);
  const innerClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('ComposerEmbeddedMessage_inner', (0,_common_helpers_peerColor__WEBPACK_IMPORTED_MODULE_6__.getPeerColorClass)(renderingSender));
  const leftIcon = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (editingId) {
      return 'edit';
    }
    if (isForwarding) {
      return 'forward';
    }
    if (isShowingReply) {
      return 'reply';
    }
    return undefined;
  }, [editingId, isForwarding, isShowingReply]);
  const customText = forwardedMessagesCount && forwardedMessagesCount > 1 ? oldLang('ForwardedMessageCount', forwardedMessagesCount) : undefined;
  const strippedMessage = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;
    const strippedText = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.stripCustomEmoji)(message.content.text);
    return {
      ...message,
      content: {
        ...message.content,
        text: strippedText
      }
    };
  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);
  const renderingLeftIcon = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_8__["default"])(leftIcon, true);
  if (!shouldRender) {
    return undefined;
  }
  const canReplyInSenderChat = sender && !isSenderChannel && chatId !== sender.id && sender.id !== currentUserId;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: className,
    ref: ref,
    onContextMenu: handleContextMenu
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: innerClassName
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "embedded-left-icon",
    onClick: handleContextMenu
  }, renderingLeftIcon && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    name: renderingLeftIcon
  }), Boolean(replyInfo?.quoteText) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    name: "quote",
    className: "quote-reply"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_embedded_EmbeddedMessage__WEBPACK_IMPORTED_MODULE_13__.ClosableEmbeddedMessage, {
    isOpen: isShown,
    className: "inside-input",
    replyInfo: replyInfo,
    isInComposer: true,
    message: strippedMessage,
    sender: !noAuthors ? sender : undefined,
    customText: customText,
    title: editingId && !isShowingReply ? oldLang('EditMessage') : noAuthors ? oldLang('HiddenSendersNameDescription') : undefined,
    onClick: handleMessageClick,
    senderChat: senderChat
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_15__["default"], {
    className: "embedded-cancel",
    round: true,
    faded: true,
    color: "translucent",
    ariaLabel: oldLang('Cancel'),
    onClick: handleClearClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
    name: "close"
  })), (isShowingReply || isForwarding) && !isContextMenuDisabled && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_16__["default"], {
    isOpen: isContextMenuOpen,
    anchor: contextMenuAnchor,
    getTriggerElement: getTriggerElement,
    getRootElement: getRootElement,
    getMenuElement: getMenuElement,
    className: "forward-context-menu",
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide
  }, isForwarding && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: !noAuthors ? 'message-succeeded' : undefined,
    customIcon: noAuthors ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
      name: "placeholder"
    }) : undefined
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => setForwardNoAuthors({
      noAuthors: false
    })
  }, oldLang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: noAuthors ? 'message-succeeded' : undefined,
    customIcon: !noAuthors ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
      name: "placeholder"
    }) : undefined
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => setForwardNoAuthors({
      noAuthors: true
    })
  }, oldLang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')), forwardsHaveCaptions && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuSeparator__WEBPACK_IMPORTED_MODULE_18__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: !noCaptions ? 'message-succeeded' : undefined,
    customIcon: noCaptions ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
      name: "placeholder"
    }) : undefined
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => setForwardNoCaptions({
      noCaptions: false
    })
  }, oldLang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: noCaptions ? 'message-succeeded' : undefined,
    customIcon: !noCaptions ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_14__["default"], {
      name: "placeholder"
    }) : undefined
    // eslint-disable-next-line react/jsx-no-bind
    ,
    onClick: () => setForwardNoCaptions({
      noCaptions: true
    })
  }, oldLang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuSeparator__WEBPACK_IMPORTED_MODULE_18__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: "replace",
    onClick: handleForwardToAnotherChatClick
  }, oldLang('ForwardAnotherChat'))), isShowingReply && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: "show-message",
    onClick: handleShowMessageClick
  }, oldLang('Message.Context.Goto')), isReplyWithQuote && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: "remove-quote",
    onClick: handleRemoveQuoteClick
  }, oldLang('RemoveQuote')), canReplyInSenderChat && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: "user",
    onClick: handleReplyInSenderChat
  }, lang('ReplyInPrivateMessage')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: "replace",
    onClick: handleChangeReplyRecipientClick
  }, oldLang('ReplyToAnotherChat')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_17__["default"], {
    icon: "delete",
    onClick: handleDoNotReplyClick
  }, oldLang('DoNotReply'))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  shouldForceShowEditing,
  chatId,
  threadId,
  messageListType
}) => {
  const {
    forwardMessages: {
      fromChatId,
      toChatId,
      messageIds: forwardMessageIds,
      noAuthors,
      noCaptions
    },
    isShareMessageModalShown: isModalShown,
    shouldPreventComposerAnimation
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global);
  const editingId = messageListType === 'scheduled' ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectEditingScheduledId)(global, chatId) : (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectEditingId)(global, chatId, threadId);
  const shouldAnimate = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCanAnimateInterface)(global) && !shouldPreventComposerAnimation;
  const isForwarding = toChatId === chatId;
  const forwardedMessages = forwardMessageIds?.map(id => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatMessage)(global, fromChatId, id));
  const draft = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectDraft)(global, chatId, threadId);
  const replyInfo = draft?.replyInfo;
  const replyToPeerId = replyInfo?.replyToPeerId;
  const senderChat = replyToPeerId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChat)(global, replyToPeerId) : undefined;
  let message;
  if (editingId) {
    message = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectEditingMessage)(global, chatId, threadId, messageListType);
  } else if (isForwarding && forwardMessageIds.length === 1) {
    message = forwardedMessages?.[0];
  } else if (replyInfo && !shouldForceShowEditing) {
    message = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChatMessage)(global, replyInfo.replyToPeerId || chatId, replyInfo.replyToMsgId);
  }
  let sender;
  if (editingId && message) {
    sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectSender)(global, message);
  } else if (isForwarding) {
    if (message) {
      sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectForwardedSender)(global, message);
      if (!sender) {
        sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectSender)(global, message);
      }
    }
    if (!sender) {
      sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectPeer)(global, fromChatId);
    }
  } else if (replyInfo && message && !shouldForceShowEditing) {
    const {
      forwardInfo
    } = message;
    const isChatWithSelf = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsChatWithSelf)(global, chatId);
    if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {
      sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectForwardedSender)(global, message);
    }
    if (!sender && (!forwardInfo?.hiddenUserName || Boolean(replyInfo.quoteText))) {
      sender = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectSender)(global, message);
    }
  }
  const chat = sender && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectChat)(global, sender.id);
  const isSenderChannel = chat && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatChannel)(chat);
  const forwardsHaveCaptions = forwardedMessages?.some(forward => forward?.content.text && Object.keys(forward.content).length > 1);
  const isContextMenuDisabled = isForwarding && forwardMessageIds.length === 1 && Boolean(message?.content.storyData);
  const isReplyToDiscussion = replyInfo?.replyToMsgId === threadId && !replyInfo.replyToPeerId;
  return {
    replyInfo,
    editingId,
    message,
    sender,
    shouldAnimate,
    forwardedMessagesCount: isForwarding ? forwardMessageIds.length : undefined,
    noAuthors,
    noCaptions,
    forwardsHaveCaptions,
    isCurrentUserPremium: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsCurrentUserPremium)(global),
    isContextMenuDisabled,
    isReplyToDiscussion,
    isInChangingRecipientMode: isModalShown,
    shouldPreventComposerAnimation,
    senderChat,
    currentUserId: global.currentUserId,
    isSenderChannel
  };
})(ComposerEmbeddedMessage)));

/***/ }),

/***/ "./src/components/middle/composer/CustomEmojiTooltip.async.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/middle/composer/CustomEmojiTooltip.async.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const CustomEmojiTooltipAsync = props => {
  const {
    isOpen
  } = props;
  const CustomEmojiTooltip = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'CustomEmojiTooltip', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return CustomEmojiTooltip ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(CustomEmojiTooltip, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CustomEmojiTooltipAsync);

/***/ }),

/***/ "./src/components/middle/composer/CustomSendMenu.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/middle/composer/CustomSendMenu.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const CustomSendMenuAsync = props => {
  const {
    isOpen
  } = props;
  const CustomSend = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'CustomSendMenu', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return CustomSend ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(CustomSend, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CustomSendMenuAsync);

/***/ }),

/***/ "./src/components/middle/composer/DropArea.async.tsx":
/*!***********************************************************!*\
  !*** ./src/components/middle/composer/DropArea.async.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropAreaState: () => (/* reexport safe */ _DropArea__WEBPACK_IMPORTED_MODULE_3__.DropAreaState),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");
/* harmony import */ var _DropArea__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DropArea */ "./src/components/middle/composer/DropArea.tsx");



const DropAreaAsync = props => {
  const {
    isOpen
  } = props;
  const DropArea = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'DropArea', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return DropArea ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(DropArea, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DropAreaAsync);


/***/ }),

/***/ "./src/components/middle/composer/DropArea.tsx":
/*!*****************************************************!*\
  !*** ./src/components/middle/composer/DropArea.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropAreaState: () => (/* binding */ DropAreaState),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/buildAttachment */ "./src/components/middle/composer/helpers/buildAttachment.ts");
/* harmony import */ var _helpers_getFilesFromDataTransferItems__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/getFilesFromDataTransferItems */ "./src/components/middle/composer/helpers/getFilesFromDataTransferItems.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _ui_Portal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/Portal */ "./src/components/ui/Portal.ts");
/* harmony import */ var _DropTarget__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DropTarget */ "./src/components/middle/composer/DropTarget.tsx");
/* harmony import */ var _DropArea_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DropArea.scss */ "./src/components/middle/composer/DropArea.scss");














let DropAreaState = /*#__PURE__*/function (DropAreaState) {
  DropAreaState["None"] = "none";
  DropAreaState["Document"] = "document";
  DropAreaState["QuickFile"] = "quick_file";
  return DropAreaState;
}({});
const DROP_LEAVE_TIMEOUT_MS = 150;
const DropArea = ({
  isOpen,
  withQuick,
  onHide,
  onFileSelect,
  editingMessage
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const {
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const hideTimeoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const prevWithQuick = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_9__["default"])(withQuick);
  const {
    shouldRender,
    transitionClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_10__["default"])(isOpen);
  const isInAlbum = editingMessage && editingMessage?.groupedId;
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => isOpen ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_4__["default"])(onHide) : undefined, [isOpen, onHide]);
  const handleFilesDrop = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(async e => {
    const {
      dataTransfer: dt
    } = e;
    let files = [];
    if (dt.files && dt.files.length > 0 && (!dt.items || !dt.items.length)) {
      files = files.concat(Array.from(dt.files));
    } else if (dt.items && dt.items.length > 0) {
      const folderFiles = await (0,_helpers_getFilesFromDataTransferItems__WEBPACK_IMPORTED_MODULE_6__["default"])(dt.items);
      const newAttachment = folderFiles && (await (0,_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_5__["default"])(folderFiles[0].name, folderFiles[0]));
      const canReplace = editingMessage && newAttachment && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.canReplaceMessageMedia)(editingMessage, newAttachment);
      if (canReplace) {
        showNotification({
          message: lang(isInAlbum ? 'lng_edit_media_album_error' : 'lng_edit_media_invalid_file')
        });
        return;
      }
      if (folderFiles?.length) {
        files = files.concat(folderFiles);
      }
    }
    onHide();
    onFileSelect(files, withQuick ? false : undefined);
  });
  const handleQuickFilesDrop = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(e => {
    const {
      dataTransfer: dt
    } = e;
    if (dt.files && dt.files.length > 0) {
      onHide();
      onFileSelect(Array.from(dt.files), true);
    }
  });
  const handleDragLeave = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(e => {
    e.stopPropagation();
    const {
      target: fromTarget,
      relatedTarget: toTarget
    } = e;

    // Esc button pressed during drag event
    if (fromTarget.matches('.DropTarget, .DropArea') && (!toTarget || !toTarget.matches('.DropTarget, .DropArea'))) {
      hideTimeoutRef.current = window.setTimeout(() => {
        onHide();
      }, DROP_LEAVE_TIMEOUT_MS);
    }
  });
  const handleDragOver = () => {
    if (hideTimeoutRef.current) {
      window.clearTimeout(hideTimeoutRef.current);
    }
  };
  if (!shouldRender) {
    return undefined;
  }
  const shouldRenderQuick = withQuick || prevWithQuick;
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('DropArea', transitionClassNames);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Portal__WEBPACK_IMPORTED_MODULE_11__["default"], {
    containerSelector: "#middle-column-portals"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: className,
    onDragLeave: handleDragLeave,
    onDragOver: handleDragOver,
    onDrop: onHide,
    onClick: onHide
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DropTarget__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onFileSelect: handleFilesDrop,
    isGeneric: !shouldRenderQuick
  }), shouldRenderQuick && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_DropTarget__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onFileSelect: handleQuickFilesDrop,
    isQuick: true
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(DropArea));

/***/ }),

/***/ "./src/components/middle/composer/DropTarget.tsx":
/*!*******************************************************!*\
  !*** ./src/components/middle/composer/DropTarget.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useEffectOnce */ "./src/hooks/useEffectOnce.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _DropTarget_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DropTarget.scss */ "./src/components/middle/composer/DropTarget.scss");








const DropTarget = ({
  isQuick,
  isGeneric,
  onFileSelect
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const svgRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [isHovered, markHovered, unmarkHovered] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const handleDragLeave = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(e => {
    const {
      relatedTarget: toTarget
    } = e;
    if (toTarget) {
      e.stopPropagation();
    }
    unmarkHovered();
  });
  const handleResize = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    const svg = svgRef.current;
    if (!svg) {
      return;
    }
    const {
      width,
      height
    } = svg.getBoundingClientRect();
    svg.viewBox.baseVal.width = width;
    svg.viewBox.baseVal.height = height;
  });

  // Can't listen for SVG resize
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_5__["default"])(ref, handleResize);
  (0,_hooks_useEffectOnce__WEBPACK_IMPORTED_MODULE_2__["default"])(handleResize);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])('DropTarget', isHovered && 'hovered');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: className,
    ref: ref,
    onDrop: onFileSelect,
    onDragEnter: markHovered,
    onDragLeave: handleDragLeave,
    "data-dropzone": true
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    className: "target-outline-container"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("rect", {
    className: "target-outline",
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    rx: "8"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "target-content"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: isQuick ? 'photo' : 'document'
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "title"
  }, "Drop files here to send them"), !isGeneric && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "description"
  }, isQuick ? 'in a quick way' : 'without compression')));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(DropTarget));

/***/ }),

/***/ "./src/components/middle/composer/EmojiTooltip.async.tsx":
/*!***************************************************************!*\
  !*** ./src/components/middle/composer/EmojiTooltip.async.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const EmojiTooltipAsync = props => {
  const {
    isOpen
  } = props;
  const EmojiTooltip = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'EmojiTooltip', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return EmojiTooltip ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(EmojiTooltip, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmojiTooltipAsync);

/***/ }),

/***/ "./src/components/middle/composer/InlineBotTooltip.async.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/middle/composer/InlineBotTooltip.async.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const InlineBotTooltipAsync = props => {
  const {
    isOpen
  } = props;
  const InlineBotTooltip = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'InlineBotTooltip', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return InlineBotTooltip ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(InlineBotTooltip, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InlineBotTooltipAsync);

/***/ }),

/***/ "./src/components/middle/composer/MentionTooltip.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/middle/composer/MentionTooltip.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const MentionTooltipAsync = props => {
  const {
    isOpen
  } = props;
  const MentionTooltip = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'MentionTooltip', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return MentionTooltip ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(MentionTooltip, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MentionTooltipAsync);

/***/ }),

/***/ "./src/components/middle/composer/MessageInput.tsx":
/*!*********************************************************!*\
  !*** ./src/components/middle/composer/MessageInput.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_captureKeyboardListeners__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/captureKeyboardListeners */ "./src/util/captureKeyboardListeners.ts");
/* harmony import */ var _util_directInputManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/directInputManager */ "./src/util/directInputManager.ts");
/* harmony import */ var _util_emoji_parseEmojiOnlyString__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/emoji/parseEmojiOnlyString */ "./src/util/emoji/parseEmojiOnlyString.ts");
/* harmony import */ var _util_focusEditableElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/focusEditableElement */ "./src/util/focusEditableElement.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _helpers_selection__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./helpers/selection */ "./src/components/middle/composer/helpers/selection.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useInputCustomEmojis__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./hooks/useInputCustomEmojis */ "./src/components/middle/composer/hooks/useInputCustomEmojis.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_TextTimer__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../ui/TextTimer */ "./src/components/ui/TextTimer.tsx");
/* harmony import */ var _TextFormatter_async__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./TextFormatter.async */ "./src/components/middle/composer/TextFormatter.async.tsx");
























const CONTEXT_MENU_CLOSE_DELAY_MS = 100;
// Focus slows down animation, also it breaks transition layout in Chrome
const FOCUS_DELAY_MS = 350;
const TRANSITION_DURATION_FACTOR = 50;
const SCROLLER_CLASS = 'input-scroller';
const INPUT_WRAPPER_CLASS = 'message-input-wrapper';
const MAX_ATTACHMENT_MODAL_INPUT_HEIGHT = 160;
const MAX_STORY_MODAL_INPUT_HEIGHT = 128;
const TAB_INDEX_PRIORITY_TIMEOUT = 2000;
// Heuristics allowing the user to make a triple click
const SELECTION_RECALCULATE_DELAY_MS = 260;
const TEXT_FORMATTER_SAFE_AREA_PX = 140;
// For some reason Safari inserts `<br>` after user removes text from input
const SAFARI_BR = '<br>';
const IGNORE_KEYS = ['Esc', 'Escape', 'Enter', 'PageUp', 'PageDown', 'Meta', 'Alt', 'Ctrl', 'ArrowDown', 'ArrowUp', 'Control', 'Shift'];
function clearSelection() {
  const selection = window.getSelection();
  if (!selection) {
    return;
  }
  if (selection.removeAllRanges) {
    selection.removeAllRanges();
  } else if (selection.empty) {
    selection.empty();
  }
}
const MessageInput = ({
  ref,
  id,
  chatId,
  captionLimit,
  isAttachmentModalInput,
  isStoryInput,
  customEmojiPrefix,
  editableInputId,
  isReady,
  isActive,
  getHtml,
  placeholder,
  timedPlaceholderLangKey,
  timedPlaceholderDate,
  forcedPlaceholder,
  canSendPlainText,
  canAutoFocus,
  noFocusInterception,
  shouldSuppressFocus,
  shouldSuppressTextFormatter,
  replyInfo,
  isSelectModeActive,
  canPlayAnimatedEmojis,
  messageSendKeyCombo,
  onUpdate,
  onSuppressedFocus,
  onSend,
  onScroll,
  onFocus,
  onBlur,
  isNeedPremium
}) => {
  const {
    editLastMessage,
    replyToNextMessage,
    showAllowedMessageTypesNotification,
    openPremiumModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  let inputRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  if (ref) {
    inputRef = ref;
  }

  // eslint-disable-next-line no-null/no-null
  const selectionTimeoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const cloneRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const scrollerCloneRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const sharedCanvasRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const sharedCanvasHqRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const absoluteContainerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_18__["default"])();
  const isContextMenuOpenRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const [isTextFormatterOpen, openTextFormatter, closeTextFormatter] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_16__["default"])();
  const [textFormatterAnchorPosition, setTextFormatterAnchorPosition] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [selectedRange, setSelectedRange] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isTextFormatterDisabled, setIsTextFormatterDisabled] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const isMobileDevice = isMobile && (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_IOS || _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_ANDROID);
  const [shouldDisplayTimer, setShouldDisplayTimer] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setShouldDisplayTimer(Boolean(timedPlaceholderLangKey && timedPlaceholderDate));
  }, [timedPlaceholderDate, timedPlaceholderLangKey]);
  const handleTimerEnd = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    setShouldDisplayTimer(false);
  });
  (0,_hooks_useInputCustomEmojis__WEBPACK_IMPORTED_MODULE_19__["default"])(getHtml, inputRef, sharedCanvasRef, sharedCanvasHqRef, absoluteContainerRef, customEmojiPrefix, canPlayAnimatedEmojis, isReady, isActive);
  const maxInputHeight = isAttachmentModalInput ? MAX_ATTACHMENT_MODAL_INPUT_HEIGHT : isStoryInput ? MAX_STORY_MODAL_INPUT_HEIGHT : isMobile ? 256 : 416;
  const updateInputHeight = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])((willSend = false) => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestForcedReflow)(() => {
      const scroller = inputRef.current.closest(`.${SCROLLER_CLASS}`);
      const currentHeight = Number(scroller.style.height.replace('px', ''));
      const clone = scrollerCloneRef.current;
      const {
        scrollHeight
      } = clone;
      const newHeight = Math.min(scrollHeight, maxInputHeight);
      if (newHeight === currentHeight) {
        return undefined;
      }
      const isOverflown = scrollHeight > maxInputHeight;
      function exec() {
        const transitionDuration = Math.round(TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)));
        scroller.style.height = `${newHeight}px`;
        scroller.style.transitionDuration = `${transitionDuration}ms`;
        scroller.classList.toggle('overflown', isOverflown);
      }
      if (willSend) {
        // Delay to next frame to sync with sending animation
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(exec);
        return undefined;
      } else {
        return exec;
      }
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!isAttachmentModalInput) return;
    updateInputHeight(false);
  }, [isAttachmentModalInput, updateInputHeight]);
  const htmlRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(getHtml());
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const html = isActive ? getHtml() : '';
    if (html !== inputRef.current.innerHTML) {
      inputRef.current.innerHTML = html;
    }
    if (html !== cloneRef.current.innerHTML) {
      cloneRef.current.innerHTML = html;
    }
    if (html !== htmlRef.current) {
      htmlRef.current = html;
      updateInputHeight(!html);
    }
  }, [getHtml, isActive, updateInputHeight]);
  const chatIdRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(chatId);
  chatIdRef.current = chatId;
  const focusInput = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    if (!inputRef.current || isNeedPremium) {
      return;
    }
    if ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.getIsHeavyAnimating)()) {
      setTimeout(focusInput, FOCUS_DELAY_MS);
      return;
    }
    (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_9__["default"])(inputRef.current);
  });
  const handleCloseTextFormatter = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => {
    closeTextFormatter();
    clearSelection();
  });
  function checkSelection() {
    // Disable the formatter on iOS devices for now.
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_IOS) {
      return false;
    }
    const selection = window.getSelection();
    if (!selection || !selection.rangeCount || isContextMenuOpenRef.current) {
      closeTextFormatter();
      if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_ANDROID) {
        setIsTextFormatterDisabled(false);
      }
      return false;
    }
    const selectionRange = selection.getRangeAt(0);
    const selectedText = selectionRange.toString().trim();
    if (shouldSuppressTextFormatter || !(0,_helpers_selection__WEBPACK_IMPORTED_MODULE_13__.isSelectionInsideInput)(selectionRange, editableInputId || _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_ID) || !selectedText || (0,_util_emoji_parseEmojiOnlyString__WEBPACK_IMPORTED_MODULE_8__["default"])(selectedText) || !selectionRange.START_TO_END) {
      closeTextFormatter();
      return false;
    }
    return true;
  }
  function processSelection() {
    if (!checkSelection()) {
      return;
    }
    if (isTextFormatterDisabled) {
      return;
    }
    const selectionRange = window.getSelection().getRangeAt(0);
    const selectionRect = selectionRange.getBoundingClientRect();
    const scrollerRect = inputRef.current.closest(`.${SCROLLER_CLASS}`).getBoundingClientRect();
    let x = selectionRect.left + selectionRect.width / 2 - scrollerRect.left;
    if (x < TEXT_FORMATTER_SAFE_AREA_PX) {
      x = TEXT_FORMATTER_SAFE_AREA_PX;
    } else if (x > scrollerRect.width - TEXT_FORMATTER_SAFE_AREA_PX) {
      x = scrollerRect.width - TEXT_FORMATTER_SAFE_AREA_PX;
    }
    setTextFormatterAnchorPosition({
      x,
      y: selectionRect.top - scrollerRect.top
    });
    setSelectedRange(selectionRange);
    openTextFormatter();
  }
  function processSelectionWithTimeout() {
    if (selectionTimeoutRef.current) {
      window.clearTimeout(selectionTimeoutRef.current);
    }
    // Small delay to allow browser properly recalculate selection
    selectionTimeoutRef.current = window.setTimeout(processSelection, SELECTION_RECALCULATE_DELAY_MS);
  }
  function handleMouseDown(e) {
    if (e.button !== 2) {
      const listenerEl = e.currentTarget.closest(`.${INPUT_WRAPPER_CLASS}`) || e.target;
      listenerEl.addEventListener('mouseup', processSelectionWithTimeout, {
        once: true
      });
      return;
    }
    if (isContextMenuOpenRef.current) {
      return;
    }
    isContextMenuOpenRef.current = true;
    function handleCloseContextMenu(e2) {
      if (e2 instanceof KeyboardEvent && e2.key !== 'Esc' && e2.key !== 'Escape') {
        return;
      }
      setTimeout(() => {
        isContextMenuOpenRef.current = false;
      }, CONTEXT_MENU_CLOSE_DELAY_MS);
      window.removeEventListener('keydown', handleCloseContextMenu);
      window.removeEventListener('mousedown', handleCloseContextMenu);
    }
    document.addEventListener('mousedown', handleCloseContextMenu);
    document.addEventListener('keydown', handleCloseContextMenu);
  }
  function handleKeyDown(e) {
    // https://levelup.gitconnected.com/javascript-events-handlers-keyboard-and-load-events-1b3e46a6b0c3#1960
    const {
      isComposing
    } = e;
    const html = getHtml();
    if (!isComposing && !html && (e.metaKey || e.ctrlKey)) {
      const targetIndexDelta = e.key === 'ArrowDown' ? 1 : e.key === 'ArrowUp' ? -1 : undefined;
      if (targetIndexDelta) {
        e.preventDefault();
        replyToNextMessage({
          targetIndexDelta
        });
        return;
      }
    }
    if (!isComposing && e.key === 'Enter' && !e.shiftKey) {
      if (!isMobileDevice && (messageSendKeyCombo === 'enter' && !e.shiftKey || messageSendKeyCombo === 'ctrl-enter' && (e.ctrlKey || e.metaKey))) {
        e.preventDefault();
        closeTextFormatter();
        onSend();
      }
    } else if (!isComposing && e.key === 'ArrowUp' && !html && !e.metaKey && !e.ctrlKey && !e.altKey) {
      e.preventDefault();
      editLastMessage();
    } else {
      e.target.addEventListener('keyup', processSelectionWithTimeout, {
        once: true
      });
    }
  }
  function handleChange(e) {
    const {
      innerHTML,
      textContent
    } = e.currentTarget;
    onUpdate(innerHTML === SAFARI_BR ? '' : innerHTML);

    // Reset focus on the input to remove any active styling when input is cleared
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_TOUCH_ENV && (!textContent || !textContent.length)
    // When emojis are not supported, innerHTML contains an emoji img tag that doesn't exist in the textContext
    && !(!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_EMOJI_SUPPORTED && innerHTML.includes('emoji-small')) && !innerHTML.includes('custom-emoji')) {
      const selection = window.getSelection();
      if (selection) {
        inputRef.current.blur();
        selection.removeAllRanges();
        (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_9__["default"])(inputRef.current, true);
      }
    }
  }
  function handleAndroidContextMenu(e) {
    if (!checkSelection()) {
      return;
    }
    setIsTextFormatterDisabled(!isTextFormatterDisabled);
    if (!isTextFormatterDisabled) {
      e.preventDefault();
      e.stopPropagation();
      processSelection();
    } else {
      closeTextFormatter();
    }
  }
  function handleClick() {
    if (isAttachmentModalInput || canSendPlainText || isStoryInput && isNeedPremium) return;
    showAllowedMessageTypesNotification({
      chatId
    });
  }
  const handleOpenPremiumModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_17__["default"])(() => openPremiumModal());
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_TOUCH_ENV) {
      return;
    }
    if (canAutoFocus) {
      focusInput();
    }
  }, [chatId, focusInput, replyInfo, canAutoFocus]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!chatId || editableInputId !== _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_ID || noFocusInterception || isMobileDevice || isSelectModeActive) {
      return undefined;
    }
    const handleDocumentKeyDown = e => {
      if ((0,_util_directInputManager__WEBPACK_IMPORTED_MODULE_7__.getIsDirectTextInputDisabled)()) {
        return;
      }
      const {
        key
      } = e;
      const target = e.target;
      if (!target || IGNORE_KEYS.includes(key)) {
        return;
      }
      const input = inputRef.current;
      const isSelectionCollapsed = document.getSelection()?.isCollapsed;
      if ((key.startsWith('Arrow') || e.shiftKey && key === 'Shift') && !isSelectionCollapsed || e.code === 'KeyC' && (e.ctrlKey || e.metaKey) && target.tagName !== 'INPUT') {
        return;
      }
      if (input && target !== input && target.tagName !== 'INPUT' && target.tagName !== 'TEXTAREA' && !target.isContentEditable) {
        (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_9__["default"])(input, true, true);
        const newEvent = new KeyboardEvent(e.type, e);
        input.dispatchEvent(newEvent);
      }
    };
    document.addEventListener('keydown', handleDocumentKeyDown, true);
    return () => {
      document.removeEventListener('keydown', handleDocumentKeyDown, true);
    };
  }, [chatId, editableInputId, isMobileDevice, isSelectModeActive, noFocusInterception]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const captureFirstTab = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_10__.debounce)(e => {
      if (e.key === 'Tab' && !(0,_util_directInputManager__WEBPACK_IMPORTED_MODULE_7__.getIsDirectTextInputDisabled)()) {
        e.preventDefault();
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(focusInput);
      }
    }, TAB_INDEX_PRIORITY_TIMEOUT, true, false);
    return (0,_util_captureKeyboardListeners__WEBPACK_IMPORTED_MODULE_6__["default"])({
      onTab: captureFirstTab
    });
  }, [focusInput]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const input = inputRef.current;
    function suppressFocus() {
      input.blur();
    }
    if (shouldSuppressFocus) {
      input.addEventListener('focus', suppressFocus);
    }
    return () => {
      input.removeEventListener('focus', suppressFocus);
    };
  }, [shouldSuppressFocus]);
  const isTouched = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_15__["default"])(() => Boolean(isActive && getHtml()), [isActive, getHtml]);
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('form-control allow-selection', isTouched && 'touched', shouldSuppressFocus && 'focus-disabled');
  const inputScrollerContentClass = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('input-scroller-content', isNeedPremium && 'is-need-premium');
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: id,
    onClick: shouldSuppressFocus ? onSuppressedFocus : undefined,
    dir: lang.isRtl ? 'rtl' : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('custom-scroll', SCROLLER_CLASS, isNeedPremium && 'is-need-premium'),
    onScroll: onScroll,
    onClick: !isAttachmentModalInput && !canSendPlainText ? handleClick : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: inputScrollerContentClass
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: inputRef,
    id: editableInputId || _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_ID,
    className: className,
    contentEditable: isAttachmentModalInput || canSendPlainText,
    role: "textbox",
    dir: "auto",
    tabIndex: 0,
    onClick: focusInput,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    onMouseDown: handleMouseDown,
    onContextMenu: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_ANDROID ? handleAndroidContextMenu : undefined,
    onTouchCancel: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_11__.IS_ANDROID ? processSelectionWithTimeout : undefined,
    "aria-label": placeholder,
    onFocus: !isNeedPremium ? onFocus : undefined,
    onBlur: !isNeedPremium ? onBlur : undefined
  }), !forcedPlaceholder && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('placeholder-text', !isAttachmentModalInput && !canSendPlainText && 'with-icon', isNeedPremium && 'is-need-premium'),
    dir: "auto"
  }, !isAttachmentModalInput && !canSendPlainText && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_20__["default"], {
    name: "lock-badge",
    className: "placeholder-icon"
  }), shouldDisplayTimer ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_TextTimer__WEBPACK_IMPORTED_MODULE_22__["default"], {
    langKey: timedPlaceholderLangKey,
    endsAt: timedPlaceholderDate,
    onEnd: handleTimerEnd
  }) : placeholder, isStoryInput && isNeedPremium && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_21__["default"], {
    className: "unlock-button",
    size: "tiny",
    color: "adaptive",
    onClick: handleOpenPremiumModal
  }, lang('StoryRepliesLockedButton'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: sharedCanvasRef,
    className: "shared-canvas"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: sharedCanvasHqRef,
    className: "shared-canvas"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: absoluteContainerRef,
    className: "absolute-video-container"
  }))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: scrollerCloneRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('custom-scroll', SCROLLER_CLASS, 'clone', isNeedPremium && 'is-need-premium')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: inputScrollerContentClass
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: cloneRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(className, 'clone'),
    dir: "auto"
  }))), captionLimit !== undefined && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "max-length-indicator",
    dir: "auto"
  }, captionLimit), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_TextFormatter_async__WEBPACK_IMPORTED_MODULE_23__["default"], {
    isOpen: isTextFormatterOpen,
    anchorPosition: textFormatterAnchorPosition,
    selectedRange: selectedRange,
    setSelectedRange: setSelectedRange,
    onClose: handleCloseTextFormatter
  }), forcedPlaceholder && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "forced-placeholder"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_12__["default"])(forcedPlaceholder)));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId
}) => {
  const {
    messageSendKeyCombo
  } = global.settings.byKey;
  return {
    messageSendKeyCombo,
    replyInfo: chatId && threadId ? (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectDraft)(global, chatId, threadId)?.replyInfo : undefined,
    isSelectModeActive: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsInSelectMode)(global),
    canPlayAnimatedEmojis: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanPlayAnimatedEmojis)(global)
  };
})(MessageInput)));

/***/ }),

/***/ "./src/components/middle/composer/PollModal.async.tsx":
/*!************************************************************!*\
  !*** ./src/components/middle/composer/PollModal.async.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const PollModalAsync = props => {
  const {
    isOpen
  } = props;
  const PollModal = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'PollModal', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return PollModal ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(PollModal, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PollModalAsync);

/***/ }),

/***/ "./src/components/middle/composer/SendAsMenu.async.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/composer/SendAsMenu.async.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const SendAsMenuAsync = props => {
  const {
    isOpen
  } = props;
  const SendAsMenu = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'SendAsMenu', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return SendAsMenu ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(SendAsMenu, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SendAsMenuAsync);

/***/ }),

/***/ "./src/components/middle/composer/StickerTooltip.async.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/middle/composer/StickerTooltip.async.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const StickerTooltipAsync = props => {
  const {
    isOpen
  } = props;
  const StickerTooltip = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'StickerTooltip', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return StickerTooltip ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(StickerTooltip, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StickerTooltipAsync);

/***/ }),

/***/ "./src/components/middle/composer/SymbolMenu.async.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/composer/SymbolMenu.async.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const SymbolMenuAsync = props => {
  const {
    isOpen
  } = props;
  const SymbolMenu = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'SymbolMenu', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return SymbolMenu ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(SymbolMenu, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SymbolMenuAsync);

/***/ }),

/***/ "./src/components/middle/composer/SymbolMenuButton.tsx":
/*!*************************************************************!*\
  !*** ./src/components/middle/composer/SymbolMenuButton.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/ResponsiveHoverButton */ "./src/components/ui/ResponsiveHoverButton.tsx");
/* harmony import */ var _ui_Spinner__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/Spinner */ "./src/components/ui/Spinner.tsx");
/* harmony import */ var _SymbolMenu_async__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SymbolMenu.async */ "./src/components/middle/composer/SymbolMenu.async.tsx");











const MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;
const SymbolMenuButton = ({
  chatId,
  threadId,
  isMobile,
  canSendGifs,
  canSendStickers,
  isMessageComposer,
  isReady,
  isSymbolMenuOpen,
  idPrefix,
  isAttachmentModal,
  canSendPlainText,
  isSymbolMenuForced,
  className,
  forceDarkTheme,
  inputCssSelector = _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_CSS_SELECTOR,
  openSymbolMenu,
  closeSymbolMenu,
  onCustomEmojiSelect,
  onStickerSelect,
  onGifSelect,
  onRemoveSymbol,
  onEmojiSelect,
  closeBotCommandMenu,
  closeSendAsMenu
}) => {
  const {
    setStickerSearchQuery,
    setGifSearchQuery,
    addRecentEmoji,
    addRecentCustomEmoji
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const triggerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const [contextMenuAnchor, setContextMenuAnchor] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const symbolMenuButtonClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('mobile-symbol-menu-button', !isReady && 'not-ready', isSymbolMenuLoaded ? isSymbolMenuOpen && 'menu-opened' : isSymbolMenuOpen && 'is-loading');
  const handleActivateSymbolMenu = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    closeBotCommandMenu?.();
    closeSendAsMenu?.();
    openSymbolMenu();
    const triggerEl = triggerRef.current;
    if (!triggerEl) return;
    const {
      x,
      y
    } = triggerEl.getBoundingClientRect();
    setContextMenuAnchor({
      x,
      y
    });
  });
  const handleSearchOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(type => {
    if (type === 'stickers') {
      setStickerSearchQuery({
        query: ''
      });
      setGifSearchQuery({
        query: undefined
      });
    } else {
      setGifSearchQuery({
        query: ''
      });
      setStickerSearchQuery({
        query: undefined
      });
    }
  });
  const handleSymbolMenuOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    const messageInput = document.querySelector(isAttachmentModal ? _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_MODAL_CSS_SELECTOR : inputCssSelector);
    if (!isMobile || messageInput !== document.activeElement) {
      openSymbolMenu();
      return;
    }
    messageInput?.blur();
    setTimeout(() => {
      closeBotCommandMenu?.();
      openSymbolMenu();
    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);
  });
  const getTriggerElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => triggerRef.current);
  const getRootElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => triggerRef.current?.closest('.custom-scroll, .no-scrollbar'));
  const getMenuElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => document.querySelector('#portals .SymbolMenu .bubble'));
  const getLayout = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => ({
    withPortal: true
  }));
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, isMobile ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_7__["default"], {
    className: symbolMenuButtonClassName,
    round: true,
    color: "translucent",
    onClick: isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen,
    ariaLabel: "Choose emoji, sticker or GIF"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: "smile"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: "keyboard"
  }), isSymbolMenuOpen && !isSymbolMenuLoaded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Spinner__WEBPACK_IMPORTED_MODULE_9__["default"], {
    color: "gray"
  })) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ResponsiveHoverButton__WEBPACK_IMPORTED_MODULE_8__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('symbol-menu-button', isSymbolMenuOpen && 'activated'),
    round: true,
    color: "translucent",
    onActivate: handleActivateSymbolMenu,
    ariaLabel: "Choose emoji, sticker or GIF"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: triggerRef,
    className: "symbol-menu-trigger"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: "smile"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_SymbolMenu_async__WEBPACK_IMPORTED_MODULE_10__["default"], {
    chatId: chatId,
    threadId: threadId,
    isOpen: isSymbolMenuOpen || Boolean(isSymbolMenuForced),
    canSendGifs: canSendGifs,
    canSendStickers: canSendStickers,
    isMessageComposer: isMessageComposer,
    idPrefix: idPrefix,
    onLoad: onSymbolMenuLoadingComplete,
    onClose: closeSymbolMenu,
    onEmojiSelect: onEmojiSelect,
    onStickerSelect: onStickerSelect,
    onCustomEmojiSelect: onCustomEmojiSelect,
    onGifSelect: onGifSelect,
    onRemoveSymbol: onRemoveSymbol,
    onSearchOpen: handleSearchOpen,
    addRecentEmoji: addRecentEmoji,
    addRecentCustomEmoji: addRecentCustomEmoji,
    isAttachmentModal: isAttachmentModal,
    canSendPlainText: canSendPlainText,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(className, forceDarkTheme && 'component-theme-dark'),
    anchor: isAttachmentModal ? contextMenuAnchor : undefined,
    getTriggerElement: isAttachmentModal ? getTriggerElement : undefined,
    getRootElement: isAttachmentModal ? getRootElement : undefined,
    getMenuElement: isAttachmentModal ? getMenuElement : undefined,
    getLayout: isAttachmentModal ? getLayout : undefined
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(SymbolMenuButton));

/***/ }),

/***/ "./src/components/middle/composer/TextFormatter.async.tsx":
/*!****************************************************************!*\
  !*** ./src/components/middle/composer/TextFormatter.async.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/moduleLoader */ "./src/util/moduleLoader.ts");
/* harmony import */ var _hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useModuleLoader */ "./src/hooks/useModuleLoader.ts");



const TextFormatterAsync = props => {
  const {
    isOpen
  } = props;
  const TextFormatter = (0,_hooks_useModuleLoader__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_moduleLoader__WEBPACK_IMPORTED_MODULE_1__.Bundles.Extra, 'TextFormatter', !isOpen);

  // eslint-disable-next-line react/jsx-props-no-spreading
  return TextFormatter ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(TextFormatter, props) : undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TextFormatterAsync);

/***/ }),

/***/ "./src/components/middle/composer/WebPagePreview.tsx":
/*!***********************************************************!*\
  !*** ./src/components/middle/composer/WebPagePreview.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/parseHtmlAsFormattedText */ "./src/util/parseHtmlAsFormattedText.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _message_WebPage__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../message/WebPage */ "./src/components/middle/message/WebPage.tsx");
/* harmony import */ var _WebPagePreview_scss__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./WebPagePreview.scss */ "./src/components/middle/composer/WebPagePreview.scss");






















const DEBOUNCE_MS = 300;
const RE_LINK = new RegExp(_config__WEBPACK_IMPORTED_MODULE_3__.RE_LINK_TEMPLATE, 'i');
const WebPagePreview = ({
  chatId,
  threadId,
  getHtml,
  isDisabled,
  webPagePreview,
  noWebPage,
  theme,
  attachmentSettings,
  isEditing
}) => {
  const {
    loadWebPagePreview,
    clearWebPagePreview,
    toggleMessageWebPage,
    updateAttachmentSettings
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const formattedTextWithLinkRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isInvertedMedia = attachmentSettings.isInvertedMedia;
  const isSmallerMedia = attachmentSettings.webPageMediaSize === 'small';
  const detectLinkDebounced = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_7__.useDebouncedResolver)(() => {
    const formattedText = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_6__["default"])(getHtml());
    const linkEntity = formattedText.entities?.find(entity => entity.type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.TextUrl);
    formattedTextWithLinkRef.current = formattedText;
    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];
  }, [getHtml], DEBOUNCE_MS, true);
  const getLink = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__["default"])(detectLinkDebounced, [detectLinkDebounced, getHtml], true);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const link = getLink();
    const formattedText = formattedTextWithLinkRef.current;
    if (link) {
      loadWebPagePreview({
        text: formattedText
      });
    } else {
      clearWebPagePreview();
      toggleMessageWebPage({
        chatId,
        threadId
      });
    }
  }, [getLink, chatId, threadId]);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    clearWebPagePreview();
    toggleMessageWebPage({
      chatId,
      threadId
    });
  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);
  const isShown = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_11__["default"])(() => {
    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);
  }, [isDisabled, getHtml, noWebPage, webPagePreview]);
  const {
    shouldRender,
    transitionClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_14__["default"])(isShown);
  const hasMediaSizeOptions = webPagePreview?.hasLargeMedia;
  const renderingWebPage = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_9__["default"])(webPagePreview, true);
  const handleClearWebpagePreview = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    toggleMessageWebPage({
      chatId,
      threadId,
      noWebPage: true
    });
  });
  const {
    isContextMenuOpen,
    contextMenuAnchor,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_8__["default"])(ref, isEditing, true);
  const getTriggerElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => ref.current);
  const getRootElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => ref.current);
  const getMenuElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => ref.current.querySelector('.web-page-preview-context-menu .bubble'));
  const handlePreviewClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(e => {
    handleContextMenu(e);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!shouldRender || !renderingWebPage) {
      handleContextMenuClose();
      handleContextMenuHide();
    }
  }, [handleContextMenuClose, handleContextMenuHide, shouldRender, renderingWebPage]);
  function updateIsInvertedMedia(value) {
    updateAttachmentSettings({
      isInvertedMedia: value
    });
  }
  function updateIsLargerMedia(value) {
    updateAttachmentSettings({
      webPageMediaSize: value
    });
  }
  if (!shouldRender || !renderingWebPage) {
    return undefined;
  }

  // TODO Refactor so `WebPage` can be used without message
  const {
    photo,
    ...webPageWithoutPhoto
  } = renderingWebPage;
  const messageStub = {
    content: {
      webPage: webPageWithoutPhoto
    }
  };
  function renderContextMenu() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_18__["default"], {
      isOpen: isContextMenuOpen,
      anchor: contextMenuAnchor,
      getTriggerElement: getTriggerElement,
      getRootElement: getRootElement,
      getMenuElement: getMenuElement,
      className: "web-page-preview-context-menu",
      onClose: handleContextMenuClose,
      onCloseAnimationEnd: handleContextMenuHide,
      autoClose: true
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, isInvertedMedia ?
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-no-bind
    _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_19__["default"], {
      icon: "move-caption-up",
      onClick: () => updateIsInvertedMedia(undefined)
    }, lang('PreviewSender.MoveTextUp')) :
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-no-bind
    _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_19__["default"], {
      icon: "move-caption-down",
      onClick: () => updateIsInvertedMedia(true)
    }, lang('PreviewSender.MoveTextDown')), hasMediaSizeOptions && (isSmallerMedia ?
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-no-bind
    _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_19__["default"], {
      icon: "expand",
      onClick: () => updateIsLargerMedia('large')
    }, lang('ChatInput.EditLink.LargerMedia')) :
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-no-bind
    _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_19__["default"], {
      icon: "collapse",
      onClick: () => updateIsLargerMedia('small')
    }, lang('ChatInput.EditLink.SmallerMedia'))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_19__["default"], {
      icon: "delete"
      // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: handleClearWebpagePreview
    }, lang('ChatInput.EditLink.RemovePreview'))));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('WebPagePreview', transitionClassNames),
    ref: ref
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "WebPagePreview_inner"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "WebPagePreview-left-icon",
    onClick: handlePreviewClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_16__["default"], {
    name: "link"
  })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_message_WebPage__WEBPACK_IMPORTED_MODULE_20__["default"], {
    message: messageStub,
    inPreview: true,
    theme: theme,
    onContainerClick: handlePreviewClick,
    isEditing: isEditing
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_17__["default"], {
    className: "WebPagePreview-clear",
    round: true,
    faded: true,
    color: "translucent",
    ariaLabel: "Clear Webpage Preview",
    onClick: handleClearWebpagePreview
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_16__["default"], {
    name: "close"
  })), !isEditing && renderContextMenu()));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  chatId,
  threadId
}) => {
  const noWebPage = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectNoWebPage)(global, chatId, threadId);
  const {
    attachmentSettings
  } = global;
  return {
    theme: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTheme)(global),
    webPagePreview: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectTabState)(global).webPagePreview,
    noWebPage,
    attachmentSettings
  };
})(WebPagePreview)));

/***/ }),

/***/ "./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts":
/*!*********************************************************************************!*\
  !*** ./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ applyIosAutoCapitalizationFix)
/* harmony export */ });
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");

let resetInput;
if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_0__.IS_IOS) {
  resetInput = document.createElement('input');
  resetInput.classList.add('for-ios-autocapitalization-fix');
  document.body.appendChild(resetInput);
}

// https://stackoverflow.com/a/55652503
function applyIosAutoCapitalizationFix(inputEl) {
  resetInput.focus();
  inputEl.focus();
}

/***/ }),

/***/ "./src/components/middle/composer/helpers/buildAttachment.ts":
/*!*******************************************************************!*\
  !*** ./src/components/middle/composer/helpers/buildAttachment.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildAttachment),
/* harmony export */   prepareAttachmentsToSend: () => (/* binding */ prepareAttachmentsToSend)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _util_audio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/audio */ "./src/util/audio.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../util/files */ "./src/util/files.ts");
/* harmony import */ var _util_imageResize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/imageResize */ "./src/util/imageResize.ts");




const MAX_QUICK_IMG_SIZE = 1280; // px
const MAX_THUMB_IMG_SIZE = 40; // px
const MAX_ASPECT_RATIO = 20;
const FILE_EXT_REGEX = /\.[^/.]+$/;
async function buildAttachment(filename, blob, options) {
  const blobUrl = URL.createObjectURL(blob);
  const {
    type: mimeType,
    size
  } = blob;
  let quick;
  let audio;
  let previewBlobUrl;
  let shouldSendAsFile;
  if (_config__WEBPACK_IMPORTED_MODULE_0__.SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType)) {
    const img = await (0,_util_files__WEBPACK_IMPORTED_MODULE_2__.preloadImage)(blobUrl);
    const {
      width,
      height
    } = img;
    shouldSendAsFile = !validateAspectRatio(width, height);
    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;
    const isGif = mimeType === _config__WEBPACK_IMPORTED_MODULE_0__.GIF_MIME_TYPE;
    if (!shouldSendAsFile) {
      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {
        const resizedUrl = await (0,_util_imageResize__WEBPACK_IMPORTED_MODULE_3__.scaleImage)(blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg');
        URL.revokeObjectURL(blobUrl);
        return buildAttachment(filename, blob, {
          compressedBlobUrl: resizedUrl
        });
      }
      if (mimeType === 'image/jpeg') {
        filename = filename.replace(FILE_EXT_REGEX, '.jpg');
      }
      quick = {
        width,
        height
      };
    }
    const shouldShrinkPreview = Math.max(width, height) > MAX_THUMB_IMG_SIZE;
    if (shouldShrinkPreview) {
      previewBlobUrl = await (0,_util_imageResize__WEBPACK_IMPORTED_MODULE_3__.scaleImage)(blobUrl, MAX_THUMB_IMG_SIZE / Math.max(width, height), 'image/jpeg');
    } else {
      previewBlobUrl = blobUrl;
    }
  } else if (_config__WEBPACK_IMPORTED_MODULE_0__.SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {
    try {
      const {
        videoWidth: width,
        videoHeight: height,
        duration
      } = await (0,_util_files__WEBPACK_IMPORTED_MODULE_2__.preloadVideo)(blobUrl);
      shouldSendAsFile = !validateAspectRatio(width, height);
      if (!shouldSendAsFile) {
        quick = {
          width: width,
          height: height,
          duration: duration
        };
      }
    } catch (err) {
      shouldSendAsFile = true;
    }
    previewBlobUrl = await (0,_util_files__WEBPACK_IMPORTED_MODULE_2__.createPosterForVideo)(blobUrl);
  } else if (_config__WEBPACK_IMPORTED_MODULE_0__.SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {
    const {
      duration,
      title,
      performer,
      coverUrl
    } = await (0,_util_audio__WEBPACK_IMPORTED_MODULE_1__.parseAudioMetadata)(blobUrl);
    audio = {
      duration: duration || 0,
      title,
      performer
    };
    previewBlobUrl = coverUrl;
  }
  return {
    blobUrl,
    filename,
    mimeType,
    size,
    quick,
    audio,
    previewBlobUrl,
    shouldSendAsFile: shouldSendAsFile || undefined,
    uniqueId: `${Date.now()}-${Math.random()}`,
    ...options
  };
}
function prepareAttachmentsToSend(attachments, shouldSendCompressed) {
  return attachments.map(attach => {
    if (shouldSendCompressed) {
      if (attach.compressedBlobUrl) {
        return {
          ...attach,
          blobUrl: attach.compressedBlobUrl
        };
      }
      return attach;
    }
    return {
      ...attach,
      shouldSendAsFile: !(attach.voice || attach.audio) || undefined,
      shouldSendAsSpoiler: undefined
    };
  });
}
function validateAspectRatio(width, height) {
  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);
  return maxAspectRatio <= MAX_ASPECT_RATIO;
}

/***/ }),

/***/ "./src/components/middle/composer/helpers/cleanHtml.ts":
/*!*************************************************************!*\
  !*** ./src/components/middle/composer/helpers/cleanHtml.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   escapeHtml: () => (/* binding */ escapeHtml),
/* harmony export */   preparePastedHtml: () => (/* binding */ preparePastedHtml)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _lib_cleanDocsHtml__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../lib/cleanDocsHtml */ "./src/lib/cleanDocsHtml.ts");
/* harmony import */ var _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/parseHtmlAsFormattedText */ "./src/util/parseHtmlAsFormattedText.ts");




const STYLE_TAG_REGEX = /<style>(.*?)<\/style>/gs;
function preparePastedHtml(html) {
  let fragment = document.createElement('div');
  try {
    html = (0,_lib_cleanDocsHtml__WEBPACK_IMPORTED_MODULE_2__["default"])(html);
  } catch (err) {
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
      // eslint-disable-next-line no-console
      console.error(err);
    }
  }
  fragment.innerHTML = html.replace(/\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles

  const textContents = fragment.querySelectorAll('.text-content');
  if (textContents.length) {
    fragment = textContents[textContents.length - 1]; // Replace with the last copied message
  }
  Array.from(fragment.getElementsByTagName('*')).forEach(node => {
    if (!(node instanceof HTMLElement)) {
      node.remove();
      return;
    }
    node.removeAttribute('style');

    // Fix newlines
    if (node.tagName === 'BR') node.replaceWith('\n');
    if (node.tagName === 'P') node.appendChild(document.createTextNode('\n'));
    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');
    // We do not intercept copy logic, so we remove some nodes here
    if (node.dataset.ignoreOnPaste) node.remove();
    if (_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_3__.ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {
      node.setAttribute('data-entity-type', _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_3__.ENTITY_CLASS_BY_NODE_NAME[node.tagName]);
    }
    // Strip non-entity tags
    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);
    // Append entity parameters for parsing
    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);
    switch (node.dataset.entityType) {
      case _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.MentionName:
        node.replaceWith(node.textContent || '');
        break;
      case _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji:
        node.textContent = node.dataset.alt || '';
        break;
    }
  });
  return fragment.innerHTML.trimEnd();
}
function escapeHtml(html) {
  const fragment = document.createElement('div');
  const text = document.createTextNode(html);
  fragment.appendChild(text);
  return fragment.innerHTML;
}

/***/ }),

/***/ "./src/components/middle/composer/helpers/getFilesFromDataTransferItems.ts":
/*!*********************************************************************************!*\
  !*** ./src/components/middle/composer/helpers/getFilesFromDataTransferItems.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getFilesFromDataTransferItems)
/* harmony export */ });
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../util/files */ "./src/util/files.ts");

async function getFilesFromDataTransferItems(dataTransferItems) {
  const files = [];
  function traverseFileTreePromise(entry, item) {
    return new Promise(resolve => {
      if (entry instanceof File) {
        files.push(entry);
        resolve(entry);
      } else if (entry.isFile) {
        const itemFile = item.getAsFile();
        entry.file(file => {
          files.push(file);
          resolve(file);
        }, () => {
          // iOS Safari throws an error "NotFoundError: Path does not exist" for files from the clipboard
          // https://stackoverflow.com/a/50059309
          if (itemFile) {
            files.push(itemFile);
          }
          resolve(itemFile);
        });
      } else if (entry.isDirectory) {
        const dirReader = entry.createReader();
        dirReader.readEntries(entries => {
          const entriesPromises = [];
          for (let i = 0; i < entries.length; i++) {
            entriesPromises.push(traverseFileTreePromise(entries[i], item));
          }
          resolve(Promise.all(entriesPromises));
        });
      }
    });
  }
  const entriesPromises = [];
  for (let i = 0; i < dataTransferItems.length; i++) {
    const item = dataTransferItems[i];
    if (item.kind === 'file') {
      const entry = item.webkitGetAsEntry() || item.getAsFile();
      if (entry) {
        entriesPromises.push(traverseFileTreePromise(entry, item));
      }
    }
  }
  await Promise.all(entriesPromises);
  return (0,_util_files__WEBPACK_IMPORTED_MODULE_0__.validateFiles)(files);
}

/***/ }),

/***/ "./src/components/middle/composer/helpers/prepareForRegExp.ts":
/*!********************************************************************!*\
  !*** ./src/components/middle/composer/helpers/prepareForRegExp.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   prepareForRegExp: () => (/* binding */ prepareForRegExp)
/* harmony export */ });
const RE_BR = /(<br>|<br\s?\/>)/g;
const RE_SPACE = /(&nbsp;|\u00A0)/g;
const RE_CLEAN_HTML = /(<div>|<\/div>)/gi;
const RE_EXTRA_NEW_LINE = /\n$/i;
function prepareForRegExp(html) {
  return html.replace(RE_SPACE, ' ').replace(RE_BR, '\n').replace(RE_CLEAN_HTML, '').replace(RE_EXTRA_NEW_LINE, '');
}

/***/ }),

/***/ "./src/components/middle/composer/helpers/renderKeyboardButtonText.tsx":
/*!*****************************************************************************!*\
  !*** ./src/components/middle/composer/helpers/renderKeyboardButtonText.tsx ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ renderKeyboardButtonText)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _util_replaceWithTeact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../util/replaceWithTeact */ "./src/util/replaceWithTeact.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");





function renderKeyboardButtonText(lang, button) {
  if (button.type === 'receipt') {
    return lang('PaymentReceipt');
  }
  if (button.type === 'buy') {
    return (0,_util_replaceWithTeact__WEBPACK_IMPORTED_MODULE_2__.replaceWithTeact)(button.text, _config__WEBPACK_IMPORTED_MODULE_1__.STARS_ICON_PLACEHOLDER, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_4__["default"], {
      className: "star-currency-icon",
      name: "star"
    }));
  }
  return (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_3__["default"])(button.text);
}

/***/ }),

/***/ "./src/components/middle/composer/helpers/selection.ts":
/*!*************************************************************!*\
  !*** ./src/components/middle/composer/helpers/selection.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isSelectionInsideInput: () => (/* binding */ isSelectionInsideInput)
/* harmony export */ });
const MAX_NESTING_PARENTS = 5;
function isSelectionInsideInput(selectionRange, inputId) {
  const {
    commonAncestorContainer
  } = selectionRange;
  let parentNode = commonAncestorContainer;
  let iterations = 1;
  while (parentNode && parentNode.id !== inputId && iterations < MAX_NESTING_PARENTS) {
    parentNode = parentNode.parentElement;
    iterations++;
  }
  return Boolean(parentNode && parentNode.id === inputId);
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useAttachmentModal.ts":
/*!********************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useAttachmentModal.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useAttachmentModal)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_memo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/memo */ "./src/util/memo.ts");
/* harmony import */ var _helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/buildAttachment */ "./src/components/middle/composer/helpers/buildAttachment.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");







function useAttachmentModal({
  attachments,
  fileSizeLimit,
  setHtml,
  setAttachments,
  chatId,
  canSendAudios,
  canSendVideos,
  canSendPhotos,
  canSendDocuments,
  insertNextText,
  editedMessage
}) {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const {
    openLimitReachedModal,
    showAllowedMessageTypesNotification,
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [shouldForceAsFile, setShouldForceAsFile] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [shouldForceCompression, setShouldForceCompression] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [shouldSuggestCompression, setShouldSuggestCompression] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const handleClearAttachments = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    setAttachments(_util_memo__WEBPACK_IMPORTED_MODULE_3__.MEMO_EMPTY_ARRAY);
    insertNextText();
  });
  const handleSetAttachments = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(newValue => {
    const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;
    if (!newAttachments.length) {
      handleClearAttachments();
      return;
    }
    if (newAttachments.some(attachment => {
      const type = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getAttachmentMediaType)(attachment);
      return type === 'audio' && !canSendAudios && !canSendDocuments || type === 'video' && !canSendVideos && !canSendDocuments || type === 'photo' && !canSendPhotos && !canSendDocuments || type === 'file' && !canSendDocuments;
    })) {
      showAllowedMessageTypesNotification({
        chatId
      });
    } else if (newAttachments.some(({
      size
    }) => size > fileSizeLimit)) {
      openLimitReachedModal({
        limit: 'uploadMaxFileparts'
      });
    } else {
      setAttachments(newAttachments);
      const shouldForce = newAttachments.some(attachment => {
        const type = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getAttachmentMediaType)(attachment);
        return type === 'audio' && !canSendAudios || type === 'video' && !canSendVideos || type === 'photo' && !canSendPhotos;
      });
      setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));
      setShouldForceCompression(!canSendDocuments);
    }
  });
  const handleAppendFiles = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(async (files, isSpoiler) => {
    if (editedMessage) {
      const newAttachment = await (0,_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_4__["default"])(files[0].name, files[0]);
      const canReplace = editedMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.canReplaceMessageMedia)(editedMessage, newAttachment);
      if (editedMessage?.groupedId) {
        if (canReplace) {
          handleSetAttachments([newAttachment]);
        } else {
          showNotification({
            message: lang('lng_edit_media_album_error')
          });
        }
      } else {
        handleSetAttachments([newAttachment]);
      }
    } else {
      const newAttachments = await Promise.all(files.map(file => (0,_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_4__["default"])(file.name, file, {
        shouldSendAsSpoiler: isSpoiler || undefined
      })));
      handleSetAttachments([...attachments, ...newAttachments]);
    }
  });
  const handleFileSelect = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(async (files, suggestCompression) => {
    if (editedMessage) {
      const newAttachment = await (0,_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_4__["default"])(files[0].name, files[0]);
      const canReplace = editedMessage && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.canReplaceMessageMedia)(editedMessage, newAttachment);
      if (editedMessage?.groupedId) {
        if (canReplace) {
          handleSetAttachments([newAttachment]);
        } else {
          showNotification({
            message: lang('lng_edit_media_album_error')
          });
        }
      } else {
        handleSetAttachments([newAttachment]);
      }
    } else {
      const newAttachments = await Promise.all(files.map(file => (0,_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_4__["default"])(file.name, file)));
      handleSetAttachments(newAttachments);
    }
    setShouldSuggestCompression(suggestCompression);
  });
  return {
    shouldSuggestCompression,
    handleAppendFiles,
    handleFileSelect,
    onCaptionUpdate: setHtml,
    handleClearAttachments,
    handleSetAttachments,
    shouldForceCompression,
    shouldForceAsFile
  };
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useChatCommandTooltip.ts":
/*!***********************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useChatCommandTooltip.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useChatCommandTooltip)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/prepareForRegExp */ "./src/components/middle/composer/helpers/prepareForRegExp.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");





const RE_COMMAND = /^\/([\w@]{1,32})?$/i;
const THROTTLE = 300;
function useChatCommandTooltip(isEnabled, getHtml, botCommands, chatBotCommands, quickReplies) {
  const [filteredBotCommands, setFilteredBotCommands] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [filteredQuickReplies, setFilteredQuickReplies] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_4__["default"])(false);
  const detectCommandThrottled = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_2__.useThrottledResolver)(() => {
    const html = getHtml();
    return isEnabled && html.startsWith('/') ? (0,_helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_1__.prepareForRegExp)(html).match(RE_COMMAND)?.[0].trim() : undefined;
  }, [getHtml, isEnabled], THROTTLE);
  const getCommand = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_3__["default"])(detectCommandThrottled, [detectCommandThrottled, getHtml], true);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const command = getCommand();
    const commands = botCommands || chatBotCommands;
    if (!command || !commands && !quickReplies) {
      setFilteredBotCommands(undefined);
      setFilteredQuickReplies(undefined);
      return;
    }
    const filter = command.substring(1);
    const nextFilteredBotCommands = commands?.filter(c => !filter || c.command.startsWith(filter));
    setFilteredBotCommands(nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined);
    const newFilteredQuickReplies = Object.values(quickReplies || {}).filter(quickReply => !filter || quickReply.shortcut.startsWith(filter));
    setFilteredQuickReplies(newFilteredQuickReplies?.length ? newFilteredQuickReplies : undefined);
  }, [getCommand, botCommands, chatBotCommands, quickReplies]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);
  return {
    isOpen: Boolean((filteredBotCommands?.length || filteredQuickReplies?.length) && !isManuallyClosed),
    close: markManuallyClosed,
    filteredBotCommands,
    filteredQuickReplies
  };
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useClipboardPaste.ts":
/*!*******************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useClipboardPaste.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_helpers_symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../global/helpers/symbols */ "./src/global/helpers/symbols.ts");
/* harmony import */ var _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/parseHtmlAsFormattedText */ "./src/util/parseHtmlAsFormattedText.ts");
/* harmony import */ var _helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/buildAttachment */ "./src/components/middle/composer/helpers/buildAttachment.ts");
/* harmony import */ var _helpers_cleanHtml__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/cleanHtml */ "./src/components/middle/composer/helpers/cleanHtml.ts");
/* harmony import */ var _helpers_getFilesFromDataTransferItems__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/getFilesFromDataTransferItems */ "./src/components/middle/composer/helpers/getFilesFromDataTransferItems.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");










const TYPE_HTML = 'text/html';
const DOCUMENT_TYPE_WORD = 'urn:schemas-microsoft-com:office:word';
const NAMESPACE_PREFIX_WORD = 'xmlns:w';
const VALID_TARGET_IDS = new Set([_config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_ID, _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_MODAL_ID, _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_STORY_INPUT_ID]);
const CLOSEST_CONTENT_EDITABLE_SELECTOR = 'div[contenteditable]';
const useClipboardPaste = (isActive, insertTextAndUpdateCursor, setAttachments, setNextText, editedMessage, shouldStripCustomEmoji, onCustomEmojiStripped) => {
  const {
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_9__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isActive) {
      return undefined;
    }
    async function handlePaste(e) {
      if (!e.clipboardData) {
        return;
      }
      const input = e.target?.closest(CLOSEST_CONTENT_EDITABLE_SELECTOR);
      if (!input || !VALID_TARGET_IDS.has(input.id)) {
        return;
      }
      e.preventDefault();

      // Some extensions can trigger paste into their panels without focus
      if (document.activeElement !== input) {
        return;
      }
      const pastedText = e.clipboardData.getData('text');
      const html = e.clipboardData.getData('text/html');
      let pastedFormattedText = html ? (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_helpers_cleanHtml__WEBPACK_IMPORTED_MODULE_7__.preparePastedHtml)(html), undefined, true) : undefined;
      if (pastedFormattedText && (0,_global_helpers_symbols__WEBPACK_IMPORTED_MODULE_4__.containsCustomEmoji)(pastedFormattedText) && shouldStripCustomEmoji) {
        pastedFormattedText = (0,_global_helpers_symbols__WEBPACK_IMPORTED_MODULE_4__.stripCustomEmoji)(pastedFormattedText);
        onCustomEmojiStripped?.();
      }
      const {
        items
      } = e.clipboardData;
      let files = [];
      if (items.length > 0) {
        files = await (0,_helpers_getFilesFromDataTransferItems__WEBPACK_IMPORTED_MODULE_8__["default"])(items);
        if (editedMessage) {
          files = files?.slice(0, 1);
        }
      }
      if (!files?.length && !pastedText) {
        return;
      }
      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : {
        text: pastedText
      };
      let isWordDocument = false;
      try {
        const parser = new DOMParser();
        const parsedDocument = parser.parseFromString(html, TYPE_HTML);
        isWordDocument = parsedDocument.documentElement.getAttribute(NAMESPACE_PREFIX_WORD) === DOCUMENT_TYPE_WORD;
      } catch (err) {
        // Ignore
      }
      const hasText = textToPaste && textToPaste.text;
      let shouldSetAttachments = files?.length && !isWordDocument;
      const newAttachments = files ? await Promise.all(files.map(file => (0,_helpers_buildAttachment__WEBPACK_IMPORTED_MODULE_6__["default"])(file.name, file))) : [];
      const canReplace = editedMessage && newAttachments?.length && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.canReplaceMessageMedia)(editedMessage, newAttachments[0]) || Boolean(hasText);
      const isUploadingDocumentSticker = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isUploadingFileSticker)(newAttachments[0]);
      const isInAlbum = editedMessage && editedMessage?.groupedId;
      if (editedMessage && isUploadingDocumentSticker) {
        showNotification({
          message: lang(isInAlbum ? 'lng_edit_media_album_error' : 'lng_edit_media_invalid_file')
        });
        return;
      }
      if (isInAlbum) {
        shouldSetAttachments = canReplace;
        if (!shouldSetAttachments) {
          showNotification({
            message: lang('lng_edit_media_album_error')
          });
          return;
        }
      }
      if (shouldSetAttachments) {
        setAttachments(editedMessage ? newAttachments : attachments => attachments.concat(newAttachments));
      }
      if (hasText) {
        if (shouldSetAttachments) {
          setNextText(textToPaste);
        } else {
          insertTextAndUpdateCursor(textToPaste, input?.id);
        }
      }
    }
    document.addEventListener('paste', handlePaste, false);
    return () => {
      document.removeEventListener('paste', handlePaste, false);
    };
  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped, setNextText, lang]);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useClipboardPaste);

/***/ }),

/***/ "./src/components/middle/composer/hooks/useCustomEmojiTooltip.ts":
/*!***********************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useCustomEmojiTooltip.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useCustomEmojiTooltip)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../lib/twemojiRegex */ "./src/lib/twemojiRegex.js");
/* harmony import */ var _util_focusEditableElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/focusEditableElement */ "./src/util/focusEditableElement.ts");
/* harmony import */ var _util_selection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../util/selection */ "./src/util/selection.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_customEmoji__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/customEmoji */ "./src/components/middle/composer/helpers/customEmoji.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");














const THROTTLE = 300;
const RE_ENDS_ON_EMOJI = new RegExp(`(${_lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_4__["default"].source})$`, 'g');
const RE_ENDS_ON_EMOJI_IMG = new RegExp(`${_config__WEBPACK_IMPORTED_MODULE_2__.EMOJI_IMG_REGEX.source}$`, 'g');
function useCustomEmojiTooltip(isEnabled, getHtml, setHtml, getSelectionRange, inputRef, customEmojis) {
  const {
    loadCustomEmojiForEmoji,
    clearCustomEmojiForEmoji
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_12__["default"])(false);
  const extractLastEmojiThrottled = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__.useThrottledResolver)(() => {
    const html = getHtml();
    if (!isEnabled || !html || !getSelectionRange()?.collapsed) return undefined;
    const hasEmoji = html.match(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_EMOJI_SUPPORTED ? _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_4__["default"] : _config__WEBPACK_IMPORTED_MODULE_2__.EMOJI_IMG_REGEX);
    if (!hasEmoji) return undefined;
    const htmlBeforeSelection = (0,_util_selection__WEBPACK_IMPORTED_MODULE_6__.getHtmlBeforeSelection)(inputRef.current);
    return htmlBeforeSelection.match(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_EMOJI_SUPPORTED ? RE_ENDS_ON_EMOJI : RE_ENDS_ON_EMOJI_IMG)?.[0];
  }, [getHtml, getSelectionRange, inputRef, isEnabled], THROTTLE);
  const getLastEmoji = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__["default"])(extractLastEmojiThrottled, [extractLastEmojiThrottled, getHtml, getSelectionRange], true);
  const isActive = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_11__["default"])(() => Boolean(getLastEmoji()), [getLastEmoji]);
  const hasCustomEmojis = Boolean(customEmojis?.length);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isEnabled || !isActive) return;
    const lastEmoji = getLastEmoji();
    if (lastEmoji) {
      if (!hasCustomEmojis) {
        loadCustomEmojiForEmoji({
          emoji: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_EMOJI_SUPPORTED ? lastEmoji : lastEmoji.match(/.+alt="(.+)"/)?.[1]
        });
      }
    } else {
      clearCustomEmojiForEmoji();
    }
  }, [isEnabled, isActive, getLastEmoji, hasCustomEmojis, clearCustomEmojiForEmoji, loadCustomEmojiForEmoji]);
  const insertCustomEmoji = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(emoji => {
    const lastEmoji = getLastEmoji();
    if (!isEnabled || !lastEmoji) return;
    const inputEl = inputRef.current;
    const htmlBeforeSelection = (0,_util_selection__WEBPACK_IMPORTED_MODULE_6__.getHtmlBeforeSelection)(inputEl);
    const regexText = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_EMOJI_SUPPORTED ? lastEmoji
    // Escape regexp special chars
    : lastEmoji.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
    const regex = new RegExp(`(${regexText})\\1*$`, '');
    const matched = htmlBeforeSelection.match(regex)[0];
    const count = matched.length / lastEmoji.length;
    const newHtml = htmlBeforeSelection.replace(regex, (0,_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_8__.buildCustomEmojiHtml)(emoji).repeat(count));
    const htmlAfterSelection = inputEl.innerHTML.substring(htmlBeforeSelection.length);
    setHtml(`${newHtml}${htmlAfterSelection}`);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestNextMutation)(() => {
      (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_5__["default"])(inputEl, true, true);
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);
  return {
    isCustomEmojiTooltipOpen: Boolean(isActive && hasCustomEmojis && !isManuallyClosed),
    closeCustomEmojiTooltip: markManuallyClosed,
    insertCustomEmoji
  };
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useDraft.ts":
/*!**********************************************************!*\
  !*** ./src/components/middle/composer/hooks/useDraft.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/parseHtmlAsFormattedText */ "./src/util/parseHtmlAsFormattedText.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../hooks/useLayoutEffectWithPrevDeps */ "./src/hooks/useLayoutEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useRunDebounced__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../hooks/useRunDebounced */ "./src/hooks/useRunDebounced.ts");
/* harmony import */ var _hooks_useStateRef__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../hooks/useStateRef */ "./src/hooks/useStateRef.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");
/* harmony import */ var _hooks_window_useBeforeUnload__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../hooks/window/useBeforeUnload */ "./src/hooks/window/useBeforeUnload.ts");













let isFrozen = false;
function freeze() {
  isFrozen = true;
  (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
    isFrozen = false;
  });
}
const useDraft = ({
  draft,
  chatId,
  threadId,
  getHtml,
  setHtml,
  editedMessage,
  isDisabled
}) => {
  const {
    saveDraft,
    clearDraft,
    loadCustomEmojis
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const isTouchedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const html = getHtml();
    const isLocalDraft = draft?.isLocal !== undefined;
    if ((0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_6__.getTextWithEntitiesAsHtml)(draft?.text) === html && !isLocalDraft) {
      isTouchedRef.current = false;
    } else {
      isTouchedRef.current = true;
    }
  }, [draft, getHtml]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    isTouchedRef.current = false;
  }, [chatId, threadId]);
  const isEditing = Boolean(editedMessage);
  const updateDraft = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])((prevState = {}) => {
    if (isDisabled || isEditing || !isTouchedRef.current) return;
    const html = getHtml();
    if (html) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
        saveDraft({
          chatId: prevState.chatId ?? chatId,
          threadId: prevState.threadId ?? threadId,
          text: (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_5__["default"])(html)
        });
      });
    } else {
      clearDraft({
        chatId: prevState.chatId ?? chatId,
        threadId: prevState.threadId ?? threadId,
        shouldKeepReply: true
      });
    }
  });
  const runDebouncedForSaveDraft = (0,_hooks_useRunDebounced__WEBPACK_IMPORTED_MODULE_9__["default"])(_config__WEBPACK_IMPORTED_MODULE_3__.DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);

  // Restore draft on chat change
  (0,_hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_8__["default"])(([prevChatId, prevThreadId, prevDraft]) => {
    if (isDisabled) {
      return;
    }
    const isTouched = isTouchedRef.current;
    if (chatId === prevChatId && threadId === prevThreadId) {
      if (isTouched && !draft) return; // Prevent reset from other client if we have local edits
      if (!draft && prevDraft) {
        setHtml('');
      }
      if (isTouched) return;
    }
    if (editedMessage || !draft) {
      return;
    }
    setHtml((0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_6__.getTextWithEntitiesAsHtml)(draft.text));
    const customEmojiIds = draft.text?.entities?.map(entity => entity.type === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.CustomEmoji && entity.documentId).filter(Boolean) || [];
    if (customEmojiIds.length) loadCustomEmojis({
      ids: customEmojiIds
    });
  }, [chatId, threadId, draft, getHtml, setHtml, editedMessage, isDisabled]);

  // Save draft on chat change. Should be layout effect to read correct html on cleanup
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (isDisabled) {
      return undefined;
    }
    return () => {
      if (!isEditing) {
        updateDraft({
          chatId,
          threadId
        });
      }
      freeze();
    };
  }, [chatId, threadId, isEditing, updateDraft, isDisabled]);
  const chatIdRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_10__.useStateRef)(chatId);
  const threadIdRef = (0,_hooks_useStateRef__WEBPACK_IMPORTED_MODULE_10__.useStateRef)(threadId);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled || isFrozen) {
      return;
    }
    if (!getHtml()) {
      updateDraft();
      return;
    }
    const scopedСhatId = chatIdRef.current;
    const scopedThreadId = threadIdRef.current;
    runDebouncedForSaveDraft(() => {
      if (chatIdRef.current === scopedСhatId && threadIdRef.current === scopedThreadId) {
        updateDraft();
      }
    });
  }, [chatIdRef, getHtml, isDisabled, runDebouncedForSaveDraft, threadIdRef, updateDraft]);
  (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_11__["default"])(updateDraft);
  (0,_hooks_window_useBeforeUnload__WEBPACK_IMPORTED_MODULE_12__["default"])(updateDraft);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useDraft);

/***/ }),

/***/ "./src/components/middle/composer/hooks/useEditing.ts":
/*!************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useEditing.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_focusEditableElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../util/focusEditableElement */ "./src/util/focusEditableElement.ts");
/* harmony import */ var _util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../util/parseHtmlAsFormattedText */ "./src/util/parseHtmlAsFormattedText.ts");
/* harmony import */ var _common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../common/helpers/renderTextWithEntities */ "./src/components/common/helpers/renderTextWithEntities.tsx");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");
/* harmony import */ var _hooks_window_useBeforeUnload__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../hooks/window/useBeforeUnload */ "./src/hooks/window/useBeforeUnload.ts");















const URL_ENTITIES = new Set([_api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.TextUrl, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.Url]);
const DEBOUNCE_MS = 300;
const useEditing = (getHtml, setHtml, editedMessage, resetComposer, chatId, threadId, type, draft, editingDraft) => {
  const {
    editMessage,
    setEditingDraft,
    toggleMessageWebPage,
    openDeleteMessageModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [shouldForceShowEditing, setShouldForceShowEditing] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const replyingToId = draft?.replyInfo?.replyToMsgId;
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_11__["default"])(([prevEditedMessage, prevReplyingToId]) => {
    if (!editedMessage) {
      return;
    }
    if (replyingToId && prevReplyingToId !== replyingToId) {
      setHtml('');
      setShouldForceShowEditing(false);
      return;
    }
    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {
      return;
    }
    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;
    const html = (0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_8__.getTextWithEntitiesAsHtml)(text);
    setHtml(html);
    setShouldForceShowEditing(true);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestNextMutation)(() => {
      const messageInput = document.querySelector(_config__WEBPACK_IMPORTED_MODULE_3__.EDITABLE_INPUT_CSS_SELECTOR);
      if (messageInput) {
        (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_6__["default"])(messageInput, true);
      }
    });
  }, [editedMessage, replyingToId, editingDraft, setHtml]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!editedMessage) {
      return;
    }
    const shouldSetNoWebPage = !('webPage' in editedMessage.content) && editedMessage.content.text?.entities?.some(entity => URL_ENTITIES.has(entity.type));
    toggleMessageWebPage({
      chatId,
      threadId,
      noWebPage: shouldSetNoWebPage
    });
  }, [chatId, threadId, editedMessage]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!editedMessage) return undefined;
    return () => {
      const edited = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_7__["default"])(getHtml());
      const update = edited.text.length ? edited : undefined;
      setEditingDraft({
        chatId,
        threadId,
        type,
        text: update
      });
    };
  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);
  const detectLinkDebounced = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__.useDebouncedResolver)(() => {
    if (!editedMessage) return false;
    const edited = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_7__["default"])(getHtml());
    return !('webPage' in editedMessage.content) && editedMessage.content.text?.entities?.some(entity => URL_ENTITIES.has(entity.type)) && !edited.entities?.some(entity => URL_ENTITIES.has(entity.type));
  }, [editedMessage, getHtml], DEBOUNCE_MS, true);
  const getShouldResetNoWebPageDebounced = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__["default"])(detectLinkDebounced, [detectLinkDebounced, getHtml], true);
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_11__["default"])(([prevEditedMessage]) => {
    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {
      return;
    }
    if (getShouldResetNoWebPageDebounced()) {
      toggleMessageWebPage({
        chatId,
        threadId,
        noWebPage: false
      });
    }
  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);
  const restoreNewDraftAfterEditing = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    if (!draft) return;

    // Run one frame after editing draft reset
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestMeasure)(() => {
      setHtml((0,_common_helpers_renderTextWithEntities__WEBPACK_IMPORTED_MODULE_8__.getTextWithEntitiesAsHtml)(draft.text));

      // Wait one more frame until new HTML is rendered
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_4__.requestNextMutation)(() => {
        const messageInput = document.querySelector(_config__WEBPACK_IMPORTED_MODULE_3__.EDITABLE_INPUT_CSS_SELECTOR);
        if (messageInput) {
          (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_6__["default"])(messageInput, true);
        }
      });
    });
  });
  const handleEditCancel = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    resetComposer();
    restoreNewDraftAfterEditing();
  });
  const handleEditComplete = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    const {
      text,
      entities
    } = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_7__["default"])(getHtml());
    if (!editedMessage) {
      return;
    }
    if (!text && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_5__.hasMessageMedia)(editedMessage)) {
      openDeleteMessageModal({
        isSchedule: type === 'scheduled',
        message: editedMessage
      });
      return;
    }
    editMessage({
      messageList: {
        chatId,
        threadId,
        type
      },
      text,
      entities
    });
    resetComposer();
    restoreNewDraftAfterEditing();
  });
  const handleBlur = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    if (!editedMessage) return;
    const edited = (0,_util_parseHtmlAsFormattedText__WEBPACK_IMPORTED_MODULE_7__["default"])(getHtml());
    const update = edited.text.length ? edited : undefined;
    setEditingDraft({
      chatId,
      threadId,
      type,
      text: update
    });
  });
  (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_13__["default"])(handleBlur);
  (0,_hooks_window_useBeforeUnload__WEBPACK_IMPORTED_MODULE_14__["default"])(handleBlur);
  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useEditing);

/***/ }),

/***/ "./src/components/middle/composer/hooks/useEmojiTooltip.ts":
/*!*****************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useEmojiTooltip.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useEmojiTooltip)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_emoji_emoji__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/emoji/emoji */ "./src/util/emoji/emoji.ts");
/* harmony import */ var _util_focusEditableElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../util/focusEditableElement */ "./src/util/focusEditableElement.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_memo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../util/memo */ "./src/util/memo.ts");
/* harmony import */ var _util_memoized__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../util/memoized */ "./src/util/memoized.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _helpers_customEmoji__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../helpers/customEmoji */ "./src/components/middle/composer/helpers/customEmoji.ts");
/* harmony import */ var _helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/prepareForRegExp */ "./src/components/middle/composer/helpers/prepareForRegExp.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");

















let emojiDataPromise;
let emojiRawData;
let emojiData;
let RE_EMOJI_SEARCH;
let RE_LOWERCASE_TEST;
const EMOJIS_LIMIT = 36;
const FILTER_MIN_LENGTH = 2;
const THROTTLE = 300;
const prepareRecentEmojisMemo = (0,_util_memoized__WEBPACK_IMPORTED_MODULE_9__["default"])(prepareRecentEmojis);
const prepareLibraryMemo = (0,_util_memoized__WEBPACK_IMPORTED_MODULE_9__["default"])(prepareLibrary);
const searchInLibraryMemo = (0,_util_memoized__WEBPACK_IMPORTED_MODULE_9__["default"])(searchInLibrary);
try {
  RE_EMOJI_SEARCH = /(^|\s):(?!\s)[-+_:'\s\p{L}\p{N}]*$/gui;
  RE_LOWERCASE_TEST = /\p{Ll}/u;
} catch (e) {
  // Support for older versions of firefox
  RE_EMOJI_SEARCH = /(^|\s):(?!\s)[-+_:'\s\d\wа-яёґєії]*$/gi;
  RE_LOWERCASE_TEST = /[a-zяёґєії]/;
}
function useEmojiTooltip(isEnabled, getHtml, setHtml, inputId = _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_ID, recentEmojiIds, baseEmojiKeywords, emojiKeywords) {
  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_15__["default"])(false);
  const [byId, setById] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [filteredEmojis, setFilteredEmojis] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(_util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY);
  const [filteredCustomEmojis, setFilteredCustomEmojis] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(_util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY);

  // Initialize data on first render
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isEnabled) return;
    function exec() {
      setById(emojiData.emojis);
    }
    if (emojiData) {
      exec();
    } else {
      ensureEmojiData().then(exec);
    }
  }, [isEnabled]);
  const detectEmojiCodeThrottled = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_13__.useThrottledResolver)(() => {
    const html = getHtml();
    return isEnabled && html.includes(':') ? (0,_helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_12__.prepareForRegExp)(html).match(RE_EMOJI_SEARCH)?.[0].trim() : undefined;
  }, [getHtml, isEnabled], THROTTLE);
  const getEmojiCode = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_14__["default"])(detectEmojiCodeThrottled, [detectEmojiCodeThrottled, getHtml], true);
  const updateFiltered = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])(emojis => {
    setFilteredEmojis(emojis);
    if (emojis === _util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY) {
      setFilteredCustomEmojis(_util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY);
      return;
    }
    const nativeEmojis = emojis.map(emoji => emoji.native);
    const customEmojis = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.uniqueByField)((0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCustomEmojiForEmojis)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), nativeEmojis), 'id');
    setFilteredCustomEmojis(customEmojis);
  });
  const insertEmoji = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_16__["default"])((emoji, isForce = false) => {
    const html = getHtml();
    if (!html) return;
    const atIndex = html.lastIndexOf(':', isForce ? html.lastIndexOf(':') - 1 : undefined);
    if (atIndex !== -1) {
      const emojiHtml = typeof emoji === 'string' ? (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_10__["default"])(emoji, ['emoji_html']) : (0,_helpers_customEmoji__WEBPACK_IMPORTED_MODULE_11__.buildCustomEmojiHtml)(emoji);
      setHtml(`${html.substring(0, atIndex)}${emojiHtml}`);
      const messageInput = inputId === _config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_ID ? document.querySelector(_config__WEBPACK_IMPORTED_MODULE_2__.EDITABLE_INPUT_CSS_SELECTOR) : document.getElementById(inputId);
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestNextMutation)(() => {
        (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_6__["default"])(messageInput, true, true);
      });
    }
    updateFiltered(_util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const emojiCode = getEmojiCode();
    if (!emojiCode || !byId) {
      updateFiltered(_util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY);
      return;
    }
    const newShouldAutoInsert = emojiCode.length > 2 && emojiCode.endsWith(':');
    const filter = emojiCode.substring(1, newShouldAutoInsert ? 1 + emojiCode.length - 2 : undefined);
    let matched = _util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY;
    if (!filter) {
      matched = prepareRecentEmojisMemo(byId, recentEmojiIds, EMOJIS_LIMIT);
    } else if (filter.length === 1 && RE_LOWERCASE_TEST.test(filter) || filter.length >= FILTER_MIN_LENGTH) {
      const library = prepareLibraryMemo(byId, baseEmojiKeywords, emojiKeywords);
      matched = searchInLibraryMemo(library, filter.toLowerCase(), EMOJIS_LIMIT);
    }
    if (!matched.length) {
      updateFiltered(_util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY);
      return;
    }
    if (newShouldAutoInsert) {
      insertEmoji(matched[0].native, true);
    } else {
      updateFiltered(matched);
    }
  }, [baseEmojiKeywords, byId, getEmojiCode, emojiKeywords, insertEmoji, recentEmojiIds, updateFiltered]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);
  return {
    isEmojiTooltipOpen: Boolean(filteredEmojis.length || filteredCustomEmojis.length) && !isManuallyClosed,
    closeEmojiTooltip: markManuallyClosed,
    filteredEmojis,
    filteredCustomEmojis,
    insertEmoji
  };
}
async function ensureEmojiData() {
  if (!emojiDataPromise) {
    emojiDataPromise = __webpack_require__.e(/*! import() */ "vendors-node_modules_emoji-data-ios_emoji-data_json").then(__webpack_require__.t.bind(__webpack_require__, /*! emoji-data-ios/emoji-data.json */ "./node_modules/emoji-data-ios/emoji-data.json", 19));
    emojiRawData = (await emojiDataPromise).default;
    emojiData = (0,_util_emoji_emoji__WEBPACK_IMPORTED_MODULE_5__.uncompressEmoji)(emojiRawData);
  }
  return emojiDataPromise;
}
function prepareRecentEmojis(byId, recentEmojiIds, limit) {
  if (!byId || !recentEmojiIds.length) {
    return _util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY;
  }
  return Object.values((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.pickTruthy)(byId, recentEmojiIds)).slice(0, limit);
}
function prepareLibrary(byId, baseEmojiKeywords, emojiKeywords) {
  const emojis = Object.values(byId);
  const byNative = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.buildCollectionByKey)(emojis, 'native');
  const baseEmojisByKeyword = baseEmojiKeywords ? (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.mapValues)(baseEmojiKeywords, natives => {
    return Object.values((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.pickTruthy)(byNative, natives));
  }) : {};
  const emojisByKeyword = emojiKeywords ? (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.mapValues)(emojiKeywords, natives => {
    return Object.values((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.pickTruthy)(byNative, natives));
  }) : {};
  const byKeyword = {
    ...baseEmojisByKeyword,
    ...emojisByKeyword
  };
  const keywords = [].concat(Object.keys(baseEmojisByKeyword), Object.keys(emojisByKeyword));
  const byName = emojis.reduce((result, emoji) => {
    emoji.names.forEach(name => {
      if (!result[name]) {
        result[name] = [];
      }
      result[name].push(emoji);
    });
    return result;
  }, {});
  const names = Object.keys(byName);
  const maxKeyLength = keywords.reduce((max, keyword) => Math.max(max, keyword.length), 0);
  return {
    byKeyword,
    keywords,
    byName,
    names,
    maxKeyLength
  };
}
function searchInLibrary(library, filter, limit) {
  const {
    byKeyword,
    keywords,
    byName,
    names,
    maxKeyLength
  } = library;
  let matched = [];
  if (filter.length > maxKeyLength) {
    return _util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY;
  }
  const matchedKeywords = keywords.filter(keyword => keyword.startsWith(filter)).sort();
  matched = matched.concat(Object.values((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.pickTruthy)(byKeyword, matchedKeywords)).flat());

  // Also search by names, which is useful for non-English languages
  const matchedNames = names.filter(name => name.startsWith(filter));
  matched = matched.concat(Object.values((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.pickTruthy)(byName, matchedNames)).flat());
  matched = (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_7__.unique)(matched);
  if (!matched.length) {
    return _util_memo__WEBPACK_IMPORTED_MODULE_8__.MEMO_EMPTY_ARRAY;
  }
  return matched.slice(0, limit);
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useInlineBotTooltip.ts":
/*!*********************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useInlineBotTooltip.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useInlineBotTooltip)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_memoized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../util/memoized */ "./src/util/memoized.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");








const THROTTLE = 300;
const INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\u00A0\u0020]+(.*)/is;
const HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\u00A0\u0020]+\n{2,}/i;
const MEMO_NO_RESULT = {
  username: '',
  query: '',
  canShowHelp: false,
  usernameLowered: ''
};
const tempEl = document.createElement('div');
function useInlineBotTooltip(isEnabled, chatId, getHtml, inlineBots) {
  const {
    queryInlineBot,
    resetInlineBot,
    resetAllInlineBots
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_5__["default"])(false);
  const extractBotQueryThrottled = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_3__.useThrottledResolver)(() => {
    const html = getHtml();
    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;
  }, [getHtml, isEnabled], THROTTLE);
  const {
    username,
    query,
    canShowHelp,
    usernameLowered
  } = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_4__["default"])(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_7__["default"])(([prevUsername]) => {
    if (prevUsername) {
      resetInlineBot({
        username: prevUsername
      });
    }
  }, [username, resetInlineBot]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!usernameLowered) return;
    queryInlineBot({
      chatId,
      username: usernameLowered,
      query
    });
  }, [chatId, query, queryInlineBot, usernameLowered]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);
  const {
    id: botId,
    switchPm,
    switchWebview,
    offset,
    results,
    isGallery,
    help
  } = usernameLowered && inlineBots?.[usernameLowered] || {};
  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isOpen && !username) {
      resetAllInlineBots();
    }
  }, [isOpen, resetAllInlineBots, username]);
  const loadMore = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    if (!usernameLowered) return;
    queryInlineBot({
      chatId,
      username: usernameLowered,
      query,
      offset
    });
  });
  return {
    isOpen,
    botId,
    isGallery,
    switchPm,
    switchWebview,
    results,
    closeTooltip: markManuallyClosed,
    help: canShowHelp && help ? `@${username} ${help}` : undefined,
    loadMore
  };
}
const buildQueryStateMemo = (0,_util_memoized__WEBPACK_IMPORTED_MODULE_2__["default"])((username, query, canShowHelp) => ({
  username,
  query,
  canShowHelp,
  usernameLowered: username.toLowerCase()
}));
function parseBotQuery(html) {
  if (!html.startsWith('@')) {
    return MEMO_NO_RESULT;
  }
  const text = getPlainText(html);
  const result = text.match(INLINE_BOT_QUERY_REGEXP);
  if (!result) {
    return MEMO_NO_RESULT;
  }
  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));
}
function getPlainText(html) {
  tempEl.innerHTML = html.replace(/<br>/g, '\n');
  tempEl.querySelectorAll('[alt]').forEach(el => {
    if (!el.innerText) {
      el.innerText = el.getAttribute('alt');
    }
  });
  return tempEl.innerText;
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useInputCustomEmojis.ts":
/*!**********************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useInputCustomEmojis.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useInputCustomEmojis)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _lib_rlottie_RLottie_async__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/rlottie/RLottie.async */ "./src/lib/rlottie/RLottie.async.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_AbsoluteVideo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/AbsoluteVideo */ "./src/util/AbsoluteVideo.ts");
/* harmony import */ var _util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../util/emoji/customEmojiManager */ "./src/util/emoji/customEmojiManager.ts");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../util/math */ "./src/util/math.ts");
/* harmony import */ var _util_switchTheme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../util/switchTheme */ "./src/util/switchTheme.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_stickers_useColorFilter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../hooks/stickers/useColorFilter */ "./src/hooks/stickers/useColorFilter.tsx");
/* harmony import */ var _hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../hooks/stickers/useDynamicColorListener */ "./src/hooks/stickers/useDynamicColorListener.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../hooks/useThrottledCallback */ "./src/hooks/useThrottledCallback.ts");
/* harmony import */ var _hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../hooks/window/useBackgroundMode */ "./src/hooks/window/useBackgroundMode.ts");
/* harmony import */ var _hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../hooks/window/useDevicePixelRatio */ "./src/hooks/window/useDevicePixelRatio.ts");


















const SIZE = 1.25 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__.REM;
const THROTTLE_MS = 300;
function useInputCustomEmojis(getHtml, inputRef, sharedCanvasRef, sharedCanvasHqRef, absoluteContainerRef, prefixId, canPlayAnimatedEmojis, isReady, isActive) {
  const customColor = (0,_hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_11__["default"])(inputRef, !isReady);
  const colorFilter = (0,_hooks_stickers_useColorFilter__WEBPACK_IMPORTED_MODULE_10__["default"])(customColor, true);
  const dpr = (0,_hooks_window_useDevicePixelRatio__WEBPACK_IMPORTED_MODULE_17__["default"])();
  const playersById = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Map());
  const clearPlayers = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(ids => {
    ids.forEach(id => {
      const player = playersById.current.get(id);
      if (player) {
        player.destroy();
        playersById.current.delete(id);
      }
    });
  });
  const synchronizeElements = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    if (!isReady || !inputRef.current || !sharedCanvasRef.current || !sharedCanvasHqRef.current) return;
    const global = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
    const playerIdsToClear = new Set(playersById.current.keys());
    const customEmojis = Array.from(inputRef.current.querySelectorAll('.custom-emoji'));
    customEmojis.forEach(element => {
      if (!element.dataset.uniqueId) {
        return;
      }
      const playerId = `${prefixId}${element.dataset.uniqueId}${customColor || ''}`;
      const documentId = element.dataset.documentId;
      playerIdsToClear.delete(playerId);
      const mediaUrl = (0,_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_6__.getCustomEmojiMediaDataForInput)(documentId);
      if (!mediaUrl) {
        return;
      }
      const canvasBounds = sharedCanvasRef.current.getBoundingClientRect();
      const elementBounds = element.getBoundingClientRect();
      const x = (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.round)((elementBounds.left - canvasBounds.left) / canvasBounds.width, 4);
      const y = (0,_util_math__WEBPACK_IMPORTED_MODULE_7__.round)((elementBounds.top - canvasBounds.top) / canvasBounds.height, 4);
      if (playersById.current.has(playerId)) {
        const player = playersById.current.get(playerId);
        player.updatePosition(x, y);
        return;
      }
      const customEmoji = global.customEmojis.byId[documentId];
      if (!customEmoji) {
        return;
      }
      const isHq = customEmoji?.stickerSetInfo && (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectIsAlwaysHighPriorityEmoji)(global, customEmoji.stickerSetInfo);
      const renderId = [prefixId, documentId, customColor, dpr].filter(Boolean).join('_');
      createPlayer({
        customEmoji,
        sharedCanvasRef,
        sharedCanvasHqRef,
        absoluteContainerRef,
        renderId,
        viewId: playerId,
        mediaUrl,
        isHq,
        position: {
          x,
          y
        },
        textColor: customColor,
        colorFilter
      }).then(animation => {
        if (canPlayAnimatedEmojis) {
          animation.play();
        }
        playersById.current.set(playerId, animation);
      });
    });
    clearPlayers(Array.from(playerIdsToClear));
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return (0,_util_emoji_customEmojiManager__WEBPACK_IMPORTED_MODULE_6__.addCustomEmojiInputRenderCallback)(synchronizeElements);
  }, [synchronizeElements]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const activePlayersById = playersById.current;
    // Always clear players on unmount
    return () => {
      clearPlayers(Array.from(activePlayersById.keys()));
    };
  }, []);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!getHtml() || !inputRef.current || !sharedCanvasRef.current || !isActive || !isReady) {
      clearPlayers(Array.from(playersById.current.keys()));
      return;
    }

    // Wait one frame for DOM to update
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(() => {
      synchronizeElements();
    });
  }, [getHtml, synchronizeElements, inputRef, clearPlayers, sharedCanvasRef, isActive, isReady]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    document.documentElement.style.setProperty('--input-custom-emoji-filter', colorFilter || 'none');
  }, [colorFilter]);
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_12__["default"])(([prevCustomColor]) => {
    if (prevCustomColor !== undefined && customColor !== prevCustomColor) {
      synchronizeElements();
    }
  }, [customColor, synchronizeElements]);
  const throttledSynchronizeElements = (0,_hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(synchronizeElements, [synchronizeElements], THROTTLE_MS, false);
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_14__["default"])(sharedCanvasRef, throttledSynchronizeElements);
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_12__["default"])(([prevDpr]) => {
    if (dpr !== prevDpr) {
      clearPlayers(Array.from(playersById.current.keys()));
      synchronizeElements();
    }
  }, [dpr, synchronizeElements]);
  const freezeAnimation = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    playersById.current.forEach(player => {
      player.pause();
    });
  });
  const unfreezeAnimation = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    if (!canPlayAnimatedEmojis) {
      return;
    }
    playersById.current?.forEach(player => {
      player.play();
    });
  });
  const unfreezeAnimationOnRaf = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_13__["default"])(() => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMeasure)(unfreezeAnimation);
  });

  // Pausing frame may not happen in background,
  // so we need to make sure it happens right after focusing,
  // then we can play again.
  (0,_hooks_window_useBackgroundMode__WEBPACK_IMPORTED_MODULE_16__["default"])(freezeAnimation, unfreezeAnimationOnRaf);
}
async function createPlayer({
  customEmoji,
  sharedCanvasRef,
  sharedCanvasHqRef,
  absoluteContainerRef,
  renderId,
  viewId,
  mediaUrl,
  position,
  isHq,
  textColor,
  colorFilter
}) {
  if (customEmoji.isLottie) {
    const color = customEmoji.shouldUseTextColor && textColor ? (0,_util_switchTheme__WEBPACK_IMPORTED_MODULE_8__.hexToRgb)(textColor) : undefined;
    const RLottie = await (0,_lib_rlottie_RLottie_async__WEBPACK_IMPORTED_MODULE_3__.ensureRLottie)();
    const lottie = RLottie.init(mediaUrl, isHq ? sharedCanvasHqRef.current : sharedCanvasRef.current, renderId, {
      size: SIZE,
      coords: position,
      isLowPriority: !isHq
    }, viewId, color ? [color.r, color.g, color.b] : undefined);
    return {
      play: () => lottie.play(),
      pause: () => lottie.pause(),
      destroy: () => lottie.removeView(viewId),
      updatePosition: (x, y) => {
        return lottie.setSharedCanvasCoords(viewId, {
          x,
          y
        });
      }
    };
  }
  if (customEmoji.isVideo) {
    const style = customEmoji.shouldUseTextColor && colorFilter ? `filter: ${colorFilter};` : undefined;
    const absoluteVideo = new _util_AbsoluteVideo__WEBPACK_IMPORTED_MODULE_5__["default"](mediaUrl, absoluteContainerRef.current, {
      size: SIZE,
      position,
      style
    });
    return {
      play: () => absoluteVideo.play(),
      pause: () => absoluteVideo.pause(),
      destroy: () => absoluteVideo.destroy(),
      updatePosition: (x, y) => absoluteVideo.updatePosition({
        x,
        y
      })
    };
  }
  throw new Error('Unsupported custom emoji type');
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useMentionTooltip.ts":
/*!*******************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useMentionTooltip.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMentionTooltip)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_focusEditableElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/focusEditableElement */ "./src/util/focusEditableElement.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_selection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../util/selection */ "./src/util/selection.ts");
/* harmony import */ var _helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/prepareForRegExp */ "./src/components/middle/composer/helpers/prepareForRegExp.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");













const THROTTLE = 300;
let RE_USERNAME_SEARCH;
try {
  RE_USERNAME_SEARCH = /(^|\s)@[-_\p{L}\p{M}\p{N}]*$/gui;
} catch (e) {
  // Support for older versions of Firefox
  RE_USERNAME_SEARCH = /(^|\s)@[-_\d\wа-яёґєії]*$/gi;
}
function useMentionTooltip(isEnabled, getHtml, setHtml, getSelectionRange, inputRef, groupChatMembers, topInlineBotIds, currentUserId) {
  const [filteredUsers, setFilteredUsers] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_11__["default"])(false);
  const extractUsernameTagThrottled = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__.useThrottledResolver)(() => {
    const html = getHtml();
    if (!isEnabled || !getSelectionRange()?.collapsed || !html.includes('@')) return undefined;
    const htmlBeforeSelection = (0,_util_selection__WEBPACK_IMPORTED_MODULE_7__.getHtmlBeforeSelection)(inputRef.current);
    return (0,_helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_8__.prepareForRegExp)(htmlBeforeSelection).match(RE_USERNAME_SEARCH)?.[0].trim();
  }, [isEnabled, getHtml, getSelectionRange, inputRef], THROTTLE);
  const getUsernameTag = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__["default"])(extractUsernameTagThrottled, [extractUsernameTagThrottled, getHtml, getSelectionRange], true);
  const getWithInlineBots = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    return isEnabled && getHtml().startsWith('@');
  }, [getHtml, isEnabled]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const usernameTag = getUsernameTag();
    if (!usernameTag || !(groupChatMembers || topInlineBotIds)) {
      setFilteredUsers(undefined);
      return;
    }

    // No need for expensive global updates on users, so we avoid them
    const usersById = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().users.byId;
    if (!usersById) {
      setFilteredUsers(undefined);
      return;
    }
    const memberIds = groupChatMembers?.reduce((acc, member) => {
      if (member.userId !== currentUserId) {
        acc.push(member.userId);
      }
      return acc;
    }, []);
    const filter = usernameTag.substring(1);
    const filteredIds = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.filterUsersByName)((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.unique)([...(getWithInlineBots() && topInlineBotIds || []), ...(memberIds || [])]), usersById, filter);
    setFilteredUsers(Object.values((0,_util_iteratees__WEBPACK_IMPORTED_MODULE_6__.pickTruthy)(usersById, filteredIds)));
  }, [currentUserId, groupChatMembers, topInlineBotIds, getUsernameTag, getWithInlineBots]);
  const insertMention = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])((user, forceFocus = false) => {
    if (!user.usernames && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getUserFirstOrLastName)(user)) {
      return;
    }
    const mainUsername = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getMainUsername)(user);
    const userFirstOrLastName = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_4__.getUserFirstOrLastName)(user) || '';
    const htmlToInsert = mainUsername ? `@${mainUsername}` : `<a
          class="text-entity-link"
          data-entity-type="${_api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMessageEntityTypes.MentionName}"
          data-user-id="${user.id}"
          contenteditable="false"
          dir="auto"
        >${userFirstOrLastName}</a>`;
    const inputEl = inputRef.current;
    const htmlBeforeSelection = (0,_util_selection__WEBPACK_IMPORTED_MODULE_7__.getHtmlBeforeSelection)(inputEl);
    const fixedHtmlBeforeSelection = cleanWebkitNewLines(htmlBeforeSelection);
    const atIndex = fixedHtmlBeforeSelection.lastIndexOf('@');
    const shiftCaretPosition = (mainUsername ? mainUsername.length + 1 : userFirstOrLastName.length) - (fixedHtmlBeforeSelection.length - atIndex);
    if (atIndex !== -1) {
      const newHtml = `${fixedHtmlBeforeSelection.substr(0, atIndex)}${htmlToInsert}&nbsp;`;
      const htmlAfterSelection = cleanWebkitNewLines(inputEl.innerHTML).substring(fixedHtmlBeforeSelection.length);
      const caretPosition = (0,_util_selection__WEBPACK_IMPORTED_MODULE_7__.getCaretPosition)(inputEl);
      setHtml(`${newHtml}${htmlAfterSelection}`);
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestNextMutation)(() => {
        const newCaretPosition = caretPosition + shiftCaretPosition + 1;
        (0,_util_focusEditableElement__WEBPACK_IMPORTED_MODULE_5__["default"])(inputEl, forceFocus);
        if (newCaretPosition >= 0) {
          (0,_util_selection__WEBPACK_IMPORTED_MODULE_7__.setCaretPosition)(inputEl, newCaretPosition);
        }
      });
    }
    setFilteredUsers(undefined);
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);
  return {
    isMentionTooltipOpen: Boolean(filteredUsers?.length && !isManuallyClosed),
    closeMentionTooltip: markManuallyClosed,
    insertMention,
    mentionFilteredUsers: filteredUsers
  };
}

// Webkit replaces the line break with the `<div><br /></div>` or `<div></div>` code.
// It is necessary to clean the html to a single form before processing.
function cleanWebkitNewLines(html) {
  return html.replace(/<div>(<br>|<br\s?\/>)?<\/div>/gi, '<br>');
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useStickerTooltip.ts":
/*!*******************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useStickerTooltip.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useStickerTooltip)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../config */ "./src/config.ts");
/* harmony import */ var _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/twemojiRegex */ "./src/lib/twemojiRegex.js");
/* harmony import */ var _util_emoji_parseEmojiOnlyString__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../util/emoji/parseEmojiOnlyString */ "./src/util/emoji/parseEmojiOnlyString.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/prepareForRegExp */ "./src/components/middle/composer/helpers/prepareForRegExp.ts");
/* harmony import */ var _hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../hooks/useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../hooks/useDerivedState */ "./src/hooks/useDerivedState.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");










const MAX_LENGTH = 8;
const STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${_config__WEBPACK_IMPORTED_MODULE_2__.EMOJI_IMG_REGEX.source}$`, 'g');
function useStickerTooltip(isEnabled, getHtml, stickers) {
  const {
    loadStickersForEmoji,
    clearStickersForEmoji
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_9__["default"])(false);
  const getSingleEmoji = (0,_hooks_useDerivedSignal__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    const html = getHtml();
    if (!isEnabled || !html || _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH) return undefined;
    const hasEmoji = html.match(_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_EMOJI_SUPPORTED ? _lib_twemojiRegex__WEBPACK_IMPORTED_MODULE_3__["default"] : _config__WEBPACK_IMPORTED_MODULE_2__.EMOJI_IMG_REGEX);
    if (!hasEmoji) return undefined;
    const cleanHtml = (0,_helpers_prepareForRegExp__WEBPACK_IMPORTED_MODULE_6__.prepareForRegExp)(html);
    const isSingleEmoji = cleanHtml && (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_EMOJI_SUPPORTED && (0,_util_emoji_parseEmojiOnlyString__WEBPACK_IMPORTED_MODULE_4__["default"])(cleanHtml) === 1 || !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)));
    return isSingleEmoji ? _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt="(.+)"/)?.[1] : undefined;
  }, [getHtml, isEnabled]);
  const isActive = (0,_hooks_useDerivedState__WEBPACK_IMPORTED_MODULE_8__["default"])(() => Boolean(getSingleEmoji()), [getSingleEmoji]);
  const hasStickers = Boolean(stickers?.length);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isEnabled || !isActive) return;
    const singleEmoji = getSingleEmoji();
    if (singleEmoji) {
      if (!hasStickers) {
        loadStickersForEmoji({
          emoji: singleEmoji
        });
      }
    } else {
      clearStickersForEmoji();
    }
  }, [isEnabled, isActive, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);
  return {
    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),
    closeStickerTooltip: markManuallyClosed
  };
}

/***/ }),

/***/ "./src/components/middle/composer/hooks/useVoiceRecording.ts":
/*!*******************************************************************!*\
  !*** ./src/components/middle/composer/hooks/useVoiceRecording.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../util/captureEscKeyListener */ "./src/util/captureEscKeyListener.ts");
/* harmony import */ var _util_voiceRecording__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/voiceRecording */ "./src/util/voiceRecording.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");






const useVoiceRecording = () => {
  // eslint-disable-next-line no-null/no-null
  const recordButtonRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [activeVoiceRecording, setActiveVoiceRecording] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const startRecordTimeRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const [currentRecordTime, setCurrentRecordTime] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isViewOnceEnabled, setIsViewOnceEnabled] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    // Preloading worker fixes silent first record on iOS
    if (_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_SAFARI && _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_4__.IS_VOICE_RECORDING_SUPPORTED) {
      void _util_voiceRecording__WEBPACK_IMPORTED_MODULE_3__.init();
    }
  }, []);
  const startRecordingVoice = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(async () => {
    try {
      const {
        stop,
        pause
      } = await _util_voiceRecording__WEBPACK_IMPORTED_MODULE_3__.start(tickVolume => {
        if (recordButtonRef.current) {
          if (startRecordTimeRef.current && Date.now() % 4 === 0) {
            (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
              if (!recordButtonRef.current) return;
              recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;
            });
          }
          setCurrentRecordTime(Date.now());
        }
      });
      startRecordTimeRef.current = Date.now();
      setCurrentRecordTime(Date.now());
      setActiveVoiceRecording({
        stop,
        pause
      });
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error(err);
    }
  });
  const pauseRecordingVoice = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (!activeVoiceRecording) {
      return undefined;
    }
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      if (recordButtonRef.current) {
        recordButtonRef.current.style.boxShadow = 'none';
      }
    });
    try {
      return activeVoiceRecording.pause();
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error(err);
      return undefined;
    }
  });
  const stopRecordingVoice = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (!activeVoiceRecording) {
      return undefined;
    }
    setActiveVoiceRecording(undefined);
    startRecordTimeRef.current = undefined;
    setCurrentRecordTime(undefined);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      if (recordButtonRef.current) {
        recordButtonRef.current.style.boxShadow = 'none';
      }
    });
    try {
      return activeVoiceRecording.stop();
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error(err);
      return undefined;
    }
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return activeVoiceRecording ? (0,_util_captureEscKeyListener__WEBPACK_IMPORTED_MODULE_2__["default"])(stopRecordingVoice) : undefined;
  }, [activeVoiceRecording, stopRecordingVoice]);
  const toogleViewOnceEnabled = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    setIsViewOnceEnabled(!isViewOnceEnabled);
  });
  return {
    startRecordingVoice,
    pauseRecordingVoice,
    stopRecordingVoice,
    activeVoiceRecording,
    currentRecordTime,
    recordButtonRef,
    startRecordTimeRef,
    isViewOnceEnabled,
    setIsViewOnceEnabled,
    toogleViewOnceEnabled
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useVoiceRecording);

/***/ }),

/***/ "./src/components/middle/hooks/useHeaderPane.tsx":
/*!*******************************************************!*\
  !*** ./src/components/middle/hooks/useHeaderPane.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applyAnimationState: () => (/* binding */ applyAnimationState),
/* harmony export */   "default": () => (/* binding */ useHeaderPane)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/schedulers/useTimeout */ "./src/hooks/schedulers/useTimeout.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useThrottledCallback */ "./src/hooks/useThrottledCallback.ts");







// Max slide transition duration
const CLOSE_DURATION = 450;
const RESIZE_THROTTLE = 100;
function useHeaderPane({
  ref: providedRef,
  isOpen,
  isDisabled,
  withResizeObserver,
  onStateChange
}) {
  const [shouldRender, setShouldRender] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(isOpen);
  // eslint-disable-next-line no-null/no-null
  const localRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const ref = providedRef || localRef;
  const lastHeightRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  const reset = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    setShouldRender(true);
    onStateChange?.({
      element: undefined,
      height: 0,
      isOpen: false
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) {
      reset();
    }
  }, [isDisabled]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isOpen) {
      setShouldRender(true);
    }
  }, [isOpen]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useUnmountCleanup)(reset);
  (0,_hooks_schedulers_useTimeout__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    setShouldRender(false);
  }, !isOpen ? CLOSE_DURATION : undefined);

  // Should be `useCallback` to trigger effect on deps change
  const handleUpdate = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    const element = ref.current;
    if (isDisabled || !element || !shouldRender) return;
    if (!isOpen) {
      onStateChange?.({
        element,
        height: 0,
        isOpen: false
      });
      return;
    }
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestForcedReflow)(() => {
      const currentHeight = element.offsetHeight;
      lastHeightRef.current = currentHeight;
      return () => {
        onStateChange?.({
          element,
          height: currentHeight,
          isOpen
        });
      };
    });
  }, [isOpen, shouldRender, isDisabled, ref, onStateChange]);
  const handleResize = (0,_hooks_useThrottledCallback__WEBPACK_IMPORTED_MODULE_6__["default"])(() => {
    const element = ref.current;
    if (!element) return;
    const newHeight = element.offsetHeight;
    if (newHeight === lastHeightRef.current) {
      return;
    }
    handleUpdate();
  }, [handleUpdate, ref], RESIZE_THROTTLE, true);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(handleUpdate, [handleUpdate]);
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_5__["default"])(ref, handleResize, !withResizeObserver || !shouldRender);
  return {
    shouldRender,
    ref
  };
}
function applyAnimationState(list, noTransition = false) {
  let cumulativeHeight = 0;
  for (let i = 0; i < list.length; i++) {
    const state = list[i];
    const element = state.element;
    if (!element) {
      continue;
    }
    const shiftPx = `${cumulativeHeight}px`;
    const apply = () => {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(element, {
        transform: `translateY(${state.isOpen ? shiftPx : `calc(${shiftPx} - 100%)`})`,
        zIndex: String(-i),
        transition: noTransition ? 'none' : ''
      });
    };
    if (!element.dataset.isPanelOpen && state.isOpen && !noTransition) {
      // Start animation right above its final position
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(element, {
        transform: `translateY(calc(${shiftPx} - 100%))`,
        zIndex: String(-i),
        transition: 'none'
      });
      element.dataset.isPanelOpen = 'true';
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestNextMutation)(apply);
    } else {
      apply();
    }
    cumulativeHeight += state.height;
  }
}

/***/ }),

/***/ "./src/components/middle/message/BaseStory.tsx":
/*!*****************************************************!*\
  !*** ./src/components/middle/message/BaseStory.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useCanvasBlur__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useCanvasBlur */ "./src/hooks/useCanvasBlur.ts");
/* harmony import */ var _hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useCurrentOrPrev */ "./src/hooks/useCurrentOrPrev.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useShowTransitionDeprecated */ "./src/hooks/useShowTransitionDeprecated.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _story_mediaArea_MediaAreaOverlay__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../story/mediaArea/MediaAreaOverlay */ "./src/components/story/mediaArea/MediaAreaOverlay.tsx");
/* harmony import */ var _BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./BaseStory.module.scss */ "./src/components/middle/message/BaseStory.module.scss");
















function BaseStory({
  story,
  isPreview,
  isProtected,
  isConnected
}) {
  const {
    openStoryViewer,
    loadPeerStoriesByIds,
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const isExpired = story && 'isDeleted' in story;
  const isLoaded = story && 'content' in story;
  const video = isLoaded ? story.content.video : undefined;
  const imageHash = isLoaded ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getStoryMediaHash)(story) : undefined;
  const imgBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_10__["default"])(imageHash);
  const thumbnail = isLoaded ? video ? video.thumbnail?.dataUri : story.content.photo?.thumbnail?.dataUri : undefined;
  const mediaUrl = (0,_hooks_useCurrentOrPrev__WEBPACK_IMPORTED_MODULE_8__["default"])(imgBlobUrl, true);
  const {
    shouldRender,
    transitionClassNames
  } = (0,_hooks_useShowTransitionDeprecated__WEBPACK_IMPORTED_MODULE_12__["default"])(Boolean(mediaUrl));
  const blurredBackgroundRef = (0,_hooks_useCanvasBlur__WEBPACK_IMPORTED_MODULE_7__["default"])(thumbnail, isExpired && !isPreview, isMobile && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_CANVAS_FILTER_SUPPORTED);
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].root, 'media-inner', (!isConnected || isExpired) && _BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].nonInteractive, isExpired && _BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].expired, isPreview && _BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].preview);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (story && !(isLoaded || isExpired)) {
      loadPeerStoriesByIds({
        peerId: story.peerId,
        storyIds: [story.id]
      });
    }
  }, [story, isExpired, isLoaded]);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    if (isExpired) {
      showNotification({
        message: lang('StoryNotFound')
      });
      return;
    }
    openStoryViewer({
      peerId: story.peerId,
      storyId: story.id,
      isSinglePeer: true,
      isSingleStory: true
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: fullClassName,
    onClick: isConnected ? handleClick : undefined
  }, !isExpired && isPreview && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: blurredBackgroundRef,
    className: "thumbnail blurred-bg"
  }), shouldRender && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: mediaUrl,
    alt: "",
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].media, isPreview && _BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].linkPreview, transitionClassNames),
    draggable: false
  }), isLoaded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_story_mediaArea_MediaAreaOverlay__WEBPACK_IMPORTED_MODULE_14__["default"], {
    story: story,
    className: transitionClassNames
  })), isExpired && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_13__["default"], {
    name: "story-expired",
    className: _BaseStory_module_scss__WEBPACK_IMPORTED_MODULE_15__["default"].expiredIcon
  }), lang('StoryExpiredSubtitle')), Boolean(video?.duration) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-media-duration"
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_4__.formatMediaDuration)(video.duration)), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  }));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(BaseStory));

/***/ }),

/***/ "./src/components/middle/message/MessageEffect.tsx":
/*!*********************************************************!*\
  !*** ./src/components/middle/message/MessageEffect.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useOverlayPosition__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useOverlayPosition */ "./src/components/middle/message/hooks/useOverlayPosition.ts");
/* harmony import */ var _common_AnimatedSticker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/AnimatedSticker */ "./src/components/common/AnimatedSticker.tsx");
/* harmony import */ var _ui_Portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/Portal */ "./src/components/ui/Portal.ts");
/* harmony import */ var _MessageEffect_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MessageEffect.module.scss */ "./src/components/middle/message/MessageEffect.module.scss");










const EFFECT_SIZE = 256;
const MessageEffect = ({
  messageId,
  isMirrored,
  effect,
  shouldPlay,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  onStop
}) => {
  // eslint-disable-next-line no-null/no-null
  const anchorRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const canLoad = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_3__.useIsIntersecting)(anchorRef, observeIntersectionForLoading);
  const canPlay = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_3__.useIsIntersecting)(anchorRef, observeIntersectionForPlaying);
  const [isPlaying, startPlaying, stopPlaying] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const [isPositionUpdateRequired, requirePositionUpdate, resetPositionUpdate] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const effectHash = getEffectHash(effect);
  const effectBlob = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_5__["default"])(effectHash, !canLoad);
  const handleEnded = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    stopPlaying();
    onStop?.();
  });
  const updatePosition = (0,_hooks_useOverlayPosition__WEBPACK_IMPORTED_MODULE_6__["default"])({
    anchorRef,
    overlayRef: ref,
    isMirrored,
    isDisabled: !isPlaying,
    isForMessageEffect: true,
    id: effect.id
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isPositionUpdateRequired) updatePosition();
    resetPositionUpdate();
  }, [updatePosition, resetPositionUpdate, isPositionUpdateRequired]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (canPlay && shouldPlay && effectBlob) {
      startPlaying();
      requirePositionUpdate();
    }
  }, [canPlay, effectBlob, shouldPlay, updatePosition]);
  const effectClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_MessageEffect_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root, isMirrored && _MessageEffect_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].mirror);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_MessageEffect_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].anchor, isMirrored && _MessageEffect_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].mirrorAnchor),
    ref: anchorRef
  }, isPlaying && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Portal__WEBPACK_IMPORTED_MODULE_8__["default"], null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedSticker__WEBPACK_IMPORTED_MODULE_7__["default"], {
    ref: ref,
    key: `effect-${messageId ?? effect.id}`,
    className: effectClassName,
    tgsUrl: effectBlob,
    size: EFFECT_SIZE,
    play: true,
    isLowPriority: true,
    noLoop: true,
    forceAlways: true,
    onEnded: handleEnded
  })));
};
function getEffectHash(effect) {
  if (effect.effectAnimationId) {
    return `sticker${effect.effectAnimationId}`;
  }
  return `sticker${effect.effectStickerId}?size=f`;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MessageEffect));

/***/ }),

/***/ "./src/components/middle/message/Photo.tsx":
/*!*************************************************!*\
  !*** ./src/components/middle/message/Photo.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _helpers_getCustomAppendixBg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/getCustomAppendixBg */ "./src/components/middle/message/helpers/getCustomAppendixBg.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/middle/message/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useLayoutEffectWithPrevDeps */ "./src/hooks/useLayoutEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useMediaTransition */ "./src/hooks/useMediaTransition.ts");
/* harmony import */ var _hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useMediaWithLoadProgress */ "./src/hooks/useMediaWithLoadProgress.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./hooks/useBlurredMediaThumbRef */ "./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../common/MediaSpoiler */ "./src/components/common/MediaSpoiler.tsx");
/* harmony import */ var _ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../ui/ProgressSpinner */ "./src/components/ui/ProgressSpinner.tsx");




















// eslint-disable-next-line @typescript-eslint/comma-dangle
const Photo = ({
  id,
  photo,
  messageText,
  isOwn,
  observeIntersection,
  noAvatars,
  canAutoLoad,
  isInSelectMode,
  isSelected,
  uploadProgress,
  forcedWidth,
  size = 'inline',
  dimensions,
  asForwarded,
  nonInteractive,
  shouldAffectAppendix,
  isDownloading,
  isProtected,
  theme,
  isInWebPage,
  clickArg,
  className,
  onClick,
  onCancelUpload
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isPaidPreview = photo.mediaType === 'extendedMediaPreview';
  const localBlobUrl = !isPaidPreview ? photo.blobUrl : undefined;
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_9__.useIsIntersecting)(ref, observeIntersection);
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const [isLoadAllowed, setIsLoadAllowed] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(canAutoLoad);
  const shouldLoad = isLoadAllowed && isIntersecting && !isPaidPreview;
  const {
    mediaData,
    loadProgress
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_13__["default"])(!isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getPhotoMediaHash)(photo, size) : undefined, !shouldLoad);
  const fullMediaData = localBlobUrl || mediaData;
  const withBlurredBackground = Boolean(forcedWidth);
  const [withThumb] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(!fullMediaData);
  const noThumb = Boolean(fullMediaData);
  const thumbRef = (0,_hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_16__["default"])(photo, noThumb);
  (0,_hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_12__["default"])(!noThumb, {
    ref: thumbRef
  });
  const blurredBackgroundRef = (0,_hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_16__["default"])(photo, !withBlurredBackground);
  const thumbDataUri = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMediaThumbUri)(photo);
  const [isSpoilerShown, showSpoiler, hideSpoiler] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_8__["default"])(isPaidPreview || photo.isSpoiler);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isPaidPreview || photo.isSpoiler) {
      showSpoiler();
    } else {
      hideSpoiler();
    }
  }, [isPaidPreview, photo]);
  const {
    loadProgress: downloadProgress
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_13__["default"])(!isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getPhotoMediaHash)(photo, 'download') : undefined, !isDownloading, !isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMediaFormat)(photo, 'download') : undefined);
  const {
    isUploading,
    isTransferring,
    transferProgress
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMediaTransferState)(uploadProgress || (isDownloading ? downloadProgress : loadProgress), shouldLoad && !fullMediaData, uploadProgress !== undefined);
  const wasLoadDisabled = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_14__["default"])(isLoadAllowed) === false;
  const {
    ref: spinnerRef,
    shouldRender: shouldRenderSpinner
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_15__["default"])({
    isOpen: isTransferring,
    noMountTransition: wasLoadDisabled,
    className: 'slow',
    withShouldRender: true
  });
  const {
    ref: downloadButtonRef,
    shouldRender: shouldRenderDownloadButton
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_15__["default"])({
    isOpen: !fullMediaData && !isLoadAllowed,
    withShouldRender: true
  });
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_10__["default"])(e => {
    if (isUploading) {
      onCancelUpload?.(clickArg);
      return;
    }
    if (!fullMediaData) {
      setIsLoadAllowed(isAllowed => !isAllowed);
      return;
    }
    if (isSpoilerShown) {
      hideSpoiler();
      return;
    }
    onClick?.(clickArg, e);
  });
  (0,_hooks_useLayoutEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_11__["default"])(([prevShouldAffectAppendix]) => {
    if (!shouldAffectAppendix) {
      if (prevShouldAffectAppendix) {
        ref.current.closest(_config__WEBPACK_IMPORTED_MODULE_1__.MESSAGE_CONTENT_SELECTOR).removeAttribute(_config__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_APPENDIX_ATTRIBUTE);
      }
      return;
    }
    const contentEl = ref.current.closest(_config__WEBPACK_IMPORTED_MODULE_1__.MESSAGE_CONTENT_SELECTOR);
    if (fullMediaData) {
      const messageId = Number(contentEl.closest('.Message').dataset.messageId);
      (0,_helpers_getCustomAppendixBg__WEBPACK_IMPORTED_MODULE_5__["default"])(fullMediaData, Boolean(isOwn), messageId, isSelected, theme).then(appendixBg => {
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
          contentEl.style.setProperty('--appendix-bg', appendixBg);
          contentEl.setAttribute(_config__WEBPACK_IMPORTED_MODULE_1__.CUSTOM_APPENDIX_ATTRIBUTE, '');
        });
      });
    } else {
      contentEl.classList.add('has-appendix-thumb');
    }
  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);
  const {
    width,
    height,
    isSmall
  } = dimensions || (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__.calculateMediaDimensions)({
    media: photo,
    isOwn,
    asForwarded,
    noAvatars,
    isMobile,
    messageText,
    isInWebPage
  });
  const componentClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('media-inner', !isUploading && !nonInteractive && 'interactive', isSmall && 'small-image', (width === height || size === 'pictogram') && 'square-image', height < _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__.MIN_MEDIA_HEIGHT && 'fix-min-height', className);
  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';
  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    id: id,
    ref: ref,
    className: componentClassName,
    style: style,
    onClick: isUploading ? undefined : handleClick
  }, withBlurredBackground && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: blurredBackgroundRef,
    className: "thumbnail blurred-bg"
  }), fullMediaData && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    src: fullMediaData,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('full-media', withBlurredBackground && 'with-blurred-bg'),
    alt: "",
    style: forcedWidth ? `width: ${forcedWidth}px` : undefined,
    draggable: !isProtected
  }), withThumb && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: thumbRef,
    className: "thumbnail"
  }), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  }), shouldRenderSpinner && !shouldRenderDownloadButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: spinnerRef,
    className: "media-loading"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_19__["default"], {
    progress: transferProgress,
    onClick: isUploading ? handleClick : undefined
  })), shouldRenderDownloadButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_17__["default"], {
    ref: downloadButtonRef,
    name: "download"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_18__["default"], {
    isVisible: isSpoilerShown,
    withAnimation: true,
    thumbDataUri: thumbDataUri,
    width: width,
    height: height,
    className: "media-spoiler"
  }), isTransferring && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-transfer-progress"
  }, Math.round(transferProgress * 100), "%"));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Photo);

/***/ }),

/***/ "./src/components/middle/message/RoundVideo.tsx":
/*!******************************************************!*\
  !*** ./src/components/middle/message/RoundVideo.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_audioPlayer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/audioPlayer */ "./src/util/audioPlayer.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_safePlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/safePlay */ "./src/util/safePlay.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useAsyncResolvers */ "./src/hooks/useAsyncResolvers.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useMediaTransition */ "./src/hooks/useMediaTransition.ts");
/* harmony import */ var _hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useMediaWithLoadProgress */ "./src/hooks/useMediaWithLoadProgress.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./hooks/useBlurredMediaThumbRef */ "./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/MediaSpoiler */ "./src/components/common/MediaSpoiler.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../ui/OptimizedVideo */ "./src/components/ui/OptimizedVideo.tsx");
/* harmony import */ var _ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../ui/ProgressSpinner */ "./src/components/ui/ProgressSpinner.tsx");
/* harmony import */ var _RoundVideo_scss__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./RoundVideo.scss */ "./src/components/middle/message/RoundVideo.scss");
























const PROGRESS_CENTER = _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX / 2;
const PROGRESS_MARGIN = 6;
const PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;
const PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update

let stopPrevious;
const RoundVideo = ({
  message,
  className,
  canAutoLoad,
  isDownloading,
  origin,
  observeIntersection,
  onStop,
  onReadMedia,
  isTranscriptionError,
  isTranscribed,
  canTranscribe,
  onHideTranscription,
  isTranscriptionHidden,
  isTranscribing
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const playerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const circleRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    cancelMediaDownload,
    openOneTimeMediaModal,
    transcribeAudio
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const isIntersecting = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_11__.useIsIntersecting)(ref, observeIntersection);
  const video = message.content.video;
  const [isLoadAllowed, setIsLoadAllowed] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(canAutoLoad);
  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);
  const {
    mediaData,
    loadProgress
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_14__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getVideoMediaHash)(video, 'inline'), !shouldLoad, (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMediaFormat)(video, 'inline'));
  const {
    loadProgress: downloadProgress
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_14__["default"])((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getVideoMediaHash)(video, 'download'), !isDownloading, _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl);
  const [isPlayerReady, markPlayerReady] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const hasTtl = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.hasMessageTtl)(message);
  const isInOneTimeModal = origin === 'oneTimeModal';
  const shouldRenderSpoiler = hasTtl && !isInOneTimeModal;
  const hasThumb = Boolean((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageMediaThumbDataUri)(message));
  const noThumb = !hasThumb || isPlayerReady || shouldRenderSpoiler;
  const thumbRef = (0,_hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_17__["default"])(video, noThumb);
  (0,_hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_13__["default"])(!noThumb, {
    ref: thumbRef
  });
  const thumbDataUri = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageMediaThumbDataUri)(message);
  const isTransferring = isLoadAllowed && !isPlayerReady || isDownloading;
  const wasLoadDisabled = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_15__["default"])(isLoadAllowed) === false;
  const {
    ref: spinnerRef,
    shouldRender: shouldRenderSpinner
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_16__["default"])({
    isOpen: isTransferring,
    noMountTransition: wasLoadDisabled,
    withShouldRender: true
  });
  const [isActivated, setIsActivated] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [getProgress, setProgress] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)(0);
  const getThrottledProgress = (0,_hooks_useAsyncResolvers__WEBPACK_IMPORTED_MODULE_9__.useThrottledSignal)(getProgress, PROGRESS_THROTTLE);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isActivated) {
      return;
    }
    const playerEl = playerRef.current;
    setProgress(playerEl.currentTime / playerEl.duration);
  }, [setProgress, isActivated, getThrottledProgress]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!isActivated || !circleRef.current) {
      return;
    }
    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;
    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());
  }, [isActivated, getThrottledProgress]);
  const shouldPlay = Boolean(mediaData && isIntersecting);
  const stopPlaying = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    if (!playerRef.current) {
      return;
    }
    setIsActivated(false);
    setProgress(0);
    (0,_util_safePlay__WEBPACK_IMPORTED_MODULE_7__["default"])(playerRef.current);
  });
  const capturePlaying = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    stopPrevious?.();
    stopPrevious = stopPlaying;
  });
  const togglePlaying = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    const playerEl = playerRef.current;
    if (isActivated) {
      if (playerEl.paused) {
        (0,_util_safePlay__WEBPACK_IMPORTED_MODULE_7__["default"])(playerEl);
        (0,_util_audioPlayer__WEBPACK_IMPORTED_MODULE_4__.stopCurrentAudio)();
      } else {
        playerEl.pause();
      }
    } else {
      capturePlaying();
      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames
      playerEl.pause();
      playerEl.currentTime = 0;
      (0,_util_safePlay__WEBPACK_IMPORTED_MODULE_7__["default"])(playerEl);
      (0,_util_audioPlayer__WEBPACK_IMPORTED_MODULE_4__.stopCurrentAudio)();
      setIsActivated(true);
    }
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isInOneTimeModal) {
      return;
    }
    togglePlaying();
  }, [isInOneTimeModal]);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(event => {
    if (event.target.closest('.transcribe-button')) {
      return;
    }
    if (!mediaData) {
      setIsLoadAllowed(isAllowed => !isAllowed);
      return;
    }
    if (isDownloading) {
      cancelMediaDownload({
        media: video
      });
      return;
    }
    if (hasTtl && !isInOneTimeModal) {
      openOneTimeMediaModal({
        message
      });
      onReadMedia?.();
      return;
    }
    togglePlaying();
  });
  const handleTimeUpdate = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(e => {
    const playerEl = e.currentTarget;
    setProgress(playerEl.currentTime / playerEl.duration);
  });
  const handleTranscribe = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    transcribeAudio({
      chatId: message.chatId,
      messageId: message.id
    });
  });
  function renderPlayWrapper() {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "play-wrapper"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_20__["default"], {
      color: "dark",
      round: true,
      size: "smaller",
      className: "play",
      nonInteractive: true
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
      name: "play"
    })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
      name: "view-once"
    }));
  }
  const handleButtonClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(() => {
    if ((isTranscribed || isTranscriptionError) && onHideTranscription) {
      onHideTranscription(!isTranscriptionHidden);
    } else if (!isTranscribing) {
      handleTranscribe();
    }
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('RoundVideo', 'media-inner', isInOneTimeModal && 'non-interactive', className),
    onClick: handleClick
  }, mediaData && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "video-wrapper"
  }, shouldRenderSpoiler && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_19__["default"], {
    isVisible: true,
    thumbDataUri: thumbDataUri,
    width: _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX,
    height: _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX,
    className: "media-spoiler"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_21__["default"], {
    canPlay: shouldPlay,
    ref: playerRef,
    src: mediaData,
    className: "full-media",
    width: _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX,
    height: _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX,
    autoPlay: !shouldRenderSpoiler,
    disablePictureInPicture: true,
    muted: !isActivated,
    loop: !isActivated,
    playsInline: true,
    isPriority: true,
    onEnded: isActivated ? onStop ?? stopPlaying : undefined,
    onTimeUpdate: isActivated ? handleTimeUpdate : undefined,
    onReady: markPlayerReady
  })), !shouldRenderSpoiler && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: thumbRef,
    className: "thumbnail",
    style: `width: ${_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX}px; height: ${_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX}px`
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "progress"
  }, isActivated && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    width: _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX,
    height: _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_8__.ROUND_VIDEO_DIMENSIONS_PX
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("circle", {
    ref: circleRef,
    cx: PROGRESS_CENTER,
    cy: PROGRESS_CENTER,
    r: PROGRESS_CENTER - PROGRESS_MARGIN,
    className: "progress-circle",
    transform: `rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`,
    "stroke-dasharray": PROGRESS_CIRCUMFERENCE,
    "stroke-dashoffset": PROGRESS_CIRCUMFERENCE
  }))), shouldRenderSpinner && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: spinnerRef,
    className: "media-loading"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_22__["default"], {
    progress: isDownloading ? downloadProgress : loadProgress
  })), shouldRenderSpoiler && !shouldRenderSpinner && renderPlayWrapper(), !mediaData && !isLoadAllowed && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
    name: "download"
  }), !isInOneTimeModal && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-media-duration"
  }, isActivated ? (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatMediaDuration)(playerRef.current.currentTime) : (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_6__.formatMediaDuration)(video.duration), (!isActivated || playerRef.current.paused) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
    name: "muted"
  })), canTranscribe && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_20__["default"], {
    onClick: handleButtonClick,
    className: "transcribe-button"
  }, isTranscribed || isTranscriptionError ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
    name: "down"
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_18__["default"], {
    name: "transcribe"
  }), isTranscribing && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("svg", {
    viewBox: "0 0 32 24",
    className: "loading-svg"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("rect", {
    className: "loading-rect",
    fill: "transparent",
    width: "32",
    height: "24",
    "stroke-width": "3",
    "stroke-linejoin": "round",
    rx: "6",
    ry: "6",
    stroke: "white",
    "stroke-dashoffset": "1",
    "stroke-dasharray": "32,68"
  }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RoundVideo);

/***/ }),

/***/ "./src/components/middle/message/SponsoredMessageContextMenu.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/middle/message/SponsoredMessageContextMenu.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _ui_MenuSeparator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/MenuSeparator */ "./src/components/ui/MenuSeparator.tsx");
/* harmony import */ var _MessageContextMenu_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./MessageContextMenu.scss */ "./src/components/middle/message/MessageContextMenu.scss");







const SponsoredMessageContextMenu = ({
  isOpen,
  message,
  anchor,
  triggerRef,
  shouldSkipAbout,
  onClose,
  onCloseAnimationEnd,
  onAboutAdsClick,
  onSponsoredHide,
  onSponsorInfo,
  onSponsoredReport
}) => {
  // eslint-disable-next-line no-null/no-null
  const menuRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const getTriggerElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_1__["default"])(() => triggerRef.current);
  const getLayout = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_1__["default"])(() => ({
    withPortal: true
  }));
  const getMenuElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_1__["default"])(() => menuRef.current);
  const getRootElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_1__["default"])(() => document.body);
  const isSeparatorNeeded = message.sponsorInfo || !shouldSkipAbout || message.canReport;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_3__["default"], {
    ref: menuRef,
    isOpen: isOpen,
    anchor: anchor,
    withPortal: true,
    className: "with-menu-transitions",
    getLayout: getLayout,
    getTriggerElement: getTriggerElement,
    getMenuElement: getMenuElement,
    getRootElement: getRootElement,
    onClose: onClose,
    onCloseAnimationEnd: onCloseAnimationEnd
  }, message.sponsorInfo && onSponsorInfo && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_4__["default"], {
    icon: "channel",
    onClick: onSponsorInfo
  }, lang('SponsoredMessageSponsor')), !shouldSkipAbout && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_4__["default"], {
    icon: "info",
    onClick: onAboutAdsClick
  }, lang(message.canReport ? 'AboutRevenueSharingAds' : 'SponsoredMessageInfo')), message.canReport && onSponsoredReport && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_4__["default"], {
    icon: "hand-stop",
    onClick: onSponsoredReport
  }, lang('ReportAd')), isSeparatorNeeded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuSeparator__WEBPACK_IMPORTED_MODULE_5__["default"], null), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_4__["default"], {
    icon: "close-circle",
    onClick: onSponsoredHide
  }, lang('HideAd')));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(SponsoredMessageContextMenu));

/***/ }),

/***/ "./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx":
/*!********************************************************************************!*\
  !*** ./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _SponsoredMessageContextMenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SponsoredMessageContextMenu */ "./src/components/middle/message/SponsoredMessageContextMenu.tsx");





const SponsoredMessageContextMenuContainer = ({
  isOpen,
  message,
  anchor,
  triggerRef,
  shouldSkipAbout,
  onItemClick,
  onClose,
  onCloseAnimationEnd
}) => {
  const {
    openAboutAdsModal,
    showDialog,
    reportSponsoredMessage,
    hideSponsoredMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const {
    ref
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_3__["default"])({
    isOpen,
    onCloseAnimationEnd
  });
  const handleItemClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    onItemClick?.();
    onClose();
  });
  const handleAboutAdsOpen = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    openAboutAdsModal({
      chatId: message.chatId
    });
    handleItemClick();
  });
  const handleSponsoredHide = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    hideSponsoredMessages();
    handleItemClick();
  });
  const handleSponsorInfo = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    showDialog({
      data: {
        message: [message.sponsorInfo, message.additionalInfo].join('\n')
      }
    });
    handleItemClick();
  });
  const handleReportSponsoredMessage = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    reportSponsoredMessage({
      peerId: message.chatId,
      randomId: message.randomId
    });
    handleItemClick();
  });
  if (!anchor) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: "ContextMenuContainer"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_SponsoredMessageContextMenu__WEBPACK_IMPORTED_MODULE_4__["default"], {
    isOpen: isOpen,
    anchor: anchor,
    triggerRef: triggerRef,
    message: message,
    shouldSkipAbout: shouldSkipAbout,
    onClose: onClose,
    onCloseAnimationEnd: onClose,
    onAboutAdsClick: handleAboutAdsOpen,
    onSponsoredHide: handleSponsoredHide,
    onSponsorInfo: handleSponsorInfo,
    onSponsoredReport: handleReportSponsoredMessage
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(SponsoredMessageContextMenuContainer));

/***/ }),

/***/ "./src/components/middle/message/Video.tsx":
/*!*************************************************!*\
  !*** ./src/components/middle/message/Video.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/middle/message/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_media_useUnsupportedMedia__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/media/useUnsupportedMedia */ "./src/hooks/media/useUnsupportedMedia.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useIntersectionObserver */ "./src/hooks/useIntersectionObserver.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useMediaTransition */ "./src/hooks/useMediaTransition.ts");
/* harmony import */ var _hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useMediaWithLoadProgress */ "./src/hooks/useMediaWithLoadProgress.ts");
/* harmony import */ var _hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./hooks/useBlurredMediaThumbRef */ "./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/MediaSpoiler */ "./src/components/common/MediaSpoiler.tsx");
/* harmony import */ var _ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../ui/OptimizedVideo */ "./src/components/ui/OptimizedVideo.tsx");
/* harmony import */ var _ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../ui/ProgressSpinner */ "./src/components/ui/ProgressSpinner.tsx");























// eslint-disable-next-line @typescript-eslint/comma-dangle
const Video = ({
  id,
  video,
  isOwn,
  isInWebPage,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  noAvatars,
  canAutoLoad,
  canAutoPlay,
  uploadProgress,
  forcedWidth,
  dimensions,
  asForwarded,
  isDownloading,
  isProtected,
  className,
  clickArg,
  onClick,
  onCancelUpload
}) => {
  const {
    cancelMediaDownload
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const videoRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isPaidPreview = video.mediaType === 'extendedMediaPreview';
  const localBlobUrl = !isPaidPreview ? video.blobUrl : undefined;
  const [isSpoilerShown, showSpoiler, hideSpoiler] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__["default"])(isPaidPreview || video.isSpoiler);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isPaidPreview || video.isSpoiler) {
      showSpoiler();
    } else {
      hideSpoiler();
    }
  }, [isPaidPreview, video]);
  const isIntersectingForLoading = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_11__.useIsIntersecting)(ref, observeIntersectionForLoading);
  const isIntersectingForPlaying = (0,_hooks_useIntersectionObserver__WEBPACK_IMPORTED_MODULE_11__.useIsIntersecting)(ref, observeIntersectionForPlaying) && isIntersectingForLoading;
  const wasIntersectedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(isIntersectingForLoading);
  if (isIntersectingForPlaying && !wasIntersectedRef.current) {
    wasIntersectedRef.current = true;
  }
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_9__["default"])();
  const [isLoadAllowed, setIsLoadAllowed] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(canAutoLoad);
  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && !isPaidPreview);
  const [isPlayAllowed, setIsPlayAllowed] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(canAutoPlay && !isSpoilerShown));
  const fullMediaHash = !isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getVideoMediaHash)(video, 'inline') : undefined;
  const [isFullMediaPreloaded] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(fullMediaHash && _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__.getFromMemory(fullMediaHash)));
  const {
    mediaData,
    loadProgress
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_15__["default"])(fullMediaHash, !shouldLoad, !isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMediaFormat)(video, 'inline') : undefined);
  const fullMediaData = localBlobUrl || mediaData;
  const [isPlayerReady, markPlayerReady] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_10__["default"])();
  const thumbDataUri = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMediaThumbUri)(video);
  const hasThumb = Boolean(thumbDataUri);
  const withBlurredBackground = Boolean(forcedWidth);
  const isInline = fullMediaData && wasIntersectedRef.current;
  const isUnsupported = (0,_hooks_media_useUnsupportedMedia__WEBPACK_IMPORTED_MODULE_8__["default"])(videoRef, true, !isInline);
  const previewMediaHash = !isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getVideoMediaHash)(video, 'preview') : undefined;
  const [isPreviewPreloaded] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(previewMediaHash && _util_mediaLoader__WEBPACK_IMPORTED_MODULE_5__.getFromMemory(previewMediaHash)));
  const canLoadPreview = isIntersectingForLoading;
  const previewBlobUrl = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_13__["default"])(previewMediaHash, !canLoadPreview);
  const shouldHidePreview = isPlayerReady && !isUnsupported;
  const previewRef = (0,_hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_14__["default"])((hasThumb || previewBlobUrl) && !shouldHidePreview);
  const noThumb = Boolean(!hasThumb || previewBlobUrl || isPlayerReady);
  const thumbRef = (0,_hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_18__["default"])(video, noThumb);
  (0,_hooks_useMediaTransition__WEBPACK_IMPORTED_MODULE_14__["default"])(!noThumb, {
    ref: thumbRef
  });
  const blurredBackgroundRef = (0,_hooks_useBlurredMediaThumbRef__WEBPACK_IMPORTED_MODULE_18__["default"])(video, !withBlurredBackground);
  const {
    loadProgress: downloadProgress
  } = (0,_hooks_useMediaWithLoadProgress__WEBPACK_IMPORTED_MODULE_15__["default"])(!isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getVideoMediaHash)(video, 'download') : undefined, !isDownloading, !isPaidPreview ? (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMediaFormat)(video, 'download') : undefined);
  const {
    isUploading,
    isTransferring,
    transferProgress
  } = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getMediaTransferState)(uploadProgress || (isDownloading ? downloadProgress : loadProgress), shouldLoad && !isPlayerReady && !isFullMediaPreloaded || isDownloading, uploadProgress !== undefined);
  const wasLoadDisabled = (0,_hooks_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_16__["default"])(isLoadAllowed) === false;
  const {
    ref: spinnerRef,
    shouldRender: shouldRenderSpinner
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_17__["default"])({
    isOpen: isTransferring && !isUnsupported,
    noMountTransition: wasLoadDisabled,
    withShouldRender: true
  });
  const {
    ref: playButtonRef
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_17__["default"])({
    isOpen: Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner)
  });
  const [playProgress, setPlayProgress] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const handleTimeUpdate = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(e => {
    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));
  });
  const duration = (Number.isFinite(videoRef.current?.duration) && !isUnsupported ? videoRef.current?.duration : video.duration) || 0;
  const {
    width,
    height
  } = dimensions || (isPaidPreview ? (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__.calculateExtendedPreviewDimensions)(video, Boolean(isOwn), asForwarded, isInWebPage, noAvatars, isMobile) : (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_6__.calculateVideoDimensions)(video, Boolean(isOwn), asForwarded, isInWebPage, noAvatars, isMobile));
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])((e, isFromSpinner) => {
    if (isUploading) {
      onCancelUpload?.(clickArg);
      return;
    }
    if (!isPaidPreview && isDownloading) {
      cancelMediaDownload({
        media: video
      });
      return;
    }
    if (!fullMediaData) {
      setIsLoadAllowed(isAllowed => !isAllowed);
      return;
    }
    if (fullMediaData && !isPlayAllowed) {
      setIsPlayAllowed(true);
    }
    if (isSpoilerShown) {
      hideSpoiler();
      return;
    }
    if (isFromSpinner && shouldLoad && !isPlayerReady && !isFullMediaPreloaded) {
      setIsLoadAllowed(false);
      e.stopPropagation();
      return;
    }
    onClick?.(clickArg, e);
  });
  const handleClickOnSpinner = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_12__["default"])(e => {
    handleClick(e, true);
  });
  const componentClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('media-inner dark', !isUploading && 'interactive', height < _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_7__.MIN_MEDIA_HEIGHT && 'fix-min-height', className);
  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';
  const style = `height: ${height}px;${dimensionsStyle}`;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    id: id,
    className: componentClassName,
    style: style,
    onClick: isUploading ? undefined : e => handleClick(e)
  }, withBlurredBackground && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: blurredBackgroundRef,
    className: "thumbnail blurred-bg"
  }), isInline && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_OptimizedVideo__WEBPACK_IMPORTED_MODULE_21__["default"], {
    ref: videoRef,
    src: fullMediaData,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('full-media', withBlurredBackground && 'with-blurred-bg'),
    canPlay: isPlayAllowed && isIntersectingForPlaying && !isUnsupported,
    muted: true,
    loop: true,
    playsInline: true,
    disablePictureInPicture: true,
    draggable: !isProtected,
    onTimeUpdate: handleTimeUpdate,
    onReady: markPlayerReady,
    style: forcedWidth ? `width: ${forcedWidth}px` : undefined
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    ref: previewRef,
    src: previewBlobUrl,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])('thumbnail', withBlurredBackground && 'with-blurred-bg'),
    alt: "",
    style: forcedWidth ? `width: ${forcedWidth}px;` : undefined,
    draggable: !isProtected
  }), hasThumb && !isPreviewPreloaded && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("canvas", {
    ref: thumbRef,
    className: "thumbnail"
  }), isProtected && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "protector"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_19__["default"], {
    ref: playButtonRef,
    name: "large-play"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_MediaSpoiler__WEBPACK_IMPORTED_MODULE_20__["default"], {
    isVisible: isSpoilerShown,
    withAnimation: true,
    thumbDataUri: thumbDataUri,
    width: width,
    height: height,
    className: "media-spoiler"
  }), shouldRenderSpinner && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: spinnerRef,
    className: "media-loading"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_ProgressSpinner__WEBPACK_IMPORTED_MODULE_22__["default"], {
    progress: transferProgress,
    onClick: handleClickOnSpinner
  })), !isLoadAllowed && !fullMediaData && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_19__["default"], {
    name: "download"
  }), isTransferring && (!isUnsupported || isDownloading) ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: "message-transfer-progress"
  }, isUploading || isDownloading ? `${Math.round(transferProgress * 100)}%` : '...') : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "message-media-duration"
  }, !isPaidPreview && video.isGif ? 'GIF' : (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_4__.formatMediaDuration)(Math.max(duration - playProgress, 0)), isUnsupported && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_19__["default"], {
    name: "message-failed",
    className: "playback-failed"
  })));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Video);

/***/ }),

/***/ "./src/components/middle/message/WebPage.tsx":
/*!***************************************************!*\
  !*** ./src/components/middle/message/WebPage.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_trimText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/trimText */ "./src/util/trimText.ts");
/* harmony import */ var _common_helpers_gifts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/helpers/gifts */ "./src/components/common/helpers/gifts.ts");
/* harmony import */ var _common_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/helpers/renderText */ "./src/components/common/helpers/renderText.tsx");
/* harmony import */ var _helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/mediaDimensions */ "./src/components/middle/message/helpers/mediaDimensions.ts");
/* harmony import */ var _helpers_webpageType__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers/webpageType */ "./src/components/middle/message/helpers/webpageType.ts");
/* harmony import */ var _hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/stickers/useDynamicColorListener */ "./src/hooks/stickers/useDynamicColorListener.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useEnsureStory */ "./src/hooks/useEnsureStory.ts");
/* harmony import */ var _hooks_useLang__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useLang */ "./src/hooks/useLang.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_Audio__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../common/Audio */ "./src/components/common/Audio.tsx");
/* harmony import */ var _common_Document__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../common/Document */ "./src/components/common/Document.tsx");
/* harmony import */ var _common_embedded_EmojiIconBackground__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/embedded/EmojiIconBackground */ "./src/components/common/embedded/EmojiIconBackground.tsx");
/* harmony import */ var _common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../common/PeerColorWrapper */ "./src/components/common/PeerColorWrapper.tsx");
/* harmony import */ var _common_profile_RadialPatternBackground__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../common/profile/RadialPatternBackground */ "./src/components/common/profile/RadialPatternBackground.tsx");
/* harmony import */ var _common_SafeLink__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../common/SafeLink */ "./src/components/common/SafeLink.tsx");
/* harmony import */ var _common_StickerView__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../common/StickerView */ "./src/components/common/StickerView.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _BaseStory__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./BaseStory */ "./src/components/middle/message/BaseStory.tsx");
/* harmony import */ var _Photo__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./Photo */ "./src/components/middle/message/Photo.tsx");
/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Video */ "./src/components/middle/message/Video.tsx");
/* harmony import */ var _WebPage_scss__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./WebPage.scss */ "./src/components/middle/message/WebPage.scss");





























const MAX_TEXT_LENGTH = 170; // symbols
const WEBPAGE_STORY_TYPE = 'telegram_story';
const WEBPAGE_GIFT_TYPE = 'telegram_nft';
const STICKER_SIZE = 80;
const EMOJI_SIZE = 38;
const STAR_GIFT_STICKER_SIZE = 120;
const WebPage = ({
  message,
  observeIntersectionForLoading,
  observeIntersectionForPlaying,
  noAvatars,
  canAutoLoad,
  canAutoPlay,
  inPreview,
  asForwarded,
  isDownloading = false,
  isProtected,
  isConnected,
  story,
  theme,
  backgroundEmojiId,
  shouldWarnAboutSvg,
  autoLoadFileMaxSizeMb,
  onMediaClick,
  onContainerClick,
  onAudioPlay,
  onCancelMediaTransfer,
  isEditing
}) => {
  const {
    openUrl,
    openTelegramLink
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const webPage = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getMessageWebPage)(message);
  const {
    isMobile
  } = (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_12__["default"])();
  // eslint-disable-next-line no-null/no-null
  const stickersRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  // eslint-disable-next-line no-null/no-null
  const giftStickersRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const oldLang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_16__["default"])();
  const lang = (0,_hooks_useLang__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const handleMediaClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    onMediaClick();
  });
  const handleContainerClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(e => {
    onContainerClick?.(e);
  });
  const handleOpenTelegramLink = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_15__["default"])(() => {
    if (!webPage) return;
    openTelegramLink({
      url: webPage.url
    });
  });
  const {
    story: storyData,
    stickers
  } = webPage || {};
  (0,_hooks_useEnsureStory__WEBPACK_IMPORTED_MODULE_13__["default"])(storyData?.peerId, storyData?.id, story);
  const hasCustomColor = stickers?.isWithTextColor || stickers?.documents?.[0]?.shouldUseTextColor;
  const customColor = (0,_hooks_stickers_useDynamicColorListener__WEBPACK_IMPORTED_MODULE_11__["default"])(stickersRef, !hasCustomColor);
  if (!webPage) {
    return undefined;
  }
  const {
    siteName,
    url,
    displayUrl,
    title,
    description,
    photo,
    video,
    audio,
    type,
    document,
    mediaSize
  } = webPage;
  const isStory = type === WEBPAGE_STORY_TYPE;
  const isGift = type === WEBPAGE_GIFT_TYPE;
  const isExpiredStory = story && 'isDeleted' in story;
  const quickButtonLangKey = !inPreview && !isExpiredStory ? (0,_helpers_webpageType__WEBPACK_IMPORTED_MODULE_10__.getWebpageButtonLangKey)(type) : undefined;
  const quickButtonTitle = quickButtonLangKey && lang(quickButtonLangKey);
  const truncatedDescription = (0,_util_trimText__WEBPACK_IMPORTED_MODULE_6__["default"])(description, MAX_TEXT_LENGTH);
  const isArticle = Boolean(truncatedDescription || title || siteName);
  let isSquarePhoto = Boolean(stickers);
  if (isArticle && webPage?.photo && !webPage.video && !webPage.document) {
    const {
      width,
      height
    } = (0,_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_9__.calculateMediaDimensions)({
      media: webPage.photo,
      isOwn: message.isOutgoing,
      isInWebPage: true,
      asForwarded,
      noAvatars,
      isMobile
    });
    isSquarePhoto = (width === height || mediaSize === 'small') && mediaSize !== 'large';
  }
  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;
  const className = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('WebPage', inPreview && 'in-preview', !isEditing && inPreview && 'interactive', isSquarePhoto && 'with-square-photo', !photo && !video && !inPreview && 'without-media', video && 'with-video', !isArticle && 'no-article', document && 'with-document', quickButtonTitle && 'with-quick-button', isGift && 'with-gift');
  function renderQuickButton(caption) {
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_24__["default"], {
      className: "WebPage--quick-button",
      size: "tiny",
      color: "translucent",
      isRectangular: true,
      noForcedUpperCase: true,
      onClick: handleOpenTelegramLink
    }, caption);
  }
  function renderStarGiftUnique() {
    const gift = webPage?.gift;
    if (!gift || gift.type !== 'starGiftUnique') return undefined;
    const sticker = (0,_common_helpers_gifts__WEBPACK_IMPORTED_MODULE_7__.getStickerFromGift)(gift);
    const attributes = (0,_common_helpers_gifts__WEBPACK_IMPORTED_MODULE_7__.getGiftAttributes)(gift);
    const {
      backdrop,
      pattern,
      model
    } = attributes || {};
    if (!backdrop || !pattern || !model) return undefined;
    const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "web-page-gift web-page-centered web-page-unique",
      onClick: () => handleOpenTelegramLink()
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      className: "web-page-unique-background-wrapper"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_profile_RadialPatternBackground__WEBPACK_IMPORTED_MODULE_21__["default"], {
      className: "web-page-unique-background",
      backgroundColors: backgroundColors,
      patternColor: backdrop.patternColor,
      patternIcon: pattern.sticker
    })), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
      ref: giftStickersRef,
      key: sticker.id,
      className: "WebPage--unique-sticker"
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_StickerView__WEBPACK_IMPORTED_MODULE_23__["default"], {
      containerRef: giftStickersRef,
      sticker: sticker,
      size: STAR_GIFT_STICKER_SIZE,
      observeIntersectionForPlaying: observeIntersectionForPlaying,
      observeIntersectionForLoading: observeIntersectionForLoading
    })));
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_PeerColorWrapper__WEBPACK_IMPORTED_MODULE_20__["default"], {
    className: className,
    "data-initial": (siteName || displayUrl)[0],
    dir: oldLang.isRtl ? 'rtl' : 'auto',
    onClick: handleContainerClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('WebPage--content', isStory && 'is-story', isGift && 'is-gift')
  }, backgroundEmojiId && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_embedded_EmojiIconBackground__WEBPACK_IMPORTED_MODULE_19__["default"], {
    emojiDocumentId: backgroundEmojiId,
    className: "WebPage--background-icons"
  }), isStory && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_BaseStory__WEBPACK_IMPORTED_MODULE_25__["default"], {
    story: story,
    isProtected: isProtected,
    isConnected: isConnected,
    isPreview: true
  }), isGift && !inPreview && renderStarGiftUnique(), isArticle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('WebPage-text', !inPreview && 'WebPage-text_interactive'),
    onClick: !inPreview ? () => openUrl({
      url,
      shouldSkipModal: true
    }) : undefined
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_SafeLink__WEBPACK_IMPORTED_MODULE_22__["default"], {
    className: "site-name",
    url: url,
    text: siteName || displayUrl
  }), (!inPreview || isGift) && title && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "site-title"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(title)), truncatedDescription && !isGift && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "site-description"
  }, (0,_common_helpers_renderText__WEBPACK_IMPORTED_MODULE_8__["default"])(truncatedDescription, ['emoji', 'br']))), photo && !isGift && !video && !document && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Photo__WEBPACK_IMPORTED_MODULE_26__["default"], {
    photo: photo,
    isOwn: message.isOutgoing,
    isInWebPage: true,
    observeIntersection: observeIntersectionForLoading,
    noAvatars: noAvatars,
    canAutoLoad: canAutoLoad,
    size: isSquarePhoto ? 'pictogram' : 'inline',
    asForwarded: asForwarded,
    nonInteractive: !isMediaInteractive,
    isDownloading: isDownloading,
    isProtected: isProtected,
    theme: theme,
    onClick: isMediaInteractive ? handleMediaClick : undefined,
    onCancelUpload: onCancelMediaTransfer
  }), !inPreview && video && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_Video__WEBPACK_IMPORTED_MODULE_27__["default"], {
    video: video,
    isOwn: message.isOutgoing,
    isInWebPage: true,
    observeIntersectionForLoading: observeIntersectionForLoading,
    noAvatars: noAvatars,
    canAutoLoad: canAutoLoad,
    canAutoPlay: canAutoPlay,
    asForwarded: asForwarded,
    isDownloading: isDownloading,
    isProtected: isProtected,
    onClick: isMediaInteractive ? handleMediaClick : undefined,
    onCancelUpload: onCancelMediaTransfer
  }), !inPreview && audio && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Audio__WEBPACK_IMPORTED_MODULE_17__["default"], {
    theme: theme,
    message: message,
    origin: _types__WEBPACK_IMPORTED_MODULE_2__.AudioOrigin.Inline,
    noAvatars: noAvatars,
    isDownloading: isDownloading,
    onPlay: onAudioPlay,
    onCancelUpload: onCancelMediaTransfer
  }), !inPreview && document && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Document__WEBPACK_IMPORTED_MODULE_18__["default"], {
    document: document,
    message: message,
    observeIntersection: observeIntersectionForLoading,
    autoLoadFileMaxSizeMb: autoLoadFileMaxSizeMb,
    onMediaClick: handleMediaClick,
    onCancelUpload: onCancelMediaTransfer,
    isDownloading: isDownloading,
    shouldWarnAboutSvg: shouldWarnAboutSvg
  }), !inPreview && stickers && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: stickersRef,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])('media-inner', 'square-image', stickers.isEmoji && 'WebPage--emoji-grid', 'WebPage--stickers')
  }, stickers.documents.map(sticker => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    key: sticker.id,
    className: "WebPage--sticker"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_StickerView__WEBPACK_IMPORTED_MODULE_23__["default"], {
    containerRef: stickersRef,
    sticker: sticker,
    shouldLoop: true,
    size: stickers.isEmoji ? EMOJI_SIZE : STICKER_SIZE,
    customColor: customColor,
    observeIntersectionForPlaying: observeIntersectionForPlaying,
    observeIntersectionForLoading: observeIntersectionForLoading
  })))), inPreview && displayUrl && !isArticle && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: "WebPage-text"
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "site-name"
  }, displayUrl), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: "site-description"
  }, oldLang('Chat.Empty.LinkPreview')))), quickButtonTitle && renderQuickButton(quickButtonTitle));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)(global => {
  return {
    canPlayAnimatedEmojis: (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectCanPlayAnimatedEmojis)(global)
  };
})(WebPage)));

/***/ }),

/***/ "./src/components/middle/message/helpers/getCustomAppendixBg.ts":
/*!**********************************************************************!*\
  !*** ./src/components/middle/message/helpers/getCustomAppendixBg.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCustomAppendixBg)
/* harmony export */ });
/* harmony import */ var _util_launchMediaWorkers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../util/launchMediaWorkers */ "./src/util/launchMediaWorkers.ts");

const SELECTED_APPENDIX_COLORS = {
  dark: {
    outgoing: 'rgb(135,116,225)',
    incoming: 'rgb(33,33,33)'
  },
  light: {
    outgoing: 'rgb(238,255,222)',
    incoming: 'rgb(255,255,255)'
  }
};
function getCustomAppendixBg(src, isOwn, id, isSelected, theme) {
  if (isSelected) {
    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);
  }
  return (0,_util_launchMediaWorkers__WEBPACK_IMPORTED_MODULE_0__.requestMediaWorker)({
    name: 'offscreen-canvas:getAppendixColorFromImage',
    args: [src, isOwn]
  }, Math.round(id) % _util_launchMediaWorkers__WEBPACK_IMPORTED_MODULE_0__.MAX_WORKERS);
}

/***/ }),

/***/ "./src/components/middle/message/helpers/mediaDimensions.ts":
/*!******************************************************************!*\
  !*** ./src/components/middle/message/helpers/mediaDimensions.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MIN_MEDIA_HEIGHT: () => (/* binding */ MIN_MEDIA_HEIGHT),
/* harmony export */   MIN_MEDIA_WIDTH_WITH_TEXT: () => (/* binding */ MIN_MEDIA_WIDTH_WITH_TEXT),
/* harmony export */   calculateMediaDimensions: () => (/* binding */ calculateMediaDimensions),
/* harmony export */   getMinMediaWidth: () => (/* binding */ getMinMediaWidth)
/* harmony export */ });
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");

const SMALL_IMAGE_THRESHOLD = 12;
const MIN_MESSAGE_LENGTH_FOR_BLUR = 40;
const MIN_MEDIA_WIDTH_WITH_TEXT = 20 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_0__.REM;
const MIN_MEDIA_WIDTH = SMALL_IMAGE_THRESHOLD * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_0__.REM;
const MIN_MEDIA_HEIGHT = 5 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_0__.REM;
function getMinMediaWidth(text, hasCommentButton) {
  return (text?.length ?? 0) > MIN_MESSAGE_LENGTH_FOR_BLUR || hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT : MIN_MEDIA_WIDTH;
}
function calculateMediaDimensions({
  media,
  messageText,
  isOwn,
  isInWebPage,
  asForwarded,
  noAvatars,
  isMobile
}) {
  const isPhoto = media.mediaType === 'photo';
  const isVideo = media.mediaType === 'video';
  const isWebPagePhoto = isPhoto && isInWebPage;
  const isWebPageVideo = isVideo && isInWebPage;
  const {
    width,
    height
  } = isPhoto ? (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_0__.calculateInlineImageDimensions)(media, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile) : isVideo ? (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_0__.calculateVideoDimensions)(media, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile) : (0,_common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_0__.calculateExtendedPreviewDimensions)(media, isOwn, asForwarded, isInWebPage, noAvatars, isMobile);
  const minMediaWidth = getMinMediaWidth(messageText);
  let stretchFactor = 1;
  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {
    stretchFactor = minMediaWidth / width;
  }
  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {
    stretchFactor = MIN_MEDIA_HEIGHT / height;
  }
  const finalWidth = Math.round(width * stretchFactor);
  const finalHeight = Math.round(height * stretchFactor);
  return {
    width: finalWidth,
    height: finalHeight,
    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT
  };
}

/***/ }),

/***/ "./src/components/middle/message/helpers/webpageType.ts":
/*!**************************************************************!*\
  !*** ./src/components/middle/message/helpers/webpageType.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWebpageButtonLangKey: () => (/* binding */ getWebpageButtonLangKey)
/* harmony export */ });
// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51
function getWebpageButtonLangKey(type) {
  switch (type) {
    case 'telegram_channel_request':
    case 'telegram_megagroup_request':
    case 'telegram_chat_request':
      return 'ViewButtonRequestJoin';
    case 'telegram_message':
      return 'ViewButtonMessage';
    case 'telegram_bot':
      return 'ViewButtonBot';
    case 'telegram_voicechat':
      return 'ViewButtonVoiceChat';
    case 'telegram_livestream':
      return 'ViewButtonVoiceChatChannel';
    case 'telegram_megagroup':
    case 'telegram_chat':
      return 'ViewButtonGroup';
    case 'telegram_channel':
      return 'ViewButtonChannel';
    case 'telegram_user':
      return 'ViewButtonUser';
    case 'telegram_botapp':
      return 'ViewButtonBotApp';
    case 'telegram_chatlist':
      return 'ViewChatList';
    case 'telegram_story':
      return 'ViewButtonStory';
    case 'telegram_channel_boost':
    case 'telegram_group_boost':
      return 'ViewButtonBoost';
    case 'telegram_stickerset':
      return 'ViewButtonStickerset';
    case 'telegram_nft':
      return 'ViewButtonGiftUnique';
    default:
      return undefined;
  }
}

/***/ }),

/***/ "./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts":
/*!************************************************************************!*\
  !*** ./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useBlurredMediaThumbRef)
/* harmony export */ });
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _hooks_useOffscreenCanvasBlur__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../hooks/useOffscreenCanvasBlur */ "./src/hooks/useOffscreenCanvasBlur.ts");


function useBlurredMediaThumbRef(media, isDisabled) {
  const dataUri = media ? typeof media === 'string' ? media : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_0__.getMediaThumbUri)(media) : undefined;
  return (0,_hooks_useOffscreenCanvasBlur__WEBPACK_IMPORTED_MODULE_1__["default"])(dataUri, isDisabled);
}

/***/ }),

/***/ "./src/components/middle/message/hooks/useMessageTranslation.ts":
/*!**********************************************************************!*\
  !*** ./src/components/middle/message/hooks/useMessageTranslation.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMessageTranslation)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../util/schedulers */ "./src/util/schedulers.ts");



const MESSAGE_LIMIT_PER_REQUEST = 20;
const THROTTLE_DELAY = 500;
const PENDING_TRANSLATIONS = new Map();
function useMessageTranslation(chatTranslations, chatId, messageId, requestedLanguageCode) {
  const messageTranslation = requestedLanguageCode && messageId ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;
  const {
    isPending,
    text
  } = messageTranslation || {};
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!chatId || !messageId) return;
    if (!text && isPending === undefined && requestedLanguageCode) {
      addPendingTranslation(chatId, messageId, requestedLanguageCode);
    }
  }, [chatId, text, isPending, messageId, requestedLanguageCode]);
  if (!chatId || !messageId) {
    return {
      isPending: false,
      translatedText: undefined
    };
  }
  return {
    isPending,
    translatedText: text
  };
}
const throttledProcessPending = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_2__.throttle)(processPending, THROTTLE_DELAY);
function processPending() {
  const {
    translateMessages
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  let hasUnprocessed = false;
  PENDING_TRANSLATIONS.forEach((chats, toLanguageCode) => {
    chats.forEach((messageIds, chatId) => {
      const messageIdsToTranslate = messageIds.slice(0, MESSAGE_LIMIT_PER_REQUEST);
      if (messageIdsToTranslate.length < messageIds.length) {
        hasUnprocessed = true;
      }
      translateMessages({
        chatId,
        messageIds: messageIdsToTranslate,
        toLanguageCode
      });
      removePendingTranslations(chatId, messageIdsToTranslate, toLanguageCode);
    });
  });
  if (hasUnprocessed) {
    throttledProcessPending();
  }
}
function addPendingTranslation(chatId, messageId, toLanguageCode) {
  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode) || new Map();
  const messageIds = languageTranslations.get(chatId) || [];
  if (messageIds.includes(messageId)) {
    throttledProcessPending();
    return;
  }
  messageIds.push(messageId);
  languageTranslations.set(chatId, messageIds);
  PENDING_TRANSLATIONS.set(toLanguageCode, languageTranslations);
  (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().markMessagesTranslationPending({
    chatId,
    messageIds,
    toLanguageCode
  });
  throttledProcessPending();
}
function removePendingTranslations(chatId, messageIds, toLanguageCode) {
  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode);
  if (!languageTranslations?.size) {
    PENDING_TRANSLATIONS.delete(toLanguageCode);
    return;
  }
  const oldMessageIds = languageTranslations.get(chatId);
  if (!oldMessageIds?.length) {
    languageTranslations.delete(chatId);
    return;
  }
  const newMessageIds = oldMessageIds.filter(id => !messageIds.includes(id));
  if (!newMessageIds?.length) {
    languageTranslations.delete(chatId);
    if (!languageTranslations.size) {
      PENDING_TRANSLATIONS.delete(toLanguageCode);
    }
    return;
  }
  languageTranslations.set(chatId, newMessageIds);
}

/***/ }),

/***/ "./src/components/middle/message/hooks/useOverlayPosition.ts":
/*!*******************************************************************!*\
  !*** ./src/components/middle/message/hooks/useOverlayPosition.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useOverlayPosition)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");




const OFFSET_X = _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_2__.REM;
function useOverlayPosition({
  anchorRef,
  overlayRef,
  isMirrored,
  isForMessageEffect,
  isDisabled,
  id
}) {
  const updatePosition = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    const element = overlayRef.current;
    const anchor = anchorRef.current;
    if (!element || !anchor) {
      return;
    }
    const anchorRect = anchor.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    const windowWidth = window.innerWidth;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      const anchorCenterY = anchorRect.top + anchorRect.height / 2;
      const anchorBottomY = anchorRect.bottom;
      const y = isForMessageEffect ? anchorBottomY : anchorCenterY;
      element.style.top = `${y - elementRect.height / 2}px`;
      if (isMirrored) {
        element.style.left = `${anchorRect.left - OFFSET_X}px`;
      } else {
        element.style.right = `${windowWidth - anchorRect.right - OFFSET_X}px`;
      }
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) return;
    updatePosition();
  }, [isDisabled, id]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) return undefined;
    const messagesContainer = anchorRef.current.closest('.MessageList');
    if (!messagesContainer) return undefined;
    messagesContainer.addEventListener('scroll', updatePosition, {
      passive: true
    });
    return () => {
      messagesContainer.removeEventListener('scroll', updatePosition);
    };
  }, [isDisabled, anchorRef]);
  return updatePosition;
}

/***/ }),

/***/ "./src/components/middle/message/reactions/ReactionSelector.tsx":
/*!**********************************************************************!*\
  !*** ./src/components/middle/message/reactions/ReactionSelector.tsx ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ui_Button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../ui/Button */ "./src/components/ui/Button.tsx");
/* harmony import */ var _ui_Link__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../ui/Link */ "./src/components/ui/Link.tsx");
/* harmony import */ var _ReactionSelectorCustomReaction__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ReactionSelectorCustomReaction */ "./src/components/middle/message/reactions/ReactionSelectorCustomReaction.tsx");
/* harmony import */ var _ReactionSelectorReaction__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ReactionSelectorReaction */ "./src/components/middle/message/reactions/ReactionSelectorReaction.tsx");
/* harmony import */ var _ReactionSelector_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ReactionSelector.scss */ "./src/components/middle/message/reactions/ReactionSelector.scss");












const cn = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__.createClassNameBuilder)('ReactionSelector');
const REACTIONS_AMOUNT = 7;
const FADE_IN_DELAY = 20;
const ReactionSelector = ({
  allAvailableReactions,
  topReactions,
  defaultTagReactions,
  enabledReactions,
  currentReactions,
  reactionsLimit,
  isPrivate,
  isReady,
  canPlayAnimatedEmojis,
  className,
  isCurrentUserPremium,
  isInSavedMessages,
  isInStoryViewer,
  isForEffects,
  effectReactions,
  isWithPaidReaction,
  onClose,
  onToggleReaction,
  onSendPaidReaction,
  onShowPaidReactionModal,
  onShowMore
}) => {
  const {
    openPremiumModal
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const areReactionsLocked = isInSavedMessages && !isCurrentUserPremium && !isInStoryViewer;
  const shouldUseCurrentReactions = Boolean(reactionsLimit && currentReactions && currentReactions.length >= reactionsLimit);
  const availableReactions = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const reactions = (() => {
      if (shouldUseCurrentReactions) return currentReactions?.map(reaction => reaction.reaction);
      if (isForEffects) return effectReactions;
      if (isInSavedMessages) return defaultTagReactions;
      if (enabledReactions?.type === 'some') return enabledReactions.allowed;
      return allAvailableReactions?.map(reaction => reaction.reaction);
    })();
    const filteredReactions = reactions?.map(reaction => {
      const isCustomReaction = reaction.type === 'custom';
      const availableReaction = allAvailableReactions?.find(r => (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isSameReaction)(r.reaction, reaction));
      if (isForEffects) return availableReaction;
      if (!isCustomReaction && !availableReaction || availableReaction?.isInactive) return undefined;
      if (!isPrivate && !shouldUseCurrentReactions && (!enabledReactions || !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.canSendReaction)(reaction, enabledReactions))) {
        return undefined;
      }
      return isCustomReaction ? reaction : availableReaction;
    }).filter(Boolean) || [];
    const sortedReactions = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.sortReactions)(filteredReactions, topReactions);
    if (isWithPaidReaction) {
      sortedReactions.unshift({
        type: 'paid'
      });
    }
    return sortedReactions;
  }, [allAvailableReactions, currentReactions, defaultTagReactions, enabledReactions, isInSavedMessages, isPrivate, topReactions, isForEffects, effectReactions, shouldUseCurrentReactions, isWithPaidReaction]);
  const reactionsToRender = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    // Component can fit one more if we do not need show more button
    return availableReactions.length === REACTIONS_AMOUNT + 1 ? availableReactions : availableReactions.slice(0, REACTIONS_AMOUNT);
  }, [availableReactions]);
  const withMoreButton = reactionsToRender.length < availableReactions.length;
  const userReactionIndexes = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const chosenReactions = currentReactions?.filter(({
      chosenOrder
    }) => chosenOrder !== undefined) || [];
    return new Set(chosenReactions.map(({
      reaction
    }) => reactionsToRender.findIndex(r => r && (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isSameReaction)('reaction' in r ? r.reaction : r, reaction))));
  }, [currentReactions, reactionsToRender]);
  const handleShowMoreClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    const bound = ref.current?.getBoundingClientRect() || {
      x: 0,
      y: 0
    };
    onShowMore({
      x: bound.x,
      y: bound.y
    });
  });
  const handleOpenPremiumModal = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    onClose?.();
    openPremiumModal({
      initialSection: 'saved_tags'
    });
  });
  const hintText = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (isInSavedMessages) {
      if (!isCurrentUserPremium) {
        const text = lang('lng_subscribe_tag_about');
        const parts = text.split('{link}');
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", null, parts[0], /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Link__WEBPACK_IMPORTED_MODULE_8__["default"], {
          isPrimary: true,
          onClick: handleOpenPremiumModal
        }, lang('lng_subscribe_tag_link')), parts[1]);
      }
      return lang('SavedTagReactionsHint2');
    }
    if (isInStoryViewer) {
      return lang('StoryReactionsHint');
    }
    if (isForEffects) {
      return lang('AddEffectMessageHint');
    }
    return undefined;
  }, [isCurrentUserPremium, isInSavedMessages, isInStoryViewer, lang, isForEffects]);
  if (!reactionsToRender.length) return undefined;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(cn('&'), className),
    ref: ref
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: cn('bubble-small', lang.isRtl && 'isRtl')
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: cn('items-wrapper')
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: cn('bubble-big', lang.isRtl && 'isRtl')
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: cn('items')
  }, hintText && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: cn('hint')
  }, hintText), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: cn('reactions'),
    dir: lang.isRtl ? 'rtl' : undefined
  }, reactionsToRender.map((reaction, i) => 'reaction' in reaction ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ReactionSelectorReaction__WEBPACK_IMPORTED_MODULE_10__["default"], {
    key: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getReactionKey)(reaction.reaction),
    isReady: isReady,
    onToggleReaction: onToggleReaction,
    reaction: reaction,
    noAppearAnimation: !canPlayAnimatedEmojis,
    chosen: userReactionIndexes.has(i),
    isLocked: areReactionsLocked
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ReactionSelectorCustomReaction__WEBPACK_IMPORTED_MODULE_9__["default"], {
    key: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getReactionKey)(reaction),
    isReady: isReady,
    onToggleReaction: onToggleReaction,
    onSendPaidReaction: onSendPaidReaction,
    onShowPaidReactionModal: onShowPaidReactionModal,
    reaction: reaction,
    noAppearAnimation: !canPlayAnimatedEmojis,
    chosen: userReactionIndexes.has(i),
    isLocked: areReactionsLocked,
    style: `--_animation-delay: ${(REACTIONS_AMOUNT - i) * FADE_IN_DELAY}ms`
  })), withMoreButton && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Button__WEBPACK_IMPORTED_MODULE_7__["default"], {
    color: "translucent",
    className: cn('show-more'),
    onClick: handleShowMoreClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: "down"
  }))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ReactionSelector));

/***/ }),

/***/ "./src/components/middle/message/reactions/ReactionSelectorCustomReaction.tsx":
/*!************************************************************************************!*\
  !*** ./src/components/middle/message/reactions/ReactionSelectorCustomReaction.tsx ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/helpers/animatedAssets */ "./src/components/common/helpers/animatedAssets.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _common_AnimatedIcon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/AnimatedIcon */ "./src/components/common/AnimatedIcon.tsx");
/* harmony import */ var _common_CustomEmoji__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../common/CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ReactionSelectorReaction.module.scss */ "./src/components/middle/message/reactions/ReactionSelectorReaction.module.scss");










const REACTION_SIZE = 2 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_3__.REM;
const ReactionSelectorCustomReaction = ({
  reaction,
  chosen,
  isReady,
  noAppearAnimation,
  style,
  isLocked,
  onToggleReaction,
  onSendPaidReaction,
  onShowPaidReactionModal
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (reaction.type === 'paid') {
      onSendPaidReaction?.();
      return;
    }
    onToggleReaction(reaction);
  });
  const {
    isContextMenuOpen,
    handleBeforeContextMenu,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_4__["default"])(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isContextMenuOpen) {
      onShowPaidReactionModal?.();
      handleContextMenuClose();
      handleContextMenuHide();
    }
  }, [handleContextMenuClose, onShowPaidReactionModal, handleContextMenuHide, isContextMenuOpen]);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root, _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].custom, chosen && reaction.type !== 'paid' && _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].chosen, !noAppearAnimation && isReady && _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].customAnimated, noAppearAnimation && _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].visible),
    ref: ref,
    style: style,
    onClick: handleClick,
    onMouseDown: handleBeforeContextMenu,
    onContextMenu: handleContextMenu
  }, reaction.type === 'paid' ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedIcon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    tgsUrl: _common_helpers_animatedAssets__WEBPACK_IMPORTED_MODULE_2__.LOCAL_TGS_URLS.StarReaction,
    size: REACTION_SIZE,
    noLoop: false
  }) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_CustomEmoji__WEBPACK_IMPORTED_MODULE_7__["default"], {
    documentId: reaction.documentId,
    size: REACTION_SIZE
  }), isLocked && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_8__["default"], {
    className: _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].lock,
    name: "lock-badge"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ReactionSelectorCustomReaction));

/***/ }),

/***/ "./src/components/middle/message/reactions/ReactionSelectorReaction.tsx":
/*!******************************************************************************!*\
  !*** ./src/components/middle/message/reactions/ReactionSelectorReaction.tsx ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useFlag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../hooks/useFlag */ "./src/hooks/useFlag.ts");
/* harmony import */ var _hooks_useMedia__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../hooks/useMedia */ "./src/hooks/useMedia.ts");
/* harmony import */ var _common_AnimatedSticker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/AnimatedSticker */ "./src/components/common/AnimatedSticker.tsx");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ReactionSelectorReaction.module.scss */ "./src/components/middle/message/reactions/ReactionSelectorReaction.module.scss");








const REACTION_SIZE = 2 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_2__.REM;
const ReactionSelectorReaction = ({
  reaction,
  isReady,
  noAppearAnimation,
  chosen,
  isLocked,
  onToggleReaction
}) => {
  const mediaAppearData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_4__["default"])(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);
  const mediaData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_4__["default"])(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);
  const staticIconData = (0,_hooks_useMedia__WEBPACK_IMPORTED_MODULE_4__["default"])(`document${reaction.staticIcon?.id}`, !noAppearAnimation);
  const [isAnimationLoaded, markAnimationLoaded] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const [isFirstPlay,, unmarkIsFirstPlay] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_3__["default"])(true);
  const [isActivated, activate, deactivate] = (0,_hooks_useFlag__WEBPACK_IMPORTED_MODULE_3__["default"])();
  function handleClick() {
    onToggleReaction(reaction.reaction);
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].root, chosen && _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].chosen),
    onClick: handleClick,
    onMouseEnter: isReady && !isFirstPlay ? activate : undefined
  }, noAppearAnimation && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("img", {
    className: _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].staticIcon,
    src: staticIconData,
    alt: reaction.reaction.emoticon,
    draggable: false
  }), !isAnimationLoaded && !noAppearAnimation && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedSticker__WEBPACK_IMPORTED_MODULE_5__["default"], {
    key: reaction.appearAnimation?.id,
    tgsUrl: mediaAppearData,
    play: isFirstPlay,
    noLoop: true,
    size: REACTION_SIZE,
    onEnded: unmarkIsFirstPlay,
    forceAlways: true
  }), !isFirstPlay && !noAppearAnimation && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_AnimatedSticker__WEBPACK_IMPORTED_MODULE_5__["default"], {
    key: reaction.selectAnimation?.id,
    tgsUrl: mediaData,
    play: isActivated,
    noLoop: true,
    size: REACTION_SIZE,
    onLoad: markAnimationLoaded,
    onEnded: deactivate,
    forceAlways: true
  }), isLocked && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_6__["default"], {
    className: _ReactionSelectorReaction_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].lock,
    name: "lock-badge"
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(ReactionSelectorReaction));

/***/ }),

/***/ "./src/components/right/hooks/useAsyncRendering.ts":
/*!*********************************************************!*\
  !*** ./src/components/right/hooks/useAsyncRendering.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useAsyncRendering)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../hooks/useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useSyncEffect */ "./src/hooks/useSyncEffect.ts");



function useAsyncRendering(dependencies, delay) {
  const isDisabled = delay === undefined;
  const shouldRenderRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(isDisabled);
  const timeoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const forceUpdate = (0,_hooks_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__["default"])();
  (0,_hooks_useSyncEffect__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    if (isDisabled) {
      return;
    }
    shouldRenderRef.current = false;
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = undefined;
    }
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, dependencies);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled || shouldRenderRef.current) {
      return;
    }
    const exec = () => {
      shouldRenderRef.current = true;
      forceUpdate();
    };
    if (delay > 0) {
      timeoutRef.current = window.setTimeout(exec, delay);
    } else {
      exec();
    }
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, dependencies);
  return shouldRenderRef.current;
}

/***/ }),

/***/ "./src/components/right/statistics/StatisticsOverview.tsx":
/*!****************************************************************!*\
  !*** ./src/components/right/statistics/StatisticsOverview.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_textFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/textFormat */ "./src/util/textFormat.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/icons/Icon */ "./src/components/common/icons/Icon.tsx");
/* harmony import */ var _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StatisticsOverview.module.scss */ "./src/components/right/statistics/StatisticsOverview.module.scss");







const CHANNEL_OVERVIEW = [[{
  name: 'followers',
  title: 'ChannelStats.Overview.Followers'
}, {
  name: 'enabledNotifications',
  title: 'ChannelStats.Overview.EnabledNotifications',
  isPercentage: true
}], [{
  name: 'viewsPerPost',
  title: 'ChannelStats.Overview.ViewsPerPost'
}, {
  name: 'viewsPerStory',
  title: 'ChannelStats.Overview.ViewsPerStory'
}], [{
  name: 'sharesPerPost',
  title: 'ChannelStats.Overview.SharesPerPost'
}, {
  name: 'sharesPerStory',
  title: 'ChannelStats.Overview.SharesPerStory'
}], [{
  name: 'reactionsPerPost',
  title: 'ChannelStats.Overview.ReactionsPerPost'
}, {
  name: 'reactionsPerStory',
  title: 'ChannelStats.Overview.ReactionsPerStory'
}]];
const GROUP_OVERVIEW = [[{
  name: 'members',
  title: 'Stats.GroupMembers'
}, {
  name: 'messages',
  title: 'Stats.GroupMessages'
}], [{
  name: 'viewers',
  title: 'Stats.GroupViewers'
}, {
  name: 'posters',
  title: 'Stats.GroupPosters'
}]];
const MESSAGE_OVERVIEW = [[{
  name: 'viewsCount',
  title: 'Stats.Message.Views',
  isPlain: true
}, {
  name: 'publicForwards',
  title: 'Stats.Message.PublicShares',
  isPlain: true
}], [{
  name: 'reactionsCount',
  title: 'Channel.Stats.Overview.Reactions',
  isPlain: true
}, {
  name: 'forwardsCount',
  title: 'Stats.Message.PrivateShares',
  isPlain: true,
  isApproximate: true
}]];
const STORY_OVERVIEW = [[{
  name: 'viewsCount',
  title: 'Channel.Stats.Overview.Views',
  isPlain: true
}, {
  name: 'publicForwards',
  title: 'PublicShares',
  isPlain: true
}], [{
  name: 'reactionsCount',
  title: 'Channel.Stats.Overview.Reactions',
  isPlain: true
}, {
  name: 'forwardsCount',
  title: 'PrivateShares',
  isPlain: true
}]];
const BOOST_OVERVIEW = [[{
  name: 'level',
  title: 'Stats.Boosts.Level',
  isPlain: true
}, {
  name: 'premiumSubscribers',
  title: 'Stats.Boosts.PremiumSubscribers',
  isPercentage: true,
  isApproximate: true,
  withAbsoluteValue: true
}], [{
  name: 'boosts',
  title: 'Stats.Boosts.ExistingBoosts',
  isPlain: true
}, {
  name: 'remainingBoosts',
  title: 'Stats.Boosts.BoostsToLevelUp',
  isPlain: true
}]];
const StatisticsOverview = ({
  title,
  type,
  statistics,
  isToncoin,
  className,
  subtitle
}) => {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const renderOverviewItemValue = ({
    change,
    percentage
  }) => {
    if (!change) {
      return undefined;
    }
    const isChangeNegative = Number(change) < 0;
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].value, isChangeNegative && _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].negative)
    }, isChangeNegative ? `-${(0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.formatIntegerCompact)(Math.abs(change))}` : `+${(0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.formatIntegerCompact)(change)}`, percentage && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, ' ', "(", percentage, "%)"));
  };
  const renderBalanceCell = (balance, usdRate, text) => {
    const [integerTonPart, decimalTonPart] = balance.toFixed(4).split('.');
    const [integerUsdPart, decimalUsdPart] = (balance * usdRate).toFixed(2).split('.');
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_icons_Icon__WEBPACK_IMPORTED_MODULE_5__["default"], {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].toncoin,
      name: "toncoin"
    }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("b", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableValue
    }, integerTonPart, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].decimalPart
    }, ".", decimalTonPart)), ' ', /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableHeading
    }, "\u2248 $", integerUsdPart, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].decimalUsdPart
    }, ".", decimalUsdPart)), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableHeading
    }, lang(text)));
  };
  const {
    period
  } = statistics;
  const {
    balances,
    usdRate
  } = statistics;
  const schema = getSchemaByType(type);
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_1__["default"])(_StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].root, className)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].header
  }, title && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].title
  }, title), period && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].caption
  }, (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.formatFullDate)(lang, period.minDate * 1000), " \u2014 ", (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.formatFullDate)(lang, period.maxDate * 1000))), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("table", {
    className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].table
  }, isToncoin ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("tr", null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("td", {
    className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableCell
  }, renderBalanceCell(balances?.availableBalance || 0, usdRate || 0, 'lng_channel_earn_available'), renderBalanceCell(balances?.currentBalance || 0, usdRate || 0, 'lng_channel_earn_reward'), renderBalanceCell(balances?.overallRevenue || 0, usdRate || 0, 'lng_channel_earn_total'))) : schema.map(row => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("tr", null, row.map(cell => {
    const field = statistics[cell.name];
    if (cell.isPlain) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("td", {
        className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableCell
      }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("b", {
        className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableValue
      }, `${cell.isApproximate ? '≈' : ''}${(0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.formatInteger)(field)}`), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
        className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableHeading
      }, lang(cell.title)));
    }
    if (cell.isPercentage) {
      return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("td", {
        className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableCell
      }, cell.withAbsoluteValue && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableValue
      }, `${cell.isApproximate ? '≈' : ''}${(0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.formatInteger)(field.part)}`), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
        className: cell.withAbsoluteValue ? _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableSecondaryValue : _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableValue
      }, field.percentage, "%"), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
        className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableHeading
      }, lang(cell.title)));
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("td", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableCell
    }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("b", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableValue
    }, (0,_util_textFormat__WEBPACK_IMPORTED_MODULE_3__.formatIntegerCompact)(field.current)), ' ', renderOverviewItemValue(field), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("h3", {
      className: _StatisticsOverview_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].tableHeading
    }, lang(cell.title)));
  })))), subtitle);
};
function getSchemaByType(type) {
  switch (type) {
    case 'group':
      return GROUP_OVERVIEW;
    case 'message':
      return MESSAGE_OVERVIEW;
    case 'boost':
      return BOOST_OVERVIEW;
    case 'story':
      return STORY_OVERVIEW;
    case 'channel':
    default:
      return CHANNEL_OVERVIEW;
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(StatisticsOverview));

/***/ }),

/***/ "./src/components/story/StoryRibbon.tsx":
/*!**********************************************!*\
  !*** ./src/components/story/StoryRibbon.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/useAppLayout */ "./src/hooks/useAppLayout.ts");
/* harmony import */ var _hooks_useHorizontalScroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useHorizontalScroll */ "./src/hooks/useHorizontalScroll.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _StoryRibbonButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StoryRibbonButton */ "./src/components/story/StoryRibbonButton.tsx");
/* harmony import */ var _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StoryRibbon.module.scss */ "./src/components/story/StoryRibbon.module.scss");








function StoryRibbon({
  isArchived,
  className,
  orderedPeerIds,
  usersById,
  chatsById,
  isClosing
}) {
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const fullClassName = (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_2__["default"])(_StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].root, !orderedPeerIds.length && _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].hidden, isClosing && _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_7__["default"].closing, className, 'no-scrollbar');

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  (0,_hooks_useHorizontalScroll__WEBPACK_IMPORTED_MODULE_4__["default"])(ref, (0,_hooks_useAppLayout__WEBPACK_IMPORTED_MODULE_3__.getIsMobile)());
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    id: "StoryRibbon",
    className: fullClassName,
    dir: lang.isRtl ? 'rtl' : undefined
  }, orderedPeerIds.map(peerId => {
    const peer = usersById[peerId] || chatsById[peerId];
    if (!peer) {
      return undefined;
    }
    return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_StoryRibbonButton__WEBPACK_IMPORTED_MODULE_6__["default"], {
      key: peerId,
      peer: peer,
      isArchived: isArchived
    });
  }));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  isArchived
}) => {
  const {
    orderedPeerIds: {
      active,
      archived
    }
  } = global.stories;
  const usersById = global.users.byId;
  const chatsById = global.chats.byId;
  return {
    orderedPeerIds: isArchived ? archived : active,
    usersById,
    chatsById
  };
})(StoryRibbon)));

/***/ }),

/***/ "./src/components/story/StoryRibbonButton.tsx":
/*!****************************************************!*\
  !*** ./src/components/story/StoryRibbonButton.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types */ "./src/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _middle_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../middle/helpers/preventMessageInputBlur */ "./src/components/middle/helpers/preventMessageInputBlur.ts");
/* harmony import */ var _hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useContextMenuHandlers */ "./src/hooks/useContextMenuHandlers.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useStoryPreloader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hooks/useStoryPreloader */ "./src/components/story/hooks/useStoryPreloader.ts");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _ui_Menu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/Menu */ "./src/components/ui/Menu.tsx");
/* harmony import */ var _ui_MenuItem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ui/MenuItem */ "./src/components/ui/MenuItem.tsx");
/* harmony import */ var _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./StoryRibbon.module.scss */ "./src/components/story/StoryRibbon.module.scss");














function StoryRibbonButton({
  peer,
  isArchived
}) {
  const {
    openChat,
    openChatWithInfo,
    openStoryViewer,
    toggleStoriesHidden
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_8__["default"])();
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isSelf = 'isSelf' in peer && peer.isSelf;
  const isChannel = !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserId)(peer.id);
  (0,_hooks_useStoryPreloader__WEBPACK_IMPORTED_MODULE_9__["default"])(peer.id);
  const {
    isContextMenuOpen,
    contextMenuAnchor,
    handleBeforeContextMenu,
    handleContextMenu,
    handleContextMenuClose,
    handleContextMenuHide
  } = (0,_hooks_useContextMenuHandlers__WEBPACK_IMPORTED_MODULE_6__["default"])(ref);
  const getTriggerElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => ref.current);
  const getRootElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => document.body);
  const getMenuElement = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => ref.current.querySelector('.story-peer-context-menu .bubble'));
  const getLayout = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => ({
    withPortal: true,
    isDense: true
  }));
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    if (isContextMenuOpen) return;
    openStoryViewer({
      peerId: peer.id,
      origin: _types__WEBPACK_IMPORTED_MODULE_2__.StoryViewerOrigin.StoryRibbon
    });
  });
  const handleMouseDown = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(e => {
    (0,_middle_helpers_preventMessageInputBlur__WEBPACK_IMPORTED_MODULE_5__.preventMessageInputBlurWithBubbling)(e);
    handleBeforeContextMenu(e);
  });
  const handleSavedStories = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    openChatWithInfo({
      id: peer.id,
      shouldReplaceHistory: true,
      profileTab: 'stories'
    });
  });
  const handleArchivedStories = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    openChatWithInfo({
      id: peer.id,
      shouldReplaceHistory: true,
      profileTab: 'storiesArchive'
    });
  });
  const handleOpenChat = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    openChat({
      id: peer.id,
      shouldReplaceHistory: true
    });
  });
  const handleOpenProfile = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    openChatWithInfo({
      id: peer.id,
      shouldReplaceHistory: true
    });
  });
  const handleArchivePeer = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    toggleStoriesHidden({
      peerId: peer.id,
      isHidden: !isArchived
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    role: "button",
    "data-peer-id": peer.id,
    tabIndex: 0,
    className: _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].peer,
    onMouseDown: handleMouseDown,
    onClick: handleClick,
    onContextMenu: handleContextMenu
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_10__["default"], {
    peer: peer,
    withStory: true,
    storyViewerOrigin: _types__WEBPACK_IMPORTED_MODULE_2__.StoryViewerOrigin.StoryRibbon,
    storyViewerMode: "full"
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].name, peer.hasUnreadStories && _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].name_hasUnreadStory)
  }, isSelf ? lang('MyStory') : (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getPeerTitle)(lang, peer)), contextMenuAnchor !== undefined && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_Menu__WEBPACK_IMPORTED_MODULE_11__["default"], {
    isOpen: isContextMenuOpen,
    anchor: contextMenuAnchor,
    getTriggerElement: getTriggerElement,
    getRootElement: getRootElement,
    getMenuElement: getMenuElement,
    getLayout: getLayout,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])('story-peer-context-menu', _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_13__["default"].contextMenu),
    autoClose: true,
    withPortal: true,
    onClose: handleContextMenuClose,
    onCloseAnimationEnd: handleContextMenuHide
  }, isSelf ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: handleSavedStories,
    icon: "play-story"
  }, lang('StoryList.Context.SavedStories')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: handleArchivedStories,
    icon: "archive"
  }, lang('StoryList.Context.ArchivedStories'))) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].Fragment, null, !isChannel && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: handleOpenChat,
    icon: "message"
  }, lang('SendMessageTitle')), isChannel ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: handleOpenProfile,
    icon: "channel"
  }, lang('ChatList.ContextOpenChannel')) : /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: handleOpenProfile,
    icon: "user"
  }, lang('StoryList.Context.ViewProfile')), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_ui_MenuItem__WEBPACK_IMPORTED_MODULE_12__["default"], {
    onClick: handleArchivePeer,
    icon: isArchived ? 'unarchive' : 'archive'
  }, lang(isArchived ? 'StoryList.Context.Unarchive' : 'StoryList.Context.Archive')))));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(StoryRibbonButton));

/***/ }),

/***/ "./src/components/story/StoryToggler.tsx":
/*!***********************************************!*\
  !*** ./src/components/story/StoryToggler.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _helpers_ribbonAnimation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/ribbonAnimation */ "./src/components/story/helpers/ribbonAnimation.ts");
/* harmony import */ var _hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useShowTransition */ "./src/hooks/useShowTransition.ts");
/* harmony import */ var _hooks_useStoryPreloader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hooks/useStoryPreloader */ "./src/components/story/hooks/useStoryPreloader.ts");
/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/Avatar */ "./src/components/common/Avatar.tsx");
/* harmony import */ var _StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./StoryToggler.module.scss */ "./src/components/story/StoryToggler.module.scss");










const PRELOAD_PEERS = 5;
function StoryToggler({
  currentUserId,
  orderedPeerIds,
  usersById,
  chatsById,
  canShow,
  isShown,
  isForumPanelOpen,
  isArchived,
  withAnimation,
  peerStories
}) {
  const {
    toggleStoryRibbon
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_hooks_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const peers = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (orderedPeerIds.length === 1) {
      return [usersById[orderedPeerIds[0]] || chatsById[orderedPeerIds[0]]];
    }
    return orderedPeerIds.map(id => usersById[id] || chatsById[id]).filter(peer => peer && peer.id !== currentUserId).slice(0, _config__WEBPACK_IMPORTED_MODULE_2__.PREVIEW_AVATAR_COUNT).reverse();
  }, [currentUserId, orderedPeerIds, usersById, chatsById]);
  const closeFriends = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!peers?.length) return {};
    return peers.reduce((acc, peer) => {
      const stories = peerStories[peer.id];
      if (!stories) return acc;
      const isCloseFriend = stories.orderedIds.some(id => {
        const story = stories.byId[id];
        if (!story || !('isForCloseFriends' in story)) return false;
        const isRead = stories.lastReadId && story.id <= stories.lastReadId;
        return story.isForCloseFriends && !isRead;
      });
      acc[peer.id] = isCloseFriend;
      return acc;
    }, {});
  }, [peerStories, peers]);
  const preloadPeerIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return orderedPeerIds.slice(0, PRELOAD_PEERS);
  }, [orderedPeerIds]);
  (0,_hooks_useStoryPreloader__WEBPACK_IMPORTED_MODULE_7__["default"])(preloadPeerIds);
  const isVisible = canShow && isShown;
  // For some reason, setting 'slow' here also fixes scroll freezes on iOS when collapsing Story Ribbon
  const {
    ref,
    shouldRender
  } = (0,_hooks_useShowTransition__WEBPACK_IMPORTED_MODULE_6__["default"])({
    isOpen: isVisible,
    className: 'slow',
    withShouldRender: true
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!withAnimation || isForumPanelOpen) return;
    if (isVisible) {
      (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.beginHeavyAnimation)(_helpers_ribbonAnimation__WEBPACK_IMPORTED_MODULE_4__.ANIMATION_DURATION + _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_END_DELAY);
      (0,_helpers_ribbonAnimation__WEBPACK_IMPORTED_MODULE_4__.animateClosing)(isArchived);
    } else {
      (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.beginHeavyAnimation)(_helpers_ribbonAnimation__WEBPACK_IMPORTED_MODULE_4__.ANIMATION_DURATION + _config__WEBPACK_IMPORTED_MODULE_2__.ANIMATION_END_DELAY);
      (0,_helpers_ribbonAnimation__WEBPACK_IMPORTED_MODULE_4__.animateOpening)(isArchived);
    }
  }, [isArchived, isVisible, withAnimation, isForumPanelOpen]);
  if (!shouldRender) {
    return undefined;
  }
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("button", {
    ref: ref,
    type: "button",
    id: "StoryToggler",
    className: _StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].root,
    "aria-label": lang('Chat.Context.Peer.OpenStory'),
    onClick: () => toggleStoryRibbon({
      isShown: true,
      isArchived
    }),
    dir: lang.isRtl ? 'rtl' : undefined
  }, peers.map(peer => /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_Avatar__WEBPACK_IMPORTED_MODULE_8__["default"], {
    key: peer.id,
    peer: peer,
    size: "tiny",
    className: _StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].avatar,
    withStorySolid: true,
    forceFriendStorySolid: closeFriends[peer.id]
  })));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_1__.withGlobal)((global, {
  isArchived
}) => {
  const {
    orderedPeerIds: {
      archived,
      active
    },
    byPeerId
  } = global.stories;
  const {
    storyViewer: {
      isRibbonShown,
      isArchivedRibbonShown
    }
  } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)(global);
  const isForumPanelOpen = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectIsForumPanelOpen)(global);
  const withAnimation = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectPerformanceSettingsValue)(global, 'storyRibbonAnimations');
  return {
    currentUserId: global.currentUserId,
    orderedPeerIds: isArchived ? archived : active,
    isShown: isArchived ? !isArchivedRibbonShown : !isRibbonShown,
    isForumPanelOpen,
    withAnimation,
    usersById: global.users.byId,
    chatsById: global.chats.byId,
    peerStories: byPeerId
  };
})(StoryToggler)));

/***/ }),

/***/ "./src/components/story/helpers/ribbonAnimation.ts":
/*!*********************************************************!*\
  !*** ./src/components/story/helpers/ribbonAnimation.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ANIMATION_DURATION: () => (/* binding */ ANIMATION_DURATION),
/* harmony export */   animateClosing: () => (/* binding */ animateClosing),
/* harmony export */   animateOpening: () => (/* binding */ animateOpening)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/animation */ "./src/util/animation.ts");
/* harmony import */ var _util_stopEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/stopEvent */ "./src/util/stopEvent.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../StoryRibbon.module.scss */ "./src/components/story/StoryRibbon.module.scss");
/* harmony import */ var _StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../StoryToggler.module.scss */ "./src/components/story/StoryToggler.module.scss");







const ANIMATION_DURATION = 250;
const RIBBON_OFFSET = 0.25 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.REM;
const RIBBON_Z_INDEX = 11;
const STROKE_OFFSET = 0.1875 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.REM;
const CANVAS_OFFSET = 0.125 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_4__.REM;
const callbacks = new Set();
function animateOpening(isArchived) {
  cancelDelayedCallbacks();
  const {
    container,
    toggler,
    leftMainHeader,
    ribbonPeers,
    toggleAvatars
  } = getHTMLElements(isArchived);
  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {
    return;
  }
  const {
    bottom: headerBottom,
    right: headerRight
  } = leftMainHeader.getBoundingClientRect();
  const toTop = headerBottom + RIBBON_OFFSET;

  // Toggle avatars are in the reverse order
  const lastToggleAvatar = toggleAvatars[0];
  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];
  const lastId = getPeerId(lastToggleAvatar);
  Array.from(ribbonPeers).reverse().forEach((peer, index, {
    length
  }) => {
    const id = getPeerId(peer);
    if (!id) return;
    const isLast = id === lastId;
    let toggleAvatar = selectByPeerId(toggler, id);
    let zIndex = RIBBON_Z_INDEX + index + 1;
    if (!toggleAvatar) {
      const isSelf = index === length - 1;

      // Self story should appear from the first toggle avatar
      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;
      zIndex = RIBBON_Z_INDEX;
    }
    if (!toggleAvatar) return;
    let {
      // eslint-disable-next-line prefer-const
      top: fromTop,
      left: fromLeft,
      width: fromWidth
    } = toggleAvatar.getBoundingClientRect();
    const {
      left: toLeft,
      width: toWidth
    } = peer.getBoundingClientRect();
    if (toLeft > headerRight) {
      return;
    }
    fromLeft -= STROKE_OFFSET;
    fromWidth += 2 * STROKE_OFFSET;
    const fromTranslateX = fromLeft - toLeft;
    const fromTranslateY = fromTop - toTop;
    const fromScale = fromWidth / toWidth;
    fromTop -= STROKE_OFFSET;
    const toTranslateX = toLeft - fromLeft + 2 * STROKE_OFFSET;
    const toTranslateY = toTop - fromTop + STROKE_OFFSET;
    const toScale = toWidth / (fromWidth + 2 * STROKE_OFFSET);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      if (!toggleAvatar) return;
      const ghost = createGhost(peer);
      let ghost2;

      // If this is a toogle avatar we create a second ghost and do crossfade animation
      if (zIndex > RIBBON_Z_INDEX) {
        ghost2 = createGhost(toggleAvatar);
        if (isLast) {
          ghost2.classList.add(_StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghostLast);
        }
      } else {
        // Else we animate only name
        ghost.classList.add(_StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghostAnimateName);
      }
      (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost, {
        top: `${toTop}px`,
        left: `${toLeft}px`,
        zIndex: `${zIndex}`,
        opacity: ghost2 ? '0' : '',
        transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`
      });
      if (ghost2) {
        (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost2, {
          top: `${fromTop}px`,
          left: `${fromLeft}px`,
          zIndex: `${zIndex}`
        });
      }
      container.appendChild(ghost);
      if (ghost2) {
        container.appendChild(ghost2);
      }
      toggleAvatar.classList.add('animating');
      peer.classList.add('animating');
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
        (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost, {
          opacity: '',
          transform: ''
        });
        if (ghost2) {
          (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost2, {
            opacity: '0',
            transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`
          });
        } else {
          ghost.classList.add(_StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghostRevealName);
        }
        const cb = createDelayedCallback(() => {
          (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
            if (container.contains(ghost)) {
              container.removeChild(ghost);
            }
            if (ghost2 && container.contains(ghost2)) {
              container.removeChild(ghost2);
            }
            toggleAvatar?.classList.remove('animating');
            peer.classList.remove('animating');
          });
        }, ANIMATION_DURATION + _config__WEBPACK_IMPORTED_MODULE_0__.ANIMATION_END_DELAY);
        callbacks.add(cb);
      });
    });
  });
}
function animateClosing(isArchived) {
  cancelDelayedCallbacks();
  const {
    container,
    toggler,
    toggleAvatars,
    ribbonPeers,
    leftMainHeader
  } = getHTMLElements(isArchived);
  if (!toggler || !toggleAvatars || !ribbonPeers || !container || !leftMainHeader) {
    return;
  }
  const {
    right: headerRight
  } = leftMainHeader.getBoundingClientRect();

  // Toggle avatars are in the reverse order
  const lastToggleAvatar = toggleAvatars[0];
  const firstToggleAvatar = toggleAvatars[toggleAvatars.length - 1];
  const lastId = getPeerId(lastToggleAvatar);
  Array.from(ribbonPeers).reverse().forEach((peer, index, {
    length
  }) => {
    const id = getPeerId(peer);
    if (!id) return;
    const isLast = id === lastId;
    let toggleAvatar = selectByPeerId(toggler, id);
    let zIndex = RIBBON_Z_INDEX + index + 1;
    if (!toggleAvatar) {
      const isSelf = index === length - 1;

      // Self story should appear from the first toggle avatar
      toggleAvatar = isSelf ? firstToggleAvatar : lastToggleAvatar;
      zIndex = RIBBON_Z_INDEX;
    }
    if (!toggleAvatar) return;
    const {
      top: fromTop,
      left: fromLeft,
      width: fromWidth
    } = peer.getBoundingClientRect();
    let {
      left: toLeft,
      width: toWidth,
      top: toTop
    } = toggleAvatar.getBoundingClientRect();
    if (fromLeft > headerRight) {
      return;
    }
    toLeft -= STROKE_OFFSET;
    toWidth += 2 * STROKE_OFFSET;
    const toTranslateX = toLeft - fromLeft;
    const toTranslateY = toTop - fromTop - CANVAS_OFFSET;
    const toScale = toWidth / fromWidth;
    toTop -= STROKE_OFFSET;
    const fromTranslateX = fromLeft - toLeft + 2 * STROKE_OFFSET;
    const fromTranslateY = fromTop - toTop + STROKE_OFFSET;
    const fromScale = fromWidth / (toWidth + 2 * STROKE_OFFSET);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      const ghost = createGhost(peer);
      let ghost2;
      if (zIndex > RIBBON_Z_INDEX) {
        ghost2 = createGhost(toggleAvatar);
        if (isLast) {
          ghost2.classList.add(_StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghostLast);
        }
      } else {
        ghost.classList.add(_StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghostAnimateName, _StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghostRevealName);
      }
      (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost, {
        top: `${fromTop}px`,
        left: `${fromLeft}px`,
        width: `${fromWidth}px`,
        zIndex: `${zIndex}`
      });
      if (ghost2) {
        (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost2, {
          top: `${toTop}px`,
          left: `${toLeft}px`,
          zIndex: `${zIndex}`,
          opacity: '0',
          transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScale})`
        });
      }
      peer.classList.add('animating');
      toggleAvatar.classList.add('animating');
      container.appendChild(ghost);
      if (ghost2) {
        container.appendChild(ghost2);
      }
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
        (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost, {
          opacity: ghost2 ? '0' : '',
          transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScale})`
        });
        if (ghost2) {
          (0,_util_animation__WEBPACK_IMPORTED_MODULE_2__.applyStyles)(ghost2, {
            opacity: '',
            transform: ''
          });
        } else {
          ghost.classList.remove(_StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghostRevealName);
        }
        const cb = createDelayedCallback(() => {
          (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
            if (container.contains(ghost)) {
              container.removeChild(ghost);
            }
            if (ghost2 && container.contains(ghost2)) {
              container.removeChild(ghost2);
            }
            peer.classList.remove('animating');
            toggleAvatar.classList.remove('animating');
          });
        }, ANIMATION_DURATION + _config__WEBPACK_IMPORTED_MODULE_0__.ANIMATION_END_DELAY);
        callbacks.add(cb);
      });
    });
  });
}
function getHTMLElements(isArchived) {
  let container = document.getElementById('LeftColumn');
  if (container && isArchived) {
    container = container.querySelector('.ArchivedChats');
  }
  if (!container) return {};
  const toggler = container.querySelector('#StoryToggler');
  const ribbon = container.querySelector('#StoryRibbon');
  const leftMainHeader = container.querySelector('.left-header');
  const ribbonPeers = ribbon?.querySelectorAll(`.${_StoryRibbon_module_scss__WEBPACK_IMPORTED_MODULE_5__["default"].peer}`);
  const toggleAvatars = toggler?.querySelectorAll('.Avatar');
  return {
    container,
    toggler,
    leftMainHeader,
    ribbonPeers,
    toggleAvatars
  };
}
function createGhost(sourceEl) {
  const ghost = sourceEl.cloneNode(true);
  ghost.classList.add(_StoryToggler_module_scss__WEBPACK_IMPORTED_MODULE_6__["default"].ghost);

  // Avoid source animating class being copied to the ghost
  ghost.classList.remove('animating');
  ghost.draggable = false;
  ghost.oncontextmenu = _util_stopEvent__WEBPACK_IMPORTED_MODULE_3__["default"];
  const sourceCanvas = sourceEl.querySelector('canvas');
  if (sourceCanvas) {
    const canvas = ghost.querySelector('canvas');
    canvas?.getContext('2d')?.drawImage(sourceCanvas, 0, 0);
  }
  return ghost;
}
function getPeerId(el) {
  return el?.getAttribute('data-peer-id');
}
function selectByPeerId(el, id) {
  return el?.querySelector(`[data-peer-id="${id}"]`);
}
function createDelayedCallback(callback, ms) {
  const timeout = setTimeout(callback, ms);
  return () => {
    clearTimeout(timeout);
    callback();
  };
}
function cancelDelayedCallbacks() {
  callbacks.forEach(cb => cb());
  callbacks.clear();
}

/***/ }),

/***/ "./src/components/story/helpers/videoFormats.ts":
/*!******************************************************!*\
  !*** ./src/components/story/helpers/videoFormats.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PRIMARY_VIDEO_MIME: () => (/* binding */ PRIMARY_VIDEO_MIME),
/* harmony export */   SECONDARY_VIDEO_MIME: () => (/* binding */ SECONDARY_VIDEO_MIME)
/* harmony export */ });
const PRIMARY_VIDEO_MIME = 'video/mp4; codecs=hvc1.1.6.L63.00';
const SECONDARY_VIDEO_MIME = 'video/mp4; codecs=avc1.64001E';

/***/ }),

/***/ "./src/components/story/hooks/useStoryPreloader.ts":
/*!*********************************************************!*\
  !*** ./src/components/story/hooks/useStoryPreloader.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_browser_unloadVideo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/browser/unloadVideo */ "./src/util/browser/unloadVideo.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/files */ "./src/util/files.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_progressiveLoader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/progressiveLoader */ "./src/util/progressiveLoader.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _helpers_videoFormats__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/videoFormats */ "./src/components/story/helpers/videoFormats.ts");
/* harmony import */ var _hooks_useStreaming__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useStreaming */ "./src/hooks/useStreaming.ts");













const preloadedStories = {};
const PEER_STORIES_FOR_PRELOAD = 5;
const PROGRESSIVE_PRELOAD_DURATION = 1000;
const STREAM_PRELOAD_SIZE = 1024 * 1024 * 2; // 2 MB

const FIRST_PRELOAD_DELAY = 1000;
const canPreload = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_9__.pause)(FIRST_PRELOAD_DELAY);
function useStoryPreloader(peerId, aroundStoryId) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (peerId === undefined) return;
    const preloadHashes = async mediaHashes => {
      await canPreload;
      mediaHashes.forEach(({
        hash,
        format,
        isStream
      }) => {
        if (isStream) {
          preloadStream(hash);
          return;
        }
        _util_mediaLoader__WEBPACK_IMPORTED_MODULE_7__.fetch(hash, format).then(result => {
          if (!result) return;
          if (format === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.Progressive) {
            preloadProgressive(result);
          }
          if (format === _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl) {
            (0,_util_files__WEBPACK_IMPORTED_MODULE_6__.preloadImage)(result);
          }
        });
      });
    };
    const peerIds = Array.isArray(peerId) ? peerId : [peerId];
    peerIds.forEach(id => {
      const storyId = aroundStoryId || (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)().stories.byPeerId[id]?.orderedIds?.[0];
      if (!storyId) return;
      preloadHashes(getPreloadMediaHashes(id, storyId));
    });
  }, [aroundStoryId, peerId]);
}
function findIdsAroundCurrentId(ids, currentId, aroundAmount) {
  const currentIndex = ids.indexOf(currentId);
  const start = Math.max(currentIndex - aroundAmount, 0);
  const end = Math.min(currentIndex + aroundAmount, ids.length);
  return ids.slice(start, end);
}
function getPreloadMediaHashes(peerId, storyId) {
  const peerStories = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectPeerStories)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(), peerId);
  if (!peerStories || !peerStories.orderedIds?.length) {
    return [];
  }
  const preloadIds = findIdsAroundCurrentId(peerStories.orderedIds, storyId, PEER_STORIES_FOR_PRELOAD);
  const mediaHashes = [];
  preloadIds.forEach(currentStoryId => {
    if (preloadedStories[peerId]?.has(currentStoryId)) {
      return;
    }
    const story = peerStories.byId[currentStoryId];
    if (!story || !('content' in story)) {
      return;
    }
    const isVideo = Boolean(story.content.video);

    // Media
    mediaHashes.push({
      hash: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getStoryMediaHash)(story, 'full'),
      format: isVideo ? _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.Progressive : _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl,
      isStream: isVideo && (0,_hooks_useStreaming__WEBPACK_IMPORTED_MODULE_11__.checkIfStreamingSupported)(_helpers_videoFormats__WEBPACK_IMPORTED_MODULE_10__.PRIMARY_VIDEO_MIME)
    });
    // Thumbnail
    mediaHashes.push({
      hash: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getStoryMediaHash)(story),
      format: _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.BlobUrl
    });
    if (story.content.altVideos) {
      mediaHashes.push({
        hash: (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getStoryMediaHash)(story, 'full', true),
        format: _api_types__WEBPACK_IMPORTED_MODULE_2__.ApiMediaFormat.Progressive
      });
    }
    preloadedStories[peerId] = (preloadedStories[peerId] || new Set()).add(currentStoryId);
  });
  return mediaHashes;
}
function preloadProgressive(url) {
  const head = document.head;
  const video = document.createElement('video');
  video.preload = 'auto';
  video.src = url;
  video.muted = true;
  video.autoplay = true;
  video.disableRemotePlayback = true;
  video.style.display = 'none';
  head.appendChild(video);
  video.load();
  setTimeout(() => {
    (0,_util_browser_unloadVideo__WEBPACK_IMPORTED_MODULE_5__["default"])(video);
    head.removeChild(video);
  }, PROGRESSIVE_PRELOAD_DURATION);
}

// eslint-disable-next-line no-async-without-await/no-async-without-await
async function preloadStream(hash) {
  const loader = (0,_util_progressiveLoader__WEBPACK_IMPORTED_MODULE_8__.makeProgressiveLoader)((0,_util_mediaLoader__WEBPACK_IMPORTED_MODULE_7__.getProgressiveUrl)(hash));
  let cachedSize = 0;
  for await (const chunk of loader) {
    cachedSize += chunk.byteLength;
    if (cachedSize >= STREAM_PRELOAD_SIZE) {
      break;
    }
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useStoryPreloader);

/***/ }),

/***/ "./src/components/story/mediaArea/MediaAreaOverlay.tsx":
/*!*************************************************************!*\
  !*** ./src/components/story/mediaArea/MediaAreaOverlay.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/window/useWindowSize */ "./src/hooks/window/useWindowSize.ts");
/* harmony import */ var _MediaAreaSuggestedReaction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./MediaAreaSuggestedReaction */ "./src/components/story/mediaArea/MediaAreaSuggestedReaction.tsx");
/* harmony import */ var _MediaAreaWeather__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MediaAreaWeather */ "./src/components/story/mediaArea/MediaAreaWeather.tsx");
/* harmony import */ var _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MediaArea.module.scss */ "./src/components/story/mediaArea/MediaArea.module.scss");










const STORY_ASPECT_RATIO = 9 / 16;
const PERCENTAGE_BASE = 100;
const NO_SHINY_TYPES = new Set(['channelPost', 'uniqueGift']);
const MediaAreaOverlay = ({
  story,
  isActive,
  className,
  isStoryPlaying
}) => {
  const {
    openMapModal,
    openUniqueGiftBySlug,
    focusMessage,
    closeStoryViewer,
    openUrl
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [mediaWidth, setMediaWidth] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const windowSize = (0,_hooks_window_useWindowSize__WEBPACK_IMPORTED_MODULE_6__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!ref.current) return;
    const element = ref.current;
    setMediaWidth(element.clientWidth);
    if (windowSize.width > _config__WEBPACK_IMPORTED_MODULE_2__.MOBILE_SCREEN_MAX_WIDTH) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
        element.style.removeProperty('--media-width');
        element.style.removeProperty('--media-height');
      });
      return;
    }
    const screenAspectRatio = windowSize.width / windowSize.height;
    const width = screenAspectRatio < STORY_ASPECT_RATIO ? element.clientHeight * STORY_ASPECT_RATIO : element.clientWidth;
    const height = screenAspectRatio < STORY_ASPECT_RATIO ? element.clientHeight : element.clientWidth / STORY_ASPECT_RATIO;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(() => {
      element.style.setProperty('--media-width', `${width}px`);
      element.style.setProperty('--media-height', `${height}px`);
    });
  }, [isActive, windowSize]);
  const handleMediaAreaClick = mediaArea => {
    switch (mediaArea.type) {
      case 'geoPoint':
      case 'venue':
        {
          openMapModal({
            geoPoint: mediaArea.geo
          });
          break;
        }
      case 'channelPost':
        {
          focusMessage({
            chatId: mediaArea.channelId,
            messageId: mediaArea.messageId
          });
          closeStoryViewer();
          break;
        }
      case 'url':
        {
          openUrl({
            url: mediaArea.url
          });
          break;
        }
      case 'uniqueGift':
        {
          openUniqueGiftBySlug({
            slug: mediaArea.slug
          });
          break;
        }
    }
  };
  const mediaAreas = story.mediaAreas;
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].overlay, !isActive && _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].preview, className),
    ref: ref
  }, mediaAreas?.map((mediaArea, i) => {
    switch (mediaArea.type) {
      case 'geoPoint':
      case 'venue':
      case 'channelPost':
      case 'url':
      case 'uniqueGift':
        {
          const isShiny = isActive && !NO_SHINY_TYPES.has(mediaArea.type);
          return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
            className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_4__["default"])(_MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].mediaArea, isShiny && _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].shiny),
            style: prepareStyle(mediaArea),
            onClick: () => handleMediaAreaClick(mediaArea)
          });
        }
      case 'suggestedReaction':
        return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MediaAreaSuggestedReaction__WEBPACK_IMPORTED_MODULE_7__["default"]
        // eslint-disable-next-line react/no-array-index-key
        , {
          key: `${mediaArea.type}-${i}`,
          story: story,
          mediaArea: mediaArea,
          index: i,
          isPreview: !isActive,
          className: _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].mediaArea,
          style: prepareStyle(mediaArea)
        });
      case 'weather':
        {
          return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_MediaAreaWeather__WEBPACK_IMPORTED_MODULE_8__["default"]
          // eslint-disable-next-line react/no-array-index-key
          , {
            key: `${mediaArea.type}-${i}`,
            mediaArea: mediaArea,
            className: _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_9__["default"].mediaArea,
            style: prepareStyle(mediaArea, mediaWidth),
            isPreview: !isActive || isStoryPlaying
          });
        }
      default:
        return undefined;
    }
  }));
};
function prepareStyle(mediaArea, mediaWidth) {
  const {
    x,
    y,
    width,
    height,
    rotation,
    radius
  } = mediaArea.coordinates;
  let pixelRadius = '';
  if (mediaWidth && radius && mediaWidth > 0) {
    const pixelWidth = mediaWidth * (width / PERCENTAGE_BASE);
    const pixelHeight = mediaWidth * (height / PERCENTAGE_BASE);
    pixelRadius = `${Math.min(pixelWidth, pixelHeight) * (radius / PERCENTAGE_BASE)}px`;
  }
  return (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_5__["default"])(`left: ${x}%`, `top: ${y}%`, `width: ${width}%`, `height: ${height}%`, `transform: rotate(${rotation}deg) translate(-50%, -50%)`, pixelRadius && `border-radius: ${pixelRadius}`);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MediaAreaOverlay));

/***/ }),

/***/ "./src/components/story/mediaArea/MediaAreaSuggestedReaction.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/story/mediaArea/MediaAreaSuggestedReaction.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/helpers/mediaDimensions */ "./src/components/common/helpers/mediaDimensions.ts");
/* harmony import */ var _hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../hooks/useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _common_reactions_ReactionAnimatedEmoji__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/reactions/ReactionAnimatedEmoji */ "./src/components/common/reactions/ReactionAnimatedEmoji.tsx");
/* harmony import */ var _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./MediaArea.module.scss */ "./src/components/story/mediaArea/MediaArea.module.scss");











const REACTION_SIZE_MULTIPLIER = 0.6;
const EFFECT_SIZE_MULTIPLIER = 4;
const MediaAreaSuggestedReaction = ({
  story,
  mediaArea,
  index,
  className,
  style,
  isPreview
}) => {
  const {
    sendStoryReaction
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();

  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [customEmojiSize, setCustomEmojiSize] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(1.5 * _common_helpers_mediaDimensions__WEBPACK_IMPORTED_MODULE_5__.REM);
  const {
    peerId,
    id,
    views
  } = story;
  const {
    reactions
  } = views || {};
  const {
    reaction,
    isDark,
    isFlipped
  } = mediaArea;
  const isChannel = !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isUserId)(peerId);
  const containerId = `${(0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.getStoryKey)(peerId, id)}-${index}-${isPreview ? 'preview' : 'viewer'}`;
  const reactionCount = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => reactions?.find(r => (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isSameReaction)(r.reaction, reaction))?.count, [reaction, reactions]);
  const shouldDisplayCount = !isPreview && Boolean(reactionCount) && isChannel;
  const updateCustomEmojiSize = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    if (!ref.current) return;
    const height = ref.current.clientHeight;
    setCustomEmojiSize(Math.round(height * REACTION_SIZE_MULTIPLIER));
  });
  (0,_hooks_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_6__["default"])(([prevReactionCount]) => {
    if (Boolean(reactionCount) !== Boolean(prevReactionCount)) {
      updateCustomEmojiSize();
    }
  }, [reactionCount]);
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_8__["default"])(ref, updateCustomEmojiSize);
  const handleClick = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_7__["default"])(() => {
    sendStoryReaction({
      peerId,
      storyId: id,
      containerId,
      reaction
    });
  });
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(isDark ? _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].dark : _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].light, className),
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_4__["default"])(style, `--custom-emoji-size: ${customEmojiSize}px`),
    onClick: handleClick
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].reactionBackground, isFlipped && _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].flipped)
  }), Boolean(customEmojiSize) && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_reactions_ReactionAnimatedEmoji__WEBPACK_IMPORTED_MODULE_9__["default"], {
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_3__["default"])(_MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].reaction, shouldDisplayCount && _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].withCount),
    reaction: reaction,
    containerId: containerId,
    size: customEmojiSize,
    effectSize: customEmojiSize * EFFECT_SIZE_MULTIPLIER,
    shouldPause: isPreview,
    shouldLoop: !isPreview
  }), shouldDisplayCount && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("span", {
    className: _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_10__["default"].reactionCount
  }, reactionCount));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)(MediaAreaSuggestedReaction));

/***/ }),

/***/ "./src/components/story/mediaArea/MediaAreaWeather.tsx":
/*!*************************************************************!*\
  !*** ./src/components/story/mediaArea/MediaAreaWeather.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/teact/teact-dom */ "./src/lib/teact/teact-dom.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global */ "./src/global/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_buildClassName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../util/buildClassName */ "./src/util/buildClassName.ts");
/* harmony import */ var _util_buildStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../util/buildStyle */ "./src/util/buildStyle.ts");
/* harmony import */ var _util_colors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../util/colors */ "./src/util/colors.ts");
/* harmony import */ var _util_formatTemperature__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../util/formatTemperature */ "./src/util/formatTemperature.ts");
/* harmony import */ var _hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useResizeObserver */ "./src/hooks/useResizeObserver.ts");
/* harmony import */ var _common_CustomEmoji__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/CustomEmoji */ "./src/components/common/CustomEmoji.tsx");
/* harmony import */ var _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./MediaArea.module.scss */ "./src/components/story/mediaArea/MediaArea.module.scss");













const EMOJI_SIZE_MULTIPLIER = 0.7;
const TEMPERATURE_SIZE = 32;
const MediaAreaWeather = ({
  mediaArea,
  className,
  style,
  restrictedEmoji,
  isPreview
}) => {
  // eslint-disable-next-line no-null/no-null
  const ref = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [customEmojiSize, setCustomEmojiSize] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const {
    temperatureC,
    color
  } = mediaArea;
  const backgroundColor = (0,_util_colors__WEBPACK_IMPORTED_MODULE_7__.convertToRGBA)(color);
  const textColor = (0,_util_colors__WEBPACK_IMPORTED_MODULE_7__.getTextColor)(color);
  const updateCustomSize = (0,_hooks_useLastCallback__WEBPACK_IMPORTED_MODULE_9__["default"])(isImmediate => {
    if (!ref.current) return undefined;
    const el = ref.current;
    const height = el.clientHeight;
    const customEmojiHeight = Math.round(height * EMOJI_SIZE_MULTIPLIER);
    setCustomEmojiSize(customEmojiHeight);
    const applyFn = () => {
      (0,_lib_teact_teact_dom__WEBPACK_IMPORTED_MODULE_1__.setExtraStyles)(el, {
        '--custom-emoji-size': `${customEmojiHeight}px`,
        'font-size': `${height / TEMPERATURE_SIZE}rem`
      });
    };
    if (isImmediate) return applyFn;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestMutation)(applyFn);
    return undefined;
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_3__.requestForcedReflow)(() => updateCustomSize(true));
  }, []);
  (0,_hooks_useResizeObserver__WEBPACK_IMPORTED_MODULE_10__["default"])(ref, () => updateCustomSize());
  return /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: ref,
    className: (0,_util_buildClassName__WEBPACK_IMPORTED_MODULE_5__["default"])(_MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_12__["default"].weather, className),
    style: (0,_util_buildStyle__WEBPACK_IMPORTED_MODULE_6__["default"])(style, `--custom-background-color: ${backgroundColor}`, `color: ${textColor}`)
  }, /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    className: _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_12__["default"].weatherInner
  }, restrictedEmoji && /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_common_CustomEmoji__WEBPACK_IMPORTED_MODULE_11__["default"], {
    key: restrictedEmoji.id,
    documentId: restrictedEmoji.id,
    size: customEmojiSize,
    noPlay: isPreview,
    withTranslucentThumb: true,
    forceAlways: true
  }), /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("p", {
    className: _MediaArea_module_scss__WEBPACK_IMPORTED_MODULE_12__["default"].temperature
  }, (0,_util_formatTemperature__WEBPACK_IMPORTED_MODULE_8__.formatTemperature)(temperatureC))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.memo)((0,_global__WEBPACK_IMPORTED_MODULE_2__.withGlobal)((global, ownProps) => {
  const {
    mediaArea
  } = ownProps;
  const restrictedEmoji = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_4__.selectRestrictedEmoji)(global, mediaArea.emoji);
  return {
    restrictedEmoji
  };
})(MediaAreaWeather)));

/***/ }),

/***/ "./src/hooks/media/useUnsupportedMedia.ts":
/*!************************************************!*\
  !*** ./src/hooks/media/useUnsupportedMedia.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useUnsupportedMedia)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useOldLang__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../useOldLang */ "./src/hooks/useOldLang.ts");





const NOTIFICATION_DURATION = 8000;
function useUnsupportedMedia(ref, shouldDisableNotification, isDisabled) {
  const {
    showNotification
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const lang = (0,_useOldLang__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const [isUnsupported, setIsUnsupported] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const handleUnsupported = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    setIsUnsupported(true);
    if (shouldDisableNotification) return;
    showNotification({
      message: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_2__.IS_MOBILE ? lang('Video.Unsupported.Mobile') : lang('Video.Unsupported.Desktop'),
      duration: NOTIFICATION_DURATION
    });
  });
  const onError = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(event => {
    const target = event.currentTarget;
    const {
      error
    } = target;
    if (!error) return;

    // https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code
    if (error.code === 3 || error.code === 4) {
      handleUnsupported();
    }
  });
  const onCanPlay = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(event => {
    const target = event.currentTarget;
    if (!target.videoHeight || !target.videoWidth) {
      handleUnsupported();
    }
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isDisabled) return undefined;
    const {
      current
    } = ref;
    if (!current) {
      return undefined;
    }
    current.addEventListener('error', onError);
    current.addEventListener('canplay', onCanPlay);
    return () => {
      current.removeEventListener('error', onError);
      current.removeEventListener('canplay', onCanPlay);
    };
  }, [isDisabled, ref]);
  return isUnsupported;
}

/***/ }),

/***/ "./src/hooks/polling/usePeerStoriesPolling.ts":
/*!****************************************************!*\
  !*** ./src/hooks/polling/usePeerStoriesPolling.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ usePeerStoriesPolling)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");





const POLLING_INTERVAL = 60 * 60 * 1000;
const PEER_LAST_POLLING_TIME = new Map();
let PEER_ID_QUEUE = new Set();
const LIMIT_PER_REQUEST = 100;
const REQUEST_THROTTLE = 500;
const loadFromQueue = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.throttle)(() => {
  const queue = Array.from(PEER_ID_QUEUE);
  const queueToLoad = queue.slice(0, LIMIT_PER_REQUEST);
  const otherQueue = queue.slice(LIMIT_PER_REQUEST + 1);
  (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().loadStoriesMaxIds({
    peerIds: queueToLoad
  });
  queueToLoad.forEach(id => PEER_LAST_POLLING_TIME.set(id, Date.now()));
  PEER_ID_QUEUE = new Set(otherQueue);

  // Schedule next load
  if (PEER_ID_QUEUE.size) {
    loadFromQueue();
  }
}, REQUEST_THROTTLE);
function usePeerStoriesPolling(ids) {
  const peers = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const global = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
    return ids?.map(id => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectPeer)(global, id)).filter(Boolean);
  }, [ids]);
  const pollablePeerIds = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const global = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)();
    return peers?.filter(peer => {
      const lastPollingTime = PEER_LAST_POLLING_TIME.get(peer.id) || 0;
      if (Date.now() - lastPollingTime < POLLING_INTERVAL) {
        return false;
      }
      if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isUserId)(peer.id)) {
        const user = peer;
        const status = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectUserStatus)(global, user.id);
        const isStatusAvailable = status && status.type !== 'userStatusEmpty';
        return !user.isContact && !user.isSelf && !(0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isUserBot)(user) && !peer.isSupport && isStatusAvailable;
      } else {
        const chat = peer;
        return (0,_global_helpers__WEBPACK_IMPORTED_MODULE_2__.isChatChannel)(chat) && !chat.isRestricted;
      }
    }).map(user => user.id);
  }, [peers]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (pollablePeerIds?.length) {
      pollablePeerIds.forEach(id => PEER_ID_QUEUE.add(id));
      loadFromQueue();
    }
  }, [pollablePeerIds]);
}

/***/ }),

/***/ "./src/hooks/reducers/useFoldersReducer.ts":
/*!*************************************************!*\
  !*** ./src/hooks/reducers/useFoldersReducer.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   selectChatFilters: () => (/* binding */ selectChatFilters)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global */ "./src/global/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _useReducer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../useReducer */ "./src/hooks/useReducer.ts");




const INCLUDE_FILTER_FIELDS = ['includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts'];
const EXCLUDE_FILTER_FIELDS = ['excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead'];
function selectChatFilters(state, mode, selectTemp) {
  let selectedChatIds = [];
  let selectedChatTypes = [];
  if (mode === 'included') {
    const {
      includedChatIds,
      ...includeFilters
    } = selectTemp ? state.includeFilters || {} : (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.pick)(state.folder, INCLUDE_FILTER_FIELDS);
    selectedChatIds = includedChatIds || [];
    selectedChatTypes = Object.keys(includeFilters).filter(key => Boolean(includeFilters[key]));
  } else {
    const {
      excludedChatIds,
      ...excludeFilters
    } = selectTemp ? state.excludeFilters || {} : (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.pick)(state.folder, EXCLUDE_FILTER_FIELDS);
    selectedChatIds = excludedChatIds || [];
    selectedChatTypes = Object.keys(excludeFilters).filter(key => Boolean(excludeFilters[key]));
  }
  const global = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
  const existingSelectedChatIds = selectedChatIds.filter(id => (0,_global_selectors__WEBPACK_IMPORTED_MODULE_1__.selectChat)(global, id));
  return {
    selectedChatIds: existingSelectedChatIds,
    selectedChatTypes
  };
}
function getSuggestedFolderName(includeFilters) {
  if (includeFilters) {
    const {
      includedChatIds,
      ...filters
    } = includeFilters;
    if (Object.values(filters).filter(Boolean).length > 1 || includedChatIds?.length) {
      return '';
    }
    if (filters.bots) {
      return 'Bots';
    } else if (filters.groups) {
      return 'Groups';
    } else if (filters.channels) {
      return 'Channels';
    } else if (filters.contacts) {
      return 'Contacts';
    } else if (filters.nonContacts) {
      return 'Non-Contacts';
    }
  }
  return '';
}
const INITIAL_STATE = {
  mode: 'create',
  chatFilter: '',
  folder: {
    title: {
      text: ''
    },
    emoticon: '',
    includedChatIds: [],
    excludedChatIds: []
  }
};
const foldersReducer = (state, action) => {
  switch (action.type) {
    case 'setTitle':
      return {
        ...state,
        folder: {
          ...state.folder,
          title: {
            text: action.payload
          }
        },
        isTouched: true
      };
    case 'setEmoticon':
      return {
        ...state,
        folder: {
          ...state.folder,
          emoticon: action.payload
        },
        isTouched: true
      };
    case 'setFolderId':
      return {
        ...state,
        folderId: action.payload,
        mode: 'edit'
      };
    case 'editIncludeFilters':
      return {
        ...state,
        includeFilters: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.pick)(state.folder, INCLUDE_FILTER_FIELDS)
      };
    case 'editExcludeFilters':
      return {
        ...state,
        excludeFilters: (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.pick)(state.folder, EXCLUDE_FILTER_FIELDS)
      };
    case 'setIncludeFilters':
      return {
        ...state,
        includeFilters: action.payload,
        chatFilter: ''
      };
    case 'setExcludeFilters':
      return {
        ...state,
        excludeFilters: action.payload,
        chatFilter: ''
      };
    case 'saveFilters':
      if (state.includeFilters) {
        return {
          ...state,
          folder: {
            ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(state.folder, INCLUDE_FILTER_FIELDS),
            title: state.folder.title ? state.folder.title : {
              text: getSuggestedFolderName(state.includeFilters)
            },
            ...state.includeFilters
          },
          includeFilters: undefined,
          chatFilter: '',
          isTouched: true
        };
      } else if (state.excludeFilters) {
        return {
          ...state,
          folder: {
            ...(0,_util_iteratees__WEBPACK_IMPORTED_MODULE_2__.omit)(state.folder, EXCLUDE_FILTER_FIELDS),
            ...state.excludeFilters
          },
          excludeFilters: undefined,
          chatFilter: '',
          isTouched: true
        };
      } else {
        return state;
      }
    case 'editFolder':
      {
        const {
          id: folderId,
          description,
          ...folder
        } = action.payload;
        return {
          mode: 'edit',
          folderId,
          folder,
          chatFilter: ''
        };
      }
    case 'setChatFilter':
      {
        return {
          ...state,
          chatFilter: action.payload
        };
      }
    case 'setIsTouched':
      {
        return {
          ...state,
          isTouched: action.payload
        };
      }
    case 'setIsLoading':
      {
        return {
          ...state,
          isLoading: action.payload
        };
      }
    case 'setError':
      {
        return {
          ...state,
          isLoading: false,
          error: action.payload
        };
      }
    case 'setIsChatlist':
      return {
        ...state,
        folder: {
          ...state.folder,
          isChatList: action.payload
        }
      };
    case 'reset':
      return INITIAL_STATE;
    default:
      return state;
  }
};
const useFoldersReducer = () => {
  return (0,_useReducer__WEBPACK_IMPORTED_MODULE_3__["default"])(foldersReducer, INITIAL_STATE);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useFoldersReducer);

/***/ }),

/***/ "./src/hooks/schedulers/useIntervalForceUpdate.ts":
/*!********************************************************!*\
  !*** ./src/hooks/schedulers/useIntervalForceUpdate.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useIntervalForceUpdate)
/* harmony export */ });
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _useInterval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useInterval */ "./src/hooks/schedulers/useInterval.ts");


function useIntervalForceUpdate(interval) {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_0__["default"])();
  (0,_useInterval__WEBPACK_IMPORTED_MODULE_1__["default"])(forceUpdate, interval, true);
}

/***/ }),

/***/ "./src/hooks/scroll/useTopOverscroll.tsx":
/*!***********************************************!*\
  !*** ./src/hooks/scroll/useTopOverscroll.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useTopOverscroll)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_resetScroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/resetScroll */ "./src/util/resetScroll.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _useDebouncedCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../useDebouncedCallback */ "./src/hooks/useDebouncedCallback.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../useLastCallback */ "./src/hooks/useLastCallback.ts");






const MOUSE_WHEEL_DEBOUNCE = 250;
const TRIGGER_HEIGHT = 1;
const INERTIA_THRESHOLD = 100;
function useTopOverscroll(containerRef, onOverscroll, onReset, isDisabled) {
  // eslint-disable-next-line no-null/no-null
  const overscrollTriggerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const isTriggerJustEnabled = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const lastScrollTopRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  const isTriggerEnabledRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const lastIsOnTopRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  const lastScrollAtRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);
  const isReturningOverscrollRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const enableOverscrollTrigger = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])((noScrollInertiaStop = false) => {
    if (isTriggerEnabledRef.current) return;
    if (!overscrollTriggerRef.current || !containerRef.current) return;
    overscrollTriggerRef.current.style.display = 'block';
    containerRef.current.scrollTop = TRIGGER_HEIGHT;
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_SAFARI && !noScrollInertiaStop) {
      (0,_util_resetScroll__WEBPACK_IMPORTED_MODULE_2__.stopScrollInertia)(containerRef.current);
    }
    isTriggerJustEnabled.current = true;
    lastScrollTopRef.current = TRIGGER_HEIGHT;
    isTriggerEnabledRef.current = true;
    lastIsOnTopRef.current = true;
  });
  const disableOverscrollTrigger = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (!isTriggerEnabledRef.current) return;
    if (!overscrollTriggerRef.current) return;
    overscrollTriggerRef.current.style.display = 'none';
    isTriggerEnabledRef.current = false;
  });
  const handleScroll = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(() => {
    if (!containerRef.current) return;
    if (isTriggerJustEnabled.current) {
      isTriggerJustEnabled.current = false;
      return;
    }
    const newScrollTop = containerRef.current.scrollTop;
    const isMovingDown = newScrollTop > lastScrollTopRef.current;
    const isMovingUp = newScrollTop < lastScrollTopRef.current;
    const isOnTop = newScrollTop === 0;
    const lastEventDelay = Date.now() - lastScrollAtRef.current;
    if (overscrollTriggerRef.current) {
      if (isOnTop && !isTriggerEnabledRef.current) {
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.forceMutation)(enableOverscrollTrigger, [containerRef.current, overscrollTriggerRef.current]);
        return;
      }
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.forceMutation)(disableOverscrollTrigger, overscrollTriggerRef.current);
    }
    if (isMovingUp && (lastIsOnTopRef.current && lastEventDelay > INERTIA_THRESHOLD || newScrollTop < 0 && isReturningOverscrollRef.current // Overscroll repeated by the user
    )) {
      onOverscroll?.();
    } else if (isMovingDown && newScrollTop > 0) {
      onReset?.();
    }
    lastScrollTopRef.current = newScrollTop;
    lastIsOnTopRef.current = isOnTop;
    lastScrollAtRef.current = Date.now();
    isReturningOverscrollRef.current = isMovingDown && newScrollTop < 0;
  });

  // Handle non-scrollable container
  const handleWheel = (0,_useDebouncedCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(event => {
    if (!containerRef.current) return;
    const container = containerRef.current;
    const isScrollable = container.scrollHeight > container.offsetHeight;
    if (isScrollable || event.deltaY === 0) return;
    if (event.deltaY < 0) {
      onOverscroll?.();
    } else {
      onReset?.();
    }
  }, [containerRef, onOverscroll, onReset], MOUSE_WHEEL_DEBOUNCE);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const container = containerRef.current;
    if (!container) return undefined;
    if (container.scrollTop === 0) {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
        enableOverscrollTrigger(true);
      });
    }
    container.addEventListener('scroll', handleScroll, {
      passive: true
    });
    container.addEventListener('wheel', handleWheel, {
      passive: true
    });
    return () => {
      container.removeEventListener('scroll', handleScroll);
      container.removeEventListener('wheel', handleWheel);
    };
  }, [containerRef, handleWheel]);
  return !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_IOS && !isDisabled ? /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement("div", {
    ref: overscrollTriggerRef,
    className: "overscroll-trigger",
    key: "overscroll-trigger"
  }) : undefined;
}

/***/ }),

/***/ "./src/hooks/useAsyncResolvers.ts":
/*!****************************************!*\
  !*** ./src/hooks/useAsyncResolvers.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useDebouncedResolver: () => (/* binding */ useDebouncedResolver),
/* harmony export */   useDebouncedSignal: () => (/* binding */ useDebouncedSignal),
/* harmony export */   useThrottledResolver: () => (/* binding */ useThrottledResolver),
/* harmony export */   useThrottledSignal: () => (/* binding */ useThrottledSignal)
/* harmony export */ });
/* harmony import */ var _useDebouncedCallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useDebouncedCallback */ "./src/hooks/useDebouncedCallback.ts");
/* harmony import */ var _useDerivedSignal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useDerivedSignal */ "./src/hooks/useDerivedSignal.ts");
/* harmony import */ var _useThrottledCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useThrottledCallback */ "./src/hooks/useThrottledCallback.ts");



function useThrottledResolver(resolver, deps, msOrSchedulerFn, noFirst = false) {
  return (0,_useThrottledCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(setValue => {
    setValue(resolver());
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, deps, msOrSchedulerFn, noFirst);
}
function useThrottledSignal(getValue, ms, noFirst = false) {
  const throttledResolver = useThrottledResolver(() => getValue(), [getValue], ms, noFirst);
  return (0,_useDerivedSignal__WEBPACK_IMPORTED_MODULE_1__["default"])(throttledResolver, [throttledResolver, getValue], true);
}
function useDebouncedResolver(resolver, deps, ms, noFirst = false, noLast = false) {
  return (0,_useDebouncedCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(setValue => {
    setValue(resolver());
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, deps, ms, noFirst, noLast);
}
function useDebouncedSignal(getValue, ms, noFirst = false, noLast = false) {
  const debouncedResolver = useDebouncedResolver(() => getValue(), [getValue], ms, noFirst, noLast);
  return (0,_useDerivedSignal__WEBPACK_IMPORTED_MODULE_1__["default"])(debouncedResolver, [debouncedResolver, getValue], true);
}

/***/ }),

/***/ "./src/hooks/useAudioPlayer.ts":
/*!*************************************!*\
  !*** ./src/hooks/useAudioPlayer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_audioPlayer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/audioPlayer */ "./src/util/audioPlayer.ts");
/* harmony import */ var _util_mediaSession__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/mediaSession */ "./src/util/mediaSession.ts");
/* harmony import */ var _util_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/patchSafariProgressiveAudio */ "./src/util/patchSafariProgressiveAudio.ts");
/* harmony import */ var _useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useEffectWithPrevDeps */ "./src/hooks/useEffectWithPrevDeps.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");










const DEFAULT_SKIP_TIME = 10;
const useAudioPlayer = (trackId, originalDuration, trackType, src, handlers, metadata, onInit, shouldPlay = false, onForcePlay, onTrackChange, noPlaylist = false, noProgressUpdates = false, onPause, noReset = false, noHandleEvents = false) => {
  // eslint-disable-next-line no-null/no-null
  const controllerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [isPlaying, setIsPlaying] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  let isPlayingSync = isPlaying;
  const [playProgress, setPlayProgress] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const handleTrackChange = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    setIsPlaying(false);
    if (onTrackChange) onTrackChange();
  });
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_9__["default"])(() => {
    if (!trackId) {
      return;
    }
    controllerRef.current = (0,_util_audioPlayer__WEBPACK_IMPORTED_MODULE_4__.register)(trackId, trackType, (eventName, e) => {
      if (noHandleEvents) {
        return;
      }
      switch (eventName) {
        case 'onPlay':
          {
            const {
              setVolume,
              setPlaybackRate,
              toggleMuted,
              proxy
            } = controllerRef.current;
            setIsPlaying(true);
            if (trackType !== 'oneTimeVoice') {
              (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_5__.registerMediaSession)(metadata, makeMediaHandlers(controllerRef));
            }
            (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_5__.setPlaybackState)('playing');
            const {
              audioPlayer
            } = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_1__.getGlobal)());
            setVolume(audioPlayer.volume);
            toggleMuted(Boolean(audioPlayer.isMuted));
            const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;
            if (trackType === 'voice' || duration > _config__WEBPACK_IMPORTED_MODULE_2__.PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION) {
              setPlaybackRate(audioPlayer.playbackRate);
            }
            (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_5__.setPositionState)({
              duration: proxy.duration || 0,
              playbackRate: proxy.playbackRate,
              position: proxy.currentTime
            });
            break;
          }
        case 'onRateChange':
          {
            const {
              proxy
            } = controllerRef.current;
            (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_5__.setPositionState)({
              duration: proxy.duration || 0,
              playbackRate: proxy.playbackRate,
              position: proxy.currentTime
            });
            break;
          }
        case 'onPause':
          setIsPlaying(false);
          (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_5__.setPlaybackState)('paused');
          onPause?.();
          break;
        case 'onTimeUpdate':
          {
            const {
              proxy
            } = controllerRef.current;
            if (noReset && proxy.currentTime === 0) {
              break;
            }
            const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;
            if (!noProgressUpdates) setPlayProgress(proxy.currentTime / duration);
            break;
          }
        case 'onEnded':
          {
            (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_5__.setPlaybackState)('paused');
            break;
          }
      }
      handlers?.[eventName]?.(e);
    }, onForcePlay, handleTrackChange);
    const {
      proxy
    } = controllerRef.current;
    if (!isPlaying && !proxy.paused) {
      setIsPlaying(true);
      // `isPlayingSync` is only needed to help `setIsPlaying` because it is asynchronous
      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
      isPlayingSync = true;
    }
    if (onInit && !noHandleEvents) {
      onInit(proxy);
    }
  }, [trackId]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isPlaying && metadata) (0,_util_mediaSession__WEBPACK_IMPORTED_MODULE_5__.updateMetadata)(metadata);
  }, [metadata, isPlaying]);
  const {
    play,
    pause,
    setCurrentTime,
    proxy,
    destroy,
    setVolume,
    stop,
    isFirst,
    isLast,
    requestNextTrack,
    requestPreviousTrack,
    setPlaybackRate,
    toggleMuted
  } = controllerRef.current ?? {};
  const duration = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return proxy?.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;
  }, [proxy?.duration, originalDuration]);

  // RAF progress
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!proxy) {
      return;
    }
    if (noReset && proxy.currentTime === 0) {
      return;
    }
    if (duration && !(0,_util_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_6__.isSafariPatchInProgress)(proxy) && !noProgressUpdates) {
      setPlayProgress(proxy.currentTime / duration);
    }
  }, [duration, playProgress, proxy, noProgressUpdates, noReset]);

  // Cleanup
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => () => {
    destroy?.(noPlaylist);
  }, [destroy, noPlaylist]);

  // Autoplay once `src` is present
  (0,_useEffectWithPrevDeps__WEBPACK_IMPORTED_MODULE_7__["default"])(([prevShouldPlay, prevSrc]) => {
    if (prevShouldPlay === shouldPlay && src === prevSrc) {
      return;
    }

    // When paused by another player
    if (proxy?.src && proxy?.paused) {
      return;
    }
    if (shouldPlay && src && !isPlaying) {
      play?.(src);
    }
  }, [shouldPlay, src, isPlaying, play, proxy?.src, proxy?.paused, trackType]);
  const playIfPresent = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    if (src) {
      play?.(src);
    }
  });
  const playPause = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(() => {
    if (isPlaying) {
      pause?.();
    } else {
      playIfPresent();
    }
  });
  const setTime = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_8__["default"])(time => {
    setCurrentTime?.(time);
    if (duration && proxy) {
      setPlayProgress(proxy.currentTime / duration);
    }
  });
  return {
    isPlaying: isPlayingSync,
    playProgress,
    playPause,
    pause,
    play: playIfPresent,
    stop,
    setCurrentTime: setTime,
    setVolume,
    audioProxy: proxy,
    duration,
    requestNextTrack,
    requestPreviousTrack,
    isFirst,
    isLast,
    setPlaybackRate,
    toggleMuted
  };
};
function makeMediaHandlers(controllerRef) {
  let mediaHandlers = {};
  if (controllerRef && controllerRef.current) {
    const {
      play,
      pause,
      setCurrentTime,
      proxy,
      requestNextTrack,
      requestPreviousTrack,
      isFirst,
      isLast
    } = controllerRef.current;
    mediaHandlers = {
      play: () => {
        play(proxy.src);
      },
      pause: () => {
        pause();
      },
      stop: () => {
        pause();
        setCurrentTime(0);
        (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().closeAudioPlayer();
      },
      seekbackward: event => {
        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;
        setCurrentTime(Math.max(proxy.currentTime - skipTime, 0));
      },
      seekforward: event => {
        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;
        setCurrentTime(Math.min(proxy.currentTime + skipTime, proxy.duration));
      },
      seekTo: event => {
        if (event.seekTime) {
          setCurrentTime(event.seekTime);
        }
      }
    };
    if (!isLast()) {
      mediaHandlers.nexttrack = () => {
        requestNextTrack();
      };
    }
    if (!isFirst()) {
      mediaHandlers.previoustrack = () => {
        requestPreviousTrack();
      };
    }
  }
  return mediaHandlers;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useAudioPlayer);

/***/ }),

/***/ "./src/hooks/useChatContextActions.ts":
/*!********************************************!*\
  !*** ./src/hooks/useChatContextActions.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _global_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/helpers */ "./src/global/helpers/index.ts");
/* harmony import */ var _util_iteratees__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/iteratees */ "./src/util/iteratees.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _useOldLang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useOldLang */ "./src/hooks/useOldLang.ts");







const useChatContextActions = ({
  chat,
  user,
  folderId,
  isPinned,
  isMuted,
  canChangeFolder,
  isSavedDialog,
  currentUserId,
  isPreview,
  handleDelete,
  handleMute,
  handleChatFolderChange,
  handleReport
}, isInSearch = false) => {
  const lang = (0,_useOldLang__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const {
    isSelf
  } = user || {};
  const isServiceNotifications = user?.id === _config__WEBPACK_IMPORTED_MODULE_2__.SERVICE_NOTIFICATIONS_USER_ID;
  const deleteTitle = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!chat) return undefined;
    if (isSavedDialog) {
      return lang('Delete');
    }
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isUserId)(chat.id)) {
      return lang('DeleteChatUser');
    }
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.getCanDeleteChat)(chat)) {
      return lang('DeleteChat');
    }
    if ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat)) {
      return lang('LeaveChannel');
    }
    return lang('Group.LeaveGroup');
  }, [chat, isSavedDialog, lang]);
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!chat || isPreview) {
      return undefined;
    }
    const {
      toggleChatPinned,
      toggleSavedDialogPinned,
      updateChatMutedState,
      toggleChatArchived,
      toggleChatUnread,
      openChatInNewTab
    } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
    const actionOpenInNewTab = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_OPEN_IN_NEW_TAB_SUPPORTED && {
      title: _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_ELECTRON ? 'Open in new window' : 'Open in new tab',
      icon: 'open-in-new-tab',
      handler: () => {
        if (isSavedDialog) {
          openChatInNewTab({
            chatId: currentUserId,
            threadId: chat.id
          });
        } else {
          openChatInNewTab({
            chatId: chat.id
          });
        }
      }
    };
    const togglePinned = () => {
      if (isSavedDialog) {
        toggleSavedDialogPinned({
          id: chat.id
        });
      } else {
        toggleChatPinned({
          id: chat.id,
          folderId: folderId
        });
      }
    };
    const actionPin = isPinned ? {
      title: lang('UnpinFromTop'),
      icon: 'unpin',
      handler: togglePinned
    } : {
      title: lang('PinToTop'),
      icon: 'pin',
      handler: togglePinned
    };
    const actionDelete = {
      title: deleteTitle,
      icon: 'delete',
      destructive: true,
      handler: handleDelete
    };
    if (isSavedDialog) {
      return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.compact)([actionOpenInNewTab, actionPin, actionDelete]);
    }
    const actionAddToFolder = canChangeFolder ? {
      title: lang('ChatList.Filter.AddToFolder'),
      icon: 'folder',
      handler: handleChatFolderChange
    } : undefined;
    const actionMute = isMuted ? {
      title: lang('ChatList.Unmute'),
      icon: 'unmute',
      handler: () => updateChatMutedState({
        chatId: chat.id,
        isMuted: false
      })
    } : {
      title: `${lang('ChatList.Mute')}...`,
      icon: 'mute',
      handler: handleMute
    };
    if (isInSearch) {
      return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.compact)([actionOpenInNewTab, actionPin, actionAddToFolder, actionMute]);
    }
    const actionMaskAsRead = chat.unreadCount || chat.hasUnreadMark ? {
      title: lang('MarkAsRead'),
      icon: 'readchats',
      handler: () => toggleChatUnread({
        id: chat.id
      })
    } : undefined;
    const actionMarkAsUnread = !(chat.unreadCount || chat.hasUnreadMark) && !chat.isForum ? {
      title: lang('MarkAsUnread'),
      icon: 'unread',
      handler: () => toggleChatUnread({
        id: chat.id
      })
    } : undefined;
    const actionArchive = (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatArchived)(chat) ? {
      title: lang('Unarchive'),
      icon: 'unarchive',
      handler: () => toggleChatArchived({
        id: chat.id
      })
    } : {
      title: lang('Archive'),
      icon: 'archive',
      handler: () => toggleChatArchived({
        id: chat.id
      })
    };
    const canReport = handleReport && !user && ((0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatChannel)(chat) || (0,_global_helpers__WEBPACK_IMPORTED_MODULE_3__.isChatGroup)(chat));
    const actionReport = canReport ? {
      title: lang('ReportPeer.Report'),
      icon: 'flag',
      handler: handleReport
    } : undefined;
    const isInFolder = folderId !== undefined;
    return (0,_util_iteratees__WEBPACK_IMPORTED_MODULE_4__.compact)([actionOpenInNewTab, actionAddToFolder, actionMaskAsRead, actionMarkAsUnread, actionPin, !isSelf && actionMute, !isSelf && !isServiceNotifications && !isInFolder && actionArchive, actionReport, actionDelete]);
  }, [chat, user, canChangeFolder, lang, handleChatFolderChange, isPinned, isInSearch, isMuted, currentUserId, handleDelete, handleMute, handleReport, folderId, isSelf, isServiceNotifications, isSavedDialog, deleteTitle, isPreview]);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useChatContextActions);

/***/ }),

/***/ "./src/hooks/useEnsureStory.ts":
/*!*************************************!*\
  !*** ./src/hooks/useEnsureStory.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");



const THROTTLE_THRESHOLD_MS = 200;
function useEnsureStory(peerId, storyId, story) {
  const {
    loadPeerStoriesByIds
  } = (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)();
  const loadStoryThrottled = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const throttled = (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_2__.throttle)(loadPeerStoriesByIds, THROTTLE_THRESHOLD_MS, true);
    return () => {
      throttled({
        peerId: peerId,
        storyIds: [storyId]
      });
    };
  }, [storyId, peerId]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const shouldLoadStory = !story || !('content' in story || 'isDeleted' in story);
    if (peerId && storyId && shouldLoadStory) {
      loadStoryThrottled();
    }
  }, [loadStoryThrottled, story, storyId, peerId]);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useEnsureStory);

/***/ }),

/***/ "./src/hooks/useFolderManager.ts":
/*!***************************************!*\
  !*** ./src/hooks/useFolderManager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useFolderManagerForChatsCount: () => (/* binding */ useFolderManagerForChatsCount),
/* harmony export */   useFolderManagerForOrderedIds: () => (/* binding */ useFolderManagerForOrderedIds),
/* harmony export */   useFolderManagerForUnreadCounters: () => (/* binding */ useFolderManagerForUnreadCounters)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_folderManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/folderManager */ "./src/util/folderManager.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");



function useFolderManagerForOrderedIds(folderId) {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_2__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_1__.addOrderedIdsCallback)(folderId, forceUpdate), [folderId, forceUpdate]);
  return (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_1__.getOrderedIds)(folderId);
}
function useFolderManagerForUnreadCounters() {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_2__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_1__.addUnreadCountersCallback)(forceUpdate), [forceUpdate]);
  return (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_1__.getUnreadCounters)();
}
function useFolderManagerForChatsCount() {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_2__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_1__.addChatsCountCallback)(forceUpdate), [forceUpdate]);
  return (0,_util_folderManager__WEBPACK_IMPORTED_MODULE_1__.getChatsCount)();
}

/***/ }),

/***/ "./src/hooks/useForumPanelRender.ts":
/*!******************************************!*\
  !*** ./src/hooks/useForumPanelRender.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useForumPanelRender)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");




function useForumPanelRender(isForumPanelOpen = false) {
  const shouldRenderForumPanelRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(isForumPanelOpen);
  const isAnimationStartedRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__["default"])();
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    if (isForumPanelOpen) {
      shouldRenderForumPanelRef.current = true;
    }
  }, [isForumPanelOpen]);
  const handleForumPanelAnimationEnd = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    shouldRenderForumPanelRef.current = false;
    isAnimationStartedRef.current = false;
    forceUpdate();
  });
  const handleForumPanelAnimationStart = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    isAnimationStartedRef.current = true;
    forceUpdate();
  });
  return {
    shouldRenderForumPanel: shouldRenderForumPanelRef.current,
    isAnimationStarted: isAnimationStartedRef.current,
    handleForumPanelAnimationEnd,
    handleForumPanelAnimationStart
  };
}

/***/ }),

/***/ "./src/hooks/useGetSelectionRange.ts":
/*!*******************************************!*\
  !*** ./src/hooks/useGetSelectionRange.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useGetSelectionRange)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

function useGetSelectionRange(inputSelector) {
  const [getRange, setRange] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useSignal)();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    function onSelectionChange() {
      const selection = window.getSelection();
      if (!selection?.rangeCount) return;
      const range = selection.getRangeAt(0);
      if (!range) {
        return;
      }
      const inputEl = document.querySelector(inputSelector);
      if (!inputEl) {
        return;
      }
      const {
        commonAncestorContainer
      } = range;
      const element = commonAncestorContainer instanceof Element ? commonAncestorContainer : commonAncestorContainer.parentElement;
      if (element.closest(inputSelector)) {
        setRange(range);
      }
    }
    document.addEventListener('selectionchange', onSelectionChange);
    return () => document.removeEventListener('selectionchange', onSelectionChange);
  }, [inputSelector, setRange]);
  return getRange;
}

/***/ }),

/***/ "./src/hooks/useHotkeys.ts":
/*!*********************************!*\
  !*** ./src/hooks/useHotkeys.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useHotkeys: () => (/* binding */ useHotkeys)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/callbacks */ "./src/util/callbacks.ts");
/* harmony import */ var _util_parseHotkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/parseHotkey */ "./src/util/parseHotkey.ts");



const IGNORE_TAGS = new Set(['INPUT', 'TEXTAREA', 'SELECT']);
const handlers = (0,_util_callbacks__WEBPACK_IMPORTED_MODULE_1__.createCallbackManager)();
document.documentElement.addEventListener('keydown', handlers.runCallbacks);
function useHotkeys(hotkeys) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!hotkeys) {
      return undefined;
    }
    const entries = Object.entries(hotkeys);
    function handleKeyDown(e) {
      if (!shouldFireEvent(e)) {
        return;
      }
      entries.forEach(([hotkey, handler]) => {
        if ((0,_util_parseHotkey__WEBPACK_IMPORTED_MODULE_2__.getHotkeyMatcher)(hotkey)(e)) {
          handler(e);
        }
      });
    }
    return handlers.addCallback(handleKeyDown);
  }, [hotkeys]);
}
function shouldFireEvent(e) {
  if (e.target instanceof HTMLElement) {
    return !IGNORE_TAGS.has(e.target.tagName);
  }
  return true;
}

/***/ }),

/***/ "./src/hooks/useInputFocusOnOpen.ts":
/*!******************************************!*\
  !*** ./src/hooks/useInputFocusOnOpen.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useInputFocusOnOpen)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _useAppLayout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useAppLayout */ "./src/hooks/useAppLayout.ts");




// Focus slows down animation, also it breaks transition layout in Chrome
const FOCUS_DELAY_MS = 500;
const MODAL_HIDE_DELAY_MS = 300;
function useInputFocusOnOpen(inputRef, isOpen, onClose) {
  const {
    isMobile
  } = (0,_useAppLayout__WEBPACK_IMPORTED_MODULE_2__["default"])();
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isOpen) {
      if (!isMobile) {
        setTimeout(() => {
          (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
            if (inputRef.current?.isConnected) {
              inputRef.current.focus();
            }
          });
        }, FOCUS_DELAY_MS);
      }
    } else {
      if (inputRef.current?.isConnected) {
        inputRef.current.blur();
      }
      if (onClose) {
        setTimeout(onClose, MODAL_HIDE_DELAY_MS);
      }
    }
  }, [inputRef, isMobile, isOpen, onClose]);
}

/***/ }),

/***/ "./src/hooks/useLongPress.ts":
/*!***********************************!*\
  !*** ./src/hooks/useLongPress.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");

const DEFAULT_THRESHOLD = 250;
function useLongPress({
  onClick,
  onStart,
  onEnd,
  threshold = DEFAULT_THRESHOLD
}) {
  const isLongPressActive = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const isPressed = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const timerId = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);
  const start = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    const canProcessEvent = 'button' in e && e.button === 0 || 'touches' in e && e.touches.length > 0;
    if (isPressed.current || !canProcessEvent) {
      return;
    }
    isPressed.current = true;
    timerId.current = window.setTimeout(() => {
      onStart?.();
      isLongPressActive.current = true;
    }, threshold);
  }, [onStart, threshold]);
  const cancel = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(e => {
    if (!isPressed.current) return;
    if (isLongPressActive.current) {
      onEnd?.();
    } else {
      onClick?.(e);
    }
    isLongPressActive.current = false;
    isPressed.current = false;
    window.clearTimeout(timerId.current);
  }, [onEnd, onClick]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useUnmountCleanup)(() => {
    window.clearTimeout(timerId.current);
  });
  return {
    onMouseDown: start,
    onMouseUp: cancel,
    onMouseLeave: cancel,
    onTouchStart: start,
    onTouchEnd: cancel
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useLongPress);

/***/ }),

/***/ "./src/hooks/useMediaWithLoadProgress.ts":
/*!***********************************************!*\
  !*** ./src/hooks/useMediaWithLoadProgress.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMediaWithLoadProgress)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/mediaLoader */ "./src/util/mediaLoader.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _data_useSelector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data/useSelector */ "./src/hooks/data/useSelector.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _useUniqueId__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useUniqueId */ "./src/hooks/useUniqueId.ts");









const STREAMING_PROGRESS = 0.75;
const STREAMING_TIMEOUT = 1500;
const PROGRESS_THROTTLE = 500;
function useMediaWithLoadProgress(mediaHash, noLoad = false, mediaFormat = _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMediaFormat.BlobUrl, delay, isHtmlAllowed = false) {
  const mediaData = mediaHash ? _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.getFromMemory(mediaHash) : undefined;
  const isStreaming = _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_5__.IS_PROGRESSIVE_SUPPORTED && mediaFormat === _api_types__WEBPACK_IMPORTED_MODULE_1__.ApiMediaFormat.Progressive;
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_7__["default"])();
  const isSynced = (0,_data_useSelector__WEBPACK_IMPORTED_MODULE_6__["default"])(_global_selectors__WEBPACK_IMPORTED_MODULE_2__.selectIsSynced);
  const id = (0,_useUniqueId__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const [loadProgress, setLoadProgress] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)(mediaData && !isStreaming ? 1 : 0);
  const startedAtRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const handleProgress = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_4__.throttle)(progress => {
      if (startedAtRef.current && (!delay || Date.now() - startedAtRef.current > delay)) {
        setLoadProgress(progress);
      }
    }, PROGRESS_THROTTLE, true);
  }, [delay]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!noLoad && mediaHash) {
      if (!mediaData) {
        setLoadProgress(0);
        if (startedAtRef.current) {
          _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.cancelProgress(handleProgress);
        }
        startedAtRef.current = Date.now();
        _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.fetch(mediaHash, mediaFormat, isHtmlAllowed, handleProgress, id).then(() => {
          const spentTime = Date.now() - startedAtRef.current;
          startedAtRef.current = undefined;
          if (!delay || spentTime >= delay) {
            forceUpdate();
          } else {
            setTimeout(forceUpdate, delay - spentTime);
          }
        });
      } else if (isStreaming) {
        setTimeout(() => {
          setLoadProgress(STREAMING_PROGRESS);
        }, STREAMING_TIMEOUT);
      }
    }
  }, [noLoad, mediaHash, mediaData, mediaFormat, isStreaming, delay, handleProgress, isHtmlAllowed, id, isSynced]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (noLoad && startedAtRef.current) {
      _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.cancelProgress(handleProgress);
      setLoadProgress(0);
      startedAtRef.current = undefined;
    }
  }, [handleProgress, noLoad]);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return () => {
      if (mediaHash) {
        _util_mediaLoader__WEBPACK_IMPORTED_MODULE_3__.removeCallback(mediaHash, id);
      }
    };
  }, [id, mediaHash]);
  return {
    mediaData,
    loadProgress
  };
}

/***/ }),

/***/ "./src/hooks/useMouseInside.ts":
/*!*************************************!*\
  !*** ./src/hooks/useMouseInside.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMouseInside)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");



const MENU_CLOSE_TIMEOUT = 250;
let closeTimeout;
function useMouseInside(isOpen, onClose, menuCloseTimeout = MENU_CLOSE_TIMEOUT, isDisabled = false) {
  const isMouseInside = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const markMouseInside = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    isMouseInside.current = true;
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (closeTimeout) {
      clearTimeout(closeTimeout);
      closeTimeout = undefined;
    }
    if (isOpen && !_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_1__.IS_TOUCH_ENV && !isDisabled) {
      closeTimeout = window.setTimeout(() => {
        if (!isMouseInside.current) {
          onClose();
        }
      }, menuCloseTimeout * 2);
    }
  }, [isDisabled, isOpen, menuCloseTimeout, onClose]);
  const handleMouseEnter = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    isMouseInside.current = true;
  });
  const handleMouseLeave = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(() => {
    isMouseInside.current = false;
    if (closeTimeout) {
      clearTimeout(closeTimeout);
      closeTimeout = undefined;
    }
    closeTimeout = window.setTimeout(() => {
      if (!isMouseInside.current) {
        onClose();
      }
    }, menuCloseTimeout);
  });
  return [handleMouseEnter, handleMouseLeave, markMouseInside];
}

/***/ }),

/***/ "./src/hooks/useOffscreenCanvasBlur.ts":
/*!*********************************************!*\
  !*** ./src/hooks/useOffscreenCanvasBlur.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useOffscreenCanvasBlur)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_cycleRestrict__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/cycleRestrict */ "./src/util/cycleRestrict.ts");
/* harmony import */ var _util_files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/files */ "./src/util/files.ts");
/* harmony import */ var _util_launchMediaWorkers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/launchMediaWorkers */ "./src/util/launchMediaWorkers.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");






const RADIUS_RATIO = 0.1; // Use 10% of the smallest dimension as the blur radius

let lastWorkerIndex = -1;
function useOffscreenCanvasBlur(thumbData,
// data URI or blob URL
isDisabled = false) {
  // eslint-disable-next-line no-null/no-null
  const canvasRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const workerIndex = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_util_cycleRestrict__WEBPACK_IMPORTED_MODULE_2__["default"])(_util_launchMediaWorkers__WEBPACK_IMPORTED_MODULE_4__.MAX_WORKERS, ++lastWorkerIndex), []);
  const offscreenRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const blurThumb = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_5__["default"])(async (canvas, uri) => {
    const image = await (0,_util_files__WEBPACK_IMPORTED_MODULE_3__.preloadImage)(uri);
    if (!image) {
      return;
    }
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_1__.requestMutation)(() => {
      canvas.width = image.width;
      canvas.height = image.height;
      offscreenRef.current = canvas.transferControlToOffscreen();
      const radius = Math.ceil(Math.min(image.width, image.height) * RADIUS_RATIO);
      (0,_util_launchMediaWorkers__WEBPACK_IMPORTED_MODULE_4__.requestMediaWorker)({
        name: 'offscreen-canvas:blurThumb',
        args: [offscreenRef.current, uri, radius],
        transferables: [offscreenRef.current]
      }, workerIndex);
    });
  });
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!thumbData || isDisabled || offscreenRef.current) return;
    const canvas = canvasRef.current;
    if (!canvas) return;
    blurThumb(canvas, thumbData);
  }, [blurThumb, isDisabled, thumbData]);
  return canvasRef;
}

/***/ }),

/***/ "./src/hooks/usePrevDuringAnimation.ts":
/*!*********************************************!*\
  !*** ./src/hooks/usePrevDuringAnimation.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ usePrevDuringAnimation)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");
/* harmony import */ var _usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./usePreviousDeprecated */ "./src/hooks/usePreviousDeprecated.ts");
/* harmony import */ var _useSyncEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useSyncEffect */ "./src/hooks/useSyncEffect.ts");




function usePrevDuringAnimation(current, duration) {
  const prev = (0,_usePreviousDeprecated__WEBPACK_IMPORTED_MODULE_2__["default"])(current, true);
  const timeoutRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__["default"])();
  // eslint-disable-next-line no-null/no-null
  const isCurrentPresent = current !== undefined && current !== null;
  // eslint-disable-next-line no-null/no-null
  const isPrevPresent = prev !== undefined && prev !== null;
  if (isCurrentPresent && timeoutRef.current) {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = undefined;
  }
  (0,_useSyncEffect__WEBPACK_IMPORTED_MODULE_3__["default"])(() => {
    // When `current` becomes empty
    if (duration && !isCurrentPresent && isPrevPresent && !timeoutRef.current) {
      timeoutRef.current = window.setTimeout(() => {
        timeoutRef.current = undefined;
        forceUpdate();
      }, duration);
    }
  }, [duration, forceUpdate, isCurrentPresent, isPrevPresent]);
  return !timeoutRef.current || !duration || isCurrentPresent ? current : prev;
}

/***/ }),

/***/ "./src/hooks/useReducer.ts":
/*!*********************************!*\
  !*** ./src/hooks/useReducer.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useReducer)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _useForceUpdate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useForceUpdate */ "./src/hooks/useForceUpdate.ts");


function useReducer(reducer, initialState) {
  const forceUpdate = (0,_useForceUpdate__WEBPACK_IMPORTED_MODULE_1__["default"])();
  const reducerRef = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(reducer);
  const state = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialState);
  const dispatch = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useCallback)(action => {
    state.current = reducerRef.current(state.current, action);
    forceUpdate();
    return state.current;
  }, []);
  return [state.current, dispatch];
}

/***/ }),

/***/ "./src/hooks/useRunDebounced.ts":
/*!**************************************!*\
  !*** ./src/hooks/useRunDebounced.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useRunDebounced)
/* harmony export */ });
/* harmony import */ var _useDebouncedCallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useDebouncedCallback */ "./src/hooks/useDebouncedCallback.ts");

function useRunDebounced(ms, noFirst, noLast, deps = []) {
  return (0,_useDebouncedCallback__WEBPACK_IMPORTED_MODULE_0__["default"])(cb => {
    cb();
    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps
  }, deps, ms, noFirst, noLast);
}

/***/ }),

/***/ "./src/hooks/useSchedule.tsx":
/*!***********************************!*\
  !*** ./src/hooks/useSchedule.tsx ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/dates/dateFormat */ "./src/util/dates/dateFormat.ts");
/* harmony import */ var _util_serverTime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/serverTime */ "./src/util/serverTime.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useLastCallback */ "./src/hooks/useLastCallback.ts");
/* harmony import */ var _useOldLang__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useOldLang */ "./src/hooks/useOldLang.ts");
/* harmony import */ var _components_common_CalendarModal_async__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/common/CalendarModal.async */ "./src/components/common/CalendarModal.async.tsx");







const useSchedule = (canScheduleUntilOnline, onCancel, openAt) => {
  const lang = (0,_useOldLang__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const [onScheduled, setOnScheduled] = (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const handleMessageSchedule = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])((date, isWhenOnline = false) => {
    // Scheduled time can not be less than 10 seconds in future
    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000) + (isWhenOnline ? 0 : (0,_util_serverTime__WEBPACK_IMPORTED_MODULE_3__.getServerTimeOffset)());
    onScheduled?.(scheduledAt);
    setOnScheduled(undefined);
  });
  const handleMessageScheduleUntilOnline = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    handleMessageSchedule(new Date(_config__WEBPACK_IMPORTED_MODULE_1__.SCHEDULED_WHEN_ONLINE * 1000), true);
  });
  const handleCloseCalendar = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    setOnScheduled(undefined);
    onCancel?.();
  });
  const requestCalendar = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_4__["default"])(whenScheduled => {
    setOnScheduled(() => whenScheduled);
  });
  const scheduledDefaultDate = openAt ? new Date(openAt * 1000) : new Date();
  scheduledDefaultDate.setSeconds(0);
  scheduledDefaultDate.setMilliseconds(0);
  const scheduledMaxDate = new Date();
  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);
  const calendar = /*#__PURE__*/_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__["default"].createElement(_components_common_CalendarModal_async__WEBPACK_IMPORTED_MODULE_6__["default"], {
    isOpen: Boolean(onScheduled),
    withTimePicker: true,
    selectedAt: scheduledDefaultDate.getTime(),
    maxAt: (0,_util_dates_dateFormat__WEBPACK_IMPORTED_MODULE_2__.getDayStartAt)(scheduledMaxDate),
    isFutureMode: true,
    secondButtonLabel: canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined,
    onClose: handleCloseCalendar,
    onSubmit: handleMessageSchedule,
    onSecondButtonClick: canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined
  });
  return [requestCalendar, calendar];
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useSchedule);

/***/ }),

/***/ "./src/hooks/useSendMessageAction.ts":
/*!*******************************************!*\
  !*** ./src/hooks/useSendMessageAction.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/schedulers */ "./src/util/schedulers.ts");




const useSendMessageAction = (chatId, threadId) => {
  return (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_3__.throttle)(action => {
      if (!chatId || !threadId) return;
      (0,_global__WEBPACK_IMPORTED_MODULE_1__.getActions)().sendMessageAction({
        chatId,
        threadId,
        action
      });
    }, _config__WEBPACK_IMPORTED_MODULE_2__.SEND_MESSAGE_ACTION_INTERVAL);
  }, [chatId, threadId]);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useSendMessageAction);

/***/ }),

/***/ "./src/hooks/useStreaming.ts":
/*!***********************************!*\
  !*** ./src/hooks/useStreaming.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkIfStreamingSupported: () => (/* binding */ checkIfStreamingSupported),
/* harmony export */   useStreaming: () => (/* binding */ useStreaming)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _util_animation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/animation */ "./src/util/animation.ts");
/* harmony import */ var _util_browser_unloadVideo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/browser/unloadVideo */ "./src/util/browser/unloadVideo.ts");
/* harmony import */ var _util_progressiveLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/progressiveLoader */ "./src/util/progressiveLoader.ts");
/* harmony import */ var _util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/windowEnvironment */ "./src/util/windowEnvironment.ts");







const VIDEO_REVEAL_DELAY = 100;
function useStreaming(videoRef, url, mimeType) {
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!url || !videoRef.current) return undefined;
    const MediaSourceClass = getMediaSource();
    const video = videoRef.current;
    if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_SAFARI || !mimeType || !MediaSourceClass?.isTypeSupported(mimeType)) {
      return undefined;
    }
    const mediaSource = new MediaSourceClass();
    function revealVideo() {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
        video.style.display = 'block';
        setTimeout(() => {
          (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
            (0,_util_animation__WEBPACK_IMPORTED_MODULE_3__.applyStyles)(video, {
              opacity: '1'
            });
          });
        }, VIDEO_REVEAL_DELAY);
      });
    }
    function onSourceOpen() {
      if (!url || !mimeType) return;
      const sourceBuffer = mediaSource.addSourceBuffer(mimeType);
      const loader = (0,_util_progressiveLoader__WEBPACK_IMPORTED_MODULE_5__.makeProgressiveLoader)(url);
      function onUpdateEnded() {
        loader.next().then(({
          value,
          done
        }) => {
          if (mediaSource.readyState !== 'open') return;
          if (done) {
            endOfStream(mediaSource);
            return;
          }
          appendBuffer(sourceBuffer, value);
        });
      }
      sourceBuffer.addEventListener('updateend', onUpdateEnded);
      loader.next().then(({
        value,
        done
      }) => {
        if (done || mediaSource.readyState !== 'open') return;
        revealVideo();
        appendBuffer(sourceBuffer, value);
      });
    }
    mediaSource.addEventListener('sourceopen', onSourceOpen, {
      once: true
    });
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
      (0,_util_animation__WEBPACK_IMPORTED_MODULE_3__.applyStyles)(video, {
        display: 'none',
        opacity: '0'
      });
      video.src = URL.createObjectURL(mediaSource);
    });
    return () => {
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestMutation)(() => {
        const src = video.src;
        (0,_util_browser_unloadVideo__WEBPACK_IMPORTED_MODULE_4__["default"])(video);
        mediaSource.removeEventListener('sourceopen', onSourceOpen);
        if (mediaSource.readyState === 'open') {
          endOfStream(mediaSource);
        }
        URL.revokeObjectURL(src);
      });
    };
  }, [mimeType, url, videoRef]);
  return checkIfStreamingSupported(mimeType);
}
function checkIfStreamingSupported(mimeType) {
  if (!_util_windowEnvironment__WEBPACK_IMPORTED_MODULE_6__.IS_SAFARI || !mimeType) return false;
  return Boolean(getMediaSource()?.isTypeSupported(mimeType));
}
function appendBuffer(sourceBuffer, buffer) {
  try {
    sourceBuffer.appendBuffer(buffer);
  } catch (error) {
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[Stream] failed to append buffer', error);
    }
  }
}
function endOfStream(mediaSource) {
  try {
    mediaSource.endOfStream();
  } catch (error) {
    if (_config__WEBPACK_IMPORTED_MODULE_1__.DEBUG) {
      // eslint-disable-next-line no-console
      console.warn('[Stream] failed to end stream', error);
    }
  }
}
function getMediaSource() {
  if ('ManagedMediaSource' in window) {
    // @ts-ignore
    return ManagedMediaSource;
  }
  if ('MediaSource' in window) {
    return MediaSource;
  }
  return undefined;
}

/***/ }),

/***/ "./src/hooks/window/useBeforeUnload.ts":
/*!*********************************************!*\
  !*** ./src/hooks/window/useBeforeUnload.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useBeforeUnload)
/* harmony export */ });
/* harmony import */ var _lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/teact/teact */ "./src/lib/teact/teact.ts");
/* harmony import */ var _util_schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/schedulers */ "./src/util/schedulers.ts");
/* harmony import */ var _useLastCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../useLastCallback */ "./src/hooks/useLastCallback.ts");



function useBeforeUnload(callback) {
  const lastCallback = (0,_useLastCallback__WEBPACK_IMPORTED_MODULE_2__["default"])(callback);
  (0,_lib_teact_teact__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (0,_util_schedulers__WEBPACK_IMPORTED_MODULE_1__.onBeforeUnload)(lastCallback), [lastCallback]);
}

/***/ }),

/***/ "./src/lib/cleanDocsHtml.ts":
/*!**********************************!*\
  !*** ./src/lib/cleanDocsHtml.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cleanDocsHtml)
/* harmony export */ });
// Utility for cleaning html code from Google Docs.
// Original source from DocsSoap:
// https://www.npmjs.com/package/docs-soap

const GDOCS_ELEMENT_ID_REGEXP = /id="docs-internal-guid/i;
const GDOCS_STYLES = {
  BOLD: '700',
  ITALIC: 'italic',
  UNDERLINE: 'underline',
  STRIKETHROUGH: 'line-through',
  SUPERSCRIPT: 'super',
  SUBSCRIPT: 'sub'
};
const ELEMENTS = {
  ANCHOR: 'a',
  BOLD: 'strong',
  ITALIC: 'em',
  UNDERLINE: 'u',
  BLOCKQUOTE: 'blockquote',
  STRIKETHROUGH: 'del',
  SUPERSCRIPT: 'sup',
  SUBSCRIPT: 'sub'
};
const headers = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
function parseHtml(html) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, 'text/html');
  return doc.body;
}
function wrapNodeAnchor(node, href) {
  const anchor = document.createElement(ELEMENTS.ANCHOR);
  anchor.href = href;
  anchor.appendChild(node.cloneNode(true));
  return anchor;
}
function wrapNodeInline(node, style) {
  const el = document.createElement(style);
  el.appendChild(node.cloneNode(true));
  return el;
}
function wrapNode(inner, result) {
  let newNode = result.cloneNode(true);
  if (!inner) {
    return newNode;
  }
  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {
    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);
  }
  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {
    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);
  }
  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {
    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);
  }
  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {
    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);
  }
  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {
    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);
  }
  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {
    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);
  }
  return newNode;
}
function applyBlockStyles(dirty) {
  const node = dirty.cloneNode(true);
  let newNode = document.createTextNode(node.textContent || '');
  let styledNode = document.createTextNode('');
  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {
    styledNode = node.childNodes[0];
  }
  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {
    newNode = wrapNodeAnchor(newNode.cloneNode(true), node.childNodes[0].href);
    styledNode = node.childNodes[0].childNodes[0];
  }
  newNode = wrapNode(styledNode, newNode);
  return newNode;
}
function applyInlineStyles(dirty) {
  const node = dirty.cloneNode(true);
  let newNode = document.createTextNode(node.textContent || '');
  let styledNode = node;
  if (node.nodeName === 'A') {
    newNode = wrapNodeAnchor(newNode, node.href);
    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {
      styledNode = node.childNodes[0];
    }
  }
  newNode = wrapNode(styledNode, newNode);
  return newNode;
}
function getCleanNode(node) {
  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {
    let newWrapper;
    let newNode = document.createTextNode(node.textContent || '');
    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {
      newWrapper = document.createElement(node.nodeName);
      newNode = document.createDocumentFragment();
      const items = [];
      for (let i = 0; i < node.childNodes.length; i++) {
        items.push(...getCleanNode(node.childNodes[i]));
      }
      items.map(i => newNode.appendChild(i));
    } else if (headers.indexOf(node.nodeName) !== -1) {
      newWrapper = document.createElement(node.nodeName);
      newNode = applyInlineStyles(node.childNodes[0]);
    } else if (node.nodeName === 'P') {
      newWrapper = document.createElement('p');
      newNode = applyBlockStyles(node);
    } else if (node.nodeName === 'BR') {
      newNode = node;
    } else {
      newWrapper = document.createElement('span');
      newNode = applyInlineStyles(node);
    }
    if (newWrapper) {
      newWrapper.appendChild(newNode);
      return [newWrapper];
    }
    return [node.cloneNode(true)];
  }
  if (node.childNodes) {
    const nodes = [];
    for (let i = 0; i < node.childNodes.length; i++) {
      nodes.push(...getCleanNode(node.childNodes[i]));
    }
    return nodes;
  }
  return [node];
}
function filterNode(node) {
  return node.nodeType !== 8; // Node.COMMENT_NODE = 8
}
function getCleanDocument(dirty) {
  const body = document.createElement('body');
  const nodes = dirty.childNodes;
  const filteredNodes = Array.from(nodes).filter(filterNode);
  const cleanNodes = [];
  for (const node of filteredNodes) {
    cleanNodes.push(...getCleanNode(node));
  }
  for (let i = 0; i < cleanNodes.length; i++) {
    body.appendChild(cleanNodes[i].cloneNode(true));
  }
  return body;
}
function cleanDocsHtml(clipboardContent) {
  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {
    return parseHtml(clipboardContent.replace(/(\r\n|\n|\r)/, '')).innerHTML;
  }
  return getCleanDocument(parseHtml(clipboardContent.replace(/(\r\n|\n|\r)/, ''))).innerHTML;
}

/***/ }),

/***/ "./src/util/AbsoluteVideo.ts":
/*!***********************************!*\
  !*** ./src/util/AbsoluteVideo.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AbsoluteVideo)
/* harmony export */ });
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _safePlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./safePlay */ "./src/util/safePlay.ts");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


class AbsoluteVideo {
  constructor(videoUrl, container, options) {
    this.container = container;
    this.options = options;
    _defineProperty(this, "video", void 0);
    _defineProperty(this, "isPlaying", false);
    this.video = document.createElement('video');
    this.video.src = videoUrl;
    this.video.disablePictureInPicture = true;
    this.video.muted = true;
    if (options.style) {
      this.video.setAttribute('style', options.style);
    }
    this.video.style.position = 'absolute';
    this.video.load();
    if (!this.options.noLoop) {
      this.video.loop = true;
    }
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
      this.container.appendChild(this.video);
      this.recalculatePositionAndSize();
    });
  }
  play() {
    if (this.isPlaying || !this.video) return;
    this.recalculatePositionAndSize();
    if (this.video.paused) {
      (0,_safePlay__WEBPACK_IMPORTED_MODULE_1__["default"])(this.video);
    }
    this.isPlaying = true;
  }
  pause() {
    if (!this.isPlaying || !this.video) return;
    if (!this.video.paused) {
      this.video.pause();
    }
    this.isPlaying = false;
  }
  destroy() {
    this.pause();
    this.video?.remove();
    this.video = undefined;
  }
  updatePosition(position) {
    this.options.position = position;
    this.recalculatePositionAndSize();
  }
  recalculatePositionAndSize() {
    const {
      size,
      position: {
        x,
        y
      }
    } = this.options;
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMeasure)(() => {
      if (!this.video) return;
      const video = this.video;
      const {
        width,
        height
      } = this.container.getBoundingClientRect();
      (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMutation)(() => {
        video.style.left = `${Math.round(x * width)}px`;
        video.style.top = `${Math.round(y * height)}px`;
        video.style.width = `${size}px`;
        video.style.height = `${size}px`;
      });
    });
  }
}

/***/ }),

/***/ "./src/util/PostMessageConnector.ts":
/*!******************************************!*\
  !*** ./src/util/PostMessageConnector.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConnector: () => (/* binding */ createConnector)
/* harmony export */ });
/* harmony import */ var _generateUniqueId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateUniqueId */ "./src/util/generateUniqueId.ts");
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


class ConnectorClass {
  constructor(target, onUpdate, channel) {
    this.target = target;
    this.onUpdate = onUpdate;
    this.channel = channel;
    _defineProperty(this, "requestStates", new Map());
    _defineProperty(this, "requestStatesByCallback", new Map());
    _defineProperty(this, "pendingPayloads", []);
    _defineProperty(this, "pendingTransferables", []);
    _defineProperty(this, "postMessagesOnTickEnd", (0,_schedulers__WEBPACK_IMPORTED_MODULE_1__.throttleWithTickEnd)(() => {
      const {
        channel
      } = this;
      const payloads = this.pendingPayloads;
      const transferables = this.pendingTransferables;
      this.pendingPayloads = [];
      this.pendingTransferables = [];
      this.target.postMessage({
        channel,
        payloads
      }, transferables);
    }));
  }

  // eslint-disable-next-line class-methods-use-this
  destroy() {}
  init(...args) {
    this.postMessageOnTickEnd({
      type: 'init',
      args
    });
  }
  request(messageData) {
    const {
      requestStates,
      requestStatesByCallback
    } = this;
    const {
      transferables,
      ...restMessageData
    } = messageData;
    const messageId = (0,_generateUniqueId__WEBPACK_IMPORTED_MODULE_0__["default"])();
    const payload = {
      type: 'callMethod',
      messageId,
      ...restMessageData
    };
    const requestState = {
      messageId
    };

    // Re-wrap type because of `postMessage`
    const promise = new Promise((resolve, reject) => {
      Object.assign(requestState, {
        resolve,
        reject
      });
    });
    if (typeof payload.args[payload.args.length - 1] === 'function') {
      payload.withCallback = true;
      const callback = payload.args.pop();
      requestState.callback = callback;
      requestStatesByCallback.set(callback, requestState);
    }
    requestStates.set(messageId, requestState);
    promise.catch(() => undefined).finally(() => {
      requestStates.delete(messageId);
      if (requestState.callback) {
        requestStatesByCallback.delete(requestState.callback);
      }
    });
    this.postMessageOnTickEnd(payload, transferables);
    return promise;
  }
  cancelCallback(progressCallback) {
    progressCallback.isCanceled = true;
    const {
      messageId
    } = this.requestStatesByCallback.get(progressCallback) || {};
    if (!messageId) {
      return;
    }
    this.postMessageOnTickEnd({
      type: 'cancelProgress',
      messageId
    });
  }
  onMessage(data) {
    const {
      requestStates,
      channel
    } = this;
    if (data.channel !== channel) {
      return;
    }
    data.payloads.forEach(payload => {
      if (payload.type === 'update' && this.onUpdate) {
        this.onUpdate(payload.update);
      }
      if (payload.type === 'methodResponse') {
        const requestState = requestStates.get(payload.messageId);
        if (requestState) {
          if (payload.error) {
            requestState.reject(payload.error);
          } else {
            requestState.resolve(payload.response);
          }
        }
      } else if (payload.type === 'methodCallback') {
        const requestState = requestStates.get(payload.messageId);
        requestState?.callback?.(...payload.callbackArgs);
      } else if (payload.type === 'unhandledError') {
        throw new Error(payload.error?.message);
      }
    });
  }
  postMessageOnTickEnd(payload, transferables) {
    this.pendingPayloads.push(payload);
    if (transferables) {
      this.pendingTransferables.push(...transferables);
    }
    this.postMessagesOnTickEnd();
  }
}
function createConnector(worker, onUpdate, channel) {
  const connector = new ConnectorClass(worker, onUpdate, channel);
  function handleMessage({
    data
  }) {
    connector.onMessage(data);
  }
  worker.addEventListener('message', handleMessage);
  connector.destroy = () => {
    worker.removeEventListener('message', handleMessage);
  };
  return connector;
}

/***/ }),

/***/ "./src/util/audio.ts":
/*!***************************!*\
  !*** ./src/util/audio.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseAudioMetadata: () => (/* binding */ parseAudioMetadata)
/* harmony export */ });
async function parseAudioMetadata(url) {
  const {
    fetchFromUrl,
    selectCover
  } = await __webpack_require__.e(/*! import() */ "src_lib_music-metadata-browser_index_js").then(__webpack_require__.t.bind(__webpack_require__, /*! ../lib/music-metadata-browser */ "./src/lib/music-metadata-browser/index.js", 23));
  const metadata = await fetchFromUrl(url);
  const {
    common: {
      title,
      artist,
      picture
    },
    format: {
      duration
    }
  } = metadata;
  const cover = selectCover(picture);
  const coverBlob = cover ? new Blob([cover.data], {
    type: cover.format
  }) : undefined;
  const coverUrl = coverBlob ? URL.createObjectURL(coverBlob) : undefined;
  return {
    title,
    performer: artist,
    duration,
    coverUrl
  };
}

/***/ }),

/***/ "./src/util/audioPlayer.ts":
/*!*********************************!*\
  !*** ./src/util/audioPlayer.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeTrackId: () => (/* binding */ makeTrackId),
/* harmony export */   register: () => (/* binding */ register),
/* harmony export */   stopCurrentAudio: () => (/* binding */ stopCurrentAudio)
/* harmony export */ });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ "./src/global/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ "./src/types/index.ts");
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");
/* harmony import */ var _global_selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/selectors */ "./src/global/selectors/index.ts");
/* harmony import */ var _keys_messageKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keys/messageKey */ "./src/util/keys/messageKey.ts");
/* harmony import */ var _patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./patchSafariProgressiveAudio */ "./src/util/patchSafariProgressiveAudio.ts");
/* harmony import */ var _safePlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./safePlay */ "./src/util/safePlay.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");








const tracks = new Map();
let voiceQueue = [];
let musicQueue = [];
let currentTrackId;
function createAudio(trackId, type, onForcePlay, onTrackChange) {
  const audio = new Audio();
  function handleEvent(eventName) {
    return e => {
      if (!tracks.has(trackId)) {
        return;
      }
      if ((0,_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_5__.isSafariPatchInProgress)(audio)) {
        return;
      }
      tracks.get(trackId).handlers.forEach(handler => {
        handler(eventName, e);
      });
    };
  }
  audio.addEventListener('timeupdate', handleEvent('onTimeUpdate'));
  audio.addEventListener('play', handleEvent('onPlay'));
  audio.addEventListener('pause', handleEvent('onPause'));
  audio.addEventListener('loadstart', handleEvent('onLoadStart'));
  audio.addEventListener('loadeddata', handleEvent('onLoadedData'));
  audio.addEventListener('playing', handleEvent('onPlaying'));
  audio.addEventListener('ended', () => {
    if (!tracks.has(trackId)) {
      return;
    }
    if ((0,_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_5__.isSafariPatchInProgress)(audio)) {
      return;
    }
    playNext(trackId);
  });
  return {
    audio,
    type,
    proxy: new Proxy(audio, {
      get: (target, key) => target[key]
    }),
    handlers: [],
    onForcePlay,
    onTrackChange
  };
}
function playNext(trackId, isReverseOrder) {
  const currentTrack = currentTrackId && tracks.get(currentTrackId);
  if (currentTrack) {
    currentTrack.audio.pause();
    currentTrack.audio.currentTime = 0;
    if (currentTrack.onTrackChange) currentTrack.onTrackChange();
  }
  const origin = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)()).audioPlayer.origin || _types__WEBPACK_IMPORTED_MODULE_1__.AudioOrigin.Inline;
  const nextTrackId = findNextInQueue(trackId, origin, isReverseOrder);
  if (!nextTrackId) {
    return;
  }
  if (!tracks.has(nextTrackId)) {
    // A bit hacky way to continue playlist when switching chat
    (0,_global__WEBPACK_IMPORTED_MODULE_0__.getActions)().openAudioPlayer((0,_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.parseMessageKey)(splitTrackId(nextTrackId).messageKey));
    return;
  }
  const nextTrack = tracks.get(nextTrackId);
  if (nextTrack.onForcePlay) {
    nextTrack.onForcePlay();
  }
  currentTrackId = nextTrackId;
  if (nextTrack.audio.src) {
    (0,_safePlay__WEBPACK_IMPORTED_MODULE_6__["default"])(nextTrack.audio);
  }
}
function stopCurrentAudio() {
  const currentTrack = currentTrackId && tracks.get(currentTrackId);
  if (currentTrack) {
    currentTrack.audio.pause();
  }
}
function register(trackId, trackType, handler, onForcePlay, onTrackChange) {
  if (!tracks.has(trackId)) {
    const track = createAudio(trackId, trackType, onForcePlay, onTrackChange);
    tracks.set(trackId, track);
    addTrackToQueue(track, trackId);
  }
  const {
    audio,
    proxy,
    handlers
  } = tracks.get(trackId);
  handlers.push(handler);
  return {
    play(src) {
      if (!audio.paused) return;
      const currentTrack = currentTrackId && tracks.get(currentTrackId);
      if (currentTrack && currentTrackId !== trackId) {
        currentTrack.audio.pause();
        currentTrack.audio.currentTime = 0;
        if ((0,_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_5__.isSafariPatchInProgress)(currentTrack.audio)) {
          currentTrack.audio.dataset.preventPlayAfterPatch = 'true';
        }
        if (currentTrack.onTrackChange) currentTrack.onTrackChange();
      }
      currentTrackId = trackId;
      if (!audio.src) {
        audio.src = src;
        audio.preload = 'auto';
        if (src.includes('/progressive/') && _windowEnvironment__WEBPACK_IMPORTED_MODULE_7__.IS_SAFARI) {
          delete audio.dataset.preventPlayAfterPatch;
          (0,_patchSafariProgressiveAudio__WEBPACK_IMPORTED_MODULE_5__.patchSafariProgressiveAudio)(audio);
        }
      }
      (0,_safePlay__WEBPACK_IMPORTED_MODULE_6__["default"])(audio);
      cleanUpQueue(trackType, trackId);
    },
    pause() {
      if (currentTrackId === trackId) {
        audio.pause();
      }
    },
    stop() {
      if (currentTrackId === trackId) {
        // Hack, reset `src` to remove default media session notification
        const prevSrc = audio.src;
        audio.pause();
        // `onPause` not called otherwise, but required to sync UI
        (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_2__.requestNextMutation)(() => {
          audio.src = '';
          audio.src = prevSrc;
        });
      }
    },
    setCurrentTime(time) {
      if (currentTrackId === trackId) {
        if (audio.fastSeek) {
          audio.fastSeek(time);
        } else {
          audio.currentTime = time;
        }
      }
    },
    setVolume(volume) {
      if (currentTrackId === trackId) {
        audio.volume = volume;
        audio.muted = false;
      }
    },
    setPlaybackRate(rate) {
      if (currentTrackId === trackId) {
        audio.playbackRate = rate;
      }
    },
    toggleMuted(muted) {
      if (muted === undefined) {
        audio.muted = !audio.muted;
      } else {
        audio.muted = muted;
      }
    },
    proxy,
    requestNextTrack() {
      playNext(trackId);
    },
    isLast() {
      return !findNextInQueue(trackId, (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)()).audioPlayer.origin);
    },
    isFirst() {
      return !findNextInQueue(trackId, (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)()).audioPlayer.origin, true);
    },
    requestPreviousTrack() {
      playNext(trackId, true);
    },
    destroy(shouldRemoveFromQueue = false) {
      const track = tracks.get(trackId);
      if (!track) {
        return;
      }
      track.handlers = track.handlers.filter(h => h !== handler);
      if (!track.handlers.length) {
        track.audio.pause();
        tracks.delete(trackId);
        if (shouldRemoveFromQueue) {
          removeFromQueue(track, trackId);
        }
        if (trackId === currentTrackId) {
          currentTrackId = undefined;
        }
      }
    }
  };
}
function getTrackQueue(track) {
  switch (track.type) {
    case 'audio':
      return musicQueue;
    case 'voice':
      return voiceQueue;
    default:
      return undefined;
  }
}
function addTrackToQueue(track, trackId) {
  if (track.type === 'audio' && !musicQueue.includes(trackId)) {
    musicQueue.push(trackId);
    musicQueue.sort(trackIdComparator);
  }
  if (track.type === 'voice' && !voiceQueue.includes(trackId)) {
    voiceQueue.push(trackId);
    voiceQueue.sort(trackIdComparator);
  }
}
function removeFromQueue(track, trackId) {
  const trackIdFilter = el => el !== trackId;
  if (track.type === 'audio') {
    musicQueue = musicQueue.filter(trackIdFilter);
  }
  if (track.type === 'voice') {
    voiceQueue = voiceQueue.filter(trackIdFilter);
  }
}
function cleanUpQueue(type, trackId) {
  if ((0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectTabState)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)()).globalSearch.currentContent === _types__WEBPACK_IMPORTED_MODULE_1__.GlobalSearchContent.Music) return;
  const {
    chatId
  } = (0,_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.parseMessageKey)(splitTrackId(trackId).messageKey);
  const openedChatId = (0,_global_selectors__WEBPACK_IMPORTED_MODULE_3__.selectCurrentMessageList)((0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)())?.chatId;
  const queueFilter = id => id.startsWith(`msg${chatId}`) || openedChatId && id.startsWith(`msg${openedChatId}`);
  if (type === 'audio') {
    musicQueue = musicQueue.filter(queueFilter);
  }
  if (type === 'voice') {
    voiceQueue = voiceQueue.filter(queueFilter);
  }
}
function findNextInQueue(currentId, origin = _types__WEBPACK_IMPORTED_MODULE_1__.AudioOrigin.Inline, isReverseOrder) {
  const track = tracks.get(currentId);
  const queue = getTrackQueue(track);
  if (!queue) return undefined;
  if (origin === _types__WEBPACK_IMPORTED_MODULE_1__.AudioOrigin.Search) {
    const index = queue.indexOf(currentId);
    if (index < 0) return undefined;
    const direction = isReverseOrder ? -1 : 1;
    return queue[index + direction];
  }
  const {
    chatId
  } = (0,_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.parseMessageKey)(splitTrackId(currentId).messageKey);
  const chatAudio = queue.filter(id => id.startsWith(`msg${chatId}`));
  const index = chatAudio.indexOf(currentId);
  if (index < 0) return undefined;
  let direction = origin === _types__WEBPACK_IMPORTED_MODULE_1__.AudioOrigin.Inline ? -1 : 1;
  if (isReverseOrder) direction *= -1;
  return chatAudio[index + direction];
}
function makeTrackId(message) {
  const key = (0,_keys_messageKey__WEBPACK_IMPORTED_MODULE_4__.getMessageServerKey)(message);
  if (!key) {
    return undefined;
  }
  return `${key}-${message.date}`;
}
function splitTrackId(trackId) {
  const messageKey = trackId.match(/^msg(-?\d+)-(\d+)/)[0];
  const date = Number(trackId.split('-').pop());
  return {
    messageKey,
    date
  };
}

// Descending order by date
function trackIdComparator(one, two) {
  if (!one || !two) return 0;
  const {
    date: dateOne,
    messageKey: keyOne
  } = splitTrackId(one);
  const {
    date: dateTwo,
    messageKey: keyTwo
  } = splitTrackId(two);
  const diff = dateTwo - dateOne;
  return diff === 0 ? keyTwo.localeCompare(keyOne) : diff;
}

/***/ }),

/***/ "./src/util/cycleRestrict.ts":
/*!***********************************!*\
  !*** ./src/util/cycleRestrict.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cycleRestrict)
/* harmony export */ });
function cycleRestrict(length, index) {
  return index - Math.floor(index / length) * length;
}

/***/ }),

/***/ "./src/util/dates/workHours.ts":
/*!*************************************!*\
  !*** ./src/util/dates/workHours.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getUtcOffset: () => (/* binding */ getUtcOffset),
/* harmony export */   getWeekStart: () => (/* binding */ getWeekStart),
/* harmony export */   shiftTimeRanges: () => (/* binding */ shiftTimeRanges),
/* harmony export */   splitDays: () => (/* binding */ splitDays)
/* harmony export */ });
const DAY_MINUTES = 1440;
const WEEK_MINUTES = 10080;

/**
 * @returns Monday 00:00 of the current week for the local timezone
 */
function getWeekStart() {
  const now = new Date();
  now.setHours(0, 0, 0, 0);
  const day = now.getDay();
  const diff = now.getDate() - day + (day === 0 ? -6 : 1);
  return new Date(now.setDate(diff)).getTime();
}

/**
 * @returns UTC offset in seconds
 */
function getUtcOffset() {
  return new Date().getTimezoneOffset() * -60;
}
function shiftTimeRanges(ranges, shift) {
  if (shift === 0) return ranges;
  const shiftedRanges = [];
  for (const range of ranges) {
    let start = (range.startMinute + shift) % WEEK_MINUTES;
    let end = (range.endMinute + shift) % WEEK_MINUTES;
    if (start < 0) start += WEEK_MINUTES;
    if (end <= 0) end += WEEK_MINUTES;
    if (start > end) {
      shiftedRanges.push({
        startMinute: start,
        endMinute: WEEK_MINUTES - 1
      });
      shiftedRanges.push({
        startMinute: 0,
        endMinute: end
      });
    } else {
      shiftedRanges.push({
        startMinute: start,
        endMinute: end
      });
    }
  }
  shiftedRanges.sort((a, b) => a.startMinute - b.startMinute);

  // Combine overlapping ranges
  return shiftedRanges.reduce((acc, range) => {
    const last = acc[acc.length - 1];
    if (last && last.endMinute >= range.startMinute) {
      last.endMinute = Math.max(last.endMinute, range.endMinute);
    } else {
      acc.push(range);
    }
    return acc;
  }, []);
}
function splitDays(ranges) {
  const days = {};
  for (const range of ranges) {
    const start = range.startMinute;
    const end = range.endMinute;
    const dayStart = Math.floor(start / DAY_MINUTES);
    const dayEnd = Math.floor((end - 1) / DAY_MINUTES); // 00:00 is counted as same day

    for (let day = dayStart; day <= dayEnd; day++) {
      if (!days[day]) {
        days[day] = [];
      }
      days[day].push({
        startMinute: Math.max(0, start - day * DAY_MINUTES),
        endMinute: Math.min(DAY_MINUTES, end - day * DAY_MINUTES)
      });
    }
  }
  return days;
}

/***/ }),

/***/ "./src/util/deleteLastCharacterOutsideSelection.ts":
/*!*********************************************************!*\
  !*** ./src/util/deleteLastCharacterOutsideSelection.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ deleteLastCharacterOutsideSelection)
/* harmony export */ });
function deleteLastCharacterOutsideSelection(html) {
  const tempInput = document.createElement('div');
  tempInput.contentEditable = 'true';
  tempInput.style.position = 'absolute';
  tempInput.style.left = '-10000px';
  tempInput.style.top = '-10000px';
  tempInput.innerHTML = html;
  tempInput.className = 'allow-selection'; // Patch for Safari
  document.body.appendChild(tempInput);
  let element = tempInput.lastChild;
  if (element.lastChild) {
    // Selects the last and the deepest child of the element.
    while (element.lastChild) {
      element = element.lastChild;
    }
  }

  // Gets length of the element's content.
  const textLength = element.textContent.length;
  const range = document.createRange();
  const selection = window.getSelection();

  // Sets selection position to the end of the element.
  range.setStart(element, textLength);
  range.setEnd(element, textLength);
  selection.removeAllRanges();
  selection.addRange(range);
  document.execCommand('delete', false);
  const result = tempInput.innerHTML;
  document.body.removeChild(tempInput);
  return result;
}

/***/ }),

/***/ "./src/util/download.ts":
/*!******************************!*\
  !*** ./src/util/download.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ download)
/* harmony export */ });
/* harmony import */ var _schedulers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedulers */ "./src/util/schedulers.ts");

// Chrome prevents more than 10 downloads per second
const LIMIT_PER_BATCH = 10;
const BATCH_INTERVAL = 1000;
let pendingDownloads = [];
let planned = false;
function download(url, filename) {
  pendingDownloads.push({
    url,
    filename
  });
  if (!planned) {
    planned = true;
    setTimeout(async () => {
      await processQueue();
      planned = false;
    }, BATCH_INTERVAL);
  }
}
async function processQueue() {
  let count = 0;
  for (const pendingDownload of pendingDownloads) {
    downloadOne(pendingDownload);
    count++;
    if (count === LIMIT_PER_BATCH) {
      await (0,_schedulers__WEBPACK_IMPORTED_MODULE_0__.pause)(BATCH_INTERVAL);
      count = 0;
    }
  }
  pendingDownloads = [];
}
function downloadOne({
  url,
  filename
}) {
  const link = document.createElement('a');
  link.href = url;
  link.target = '_blank';
  link.rel = 'noopener noreferrer';
  link.download = filename;
  try {
    link.click();
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error(err); // Suppress redundant "Blob loading failed" error popup on IOS
  }
}

/***/ }),

/***/ "./src/util/focusEditableElement.ts":
/*!******************************************!*\
  !*** ./src/util/focusEditableElement.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ focusEditableElement)
/* harmony export */ });
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");

function focusEditableElement(element, force, forcePlaceCaretAtEnd) {
  if (!force && element === document.activeElement) {
    return;
  }
  const selection = window.getSelection();
  const range = document.createRange();
  const lastChild = element.lastChild || element;
  if (!_windowEnvironment__WEBPACK_IMPORTED_MODULE_0__.IS_TOUCH_ENV && !forcePlaceCaretAtEnd && (!lastChild || !lastChild.nodeValue)) {
    element.focus();
    return;
  }
  range.selectNodeContents(forcePlaceCaretAtEnd ? element : lastChild);
  // `false` means collapse to the end rather than the start
  range.collapse(false);
  selection.removeAllRanges();
  selection.addRange(range);
}

/***/ }),

/***/ "./src/util/formatTemperature.ts":
/*!***************************************!*\
  !*** ./src/util/formatTemperature.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatTemperature: () => (/* binding */ formatTemperature)
/* harmony export */ });
const formatTemperature = temperatureC => {
  const isFahrenheit = Boolean(navigator.language === 'en-US');
  return isFahrenheit ? `${Math.round(temperatureC * 9 / 5 + 32)}°F` : `${Math.round(temperatureC)}°C`;
};

/***/ }),

/***/ "./src/util/getMessageIdsForSelectedText.ts":
/*!**************************************************!*\
  !*** ./src/util/getMessageIdsForSelectedText.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getMessageIdsForSelectedText)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");

const ELEMENT_NODE = 1;
function getMessageIdsForSelectedText() {
  const selection = window.getSelection();
  let selectedFragments = selection?.rangeCount ? selection.getRangeAt(0).cloneContents() : undefined;
  const shouldIncludeLastMessage = selection?.focusNode && selection.focusOffset > 0 && hasParentWithClassName(selection.focusNode, _config__WEBPACK_IMPORTED_MODULE_0__.MESSAGE_CONTENT_CLASS_NAME);
  if (!selectedFragments || selectedFragments.childElementCount === 0) {
    return undefined;
  }
  const messageIds = Array.from(selectedFragments.children).reduce((result, node) => {
    if (node.nodeType === ELEMENT_NODE && node.classList.contains('message-date-group')) {
      return Array.from(node.querySelectorAll('.Message')).reduce((acc, messageEl) => acc.concat(Number(messageEl.dataset.messageId)), result);
    } else if (node.nodeType === ELEMENT_NODE && node.classList.contains('Message')) {
      return result.concat(Number(node.dataset.messageId));
    }
    return result;
  }, []);

  // Cleanup a document fragment because it is playing media content in the background
  while (selectedFragments.firstChild) {
    selectedFragments.removeChild(selectedFragments.firstChild);
  }
  selectedFragments = undefined;
  if (!shouldIncludeLastMessage) {
    messageIds.pop();
  }
  return messageIds;
}
function hasParentWithClassName(element, className) {
  if (element.nodeType === ELEMENT_NODE && element.classList.contains(className)) {
    return true;
  }
  return element.parentNode ? hasParentWithClassName(element.parentNode, className) : false;
}

/***/ }),

/***/ "./src/util/imageResize.ts":
/*!*********************************!*\
  !*** ./src/util/imageResize.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   resizeImage: () => (/* binding */ resizeImage),
/* harmony export */   scaleImage: () => (/* binding */ scaleImage)
/* harmony export */ });
/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colors */ "./src/util/colors.ts");

const LUMA_THRESHOLD = 240;
function scaleImage(image, ratio, outputType = 'image/png') {
  const url = image instanceof Blob ? URL.createObjectURL(image) : image;
  const img = new Image();
  return new Promise(resolve => {
    img.onload = () => {
      scale(img, img.width * ratio, img.height * ratio, outputType).then(blob => {
        if (!blob) throw new Error('Image resize failed!');
        return URL.createObjectURL(blob);
      }).then(resolve).finally(() => {
        if (image instanceof Blob) {
          URL.revokeObjectURL(url); // Revoke blob url that we created
        }
      });
    };
    img.src = url;
  });
}
function resizeImage(image, width, height, outputType = 'image/png') {
  const url = image instanceof Blob ? URL.createObjectURL(image) : image;
  const img = new Image();
  return new Promise(resolve => {
    img.onload = () => {
      scale(img, width, height, outputType).then(blob => {
        if (!blob) throw new Error('Image resize failed!');
        return URL.createObjectURL(blob);
      }).then(resolve).finally(() => {
        if (image instanceof Blob) {
          URL.revokeObjectURL(url); // Revoke blob url that we created
        }
      });
    };
    img.src = url;
  });
}
async function scale(img, width, height, outputType = 'image/png') {
  // Safari does not have built-in resize method with quality control
  if ('createImageBitmap' in window) {
    try {
      const bitmap = await window.createImageBitmap(img, {
        resizeWidth: width,
        resizeHeight: height,
        resizeQuality: 'high'
      });
      if (bitmap.height !== height || bitmap.width !== width) {
        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize
      }
      const averageColor = await (0,_colors__WEBPACK_IMPORTED_MODULE_0__.getAverageColor)(img.src);
      const fillColor = (0,_colors__WEBPACK_IMPORTED_MODULE_0__.getColorLuma)(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';
      return await new Promise(res => {
        const canvas = document.createElement('canvas');
        canvas.width = bitmap.width;
        canvas.height = bitmap.height;
        const ctx2D = canvas.getContext('2d');
        ctx2D.fillStyle = fillColor;
        ctx2D.fillRect(0, 0, canvas.width, canvas.height);
        const ctx = canvas.getContext('bitmaprenderer');
        if (ctx) {
          ctx.transferFromImageBitmap(bitmap);
        } else {
          ctx2D.drawImage(bitmap, 0, 0);
        }
        canvas.toBlob(res, outputType);
      });
    } catch (e) {
      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters
      return steppedScale(img, width, height, undefined, outputType);
    }
  } else {
    return steppedScale(img, width, height, undefined, outputType);
  }
}
async function steppedScale(img, width, height, step = 0.5, outputType = 'image/png') {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const oc = document.createElement('canvas');
  const octx = oc.getContext('2d');
  canvas.width = width;
  canvas.height = height;
  if (img.width * step > width) {
    // For performance avoid unnecessary drawing
    const mul = 1 / step;
    let cur = {
      width: Math.floor(img.width * step),
      height: Math.floor(img.height * step)
    };
    oc.width = cur.width;
    oc.height = cur.height;
    octx.drawImage(img, 0, 0, cur.width, cur.height);
    while (cur.width * step > width) {
      cur = {
        width: Math.floor(cur.width * step),
        height: Math.floor(cur.height * step)
      };
      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);
    }
    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);
  } else {
    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
  }
  const averageColor = await (0,_colors__WEBPACK_IMPORTED_MODULE_0__.getAverageColor)(img.src);
  const fillColor = (0,_colors__WEBPACK_IMPORTED_MODULE_0__.getColorLuma)(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';
  ctx.fillStyle = fillColor;
  ctx.globalCompositeOperation = 'destination-over';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  return new Promise(resolve => {
    canvas.toBlob(resolve, outputType);
  });
}

/***/ }),

/***/ "./src/util/launchMediaWorkers.ts":
/*!****************************************!*\
  !*** ./src/util/launchMediaWorkers.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MAX_WORKERS: () => (/* binding */ MAX_WORKERS),
/* harmony export */   "default": () => (/* binding */ launchMediaWorkers),
/* harmony export */   requestMediaWorker: () => (/* binding */ requestMediaWorker)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _PostMessageConnector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PostMessageConnector */ "./src/util/PostMessageConnector.ts");


const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);
let instances;
function launchMediaWorkers() {
  if (_config__WEBPACK_IMPORTED_MODULE_0__.IS_TEST) return [];
  if (!instances) {
    instances = new Array(MAX_WORKERS).fill(undefined).map(() => {
      const worker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u("src_lib_mediaWorker_index_worker_ts"), __webpack_require__.b));
      const connector = (0,_PostMessageConnector__WEBPACK_IMPORTED_MODULE_1__.createConnector)(worker, undefined, 'media');
      return {
        worker,
        connector
      };
    });
  }
  return instances;
}
function requestMediaWorker(payload, index) {
  return launchMediaWorkers()[index].connector.request(payload);
}

/***/ }),

/***/ "./src/util/map.ts":
/*!*************************!*\
  !*** ./src/util/map.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMetersPerPixel: () => (/* binding */ getMetersPerPixel),
/* harmony export */   getVenueColor: () => (/* binding */ getVenueColor),
/* harmony export */   getVenueIconUrl: () => (/* binding */ getVenueIconUrl),
/* harmony export */   prepareMapUrl: () => (/* binding */ prepareMapUrl)
/* harmony export */ });
const PROVIDERS = {
  google: 'https://maps.google.com/maps',
  bing: 'https://bing.com/maps/default.aspx',
  osm: 'https://www.openstreetmap.org',
  apple: 'https://maps.apple.com'
};

// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82
const VENUE_COLORS = new Map(Object.entries({
  'building/medical': '#43b3f4',
  'building/gym': '#43b3f4',
  'education/cafeteria': '#f7943f',
  'travel/bedandbreakfast': '#9987ff',
  'travel/hotel': '#9987ff',
  'travel/hostel': '#9987ff',
  'travel/resort': '#9987ff',
  'travel/hotel_bar': '#e56dd6',
  arts_entertainment: '#e56dd6',
  building: '#6e81b2',
  education: '#a57348',
  event: '#959595',
  food: '#f7943f',
  home: '#00aeef',
  nightlife: '#e56dd6',
  parks_outdoors: '#6cc039',
  shops: '#ffb300',
  travel: '#1c9fff',
  work: '#ad7854'
}));
const RANDOM_COLORS = ['#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21'];
function prepareMapUrl(provider, point, zoom = 15) {
  const {
    lat,
    long
  } = point;
  const providerUrl = PROVIDERS[provider];
  switch (provider) {
    case 'google':
      return `${providerUrl}/place/${lat}+${long}/@${lat},${long},${zoom}z`;
    case 'bing':
      return `${providerUrl}?cp=${lat}~${long}&lvl=${zoom}&sp=point.${lat}_${long}`;
    case 'apple':
      return `${providerUrl}?q=${lat},${long}`;
    case 'osm':
    default:
      return `${providerUrl}/?mlat=${lat}&mlon=${long}&zoom=${zoom}`;
  }
}
function getMetersPerPixel(lat, zoom) {
  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ
  return 156543.03392 * Math.cos(lat * (Math.PI / 180)) / 2 ** zoom;
}
function getVenueIconUrl(type) {
  if (!type) return '';
  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;
}

// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104
function getVenueColor(type) {
  if (!type) return '#008df2';
  return VENUE_COLORS.get(type) || VENUE_COLORS.get(type.split('/')[0]) || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];
}
function stringToNumber(str) {
  return str.split('').reduce((prevHash, currVal) =>
  // eslint-disable-next-line no-bitwise
  (prevHash << 5) - prevHash + currVal.charCodeAt(0) | 0, 0);
}

/***/ }),

/***/ "./src/util/mediaSession.ts":
/*!**********************************!*\
  !*** ./src/util/mediaSession.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildMediaMetadata: () => (/* binding */ buildMediaMetadata),
/* harmony export */   clearMediaSession: () => (/* binding */ clearMediaSession),
/* harmony export */   registerMediaSession: () => (/* binding */ registerMediaSession),
/* harmony export */   setMediaSessionHandlers: () => (/* binding */ setMediaSessionHandlers),
/* harmony export */   setPlaybackState: () => (/* binding */ setPlaybackState),
/* harmony export */   setPositionState: () => (/* binding */ setPositionState),
/* harmony export */   updateMetadata: () => (/* binding */ updateMetadata)
/* harmony export */ });
const DEFAULT_HANDLERS = {
  play: undefined,
  pause: undefined,
  seekbackward: undefined,
  seekforward: undefined,
  previoustrack: undefined,
  nexttrack: undefined,
  stop: undefined,
  seekTo: undefined
};
function registerMediaSession(metadata, handlers) {
  const {
    mediaSession
  } = window.navigator;
  if (mediaSession) {
    if (metadata) updateMetadata(metadata);
    if (handlers) setMediaSessionHandlers(handlers);
  } else {
    // eslint-disable-next-line no-console
    console.warn('MediaSession API not supported in this browser');
  }
}
function updateMetadata(metadata) {
  const {
    mediaSession
  } = window.navigator;
  if (mediaSession) {
    // eslint-disable-next-line no-null/no-null
    mediaSession.metadata = metadata ?? null;
  }
}
function setMediaSessionHandlers(handlers) {
  const {
    mediaSession
  } = window.navigator;
  if (mediaSession) {
    Object.entries({
      ...DEFAULT_HANDLERS,
      ...handlers
    }).forEach(([key, handler]) => {
      try {
        // @ts-ignore API not standardized yet
        mediaSession.setActionHandler(key, handler);
      } catch (err) {
        // Handler not supported, ignoring
      }
    });
  }
}
function clearMediaSession() {
  const {
    mediaSession
  } = window.navigator;
  if (mediaSession) {
    // eslint-disable-next-line no-null/no-null
    mediaSession.metadata = null;
    setMediaSessionHandlers(DEFAULT_HANDLERS);
    if (mediaSession.playbackState) mediaSession.playbackState = 'none';
    mediaSession.setPositionState?.();
  }
}
function setPlaybackState(state = 'none') {
  const {
    mediaSession
  } = window.navigator;
  if (mediaSession && mediaSession.playbackState) {
    mediaSession.playbackState = state;
  }
}
function setPositionState(state) {
  if (!state || state.position === undefined || state.duration === undefined) return;
  state.position = Math.min(state.position, state.duration);
  const {
    mediaSession
  } = window.navigator;
  mediaSession?.setPositionState?.(state);
}
function buildMediaMetadata({
  title,
  artist,
  album,
  artwork
}) {
  if ('MediaMetadata' in window) {
    return new window.MediaMetadata({
      title,
      artist,
      album,
      artwork
    });
  }
  return undefined;
}

/***/ }),

/***/ "./src/util/memoized.ts":
/*!******************************!*\
  !*** ./src/util/memoized.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ memoized)
/* harmony export */ });
/* harmony import */ var _iteratees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iteratees */ "./src/util/iteratees.ts");

const cache = new WeakMap();
function memoized(fn) {
  return (...args) => {
    const cached = cache.get(fn);
    if (cached && (0,_iteratees__WEBPACK_IMPORTED_MODULE_0__.areSortedArraysEqual)(cached.lastArgs, args)) {
      return cached.lastResult;
    }
    const result = fn(...args);
    cache.set(fn, {
      lastArgs: args,
      lastResult: result
    });
    return result;
  };
}

/***/ }),

/***/ "./src/util/parseHotkey.ts":
/*!*********************************!*\
  !*** ./src/util/parseHotkey.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getHotkeyMatcher: () => (/* binding */ getHotkeyMatcher),
/* harmony export */   parseHotkey: () => (/* binding */ parseHotkey)
/* harmony export */ });
// Original source from Mantine
// https://github.com/mantinedev/mantine/blob/master/src/mantine-hooks/src/use-hotkeys/parse-hotkey.ts

function parseHotkey(hotkey) {
  const keys = hotkey.toLowerCase().split('+').map(part => part.trim());
  const modifiers = {
    alt: keys.includes('alt'),
    ctrl: keys.includes('ctrl'),
    meta: keys.includes('meta'),
    mod: keys.includes('mod'),
    shift: keys.includes('shift')
  };
  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];
  const freeKey = keys.find(key => !reservedKeys.includes(key));
  return {
    ...modifiers,
    key: freeKey
  };
}
function isExactHotkey(hotkey, event) {
  const {
    alt,
    ctrl,
    meta,
    mod,
    shift,
    key
  } = hotkey;
  const {
    altKey,
    ctrlKey,
    metaKey,
    shiftKey,
    key: pressedKey
  } = event;
  if (alt !== altKey) {
    return false;
  }
  if (mod) {
    if (!ctrlKey && !metaKey) {
      return false;
    }
  } else {
    if (ctrl !== ctrlKey) {
      return false;
    }
    if (meta !== metaKey) {
      return false;
    }
  }
  if (shift !== shiftKey) {
    return false;
  }
  return Boolean(key && (pressedKey.toLowerCase() === key.toLowerCase() || event.code.replace('Key', '').toLowerCase() === key.toLowerCase()));
}
function getHotkeyMatcher(hotkey) {
  return event => isExactHotkey(parseHotkey(hotkey), event);
}

/***/ }),

/***/ "./src/util/parseHtmlAsFormattedText.ts":
/*!**********************************************!*\
  !*** ./src/util/parseHtmlAsFormattedText.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ENTITY_CLASS_BY_NODE_NAME: () => (/* binding */ ENTITY_CLASS_BY_NODE_NAME),
/* harmony export */   "default": () => (/* binding */ parseHtmlAsFormattedText),
/* harmony export */   fixImageContent: () => (/* binding */ fixImageContent),
/* harmony export */   parseMarkdown: () => (/* binding */ parseMarkdown)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser */ "./src/util/parser.ts");
/* harmony import */ var _windowEnvironment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./windowEnvironment */ "./src/util/windowEnvironment.ts");




// todo AST
const ENTITY_CLASS_BY_NODE_NAME = {
  B: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Bold,
  STRONG: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Bold,
  I: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Italic,
  EM: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Italic,
  INS: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Underline,
  U: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Underline,
  S: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Strike,
  STRIKE: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Strike,
  DEL: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Strike,
  CODE: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Code,
  PRE: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Pre,
  BLOCKQUOTE: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Blockquote
};
const MAX_TAG_DEEPNESS = 3;
function parseHtmlAsFormattedText(html, withMarkdownLinks = false, skipMarkdown = false) {
  const fragment = document.createElement('div');
  fragment.innerHTML = skipMarkdown ? html : withMarkdownLinks ? parseMarkdown(parseMarkdownLinks(html)) : parseMarkdown(html);
  fixImageContent(fragment);
  const text = fragment.innerText.trim().replace(/\u200b+/g, '');
  const trimShift = fragment.innerText.indexOf(text[0]);
  let textIndex = -trimShift;
  let recursionDeepness = 0;
  const entities = [];
  function addEntity(node) {
    if (node.nodeType === Node.COMMENT_NODE) return;
    const {
      index,
      entity
    } = getEntityDataFromNode(node, text, textIndex);
    if (entity) {
      textIndex = index;
      entities.push(entity);
    } else if (node.textContent) {
      // Skip newlines on the beginning
      if (index === 0 && node.textContent.trim() === '') {
        return;
      }
      textIndex += node.textContent.length;
    }
    if (node.hasChildNodes() && recursionDeepness <= MAX_TAG_DEEPNESS) {
      recursionDeepness += 1;
      Array.from(node.childNodes).forEach(addEntity);
    }
  }
  Array.from(fragment.childNodes).forEach(node => {
    recursionDeepness = 1;
    addEntity(node);
  });
  return {
    text,
    entities: entities.length ? entities : undefined
  };
}
function fixImageContent(fragment) {
  fragment.querySelectorAll('img').forEach(node => {
    if (node.dataset.documentId) {
      // Custom Emoji
      node.textContent = node.alt || '';
    } else {
      // Regular emoji with image fallback
      node.replaceWith(node.alt || '');
    }
  });
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function parseMarkdown1(html) {
  let parsedHtml = html.slice(0);

  // Strip redundant nbsp's
  parsedHtml = parsedHtml.replace(/&nbsp;/g, ' ');

  // Replace <div><br></div> with newline (new line in Safari)
  parsedHtml = parsedHtml.replace(/<div><br([^>]*)?><\/div>/g, '\n');
  // Replace <br> with newline
  parsedHtml = parsedHtml.replace(/<br([^>]*)?>/g, '\n');

  // Strip redundant <div> tags
  parsedHtml = parsedHtml.replace(/<\/div>(\s*)<div>/g, '\n');
  parsedHtml = parsedHtml.replace(/<div>/g, '\n');
  parsedHtml = parsedHtml.replace(/<\/div>/g, '');

  // Pre
  parsedHtml = parsedHtml.replace(/^`{3}(.*?)[\n\r](.*?[\n\r]?)`{3}/gms, '<pre data-language="$1">$2</pre>');
  parsedHtml = parsedHtml.replace(/^`{3}[\n\r]?(.*?)[\n\r]?`{3}/gms, '<pre>$1</pre>');
  parsedHtml = parsedHtml.replace(/[`]{3}([^`]+)[`]{3}/g, '<pre>$1</pre>');

  // Code
  parsedHtml = parsedHtml.replace(/(?!<(code|pre)[^<]*|<\/)[`]{1}([^`\n]+)[`]{1}(?![^<]*<\/(code|pre)>)/g, '<code>$2</code>');

  // Custom Emoji markdown tag
  if (!_windowEnvironment__WEBPACK_IMPORTED_MODULE_3__.IS_EMOJI_SUPPORTED) {
    // Prepare alt text for custom emoji
    parsedHtml = parsedHtml.replace(/\[<img[^>]+alt="([^"]+)"[^>]*>]/gm, '[$1]');
  }
  parsedHtml = parsedHtml.replace(/(?!<(?:code|pre)[^<]*|<\/)\[([^\]\n]+)\]\(customEmoji:(\d+)\)(?![^<]*<\/(?:code|pre)>)/g, '<img alt="$1" data-document-id="$2">');

  // Other simple markdown
  parsedHtml = parsedHtml.replace(/(?!<(code|pre)[^<]*|<\/)[*]{2}([^*\n]+)[*]{2}(?![^<]*<\/(code|pre)>)/g, '<b>$2</b>');
  parsedHtml = parsedHtml.replace(/(?!<(code|pre)[^<]*|<\/)[_]{2}([^_\n]+)[_]{2}(?![^<]*<\/(code|pre)>)/g, '<i>$2</i>');
  parsedHtml = parsedHtml.replace(/(?!<(code|pre)[^<]*|<\/)[~]{2}([^~\n]+)[~]{2}(?![^<]*<\/(code|pre)>)/g, '<s>$2</s>');
  parsedHtml = parsedHtml.replace(/(?!<(code|pre)[^<]*|<\/)[|]{2}([^|\n]+)[|]{2}(?![^<]*<\/(code|pre)>)/g, `<span data-entity-type="${_api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Spoiler}">$2</span>`);
  return parsedHtml;
}
function parseMarkdown(html) {
  const tokens = (0,_parser__WEBPACK_IMPORTED_MODULE_2__.tokenize)(html);
  const ast = (0,_parser__WEBPACK_IMPORTED_MODULE_2__.parse)(tokens);
  return (0,_parser__WEBPACK_IMPORTED_MODULE_2__.generateHTML)(ast);
}
function parseMarkdownLinks(html) {
  return html.replace(new RegExp(`\\[([^\\]]+?)]\\((${_config__WEBPACK_IMPORTED_MODULE_1__.RE_LINK_TEMPLATE}+?)\\)`, 'g'), (_, text, link) => {
    const url = link.includes('://') ? link : link.includes('@') ? `mailto:${link}` : `https://${link}`;
    return `<a href="${url}">${text}</a>`;
  });
}
function getEntityDataFromNode(node, rawText, textIndex) {
  const type = getEntityTypeFromNode(node);
  if (!type || !node.textContent) {
    return {
      index: textIndex,
      entity: undefined
    };
  }
  const rawIndex = rawText.indexOf(node.textContent, textIndex);
  // In some cases, last text entity ends with a newline (which gets trimmed from `rawText`).
  // In this case, `rawIndex` would return `-1`, so we use `textIndex` instead.
  const index = rawIndex >= 0 ? rawIndex : textIndex;
  const offset = rawText.substring(0, index).length;
  const {
    length
  } = rawText.substring(index, index + node.textContent.length);
  if (type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.TextUrl) {
    return {
      index,
      entity: {
        type,
        offset,
        length,
        url: node.href
      }
    };
  }
  if (type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.MentionName) {
    return {
      index,
      entity: {
        type,
        offset,
        length,
        userId: node.dataset.userId
      }
    };
  }
  if (type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Pre) {
    return {
      index,
      entity: {
        type,
        offset,
        length,
        language: node.dataset.language
      }
    };
  }
  if (type === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji) {
    return {
      index,
      entity: {
        type,
        offset,
        length,
        documentId: node.dataset.documentId
      }
    };
  }
  return {
    index,
    entity: {
      type,
      offset,
      length
    }
  };
}
function getEntityTypeFromNode(node) {
  if (node instanceof HTMLElement && node.dataset.entityType) {
    return node.dataset.entityType;
  }
  if (ENTITY_CLASS_BY_NODE_NAME[node.nodeName]) {
    return ENTITY_CLASS_BY_NODE_NAME[node.nodeName];
  }
  if (node.nodeName === 'A') {
    const anchor = node;
    if (anchor.dataset.entityType === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.MentionName) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.MentionName;
    }
    if (anchor.dataset.entityType === _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Url) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Url;
    }
    if (anchor.href.startsWith('mailto:')) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Email;
    }
    if (anchor.href.startsWith('tel:')) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Phone;
    }
    if (anchor.href !== anchor.textContent) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.TextUrl;
    }
    return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.Url;
  }
  if (node.nodeName === 'SPAN') {
    return node.dataset.entityType;
  }
  if (node.nodeName === 'IMG') {
    if (node.dataset.documentId) {
      return _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMessageEntityTypes.CustomEmoji;
    }
  }
  return undefined;
}

/***/ }),

/***/ "./src/util/parser.ts":
/*!****************************!*\
  !*** ./src/util/parser.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ASTNodeType: () => (/* binding */ ASTNodeType),
/* harmony export */   TokenType: () => (/* binding */ TokenType),
/* harmony export */   findMatchingDelimiter: () => (/* binding */ findMatchingDelimiter),
/* harmony export */   generateHTML: () => (/* binding */ generateHTML),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   tokenize: () => (/* binding */ tokenize)
/* harmony export */ });
let TokenType = /*#__PURE__*/function (TokenType) {
  TokenType[TokenType["TEXT"] = 0] = "TEXT";
  TokenType[TokenType["NEWLINE"] = 1] = "NEWLINE";
  TokenType[TokenType["EOF"] = 2] = "EOF";
  TokenType[TokenType["CODE_FENCE"] = 3] = "CODE_FENCE";
  TokenType[TokenType["LANGUAGE_SPECIFIER"] = 4] = "LANGUAGE_SPECIFIER";
  TokenType[TokenType["CODE_CONTENT"] = 5] = "CODE_CONTENT";
  TokenType[TokenType["BOLD_MARKER"] = 6] = "BOLD_MARKER";
  TokenType[TokenType["ITALIC_MARKER"] = 7] = "ITALIC_MARKER";
  TokenType[TokenType["STRIKE_MARKER"] = 8] = "STRIKE_MARKER";
  TokenType[TokenType["SPOILER_MARKER"] = 9] = "SPOILER_MARKER";
  TokenType[TokenType["INLINE_CODE_MARKER"] = 10] = "INLINE_CODE_MARKER";
  TokenType[TokenType["LBRACKET"] = 11] = "LBRACKET";
  TokenType[TokenType["RBRACKET"] = 12] = "RBRACKET";
  TokenType[TokenType["LPAREN"] = 13] = "LPAREN";
  TokenType[TokenType["RPAREN"] = 14] = "RPAREN";
  TokenType[TokenType["EMOJI_TEXT"] = 15] = "EMOJI_TEXT";
  TokenType[TokenType["CUSTOM_EMOJI_PREFIX"] = 16] = "CUSTOM_EMOJI_PREFIX";
  TokenType[TokenType["NUMBER"] = 17] = "NUMBER";
  TokenType[TokenType["LINK_TEXT"] = 18] = "LINK_TEXT";
  TokenType[TokenType["LINK_URL"] = 19] = "LINK_URL";
  return TokenType;
}({}); // URL inside the parentheses of a link
const markers = ['**', '```', '__', '||', '~~', '`', '['];
// eslint-disable-next-line @typescript-eslint/no-shadow
function startsWithAny(input, pos, markers) {
  for (const marker of markers) {
    if (input.startsWith(marker, pos)) {
      return true;
    }
  }
  return false;
}
function tokenize(input) {
  const tokens = [];
  let pos = 0;
  while (pos < input.length) {
    const char = input[pos];

    // Code fence (```), which may include a language specifier and content.
    if (input.startsWith('```', pos)) {
      const endPos = findMatchingDelimiter(input, '```', pos + 3);
      if (endPos !== -1) {
        // Opening fence
        tokens.push({
          type: TokenType.CODE_FENCE,
          value: '```'
        });
        pos += 3;

        // Optional language specifier until newline
        const langStart = pos;
        while (pos < input.length && input[pos] !== '\n' && input[pos] !== '\r') {
          pos++;
        }
        if (pos > langStart) {
          tokens.push({
            type: TokenType.LANGUAGE_SPECIFIER,
            value: input.substring(langStart, pos)
          });
        }
        // Consume newline if present
        if (pos < input.length && (input[pos] === '\n' || input[pos] === '\r')) {
          tokens.push({
            type: TokenType.NEWLINE,
            value: input[pos]
          });
          pos++;
        }

        // Code content until the closing fence
        // eslint-disable-next-line no-mixed-operators
        if (pos < endPos && input[endPos - 1] === '\n' || input[endPos - 1] === '\r') {
          tokens.push({
            type: TokenType.CODE_CONTENT,
            value: input.substring(pos, endPos - 1)
          });
          tokens.push({
            type: TokenType.NEWLINE,
            value: input[endPos - 1]
          });
        } else if (pos < endPos) {
          tokens.push({
            type: TokenType.CODE_CONTENT,
            value: input.substring(pos, endPos)
          });
        }
        // Closing fence
        tokens.push({
          type: TokenType.CODE_FENCE,
          value: '```'
        });
        pos = endPos + 3;
      } else {
        tokens.push({
          type: TokenType.TEXT,
          value: '```'
        });
        pos += 3;
      }
    } else if (input.startsWith('**', pos)) {
      // Bold marker (**)
      const endPos = findMatchingDelimiter(input, '**', pos + 2);
      if (endPos !== -1) {
        tokens.push({
          type: TokenType.BOLD_MARKER,
          value: '**'
        });
        const innerTokens = tokenize(input.substring(pos + 2, endPos));
        innerTokens.pop(); // Removes the EOF token.
        tokens.push(...innerTokens);
        tokens.push({
          type: TokenType.BOLD_MARKER,
          value: '**'
        });
        pos = endPos + 2;
      } else {
        tokens.push({
          type: TokenType.TEXT,
          value: '**'
        });
        pos += 2;
      }
    } else if (input.startsWith('__', pos)) {
      // Italic marker (__)
      const endPos = findMatchingDelimiter(input, '__', pos + 2);
      if (endPos !== -1) {
        tokens.push({
          type: TokenType.ITALIC_MARKER,
          value: '__'
        });
        const innerTokens = tokenize(input.substring(pos + 2, endPos));
        innerTokens.pop(); // Removes the EOF token.
        tokens.push(...innerTokens);
        tokens.push({
          type: TokenType.ITALIC_MARKER,
          value: '__'
        });
        pos = endPos + 2;
      } else {
        tokens.push({
          type: TokenType.TEXT,
          value: '__'
        });
        pos += 2;
      }
    } else if (input.startsWith('~~', pos)) {
      // Strike marker (~~)
      const endPos = findMatchingDelimiter(input, '~~', pos + 2);
      if (endPos !== -1) {
        tokens.push({
          type: TokenType.STRIKE_MARKER,
          value: '~~'
        });
        const innerTokens = tokenize(input.substring(pos + 2, endPos));
        innerTokens.pop(); // Removes the EOF token.
        tokens.push(...innerTokens);
        tokens.push({
          type: TokenType.STRIKE_MARKER,
          value: '~~'
        });
        pos = endPos + 2;
      } else {
        tokens.push({
          type: TokenType.TEXT,
          value: '~~'
        });
        pos += 2;
      }
    } else if (input.startsWith('||', pos)) {
      // Spoiler marker (||)
      const endPos = findMatchingDelimiter(input, '||', pos + 2);
      if (endPos !== -1) {
        tokens.push({
          type: TokenType.SPOILER_MARKER,
          value: '||'
        });
        const innerTokens = tokenize(input.substring(pos + 2, endPos));
        innerTokens.pop(); // Removes the EOF token.
        tokens.push(...innerTokens);
        tokens.push({
          type: TokenType.SPOILER_MARKER,
          value: '||'
        });
        pos = endPos + 2;
      } else {
        tokens.push({
          type: TokenType.TEXT,
          value: '||'
        });
        pos += 2;
      }
    } else if (input.startsWith('`', pos)) {
      // Inline code marker (`)
      const endPos = findMatchingDelimiter(input, '`', pos + 1);
      if (endPos !== -1) {
        tokens.push({
          type: TokenType.INLINE_CODE_MARKER,
          value: '`'
        });
        const innerTokens = tokenize(input.substring(pos + 1, endPos));
        innerTokens.pop(); // Removes the EOF token.
        tokens.push(...innerTokens);
        tokens.push({
          type: TokenType.INLINE_CODE_MARKER,
          value: '`'
        });
        pos = endPos + 1;
      } else {
        tokens.push({
          type: TokenType.TEXT,
          value: '`'
        });
        pos += 1;
      }
    } else if (input.startsWith('[', pos)) {
      // Link markers ([...])
      // Find the closing bracket for the text inside the square brackets.
      const closingBracket = findMatchingDelimiter(input, ']', pos + 1);
      // Check that there is an opening parenthesis immediately after.
      if (closingBracket !== -1 && input[closingBracket + 1] === '(') {
        const openParen = closingBracket + 1;
        const closingParen = findMatchingDelimiter(input, ')', openParen + 1);
        if (closingParen !== -1) {
          // Extract the text inside the brackets and the parentheses.
          const innerText = input.substring(pos + 1, closingBracket);
          const innerParen = input.substring(openParen + 1, closingParen);

          // Check if the parenthesis content indicates an emoji.
          if (innerParen.startsWith('customEmoji:')) {
            // Tokenize as an emoji.
            tokens.push({
              type: TokenType.LBRACKET,
              value: '['
            });
            tokens.push({
              type: TokenType.EMOJI_TEXT,
              value: innerText
            });
            tokens.push({
              type: TokenType.RBRACKET,
              value: ']'
            });
            tokens.push({
              type: TokenType.LPAREN,
              value: '('
            });
            tokens.push({
              type: TokenType.CUSTOM_EMOJI_PREFIX,
              value: 'customEmoji:'
            });
            // Get the emoji id (digits following "customEmoji:")
            const emojiId = innerParen.substring('customEmoji:'.length);
            tokens.push({
              type: TokenType.NUMBER,
              value: emojiId
            });
            tokens.push({
              type: TokenType.RPAREN,
              value: ')'
            });
          } else {
            // Otherwise, tokenize as a link.
            tokens.push({
              type: TokenType.LBRACKET,
              value: '['
            });
            tokens.push({
              type: TokenType.LINK_TEXT,
              value: innerText
            });
            tokens.push({
              type: TokenType.RBRACKET,
              value: ']'
            });
            tokens.push({
              type: TokenType.LPAREN,
              value: '('
            });
            tokens.push({
              type: TokenType.LINK_URL,
              value: innerParen
            });
            tokens.push({
              type: TokenType.RPAREN,
              value: ')'
            });
          }
          // Update the position to the character after the closing parenthesis.
          pos = closingParen + 1;
        } else {
          tokens.push({
            type: TokenType.TEXT,
            value: '['
          });
          pos += 1;
        }
      } else {
        tokens.push({
          type: TokenType.TEXT,
          value: '['
        });
        pos += 1;
      }
      // eslint-disable-next-line @typescript-eslint/brace-style
    }
    // Newline
    else if (char === '\n') {
      tokens.push({
        type: TokenType.NEWLINE,
        value: '\n'
      });
      pos++;
      // eslint-disable-next-line @typescript-eslint/brace-style
    }
    // Regular text (until the next newline)
    else {
      let text = '';
      while (pos < input.length && input[pos] !== '\n' && !startsWithAny(input, pos, markers)) {
        text += input[pos++];
      }
      if (text) {
        if (tokens[tokens.length - 1] && tokens[tokens.length - 1].type === TokenType.TEXT) {
          const lastToken = tokens.pop();
          // eslint-disable-next-line no-unsafe-optional-chaining
          tokens.push({
            type: TokenType.TEXT,
            value: lastToken?.value + text
          });
        } else {
          tokens.push({
            type: TokenType.TEXT,
            value: text
          });
        }
      }
    }
  }
  tokens.push({
    type: TokenType.EOF,
    value: ''
  });
  return tokens;
}
function findMatchingDelimiter(input, delimiter, startIndex) {
  return input.indexOf(delimiter, startIndex);
}
let ASTNodeType = /*#__PURE__*/function (ASTNodeType) {
  ASTNodeType[ASTNodeType["document"] = 0] = "document";
  ASTNodeType[ASTNodeType["block"] = 1] = "block";
  ASTNodeType[ASTNodeType["code_block"] = 2] = "code_block";
  ASTNodeType[ASTNodeType["paragraph"] = 3] = "paragraph";
  ASTNodeType[ASTNodeType["language_specifier"] = 4] = "language_specifier";
  ASTNodeType[ASTNodeType["code_content"] = 5] = "code_content";
  ASTNodeType[ASTNodeType["newline"] = 6] = "newline";
  ASTNodeType[ASTNodeType["any_character"] = 7] = "any_character";
  ASTNodeType[ASTNodeType["inline"] = 8] = "inline";
  ASTNodeType[ASTNodeType["bold"] = 9] = "bold";
  ASTNodeType[ASTNodeType["italic"] = 10] = "italic";
  ASTNodeType[ASTNodeType["strike"] = 11] = "strike";
  ASTNodeType[ASTNodeType["spoiler"] = 12] = "spoiler";
  ASTNodeType[ASTNodeType["inline_code"] = 13] = "inline_code";
  ASTNodeType[ASTNodeType["emoji"] = 14] = "emoji";
  ASTNodeType[ASTNodeType["link"] = 15] = "link";
  ASTNodeType[ASTNodeType["plain_text"] = 16] = "plain_text";
  return ASTNodeType;
}({});
function parse(tokens) {
  let pos = 0;

  // Helper functions for token management
  function peek(offset = 0) {
    return tokens[pos + offset];
  }
  function nextToken() {
    if (pos >= tokens.length) {
      throw new Error("Unexpected end of input");
    }
    return tokens[pos++];
  }
  function match(tokenType) {
    return peek()?.type === tokenType;
  }
  function expect(tokenType) {
    if (match(tokenType)) {
      return nextToken();
    }
    throw new Error(`Expected token of type ${tokenType} but got ${peek()?.type}`);
  }

  // document → block* EOF
  function document() {
    const children = [];
    while (peek() && peek().type !== TokenType.EOF) {
      children.push(block());
    }

    // Consume EOF token if present
    if (peek()?.type === TokenType.EOF) {
      nextToken();
    }
    return {
      type: ASTNodeType.document,
      children
    };
  }

  // block → code_block | paragraph
  function block() {
    if (match(TokenType.CODE_FENCE)) {
      return codeBlock();
    } else {
      return paragraph();
    }
  }

  // code_block → CODE_FENCE [language_specifier] [newline] code_content [newline] CODE_FENCE
  function codeBlock() {
    const children = [];

    // Opening code fence
    const openFence = expect(TokenType.CODE_FENCE);
    children.push({
      type: openFence.type,
      value: openFence.value,
      children: []
    });

    // Optional language specifier
    if (match(TokenType.LANGUAGE_SPECIFIER)) {
      const langSpec = nextToken();
      children.push({
        type: ASTNodeType.language_specifier,
        value: langSpec.value,
        children: []
      });
    }

    // Optional newline
    if (match(TokenType.NEWLINE)) {
      const newline = nextToken();
      children.push({
        type: newline.type,
        value: newline.value,
        children: []
      });
    }

    // Code content until closing fence
    while (peek() && peek().type !== TokenType.CODE_FENCE) {
      const content = nextToken();
      children.push({
        type: ASTNodeType.code_content,
        value: content.value,
        children: []
      });
    }

    // Optional newline before closing fence
    if (match(TokenType.NEWLINE)) {
      const newline = nextToken();
      children.push({
        type: newline.type,
        value: newline.value,
        children: []
      });
    }

    // Closing code fence
    if (!match(TokenType.CODE_FENCE)) {
      throw new Error("Unclosed code fence");
    }
    const closeFence = nextToken();
    children.push({
      type: closeFence.type,
      value: closeFence.value,
      children: []
    });
    return {
      type: ASTNodeType.code_block,
      children
    };
  }

  // paragraph → inline+
  function paragraph() {
    const children = [];

    // Parse one or more inline elements
    do {
      children.push(inline());
    } while (peek() && peek().type !== TokenType.CODE_FENCE && peek().type !== TokenType.EOF);
    return {
      type: ASTNodeType.paragraph,
      children
    };
  }

  // inline → bold | italic | strike | spoiler | inline_code | link | emoji | plain_text
  function inline() {
    if (!peek()) {
      throw new Error("Unexpected end of input in inline content");
    }
    switch (peek().type) {
      case TokenType.BOLD_MARKER:
        return bold();
      case TokenType.ITALIC_MARKER:
        return italic();
      case TokenType.STRIKE_MARKER:
        return strike();
      case TokenType.SPOILER_MARKER:
        return spoiler();
      case TokenType.INLINE_CODE_MARKER:
        return inlineCode();
      case TokenType.LBRACKET:
        // Additional lookahead to determine link or emoji
        if (peek(1)?.type === TokenType.EMOJI_TEXT) {
          return emoji();
        } else {
          return link();
        }
      default:
        return plainText();
    }
  }

  // bold → BOLD_MARKER inline+ BOLD_MARKER
  function bold() {
    const children = [];

    // Consume opening marker
    const openMarker = expect(TokenType.BOLD_MARKER);
    children.push({
      type: openMarker.type,
      value: openMarker.value,
      children: []
    });

    // Parse inline content until closing marker
    while (peek() && peek().type !== TokenType.BOLD_MARKER) {
      children.push(inline());
    }

    // Consume closing marker
    if (!match(TokenType.BOLD_MARKER)) {
      throw new Error("Unclosed bold marker");
    }
    const closeMarker = nextToken();
    children.push({
      type: closeMarker.type,
      value: closeMarker.value,
      children: []
    });
    return {
      type: ASTNodeType.bold,
      children
    };
  }

  // italic → ITALIC_MARKER inline+ ITALIC_MARKER
  function italic() {
    const children = [];

    // Consume opening marker
    const openMarker = expect(TokenType.ITALIC_MARKER);
    children.push({
      type: openMarker.type,
      value: openMarker.value,
      children: []
    });

    // Parse inline content until closing marker
    while (peek() && peek().type !== TokenType.ITALIC_MARKER) {
      children.push(inline());
    }

    // Consume closing marker
    if (!match(TokenType.ITALIC_MARKER)) {
      throw new Error("Unclosed italic marker");
    }
    const closeMarker = nextToken();
    children.push({
      type: closeMarker.type,
      value: closeMarker.value,
      children: []
    });
    return {
      type: ASTNodeType.italic,
      children
    };
  }

  // strike → STRIKE_MARKER inline+ STRIKE_MARKER
  function strike() {
    const children = [];

    // Consume opening marker
    const openMarker = expect(TokenType.STRIKE_MARKER);
    children.push({
      type: openMarker.type,
      value: openMarker.value,
      children: []
    });

    // Parse inline content until closing marker
    while (peek() && peek().type !== TokenType.STRIKE_MARKER) {
      children.push(inline());
    }

    // Consume closing marker
    if (!match(TokenType.STRIKE_MARKER)) {
      throw new Error("Unclosed strike marker");
    }
    const closeMarker = nextToken();
    children.push({
      type: closeMarker.type,
      value: closeMarker.value,
      children: []
    });
    return {
      type: ASTNodeType.strike,
      children
    };
  }

  // spoiler → SPOILER_MARKER inline+ SPOILER_MARKER
  function spoiler() {
    const children = [];

    // Consume opening marker
    const openMarker = expect(TokenType.SPOILER_MARKER);
    children.push({
      type: openMarker.type,
      value: openMarker.value,
      children: []
    });

    // Parse inline content until closing marker
    while (peek() && peek().type !== TokenType.SPOILER_MARKER) {
      children.push(inline());
    }

    // Consume closing marker
    if (!match(TokenType.SPOILER_MARKER)) {
      throw new Error("Unclosed spoiler marker");
    }
    const closeMarker = nextToken();
    children.push({
      type: closeMarker.type,
      value: closeMarker.value,
      children: []
    });
    return {
      type: ASTNodeType.spoiler,
      children
    };
  }

  // inline_code → INLINE_CODE_MARKER plain_text INLINE_CODE_MARKER
  function inlineCode() {
    const children = [];

    // Consume opening marker
    const openMarker = expect(TokenType.INLINE_CODE_MARKER);
    children.push({
      type: openMarker.type,
      value: openMarker.value,
      children: []
    });

    // Parse plain text until closing marker
    while (peek() && peek().type !== TokenType.INLINE_CODE_MARKER) {
      // For inline code, content is treated as plain text
      const contentToken = nextToken();
      children.push({
        type: ASTNodeType.plain_text,
        value: contentToken.value,
        children: []
      });
    }

    // Consume closing marker
    if (!match(TokenType.INLINE_CODE_MARKER)) {
      throw new Error("Unclosed inline code marker");
    }
    const closeMarker = nextToken();
    children.push({
      type: closeMarker.type,
      value: closeMarker.value,
      children: []
    });
    return {
      type: ASTNodeType.inline_code,
      children
    };
  }

  // link → LBRACKET link_text RBRACKET LPAREN link_url RPAREN
  function link() {
    const children = [];

    // Consume LBRACKET
    const lbracket = expect(TokenType.LBRACKET);
    children.push({
      type: lbracket.type,
      value: lbracket.value,
      children: []
    });

    // Parse link text until RBRACKET
    while (peek() && peek().type !== TokenType.RBRACKET) {
      children.push(plainText());
    }

    // Consume RBRACKET
    if (!match(TokenType.RBRACKET)) {
      throw new Error("Unclosed link: missing RBRACKET");
    }
    const rbracket = nextToken();
    children.push({
      type: rbracket.type,
      value: rbracket.value,
      children: []
    });

    // Consume LPAREN
    if (!match(TokenType.LPAREN)) {
      throw new Error("Invalid link: missing LPAREN");
    }
    const lparen = nextToken();
    children.push({
      type: lparen.type,
      value: lparen.value,
      children: []
    });

    // Parse link URL until RPAREN
    while (peek() && peek().type !== TokenType.RPAREN) {
      children.push(plainText());
    }

    // Consume RPAREN
    if (!match(TokenType.RPAREN)) {
      throw new Error("Unclosed link: missing RPAREN");
    }
    const rparen = nextToken();
    children.push({
      type: rparen.type,
      value: rparen.value,
      children: []
    });
    return {
      type: ASTNodeType.link,
      children
    };
  }

  // emoji → LBRACKET EMOJI_TEXT RBRACKET LPAREN CUSTOM_EMOJI_PREFIX NUMBER RPAREN
  function emoji() {
    const children = [];

    // Consume LBRACKET
    const lbracket = expect(TokenType.LBRACKET);
    children.push({
      type: lbracket.type,
      value: lbracket.value,
      children: []
    });

    // Consume EMOJI_TEXT
    if (!match(TokenType.EMOJI_TEXT)) {
      throw new Error("Invalid emoji: expected EMOJI_TEXT");
    }
    const emojiText = nextToken();
    children.push({
      type: emojiText.type,
      value: emojiText.value,
      children: []
    });

    // Consume RBRACKET
    if (!match(TokenType.RBRACKET)) {
      throw new Error("Invalid emoji: missing RBRACKET");
    }
    const rbracket = nextToken();
    children.push({
      type: rbracket.type,
      value: rbracket.value,
      children: []
    });

    // Consume LPAREN
    if (!match(TokenType.LPAREN)) {
      throw new Error("Invalid emoji: missing LPAREN");
    }
    const lparen = nextToken();
    children.push({
      type: lparen.type,
      value: lparen.value,
      children: []
    });

    // Consume CUSTOM_EMOJI_PREFIX
    if (!match(TokenType.CUSTOM_EMOJI_PREFIX)) {
      throw new Error("Invalid emoji: missing CUSTOM_EMOJI_PREFIX");
    }
    const prefix = nextToken();
    children.push({
      type: prefix.type,
      value: prefix.value,
      children: []
    });

    // Consume NUMBER
    if (!match(TokenType.NUMBER)) {
      throw new Error("Invalid emoji: missing NUMBER");
    }
    const number = nextToken();
    children.push({
      type: number.type,
      value: number.value,
      children: []
    });

    // Consume RPAREN
    if (!match(TokenType.RPAREN)) {
      throw new Error("Invalid emoji: missing RPAREN");
    }
    const rparen = nextToken();
    children.push({
      type: rparen.type,
      value: rparen.value,
      children: []
    });
    return {
      type: ASTNodeType.emoji,
      children
    };
  }

  // plain_text → TEXT
  function plainText() {
    const token = nextToken();
    return {
      type: ASTNodeType.plain_text,
      value: token.value,
      children: []
    };
  }

  // Start parsing from the document rule
  return document();
}
function generateHTML(ast) {
  // Helper function to check if a node generates empty content
  function isEmptyContent(node) {
    if (!node.children || node.children.length === 0) {
      return !node.value || node.value.trim() === '';
    }

    // Check if all children generate empty content
    return node.children.every(isEmptyContent);
  }

  // Skip empty nodes for certain types
  if ((ast.type === ASTNodeType.paragraph || ast.type === ASTNodeType.bold || ast.type === ASTNodeType.italic || ast.type === ASTNodeType.strike || ast.type === ASTNodeType.spoiler) && isEmptyContent(ast)) {
    return '';
  }

  // Process based on node type
  switch (ast.type) {
    case ASTNodeType.document:
      // Filter out empty children
      return ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
    case ASTNodeType.block:
      // Filter out empty children
      return ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
    case ASTNodeType.paragraph:
      {
        const content = ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
        return content.trim() ? `${content}` : '';
      }
    case ASTNodeType.code_block:
      {
        // Handle language specifier for syntax highlighting
        let language = '';
        let content = '';
        for (const child of ast.children) {
          if (child.type === ASTNodeType.language_specifier) {
            language = child.value || '';
          } else if (child.type === ASTNodeType.code_content) {
            content += (child.value || '') + '\n';
          }
        }

        // Trim trailing newline
        content = content.trim();

        // Don't generate empty code blocks
        if (!content) return '';

        // Add language class if specified
        const languageAttr = language ? ` class="language-${language}"` : '';
        return `<pre><code${languageAttr}>${escapeHTML(content)}</code></pre>`;
      }
    case ASTNodeType.code_content:
      return ast.value || "";
    case ASTNodeType.bold:
      {
        const content = ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
        return content.trim() ? `<strong>${content}</strong>` : '';
      }
    case ASTNodeType.italic:
      {
        const content = ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
        return content.trim() ? `<em>${content}</em>` : '';
      }
    case ASTNodeType.strike:
      {
        const content = ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
        return content.trim() ? `<del>${content}</del>` : '';
      }
    case ASTNodeType.spoiler:
      {
        const content = ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
        return content.trim() ? `<span class="spoiler">${content}</span>` : '';
      }
    case ASTNodeType.inline_code:
      {
        // Get content by filtering out markers
        const content = ast.children.filter(child => child.type !== TokenType.INLINE_CODE_MARKER).map(child => child.value || '').join('');
        return content.trim() ? `<code>${escapeHTML(content)}</code>` : '';
      }
    case ASTNodeType.emoji:
      {
        // Extract emoji name and ID
        let emojiName = '';
        let emojiId = '';
        for (const child of ast.children) {
          if (child.type === TokenType.EMOJI_TEXT) {
            emojiName = child.value || '';
          } else if (child.type === TokenType.NUMBER) {
            emojiId = child.value || '';
          }
        }
        if (emojiName && emojiId) {
          return `<span class="emoji" data-emoji-id="${emojiId}">${emojiName}</span>`;
        }
        return ast.value || '';
      }
    case ASTNodeType.link:
      {
        // Extract link text and URL
        let linkText = '';
        let linkUrl = '';
        let inUrl = false;
        for (const child of ast.children) {
          if (child.type === TokenType.LPAREN) {
            inUrl = true;
          } else if (child.type === TokenType.RPAREN) {
            inUrl = false;
          } else if (child.type !== TokenType.LBRACKET && child.type !== TokenType.RBRACKET) {
            if (inUrl) {
              linkUrl += child.value || '';
            } else {
              linkText += generateHTML(child);
            }
          }
        }
        if (linkText.trim() && linkUrl.trim()) {
          return `<a href="${escapeAttribute(linkUrl)}">${linkText}</a>`;
        }
        return linkText;
      }
    case ASTNodeType.plain_text:
      return ast.value ? escapeHTML(ast.value) : '';
    case ASTNodeType.inline:
      return ast.children.map(generateHTML).filter(html => html.trim() !== '').join("");
    default:
      // Markers and special tokens - ignore them
      if ([TokenType.BOLD_MARKER, TokenType.ITALIC_MARKER, TokenType.STRIKE_MARKER, TokenType.SPOILER_MARKER, TokenType.INLINE_CODE_MARKER, TokenType.CODE_FENCE, TokenType.LBRACKET, TokenType.RBRACKET, TokenType.LPAREN, TokenType.RPAREN, TokenType.LANGUAGE_SPECIFIER, TokenType.NEWLINE, TokenType.EOF].includes(ast.type)) {
        return '';
      }

      // Fallback: return the node's value or process its children
      return ast.value || (ast.children ? ast.children.map(generateHTML).filter(html => html.trim() !== '').join("") : '');
  }
}
// Helper function to escape HTML special characters
function escapeHTML(text) {
  return text;
  // .replace(/&/g, '&amp;')
  // .replace(/</g, '&lt;')
  // .replace(/>/g, '&gt;')
  // .replace(/"/g, '&quot;')
  // .replace(/'/g, '&#039;');
}
// Helper function to escape HTML attribute values
function escapeAttribute(text) {
  return text;
  // .replace(/&/g, '&amp;')
  // .replace(/"/g, '&quot;')
  // .replace(/'/g, '&#039;');
}

/***/ }),

/***/ "./src/util/progressiveLoader.ts":
/*!***************************************!*\
  !*** ./src/util/progressiveLoader.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeProgressiveLoader: () => (/* binding */ makeProgressiveLoader)
/* harmony export */ });
/* harmony import */ var _api_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/types */ "./src/api/types/index.ts");
/* harmony import */ var _api_gramjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/gramjs */ "./src/api/gramjs/index.ts");


const MB = 1024 * 1024;
const DEFAULT_PART_SIZE = 0.25 * MB;
const MAX_END_TO_CACHE = 5 * MB - 1; // We only cache the first 2 MB of each file

const bufferCache = new Map();
const sizeCache = new Map();
const pendingRequests = new Map();
async function* makeProgressiveLoader(url, start = 0, chunkSize = DEFAULT_PART_SIZE) {
  const match = url.match(/fileSize=(\d+)/);
  let fileSize;
  if (match) {
    fileSize = match && Number(match[1]);
  } else {
    fileSize = sizeCache.get(url);
  }
  while (true) {
    if (fileSize && start >= fileSize) return;
    let end = start + chunkSize - 1;
    if (fileSize && end > fileSize) {
      end = fileSize - 1;
    }

    // Check if we have the chunk in memory
    const cacheKey = `${url}:${start}-${end}`;
    let arrayBuffer = bufferCache.get(cacheKey);
    if (!arrayBuffer) {
      let request = pendingRequests.get(cacheKey);
      if (!request) {
        request = (0,_api_gramjs__WEBPACK_IMPORTED_MODULE_1__.callApi)('downloadMedia', {
          mediaFormat: _api_types__WEBPACK_IMPORTED_MODULE_0__.ApiMediaFormat.Progressive,
          url,
          start,
          end
        });
        pendingRequests.set(cacheKey, request);
      }
      const result = await request.finally(() => {
        pendingRequests.delete(cacheKey);
      });
      if (!result?.arrayBuffer) return;

      // If fileSize is not yet defined, retrieve it from the first chunk's response
      if (result.fullSize && !fileSize) {
        fileSize = result.fullSize;
        sizeCache.set(url, result.fullSize);
      }

      // Store the chunk in memory
      arrayBuffer = result.arrayBuffer;

      // Cache the first 2 MB of each file
      if (end <= MAX_END_TO_CACHE) {
        bufferCache.set(cacheKey, result.arrayBuffer);
      }
    }

    // Yield the chunk data
    yield arrayBuffer;
    start = end + 1;
  }
}

/***/ }),

/***/ "./src/util/selection.ts":
/*!*******************************!*\
  !*** ./src/util/selection.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCaretPosition: () => (/* binding */ getCaretPosition),
/* harmony export */   getHtmlBeforeSelection: () => (/* binding */ getHtmlBeforeSelection),
/* harmony export */   insertHtmlInSelection: () => (/* binding */ insertHtmlInSelection),
/* harmony export */   removeAllSelections: () => (/* binding */ removeAllSelections),
/* harmony export */   setCaretPosition: () => (/* binding */ setCaretPosition)
/* harmony export */ });
const extractorEl = document.createElement('div');
function insertHtmlInSelection(html) {
  document.execCommand('insertHTML', false, html);
}
function getHtmlBeforeSelection(container, useCommonAncestor) {
  if (!container) {
    return '';
  }
  const sel = window.getSelection();
  if (!sel || !sel.rangeCount) {
    return container.innerHTML;
  }
  const range = sel.getRangeAt(0).cloneRange();
  if (!range.intersectsNode(container)) {
    return container.innerHTML;
  }
  if (!useCommonAncestor && !container.contains(range.commonAncestorContainer)) {
    return '';
  }
  range.collapse(true);
  range.setStart(container, 0);
  extractorEl.innerHTML = '';
  extractorEl.appendChild(range.cloneContents());
  return extractorEl.innerHTML;
}

// https://stackoverflow.com/a/3976125
function getCaretPosition(element) {
  let caretPosition = 0;
  const selection = window.getSelection();
  if (!selection || selection.rangeCount === 0) {
    return caretPosition;
  }
  const range = selection.getRangeAt(0);
  const caretRange = range.cloneRange();
  caretRange.selectNodeContents(element);
  caretRange.setEnd(range.endContainer, range.endOffset);
  caretPosition = caretRange.toString().length;
  return caretPosition;
}

// https://stackoverflow.com/a/36953852
function setCaretPosition(element, position) {
  for (const node of element.childNodes) {
    if (node.nodeType === Node.TEXT_NODE) {
      if (node.length >= position) {
        const range = document.createRange();
        const selection = window.getSelection();
        range.setStart(node, position);
        range.collapse(true);
        selection.removeAllRanges();
        selection.addRange(range);
        return -1;
      } else {
        position -= 'length' in node ? node.length : 0;
      }
    } else {
      position = setCaretPosition(node, position);
      if (position === -1) {
        return -1;
      }
    }
  }
  return position;
}
function removeAllSelections() {
  const selection = window.getSelection();
  selection?.removeAllRanges();
}

/***/ }),

/***/ "./src/util/systemFilesDialog.ts":
/*!***************************************!*\
  !*** ./src/util/systemFilesDialog.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   openSystemFilesDialog: () => (/* binding */ openSystemFilesDialog)
/* harmony export */ });
let fileSelector;
function openSystemFilesDialog(accept = '*', callback, noMultiple = false) {
  if (!fileSelector) {
    fileSelector = document.createElement('input');
    fileSelector.setAttribute('type', 'file');
  }
  fileSelector.setAttribute('accept', accept);
  if (noMultiple) {
    fileSelector.removeAttribute('multiple');
  } else {
    fileSelector.setAttribute('multiple', 'multiple');
  }

  // eslint-disable-next-line no-null/no-null
  fileSelector.onchange = null;
  fileSelector.value = '';
  fileSelector.onchange = callback;
  fileSelector.click();
}

/***/ }),

/***/ "./src/util/visibility/isElementInViewport.ts":
/*!****************************************************!*\
  !*** ./src/util/visibility/isElementInViewport.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isElementInViewport: () => (/* binding */ isElementInViewport)
/* harmony export */ });
/* harmony import */ var _windowSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../windowSize */ "./src/util/windowSize.ts");

function isElementInViewport(el) {
  if (el.style.display === 'none') {
    return false;
  }
  const rect = el.getBoundingClientRect();
  const {
    height: windowHeight
  } = _windowSize__WEBPACK_IMPORTED_MODULE_0__["default"].get();
  return rect.top <= windowHeight && rect.top + rect.height >= 0;
}

/***/ }),

/***/ "./src/util/voiceRecording.ts":
/*!************************************!*\
  !*** ./src/util/voiceRecording.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   start: () => (/* binding */ start)
/* harmony export */ });
/* harmony import */ var _lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/fasterdom/fasterdom */ "./src/lib/fasterdom/fasterdom.ts");

const encoderPath = new URL(/* asset import */ __webpack_require__(/*! opus-recorder/dist/encoderWorker.min */ "./node_modules/opus-recorder/dist/encoderWorker.min.js"), __webpack_require__.b).href;
const MIN_RECORDING_TIME = 1000;
const POLYFILL_OPTIONS = {
  encoderPath,
  reuseWorker: true
};
const BLOB_PARAMS = {
  type: 'audio/ogg'
};
const FFT_SIZE = 64;
const MIN_VOLUME = 0.1;
let opusRecorderPromise;
let OpusRecorder;
let mediaRecorder;
async function init() {
  if (!opusRecorderPromise) {
    opusRecorderPromise = __webpack_require__.e(/*! import() */ "node_modules_opus-recorder_dist_recorder_min_js").then(__webpack_require__.t.bind(__webpack_require__, /*! opus-recorder */ "./node_modules/opus-recorder/dist/recorder.min.js", 23));
    OpusRecorder = (await opusRecorderPromise).default;
    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);
  }
  return opusRecorderPromise;
}
async function start(analyzerCallback) {
  await startMediaRecorder();
  const startedAt = Date.now();
  let pausedAt;
  const chunks = [];
  const waveform = [];
  mediaRecorder.ondataavailable = typedArray => {
    chunks.push(typedArray);
  };
  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, volume => {
    waveform.push(volume * 255);
    analyzerCallback(volume);
  });
  return {
    stop: () => new Promise((resolve, reject) => {
      mediaRecorder.onstop = () => {
        resolve({
          blob: new Blob(chunks, BLOB_PARAMS),
          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),
          waveform
        });
      };
      mediaRecorder.onerror = reject;
      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());
      setTimeout(() => {
        mediaRecorder.stop();
        releaseAnalyzer();
      }, delayStop);
    }),
    pause: () => {
      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());
      setTimeout(() => {
        mediaRecorder.pause();
        pausedAt = Date.now();
        releaseAnalyzer();
      }, delayStop);
    }
  };
}
async function startMediaRecorder() {
  await init();
  await mediaRecorder.start();
}
function subscribeToAnalyzer(recorder, cb) {
  const source = recorder.sourceNode;
  const analyser = source.context.createAnalyser();
  analyser.fftSize = FFT_SIZE;
  source.connect(analyser);
  const dataLength = analyser.frequencyBinCount;
  const dataArray = new Uint8Array(dataLength);
  let isDestroyed = false;
  function tick() {
    if (isDestroyed) {
      return;
    }
    analyser.getByteFrequencyData(dataArray);
    const sum = dataArray.reduce((acc, current) => acc + current, 0);
    const mean = sum / dataLength;
    const volume = mean / 255;
    cb(volume < MIN_VOLUME ? 0 : volume);
    (0,_lib_fasterdom_fasterdom__WEBPACK_IMPORTED_MODULE_0__.requestMeasure)(tick);
  }
  tick();
  return () => {
    isDestroyed = true;
  };
}

/***/ }),

/***/ "./src/util/waveform.ts":
/*!******************************!*\
  !*** ./src/util/waveform.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeWaveform: () => (/* binding */ decodeWaveform),
/* harmony export */   interpolateArray: () => (/* binding */ interpolateArray)
/* harmony export */ });
/* eslint-disable no-bitwise */

// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018
function decodeWaveform(encoded5bit) {
  const bitsCount = encoded5bit.length * 8;
  const valuesCount = Math.floor(bitsCount / 5);
  if (!valuesCount) {
    return [];
  }

  // Read each 5 bit of encoded5bit as 0-31 unsigned char.
  // We count the index of the byte in which the desired 5-bit sequence starts.
  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.
  //
  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.
  // Because it will be an overflow (we'll access one byte after the available memory).
  // We see, that only the last 5 bits could start in the last available byte and be problematic.
  // So we read in a general way all the entries in a general way except the last one.
  const result = Array(valuesCount);
  const bitsData = encoded5bit;
  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {
    const byteIndex = Math.floor(i * 5 / 8);
    const bitShift = Math.floor(i * 5 % 8);
    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);
    result[i] = value >> bitShift & 0x1F;
  }
  const lastByteIndex = Math.floor((valuesCount - 1) * 5 / 8);
  const lastBitShift = Math.floor((valuesCount - 1) * 5 % 8);
  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);
  result[valuesCount - 1] = lastValue >> lastBitShift & 0x1F;
  return result;
}
function interpolateArray(data, fitCount) {
  let peak = 0;
  const newData = new Array(fitCount);
  const springFactor = data.length / fitCount;
  const leftFiller = data[0];
  const rightFiller = data[data.length - 1];
  for (let i = 0; i < fitCount; i++) {
    const idx = Math.floor(i * springFactor);
    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;
    newData[i] = val;
    if (peak < val) {
      peak = val;
    }
  }
  return {
    data: newData,
    peak
  };
}

/***/ }),

/***/ "./src/components/calls/group/GroupCallTopPane.scss":
/*!**********************************************************!*\
  !*** ./src/components/calls/group/GroupCallTopPane.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/Audio.scss":
/*!******************************************!*\
  !*** ./src/components/common/Audio.scss ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/ChatForumLastMessage.module.scss":
/*!****************************************************************!*\
  !*** ./src/components/common/ChatForumLastMessage.module.scss ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"ChatForumLastMessage-module__root","title-row":"ChatForumLastMessage-module__title-row","titleRow":"ChatForumLastMessage-module__title-row","loading":"ChatForumLastMessage-module__loading","other-column":"ChatForumLastMessage-module__other-column","otherColumn":"ChatForumLastMessage-module__other-column","main-column":"ChatForumLastMessage-module__main-column","mainColumn":"ChatForumLastMessage-module__main-column","unread":"ChatForumLastMessage-module__unread","last-message":"ChatForumLastMessage-module__last-message","lastMessage":"ChatForumLastMessage-module__last-message","after-wrapper":"ChatForumLastMessage-module__after-wrapper","afterWrapper":"ChatForumLastMessage-module__after-wrapper","after":"ChatForumLastMessage-module__after","title":"ChatForumLastMessage-module__title","otherColumnIcon":"ChatForumLastMessage-module__otherColumnIcon","other-column-title":"ChatForumLastMessage-module__other-column-title","otherColumnTitle":"ChatForumLastMessage-module__other-column-title","other-columns":"ChatForumLastMessage-module__other-columns","otherColumns":"ChatForumLastMessage-module__other-columns","ellipsis":"ChatForumLastMessage-module__ellipsis","reverse-corner":"ChatForumLastMessage-module__reverse-corner","reverseCorner":"ChatForumLastMessage-module__reverse-corner","overwritten-width":"ChatForumLastMessage-module__overwritten-width","overwrittenWidth":"ChatForumLastMessage-module__overwritten-width"});

/***/ }),

/***/ "./src/components/common/Composer.scss":
/*!*********************************************!*\
  !*** ./src/components/common/Composer.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/DeleteChatModal.scss":
/*!****************************************************!*\
  !*** ./src/components/common/DeleteChatModal.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/DotAnimation.scss":
/*!*************************************************!*\
  !*** ./src/components/common/DotAnimation.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/File.scss":
/*!*****************************************!*\
  !*** ./src/components/common/File.scss ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/LastMessageMeta.scss":
/*!****************************************************!*\
  !*** ./src/components/common/LastMessageMeta.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/LinkField.module.scss":
/*!*****************************************************!*\
  !*** ./src/components/common/LinkField.module.scss ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"primaryLink":"LinkField-module__primaryLink","input":"LinkField-module__input","moreMenu":"LinkField-module__moreMenu","copy":"LinkField-module__copy","title":"LinkField-module__title"});

/***/ }),

/***/ "./src/components/common/Media.scss":
/*!******************************************!*\
  !*** ./src/components/common/Media.scss ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/MessageOutgoingStatus.scss":
/*!**********************************************************!*\
  !*** ./src/components/common/MessageOutgoingStatus.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/NothingFound.scss":
/*!*************************************************!*\
  !*** ./src/components/common/NothingFound.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/PeerColorWrapper.module.scss":
/*!************************************************************!*\
  !*** ./src/components/common/PeerColorWrapper.module.scss ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"PeerColorWrapper-module__root"});

/***/ }),

/***/ "./src/components/common/ProfileInfo.module.scss":
/*!*******************************************************!*\
  !*** ./src/components/common/ProfileInfo.module.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"fallbackPhoto":"ProfileInfo-module__fallbackPhoto","fallbackPhotoContents":"ProfileInfo-module__fallbackPhotoContents","fallbackPhotoVisible":"ProfileInfo-module__fallbackPhotoVisible","fallbackPhotoAvatar":"ProfileInfo-module__fallbackPhotoAvatar","photoWrapper":"ProfileInfo-module__photoWrapper","photoDashes":"ProfileInfo-module__photoDashes","photoDash":"ProfileInfo-module__photoDash","photoDash_current":"ProfileInfo-module__photoDash_current","photoDashCurrent":"ProfileInfo-module__photoDash_current","navigation":"ProfileInfo-module__navigation","navigation_prev":"ProfileInfo-module__navigation_prev","navigationPrev":"ProfileInfo-module__navigation_prev","navigation_next":"ProfileInfo-module__navigation_next","navigationNext":"ProfileInfo-module__navigation_next","info":"ProfileInfo-module__info","status":"ProfileInfo-module__status","user-status":"ProfileInfo-module__user-status","userStatus":"ProfileInfo-module__user-status","get-status":"ProfileInfo-module__get-status","getStatus":"ProfileInfo-module__get-status","topicContainer":"ProfileInfo-module__topicContainer","topicTitle":"ProfileInfo-module__topicTitle","topicIcon":"ProfileInfo-module__topicIcon","topicIconTitle":"ProfileInfo-module__topicIconTitle","topicMessagesCounter":"ProfileInfo-module__topicMessagesCounter"});

/***/ }),

/***/ "./src/components/common/ProfileInfo.scss":
/*!************************************************!*\
  !*** ./src/components/common/ProfileInfo.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/ProfilePhoto.scss":
/*!*************************************************!*\
  !*** ./src/components/common/ProfilePhoto.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/TypingStatus.scss":
/*!*************************************************!*\
  !*** ./src/components/common/TypingStatus.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/WebLink.scss":
/*!********************************************!*\
  !*** ./src/components/common/WebLink.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/embedded/EmbeddedMessage.scss":
/*!*************************************************************!*\
  !*** ./src/components/common/embedded/EmbeddedMessage.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/common/embedded/EmojiIconBackground.module.scss":
/*!************************************************************************!*\
  !*** ./src/components/common/embedded/EmojiIconBackground.module.scss ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"EmojiIconBackground-module__root"});

/***/ }),

/***/ "./src/components/common/profile/BusinessHours.module.scss":
/*!*****************************************************************!*\
  !*** ./src/components/common/profile/BusinessHours.module.scss ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"BusinessHours-module__root","top":"BusinessHours-module__top","icon":"BusinessHours-module__icon","left":"BusinessHours-module__left","bottom":"BusinessHours-module__bottom","status":"BusinessHours-module__status","status-open":"BusinessHours-module__status-open","statusOpen":"BusinessHours-module__status-open","arrow":"BusinessHours-module__arrow","offset-trigger":"BusinessHours-module__offset-trigger","offsetTrigger":"BusinessHours-module__offset-trigger","transition":"BusinessHours-module__transition","timetable":"BusinessHours-module__timetable","schedule":"BusinessHours-module__schedule","weekday":"BusinessHours-module__weekday","current-day":"BusinessHours-module__current-day","currentDay":"BusinessHours-module__current-day"});

/***/ }),

/***/ "./src/components/common/profile/ChatExtra.module.scss":
/*!*************************************************************!*\
  !*** ./src/components/common/profile/ChatExtra.module.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"businessLocation":"ChatExtra-module__businessLocation","personalChannel":"ChatExtra-module__personalChannel","personalChannelTitle":"ChatExtra-module__personalChannelTitle","botVerificationSection":"ChatExtra-module__botVerificationSection","sectionInfo":"ChatExtra-module__sectionInfo","botVerificationIcon":"ChatExtra-module__botVerificationIcon","personalChannelSubscribers":"ChatExtra-module__personalChannelSubscribers","personalChannelItem":"ChatExtra-module__personalChannelItem","openAppButton":"ChatExtra-module__openAppButton"});

/***/ }),

/***/ "./src/components/common/profile/UserBirthday.module.scss":
/*!****************************************************************!*\
  !*** ./src/components/common/profile/UserBirthday.module.scss ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"UserBirthday-module__root","number":"UserBirthday-module__number","float":"UserBirthday-module__float","show-up":"UserBirthday-module__show-up","showUp":"UserBirthday-module__show-up","dissapear":"UserBirthday-module__dissapear","shiftOrigin":"UserBirthday-module__shiftOrigin","effect":"UserBirthday-module__effect","giftIcon":"UserBirthday-module__giftIcon"});

/***/ }),

/***/ "./src/components/left/main/Archive.module.scss":
/*!******************************************************!*\
  !*** ./src/components/left/main/Archive.module.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"Archive-module__root","minimized":"Archive-module__minimized","button":"Archive-module__button","title":"Archive-module__title","unread-count":"Archive-module__unread-count","unreadCount":"Archive-module__unread-count","info":"Archive-module__info","name":"Archive-module__name","icon":"Archive-module__icon","avatarWrapper":"Archive-module__avatarWrapper","avatar":"Archive-module__avatar","chatsPreview":"Archive-module__chatsPreview","unread":"Archive-module__unread"});

/***/ }),

/***/ "./src/components/left/main/Chat.scss":
/*!********************************************!*\
  !*** ./src/components/left/main/Chat.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/left/main/ChatBadge.scss":
/*!*************************************************!*\
  !*** ./src/components/left/main/ChatBadge.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/left/main/ChatCallStatus.module.scss":
/*!*************************************************************!*\
  !*** ./src/components/left/main/ChatCallStatus.module.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"ChatCallStatus-module__root","indicator":"ChatCallStatus-module__indicator","indicatorInner":"ChatCallStatus-module__indicatorInner","selected":"ChatCallStatus-module__selected","active":"ChatCallStatus-module__active","bar-animation-transform-2":"ChatCallStatus-module__bar-animation-transform-2","barAnimationTransform2":"ChatCallStatus-module__bar-animation-transform-2","bar-animation-transform-1":"ChatCallStatus-module__bar-animation-transform-1","barAnimationTransform1":"ChatCallStatus-module__bar-animation-transform-1"});

/***/ }),

/***/ "./src/components/left/main/EmptyFolder.module.scss":
/*!**********************************************************!*\
  !*** ./src/components/left/main/EmptyFolder.module.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"EmptyFolder-module__root","sticker":"EmptyFolder-module__sticker","title":"EmptyFolder-module__title","description":"EmptyFolder-module__description","is-ios":"EmptyFolder-module__is-ios","isIos":"EmptyFolder-module__is-ios","is-macos":"EmptyFolder-module__is-macos","isMacos":"EmptyFolder-module__is-macos","button-text":"EmptyFolder-module__button-text","buttonText":"EmptyFolder-module__button-text","centered":"EmptyFolder-module__centered"});

/***/ }),

/***/ "./src/components/left/main/EmptyForum.module.scss":
/*!*********************************************************!*\
  !*** ./src/components/left/main/EmptyForum.module.scss ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"EmptyForum-module__root","button-text":"EmptyForum-module__button-text","buttonText":"EmptyForum-module__button-text","sticker":"EmptyForum-module__sticker","title":"EmptyForum-module__title","description":"EmptyForum-module__description","is-ios":"EmptyForum-module__is-ios","isIos":"EmptyForum-module__is-ios","is-macos":"EmptyForum-module__is-macos","isMacos":"EmptyForum-module__is-macos"});

/***/ }),

/***/ "./src/components/left/main/ForumPanel.module.scss":
/*!*********************************************************!*\
  !*** ./src/components/left/main/ForumPanel.module.scss ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"ForumPanel-module__root","rtl":"ForumPanel-module__rtl","no-animation":"ForumPanel-module__no-animation","noAnimation":"ForumPanel-module__no-animation","notch":"ForumPanel-module__notch","scrolled":"ForumPanel-module__scrolled","scroll-top-handler":"ForumPanel-module__scroll-top-handler","scrollTopHandler":"ForumPanel-module__scroll-top-handler","info":"ForumPanel-module__info"});

/***/ }),

/***/ "./src/components/left/main/Topic.module.scss":
/*!****************************************************!*\
  !*** ./src/components/left/main/Topic.module.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"Topic-module__root","closed-icon":"Topic-module__closed-icon","closedIcon":"Topic-module__closed-icon","topic-icon":"Topic-module__topic-icon","topicIcon":"Topic-module__topic-icon"});

/***/ }),

/***/ "./src/components/left/main/UnconfirmedSession.module.scss":
/*!*****************************************************************!*\
  !*** ./src/components/left/main/UnconfirmedSession.module.scss ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"minimized":"Archive-module__minimized","root":"UnconfirmedSession-module__root","title":"UnconfirmedSession-module__title","info":"UnconfirmedSession-module__info","buttons":"UnconfirmedSession-module__buttons","button":"UnconfirmedSession-module__button"});

/***/ }),

/***/ "./src/components/main/visualEffects/SnapEffectContainer.module.scss":
/*!***************************************************************************!*\
  !*** ./src/components/main/visualEffects/SnapEffectContainer.module.scss ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"SnapEffectContainer-module__root","ghost":"SnapEffectContainer-module__ghost","scale":"SnapEffectContainer-module__scale","elementContainer":"SnapEffectContainer-module__elementContainer"});

/***/ }),

/***/ "./src/components/middle/composer/AttachBotIcon.module.scss":
/*!******************************************************************!*\
  !*** ./src/components/middle/composer/AttachBotIcon.module.scss ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"AttachBotIcon-module__root","compact":"AttachBotIcon-module__compact","image":"AttachBotIcon-module__image"});

/***/ }),

/***/ "./src/components/middle/composer/AttachMenu.scss":
/*!********************************************************!*\
  !*** ./src/components/middle/composer/AttachMenu.scss ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/composer/BotKeyboardMenu.scss":
/*!*************************************************************!*\
  !*** ./src/components/middle/composer/BotKeyboardMenu.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/composer/ComposerEmbeddedMessage.scss":
/*!*********************************************************************!*\
  !*** ./src/components/middle/composer/ComposerEmbeddedMessage.scss ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/composer/DropArea.scss":
/*!******************************************************!*\
  !*** ./src/components/middle/composer/DropArea.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/composer/DropTarget.scss":
/*!********************************************************!*\
  !*** ./src/components/middle/composer/DropTarget.scss ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/composer/WebPagePreview.scss":
/*!************************************************************!*\
  !*** ./src/components/middle/composer/WebPagePreview.scss ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/BaseStory.module.scss":
/*!*************************************************************!*\
  !*** ./src/components/middle/message/BaseStory.module.scss ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"BaseStory-module__root","preview":"BaseStory-module__preview","linkPreview":"BaseStory-module__linkPreview","media":"BaseStory-module__media","nonInteractive":"BaseStory-module__nonInteractive","expired":"BaseStory-module__expired","expiredIcon":"BaseStory-module__expiredIcon"});

/***/ }),

/***/ "./src/components/middle/message/MessageContextMenu.scss":
/*!***************************************************************!*\
  !*** ./src/components/middle/message/MessageContextMenu.scss ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/MessageEffect.module.scss":
/*!*****************************************************************!*\
  !*** ./src/components/middle/message/MessageEffect.module.scss ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"anchor":"MessageEffect-module__anchor","mirrorAnchor":"MessageEffect-module__mirrorAnchor","root":"MessageEffect-module__root","mirror":"MessageEffect-module__mirror"});

/***/ }),

/***/ "./src/components/middle/message/RoundVideo.scss":
/*!*******************************************************!*\
  !*** ./src/components/middle/message/RoundVideo.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/WebPage.scss":
/*!****************************************************!*\
  !*** ./src/components/middle/message/WebPage.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/reactions/ReactionSelector.scss":
/*!***********************************************************************!*\
  !*** ./src/components/middle/message/reactions/ReactionSelector.scss ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/components/middle/message/reactions/ReactionSelectorReaction.module.scss":
/*!**************************************************************************************!*\
  !*** ./src/components/middle/message/reactions/ReactionSelectorReaction.module.scss ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"ReactionSelectorReaction-module__root","custom":"ReactionSelectorReaction-module__custom","visible":"ReactionSelectorReaction-module__visible","custom-animated":"ReactionSelectorReaction-module__custom-animated","customAnimated":"ReactionSelectorReaction-module__custom-animated","custom-fade-in":"ReactionSelectorReaction-module__custom-fade-in","customFadeIn":"ReactionSelectorReaction-module__custom-fade-in","chosen":"ReactionSelectorReaction-module__chosen","static-icon":"ReactionSelectorReaction-module__static-icon","staticIcon":"ReactionSelectorReaction-module__static-icon","lock":"ReactionSelectorReaction-module__lock"});

/***/ }),

/***/ "./src/components/right/statistics/StatisticsOverview.module.scss":
/*!************************************************************************!*\
  !*** ./src/components/right/statistics/StatisticsOverview.module.scss ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"StatisticsOverview-module__root","header":"StatisticsOverview-module__header","title":"StatisticsOverview-module__title","caption":"StatisticsOverview-module__caption","table":"StatisticsOverview-module__table","tableCell":"StatisticsOverview-module__tableCell","tableHeading":"StatisticsOverview-module__tableHeading","tableValue":"StatisticsOverview-module__tableValue","tableSecondaryValue":"StatisticsOverview-module__tableSecondaryValue","value":"StatisticsOverview-module__value","negative":"StatisticsOverview-module__negative","decimalPart":"StatisticsOverview-module__decimalPart","decimalUsdPart":"StatisticsOverview-module__decimalUsdPart","toncoin":"StatisticsOverview-module__toncoin"});

/***/ }),

/***/ "./src/components/story/StoryRibbon.module.scss":
/*!******************************************************!*\
  !*** ./src/components/story/StoryRibbon.module.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"root":"StoryRibbon-module__root","fadeIn":"StoryRibbon-module__fadeIn","closing":"StoryRibbon-module__closing","peer":"StoryRibbon-module__peer","name":"StoryRibbon-module__name","name_hasUnreadStory":"StoryRibbon-module__name_hasUnreadStory","nameHasUnreadStory":"StoryRibbon-module__name_hasUnreadStory","hidden":"StoryRibbon-module__hidden","contextMenu":"StoryRibbon-module__contextMenu"});

/***/ }),

/***/ "./src/components/story/StoryToggler.module.scss":
/*!*******************************************************!*\
  !*** ./src/components/story/StoryToggler.module.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"name":"StoryRibbon-module__name","root":"StoryToggler-module__root","avatar":"StoryToggler-module__avatar","avatarHidden":"StoryToggler-module__avatarHidden","ghost":"StoryToggler-module__ghost","ghostAnimateName":"StoryToggler-module__ghostAnimateName","ghostRevealName":"StoryToggler-module__ghostRevealName","ghostLast":"StoryToggler-module__ghostLast"});

/***/ }),

/***/ "./src/components/story/mediaArea/MediaArea.module.scss":
/*!**************************************************************!*\
  !*** ./src/components/story/mediaArea/MediaArea.module.scss ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// extracted by mini-css-extract-plugin
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"overlay":"MediaArea-module__overlay","mediaArea":"MediaArea-module__mediaArea","preview":"MediaArea-module__preview","shiny":"MediaArea-module__shiny","wave":"MediaArea-module__wave","light":"MediaArea-module__light","dark":"MediaArea-module__dark","reactionBackground":"MediaArea-module__reactionBackground","flipped":"MediaArea-module__flipped","reaction":"MediaArea-module__reaction","withCount":"MediaArea-module__withCount","reactionCount":"MediaArea-module__reactionCount","weather":"MediaArea-module__weather","weatherInner":"MediaArea-module__weatherInner","temperature":"MediaArea-module__temperature"});

/***/ }),

/***/ "./node_modules/opus-recorder/dist/encoderWorker.min.js":
/*!**************************************************************!*\
  !*** ./node_modules/opus-recorder/dist/encoderWorker.min.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "encoderWorker.min.c0155344d336103c2b6a.js";

/***/ }),

/***/ "./src/assets/premium/GiftBlueRound.svg":
/*!**********************************************!*\
  !*** ./src/assets/premium/GiftBlueRound.svg ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "GiftBlueRound.90e369f0f350cdfb20d4.svg";

/***/ }),

/***/ "./src/assets/premium/GiftGreenRound.svg":
/*!***********************************************!*\
  !*** ./src/assets/premium/GiftGreenRound.svg ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "GiftGreenRound.f66f0acd5d3dda1c7baf.svg";

/***/ }),

/***/ "./src/assets/premium/GiftRedRound.svg":
/*!*********************************************!*\
  !*** ./src/assets/premium/GiftRedRound.svg ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "GiftRedRound.a86b78b0b99e07f69a70.svg";

/***/ }),

/***/ "./src/assets/premium/GiftStar.svg":
/*!*****************************************!*\
  !*** ./src/assets/premium/GiftStar.svg ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "GiftStar.59a3e3598fdbab13b181.svg";

/***/ })

}]);
//# sourceMappingURL=src_components_common_Composer_tsx-src_components_common_LinkField_tsx-src_components_common_-cced95.ada1c55d404554c2c33d.js.map